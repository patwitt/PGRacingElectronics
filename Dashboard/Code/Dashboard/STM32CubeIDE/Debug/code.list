
code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002afc4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000474c  0802b1c8  0802b1c8  0003b1c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000a9c5e  0802f914  0802f914  0003f914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000000fc  080d9574  080d9574  000e9574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 0000030c  080d9670  080d9670  000e9670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  080d997c  080d997c  001898c8  2**0
                  CONTENTS
  7 .ARM          00000008  080d997c  080d997c  000e997c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  080d9984  080d9984  001898c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000030  080d9984  080d9984  000e9984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  080d99b4  080d99b4  000e99b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000254  20000000  080d99bc  000f0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00056f90  20000254  080d9c10  000f0254  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  200571e4  080d9c10  000f71e4  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  001898c8  2**0
                  CONTENTS, READONLY
 15 ExtFlashSection 000898c8  90000000  90000000  00100000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .debug_info   000e6e90  00000000  00000000  001898f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00018f9b  00000000  00000000  00270786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000042e0  00000000  00000000  00289728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00003c90  00000000  00000000  0028da08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0003a9b0  00000000  00000000  00291698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0005240a  00000000  00000000  002cc048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001300b3  00000000  00000000  0031e452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000d2  00000000  00000000  0044e505  2**0
                  CONTENTS, READONLY
 24 .debug_frame  000127e4  00000000  00000000  0044e5d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000254 	.word	0x20000254
 800021c:	00000000 	.word	0x00000000
 8000220:	0802b1ac 	.word	0x0802b1ac

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000258 	.word	0x20000258
 800023c:	0802b1ac 	.word	0x0802b1ac

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a6 	b.w	80009cc <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468c      	mov	ip, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 8083 	bne.w	800081e <__udivmoddi4+0x116>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d947      	bls.n	80007ae <__udivmoddi4+0xa6>
 800071e:	fab2 f282 	clz	r2, r2
 8000722:	b142      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000724:	f1c2 0020 	rsb	r0, r2, #32
 8000728:	fa24 f000 	lsr.w	r0, r4, r0
 800072c:	4091      	lsls	r1, r2
 800072e:	4097      	lsls	r7, r2
 8000730:	ea40 0c01 	orr.w	ip, r0, r1
 8000734:	4094      	lsls	r4, r2
 8000736:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800073a:	0c23      	lsrs	r3, r4, #16
 800073c:	fbbc f6f8 	udiv	r6, ip, r8
 8000740:	fa1f fe87 	uxth.w	lr, r7
 8000744:	fb08 c116 	mls	r1, r8, r6, ip
 8000748:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074c:	fb06 f10e 	mul.w	r1, r6, lr
 8000750:	4299      	cmp	r1, r3
 8000752:	d909      	bls.n	8000768 <__udivmoddi4+0x60>
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	f106 30ff 	add.w	r0, r6, #4294967295
 800075a:	f080 8119 	bcs.w	8000990 <__udivmoddi4+0x288>
 800075e:	4299      	cmp	r1, r3
 8000760:	f240 8116 	bls.w	8000990 <__udivmoddi4+0x288>
 8000764:	3e02      	subs	r6, #2
 8000766:	443b      	add	r3, r7
 8000768:	1a5b      	subs	r3, r3, r1
 800076a:	b2a4      	uxth	r4, r4
 800076c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000770:	fb08 3310 	mls	r3, r8, r0, r3
 8000774:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000778:	fb00 fe0e 	mul.w	lr, r0, lr
 800077c:	45a6      	cmp	lr, r4
 800077e:	d909      	bls.n	8000794 <__udivmoddi4+0x8c>
 8000780:	193c      	adds	r4, r7, r4
 8000782:	f100 33ff 	add.w	r3, r0, #4294967295
 8000786:	f080 8105 	bcs.w	8000994 <__udivmoddi4+0x28c>
 800078a:	45a6      	cmp	lr, r4
 800078c:	f240 8102 	bls.w	8000994 <__udivmoddi4+0x28c>
 8000790:	3802      	subs	r0, #2
 8000792:	443c      	add	r4, r7
 8000794:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000798:	eba4 040e 	sub.w	r4, r4, lr
 800079c:	2600      	movs	r6, #0
 800079e:	b11d      	cbz	r5, 80007a8 <__udivmoddi4+0xa0>
 80007a0:	40d4      	lsrs	r4, r2
 80007a2:	2300      	movs	r3, #0
 80007a4:	e9c5 4300 	strd	r4, r3, [r5]
 80007a8:	4631      	mov	r1, r6
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	b902      	cbnz	r2, 80007b2 <__udivmoddi4+0xaa>
 80007b0:	deff      	udf	#255	; 0xff
 80007b2:	fab2 f282 	clz	r2, r2
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	d150      	bne.n	800085c <__udivmoddi4+0x154>
 80007ba:	1bcb      	subs	r3, r1, r7
 80007bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007c0:	fa1f f887 	uxth.w	r8, r7
 80007c4:	2601      	movs	r6, #1
 80007c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ca:	0c21      	lsrs	r1, r4, #16
 80007cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80007d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007d4:	fb08 f30c 	mul.w	r3, r8, ip
 80007d8:	428b      	cmp	r3, r1
 80007da:	d907      	bls.n	80007ec <__udivmoddi4+0xe4>
 80007dc:	1879      	adds	r1, r7, r1
 80007de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0xe2>
 80007e4:	428b      	cmp	r3, r1
 80007e6:	f200 80e9 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 80007ea:	4684      	mov	ip, r0
 80007ec:	1ac9      	subs	r1, r1, r3
 80007ee:	b2a3      	uxth	r3, r4
 80007f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007fc:	fb08 f800 	mul.w	r8, r8, r0
 8000800:	45a0      	cmp	r8, r4
 8000802:	d907      	bls.n	8000814 <__udivmoddi4+0x10c>
 8000804:	193c      	adds	r4, r7, r4
 8000806:	f100 33ff 	add.w	r3, r0, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x10a>
 800080c:	45a0      	cmp	r8, r4
 800080e:	f200 80d9 	bhi.w	80009c4 <__udivmoddi4+0x2bc>
 8000812:	4618      	mov	r0, r3
 8000814:	eba4 0408 	sub.w	r4, r4, r8
 8000818:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800081c:	e7bf      	b.n	800079e <__udivmoddi4+0x96>
 800081e:	428b      	cmp	r3, r1
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x12e>
 8000822:	2d00      	cmp	r5, #0
 8000824:	f000 80b1 	beq.w	800098a <__udivmoddi4+0x282>
 8000828:	2600      	movs	r6, #0
 800082a:	e9c5 0100 	strd	r0, r1, [r5]
 800082e:	4630      	mov	r0, r6
 8000830:	4631      	mov	r1, r6
 8000832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000836:	fab3 f683 	clz	r6, r3
 800083a:	2e00      	cmp	r6, #0
 800083c:	d14a      	bne.n	80008d4 <__udivmoddi4+0x1cc>
 800083e:	428b      	cmp	r3, r1
 8000840:	d302      	bcc.n	8000848 <__udivmoddi4+0x140>
 8000842:	4282      	cmp	r2, r0
 8000844:	f200 80b8 	bhi.w	80009b8 <__udivmoddi4+0x2b0>
 8000848:	1a84      	subs	r4, r0, r2
 800084a:	eb61 0103 	sbc.w	r1, r1, r3
 800084e:	2001      	movs	r0, #1
 8000850:	468c      	mov	ip, r1
 8000852:	2d00      	cmp	r5, #0
 8000854:	d0a8      	beq.n	80007a8 <__udivmoddi4+0xa0>
 8000856:	e9c5 4c00 	strd	r4, ip, [r5]
 800085a:	e7a5      	b.n	80007a8 <__udivmoddi4+0xa0>
 800085c:	f1c2 0320 	rsb	r3, r2, #32
 8000860:	fa20 f603 	lsr.w	r6, r0, r3
 8000864:	4097      	lsls	r7, r2
 8000866:	fa01 f002 	lsl.w	r0, r1, r2
 800086a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800086e:	40d9      	lsrs	r1, r3
 8000870:	4330      	orrs	r0, r6
 8000872:	0c03      	lsrs	r3, r0, #16
 8000874:	fbb1 f6fe 	udiv	r6, r1, lr
 8000878:	fa1f f887 	uxth.w	r8, r7
 800087c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000880:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000884:	fb06 f108 	mul.w	r1, r6, r8
 8000888:	4299      	cmp	r1, r3
 800088a:	fa04 f402 	lsl.w	r4, r4, r2
 800088e:	d909      	bls.n	80008a4 <__udivmoddi4+0x19c>
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	f106 3cff 	add.w	ip, r6, #4294967295
 8000896:	f080 808d 	bcs.w	80009b4 <__udivmoddi4+0x2ac>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 808a 	bls.w	80009b4 <__udivmoddi4+0x2ac>
 80008a0:	3e02      	subs	r6, #2
 80008a2:	443b      	add	r3, r7
 80008a4:	1a5b      	subs	r3, r3, r1
 80008a6:	b281      	uxth	r1, r0
 80008a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80008b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b4:	fb00 f308 	mul.w	r3, r0, r8
 80008b8:	428b      	cmp	r3, r1
 80008ba:	d907      	bls.n	80008cc <__udivmoddi4+0x1c4>
 80008bc:	1879      	adds	r1, r7, r1
 80008be:	f100 3cff 	add.w	ip, r0, #4294967295
 80008c2:	d273      	bcs.n	80009ac <__udivmoddi4+0x2a4>
 80008c4:	428b      	cmp	r3, r1
 80008c6:	d971      	bls.n	80009ac <__udivmoddi4+0x2a4>
 80008c8:	3802      	subs	r0, #2
 80008ca:	4439      	add	r1, r7
 80008cc:	1acb      	subs	r3, r1, r3
 80008ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008d2:	e778      	b.n	80007c6 <__udivmoddi4+0xbe>
 80008d4:	f1c6 0c20 	rsb	ip, r6, #32
 80008d8:	fa03 f406 	lsl.w	r4, r3, r6
 80008dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80008e0:	431c      	orrs	r4, r3
 80008e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008e6:	fa01 f306 	lsl.w	r3, r1, r6
 80008ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80008f2:	431f      	orrs	r7, r3
 80008f4:	0c3b      	lsrs	r3, r7, #16
 80008f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008fa:	fa1f f884 	uxth.w	r8, r4
 80008fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000902:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000906:	fb09 fa08 	mul.w	sl, r9, r8
 800090a:	458a      	cmp	sl, r1
 800090c:	fa02 f206 	lsl.w	r2, r2, r6
 8000910:	fa00 f306 	lsl.w	r3, r0, r6
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x220>
 8000916:	1861      	adds	r1, r4, r1
 8000918:	f109 30ff 	add.w	r0, r9, #4294967295
 800091c:	d248      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 800091e:	458a      	cmp	sl, r1
 8000920:	d946      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000922:	f1a9 0902 	sub.w	r9, r9, #2
 8000926:	4421      	add	r1, r4
 8000928:	eba1 010a 	sub.w	r1, r1, sl
 800092c:	b2bf      	uxth	r7, r7
 800092e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000932:	fb0e 1110 	mls	r1, lr, r0, r1
 8000936:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800093a:	fb00 f808 	mul.w	r8, r0, r8
 800093e:	45b8      	cmp	r8, r7
 8000940:	d907      	bls.n	8000952 <__udivmoddi4+0x24a>
 8000942:	19e7      	adds	r7, r4, r7
 8000944:	f100 31ff 	add.w	r1, r0, #4294967295
 8000948:	d22e      	bcs.n	80009a8 <__udivmoddi4+0x2a0>
 800094a:	45b8      	cmp	r8, r7
 800094c:	d92c      	bls.n	80009a8 <__udivmoddi4+0x2a0>
 800094e:	3802      	subs	r0, #2
 8000950:	4427      	add	r7, r4
 8000952:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000956:	eba7 0708 	sub.w	r7, r7, r8
 800095a:	fba0 8902 	umull	r8, r9, r0, r2
 800095e:	454f      	cmp	r7, r9
 8000960:	46c6      	mov	lr, r8
 8000962:	4649      	mov	r1, r9
 8000964:	d31a      	bcc.n	800099c <__udivmoddi4+0x294>
 8000966:	d017      	beq.n	8000998 <__udivmoddi4+0x290>
 8000968:	b15d      	cbz	r5, 8000982 <__udivmoddi4+0x27a>
 800096a:	ebb3 020e 	subs.w	r2, r3, lr
 800096e:	eb67 0701 	sbc.w	r7, r7, r1
 8000972:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000976:	40f2      	lsrs	r2, r6
 8000978:	ea4c 0202 	orr.w	r2, ip, r2
 800097c:	40f7      	lsrs	r7, r6
 800097e:	e9c5 2700 	strd	r2, r7, [r5]
 8000982:	2600      	movs	r6, #0
 8000984:	4631      	mov	r1, r6
 8000986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098a:	462e      	mov	r6, r5
 800098c:	4628      	mov	r0, r5
 800098e:	e70b      	b.n	80007a8 <__udivmoddi4+0xa0>
 8000990:	4606      	mov	r6, r0
 8000992:	e6e9      	b.n	8000768 <__udivmoddi4+0x60>
 8000994:	4618      	mov	r0, r3
 8000996:	e6fd      	b.n	8000794 <__udivmoddi4+0x8c>
 8000998:	4543      	cmp	r3, r8
 800099a:	d2e5      	bcs.n	8000968 <__udivmoddi4+0x260>
 800099c:	ebb8 0e02 	subs.w	lr, r8, r2
 80009a0:	eb69 0104 	sbc.w	r1, r9, r4
 80009a4:	3801      	subs	r0, #1
 80009a6:	e7df      	b.n	8000968 <__udivmoddi4+0x260>
 80009a8:	4608      	mov	r0, r1
 80009aa:	e7d2      	b.n	8000952 <__udivmoddi4+0x24a>
 80009ac:	4660      	mov	r0, ip
 80009ae:	e78d      	b.n	80008cc <__udivmoddi4+0x1c4>
 80009b0:	4681      	mov	r9, r0
 80009b2:	e7b9      	b.n	8000928 <__udivmoddi4+0x220>
 80009b4:	4666      	mov	r6, ip
 80009b6:	e775      	b.n	80008a4 <__udivmoddi4+0x19c>
 80009b8:	4630      	mov	r0, r6
 80009ba:	e74a      	b.n	8000852 <__udivmoddi4+0x14a>
 80009bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009c0:	4439      	add	r1, r7
 80009c2:	e713      	b.n	80007ec <__udivmoddi4+0xe4>
 80009c4:	3802      	subs	r0, #2
 80009c6:	443c      	add	r4, r7
 80009c8:	e724      	b.n	8000814 <__udivmoddi4+0x10c>
 80009ca:	bf00      	nop

080009cc <__aeabi_idiv0>:
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <HAL_TIM_PWM_PulseFinishedCallback>:
static void updateLedsType_0(int8_t activeLeds);
static void updateLedsType_1(int8_t activeLeds);
static float lerp(float A, float B, float Alpha);

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 80009d8:	2100      	movs	r1, #0
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f00f ffba 	bl	8010954 <HAL_TIM_PWM_Stop_DMA>
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <WS2812_Init>:

void WS2812_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
	for (int i = 0; i < 24 * LED_NUMBER; i++)
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	e007      	b.n	8000a04 <WS2812_Init+0x1c>
		leds[i] = BIT_0_TIME;
 80009f4:	4a1c      	ldr	r2, [pc, #112]	; (8000a68 <WS2812_Init+0x80>)
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	212b      	movs	r1, #43	; 0x2b
 80009fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 24 * LED_NUMBER; i++)
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	3301      	adds	r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000a0a:	dbf3      	blt.n	80009f4 <WS2812_Init+0xc>

	for (int i = 0; i < RESET_LEN; i++)
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	e009      	b.n	8000a26 <WS2812_Init+0x3e>
		leds[i + LED_NUMBER * 24] = 0;
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000a18:	4a13      	ldr	r2, [pc, #76]	; (8000a68 <WS2812_Init+0x80>)
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < RESET_LEN; i++)
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	3301      	adds	r3, #1
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	2b27      	cmp	r3, #39	; 0x27
 8000a2a:	ddf2      	ble.n	8000a12 <WS2812_Init+0x2a>

	//__DSB();
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*) leds,
 8000a2c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000a30:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <WS2812_Init+0x80>)
 8000a32:	2100      	movs	r1, #0
 8000a34:	480d      	ldr	r0, [pc, #52]	; (8000a6c <WS2812_Init+0x84>)
 8000a36:	f00f fd81 	bl	801053c <HAL_TIM_PWM_Start_DMA>
	RESET_LEN + 24 * LED_NUMBER);
	for (uint8_t i = 1; i <= LED_NUMBER; i++)
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	71fb      	strb	r3, [r7, #7]
 8000a3e:	e00a      	b.n	8000a56 <WS2812_Init+0x6e>
	{
		updateLedsType_0(i);
 8000a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f000 f87b 	bl	8000b40 <updateLedsType_0>
		osDelay(50);
 8000a4a:	2032      	movs	r0, #50	; 0x32
 8000a4c:	f011 fb32 	bl	80120b4 <osDelay>
	for (uint8_t i = 1; i <= LED_NUMBER; i++)
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	3301      	adds	r3, #1
 8000a54:	71fb      	strb	r3, [r7, #7]
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	2b0f      	cmp	r3, #15
 8000a5a:	d9f1      	bls.n	8000a40 <WS2812_Init+0x58>
	}
}
 8000a5c:	bf00      	nop
 8000a5e:	bf00      	nop
 8000a60:	3710      	adds	r7, #16
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20056a28 	.word	0x20056a28
 8000a6c:	20057084 	.word	0x20057084

08000a70 <setLed>:

void setLed(uint8_t ledNumber, uint8_t red, uint8_t green, uint8_t blue)
{
 8000a70:	b490      	push	{r4, r7}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4604      	mov	r4, r0
 8000a78:	4608      	mov	r0, r1
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4623      	mov	r3, r4
 8000a80:	71fb      	strb	r3, [r7, #7]
 8000a82:	4603      	mov	r3, r0
 8000a84:	71bb      	strb	r3, [r7, #6]
 8000a86:	460b      	mov	r3, r1
 8000a88:	717b      	strb	r3, [r7, #5]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	713b      	strb	r3, [r7, #4]
	const uint8_t lookUpTable[8] =
 8000a8e:	4a2a      	ldr	r2, [pc, #168]	; (8000b38 <setLed+0xc8>)
 8000a90:	f107 0308 	add.w	r3, r7, #8
 8000a94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a98:	e883 0003 	stmia.w	r3, {r0, r1}
	{ 1, 2, 4, 8, 16, 32, 64, 128 };
	uint16_t ledId = 24 * ledNumber;
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	0052      	lsls	r2, r2, #1
 8000aa4:	4413      	add	r3, r2
 8000aa6:	00db      	lsls	r3, r3, #3
 8000aa8:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < 8; i++)
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	e03a      	b.n	8000b26 <setLed+0xb6>
	{
		leds[ledId] = red & lookUpTable[i] ? BIT_1_TIME : BIT_0_TIME;
 8000ab0:	f107 0208 	add.w	r2, r7, #8
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	781a      	ldrb	r2, [r3, #0]
 8000aba:	79bb      	ldrb	r3, [r7, #6]
 8000abc:	4013      	ands	r3, r2
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <setLed+0x58>
 8000ac4:	2156      	movs	r1, #86	; 0x56
 8000ac6:	e000      	b.n	8000aca <setLed+0x5a>
 8000ac8:	212b      	movs	r1, #43	; 0x2b
 8000aca:	8afb      	ldrh	r3, [r7, #22]
 8000acc:	4a1b      	ldr	r2, [pc, #108]	; (8000b3c <setLed+0xcc>)
 8000ace:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		leds[ledId + 8] = green & lookUpTable[i] ? BIT_1_TIME : BIT_0_TIME;
 8000ad2:	f107 0208 	add.w	r2, r7, #8
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	4413      	add	r3, r2
 8000ada:	781a      	ldrb	r2, [r3, #0]
 8000adc:	797b      	ldrb	r3, [r7, #5]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <setLed+0x7a>
 8000ae6:	2156      	movs	r1, #86	; 0x56
 8000ae8:	e000      	b.n	8000aec <setLed+0x7c>
 8000aea:	212b      	movs	r1, #43	; 0x2b
 8000aec:	8afb      	ldrh	r3, [r7, #22]
 8000aee:	3308      	adds	r3, #8
 8000af0:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <setLed+0xcc>)
 8000af2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		leds[ledId + 16] = blue & lookUpTable[i] ? BIT_1_TIME : BIT_0_TIME;
 8000af6:	f107 0208 	add.w	r2, r7, #8
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	4413      	add	r3, r2
 8000afe:	781a      	ldrb	r2, [r3, #0]
 8000b00:	793b      	ldrb	r3, [r7, #4]
 8000b02:	4013      	ands	r3, r2
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <setLed+0x9e>
 8000b0a:	2156      	movs	r1, #86	; 0x56
 8000b0c:	e000      	b.n	8000b10 <setLed+0xa0>
 8000b0e:	212b      	movs	r1, #43	; 0x2b
 8000b10:	8afb      	ldrh	r3, [r7, #22]
 8000b12:	3310      	adds	r3, #16
 8000b14:	4a09      	ldr	r2, [pc, #36]	; (8000b3c <setLed+0xcc>)
 8000b16:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		ledId++;
 8000b1a:	8afb      	ldrh	r3, [r7, #22]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < 8; i++)
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	3301      	adds	r3, #1
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	2b07      	cmp	r3, #7
 8000b2a:	ddc1      	ble.n	8000ab0 <setLed+0x40>
	}
}
 8000b2c:	bf00      	nop
 8000b2e:	bf00      	nop
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc90      	pop	{r4, r7}
 8000b36:	4770      	bx	lr
 8000b38:	0802b1c8 	.word	0x0802b1c8
 8000b3c:	20056a28 	.word	0x20056a28

08000b40 <updateLedsType_0>:

// turn on leds linearly
void updateLedsType_0(int8_t activeLeds)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < LED_NUMBER; i++)
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	73fb      	strb	r3, [r7, #15]
 8000b4e:	e02b      	b.n	8000ba8 <updateLedsType_0+0x68>
	{
		if (i < activeLeds)
 8000b50:	7bfa      	ldrb	r2, [r7, #15]
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	da1d      	bge.n	8000b96 <updateLedsType_0+0x56>
		{
			if (i < 5)
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	2b04      	cmp	r3, #4
 8000b5e:	d807      	bhi.n	8000b70 <updateLedsType_0+0x30>
			{
				setLed(i, displaySetup.redLedBrightness, 0, 0);
 8000b60:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <updateLedsType_0+0x84>)
 8000b62:	7899      	ldrb	r1, [r3, #2]
 8000b64:	7bf8      	ldrb	r0, [r7, #15]
 8000b66:	2300      	movs	r3, #0
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f7ff ff81 	bl	8000a70 <setLed>
 8000b6e:	e018      	b.n	8000ba2 <updateLedsType_0+0x62>
			}
			else if (i < 10)
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
 8000b72:	2b09      	cmp	r3, #9
 8000b74:	d807      	bhi.n	8000b86 <updateLedsType_0+0x46>
			{
				setLed(i, 0, displaySetup.greenLedBrightness, 0);
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <updateLedsType_0+0x84>)
 8000b78:	78da      	ldrb	r2, [r3, #3]
 8000b7a:	7bf8      	ldrb	r0, [r7, #15]
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	f7ff ff76 	bl	8000a70 <setLed>
 8000b84:	e00d      	b.n	8000ba2 <updateLedsType_0+0x62>
			}
			else
			{
				setLed(i, 0, 0, displaySetup.blueLedBrightness);
 8000b86:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <updateLedsType_0+0x84>)
 8000b88:	791b      	ldrb	r3, [r3, #4]
 8000b8a:	7bf8      	ldrb	r0, [r7, #15]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2100      	movs	r1, #0
 8000b90:	f7ff ff6e 	bl	8000a70 <setLed>
 8000b94:	e005      	b.n	8000ba2 <updateLedsType_0+0x62>
			}
		}
		else
		{
			setLed(i, 0, 0, 0);
 8000b96:	7bf8      	ldrb	r0, [r7, #15]
 8000b98:	2300      	movs	r3, #0
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	f7ff ff67 	bl	8000a70 <setLed>
	for (uint8_t i = 0; i < LED_NUMBER; i++)
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	73fb      	strb	r3, [r7, #15]
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	2b0e      	cmp	r3, #14
 8000bac:	d9d0      	bls.n	8000b50 <updateLedsType_0+0x10>
		}

	}
	//__DSB();
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*) leds,
 8000bae:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <updateLedsType_0+0x88>)
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4805      	ldr	r0, [pc, #20]	; (8000bcc <updateLedsType_0+0x8c>)
 8000bb8:	f00f fcc0 	bl	801053c <HAL_TIM_PWM_Start_DMA>
	RESET_LEN + 24 * LED_NUMBER);
}
 8000bbc:	bf00      	nop
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000004 	.word	0x20000004
 8000bc8:	20056a28 	.word	0x20056a28
 8000bcc:	20057084 	.word	0x20057084

08000bd0 <updateLedsType_1>:

// turn on leds 1-10 linearly, last five turn on together
void updateLedsType_1(int8_t activeLeds)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < LED_NUMBER; i++)
 8000bda:	2300      	movs	r3, #0
 8000bdc:	73fb      	strb	r3, [r7, #15]
 8000bde:	e034      	b.n	8000c4a <updateLedsType_1+0x7a>
	{
		if (i < activeLeds)
 8000be0:	7bfa      	ldrb	r2, [r7, #15]
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	da26      	bge.n	8000c38 <updateLedsType_1+0x68>
		{
			if (i < 5)
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
 8000bec:	2b04      	cmp	r3, #4
 8000bee:	d807      	bhi.n	8000c00 <updateLedsType_1+0x30>
			{
				setLed(i, displaySetup.redLedBrightness, 0, 0);
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	; (8000c68 <updateLedsType_1+0x98>)
 8000bf2:	7899      	ldrb	r1, [r3, #2]
 8000bf4:	7bf8      	ldrb	r0, [r7, #15]
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f7ff ff39 	bl	8000a70 <setLed>
 8000bfe:	e021      	b.n	8000c44 <updateLedsType_1+0x74>
			}
			else if (i < 10)
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
 8000c02:	2b09      	cmp	r3, #9
 8000c04:	d807      	bhi.n	8000c16 <updateLedsType_1+0x46>
			{
				setLed(i, 0, displaySetup.greenLedBrightness, 0);
 8000c06:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <updateLedsType_1+0x98>)
 8000c08:	78da      	ldrb	r2, [r3, #3]
 8000c0a:	7bf8      	ldrb	r0, [r7, #15]
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	2100      	movs	r1, #0
 8000c10:	f7ff ff2e 	bl	8000a70 <setLed>
 8000c14:	e016      	b.n	8000c44 <updateLedsType_1+0x74>
			}
			else
			{
				for (uint8_t j = i; j < LED_NUMBER; j++)
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
 8000c18:	73bb      	strb	r3, [r7, #14]
 8000c1a:	e009      	b.n	8000c30 <updateLedsType_1+0x60>
				{
					setLed(i, 0, 0, displaySetup.blueLedBrightness);
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <updateLedsType_1+0x98>)
 8000c1e:	791b      	ldrb	r3, [r3, #4]
 8000c20:	7bf8      	ldrb	r0, [r7, #15]
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	f7ff ff23 	bl	8000a70 <setLed>
				for (uint8_t j = i; j < LED_NUMBER; j++)
 8000c2a:	7bbb      	ldrb	r3, [r7, #14]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	73bb      	strb	r3, [r7, #14]
 8000c30:	7bbb      	ldrb	r3, [r7, #14]
 8000c32:	2b0e      	cmp	r3, #14
 8000c34:	d9f2      	bls.n	8000c1c <updateLedsType_1+0x4c>
 8000c36:	e005      	b.n	8000c44 <updateLedsType_1+0x74>
				}
			}
		}
		else
		{
			setLed(i, 0, 0, 0);
 8000c38:	7bf8      	ldrb	r0, [r7, #15]
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2100      	movs	r1, #0
 8000c40:	f7ff ff16 	bl	8000a70 <setLed>
	for (uint8_t i = 0; i < LED_NUMBER; i++)
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
 8000c46:	3301      	adds	r3, #1
 8000c48:	73fb      	strb	r3, [r7, #15]
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
 8000c4c:	2b0e      	cmp	r3, #14
 8000c4e:	d9c7      	bls.n	8000be0 <updateLedsType_1+0x10>
		}
	}
	//__DSB();
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*) leds,
 8000c50:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000c54:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <updateLedsType_1+0x9c>)
 8000c56:	2100      	movs	r1, #0
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <updateLedsType_1+0xa0>)
 8000c5a:	f00f fc6f 	bl	801053c <HAL_TIM_PWM_Start_DMA>
	RESET_LEN + 24 * LED_NUMBER);
}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000004 	.word	0x20000004
 8000c6c:	20056a28 	.word	0x20056a28
 8000c70:	20057084 	.word	0x20057084

08000c74 <updateLeds>:

void updateLeds(int rpm, int mode)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
	uint16_t minRPM;
	uint16_t maxRPM;
	int8_t activeLeds;
	static uint8_t lastGear = 1;
	switch (mode)
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d007      	beq.n	8000c94 <updateLeds+0x20>
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db75      	blt.n	8000d76 <updateLeds+0x102>
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	3b01      	subs	r3, #1
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d871      	bhi.n	8000d76 <updateLeds+0x102>
 8000c92:	e027      	b.n	8000ce4 <updateLeds+0x70>
	{
	case 0:
		minRPM = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	82bb      	strh	r3, [r7, #20]
		maxRPM = 12000;
 8000c98:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8000c9c:	827b      	strh	r3, [r7, #18]
		activeLeds =
				ceil(
						(float) (rpm - minRPM)
 8000c9e:	8abb      	ldrh	r3, [r7, #20]
 8000ca0:	68fa      	ldr	r2, [r7, #12]
 8000ca2:	1ad3      	subs	r3, r2, r3
 8000ca4:	ee07 3a90 	vmov	s15, r3
 8000ca8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
								/ (float) (maxRPM - minRPM)* LED_NUMBER);
 8000cac:	8a7a      	ldrh	r2, [r7, #18]
 8000cae:	8abb      	ldrh	r3, [r7, #20]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	ee07 3a90 	vmov	s15, r3
 8000cb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cbe:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8000cc2:	ee67 7a87 	vmul.f32	s15, s15, s14
				ceil(
 8000cc6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cca:	eeb0 0b47 	vmov.f64	d0, d7
 8000cce:	f025 fd6b 	bl	80267a8 <ceil>
 8000cd2:	eeb0 7b40 	vmov.f64	d7, d0
		activeLeds =
 8000cd6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000cda:	edc7 7a01 	vstr	s15, [r7, #4]
 8000cde:	793b      	ldrb	r3, [r7, #4]
 8000ce0:	75fb      	strb	r3, [r7, #23]
		break;
 8000ce2:	e048      	b.n	8000d76 <updateLeds+0x102>
	case 1:
	case 2:
#ifdef USE_OPTIMAL_SHIFT_RPM
		if (telemetryData.gear <= 6 && telemetryData.gear >= 1)
 8000ce4:	4b31      	ldr	r3, [pc, #196]	; (8000dac <updateLeds+0x138>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b06      	cmp	r3, #6
 8000cea:	d807      	bhi.n	8000cfc <updateLeds+0x88>
 8000cec:	4b2f      	ldr	r3, [pc, #188]	; (8000dac <updateLeds+0x138>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d003      	beq.n	8000cfc <updateLeds+0x88>
		{
			lastGear = telemetryData.gear;
 8000cf4:	4b2d      	ldr	r3, [pc, #180]	; (8000dac <updateLeds+0x138>)
 8000cf6:	781a      	ldrb	r2, [r3, #0]
 8000cf8:	4b2d      	ldr	r3, [pc, #180]	; (8000db0 <updateLeds+0x13c>)
 8000cfa:	701a      	strb	r2, [r3, #0]
		}

		minRPM = optimalShiftUpRPM[lastGear - 1] - 2000;
 8000cfc:	4b2c      	ldr	r3, [pc, #176]	; (8000db0 <updateLeds+0x13c>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	3b01      	subs	r3, #1
 8000d02:	4a2c      	ldr	r2, [pc, #176]	; (8000db4 <updateLeds+0x140>)
 8000d04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d08:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8000d0c:	82bb      	strh	r3, [r7, #20]
		maxRPM = optimalShiftUpRPM[lastGear - 1];
 8000d0e:	4b28      	ldr	r3, [pc, #160]	; (8000db0 <updateLeds+0x13c>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	4a27      	ldr	r2, [pc, #156]	; (8000db4 <updateLeds+0x140>)
 8000d16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d1a:	827b      	strh	r3, [r7, #18]
#else
		minRPM = 9500;
		maxRPM = 11500;
#endif
		uint8_t ledNumber = mode == 1 ? LED_NUMBER : LED_NUMBER - 4;
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d101      	bne.n	8000d26 <updateLeds+0xb2>
 8000d22:	230f      	movs	r3, #15
 8000d24:	e000      	b.n	8000d28 <updateLeds+0xb4>
 8000d26:	230b      	movs	r3, #11
 8000d28:	747b      	strb	r3, [r7, #17]
		activeLeds = ceil(
				(float) (rpm - minRPM) / (float) (maxRPM - minRPM) * ledNumber);
 8000d2a:	8abb      	ldrh	r3, [r7, #20]
 8000d2c:	68fa      	ldr	r2, [r7, #12]
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	ee07 3a90 	vmov	s15, r3
 8000d34:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d38:	8a7a      	ldrh	r2, [r7, #18]
 8000d3a:	8abb      	ldrh	r3, [r7, #20]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	ee07 3a90 	vmov	s15, r3
 8000d42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000d4a:	7c7b      	ldrb	r3, [r7, #17]
 8000d4c:	ee07 3a90 	vmov	s15, r3
 8000d50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d54:	ee67 7a27 	vmul.f32	s15, s14, s15
		activeLeds = ceil(
 8000d58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d5c:	eeb0 0b47 	vmov.f64	d0, d7
 8000d60:	f025 fd22 	bl	80267a8 <ceil>
 8000d64:	eeb0 7b40 	vmov.f64	d7, d0
 8000d68:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000d6c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000d70:	793b      	ldrb	r3, [r7, #4]
 8000d72:	75fb      	strb	r3, [r7, #23]

		break;
 8000d74:	bf00      	nop

	}

	switch (mode)
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	dc03      	bgt.n	8000d84 <updateLeds+0x110>
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	da04      	bge.n	8000d8c <updateLeds+0x118>
		break;
	case 2:
		updateLedsType_1(activeLeds);
		break;
	}
}
 8000d82:	e00f      	b.n	8000da4 <updateLeds+0x130>
	switch (mode)
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d006      	beq.n	8000d98 <updateLeds+0x124>
}
 8000d8a:	e00b      	b.n	8000da4 <updateLeds+0x130>
		updateLedsType_0(activeLeds);
 8000d8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fed5 	bl	8000b40 <updateLedsType_0>
		break;
 8000d96:	e005      	b.n	8000da4 <updateLeds+0x130>
		updateLedsType_1(activeLeds);
 8000d98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff17 	bl	8000bd0 <updateLedsType_1>
		break;
 8000da2:	bf00      	nop
}
 8000da4:	bf00      	nop
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20056d90 	.word	0x20056d90
 8000db0:	20000009 	.word	0x20000009
 8000db4:	20056a1c 	.word	0x20056a1c

08000db8 <lerp>:

float lerp(float A, float B, float Alpha)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	ed87 0a03 	vstr	s0, [r7, #12]
 8000dc2:	edc7 0a02 	vstr	s1, [r7, #8]
 8000dc6:	ed87 1a01 	vstr	s2, [r7, #4]
	return A + Alpha * (B - A);
 8000dca:	ed97 7a02 	vldr	s14, [r7, #8]
 8000dce:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dd2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000dd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dde:	edd7 7a03 	vldr	s15, [r7, #12]
 8000de2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000de6:	eeb0 0a67 	vmov.f32	s0, s15
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <ComputeOptimalPoints>:

void ComputeOptimalPoints()
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08e      	sub	sp, #56	; 0x38
 8000df8:	af00      	add	r7, sp, #0
// Calculation based on https://glennmessersmith.com/shiftpt.html
	const uint16_t minRPM = 3000;
 8000dfa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000dfe:	84fb      	strh	r3, [r7, #38]	; 0x26
	const uint16_t maxRPM = 12000;
 8000e00:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8000e04:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		optimalShiftUpRPM[i]=UpRPM;
		//OptimalGearDownRPM.Add(DownRPM);
	}
#else
	for (int i = GEAR_NUMBER - 2; i >= 0; i--)
 8000e06:	2304      	movs	r3, #4
 8000e08:	633b      	str	r3, [r7, #48]	; 0x30
 8000e0a:	e0fa      	b.n	8001002 <ComputeOptimalPoints+0x20e>
	{
		float MinTorqueLoss = MAX_ENGINE_TORQUE * GearRatios[i];
 8000e0c:	4a83      	ldr	r2, [pc, #524]	; (800101c <ComputeOptimalPoints+0x228>)
 8000e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	4413      	add	r3, r2
 8000e14:	edd3 7a00 	vldr	s15, [r3]
 8000e18:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8001020 <ComputeOptimalPoints+0x22c>
 8000e1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e20:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		float CurrentGearRatio = GearRatios[i];
 8000e24:	4a7d      	ldr	r2, [pc, #500]	; (800101c <ComputeOptimalPoints+0x228>)
 8000e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	4413      	add	r3, r2
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	623b      	str	r3, [r7, #32]
		float NextGearRatio = GearRatios[i + 1];
 8000e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e32:	3301      	adds	r3, #1
 8000e34:	4a79      	ldr	r2, [pc, #484]	; (800101c <ComputeOptimalPoints+0x228>)
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	4413      	add	r3, r2
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	61fb      	str	r3, [r7, #28]
		UpRPM = maxRPM;
 8000e3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e40:	86fb      	strh	r3, [r7, #54]	; 0x36
		for (int j = maxRPM; j > minRPM; j -= 50)
 8000e42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e46:	e0cd      	b.n	8000fe4 <ComputeOptimalPoints+0x1f0>
		{
			float EngineTorque = lerp(torque[(j - 3000) / 1000],
 8000e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e4a:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8000e4e:	4a75      	ldr	r2, [pc, #468]	; (8001024 <ComputeOptimalPoints+0x230>)
 8000e50:	fb82 1203 	smull	r1, r2, r2, r3
 8000e54:	1192      	asrs	r2, r2, #6
 8000e56:	17db      	asrs	r3, r3, #31
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	4a73      	ldr	r2, [pc, #460]	; (8001028 <ComputeOptimalPoints+0x234>)
 8000e5c:	5cd3      	ldrb	r3, [r2, r3]
 8000e5e:	ee07 3a90 	vmov	s15, r3
 8000e62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
					torque[(j - 2000) / 1000], (j % 1000) / 1000.0f);
 8000e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e68:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8000e6c:	4a6d      	ldr	r2, [pc, #436]	; (8001024 <ComputeOptimalPoints+0x230>)
 8000e6e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e72:	1192      	asrs	r2, r2, #6
 8000e74:	17db      	asrs	r3, r3, #31
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	4a6b      	ldr	r2, [pc, #428]	; (8001028 <ComputeOptimalPoints+0x234>)
 8000e7a:	5cd3      	ldrb	r3, [r2, r3]
			float EngineTorque = lerp(torque[(j - 3000) / 1000],
 8000e7c:	ee07 3a90 	vmov	s15, r3
 8000e80:	eef8 6a67 	vcvt.f32.u32	s13, s15
					torque[(j - 2000) / 1000], (j % 1000) / 1000.0f);
 8000e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e86:	4a67      	ldr	r2, [pc, #412]	; (8001024 <ComputeOptimalPoints+0x230>)
 8000e88:	fb82 1203 	smull	r1, r2, r2, r3
 8000e8c:	1191      	asrs	r1, r2, #6
 8000e8e:	17da      	asrs	r2, r3, #31
 8000e90:	1a8a      	subs	r2, r1, r2
 8000e92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e96:	fb01 f202 	mul.w	r2, r1, r2
 8000e9a:	1a9a      	subs	r2, r3, r2
			float EngineTorque = lerp(torque[(j - 3000) / 1000],
 8000e9c:	ee07 2a90 	vmov	s15, r2
 8000ea0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ea4:	eddf 5a61 	vldr	s11, [pc, #388]	; 800102c <ComputeOptimalPoints+0x238>
 8000ea8:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8000eac:	eeb0 1a46 	vmov.f32	s2, s12
 8000eb0:	eef0 0a66 	vmov.f32	s1, s13
 8000eb4:	eeb0 0a47 	vmov.f32	s0, s14
 8000eb8:	f7ff ff7e 	bl	8000db8 <lerp>
 8000ebc:	ed87 0a06 	vstr	s0, [r7, #24]
			// calculate current torque on gearbox output
			float CurrentGearTorque = EngineTorque * CurrentGearRatio;
 8000ec0:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ec4:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ecc:	edc7 7a05 	vstr	s15, [r7, #20]
			// calculate engine RPM on next gear
			uint16_t NextRPM = NextGearRatio * j / CurrentGearRatio;
 8000ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed2:	ee07 3a90 	vmov	s15, r3
 8000ed6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eda:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ede:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000ee2:	ed97 7a08 	vldr	s14, [r7, #32]
 8000ee6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eee:	ee17 3a90 	vmov	r3, s15
 8000ef2:	827b      	strh	r3, [r7, #18]
			if (NextRPM < minRPM)
 8000ef4:	8a7a      	ldrh	r2, [r7, #18]
 8000ef6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d36f      	bcc.n	8000fdc <ComputeOptimalPoints+0x1e8>
			{
				continue;
			}
			float NextGearEngineTorque = lerp(torque[(NextRPM - 3000) / 1000],
 8000efc:	8a7b      	ldrh	r3, [r7, #18]
 8000efe:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8000f02:	4a48      	ldr	r2, [pc, #288]	; (8001024 <ComputeOptimalPoints+0x230>)
 8000f04:	fb82 1203 	smull	r1, r2, r2, r3
 8000f08:	1192      	asrs	r2, r2, #6
 8000f0a:	17db      	asrs	r3, r3, #31
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	4a46      	ldr	r2, [pc, #280]	; (8001028 <ComputeOptimalPoints+0x234>)
 8000f10:	5cd3      	ldrb	r3, [r2, r3]
 8000f12:	ee07 3a90 	vmov	s15, r3
 8000f16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
					torque[(NextRPM - 2000) / 1000],
 8000f1a:	8a7b      	ldrh	r3, [r7, #18]
 8000f1c:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8000f20:	4a40      	ldr	r2, [pc, #256]	; (8001024 <ComputeOptimalPoints+0x230>)
 8000f22:	fb82 1203 	smull	r1, r2, r2, r3
 8000f26:	1192      	asrs	r2, r2, #6
 8000f28:	17db      	asrs	r3, r3, #31
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	4a3e      	ldr	r2, [pc, #248]	; (8001028 <ComputeOptimalPoints+0x234>)
 8000f2e:	5cd3      	ldrb	r3, [r2, r3]
			float NextGearEngineTorque = lerp(torque[(NextRPM - 3000) / 1000],
 8000f30:	ee07 3a90 	vmov	s15, r3
 8000f34:	eef8 6a67 	vcvt.f32.u32	s13, s15
					(NextRPM % 1000) / 1000.0f);
 8000f38:	8a7b      	ldrh	r3, [r7, #18]
 8000f3a:	4a3a      	ldr	r2, [pc, #232]	; (8001024 <ComputeOptimalPoints+0x230>)
 8000f3c:	fba2 1203 	umull	r1, r2, r2, r3
 8000f40:	0992      	lsrs	r2, r2, #6
 8000f42:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f46:	fb01 f202 	mul.w	r2, r1, r2
 8000f4a:	1a9b      	subs	r3, r3, r2
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	ee07 3a90 	vmov	s15, r3
			float NextGearEngineTorque = lerp(torque[(NextRPM - 3000) / 1000],
 8000f52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f56:	eddf 5a35 	vldr	s11, [pc, #212]	; 800102c <ComputeOptimalPoints+0x238>
 8000f5a:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8000f5e:	eeb0 1a46 	vmov.f32	s2, s12
 8000f62:	eef0 0a66 	vmov.f32	s1, s13
 8000f66:	eeb0 0a47 	vmov.f32	s0, s14
 8000f6a:	f7ff ff25 	bl	8000db8 <lerp>
 8000f6e:	ed87 0a03 	vstr	s0, [r7, #12]
			// calculate torque on gearbox outpur on next gear
			float NextGearTorque = NextGearEngineTorque * NextGearRatio;
 8000f72:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f76:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f7e:	edc7 7a02 	vstr	s15, [r7, #8]
			float deltaTorque = CurrentGearTorque - NextGearTorque;
 8000f82:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f86:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f8e:	edc7 7a01 	vstr	s15, [r7, #4]
			float absDeltaTorque =
					deltaTorque < 0.0f ? -deltaTorque : deltaTorque;
 8000f92:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9e:	d504      	bpl.n	8000faa <ComputeOptimalPoints+0x1b6>
 8000fa0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fa4:	eef1 7a67 	vneg.f32	s15, s15
 8000fa8:	e001      	b.n	8000fae <ComputeOptimalPoints+0x1ba>
 8000faa:	edd7 7a01 	vldr	s15, [r7, #4]
			float absDeltaTorque =
 8000fae:	edc7 7a00 	vstr	s15, [r7]
			if (absDeltaTorque < MinTorqueLoss)
 8000fb2:	ed97 7a00 	vldr	s14, [r7]
 8000fb6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000fba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc2:	d503      	bpl.n	8000fcc <ComputeOptimalPoints+0x1d8>
			{
				UpRPM = j;
 8000fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fc6:	86fb      	strh	r3, [r7, #54]	; 0x36
				MinTorqueLoss = absDeltaTorque;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c
			}
			if (deltaTorque > 0.0f)
 8000fcc:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd8:	dc0a      	bgt.n	8000ff0 <ComputeOptimalPoints+0x1fc>
 8000fda:	e000      	b.n	8000fde <ComputeOptimalPoints+0x1ea>
				continue;
 8000fdc:	bf00      	nop
		for (int j = maxRPM; j > minRPM; j -= 50)
 8000fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe0:	3b32      	subs	r3, #50	; 0x32
 8000fe2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fe4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000fe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	f73f af2d 	bgt.w	8000e48 <ComputeOptimalPoints+0x54>
 8000fee:	e000      	b.n	8000ff2 <ComputeOptimalPoints+0x1fe>
			{
				break;
 8000ff0:	bf00      	nop
			}
		}
		optimalShiftUpRPM[i] = UpRPM;
 8000ff2:	490f      	ldr	r1, [pc, #60]	; (8001030 <ComputeOptimalPoints+0x23c>)
 8000ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ff6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000ff8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = GEAR_NUMBER - 2; i >= 0; i--)
 8000ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ffe:	3b01      	subs	r3, #1
 8001000:	633b      	str	r3, [r7, #48]	; 0x30
 8001002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001004:	2b00      	cmp	r3, #0
 8001006:	f6bf af01 	bge.w	8000e0c <ComputeOptimalPoints+0x18>
		//OptimalGearDownRPM.Add(DownRPM);
	}
#endif
	optimalShiftUpRPM[5] = 12000;
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <ComputeOptimalPoints+0x23c>)
 800100c:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8001010:	815a      	strh	r2, [r3, #10]
}
 8001012:	bf00      	nop
 8001014:	3738      	adds	r7, #56	; 0x38
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	0802be74 	.word	0x0802be74
 8001020:	428c0000 	.word	0x428c0000
 8001024:	10624dd3 	.word	0x10624dd3
 8001028:	0802be8c 	.word	0x0802be8c
 800102c:	447a0000 	.word	0x447a0000
 8001030:	20056a1c 	.word	0x20056a1c

08001034 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800103a:	463b      	mov	r3, r7
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001046:	4b21      	ldr	r3, [pc, #132]	; (80010cc <MX_ADC1_Init+0x98>)
 8001048:	4a21      	ldr	r2, [pc, #132]	; (80010d0 <MX_ADC1_Init+0x9c>)
 800104a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800104c:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <MX_ADC1_Init+0x98>)
 800104e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001052:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001054:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <MX_ADC1_Init+0x98>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800105a:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <MX_ADC1_Init+0x98>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001060:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <MX_ADC1_Init+0x98>)
 8001062:	2200      	movs	r2, #0
 8001064:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <MX_ADC1_Init+0x98>)
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800106e:	4b17      	ldr	r3, [pc, #92]	; (80010cc <MX_ADC1_Init+0x98>)
 8001070:	2200      	movs	r2, #0
 8001072:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001074:	4b15      	ldr	r3, [pc, #84]	; (80010cc <MX_ADC1_Init+0x98>)
 8001076:	4a17      	ldr	r2, [pc, #92]	; (80010d4 <MX_ADC1_Init+0xa0>)
 8001078:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800107a:	4b14      	ldr	r3, [pc, #80]	; (80010cc <MX_ADC1_Init+0x98>)
 800107c:	2200      	movs	r2, #0
 800107e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <MX_ADC1_Init+0x98>)
 8001082:	2201      	movs	r2, #1
 8001084:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MX_ADC1_Init+0x98>)
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <MX_ADC1_Init+0x98>)
 8001090:	2201      	movs	r2, #1
 8001092:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001094:	480d      	ldr	r0, [pc, #52]	; (80010cc <MX_ADC1_Init+0x98>)
 8001096:	f009 feff 	bl	800ae98 <HAL_ADC_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010a0:	f001 fd12 	bl	8002ac8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80010a4:	230b      	movs	r3, #11
 80010a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010a8:	2301      	movs	r3, #1
 80010aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80010ac:	2307      	movs	r3, #7
 80010ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b0:	463b      	mov	r3, r7
 80010b2:	4619      	mov	r1, r3
 80010b4:	4805      	ldr	r0, [pc, #20]	; (80010cc <MX_ADC1_Init+0x98>)
 80010b6:	f00a f899 	bl	800b1ec <HAL_ADC_ConfigChannel>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010c0:	f001 fd02 	bl	8002ac8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010c4:	bf00      	nop
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20056d48 	.word	0x20056d48
 80010d0:	40012000 	.word	0x40012000
 80010d4:	0f000001 	.word	0x0f000001

080010d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a15      	ldr	r2, [pc, #84]	; (800114c <HAL_ADC_MspInit+0x74>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d123      	bne.n	8001142 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <HAL_ADC_MspInit+0x78>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	4a14      	ldr	r2, [pc, #80]	; (8001150 <HAL_ADC_MspInit+0x78>)
 8001100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001104:	6453      	str	r3, [r2, #68]	; 0x44
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_ADC_MspInit+0x78>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <HAL_ADC_MspInit+0x78>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a0e      	ldr	r2, [pc, #56]	; (8001150 <HAL_ADC_MspInit+0x78>)
 8001118:	f043 0304 	orr.w	r3, r3, #4
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <HAL_ADC_MspInit+0x78>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800112a:	2302      	movs	r3, #2
 800112c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800112e:	2303      	movs	r3, #3
 8001130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	; (8001154 <HAL_ADC_MspInit+0x7c>)
 800113e:	f00c f8a7 	bl	800d290 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001142:	bf00      	nop
 8001144:	3728      	adds	r7, #40	; 0x28
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40012000 	.word	0x40012000
 8001150:	40023800 	.word	0x40023800
 8001154:	40020800 	.word	0x40020800

08001158 <FLASH_QSPI_Init>:
static uint8_t FLASH_QSPI_Configuration(void);
static uint8_t FLASH_QSPI_ResetChip(void);
/* USER CODE END 0 */

/* USER CODE BEGIN 1 */
uint8_t FLASH_QSPI_Init(void) {
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	//prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
 800115c:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <FLASH_QSPI_Init+0x70>)
 800115e:	4a1b      	ldr	r2, [pc, #108]	; (80011cc <FLASH_QSPI_Init+0x74>)
 8001160:	601a      	str	r2, [r3, #0]
	if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 8001162:	4819      	ldr	r0, [pc, #100]	; (80011c8 <FLASH_QSPI_Init+0x70>)
 8001164:	f00c ffe4 	bl	800e130 <HAL_QSPI_DeInit>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <FLASH_QSPI_Init+0x1a>
		return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e028      	b.n	80011c4 <FLASH_QSPI_Init+0x6c>
	}

	MX_QUADSPI_Init();
 8001172:	f001 fcaf 	bl	8002ad4 <MX_QUADSPI_Init>

	if (FLASH_QSPI_ResetChip() != HAL_OK) {
 8001176:	f000 f82b 	bl	80011d0 <FLASH_QSPI_ResetChip>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <FLASH_QSPI_Init+0x2c>
		return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e01f      	b.n	80011c4 <FLASH_QSPI_Init+0x6c>
	}

	HAL_Delay(1);
 8001184:	2001      	movs	r0, #1
 8001186:	f009 fe63 	bl	800ae50 <HAL_Delay>

	if (FLASH_QSPI_AutoPollingMemReady() != HAL_OK) {
 800118a:	f000 f87f 	bl	800128c <FLASH_QSPI_AutoPollingMemReady>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <FLASH_QSPI_Init+0x40>
		return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e015      	b.n	80011c4 <FLASH_QSPI_Init+0x6c>
	}

	if (FLASH_QSPI_WriteEnable() != HAL_OK) {
 8001198:	f000 f8b0 	bl	80012fc <FLASH_QSPI_WriteEnable>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <FLASH_QSPI_Init+0x4e>

		return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e00e      	b.n	80011c4 <FLASH_QSPI_Init+0x6c>
	}

	/* Sets QE bit and starts QUADSPI communication */
	if (FLASH_QSPI_Configuration() != HAL_OK) {
 80011a6:	f000 f8f3 	bl	8001390 <FLASH_QSPI_Configuration>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <FLASH_QSPI_Init+0x5c>
		return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e007      	b.n	80011c4 <FLASH_QSPI_Init+0x6c>
	}

	if (FLASH_QSPI_EnableMemoryMappedMode() != HAL_OK) {
 80011b4:	f000 f962 	bl	800147c <FLASH_QSPI_EnableMemoryMappedMode>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <FLASH_QSPI_Init+0x6a>
			return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e000      	b.n	80011c4 <FLASH_QSPI_Init+0x6c>
		}

	return HAL_OK;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20056fa0 	.word	0x20056fa0
 80011cc:	a0001000 	.word	0xa0001000

080011d0 <FLASH_QSPI_ResetChip>:
	}

	return HAL_OK;
}

uint8_t FLASH_QSPI_ResetChip() {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b090      	sub	sp, #64	; 0x40
 80011d4:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	uint32_t temp = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Erasing Sequence -------------------------------------------------- */
	sCommand.Instruction = ENABLE_RESET_CMD;
 80011da:	2366      	movs	r3, #102	; 0x66
 80011dc:	607b      	str	r3, [r7, #4]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80011de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e2:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80011e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e8:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80011ee:	2300      	movs	r3, #0
 80011f0:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80011f2:	2300      	movs	r3, #0
 80011f4:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80011f6:	2300      	movs	r3, #0
 80011f8:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 8001202:	2300      	movs	r3, #0
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001210:	4619      	mov	r1, r3
 8001212:	481d      	ldr	r0, [pc, #116]	; (8001288 <FLASH_QSPI_ResetChip+0xb8>)
 8001214:	f00d f96a 	bl	800e4ec <HAL_QSPI_Command>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <FLASH_QSPI_ResetChip+0x52>
			!= HAL_OK) {
		return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e02e      	b.n	8001280 <FLASH_QSPI_ResetChip+0xb0>
	}
	for (temp = 0; temp < 0x2f; temp++) {
 8001222:	2300      	movs	r3, #0
 8001224:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001226:	e003      	b.n	8001230 <FLASH_QSPI_ResetChip+0x60>
		__NOP();
 8001228:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 800122a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800122c:	3301      	adds	r3, #1
 800122e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001232:	2b2e      	cmp	r3, #46	; 0x2e
 8001234:	d9f8      	bls.n	8001228 <FLASH_QSPI_ResetChip+0x58>
	}

	sCommand.Instruction = RESET_DEVICE_CMD;
 8001236:	2399      	movs	r3, #153	; 0x99
 8001238:	607b      	str	r3, [r7, #4]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800123a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800123e:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001240:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001244:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800124e:	2300      	movs	r3, #0
 8001250:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001252:	2300      	movs	r3, #0
 8001254:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 800125e:	2300      	movs	r3, #0
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	f241 3288 	movw	r2, #5000	; 0x1388
 800126c:	4619      	mov	r1, r3
 800126e:	4806      	ldr	r0, [pc, #24]	; (8001288 <FLASH_QSPI_ResetChip+0xb8>)
 8001270:	f00d f93c 	bl	800e4ec <HAL_QSPI_Command>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <FLASH_QSPI_ResetChip+0xae>
			!= HAL_OK) {
		return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <FLASH_QSPI_ResetChip+0xb0>
	}
	return HAL_OK;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	3740      	adds	r7, #64	; 0x40
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20056fa0 	.word	0x20056fa0

0800128c <FLASH_QSPI_AutoPollingMemReady>:

uint8_t FLASH_QSPI_AutoPollingMemReady(void) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b094      	sub	sp, #80	; 0x50
 8001290:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	/* Configure automatic polling mode to wait for memory ready ------ */
	sCommand.Instruction = READ_STATUS_REG_LOWER_CMD;
 8001292:	2305      	movs	r3, #5
 8001294:	61bb      	str	r3, [r7, #24]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001296:	f44f 7380 	mov.w	r3, #256	; 0x100
 800129a:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800129c:	2300      	movs	r3, #0
 800129e:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_1_LINE;
 80012a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80012b2:	2300      	movs	r3, #0
 80012b4:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80012b6:	2300      	movs	r3, #0
 80012b8:	64fb      	str	r3, [r7, #76]	; 0x4c

	sConfig.Match = 0x00;
 80012ba:	2300      	movs	r3, #0
 80012bc:	603b      	str	r3, [r7, #0]
	sConfig.Mask = AT25SF128A_SR_WIP;
 80012be:	2301      	movs	r3, #1
 80012c0:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 80012c6:	2301      	movs	r3, #1
 80012c8:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 80012ca:	2310      	movs	r3, #16
 80012cc:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 80012ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012d2:	617b      	str	r3, [r7, #20]

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 80012d4:	463a      	mov	r2, r7
 80012d6:	f107 0118 	add.w	r1, r7, #24
 80012da:	f241 3388 	movw	r3, #5000	; 0x1388
 80012de:	4806      	ldr	r0, [pc, #24]	; (80012f8 <FLASH_QSPI_AutoPollingMemReady+0x6c>)
 80012e0:	f00d fa91 	bl	800e806 <HAL_QSPI_AutoPolling>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <FLASH_QSPI_AutoPollingMemReady+0x62>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e000      	b.n	80012f0 <FLASH_QSPI_AutoPollingMemReady+0x64>
	}

	return HAL_OK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3750      	adds	r7, #80	; 0x50
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20056fa0 	.word	0x20056fa0

080012fc <FLASH_QSPI_WriteEnable>:

static uint8_t FLASH_QSPI_WriteEnable(void) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b094      	sub	sp, #80	; 0x50
 8001300:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	/* Enable write operations ------------------------------------------ */
	sCommand.Instruction = WRITE_ENABLE_CMD;
 8001302:	2306      	movs	r3, #6
 8001304:	61bb      	str	r3, [r7, #24]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001306:	f44f 7380 	mov.w	r3, #256	; 0x100
 800130a:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800130c:	2300      	movs	r3, #0
 800130e:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001310:	2300      	movs	r3, #0
 8001312:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_NONE;
 8001314:	2300      	movs	r3, #0
 8001316:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001320:	2300      	movs	r3, #0
 8001322:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001324:	2300      	movs	r3, #0
 8001326:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001328:	f107 0318 	add.w	r3, r7, #24
 800132c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001330:	4619      	mov	r1, r3
 8001332:	4816      	ldr	r0, [pc, #88]	; (800138c <FLASH_QSPI_WriteEnable+0x90>)
 8001334:	f00d f8da 	bl	800e4ec <HAL_QSPI_Command>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <FLASH_QSPI_WriteEnable+0x46>
			!= HAL_OK) {
		return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e01f      	b.n	8001382 <FLASH_QSPI_WriteEnable+0x86>
	}

	/* Configure automatic polling mode to wait for write enabling ---- */
	sConfig.Match = 0x02;
 8001342:	2302      	movs	r3, #2
 8001344:	603b      	str	r3, [r7, #0]
	sConfig.Mask = 0x02;
 8001346:	2302      	movs	r3, #2
 8001348:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 800134e:	2301      	movs	r3, #1
 8001350:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 8001352:	2310      	movs	r3, #16
 8001354:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8001356:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800135a:	617b      	str	r3, [r7, #20]
	sCommand.Instruction = READ_STATUS_REG_LOWER_CMD;
 800135c:	2305      	movs	r3, #5
 800135e:	61bb      	str	r3, [r7, #24]
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8001360:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001364:	63fb      	str	r3, [r7, #60]	; 0x3c

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8001366:	463a      	mov	r2, r7
 8001368:	f107 0118 	add.w	r1, r7, #24
 800136c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001370:	4806      	ldr	r0, [pc, #24]	; (800138c <FLASH_QSPI_WriteEnable+0x90>)
 8001372:	f00d fa48 	bl	800e806 <HAL_QSPI_AutoPolling>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <FLASH_QSPI_WriteEnable+0x84>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e000      	b.n	8001382 <FLASH_QSPI_WriteEnable+0x86>
	}

	return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3750      	adds	r7, #80	; 0x50
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20056fa0 	.word	0x20056fa0

08001390 <FLASH_QSPI_Configuration>:

/*Enable quad mode and set dummy cycles count*/
uint8_t FLASH_QSPI_Configuration(void) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b090      	sub	sp, #64	; 0x40
 8001394:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	uint8_t reg;

	/*read configuration register*/
	sCommand.Instruction = READ_STATUS_REG_MIDDLE_CMD;
 8001396:	2335      	movs	r3, #53	; 0x35
 8001398:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800139a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800139e:	623b      	str	r3, [r7, #32]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DataMode = QSPI_DATA_1_LINE;
 80013a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80013b6:	2300      	movs	r3, #0
 80013b8:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80013ba:	2300      	movs	r3, #0
 80013bc:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.NbData = 1;
 80013be:	2301      	movs	r3, #1
 80013c0:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ca:	4619      	mov	r1, r3
 80013cc:	482a      	ldr	r0, [pc, #168]	; (8001478 <FLASH_QSPI_Configuration+0xe8>)
 80013ce:	f00d f88d 	bl	800e4ec <HAL_QSPI_Command>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <FLASH_QSPI_Configuration+0x4c>
			!= HAL_OK) {
		return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e049      	b.n	8001470 <FLASH_QSPI_Configuration+0xe0>
	}

	if (HAL_QSPI_Receive(&hqspi, &reg,
 80013dc:	1dfb      	adds	r3, r7, #7
 80013de:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e2:	4619      	mov	r1, r3
 80013e4:	4824      	ldr	r0, [pc, #144]	; (8001478 <FLASH_QSPI_Configuration+0xe8>)
 80013e6:	f00d f971 	bl	800e6cc <HAL_QSPI_Receive>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <FLASH_QSPI_Configuration+0x64>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e03d      	b.n	8001470 <FLASH_QSPI_Configuration+0xe0>
	}

	if (FLASH_QSPI_WriteEnable() != HAL_OK) {
 80013f4:	f7ff ff82 	bl	80012fc <FLASH_QSPI_WriteEnable>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <FLASH_QSPI_Configuration+0x72>

		return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e036      	b.n	8001470 <FLASH_QSPI_Configuration+0xe0>
	}

	/*set dummy cycles*/
	//MODIFY_REG(reg, 0xF0, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(0xF0)));
	/* Set QE bit in register to enable QUADSPI mode in at25sf128a */
	reg = reg | 0x02;
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	f043 0302 	orr.w	r3, r3, #2
 8001408:	b2db      	uxtb	r3, r3
 800140a:	71fb      	strb	r3, [r7, #7]

	sCommand.Instruction = WRITE_STATUS_REG_MIDDLE_CMD;
 800140c:	2331      	movs	r3, #49	; 0x31
 800140e:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001410:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001414:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001416:	2300      	movs	r3, #0
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800141a:	2300      	movs	r3, #0
 800141c:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800141e:	2300      	movs	r3, #0
 8001420:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001422:	2300      	movs	r3, #0
 8001424:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 800142a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800142e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
	sCommand.NbData = 1;
 8001434:	2301      	movs	r3, #1
 8001436:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001438:	f107 0308 	add.w	r3, r7, #8
 800143c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001440:	4619      	mov	r1, r3
 8001442:	480d      	ldr	r0, [pc, #52]	; (8001478 <FLASH_QSPI_Configuration+0xe8>)
 8001444:	f00d f852 	bl	800e4ec <HAL_QSPI_Command>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <FLASH_QSPI_Configuration+0xc2>
			!= HAL_OK) {
		return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e00e      	b.n	8001470 <FLASH_QSPI_Configuration+0xe0>
	}

	if (HAL_QSPI_Transmit(&hqspi, &reg,
 8001452:	1dfb      	adds	r3, r7, #7
 8001454:	f241 3288 	movw	r2, #5000	; 0x1388
 8001458:	4619      	mov	r1, r3
 800145a:	4807      	ldr	r0, [pc, #28]	; (8001478 <FLASH_QSPI_Configuration+0xe8>)
 800145c:	f00d f8a4 	bl	800e5a8 <HAL_QSPI_Transmit>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <FLASH_QSPI_Configuration+0xde>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		Error_Handler();
 8001466:	f001 fb2f 	bl	8002ac8 <Error_Handler>
		return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <FLASH_QSPI_Configuration+0xe0>
	}
	return HAL_OK;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3740      	adds	r7, #64	; 0x40
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20056fa0 	.word	0x20056fa0

0800147c <FLASH_QSPI_EnableMemoryMappedMode>:
			QSPI_CS_HIGH_TIME_6_CYCLE);

	return HAL_OK;
}

uint8_t FLASH_QSPI_EnableMemoryMappedMode(void) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b090      	sub	sp, #64	; 0x40
 8001480:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef s_command;
	QSPI_MemoryMappedTypeDef sMemMappedCfg;

	/* Enable Memory-Mapped mode-------------------------------------------------- */

	s_command.Instruction = QUAD_INOUT_FAST_READ_CMD;
 8001482:	23eb      	movs	r3, #235	; 0xeb
 8001484:	60bb      	str	r3, [r7, #8]
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001486:	f44f 7380 	mov.w	r3, #256	; 0x100
 800148a:	623b      	str	r3, [r7, #32]
	s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 800148c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001490:	617b      	str	r3, [r7, #20]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_4_LINES;
 8001492:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
		s_command.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8001498:	2300      	movs	r3, #0
 800149a:	61bb      	str	r3, [r7, #24]
		s_command.AlternateBytes = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	613b      	str	r3, [r7, #16]
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80014a4:	2300      	movs	r3, #0
 80014a6:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80014a8:	2300      	movs	r3, #0
 80014aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.AddressMode = QSPI_ADDRESS_4_LINES;
 80014ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.DataMode = QSPI_DATA_4_LINES;
 80014b2:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.NbData = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.Address = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
	s_command.DummyCycles = 0x4; //moze 4?
 80014c0:	2304      	movs	r3, #4
 80014c2:	61fb      	str	r3, [r7, #28]

	sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	607b      	str	r3, [r7, #4]

	if (HAL_QSPI_MemoryMapped(&hqspi, &s_command, &sMemMappedCfg) != HAL_OK) {
 80014c8:	463a      	mov	r2, r7
 80014ca:	f107 0308 	add.w	r3, r7, #8
 80014ce:	4619      	mov	r1, r3
 80014d0:	4806      	ldr	r0, [pc, #24]	; (80014ec <FLASH_QSPI_EnableMemoryMappedMode+0x70>)
 80014d2:	f00d fa0f 	bl	800e8f4 <HAL_QSPI_MemoryMapped>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <FLASH_QSPI_EnableMemoryMappedMode+0x64>
		return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e000      	b.n	80014e2 <FLASH_QSPI_EnableMemoryMappedMode+0x66>
	}
	return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3740      	adds	r7, #64	; 0x40
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20056fa0 	.word	0x20056fa0

080014f0 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	; 0x28
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80014f6:	4b25      	ldr	r3, [pc, #148]	; (800158c <MX_CAN1_Init+0x9c>)
 80014f8:	4a25      	ldr	r2, [pc, #148]	; (8001590 <MX_CAN1_Init+0xa0>)
 80014fa:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 80014fc:	4b23      	ldr	r3, [pc, #140]	; (800158c <MX_CAN1_Init+0x9c>)
 80014fe:	2209      	movs	r2, #9
 8001500:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001502:	4b22      	ldr	r3, [pc, #136]	; (800158c <MX_CAN1_Init+0x9c>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001508:	4b20      	ldr	r3, [pc, #128]	; (800158c <MX_CAN1_Init+0x9c>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800150e:	4b1f      	ldr	r3, [pc, #124]	; (800158c <MX_CAN1_Init+0x9c>)
 8001510:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001514:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001516:	4b1d      	ldr	r3, [pc, #116]	; (800158c <MX_CAN1_Init+0x9c>)
 8001518:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800151c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800151e:	4b1b      	ldr	r3, [pc, #108]	; (800158c <MX_CAN1_Init+0x9c>)
 8001520:	2200      	movs	r2, #0
 8001522:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <MX_CAN1_Init+0x9c>)
 8001526:	2200      	movs	r2, #0
 8001528:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800152a:	4b18      	ldr	r3, [pc, #96]	; (800158c <MX_CAN1_Init+0x9c>)
 800152c:	2200      	movs	r2, #0
 800152e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8001530:	4b16      	ldr	r3, [pc, #88]	; (800158c <MX_CAN1_Init+0x9c>)
 8001532:	2201      	movs	r2, #1
 8001534:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <MX_CAN1_Init+0x9c>)
 8001538:	2200      	movs	r2, #0
 800153a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800153c:	4b13      	ldr	r3, [pc, #76]	; (800158c <MX_CAN1_Init+0x9c>)
 800153e:	2200      	movs	r2, #0
 8001540:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001542:	4812      	ldr	r0, [pc, #72]	; (800158c <MX_CAN1_Init+0x9c>)
 8001544:	f00a f896 	bl	800b674 <HAL_CAN_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800154e:	f001 fabb 	bl	8002ac8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001552:	2301      	movs	r3, #1
 8001554:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 8; // which filter bank to use from the assigned ones
 8001556:	2308      	movs	r3, #8
 8001558:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800156e:	2300      	movs	r3, #0
 8001570:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001572:	2301      	movs	r3, #1
 8001574:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 10;
 8001576:	230a      	movs	r3, #10
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800157a:	463b      	mov	r3, r7
 800157c:	4619      	mov	r1, r3
 800157e:	4803      	ldr	r0, [pc, #12]	; (800158c <MX_CAN1_Init+0x9c>)
 8001580:	f00a f974 	bl	800b86c <HAL_CAN_ConfigFilter>
	//HAL_CAN_Start(&hcan1);

  /* USER CODE END CAN1_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	3728      	adds	r7, #40	; 0x28
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20056e0c 	.word	0x20056e0c
 8001590:	40006400 	.word	0x40006400

08001594 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	; 0x28
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800159a:	4b26      	ldr	r3, [pc, #152]	; (8001634 <MX_CAN2_Init+0xa0>)
 800159c:	4a26      	ldr	r2, [pc, #152]	; (8001638 <MX_CAN2_Init+0xa4>)
 800159e:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 80015a0:	4b24      	ldr	r3, [pc, #144]	; (8001634 <MX_CAN2_Init+0xa0>)
 80015a2:	2209      	movs	r2, #9
 80015a4:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80015a6:	4b23      	ldr	r3, [pc, #140]	; (8001634 <MX_CAN2_Init+0xa0>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80015ac:	4b21      	ldr	r3, [pc, #132]	; (8001634 <MX_CAN2_Init+0xa0>)
 80015ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015b2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 80015b4:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <MX_CAN2_Init+0xa0>)
 80015b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015ba:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 80015bc:	4b1d      	ldr	r3, [pc, #116]	; (8001634 <MX_CAN2_Init+0xa0>)
 80015be:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80015c2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80015c4:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <MX_CAN2_Init+0xa0>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80015ca:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <MX_CAN2_Init+0xa0>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80015d0:	4b18      	ldr	r3, [pc, #96]	; (8001634 <MX_CAN2_Init+0xa0>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 80015d6:	4b17      	ldr	r3, [pc, #92]	; (8001634 <MX_CAN2_Init+0xa0>)
 80015d8:	2201      	movs	r2, #1
 80015da:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80015dc:	4b15      	ldr	r3, [pc, #84]	; (8001634 <MX_CAN2_Init+0xa0>)
 80015de:	2200      	movs	r2, #0
 80015e0:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80015e2:	4b14      	ldr	r3, [pc, #80]	; (8001634 <MX_CAN2_Init+0xa0>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80015e8:	4812      	ldr	r0, [pc, #72]	; (8001634 <MX_CAN2_Init+0xa0>)
 80015ea:	f00a f843 	bl	800b674 <HAL_CAN_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_CAN2_Init+0x64>
  {
    Error_Handler();
 80015f4:	f001 fa68 	bl	8002ac8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80015f8:	2301      	movs	r3, #1
 80015fa:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 18; // which filter bank to use from the assigned ones
 80015fc:	2312      	movs	r3, #18
 80015fe:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001600:	2300      	movs	r3, #0
 8001602:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001614:	2300      	movs	r3, #0
 8001616:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001618:	2301      	movs	r3, #1
 800161a:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 10;
 800161c:	230a      	movs	r3, #10
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
 8001620:	463b      	mov	r3, r7
 8001622:	4619      	mov	r1, r3
 8001624:	4803      	ldr	r0, [pc, #12]	; (8001634 <MX_CAN2_Init+0xa0>)
 8001626:	f00a f921 	bl	800b86c <HAL_CAN_ConfigFilter>

	//HAL_CAN_Start(&hcan2);

  /* USER CODE END CAN2_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	3728      	adds	r7, #40	; 0x28
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20056da4 	.word	0x20056da4
 8001638:	40006800 	.word	0x40006800

0800163c <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08e      	sub	sp, #56	; 0x38
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a4c      	ldr	r2, [pc, #304]	; (800178c <HAL_CAN_MspInit+0x150>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d13a      	bne.n	80016d4 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800165e:	4b4c      	ldr	r3, [pc, #304]	; (8001790 <HAL_CAN_MspInit+0x154>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	3301      	adds	r3, #1
 8001664:	4a4a      	ldr	r2, [pc, #296]	; (8001790 <HAL_CAN_MspInit+0x154>)
 8001666:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001668:	4b49      	ldr	r3, [pc, #292]	; (8001790 <HAL_CAN_MspInit+0x154>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d10b      	bne.n	8001688 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001670:	4b48      	ldr	r3, [pc, #288]	; (8001794 <HAL_CAN_MspInit+0x158>)
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	4a47      	ldr	r2, [pc, #284]	; (8001794 <HAL_CAN_MspInit+0x158>)
 8001676:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800167a:	6413      	str	r3, [r2, #64]	; 0x40
 800167c:	4b45      	ldr	r3, [pc, #276]	; (8001794 <HAL_CAN_MspInit+0x158>)
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001684:	623b      	str	r3, [r7, #32]
 8001686:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001688:	4b42      	ldr	r3, [pc, #264]	; (8001794 <HAL_CAN_MspInit+0x158>)
 800168a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168c:	4a41      	ldr	r2, [pc, #260]	; (8001794 <HAL_CAN_MspInit+0x158>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6313      	str	r3, [r2, #48]	; 0x30
 8001694:	4b3f      	ldr	r3, [pc, #252]	; (8001794 <HAL_CAN_MspInit+0x158>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	61fb      	str	r3, [r7, #28]
 800169e:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80016a0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ae:	2303      	movs	r3, #3
 80016b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80016b2:	2309      	movs	r3, #9
 80016b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ba:	4619      	mov	r1, r3
 80016bc:	4836      	ldr	r0, [pc, #216]	; (8001798 <HAL_CAN_MspInit+0x15c>)
 80016be:	f00b fde7 	bl	800d290 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 3, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2103      	movs	r1, #3
 80016c6:	2014      	movs	r0, #20
 80016c8:	f00a ff1e 	bl	800c508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80016cc:	2014      	movs	r0, #20
 80016ce:	f00a ff37 	bl	800c540 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80016d2:	e056      	b.n	8001782 <HAL_CAN_MspInit+0x146>
  else if(canHandle->Instance==CAN2)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a30      	ldr	r2, [pc, #192]	; (800179c <HAL_CAN_MspInit+0x160>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d151      	bne.n	8001782 <HAL_CAN_MspInit+0x146>
    __HAL_RCC_CAN3_CLK_ENABLE();
 80016de:	4b2d      	ldr	r3, [pc, #180]	; (8001794 <HAL_CAN_MspInit+0x158>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	4a2c      	ldr	r2, [pc, #176]	; (8001794 <HAL_CAN_MspInit+0x158>)
 80016e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016e8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ea:	4b2a      	ldr	r3, [pc, #168]	; (8001794 <HAL_CAN_MspInit+0x158>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016f2:	61bb      	str	r3, [r7, #24]
 80016f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 80016f6:	4b27      	ldr	r3, [pc, #156]	; (8001794 <HAL_CAN_MspInit+0x158>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	4a26      	ldr	r2, [pc, #152]	; (8001794 <HAL_CAN_MspInit+0x158>)
 80016fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001700:	6413      	str	r3, [r2, #64]	; 0x40
 8001702:	4b24      	ldr	r3, [pc, #144]	; (8001794 <HAL_CAN_MspInit+0x158>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800170e:	4b20      	ldr	r3, [pc, #128]	; (8001790 <HAL_CAN_MspInit+0x154>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	3301      	adds	r3, #1
 8001714:	4a1e      	ldr	r2, [pc, #120]	; (8001790 <HAL_CAN_MspInit+0x154>)
 8001716:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001718:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <HAL_CAN_MspInit+0x154>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d10b      	bne.n	8001738 <HAL_CAN_MspInit+0xfc>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001720:	4b1c      	ldr	r3, [pc, #112]	; (8001794 <HAL_CAN_MspInit+0x158>)
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	4a1b      	ldr	r2, [pc, #108]	; (8001794 <HAL_CAN_MspInit+0x158>)
 8001726:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800172a:	6413      	str	r3, [r2, #64]	; 0x40
 800172c:	4b19      	ldr	r3, [pc, #100]	; (8001794 <HAL_CAN_MspInit+0x158>)
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001738:	4b16      	ldr	r3, [pc, #88]	; (8001794 <HAL_CAN_MspInit+0x158>)
 800173a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173c:	4a15      	ldr	r2, [pc, #84]	; (8001794 <HAL_CAN_MspInit+0x158>)
 800173e:	f043 0302 	orr.w	r3, r3, #2
 8001742:	6313      	str	r3, [r2, #48]	; 0x30
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <HAL_CAN_MspInit+0x158>)
 8001746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001750:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	2302      	movs	r3, #2
 8001758:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175e:	2303      	movs	r3, #3
 8001760:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001762:	2309      	movs	r3, #9
 8001764:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176a:	4619      	mov	r1, r3
 800176c:	480c      	ldr	r0, [pc, #48]	; (80017a0 <HAL_CAN_MspInit+0x164>)
 800176e:	f00b fd8f 	bl	800d290 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 3, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2103      	movs	r1, #3
 8001776:	2040      	movs	r0, #64	; 0x40
 8001778:	f00a fec6 	bl	800c508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800177c:	2040      	movs	r0, #64	; 0x40
 800177e:	f00a fedf 	bl	800c540 <HAL_NVIC_EnableIRQ>
}
 8001782:	bf00      	nop
 8001784:	3738      	adds	r7, #56	; 0x38
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40006400 	.word	0x40006400
 8001790:	20000270 	.word	0x20000270
 8001794:	40023800 	.word	0x40023800
 8001798:	40020000 	.word	0x40020000
 800179c:	40006800 	.word	0x40006800
 80017a0:	40020400 	.word	0x40020400

080017a4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80017a4:	b590      	push	{r4, r7, lr}
 80017a6:	b091      	sub	sp, #68	; 0x44
 80017a8:	af04      	add	r7, sp, #16
 80017aa:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	f107 0214 	add.w	r2, r7, #20
 80017b4:	2100      	movs	r1, #0
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f00a fa63 	bl	800bc82 <HAL_CAN_GetRxMessage>
	if (hcan->Instance == CAN1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a12      	ldr	r2, [pc, #72]	; (800180c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d10f      	bne.n	80017e6 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
	{
		//ComputeEcumasterFrame(RxHeader, RxData);
		ComputeInternalFrame(RxHeader, RxData);
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	9303      	str	r3, [sp, #12]
 80017cc:	466c      	mov	r4, sp
 80017ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017e0:	f000 f98e 	bl	8001b00 <ComputeInternalFrame>
	else
	{
		//ComputeInternalFrame(RxHeader, RxData);
		ComputeEcumasterFrame(RxHeader, RxData);
	}
}
 80017e4:	e00e      	b.n	8001804 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
		ComputeEcumasterFrame(RxHeader, RxData);
 80017e6:	f107 030c 	add.w	r3, r7, #12
 80017ea:	9303      	str	r3, [sp, #12]
 80017ec:	466c      	mov	r4, sp
 80017ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001800:	f000 f806 	bl	8001810 <ComputeEcumasterFrame>
}
 8001804:	bf00      	nop
 8001806:	3734      	adds	r7, #52	; 0x34
 8001808:	46bd      	mov	sp, r7
 800180a:	bd90      	pop	{r4, r7, pc}
 800180c:	40006400 	.word	0x40006400

08001810 <ComputeEcumasterFrame>:

void ComputeEcumasterFrame(CAN_RxHeaderTypeDef RxHeader, uint8_t *RxData)
{
 8001810:	b084      	sub	sp, #16
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	f107 0c20 	add.w	ip, r7, #32
 800181c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	switch (RxHeader.StdId)
 8001820:	6a3b      	ldr	r3, [r7, #32]
 8001822:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001826:	f000 8123 	beq.w	8001a70 <ComputeEcumasterFrame+0x260>
 800182a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800182e:	f0c0 813f 	bcc.w	8001ab0 <ComputeEcumasterFrame+0x2a0>
 8001832:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8001836:	f080 813b 	bcs.w	8001ab0 <ComputeEcumasterFrame+0x2a0>
 800183a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800183e:	f0c0 8137 	bcc.w	8001ab0 <ComputeEcumasterFrame+0x2a0>
 8001842:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 8001846:	2b07      	cmp	r3, #7
 8001848:	f200 8132 	bhi.w	8001ab0 <ComputeEcumasterFrame+0x2a0>
 800184c:	a201      	add	r2, pc, #4	; (adr r2, 8001854 <ComputeEcumasterFrame+0x44>)
 800184e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001852:	bf00      	nop
 8001854:	08001875 	.word	0x08001875
 8001858:	080018b9 	.word	0x080018b9
 800185c:	0800193f 	.word	0x0800193f
 8001860:	08001985 	.word	0x08001985
 8001864:	080019cd 	.word	0x080019cd
 8001868:	08001a21 	.word	0x08001a21
 800186c:	08001acf 	.word	0x08001acf
 8001870:	08001acf 	.word	0x08001acf
	{
	case Frame1:
		EcuData.rpm = LittleToBigEndian(&RxData[0]);
 8001874:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001876:	f000 f96d 	bl	8001b54 <LittleToBigEndian>
 800187a:	4603      	mov	r3, r0
 800187c:	461a      	mov	r2, r3
 800187e:	4b99      	ldr	r3, [pc, #612]	; (8001ae4 <ComputeEcumasterFrame+0x2d4>)
 8001880:	801a      	strh	r2, [r3, #0]
		EcuData.tps = RxData[2];
 8001882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001884:	789a      	ldrb	r2, [r3, #2]
 8001886:	4b97      	ldr	r3, [pc, #604]	; (8001ae4 <ComputeEcumasterFrame+0x2d4>)
 8001888:	709a      	strb	r2, [r3, #2]
		EcuData.iat = RxData[3];
 800188a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800188c:	78da      	ldrb	r2, [r3, #3]
 800188e:	4b95      	ldr	r3, [pc, #596]	; (8001ae4 <ComputeEcumasterFrame+0x2d4>)
 8001890:	70da      	strb	r2, [r3, #3]
		EcuData.map = LittleToBigEndian(&RxData[4]);
 8001892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001894:	3304      	adds	r3, #4
 8001896:	4618      	mov	r0, r3
 8001898:	f000 f95c 	bl	8001b54 <LittleToBigEndian>
 800189c:	4603      	mov	r3, r0
 800189e:	461a      	mov	r2, r3
 80018a0:	4b90      	ldr	r3, [pc, #576]	; (8001ae4 <ComputeEcumasterFrame+0x2d4>)
 80018a2:	809a      	strh	r2, [r3, #4]
		EcuData.injPW = LittleToBigEndian(&RxData[6]);
 80018a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018a6:	3306      	adds	r3, #6
 80018a8:	4618      	mov	r0, r3
 80018aa:	f000 f953 	bl	8001b54 <LittleToBigEndian>
 80018ae:	4603      	mov	r3, r0
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b8c      	ldr	r3, [pc, #560]	; (8001ae4 <ComputeEcumasterFrame+0x2d4>)
 80018b4:	80da      	strh	r2, [r3, #6]
		break;
 80018b6:	e10d      	b.n	8001ad4 <ComputeEcumasterFrame+0x2c4>
	case Frame2:
		EcuData.ain1 = LittleToBigEndian(&RxData[0]) * 0.0048828125f;
 80018b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80018ba:	f000 f94b 	bl	8001b54 <LittleToBigEndian>
 80018be:	4603      	mov	r3, r0
 80018c0:	ee07 3a90 	vmov	s15, r3
 80018c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018c8:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8001ae8 <ComputeEcumasterFrame+0x2d8>
 80018cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018d0:	4b84      	ldr	r3, [pc, #528]	; (8001ae4 <ComputeEcumasterFrame+0x2d4>)
 80018d2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		EcuData.ain2 = LittleToBigEndian(&RxData[2]) * 0.0048828125f;
 80018d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018d8:	3302      	adds	r3, #2
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 f93a 	bl	8001b54 <LittleToBigEndian>
 80018e0:	4603      	mov	r3, r0
 80018e2:	ee07 3a90 	vmov	s15, r3
 80018e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ea:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001ae8 <ComputeEcumasterFrame+0x2d8>
 80018ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018f2:	4b7c      	ldr	r3, [pc, #496]	; (8001ae4 <ComputeEcumasterFrame+0x2d4>)
 80018f4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		EcuData.ain3 = LittleToBigEndian(&RxData[4]) * 0.0048828125f;
 80018f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018fa:	3304      	adds	r3, #4
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 f929 	bl	8001b54 <LittleToBigEndian>
 8001902:	4603      	mov	r3, r0
 8001904:	ee07 3a90 	vmov	s15, r3
 8001908:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800190c:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001ae8 <ComputeEcumasterFrame+0x2d8>
 8001910:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001914:	4b73      	ldr	r3, [pc, #460]	; (8001ae4 <ComputeEcumasterFrame+0x2d4>)
 8001916:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		EcuData.ain4 = LittleToBigEndian(&RxData[6]) * 0.0048828125f;
 800191a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800191c:	3306      	adds	r3, #6
 800191e:	4618      	mov	r0, r3
 8001920:	f000 f918 	bl	8001b54 <LittleToBigEndian>
 8001924:	4603      	mov	r3, r0
 8001926:	ee07 3a90 	vmov	s15, r3
 800192a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800192e:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8001ae8 <ComputeEcumasterFrame+0x2d8>
 8001932:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001936:	4b6b      	ldr	r3, [pc, #428]	; (8001ae4 <ComputeEcumasterFrame+0x2d4>)
 8001938:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		break;
 800193c:	e0ca      	b.n	8001ad4 <ComputeEcumasterFrame+0x2c4>
	case Frame3:
		EcuData.speed = LittleToBigEndian(&RxData[0]);
 800193e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001940:	f000 f908 	bl	8001b54 <LittleToBigEndian>
 8001944:	4603      	mov	r3, r0
 8001946:	461a      	mov	r2, r3
 8001948:	4b66      	ldr	r3, [pc, #408]	; (8001ae4 <ComputeEcumasterFrame+0x2d4>)
 800194a:	811a      	strh	r2, [r3, #8]
		EcuData.oilTemp = RxData[3];
 800194c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800194e:	78da      	ldrb	r2, [r3, #3]
 8001950:	4b64      	ldr	r3, [pc, #400]	; (8001ae4 <ComputeEcumasterFrame+0x2d4>)
 8001952:	72da      	strb	r2, [r3, #11]
		EcuData.oilPress = RxData[4] * 0.0625f;
 8001954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001956:	3304      	adds	r3, #4
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	ee07 3a90 	vmov	s15, r3
 800195e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001962:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001aec <ComputeEcumasterFrame+0x2dc>
 8001966:	ee67 7a87 	vmul.f32	s15, s15, s14
 800196a:	4b5e      	ldr	r3, [pc, #376]	; (8001ae4 <ComputeEcumasterFrame+0x2d4>)
 800196c:	edc3 7a03 	vstr	s15, [r3, #12]
		EcuData.clt = LittleToBigEndian(&RxData[6]);
 8001970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001972:	3306      	adds	r3, #6
 8001974:	4618      	mov	r0, r3
 8001976:	f000 f8ed 	bl	8001b54 <LittleToBigEndian>
 800197a:	4603      	mov	r3, r0
 800197c:	b21a      	sxth	r2, r3
 800197e:	4b59      	ldr	r3, [pc, #356]	; (8001ae4 <ComputeEcumasterFrame+0x2d4>)
 8001980:	821a      	strh	r2, [r3, #16]
		break;
 8001982:	e0a7      	b.n	8001ad4 <ComputeEcumasterFrame+0x2c4>
	case Frame4:
		EcuData.ignAngle = RxData[0];
 8001984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	b25a      	sxtb	r2, r3
 800198a:	4b56      	ldr	r3, [pc, #344]	; (8001ae4 <ComputeEcumasterFrame+0x2d4>)
 800198c:	749a      	strb	r2, [r3, #18]
		EcuData.ignDwell = RxData[1];
 800198e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001990:	785a      	ldrb	r2, [r3, #1]
 8001992:	4b54      	ldr	r3, [pc, #336]	; (8001ae4 <ComputeEcumasterFrame+0x2d4>)
 8001994:	74da      	strb	r2, [r3, #19]
		EcuData.lambda = RxData[2];
 8001996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001998:	789a      	ldrb	r2, [r3, #2]
 800199a:	4b52      	ldr	r3, [pc, #328]	; (8001ae4 <ComputeEcumasterFrame+0x2d4>)
 800199c:	751a      	strb	r2, [r3, #20]
		EcuData.lambdaCorrection = RxData[3];
 800199e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019a0:	78da      	ldrb	r2, [r3, #3]
 80019a2:	4b50      	ldr	r3, [pc, #320]	; (8001ae4 <ComputeEcumasterFrame+0x2d4>)
 80019a4:	755a      	strb	r2, [r3, #21]
		EcuData.egt1 = LittleToBigEndian(&RxData[4]);
 80019a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019a8:	3304      	adds	r3, #4
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 f8d2 	bl	8001b54 <LittleToBigEndian>
 80019b0:	4603      	mov	r3, r0
 80019b2:	461a      	mov	r2, r3
 80019b4:	4b4b      	ldr	r3, [pc, #300]	; (8001ae4 <ComputeEcumasterFrame+0x2d4>)
 80019b6:	82da      	strh	r2, [r3, #22]
		EcuData.egt2 = LittleToBigEndian(&RxData[6]);
 80019b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ba:	3306      	adds	r3, #6
 80019bc:	4618      	mov	r0, r3
 80019be:	f000 f8c9 	bl	8001b54 <LittleToBigEndian>
 80019c2:	4603      	mov	r3, r0
 80019c4:	461a      	mov	r2, r3
 80019c6:	4b47      	ldr	r3, [pc, #284]	; (8001ae4 <ComputeEcumasterFrame+0x2d4>)
 80019c8:	831a      	strh	r2, [r3, #24]
		break;
 80019ca:	e083      	b.n	8001ad4 <ComputeEcumasterFrame+0x2c4>
	case Frame5:
		EcuData.gear = RxData[0];
 80019cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ce:	781a      	ldrb	r2, [r3, #0]
 80019d0:	4b44      	ldr	r3, [pc, #272]	; (8001ae4 <ComputeEcumasterFrame+0x2d4>)
 80019d2:	769a      	strb	r2, [r3, #26]
		EcuData.ecuTemp = RxData[1];
 80019d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019d6:	3301      	adds	r3, #1
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	b25a      	sxtb	r2, r3
 80019dc:	4b41      	ldr	r3, [pc, #260]	; (8001ae4 <ComputeEcumasterFrame+0x2d4>)
 80019de:	76da      	strb	r2, [r3, #27]
		EcuData.batt = LittleToBigEndian(&RxData[2]) * 0.027f;
 80019e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019e2:	3302      	adds	r3, #2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 f8b5 	bl	8001b54 <LittleToBigEndian>
 80019ea:	4603      	mov	r3, r0
 80019ec:	ee07 3a90 	vmov	s15, r3
 80019f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019f4:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001af0 <ComputeEcumasterFrame+0x2e0>
 80019f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019fc:	4b39      	ldr	r3, [pc, #228]	; (8001ae4 <ComputeEcumasterFrame+0x2d4>)
 80019fe:	edc3 7a07 	vstr	s15, [r3, #28]
		EcuData.errflag = LittleToBigEndian(&RxData[5]);
 8001a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a04:	3305      	adds	r3, #5
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 f8a4 	bl	8001b54 <LittleToBigEndian>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	461a      	mov	r2, r3
 8001a10:	4b34      	ldr	r3, [pc, #208]	; (8001ae4 <ComputeEcumasterFrame+0x2d4>)
 8001a12:	841a      	strh	r2, [r3, #32]
		EcuData.flags1 = RxData[7];
 8001a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a16:	79da      	ldrb	r2, [r3, #7]
 8001a18:	4b32      	ldr	r3, [pc, #200]	; (8001ae4 <ComputeEcumasterFrame+0x2d4>)
 8001a1a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		break;
 8001a1e:	e059      	b.n	8001ad4 <ComputeEcumasterFrame+0x2c4>
	case Frame6:
		EcuData.DBWPosition = RxData[0];
 8001a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a22:	781a      	ldrb	r2, [r3, #0]
 8001a24:	4b2f      	ldr	r3, [pc, #188]	; (8001ae4 <ComputeEcumasterFrame+0x2d4>)
 8001a26:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		EcuData.DBWTrigger = RxData[1];
 8001a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a2c:	785a      	ldrb	r2, [r3, #1]
 8001a2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ae4 <ComputeEcumasterFrame+0x2d4>)
 8001a30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		EcuData.TCDRPMRaw = LittleToBigEndian(&RxData[2]);
 8001a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a36:	3302      	adds	r3, #2
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f000 f88b 	bl	8001b54 <LittleToBigEndian>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	461a      	mov	r2, r3
 8001a42:	4b28      	ldr	r3, [pc, #160]	; (8001ae4 <ComputeEcumasterFrame+0x2d4>)
 8001a44:	84da      	strh	r2, [r3, #38]	; 0x26
		EcuData.TCDRPM = LittleToBigEndian(&RxData[4]);
 8001a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a48:	3304      	adds	r3, #4
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 f882 	bl	8001b54 <LittleToBigEndian>
 8001a50:	4603      	mov	r3, r0
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	4b23      	ldr	r3, [pc, #140]	; (8001ae4 <ComputeEcumasterFrame+0x2d4>)
 8001a56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		EcuData.TCTorqueReduction = RxData[6];
 8001a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a5c:	799a      	ldrb	r2, [r3, #6]
 8001a5e:	4b21      	ldr	r3, [pc, #132]	; (8001ae4 <ComputeEcumasterFrame+0x2d4>)
 8001a60:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		EcuData.PitLimitTorqueReduction = RxData[7];
 8001a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a66:	79da      	ldrb	r2, [r3, #7]
 8001a68:	4b1e      	ldr	r3, [pc, #120]	; (8001ae4 <ComputeEcumasterFrame+0x2d4>)
 8001a6a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		break;
 8001a6e:	e031      	b.n	8001ad4 <ComputeEcumasterFrame+0x2c4>
	case Frame7:
		break;
	case Frame8:
		break;
	case 768:
		telemetryData.gear = RxData[1];
 8001a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a72:	785a      	ldrb	r2, [r3, #1]
 8001a74:	4b1f      	ldr	r3, [pc, #124]	; (8001af4 <ComputeEcumasterFrame+0x2e4>)
 8001a76:	701a      	strb	r2, [r3, #0]
		telemetryData.minGearChangeTime =RxData[2];
 8001a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a7a:	789a      	ldrb	r2, [r3, #2]
 8001a7c:	4b1d      	ldr	r3, [pc, #116]	; (8001af4 <ComputeEcumasterFrame+0x2e4>)
 8001a7e:	709a      	strb	r2, [r3, #2]
		telemetryData.gearChangeTime =RxData[3];
 8001a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a82:	78da      	ldrb	r2, [r3, #3]
 8001a84:	4b1b      	ldr	r3, [pc, #108]	; (8001af4 <ComputeEcumasterFrame+0x2e4>)
 8001a86:	705a      	strb	r2, [r3, #1]
		telemetryData.maxGearChangeTime =RxData[4];
 8001a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a8a:	791a      	ldrb	r2, [r3, #4]
 8001a8c:	4b19      	ldr	r3, [pc, #100]	; (8001af4 <ComputeEcumasterFrame+0x2e4>)
 8001a8e:	70da      	strb	r2, [r3, #3]
		if (telemetryData.gear == 0)
 8001a90:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <ComputeEcumasterFrame+0x2e4>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d103      	bne.n	8001aa0 <ComputeEcumasterFrame+0x290>
		{
			telemetryData.gear = 1;
 8001a98:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <ComputeEcumasterFrame+0x2e4>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	701a      	strb	r2, [r3, #0]
		else if (telemetryData.gear == 1)
		{
			telemetryData.gear = 0;
		}

		break;
 8001a9e:	e018      	b.n	8001ad2 <ComputeEcumasterFrame+0x2c2>
		else if (telemetryData.gear == 1)
 8001aa0:	4b14      	ldr	r3, [pc, #80]	; (8001af4 <ComputeEcumasterFrame+0x2e4>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d114      	bne.n	8001ad2 <ComputeEcumasterFrame+0x2c2>
			telemetryData.gear = 0;
 8001aa8:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <ComputeEcumasterFrame+0x2e4>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	701a      	strb	r2, [r3, #0]
		break;
 8001aae:	e010      	b.n	8001ad2 <ComputeEcumasterFrame+0x2c2>
	default:
		;
// forward frame to internal can
		CAN_TxHeaderTypeDef TxHeader;
		TxHeader.DLC = RxHeader.DLC;
 8001ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ab2:	613b      	str	r3, [r7, #16]
		TxHeader.IDE = RxHeader.IDE;
 8001ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab6:	60bb      	str	r3, [r7, #8]
		TxHeader.RTR = RxHeader.RTR;
 8001ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aba:	60fb      	str	r3, [r7, #12]
		TxHeader.StdId = RxHeader.StdId;
 8001abc:	6a3b      	ldr	r3, [r7, #32]
 8001abe:	603b      	str	r3, [r7, #0]
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, RxData, &TxMailbox);
 8001ac0:	4639      	mov	r1, r7
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <ComputeEcumasterFrame+0x2e8>)
 8001ac4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ac6:	480d      	ldr	r0, [pc, #52]	; (8001afc <ComputeEcumasterFrame+0x2ec>)
 8001ac8:	f00a f800 	bl	800bacc <HAL_CAN_AddTxMessage>
	}
}
 8001acc:	e002      	b.n	8001ad4 <ComputeEcumasterFrame+0x2c4>
		break;
 8001ace:	bf00      	nop
 8001ad0:	e000      	b.n	8001ad4 <ComputeEcumasterFrame+0x2c4>
		break;
 8001ad2:	bf00      	nop
}
 8001ad4:	bf00      	nop
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ade:	b004      	add	sp, #16
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20056dcc 	.word	0x20056dcc
 8001ae8:	3ba00000 	.word	0x3ba00000
 8001aec:	3d800000 	.word	0x3d800000
 8001af0:	3cdd2f1b 	.word	0x3cdd2f1b
 8001af4:	20056d90 	.word	0x20056d90
 8001af8:	20056e08 	.word	0x20056e08
 8001afc:	20056e0c 	.word	0x20056e0c

08001b00 <ComputeInternalFrame>:

void ComputeInternalFrame(CAN_RxHeaderTypeDef RxHeader, uint8_t *RxData)
{
 8001b00:	b084      	sub	sp, #16
 8001b02:	b580      	push	{r7, lr}
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	f107 0c08 	add.w	ip, r7, #8
 8001b0a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (RxHeader.StdId == 0x520)
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	f5b3 6fa4 	cmp.w	r3, #1312	; 0x520
 8001b14:	d109      	bne.n	8001b2a <ComputeInternalFrame+0x2a>
	{
		telemetryData.isIntercomActive = RxData[0] & 0x8 ? 1: 0;
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	10db      	asrs	r3, r3, #3
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <ComputeInternalFrame+0x50>)
 8001b26:	731a      	strb	r2, [r3, #12]
	else if (RxHeader.StdId == 0x500)
	{
		telemetryData.steeringWheelAttached = 1;
		telemetryData.steeringWheelAttachedTimestamp = HAL_GetTick();
	}
}
 8001b28:	e00b      	b.n	8001b42 <ComputeInternalFrame+0x42>
	else if (RxHeader.StdId == 0x500)
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001b30:	d107      	bne.n	8001b42 <ComputeInternalFrame+0x42>
		telemetryData.steeringWheelAttached = 1;
 8001b32:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <ComputeInternalFrame+0x50>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	711a      	strb	r2, [r3, #4]
		telemetryData.steeringWheelAttachedTimestamp = HAL_GetTick();
 8001b38:	f009 f97e 	bl	800ae38 <HAL_GetTick>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <ComputeInternalFrame+0x50>)
 8001b40:	6093      	str	r3, [r2, #8]
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b4a:	b004      	add	sp, #16
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	20056d90 	.word	0x20056d90

08001b54 <LittleToBigEndian>:

uint16_t LittleToBigEndian(uint8_t *data)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	uint16_t returnData = data[0] + data[1] * 0xFF;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3301      	adds	r3, #1
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	0209      	lsls	r1, r1, #8
 8001b6e:	1acb      	subs	r3, r1, r3
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	4413      	add	r3, r2
 8001b74:	81fb      	strh	r3, [r7, #14]
	return returnData;
 8001b76:	89fb      	ldrh	r3, [r7, #14]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001b88:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <MX_CRC_Init+0x3c>)
 8001b8a:	4a0e      	ldr	r2, [pc, #56]	; (8001bc4 <MX_CRC_Init+0x40>)
 8001b8c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001b8e:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <MX_CRC_Init+0x3c>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001b94:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <MX_CRC_Init+0x3c>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <MX_CRC_Init+0x3c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001ba0:	4b07      	ldr	r3, [pc, #28]	; (8001bc0 <MX_CRC_Init+0x3c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <MX_CRC_Init+0x3c>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001bac:	4804      	ldr	r0, [pc, #16]	; (8001bc0 <MX_CRC_Init+0x3c>)
 8001bae:	f00a fce3 	bl	800c578 <HAL_CRC_Init>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001bb8:	f000 ff86 	bl	8002ac8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20056e34 	.word	0x20056e34
 8001bc4:	40023000 	.word	0x40023000

08001bc8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <HAL_CRC_MspInit+0x38>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d10b      	bne.n	8001bf2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001bda:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <HAL_CRC_MspInit+0x3c>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a09      	ldr	r2, [pc, #36]	; (8001c04 <HAL_CRC_MspInit+0x3c>)
 8001be0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <HAL_CRC_MspInit+0x3c>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001bf2:	bf00      	nop
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	40023000 	.word	0x40023000
 8001c04:	40023800 	.word	0x40023800

08001c08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c0e:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <MX_DMA_Init+0x48>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a0f      	ldr	r2, [pc, #60]	; (8001c50 <MX_DMA_Init+0x48>)
 8001c14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <MX_DMA_Init+0x48>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2103      	movs	r1, #3
 8001c2a:	200b      	movs	r0, #11
 8001c2c:	f00a fc6c 	bl	800c508 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001c30:	200b      	movs	r0, #11
 8001c32:	f00a fc85 	bl	800c540 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 3, 0);
 8001c36:	2200      	movs	r2, #0
 8001c38:	2103      	movs	r1, #3
 8001c3a:	200f      	movs	r0, #15
 8001c3c:	f00a fc64 	bl	800c508 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001c40:	200f      	movs	r0, #15
 8001c42:	f00a fc7d 	bl	800c540 <HAL_NVIC_EnableIRQ>

}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800

08001c54 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001c58:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <MX_DMA2D_Init+0x68>)
 8001c5a:	4a19      	ldr	r2, [pc, #100]	; (8001cc0 <MX_DMA2D_Init+0x6c>)
 8001c5c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001c5e:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <MX_DMA2D_Init+0x68>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8001c64:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <MX_DMA2D_Init+0x68>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001c6a:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <MX_DMA2D_Init+0x68>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <MX_DMA2D_Init+0x68>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8001c76:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <MX_DMA2D_Init+0x68>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <MX_DMA2D_Init+0x68>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001c82:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <MX_DMA2D_Init+0x68>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <MX_DMA2D_Init+0x68>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <MX_DMA2D_Init+0x68>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001c94:	4809      	ldr	r0, [pc, #36]	; (8001cbc <MX_DMA2D_Init+0x68>)
 8001c96:	f00b f8f3 	bl	800ce80 <HAL_DMA2D_Init>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 8001ca0:	f000 ff12 	bl	8002ac8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	4805      	ldr	r0, [pc, #20]	; (8001cbc <MX_DMA2D_Init+0x68>)
 8001ca8:	f00b fa54 	bl	800d154 <HAL_DMA2D_ConfigLayer>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 8001cb2:	f000 ff09 	bl	8002ac8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20056e58 	.word	0x20056e58
 8001cc0:	4002b000 	.word	0x4002b000

08001cc4 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a0d      	ldr	r2, [pc, #52]	; (8001d08 <HAL_DMA2D_MspInit+0x44>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d113      	bne.n	8001cfe <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001cd6:	4b0d      	ldr	r3, [pc, #52]	; (8001d0c <HAL_DMA2D_MspInit+0x48>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	4a0c      	ldr	r2, [pc, #48]	; (8001d0c <HAL_DMA2D_MspInit+0x48>)
 8001cdc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <HAL_DMA2D_MspInit+0x48>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2103      	movs	r1, #3
 8001cf2:	205a      	movs	r0, #90	; 0x5a
 8001cf4:	f00a fc08 	bl	800c508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001cf8:	205a      	movs	r0, #90	; 0x5a
 8001cfa:	f00a fc21 	bl	800c540 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8001cfe:	bf00      	nop
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	4002b000 	.word	0x4002b000
 8001d0c:	40023800 	.word	0x40023800

08001d10 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001d16:	1d3b      	adds	r3, r7, #4
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
 8001d24:	615a      	str	r2, [r3, #20]
 8001d26:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001d28:	4b4a      	ldr	r3, [pc, #296]	; (8001e54 <MX_FMC_Init+0x144>)
 8001d2a:	4a4b      	ldr	r2, [pc, #300]	; (8001e58 <MX_FMC_Init+0x148>)
 8001d2c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001d2e:	4b49      	ldr	r3, [pc, #292]	; (8001e54 <MX_FMC_Init+0x144>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001d34:	4b47      	ldr	r3, [pc, #284]	; (8001e54 <MX_FMC_Init+0x144>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8001d3a:	4b46      	ldr	r3, [pc, #280]	; (8001e54 <MX_FMC_Init+0x144>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001d40:	4b44      	ldr	r3, [pc, #272]	; (8001e54 <MX_FMC_Init+0x144>)
 8001d42:	2210      	movs	r2, #16
 8001d44:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8001d46:	4b43      	ldr	r3, [pc, #268]	; (8001e54 <MX_FMC_Init+0x144>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8001d4c:	4b41      	ldr	r3, [pc, #260]	; (8001e54 <MX_FMC_Init+0x144>)
 8001d4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d52:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001d54:	4b3f      	ldr	r3, [pc, #252]	; (8001e54 <MX_FMC_Init+0x144>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001d5a:	4b3e      	ldr	r3, [pc, #248]	; (8001e54 <MX_FMC_Init+0x144>)
 8001d5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d60:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001d62:	4b3c      	ldr	r3, [pc, #240]	; (8001e54 <MX_FMC_Init+0x144>)
 8001d64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d68:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001d6a:	4b3a      	ldr	r3, [pc, #232]	; (8001e54 <MX_FMC_Init+0x144>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001d70:	2302      	movs	r3, #2
 8001d72:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001d74:	2307      	movs	r3, #7
 8001d76:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001d78:	2304      	movs	r3, #4
 8001d7a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8001d7c:	2306      	movs	r3, #6
 8001d7e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001d80:	2303      	movs	r3, #3
 8001d82:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001d84:	2302      	movs	r3, #2
 8001d86:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001d8c:	1d3b      	adds	r3, r7, #4
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4830      	ldr	r0, [pc, #192]	; (8001e54 <MX_FMC_Init+0x144>)
 8001d92:	f00e f929 	bl	800ffe8 <HAL_SDRAM_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001d9c:	f000 fe94 	bl	8002ac8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
	static FMC_SDRAM_CommandTypeDef command;
	__IO uint32_t
	tmp = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	603b      	str	r3, [r7, #0]

	//Krok 1: Konfiguracja zegarow
	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8001da4:	4b2d      	ldr	r3, [pc, #180]	; (8001e5c <MX_FMC_Init+0x14c>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001daa:	4b2c      	ldr	r3, [pc, #176]	; (8001e5c <MX_FMC_Init+0x14c>)
 8001dac:	2210      	movs	r2, #16
 8001dae:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8001db0:	4b2a      	ldr	r3, [pc, #168]	; (8001e5c <MX_FMC_Init+0x14c>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8001db6:	4b29      	ldr	r3, [pc, #164]	; (8001e5c <MX_FMC_Init+0x14c>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	60da      	str	r2, [r3, #12]
	//Wyslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8001dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc0:	4926      	ldr	r1, [pc, #152]	; (8001e5c <MX_FMC_Init+0x14c>)
 8001dc2:	4824      	ldr	r0, [pc, #144]	; (8001e54 <MX_FMC_Init+0x144>)
 8001dc4:	f00e f944 	bl	8010050 <HAL_SDRAM_SendCommand>
	//Krok 2: Opoznienie 100us minimum, wyslane 1ms Systick
	HAL_Delay(1);
 8001dc8:	2001      	movs	r0, #1
 8001dca:	f009 f841 	bl	800ae50 <HAL_Delay>
	//Krok 3: Konfiguracja PALL (precharge all)
	command.CommandMode = FMC_SDRAM_CMD_PALL;
 8001dce:	4b23      	ldr	r3, [pc, #140]	; (8001e5c <MX_FMC_Init+0x14c>)
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001dd4:	4b21      	ldr	r3, [pc, #132]	; (8001e5c <MX_FMC_Init+0x14c>)
 8001dd6:	2210      	movs	r2, #16
 8001dd8:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8001dda:	4b20      	ldr	r3, [pc, #128]	; (8001e5c <MX_FMC_Init+0x14c>)
 8001ddc:	2201      	movs	r2, #1
 8001dde:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8001de0:	4b1e      	ldr	r3, [pc, #120]	; (8001e5c <MX_FMC_Init+0x14c>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	60da      	str	r2, [r3, #12]
	//Wyslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8001de6:	f04f 32ff 	mov.w	r2, #4294967295
 8001dea:	491c      	ldr	r1, [pc, #112]	; (8001e5c <MX_FMC_Init+0x14c>)
 8001dec:	4819      	ldr	r0, [pc, #100]	; (8001e54 <MX_FMC_Init+0x144>)
 8001dee:	f00e f92f 	bl	8010050 <HAL_SDRAM_SendCommand>
	//Krok 4: Komenda Auto Refresh
	command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001df2:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <MX_FMC_Init+0x14c>)
 8001df4:	2203      	movs	r2, #3
 8001df6:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001df8:	4b18      	ldr	r3, [pc, #96]	; (8001e5c <MX_FMC_Init+0x14c>)
 8001dfa:	2210      	movs	r2, #16
 8001dfc:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 8;
 8001dfe:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <MX_FMC_Init+0x14c>)
 8001e00:	2208      	movs	r2, #8
 8001e02:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8001e04:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <MX_FMC_Init+0x14c>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	60da      	str	r2, [r3, #12]
	//Przeslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8001e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e0e:	4913      	ldr	r1, [pc, #76]	; (8001e5c <MX_FMC_Init+0x14c>)
 8001e10:	4810      	ldr	r0, [pc, #64]	; (8001e54 <MX_FMC_Init+0x144>)
 8001e12:	f00e f91d 	bl	8010050 <HAL_SDRAM_SendCommand>
	//Krok 5: Programowanie trybu dla zewnetrznej pamieci
	tmp = (uint32_t) SDRAM_MODEREG_BURST_LENGTH_1
 8001e16:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001e1a:	603b      	str	r3, [r7, #0]
			| SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL | SDRAM_MODEREG_CAS_LATENCY_2
			| SDRAM_MODEREG_OPERATING_MODE_STANDARD
			| SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
	command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <MX_FMC_Init+0x14c>)
 8001e1e:	2204      	movs	r2, #4
 8001e20:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <MX_FMC_Init+0x14c>)
 8001e24:	2210      	movs	r2, #16
 8001e26:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8001e28:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <MX_FMC_Init+0x14c>)
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = tmp;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <MX_FMC_Init+0x14c>)
 8001e32:	60d3      	str	r3, [r2, #12]
	//Przeslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8001e34:	f04f 32ff 	mov.w	r2, #4294967295
 8001e38:	4908      	ldr	r1, [pc, #32]	; (8001e5c <MX_FMC_Init+0x14c>)
 8001e3a:	4806      	ldr	r0, [pc, #24]	; (8001e54 <MX_FMC_Init+0x144>)
 8001e3c:	f00e f908 	bl	8010050 <HAL_SDRAM_SendCommand>
	//Krok 6: Ustawienie licznika odswiezania
	//15.62us*freq -20
	HAL_SDRAM_ProgramRefreshRate(&hsdram1, 1660);
 8001e40:	f240 617c 	movw	r1, #1660	; 0x67c
 8001e44:	4803      	ldr	r0, [pc, #12]	; (8001e54 <MX_FMC_Init+0x144>)
 8001e46:	f00e f92e 	bl	80100a6 <HAL_SDRAM_ProgramRefreshRate>
	//HAL_SDRAM_ProgramRefreshRate(&hsdram1, 760);

  /* USER CODE END FMC_Init 2 */
}
 8001e4a:	bf00      	nop
 8001e4c:	3720      	adds	r7, #32
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20056eb0 	.word	0x20056eb0
 8001e58:	a0000140 	.word	0xa0000140
 8001e5c:	20000278 	.word	0x20000278

08001e60 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e66:	1d3b      	adds	r3, r7, #4
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001e74:	4b3a      	ldr	r3, [pc, #232]	; (8001f60 <HAL_FMC_MspInit+0x100>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d16d      	bne.n	8001f58 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001e7c:	4b38      	ldr	r3, [pc, #224]	; (8001f60 <HAL_FMC_MspInit+0x100>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001e82:	4b38      	ldr	r3, [pc, #224]	; (8001f64 <HAL_FMC_MspInit+0x104>)
 8001e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e86:	4a37      	ldr	r2, [pc, #220]	; (8001f64 <HAL_FMC_MspInit+0x104>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6393      	str	r3, [r2, #56]	; 0x38
 8001e8e:	4b35      	ldr	r3, [pc, #212]	; (8001f64 <HAL_FMC_MspInit+0x104>)
 8001e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	603b      	str	r3, [r7, #0]
 8001e98:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e9a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001e9e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001eac:	230c      	movs	r3, #12
 8001eae:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001eb0:	1d3b      	adds	r3, r7, #4
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	482c      	ldr	r0, [pc, #176]	; (8001f68 <HAL_FMC_MspInit+0x108>)
 8001eb6:	f00b f9eb 	bl	800d290 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001eba:	230c      	movs	r3, #12
 8001ebc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001eca:	230c      	movs	r3, #12
 8001ecc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4826      	ldr	r0, [pc, #152]	; (8001f6c <HAL_FMC_MspInit+0x10c>)
 8001ed4:	f00b f9dc 	bl	800d290 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ed8:	2380      	movs	r3, #128	; 0x80
 8001eda:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ee8:	230c      	movs	r3, #12
 8001eea:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eec:	1d3b      	adds	r3, r7, #4
 8001eee:	4619      	mov	r1, r3
 8001ef0:	481f      	ldr	r0, [pc, #124]	; (8001f70 <HAL_FMC_MspInit+0x110>)
 8001ef2:	f00b f9cd 	bl	800d290 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 8001ef6:	f248 1311 	movw	r3, #33041	; 0x8111
 8001efa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efc:	2302      	movs	r3, #2
 8001efe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f04:	2303      	movs	r3, #3
 8001f06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f08:	230c      	movs	r3, #12
 8001f0a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f0c:	1d3b      	adds	r3, r7, #4
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4818      	ldr	r0, [pc, #96]	; (8001f74 <HAL_FMC_MspInit+0x114>)
 8001f12:	f00b f9bd 	bl	800d290 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001f16:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001f1a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f24:	2303      	movs	r3, #3
 8001f26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f28:	230c      	movs	r3, #12
 8001f2a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4811      	ldr	r0, [pc, #68]	; (8001f78 <HAL_FMC_MspInit+0x118>)
 8001f32:	f00b f9ad 	bl	800d290 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001f36:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001f3a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f44:	2303      	movs	r3, #3
 8001f46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f48:	230c      	movs	r3, #12
 8001f4a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f4c:	1d3b      	adds	r3, r7, #4
 8001f4e:	4619      	mov	r1, r3
 8001f50:	480a      	ldr	r0, [pc, #40]	; (8001f7c <HAL_FMC_MspInit+0x11c>)
 8001f52:	f00b f99d 	bl	800d290 <HAL_GPIO_Init>
 8001f56:	e000      	b.n	8001f5a <HAL_FMC_MspInit+0xfa>
    return;
 8001f58:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20000274 	.word	0x20000274
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40021400 	.word	0x40021400
 8001f6c:	40020800 	.word	0x40020800
 8001f70:	40020000 	.word	0x40020000
 8001f74:	40021800 	.word	0x40021800
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40020c00 	.word	0x40020c00

08001f80 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001f88:	f7ff ff6a 	bl	8001e60 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001f8c:	bf00      	nop
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of hardwareTASK */
	hardwareTASKHandle = osThreadNew(StartHardwareTask, NULL,
 8001f98:	4a14      	ldr	r2, [pc, #80]	; (8001fec <MX_FREERTOS_Init+0x58>)
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4814      	ldr	r0, [pc, #80]	; (8001ff0 <MX_FREERTOS_Init+0x5c>)
 8001f9e:	f00f ffb1 	bl	8011f04 <osThreadNew>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	4a13      	ldr	r2, [pc, #76]	; (8001ff4 <MX_FREERTOS_Init+0x60>)
 8001fa6:	6013      	str	r3, [r2, #0]
			&hardwareTASK_attributes);

	/* creation of touchGFXTask */
	touchGFXTaskHandle = osThreadNew(StartTouchGFXTask, NULL,
 8001fa8:	4a13      	ldr	r2, [pc, #76]	; (8001ff8 <MX_FREERTOS_Init+0x64>)
 8001faa:	2100      	movs	r1, #0
 8001fac:	4813      	ldr	r0, [pc, #76]	; (8001ffc <MX_FREERTOS_Init+0x68>)
 8001fae:	f00f ffa9 	bl	8011f04 <osThreadNew>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	4a12      	ldr	r2, [pc, #72]	; (8002000 <MX_FREERTOS_Init+0x6c>)
 8001fb6:	6013      	str	r3, [r2, #0]
			&touchGFXTask_attributes);

	/* creation of infoLed */
	infoLedHandle = osThreadNew(StartInfoLed, NULL, &infoLed_attributes);
 8001fb8:	4a12      	ldr	r2, [pc, #72]	; (8002004 <MX_FREERTOS_Init+0x70>)
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4812      	ldr	r0, [pc, #72]	; (8002008 <MX_FREERTOS_Init+0x74>)
 8001fbe:	f00f ffa1 	bl	8011f04 <osThreadNew>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	4a11      	ldr	r2, [pc, #68]	; (800200c <MX_FREERTOS_Init+0x78>)
 8001fc6:	6013      	str	r3, [r2, #0]

	/* creation of displayBackligh */
	displayBacklighHandle = osThreadNew(StartDisplayBacklight, NULL,
 8001fc8:	4a11      	ldr	r2, [pc, #68]	; (8002010 <MX_FREERTOS_Init+0x7c>)
 8001fca:	2100      	movs	r1, #0
 8001fcc:	4811      	ldr	r0, [pc, #68]	; (8002014 <MX_FREERTOS_Init+0x80>)
 8001fce:	f00f ff99 	bl	8011f04 <osThreadNew>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	4a10      	ldr	r2, [pc, #64]	; (8002018 <MX_FREERTOS_Init+0x84>)
 8001fd6:	6013      	str	r3, [r2, #0]
			&displayBackligh_attributes);

	/* creation of fuelConsumption */
	fuelConsumptionHandle = osThreadNew(StartComputeFuelConsumption, NULL,
 8001fd8:	4a10      	ldr	r2, [pc, #64]	; (800201c <MX_FREERTOS_Init+0x88>)
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4810      	ldr	r0, [pc, #64]	; (8002020 <MX_FREERTOS_Init+0x8c>)
 8001fde:	f00f ff91 	bl	8011f04 <osThreadNew>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	4a0f      	ldr	r2, [pc, #60]	; (8002024 <MX_FREERTOS_Init+0x90>)
 8001fe6:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}
 8001fe8:	bf00      	nop
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	0802be98 	.word	0x0802be98
 8001ff0:	08002029 	.word	0x08002029
 8001ff4:	20056eec 	.word	0x20056eec
 8001ff8:	0802bebc 	.word	0x0802bebc
 8001ffc:	08002135 	.word	0x08002135
 8002000:	20056ee4 	.word	0x20056ee4
 8002004:	0802bee0 	.word	0x0802bee0
 8002008:	08002149 	.word	0x08002149
 800200c:	20056ef0 	.word	0x20056ef0
 8002010:	0802bf04 	.word	0x0802bf04
 8002014:	08002165 	.word	0x08002165
 8002018:	20056ef4 	.word	0x20056ef4
 800201c:	0802bf28 	.word	0x0802bf28
 8002020:	08002321 	.word	0x08002321
 8002024:	20056ee8 	.word	0x20056ee8

08002028 <StartHardwareTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartHardwareTask */
void StartHardwareTask(void *argument)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	; 0x28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartHardwareTask */
	HAL_CAN_Start(&hcan2);
 8002030:	4839      	ldr	r0, [pc, #228]	; (8002118 <StartHardwareTask+0xf0>)
 8002032:	f009 fd07 	bl	800ba44 <HAL_CAN_Start>
	HAL_CAN_Start(&hcan1);
 8002036:	4839      	ldr	r0, [pc, #228]	; (800211c <StartHardwareTask+0xf4>)
 8002038:	f009 fd04 	bl	800ba44 <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 800203c:	2102      	movs	r1, #2
 800203e:	4836      	ldr	r0, [pc, #216]	; (8002118 <StartHardwareTask+0xf0>)
 8002040:	f009 ff31 	bl	800bea6 <HAL_CAN_ActivateNotification>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002044:	2102      	movs	r1, #2
 8002046:	4835      	ldr	r0, [pc, #212]	; (800211c <StartHardwareTask+0xf4>)
 8002048:	f009 ff2d 	bl	800bea6 <HAL_CAN_ActivateNotification>

	WS2812_Init();
 800204c:	f7fe fccc 	bl	80009e8 <WS2812_Init>
	ComputeOptimalPoints();
 8002050:	f7fe fed0 	bl	8000df4 <ComputeOptimalPoints>

	osDelay(150);
 8002054:	2096      	movs	r0, #150	; 0x96
 8002056:	f010 f82d 	bl	80120b4 <osDelay>
	uint8_t ledMode = displaySetup.ledBarMode;
 800205a:	4b31      	ldr	r3, [pc, #196]	; (8002120 <StartHardwareTask+0xf8>)
 800205c:	785b      	ldrb	r3, [r3, #1]
 800205e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (;;)
	{

		//telemetryData.oilPress = HAL_GPIO_ReadPin(OIL_SENSOR_GPIO_Port,
		//OIL_SENSOR_Pin);
		if (telemetryData.gear == 0)
 8002062:	4b30      	ldr	r3, [pc, #192]	; (8002124 <StartHardwareTask+0xfc>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d103      	bne.n	8002072 <StartHardwareTask+0x4a>
		{
			////HAL_GPIO_WritePin(NEUTRAL_LED_GPIO_Port, NEUTRAL_LED_Pin, SET);
			ledMode = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002070:	e003      	b.n	800207a <StartHardwareTask+0x52>
		}
		else
		{
			//HAL_GPIO_WritePin(NEUTRAL_LED_GPIO_Port, NEUTRAL_LED_Pin, RESET);
			ledMode = displaySetup.ledBarMode;
 8002072:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <StartHardwareTask+0xf8>)
 8002074:	785b      	ldrb	r3, [r3, #1]
 8002076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
		updateLeds(EcuData.rpm, ledMode);
 800207a:	4b2b      	ldr	r3, [pc, #172]	; (8002128 <StartHardwareTask+0x100>)
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	461a      	mov	r2, r3
 8002080:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002084:	4619      	mov	r1, r3
 8002086:	4610      	mov	r0, r2
 8002088:	f7fe fdf4 	bl	8000c74 <updateLeds>

		osDelay(100);
 800208c:	2064      	movs	r0, #100	; 0x64
 800208e:	f010 f811 	bl	80120b4 <osDelay>
		/* BURNED FUEL TRANSMISSION */
		uint16_t burnedFuel = (uint16_t) telemetryData.burnedFuel * 0x2000;
 8002092:	4b24      	ldr	r3, [pc, #144]	; (8002124 <StartHardwareTask+0xfc>)
 8002094:	edd3 7a04 	vldr	s15, [r3, #16]
 8002098:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800209c:	ee17 3a90 	vmov	r3, s15
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	035b      	lsls	r3, r3, #13
 80020a4:	84bb      	strh	r3, [r7, #36]	; 0x24
		uint8_t RxData[2];
		RxData[0] = burnedFuel % 0xFF;
 80020a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80020a8:	4b20      	ldr	r3, [pc, #128]	; (800212c <StartHardwareTask+0x104>)
 80020aa:	fba3 1302 	umull	r1, r3, r3, r2
 80020ae:	09d9      	lsrs	r1, r3, #7
 80020b0:	460b      	mov	r3, r1
 80020b2:	021b      	lsls	r3, r3, #8
 80020b4:	1a5b      	subs	r3, r3, r1
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	f887 3020 	strb.w	r3, [r7, #32]
		RxData[1] = burnedFuel / 0xFF;
 80020c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020c2:	4a1a      	ldr	r2, [pc, #104]	; (800212c <StartHardwareTask+0x104>)
 80020c4:	fba2 2303 	umull	r2, r3, r2, r3
 80020c8:	09db      	lsrs	r3, r3, #7
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		CAN_TxHeaderTypeDef TxHeader;
		TxHeader.DLC = 2;
 80020d2:	2302      	movs	r3, #2
 80020d4:	61bb      	str	r3, [r7, #24]
		TxHeader.IDE = CAN_ID_STD;
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
		TxHeader.RTR = CAN_RTR_DATA;
 80020da:	2300      	movs	r3, #0
 80020dc:	617b      	str	r3, [r7, #20]
		TxHeader.StdId = 0x1FE;
 80020de:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 80020e2:	60bb      	str	r3, [r7, #8]

		// HAL_CAN_AddTxMessage(INTERNAL_CAN, &TxHeader, RxData, &TxMailbox);
		HAL_CAN_AddTxMessage(&hcan2, &TxHeader, RxData, &TxMailbox);
 80020e4:	f107 0220 	add.w	r2, r7, #32
 80020e8:	f107 0108 	add.w	r1, r7, #8
 80020ec:	4b10      	ldr	r3, [pc, #64]	; (8002130 <StartHardwareTask+0x108>)
 80020ee:	480a      	ldr	r0, [pc, #40]	; (8002118 <StartHardwareTask+0xf0>)
 80020f0:	f009 fcec 	bl	800bacc <HAL_CAN_AddTxMessage>
		if (telemetryData.steeringWheelAttached == 1
 80020f4:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <StartHardwareTask+0xfc>)
 80020f6:	791b      	ldrb	r3, [r3, #4]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d1b2      	bne.n	8002062 <StartHardwareTask+0x3a>
				&& HAL_GetTick() - telemetryData.steeringWheelAttachedTimestamp
 80020fc:	f008 fe9c 	bl	800ae38 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	4b08      	ldr	r3, [pc, #32]	; (8002124 <StartHardwareTask+0xfc>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800210c:	d9a9      	bls.n	8002062 <StartHardwareTask+0x3a>
						> 2000)
		{
			telemetryData.steeringWheelAttached = 0;
 800210e:	4b05      	ldr	r3, [pc, #20]	; (8002124 <StartHardwareTask+0xfc>)
 8002110:	2200      	movs	r2, #0
 8002112:	711a      	strb	r2, [r3, #4]
	{
 8002114:	e7a5      	b.n	8002062 <StartHardwareTask+0x3a>
 8002116:	bf00      	nop
 8002118:	20056da4 	.word	0x20056da4
 800211c:	20056e0c 	.word	0x20056e0c
 8002120:	20000004 	.word	0x20000004
 8002124:	20056d90 	.word	0x20056d90
 8002128:	20056dcc 	.word	0x20056dcc
 800212c:	80808081 	.word	0x80808081
 8002130:	20056e08 	.word	0x20056e08

08002134 <StartTouchGFXTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTouchGFXTask */
void StartTouchGFXTask(void *argument)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTouchGFXTask */
	MX_TouchGFX_Process();
 800213c:	f001 f96d 	bl	800341a <MX_TouchGFX_Process>
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 8002140:	2001      	movs	r0, #1
 8002142:	f00f ffb7 	bl	80120b4 <osDelay>
 8002146:	e7fb      	b.n	8002140 <StartTouchGFXTask+0xc>

08002148 <StartInfoLed>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartInfoLed */
void StartInfoLed(void *argument)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartInfoLed */
	/* Infinite loop */
	for (;;)
	{
		osDelay(250);
 8002150:	20fa      	movs	r0, #250	; 0xfa
 8002152:	f00f ffaf 	bl	80120b4 <osDelay>
		HAL_GPIO_TogglePin(SIGNAL_LED_GPIO_Port, SIGNAL_LED_Pin);
 8002156:	2104      	movs	r1, #4
 8002158:	4801      	ldr	r0, [pc, #4]	; (8002160 <StartInfoLed+0x18>)
 800215a:	f00b fb6a 	bl	800d832 <HAL_GPIO_TogglePin>
		osDelay(250);
 800215e:	e7f7      	b.n	8002150 <StartInfoLed+0x8>
 8002160:	40021000 	.word	0x40021000

08002164 <StartDisplayBacklight>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDisplayBacklight */
void StartDisplayBacklight(void *argument)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	ed2d 8b02 	vpush	{d8}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartDisplayBacklight */

	// current set point in mA
	uint8_t setPoint = displaySetup.brightness * 1.5f;
 8002170:	4b64      	ldr	r3, [pc, #400]	; (8002304 <StartDisplayBacklight+0x1a0>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	ee07 3a90 	vmov	s15, r3
 8002178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800217c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002180:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002188:	edc7 7a00 	vstr	s15, [r7]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	753b      	strb	r3, [r7, #20]
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002190:	2100      	movs	r1, #0
 8002192:	485d      	ldr	r0, [pc, #372]	; (8002308 <StartDisplayBacklight+0x1a4>)
 8002194:	f00e f8d8 	bl	8010348 <HAL_TIM_PWM_Start>
	uint8_t PWM_Pulse = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	75fb      	strb	r3, [r7, #23]
	uint8_t PWM_PulseChange = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	75bb      	strb	r3, [r7, #22]
	float voltage = 0.0f;
 80021a0:	f04f 0300 	mov.w	r3, #0
 80021a4:	613b      	str	r3, [r7, #16]
	float current = 0.0f;
 80021a6:	f04f 0300 	mov.w	r3, #0
 80021aa:	60fb      	str	r3, [r7, #12]
	uint8_t delay = 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	757b      	strb	r3, [r7, #21]
	osDelay(250);
 80021b0:	20fa      	movs	r0, #250	; 0xfa
 80021b2:	f00f ff7f 	bl	80120b4 <osDelay>
	/* Infinite loop */
	for (;;)
	{
		HAL_ADC_Start(&hadc1);
 80021b6:	4855      	ldr	r0, [pc, #340]	; (800230c <StartDisplayBacklight+0x1a8>)
 80021b8:	f008 feb2 	bl	800af20 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 10);
 80021bc:	210a      	movs	r1, #10
 80021be:	4853      	ldr	r0, [pc, #332]	; (800230c <StartDisplayBacklight+0x1a8>)
 80021c0:	f008 ff7c 	bl	800b0bc <HAL_ADC_PollForConversion>

		osDelay(100 - delay);
 80021c4:	7d7b      	ldrb	r3, [r7, #21]
 80021c6:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80021ca:	4618      	mov	r0, r3
 80021cc:	f00f ff72 	bl	80120b4 <osDelay>
		voltage = HAL_ADC_GetValue(&hadc1) * 3.3f / 4095.0f;
 80021d0:	484e      	ldr	r0, [pc, #312]	; (800230c <StartDisplayBacklight+0x1a8>)
 80021d2:	f008 fffe 	bl	800b1d2 <HAL_ADC_GetValue>
 80021d6:	ee07 0a90 	vmov	s15, r0
 80021da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021de:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8002310 <StartDisplayBacklight+0x1ac>
 80021e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021e6:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8002314 <StartDisplayBacklight+0x1b0>
 80021ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021ee:	edc7 7a04 	vstr	s15, [r7, #16]
		current = voltage / 5.1f * 1000.0f;
 80021f2:	ed97 7a04 	vldr	s14, [r7, #16]
 80021f6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002318 <StartDisplayBacklight+0x1b4>
 80021fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021fe:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800231c <StartDisplayBacklight+0x1b8>
 8002202:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002206:	edc7 7a03 	vstr	s15, [r7, #12]

		PWM_PulseChange = (int8_t) round((setPoint - current) / 10.0f);
 800220a:	7d3b      	ldrb	r3, [r7, #20]
 800220c:	ee07 3a90 	vmov	s15, r3
 8002210:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002214:	edd7 7a03 	vldr	s15, [r7, #12]
 8002218:	ee37 7a67 	vsub.f32	s14, s14, s15
 800221c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002220:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002224:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002228:	eeb0 0b47 	vmov.f64	d0, d7
 800222c:	f024 fb7a 	bl	8026924 <round>
 8002230:	eeb0 7b40 	vmov.f64	d7, d0
 8002234:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002238:	edc7 7a00 	vstr	s15, [r7]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	b25b      	sxtb	r3, r3
 8002240:	75bb      	strb	r3, [r7, #22]
		delay = 0;
 8002242:	2300      	movs	r3, #0
 8002244:	757b      	strb	r3, [r7, #21]
		if (PWM_PulseChange > 10)
 8002246:	7dbb      	ldrb	r3, [r7, #22]
 8002248:	2b0a      	cmp	r3, #10
 800224a:	d951      	bls.n	80022f0 <StartDisplayBacklight+0x18c>
		{
			while (PWM_PulseChange > 0)
 800224c:	e04c      	b.n	80022e8 <StartDisplayBacklight+0x184>
			{
				PWM_Pulse += fmin(fmin(PWM_PulseChange, PWM_CHANGE),
 800224e:	7dfb      	ldrb	r3, [r7, #23]
 8002250:	ee07 3a90 	vmov	s15, r3
 8002254:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002258:	7dbb      	ldrb	r3, [r7, #22]
 800225a:	ee07 3a90 	vmov	s15, r3
 800225e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002262:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 8002266:	eeb0 0b47 	vmov.f64	d0, d7
 800226a:	f024 fb15 	bl	8026898 <fmin>
 800226e:	eeb0 6b40 	vmov.f64	d6, d0
						215 - PWM_Pulse);
 8002272:	7dfb      	ldrb	r3, [r7, #23]
 8002274:	f1c3 03d7 	rsb	r3, r3, #215	; 0xd7
				PWM_Pulse += fmin(fmin(PWM_PulseChange, PWM_CHANGE),
 8002278:	ee07 3a90 	vmov	s15, r3
 800227c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002280:	eeb0 1b47 	vmov.f64	d1, d7
 8002284:	eeb0 0b46 	vmov.f64	d0, d6
 8002288:	f024 fb06 	bl	8026898 <fmin>
 800228c:	eeb0 7b40 	vmov.f64	d7, d0
 8002290:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002294:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002298:	edc7 7a00 	vstr	s15, [r7]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	75fb      	strb	r3, [r7, #23]
				PWM_PulseChange -= fmin(PWM_PulseChange, PWM_CHANGE);
 80022a0:	7dbb      	ldrb	r3, [r7, #22]
 80022a2:	ee07 3a90 	vmov	s15, r3
 80022a6:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80022aa:	7dbb      	ldrb	r3, [r7, #22]
 80022ac:	ee07 3a90 	vmov	s15, r3
 80022b0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80022b4:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 80022b8:	eeb0 0b47 	vmov.f64	d0, d7
 80022bc:	f024 faec 	bl	8026898 <fmin>
 80022c0:	eeb0 7b40 	vmov.f64	d7, d0
 80022c4:	ee38 7b47 	vsub.f64	d7, d8, d7
 80022c8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80022cc:	edc7 7a00 	vstr	s15, [r7]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	75bb      	strb	r3, [r7, #22]
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM_Pulse);
 80022d4:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <StartDisplayBacklight+0x1a4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	7dfa      	ldrb	r2, [r7, #23]
 80022da:	635a      	str	r2, [r3, #52]	; 0x34
				osDelay(5);
 80022dc:	2005      	movs	r0, #5
 80022de:	f00f fee9 	bl	80120b4 <osDelay>
				delay += 5;
 80022e2:	7d7b      	ldrb	r3, [r7, #21]
 80022e4:	3305      	adds	r3, #5
 80022e6:	757b      	strb	r3, [r7, #21]
			while (PWM_PulseChange > 0)
 80022e8:	7dbb      	ldrb	r3, [r7, #22]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1af      	bne.n	800224e <StartDisplayBacklight+0xea>
 80022ee:	e762      	b.n	80021b6 <StartDisplayBacklight+0x52>
				delay += 5;
			}
		}
		else
		{
			PWM_Pulse += PWM_PulseChange;
 80022f0:	7dfa      	ldrb	r2, [r7, #23]
 80022f2:	7dbb      	ldrb	r3, [r7, #22]
 80022f4:	4413      	add	r3, r2
 80022f6:	75fb      	strb	r3, [r7, #23]
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM_Pulse);
 80022f8:	4b03      	ldr	r3, [pc, #12]	; (8002308 <StartDisplayBacklight+0x1a4>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	7dfa      	ldrb	r2, [r7, #23]
 80022fe:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_ADC_Start(&hadc1);
 8002300:	e759      	b.n	80021b6 <StartDisplayBacklight+0x52>
 8002302:	bf00      	nop
 8002304:	20000004 	.word	0x20000004
 8002308:	20057038 	.word	0x20057038
 800230c:	20056d48 	.word	0x20056d48
 8002310:	40533333 	.word	0x40533333
 8002314:	457ff000 	.word	0x457ff000
 8002318:	40a33333 	.word	0x40a33333
 800231c:	447a0000 	.word	0x447a0000

08002320 <StartComputeFuelConsumption>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartComputeFuelConsumption */
void StartComputeFuelConsumption(void *argument)
{
 8002320:	b590      	push	{r4, r7, lr}
 8002322:	ed2d 8b02 	vpush	{d8}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartComputeFuelConsumption */
	const uint8_t injectorFuelFlow = 250; // cc / min
 800232c:	23fa      	movs	r3, #250	; 0xfa
 800232e:	73fb      	strb	r3, [r7, #15]
	static uint32_t lastComputeTime = 0;
	/* Infinite loop */
	for (;;)
	{
		float fuelUsage = ((float) EcuData.rpm / 60.0f / 1000.0f) * 3.0f
 8002330:	4b26      	ldr	r3, [pc, #152]	; (80023cc <StartComputeFuelConsumption+0xac>)
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	ee07 3a90 	vmov	s15, r3
 8002338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800233c:	eddf 6a24 	vldr	s13, [pc, #144]	; 80023d0 <StartComputeFuelConsumption+0xb0>
 8002340:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002344:	eddf 6a23 	vldr	s13, [pc, #140]	; 80023d4 <StartComputeFuelConsumption+0xb4>
 8002348:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800234c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002350:	ee27 7a87 	vmul.f32	s14, s15, s14
				* ((float) injectorFuelFlow / 60.0f / 1000.0f /1000.0f) * EcuData.injPW
 8002354:	7bfb      	ldrb	r3, [r7, #15]
 8002356:	ee07 3a90 	vmov	s15, r3
 800235a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800235e:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 80023d0 <StartComputeFuelConsumption+0xb0>
 8002362:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002366:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 80023d4 <StartComputeFuelConsumption+0xb4>
 800236a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800236e:	ed9f 6a19 	vldr	s12, [pc, #100]	; 80023d4 <StartComputeFuelConsumption+0xb4>
 8002372:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002376:	ee27 7a27 	vmul.f32	s14, s14, s15
 800237a:	4b14      	ldr	r3, [pc, #80]	; (80023cc <StartComputeFuelConsumption+0xac>)
 800237c:	88db      	ldrh	r3, [r3, #6]
 800237e:	ee07 3a90 	vmov	s15, r3
 8002382:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002386:	ee27 8a27 	vmul.f32	s16, s14, s15
				* (lastComputeTime - HAL_GetTick());
 800238a:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <StartComputeFuelConsumption+0xb8>)
 800238c:	681c      	ldr	r4, [r3, #0]
 800238e:	f008 fd53 	bl	800ae38 <HAL_GetTick>
 8002392:	4603      	mov	r3, r0
 8002394:	1ae3      	subs	r3, r4, r3
 8002396:	ee07 3a90 	vmov	s15, r3
 800239a:	eef8 7a67 	vcvt.f32.u32	s15, s15
		float fuelUsage = ((float) EcuData.rpm / 60.0f / 1000.0f) * 3.0f
 800239e:	ee68 7a27 	vmul.f32	s15, s16, s15
 80023a2:	edc7 7a02 	vstr	s15, [r7, #8]
		lastComputeTime = HAL_GetTick();
 80023a6:	f008 fd47 	bl	800ae38 <HAL_GetTick>
 80023aa:	4603      	mov	r3, r0
 80023ac:	4a0a      	ldr	r2, [pc, #40]	; (80023d8 <StartComputeFuelConsumption+0xb8>)
 80023ae:	6013      	str	r3, [r2, #0]
		telemetryData.burnedFuel += fuelUsage;
 80023b0:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <StartComputeFuelConsumption+0xbc>)
 80023b2:	ed93 7a04 	vldr	s14, [r3, #16]
 80023b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80023ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023be:	4b07      	ldr	r3, [pc, #28]	; (80023dc <StartComputeFuelConsumption+0xbc>)
 80023c0:	edc3 7a04 	vstr	s15, [r3, #16]
		osDelay(10);
 80023c4:	200a      	movs	r0, #10
 80023c6:	f00f fe75 	bl	80120b4 <osDelay>
	{
 80023ca:	e7b1      	b.n	8002330 <StartComputeFuelConsumption+0x10>
 80023cc:	20056dcc 	.word	0x20056dcc
 80023d0:	42700000 	.word	0x42700000
 80023d4:	447a0000 	.word	0x447a0000
 80023d8:	20000288 	.word	0x20000288
 80023dc:	20056d90 	.word	0x20056d90

080023e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08e      	sub	sp, #56	; 0x38
 80023e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	605a      	str	r2, [r3, #4]
 80023f0:	609a      	str	r2, [r3, #8]
 80023f2:	60da      	str	r2, [r3, #12]
 80023f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023f6:	4b4c      	ldr	r3, [pc, #304]	; (8002528 <MX_GPIO_Init+0x148>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	4a4b      	ldr	r2, [pc, #300]	; (8002528 <MX_GPIO_Init+0x148>)
 80023fc:	f043 0310 	orr.w	r3, r3, #16
 8002400:	6313      	str	r3, [r2, #48]	; 0x30
 8002402:	4b49      	ldr	r3, [pc, #292]	; (8002528 <MX_GPIO_Init+0x148>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	f003 0310 	and.w	r3, r3, #16
 800240a:	623b      	str	r3, [r7, #32]
 800240c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800240e:	4b46      	ldr	r3, [pc, #280]	; (8002528 <MX_GPIO_Init+0x148>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	4a45      	ldr	r2, [pc, #276]	; (8002528 <MX_GPIO_Init+0x148>)
 8002414:	f043 0320 	orr.w	r3, r3, #32
 8002418:	6313      	str	r3, [r2, #48]	; 0x30
 800241a:	4b43      	ldr	r3, [pc, #268]	; (8002528 <MX_GPIO_Init+0x148>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f003 0320 	and.w	r3, r3, #32
 8002422:	61fb      	str	r3, [r7, #28]
 8002424:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002426:	4b40      	ldr	r3, [pc, #256]	; (8002528 <MX_GPIO_Init+0x148>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	4a3f      	ldr	r2, [pc, #252]	; (8002528 <MX_GPIO_Init+0x148>)
 800242c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002430:	6313      	str	r3, [r2, #48]	; 0x30
 8002432:	4b3d      	ldr	r3, [pc, #244]	; (8002528 <MX_GPIO_Init+0x148>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800243a:	61bb      	str	r3, [r7, #24]
 800243c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800243e:	4b3a      	ldr	r3, [pc, #232]	; (8002528 <MX_GPIO_Init+0x148>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	4a39      	ldr	r2, [pc, #228]	; (8002528 <MX_GPIO_Init+0x148>)
 8002444:	f043 0304 	orr.w	r3, r3, #4
 8002448:	6313      	str	r3, [r2, #48]	; 0x30
 800244a:	4b37      	ldr	r3, [pc, #220]	; (8002528 <MX_GPIO_Init+0x148>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	617b      	str	r3, [r7, #20]
 8002454:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002456:	4b34      	ldr	r3, [pc, #208]	; (8002528 <MX_GPIO_Init+0x148>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	4a33      	ldr	r2, [pc, #204]	; (8002528 <MX_GPIO_Init+0x148>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	6313      	str	r3, [r2, #48]	; 0x30
 8002462:	4b31      	ldr	r3, [pc, #196]	; (8002528 <MX_GPIO_Init+0x148>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	613b      	str	r3, [r7, #16]
 800246c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800246e:	4b2e      	ldr	r3, [pc, #184]	; (8002528 <MX_GPIO_Init+0x148>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	4a2d      	ldr	r2, [pc, #180]	; (8002528 <MX_GPIO_Init+0x148>)
 8002474:	f043 0302 	orr.w	r3, r3, #2
 8002478:	6313      	str	r3, [r2, #48]	; 0x30
 800247a:	4b2b      	ldr	r3, [pc, #172]	; (8002528 <MX_GPIO_Init+0x148>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002486:	4b28      	ldr	r3, [pc, #160]	; (8002528 <MX_GPIO_Init+0x148>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	4a27      	ldr	r2, [pc, #156]	; (8002528 <MX_GPIO_Init+0x148>)
 800248c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002490:	6313      	str	r3, [r2, #48]	; 0x30
 8002492:	4b25      	ldr	r3, [pc, #148]	; (8002528 <MX_GPIO_Init+0x148>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249a:	60bb      	str	r3, [r7, #8]
 800249c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800249e:	4b22      	ldr	r3, [pc, #136]	; (8002528 <MX_GPIO_Init+0x148>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	4a21      	ldr	r2, [pc, #132]	; (8002528 <MX_GPIO_Init+0x148>)
 80024a4:	f043 0308 	orr.w	r3, r3, #8
 80024a8:	6313      	str	r3, [r2, #48]	; 0x30
 80024aa:	4b1f      	ldr	r3, [pc, #124]	; (8002528 <MX_GPIO_Init+0x148>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	607b      	str	r3, [r7, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIGNAL_LED_GPIO_Port, SIGNAL_LED_Pin, GPIO_PIN_RESET);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2104      	movs	r1, #4
 80024ba:	481c      	ldr	r0, [pc, #112]	; (800252c <MX_GPIO_Init+0x14c>)
 80024bc:	f00b f9a0 	bl	800d800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_PD_GPIO_Port, ESP_PD_Pin, GPIO_PIN_RESET);
 80024c0:	2200      	movs	r2, #0
 80024c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024c6:	481a      	ldr	r0, [pc, #104]	; (8002530 <MX_GPIO_Init+0x150>)
 80024c8:	f00b f99a 	bl	800d800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SIGNAL_LED_Pin;
 80024cc:	2304      	movs	r3, #4
 80024ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d0:	2301      	movs	r3, #1
 80024d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d8:	2300      	movs	r3, #0
 80024da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SIGNAL_LED_GPIO_Port, &GPIO_InitStruct);
 80024dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024e0:	4619      	mov	r1, r3
 80024e2:	4812      	ldr	r0, [pc, #72]	; (800252c <MX_GPIO_Init+0x14c>)
 80024e4:	f00a fed4 	bl	800d290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OIL_SENSOR_Pin;
 80024e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024ee:	2300      	movs	r3, #0
 80024f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024f2:	2301      	movs	r3, #1
 80024f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OIL_SENSOR_GPIO_Port, &GPIO_InitStruct);
 80024f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024fa:	4619      	mov	r1, r3
 80024fc:	480c      	ldr	r0, [pc, #48]	; (8002530 <MX_GPIO_Init+0x150>)
 80024fe:	f00a fec7 	bl	800d290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP_PD_Pin;
 8002502:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002506:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002508:	2301      	movs	r3, #1
 800250a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250c:	2300      	movs	r3, #0
 800250e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002510:	2300      	movs	r3, #0
 8002512:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ESP_PD_GPIO_Port, &GPIO_InitStruct);
 8002514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002518:	4619      	mov	r1, r3
 800251a:	4805      	ldr	r0, [pc, #20]	; (8002530 <MX_GPIO_Init+0x150>)
 800251c:	f00a feb8 	bl	800d290 <HAL_GPIO_Init>

}
 8002520:	bf00      	nop
 8002522:	3738      	adds	r7, #56	; 0x38
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40023800 	.word	0x40023800
 800252c:	40021000 	.word	0x40021000
 8002530:	40020800 	.word	0x40020800

08002534 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08e      	sub	sp, #56	; 0x38
 8002538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800253a:	1d3b      	adds	r3, r7, #4
 800253c:	2234      	movs	r2, #52	; 0x34
 800253e:	2100      	movs	r1, #0
 8002540:	4618      	mov	r0, r3
 8002542:	f024 fac9 	bl	8026ad8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002546:	4b3a      	ldr	r3, [pc, #232]	; (8002630 <MX_LTDC_Init+0xfc>)
 8002548:	4a3a      	ldr	r2, [pc, #232]	; (8002634 <MX_LTDC_Init+0x100>)
 800254a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800254c:	4b38      	ldr	r3, [pc, #224]	; (8002630 <MX_LTDC_Init+0xfc>)
 800254e:	2200      	movs	r2, #0
 8002550:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002552:	4b37      	ldr	r3, [pc, #220]	; (8002630 <MX_LTDC_Init+0xfc>)
 8002554:	2200      	movs	r2, #0
 8002556:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002558:	4b35      	ldr	r3, [pc, #212]	; (8002630 <MX_LTDC_Init+0xfc>)
 800255a:	2200      	movs	r2, #0
 800255c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800255e:	4b34      	ldr	r3, [pc, #208]	; (8002630 <MX_LTDC_Init+0xfc>)
 8002560:	2200      	movs	r2, #0
 8002562:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 8002564:	4b32      	ldr	r3, [pc, #200]	; (8002630 <MX_LTDC_Init+0xfc>)
 8002566:	2203      	movs	r2, #3
 8002568:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 39;
 800256a:	4b31      	ldr	r3, [pc, #196]	; (8002630 <MX_LTDC_Init+0xfc>)
 800256c:	2227      	movs	r2, #39	; 0x27
 800256e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 8002570:	4b2f      	ldr	r3, [pc, #188]	; (8002630 <MX_LTDC_Init+0xfc>)
 8002572:	220b      	movs	r2, #11
 8002574:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 47;
 8002576:	4b2e      	ldr	r3, [pc, #184]	; (8002630 <MX_LTDC_Init+0xfc>)
 8002578:	222f      	movs	r2, #47	; 0x2f
 800257a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 800257c:	4b2c      	ldr	r3, [pc, #176]	; (8002630 <MX_LTDC_Init+0xfc>)
 800257e:	f240 322b 	movw	r2, #811	; 0x32b
 8002582:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 527;
 8002584:	4b2a      	ldr	r3, [pc, #168]	; (8002630 <MX_LTDC_Init+0xfc>)
 8002586:	f240 220f 	movw	r2, #527	; 0x20f
 800258a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 819;
 800258c:	4b28      	ldr	r3, [pc, #160]	; (8002630 <MX_LTDC_Init+0xfc>)
 800258e:	f240 3233 	movw	r2, #819	; 0x333
 8002592:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 535;
 8002594:	4b26      	ldr	r3, [pc, #152]	; (8002630 <MX_LTDC_Init+0xfc>)
 8002596:	f240 2217 	movw	r2, #535	; 0x217
 800259a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800259c:	4b24      	ldr	r3, [pc, #144]	; (8002630 <MX_LTDC_Init+0xfc>)
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80025a4:	4b22      	ldr	r3, [pc, #136]	; (8002630 <MX_LTDC_Init+0xfc>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80025ac:	4b20      	ldr	r3, [pc, #128]	; (8002630 <MX_LTDC_Init+0xfc>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80025b4:	481e      	ldr	r0, [pc, #120]	; (8002630 <MX_LTDC_Init+0xfc>)
 80025b6:	f00b f957 	bl	800d868 <HAL_LTDC_Init>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80025c0:	f000 fa82 	bl	8002ac8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 80025c8:	f44f 7348 	mov.w	r3, #800	; 0x320
 80025cc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 80025d2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80025d6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80025d8:	2301      	movs	r3, #1
 80025da:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80025dc:	23ff      	movs	r3, #255	; 0xff
 80025de:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80025e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025e8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80025ea:	2305      	movs	r3, #5
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80025ee:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80025f2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 800;
 80025f4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80025f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 80025fa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80025fe:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002612:	1d3b      	adds	r3, r7, #4
 8002614:	2200      	movs	r2, #0
 8002616:	4619      	mov	r1, r3
 8002618:	4805      	ldr	r0, [pc, #20]	; (8002630 <MX_LTDC_Init+0xfc>)
 800261a:	f00b faad 	bl	800db78 <HAL_LTDC_ConfigLayer>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8002624:	f000 fa50 	bl	8002ac8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002628:	bf00      	nop
 800262a:	3738      	adds	r7, #56	; 0x38
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	20056ef8 	.word	0x20056ef8
 8002634:	40016800 	.word	0x40016800

08002638 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b0b4      	sub	sp, #208	; 0xd0
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002640:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	60da      	str	r2, [r3, #12]
 800264e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002650:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002654:	2290      	movs	r2, #144	; 0x90
 8002656:	2100      	movs	r1, #0
 8002658:	4618      	mov	r0, r3
 800265a:	f024 fa3d 	bl	8026ad8 <memset>
  if(ltdcHandle->Instance==LTDC)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4aa6      	ldr	r2, [pc, #664]	; (80028fc <HAL_LTDC_MspInit+0x2c4>)
 8002664:	4293      	cmp	r3, r2
 8002666:	f040 8144 	bne.w	80028f2 <HAL_LTDC_MspInit+0x2ba>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800266a:	2308      	movs	r3, #8
 800266c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 279;
 800266e:	f240 1317 	movw	r3, #279	; 0x117
 8002672:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 3;
 8002674:	2303      	movs	r3, #3
 8002676:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8002678:	2302      	movs	r3, #2
 800267a:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800267c:	2300      	movs	r3, #0
 800267e:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002680:	2301      	movs	r3, #1
 8002682:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002684:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002688:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800268a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800268e:	4618      	mov	r0, r3
 8002690:	f00d f882 	bl	800f798 <HAL_RCCEx_PeriphCLKConfig>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 800269a:	f000 fa15 	bl	8002ac8 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800269e:	4b98      	ldr	r3, [pc, #608]	; (8002900 <HAL_LTDC_MspInit+0x2c8>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a2:	4a97      	ldr	r2, [pc, #604]	; (8002900 <HAL_LTDC_MspInit+0x2c8>)
 80026a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026a8:	6453      	str	r3, [r2, #68]	; 0x44
 80026aa:	4b95      	ldr	r3, [pc, #596]	; (8002900 <HAL_LTDC_MspInit+0x2c8>)
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80026b4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026b6:	4b92      	ldr	r3, [pc, #584]	; (8002900 <HAL_LTDC_MspInit+0x2c8>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	4a91      	ldr	r2, [pc, #580]	; (8002900 <HAL_LTDC_MspInit+0x2c8>)
 80026bc:	f043 0310 	orr.w	r3, r3, #16
 80026c0:	6313      	str	r3, [r2, #48]	; 0x30
 80026c2:	4b8f      	ldr	r3, [pc, #572]	; (8002900 <HAL_LTDC_MspInit+0x2c8>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	f003 0310 	and.w	r3, r3, #16
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80026ce:	4b8c      	ldr	r3, [pc, #560]	; (8002900 <HAL_LTDC_MspInit+0x2c8>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	4a8b      	ldr	r2, [pc, #556]	; (8002900 <HAL_LTDC_MspInit+0x2c8>)
 80026d4:	f043 0320 	orr.w	r3, r3, #32
 80026d8:	6313      	str	r3, [r2, #48]	; 0x30
 80026da:	4b89      	ldr	r3, [pc, #548]	; (8002900 <HAL_LTDC_MspInit+0x2c8>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	f003 0320 	and.w	r3, r3, #32
 80026e2:	623b      	str	r3, [r7, #32]
 80026e4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e6:	4b86      	ldr	r3, [pc, #536]	; (8002900 <HAL_LTDC_MspInit+0x2c8>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	4a85      	ldr	r2, [pc, #532]	; (8002900 <HAL_LTDC_MspInit+0x2c8>)
 80026ec:	f043 0304 	orr.w	r3, r3, #4
 80026f0:	6313      	str	r3, [r2, #48]	; 0x30
 80026f2:	4b83      	ldr	r3, [pc, #524]	; (8002900 <HAL_LTDC_MspInit+0x2c8>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	61fb      	str	r3, [r7, #28]
 80026fc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026fe:	4b80      	ldr	r3, [pc, #512]	; (8002900 <HAL_LTDC_MspInit+0x2c8>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	4a7f      	ldr	r2, [pc, #508]	; (8002900 <HAL_LTDC_MspInit+0x2c8>)
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	6313      	str	r3, [r2, #48]	; 0x30
 800270a:	4b7d      	ldr	r3, [pc, #500]	; (8002900 <HAL_LTDC_MspInit+0x2c8>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	61bb      	str	r3, [r7, #24]
 8002714:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002716:	4b7a      	ldr	r3, [pc, #488]	; (8002900 <HAL_LTDC_MspInit+0x2c8>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	4a79      	ldr	r2, [pc, #484]	; (8002900 <HAL_LTDC_MspInit+0x2c8>)
 800271c:	f043 0302 	orr.w	r3, r3, #2
 8002720:	6313      	str	r3, [r2, #48]	; 0x30
 8002722:	4b77      	ldr	r3, [pc, #476]	; (8002900 <HAL_LTDC_MspInit+0x2c8>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800272e:	4b74      	ldr	r3, [pc, #464]	; (8002900 <HAL_LTDC_MspInit+0x2c8>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	4a73      	ldr	r2, [pc, #460]	; (8002900 <HAL_LTDC_MspInit+0x2c8>)
 8002734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002738:	6313      	str	r3, [r2, #48]	; 0x30
 800273a:	4b71      	ldr	r3, [pc, #452]	; (8002900 <HAL_LTDC_MspInit+0x2c8>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002742:	613b      	str	r3, [r7, #16]
 8002744:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002746:	4b6e      	ldr	r3, [pc, #440]	; (8002900 <HAL_LTDC_MspInit+0x2c8>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	4a6d      	ldr	r2, [pc, #436]	; (8002900 <HAL_LTDC_MspInit+0x2c8>)
 800274c:	f043 0308 	orr.w	r3, r3, #8
 8002750:	6313      	str	r3, [r2, #48]	; 0x30
 8002752:	4b6b      	ldr	r3, [pc, #428]	; (8002900 <HAL_LTDC_MspInit+0x2c8>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	68fb      	ldr	r3, [r7, #12]
    PG12     ------> LTDC_B4
    PG13     ------> LTDC_R0
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800275e:	2370      	movs	r3, #112	; 0x70
 8002760:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002764:	2302      	movs	r3, #2
 8002766:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276a:	2300      	movs	r3, #0
 800276c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002770:	2300      	movs	r3, #0
 8002772:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002776:	230e      	movs	r3, #14
 8002778:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800277c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002780:	4619      	mov	r1, r3
 8002782:	4860      	ldr	r0, [pc, #384]	; (8002904 <HAL_LTDC_MspInit+0x2cc>)
 8002784:	f00a fd84 	bl	800d290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800278c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002790:	2302      	movs	r3, #2
 8002792:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002796:	2300      	movs	r3, #0
 8002798:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279c:	2300      	movs	r3, #0
 800279e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80027a2:	230e      	movs	r3, #14
 80027a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027a8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80027ac:	4619      	mov	r1, r3
 80027ae:	4856      	ldr	r0, [pc, #344]	; (8002908 <HAL_LTDC_MspInit+0x2d0>)
 80027b0:	f00a fd6e 	bl	800d290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 80027b4:	23c1      	movs	r3, #193	; 0xc1
 80027b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ba:	2302      	movs	r3, #2
 80027bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c6:	2300      	movs	r3, #0
 80027c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80027cc:	230e      	movs	r3, #14
 80027ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027d2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80027d6:	4619      	mov	r1, r3
 80027d8:	484c      	ldr	r0, [pc, #304]	; (800290c <HAL_LTDC_MspInit+0x2d4>)
 80027da:	f00a fd59 	bl	800d290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80027de:	f240 437e 	movw	r3, #1150	; 0x47e
 80027e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e6:	2302      	movs	r3, #2
 80027e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f2:	2300      	movs	r3, #0
 80027f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80027f8:	230e      	movs	r3, #14
 80027fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027fe:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002802:	4619      	mov	r1, r3
 8002804:	4842      	ldr	r0, [pc, #264]	; (8002910 <HAL_LTDC_MspInit+0x2d8>)
 8002806:	f00a fd43 	bl	800d290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800280a:	2303      	movs	r3, #3
 800280c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002810:	2302      	movs	r3, #2
 8002812:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002816:	2300      	movs	r3, #0
 8002818:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281c:	2300      	movs	r3, #0
 800281e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002822:	2309      	movs	r3, #9
 8002824:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002828:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800282c:	4619      	mov	r1, r3
 800282e:	4839      	ldr	r0, [pc, #228]	; (8002914 <HAL_LTDC_MspInit+0x2dc>)
 8002830:	f00a fd2e 	bl	800d290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8002834:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002838:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283c:	2302      	movs	r3, #2
 800283e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002848:	2300      	movs	r3, #0
 800284a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800284e:	230e      	movs	r3, #14
 8002850:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002854:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002858:	4619      	mov	r1, r3
 800285a:	482e      	ldr	r0, [pc, #184]	; (8002914 <HAL_LTDC_MspInit+0x2dc>)
 800285c:	f00a fd18 	bl	800d290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_13;
 8002860:	f44f 5323 	mov.w	r3, #10432	; 0x28c0
 8002864:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002868:	2302      	movs	r3, #2
 800286a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002874:	2300      	movs	r3, #0
 8002876:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800287a:	230e      	movs	r3, #14
 800287c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002880:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002884:	4619      	mov	r1, r3
 8002886:	4824      	ldr	r0, [pc, #144]	; (8002918 <HAL_LTDC_MspInit+0x2e0>)
 8002888:	f00a fd02 	bl	800d290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 800288c:	2348      	movs	r3, #72	; 0x48
 800288e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002892:	2302      	movs	r3, #2
 8002894:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002898:	2300      	movs	r3, #0
 800289a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289e:	2300      	movs	r3, #0
 80028a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80028a4:	230e      	movs	r3, #14
 80028a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028aa:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80028ae:	4619      	mov	r1, r3
 80028b0:	481a      	ldr	r0, [pc, #104]	; (800291c <HAL_LTDC_MspInit+0x2e4>)
 80028b2:	f00a fced 	bl	800d290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80028b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80028ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028be:	2302      	movs	r3, #2
 80028c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ca:	2300      	movs	r3, #0
 80028cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80028d0:	2309      	movs	r3, #9
 80028d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028d6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80028da:	4619      	mov	r1, r3
 80028dc:	480e      	ldr	r0, [pc, #56]	; (8002918 <HAL_LTDC_MspInit+0x2e0>)
 80028de:	f00a fcd7 	bl	800d290 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 80028e2:	2200      	movs	r2, #0
 80028e4:	2103      	movs	r1, #3
 80028e6:	2058      	movs	r0, #88	; 0x58
 80028e8:	f009 fe0e 	bl	800c508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80028ec:	2058      	movs	r0, #88	; 0x58
 80028ee:	f009 fe27 	bl	800c540 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80028f2:	bf00      	nop
 80028f4:	37d0      	adds	r7, #208	; 0xd0
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40016800 	.word	0x40016800
 8002900:	40023800 	.word	0x40023800
 8002904:	40021000 	.word	0x40021000
 8002908:	40021400 	.word	0x40021400
 800290c:	40020800 	.word	0x40020800
 8002910:	40020000 	.word	0x40020000
 8002914:	40020400 	.word	0x40020400
 8002918:	40021800 	.word	0x40021800
 800291c:	40020c00 	.word	0x40020c00

08002920 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002924:	f3bf 8f4f 	dsb	sy
}
 8002928:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800292a:	f3bf 8f6f 	isb	sy
}
 800292e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002930:	4b0d      	ldr	r3, [pc, #52]	; (8002968 <SCB_EnableICache+0x48>)
 8002932:	2200      	movs	r2, #0
 8002934:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002938:	f3bf 8f4f 	dsb	sy
}
 800293c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800293e:	f3bf 8f6f 	isb	sy
}
 8002942:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002944:	4b08      	ldr	r3, [pc, #32]	; (8002968 <SCB_EnableICache+0x48>)
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	4a07      	ldr	r2, [pc, #28]	; (8002968 <SCB_EnableICache+0x48>)
 800294a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800294e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002950:	f3bf 8f4f 	dsb	sy
}
 8002954:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002956:	f3bf 8f6f 	isb	sy
}
 800295a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800295c:	bf00      	nop
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8002970:	f7ff ffd6 	bl	8002920 <SCB_EnableICache>
 // SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002974:	f008 fa3e 	bl	800adf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002978:	f000 f824 	bl	80029c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800297c:	f7ff fd30 	bl	80023e0 <MX_GPIO_Init>
  MX_CRC_Init();
 8002980:	f7ff f900 	bl	8001b84 <MX_CRC_Init>
  MX_FMC_Init();
 8002984:	f7ff f9c4 	bl	8001d10 <MX_FMC_Init>
  MX_QUADSPI_Init();
 8002988:	f000 f8a4 	bl	8002ad4 <MX_QUADSPI_Init>
  MX_LTDC_Init();
 800298c:	f7ff fdd2 	bl	8002534 <MX_LTDC_Init>
  MX_DMA2D_Init();
 8002990:	f7ff f960 	bl	8001c54 <MX_DMA2D_Init>
  MX_CAN2_Init();
 8002994:	f7fe fdfe 	bl	8001594 <MX_CAN2_Init>
  MX_CAN1_Init();
 8002998:	f7fe fdaa 	bl	80014f0 <MX_CAN1_Init>
  MX_DMA_Init();
 800299c:	f7ff f934 	bl	8001c08 <MX_DMA_Init>
  MX_TIM4_Init();
 80029a0:	f000 fb98 	bl	80030d4 <MX_TIM4_Init>
  MX_TIM3_Init();
 80029a4:	f000 fb20 	bl	8002fe8 <MX_TIM3_Init>
  MX_ADC1_Init();
 80029a8:	f7fe fb44 	bl	8001034 <MX_ADC1_Init>
  MX_TouchGFX_Init();
 80029ac:	f000 fd2f 	bl	800340e <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */
  FLASH_QSPI_Init();
 80029b0:	f7fe fbd2 	bl	8001158 <FLASH_QSPI_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80029b4:	f00f fa3c 	bl	8011e30 <osKernelInitialize>
  MX_FREERTOS_Init();
 80029b8:	f7ff faec 	bl	8001f94 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80029bc:	f00f fa6c 	bl	8011e98 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80029c0:	e7fe      	b.n	80029c0 <main+0x54>
	...

080029c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b094      	sub	sp, #80	; 0x50
 80029c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029ca:	f107 031c 	add.w	r3, r7, #28
 80029ce:	2234      	movs	r2, #52	; 0x34
 80029d0:	2100      	movs	r1, #0
 80029d2:	4618      	mov	r0, r3
 80029d4:	f024 f880 	bl	8026ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029d8:	f107 0308 	add.w	r3, r7, #8
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029e8:	4b2c      	ldr	r3, [pc, #176]	; (8002a9c <SystemClock_Config+0xd8>)
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	4a2b      	ldr	r2, [pc, #172]	; (8002a9c <SystemClock_Config+0xd8>)
 80029ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f2:	6413      	str	r3, [r2, #64]	; 0x40
 80029f4:	4b29      	ldr	r3, [pc, #164]	; (8002a9c <SystemClock_Config+0xd8>)
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fc:	607b      	str	r3, [r7, #4]
 80029fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a00:	4b27      	ldr	r3, [pc, #156]	; (8002aa0 <SystemClock_Config+0xdc>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a26      	ldr	r2, [pc, #152]	; (8002aa0 <SystemClock_Config+0xdc>)
 8002a06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <SystemClock_Config+0xdc>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a14:	603b      	str	r3, [r7, #0]
 8002a16:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a20:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a22:	2302      	movs	r3, #2
 8002a24:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a2a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002a2c:	2319      	movs	r3, #25
 8002a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002a30:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8002a34:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a36:	2302      	movs	r3, #2
 8002a38:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a42:	f107 031c 	add.w	r3, r7, #28
 8002a46:	4618      	mov	r0, r3
 8002a48:	f00c fa04 	bl	800ee54 <HAL_RCC_OscConfig>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002a52:	f000 f839 	bl	8002ac8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002a56:	f00b fa9f 	bl	800df98 <HAL_PWREx_EnableOverDrive>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002a60:	f000 f832 	bl	8002ac8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a64:	230f      	movs	r3, #15
 8002a66:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002a70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002a74:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002a76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a7a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002a7c:	f107 0308 	add.w	r3, r7, #8
 8002a80:	2107      	movs	r1, #7
 8002a82:	4618      	mov	r0, r3
 8002a84:	f00c fc94 	bl	800f3b0 <HAL_RCC_ClockConfig>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8002a8e:	f000 f81b 	bl	8002ac8 <Error_Handler>
  }
}
 8002a92:	bf00      	nop
 8002a94:	3750      	adds	r7, #80	; 0x50
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	40007000 	.word	0x40007000

08002aa4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a04      	ldr	r2, [pc, #16]	; (8002ac4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d101      	bne.n	8002aba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002ab6:	f008 f9ab 	bl	800ae10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40001000 	.word	0x40001000

08002ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002acc:	b672      	cpsid	i
}
 8002ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ad0:	e7fe      	b.n	8002ad0 <Error_Handler+0x8>
	...

08002ad4 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8002ad8:	4b12      	ldr	r3, [pc, #72]	; (8002b24 <MX_QUADSPI_Init+0x50>)
 8002ada:	4a13      	ldr	r2, [pc, #76]	; (8002b28 <MX_QUADSPI_Init+0x54>)
 8002adc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 3;
 8002ade:	4b11      	ldr	r3, [pc, #68]	; (8002b24 <MX_QUADSPI_Init+0x50>)
 8002ae0:	2203      	movs	r2, #3
 8002ae2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8002ae4:	4b0f      	ldr	r3, [pc, #60]	; (8002b24 <MX_QUADSPI_Init+0x50>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002aea:	4b0e      	ldr	r3, [pc, #56]	; (8002b24 <MX_QUADSPI_Init+0x50>)
 8002aec:	2210      	movs	r2, #16
 8002aee:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8002af0:	4b0c      	ldr	r3, [pc, #48]	; (8002b24 <MX_QUADSPI_Init+0x50>)
 8002af2:	2217      	movs	r2, #23
 8002af4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8002af6:	4b0b      	ldr	r3, [pc, #44]	; (8002b24 <MX_QUADSPI_Init+0x50>)
 8002af8:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8002afc:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002afe:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <MX_QUADSPI_Init+0x50>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8002b04:	4b07      	ldr	r3, [pc, #28]	; (8002b24 <MX_QUADSPI_Init+0x50>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8002b0a:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <MX_QUADSPI_Init+0x50>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002b10:	4804      	ldr	r0, [pc, #16]	; (8002b24 <MX_QUADSPI_Init+0x50>)
 8002b12:	f00b fa91 	bl	800e038 <HAL_QSPI_Init>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8002b1c:	f7ff ffd4 	bl	8002ac8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002b20:	bf00      	nop
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	20056fa0 	.word	0x20056fa0
 8002b28:	a0001000 	.word	0xa0001000

08002b2c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08a      	sub	sp, #40	; 0x28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b34:	f107 0314 	add.w	r3, r7, #20
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	605a      	str	r2, [r3, #4]
 8002b3e:	609a      	str	r2, [r3, #8]
 8002b40:	60da      	str	r2, [r3, #12]
 8002b42:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a39      	ldr	r2, [pc, #228]	; (8002c30 <HAL_QSPI_MspInit+0x104>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d16c      	bne.n	8002c28 <HAL_QSPI_MspInit+0xfc>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002b4e:	4b39      	ldr	r3, [pc, #228]	; (8002c34 <HAL_QSPI_MspInit+0x108>)
 8002b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b52:	4a38      	ldr	r2, [pc, #224]	; (8002c34 <HAL_QSPI_MspInit+0x108>)
 8002b54:	f043 0302 	orr.w	r3, r3, #2
 8002b58:	6393      	str	r3, [r2, #56]	; 0x38
 8002b5a:	4b36      	ldr	r3, [pc, #216]	; (8002c34 <HAL_QSPI_MspInit+0x108>)
 8002b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b66:	4b33      	ldr	r3, [pc, #204]	; (8002c34 <HAL_QSPI_MspInit+0x108>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	4a32      	ldr	r2, [pc, #200]	; (8002c34 <HAL_QSPI_MspInit+0x108>)
 8002b6c:	f043 0320 	orr.w	r3, r3, #32
 8002b70:	6313      	str	r3, [r2, #48]	; 0x30
 8002b72:	4b30      	ldr	r3, [pc, #192]	; (8002c34 <HAL_QSPI_MspInit+0x108>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	f003 0320 	and.w	r3, r3, #32
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b7e:	4b2d      	ldr	r3, [pc, #180]	; (8002c34 <HAL_QSPI_MspInit+0x108>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	4a2c      	ldr	r2, [pc, #176]	; (8002c34 <HAL_QSPI_MspInit+0x108>)
 8002b84:	f043 0302 	orr.w	r3, r3, #2
 8002b88:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8a:	4b2a      	ldr	r3, [pc, #168]	; (8002c34 <HAL_QSPI_MspInit+0x108>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	60bb      	str	r3, [r7, #8]
 8002b94:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b96:	23c0      	movs	r3, #192	; 0xc0
 8002b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002ba6:	2309      	movs	r3, #9
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002baa:	f107 0314 	add.w	r3, r7, #20
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4821      	ldr	r0, [pc, #132]	; (8002c38 <HAL_QSPI_MspInit+0x10c>)
 8002bb2:	f00a fb6d 	bl	800d290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002bb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002bc8:	230a      	movs	r3, #10
 8002bca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bcc:	f107 0314 	add.w	r3, r7, #20
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4819      	ldr	r0, [pc, #100]	; (8002c38 <HAL_QSPI_MspInit+0x10c>)
 8002bd4:	f00a fb5c 	bl	800d290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002bd8:	2304      	movs	r3, #4
 8002bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be4:	2303      	movs	r3, #3
 8002be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002be8:	2309      	movs	r3, #9
 8002bea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bec:	f107 0314 	add.w	r3, r7, #20
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4812      	ldr	r0, [pc, #72]	; (8002c3c <HAL_QSPI_MspInit+0x110>)
 8002bf4:	f00a fb4c 	bl	800d290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002bf8:	2340      	movs	r3, #64	; 0x40
 8002bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c04:	2303      	movs	r3, #3
 8002c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002c08:	230a      	movs	r3, #10
 8002c0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c0c:	f107 0314 	add.w	r3, r7, #20
 8002c10:	4619      	mov	r1, r3
 8002c12:	480a      	ldr	r0, [pc, #40]	; (8002c3c <HAL_QSPI_MspInit+0x110>)
 8002c14:	f00a fb3c 	bl	800d290 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 3, 0);
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2103      	movs	r1, #3
 8002c1c:	205c      	movs	r0, #92	; 0x5c
 8002c1e:	f009 fc73 	bl	800c508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8002c22:	205c      	movs	r0, #92	; 0x5c
 8002c24:	f009 fc8c 	bl	800c540 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8002c28:	bf00      	nop
 8002c2a:	3728      	adds	r7, #40	; 0x28
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	a0001000 	.word	0xa0001000
 8002c34:	40023800 	.word	0x40023800
 8002c38:	40021400 	.word	0x40021400
 8002c3c:	40020400 	.word	0x40020400

08002c40 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a0c      	ldr	r2, [pc, #48]	; (8002c80 <HAL_QSPI_MspDeInit+0x40>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d111      	bne.n	8002c76 <HAL_QSPI_MspDeInit+0x36>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8002c52:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <HAL_QSPI_MspDeInit+0x44>)
 8002c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c56:	4a0b      	ldr	r2, [pc, #44]	; (8002c84 <HAL_QSPI_MspDeInit+0x44>)
 8002c58:	f023 0302 	bic.w	r3, r3, #2
 8002c5c:	6393      	str	r3, [r2, #56]	; 0x38
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8002c5e:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8002c62:	4809      	ldr	r0, [pc, #36]	; (8002c88 <HAL_QSPI_MspDeInit+0x48>)
 8002c64:	f00a fcc0 	bl	800d5e8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2|GPIO_PIN_6);
 8002c68:	2144      	movs	r1, #68	; 0x44
 8002c6a:	4808      	ldr	r0, [pc, #32]	; (8002c8c <HAL_QSPI_MspDeInit+0x4c>)
 8002c6c:	f00a fcbc 	bl	800d5e8 <HAL_GPIO_DeInit>

    /* QUADSPI interrupt Deinit */
    HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8002c70:	205c      	movs	r0, #92	; 0x5c
 8002c72:	f009 fc73 	bl	800c55c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	a0001000 	.word	0xa0001000
 8002c84:	40023800 	.word	0x40023800
 8002c88:	40021400 	.word	0x40021400
 8002c8c:	40020400 	.word	0x40020400

08002c90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c96:	4b11      	ldr	r3, [pc, #68]	; (8002cdc <HAL_MspInit+0x4c>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	4a10      	ldr	r2, [pc, #64]	; (8002cdc <HAL_MspInit+0x4c>)
 8002c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca2:	4b0e      	ldr	r3, [pc, #56]	; (8002cdc <HAL_MspInit+0x4c>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002caa:	607b      	str	r3, [r7, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cae:	4b0b      	ldr	r3, [pc, #44]	; (8002cdc <HAL_MspInit+0x4c>)
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb2:	4a0a      	ldr	r2, [pc, #40]	; (8002cdc <HAL_MspInit+0x4c>)
 8002cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8002cba:	4b08      	ldr	r3, [pc, #32]	; (8002cdc <HAL_MspInit+0x4c>)
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc2:	603b      	str	r3, [r7, #0]
 8002cc4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	210f      	movs	r1, #15
 8002cca:	f06f 0001 	mvn.w	r0, #1
 8002cce:	f009 fc1b 	bl	800c508 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40023800 	.word	0x40023800

08002ce0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08c      	sub	sp, #48	; 0x30
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002cec:	2300      	movs	r3, #0
 8002cee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	2036      	movs	r0, #54	; 0x36
 8002cf6:	f009 fc07 	bl	800c508 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002cfa:	2036      	movs	r0, #54	; 0x36
 8002cfc:	f009 fc20 	bl	800c540 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002d00:	4b1f      	ldr	r3, [pc, #124]	; (8002d80 <HAL_InitTick+0xa0>)
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	4a1e      	ldr	r2, [pc, #120]	; (8002d80 <HAL_InitTick+0xa0>)
 8002d06:	f043 0310 	orr.w	r3, r3, #16
 8002d0a:	6413      	str	r3, [r2, #64]	; 0x40
 8002d0c:	4b1c      	ldr	r3, [pc, #112]	; (8002d80 <HAL_InitTick+0xa0>)
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	f003 0310 	and.w	r3, r3, #16
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d18:	f107 0210 	add.w	r2, r7, #16
 8002d1c:	f107 0314 	add.w	r3, r7, #20
 8002d20:	4611      	mov	r1, r2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f00c fd06 	bl	800f734 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002d28:	f00c fcf0 	bl	800f70c <HAL_RCC_GetPCLK1Freq>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d34:	4a13      	ldr	r2, [pc, #76]	; (8002d84 <HAL_InitTick+0xa4>)
 8002d36:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3a:	0c9b      	lsrs	r3, r3, #18
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002d40:	4b11      	ldr	r3, [pc, #68]	; (8002d88 <HAL_InitTick+0xa8>)
 8002d42:	4a12      	ldr	r2, [pc, #72]	; (8002d8c <HAL_InitTick+0xac>)
 8002d44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002d46:	4b10      	ldr	r3, [pc, #64]	; (8002d88 <HAL_InitTick+0xa8>)
 8002d48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d4c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002d4e:	4a0e      	ldr	r2, [pc, #56]	; (8002d88 <HAL_InitTick+0xa8>)
 8002d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d52:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002d54:	4b0c      	ldr	r3, [pc, #48]	; (8002d88 <HAL_InitTick+0xa8>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d5a:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <HAL_InitTick+0xa8>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002d60:	4809      	ldr	r0, [pc, #36]	; (8002d88 <HAL_InitTick+0xa8>)
 8002d62:	f00d f9c0 	bl	80100e6 <HAL_TIM_Base_Init>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d104      	bne.n	8002d76 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002d6c:	4806      	ldr	r0, [pc, #24]	; (8002d88 <HAL_InitTick+0xa8>)
 8002d6e:	f00d fa11 	bl	8010194 <HAL_TIM_Base_Start_IT>
 8002d72:	4603      	mov	r3, r0
 8002d74:	e000      	b.n	8002d78 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3730      	adds	r7, #48	; 0x30
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40023800 	.word	0x40023800
 8002d84:	431bde83 	.word	0x431bde83
 8002d88:	20056fec 	.word	0x20056fec
 8002d8c:	40001000 	.word	0x40001000

08002d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d94:	e7fe      	b.n	8002d94 <NMI_Handler+0x4>

08002d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d96:	b480      	push	{r7}
 8002d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d9a:	e7fe      	b.n	8002d9a <HardFault_Handler+0x4>

08002d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002da0:	e7fe      	b.n	8002da0 <MemManage_Handler+0x4>

08002da2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002da2:	b480      	push	{r7}
 8002da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002da6:	e7fe      	b.n	8002da6 <BusFault_Handler+0x4>

08002da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dac:	e7fe      	b.n	8002dac <UsageFault_Handler+0x4>

08002dae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dae:	b480      	push	{r7}
 8002db0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002db2:	bf00      	nop
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002dc0:	4802      	ldr	r0, [pc, #8]	; (8002dcc <DMA1_Stream0_IRQHandler+0x10>)
 8002dc2:	f009 fdf3 	bl	800c9ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002dc6:	bf00      	nop
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	20057130 	.word	0x20057130

08002dd0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8002dd4:	4802      	ldr	r0, [pc, #8]	; (8002de0 <DMA1_Stream4_IRQHandler+0x10>)
 8002dd6:	f009 fde9 	bl	800c9ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002dda:	bf00      	nop
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	200570d0 	.word	0x200570d0

08002de4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002de8:	4802      	ldr	r0, [pc, #8]	; (8002df4 <CAN1_RX0_IRQHandler+0x10>)
 8002dea:	f009 f882 	bl	800bef2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20056e0c 	.word	0x20056e0c

08002df8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002dfc:	4802      	ldr	r0, [pc, #8]	; (8002e08 <TIM6_DAC_IRQHandler+0x10>)
 8002dfe:	f00d fe83 	bl	8010b08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002e02:	bf00      	nop
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20056fec 	.word	0x20056fec

08002e0c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002e10:	4802      	ldr	r0, [pc, #8]	; (8002e1c <CAN2_RX0_IRQHandler+0x10>)
 8002e12:	f009 f86e 	bl	800bef2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002e16:	bf00      	nop
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20056da4 	.word	0x20056da4

08002e20 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002e24:	4802      	ldr	r0, [pc, #8]	; (8002e30 <LTDC_IRQHandler+0x10>)
 8002e26:	f00a fdef 	bl	800da08 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20056ef8 	.word	0x20056ef8

08002e34 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002e38:	4802      	ldr	r0, [pc, #8]	; (8002e44 <DMA2D_IRQHandler+0x10>)
 8002e3a:	f00a f87b 	bl	800cf34 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002e3e:	bf00      	nop
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20056e58 	.word	0x20056e58

08002e48 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8002e4c:	4802      	ldr	r0, [pc, #8]	; (8002e58 <QUADSPI_IRQHandler+0x10>)
 8002e4e:	f00b f993 	bl	800e178 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8002e52:	bf00      	nop
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20056fa0 	.word	0x20056fa0

08002e5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
	return 1;
 8002e60:	2301      	movs	r3, #1
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <_kill>:

int _kill(int pid, int sig)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e76:	f023 fdd5 	bl	8026a24 <__errno>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2216      	movs	r2, #22
 8002e7e:	601a      	str	r2, [r3, #0]
	return -1;
 8002e80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <_exit>:

void _exit (int status)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e94:	f04f 31ff 	mov.w	r1, #4294967295
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f7ff ffe7 	bl	8002e6c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e9e:	e7fe      	b.n	8002e9e <_exit+0x12>

08002ea0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eac:	2300      	movs	r3, #0
 8002eae:	617b      	str	r3, [r7, #20]
 8002eb0:	e00a      	b.n	8002ec8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002eb2:	f3af 8000 	nop.w
 8002eb6:	4601      	mov	r1, r0
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	1c5a      	adds	r2, r3, #1
 8002ebc:	60ba      	str	r2, [r7, #8]
 8002ebe:	b2ca      	uxtb	r2, r1
 8002ec0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	dbf0      	blt.n	8002eb2 <_read+0x12>
	}

return len;
 8002ed0:	687b      	ldr	r3, [r7, #4]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b086      	sub	sp, #24
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	60f8      	str	r0, [r7, #12]
 8002ee2:	60b9      	str	r1, [r7, #8]
 8002ee4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]
 8002eea:	e009      	b.n	8002f00 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	60ba      	str	r2, [r7, #8]
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	3301      	adds	r3, #1
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	dbf1      	blt.n	8002eec <_write+0x12>
	}
	return len;
 8002f08:	687b      	ldr	r3, [r7, #4]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3718      	adds	r7, #24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <_close>:

int _close(int file)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
	return -1;
 8002f1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
 8002f32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f3a:	605a      	str	r2, [r3, #4]
	return 0;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <_isatty>:

int _isatty(int file)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
	return 1;
 8002f52:	2301      	movs	r3, #1
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
	return 0;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
	...

08002f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f84:	4a14      	ldr	r2, [pc, #80]	; (8002fd8 <_sbrk+0x5c>)
 8002f86:	4b15      	ldr	r3, [pc, #84]	; (8002fdc <_sbrk+0x60>)
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f90:	4b13      	ldr	r3, [pc, #76]	; (8002fe0 <_sbrk+0x64>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d102      	bne.n	8002f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f98:	4b11      	ldr	r3, [pc, #68]	; (8002fe0 <_sbrk+0x64>)
 8002f9a:	4a12      	ldr	r2, [pc, #72]	; (8002fe4 <_sbrk+0x68>)
 8002f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f9e:	4b10      	ldr	r3, [pc, #64]	; (8002fe0 <_sbrk+0x64>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d207      	bcs.n	8002fbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fac:	f023 fd3a 	bl	8026a24 <__errno>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	220c      	movs	r2, #12
 8002fb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fba:	e009      	b.n	8002fd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fbc:	4b08      	ldr	r3, [pc, #32]	; (8002fe0 <_sbrk+0x64>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fc2:	4b07      	ldr	r3, [pc, #28]	; (8002fe0 <_sbrk+0x64>)
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4413      	add	r3, r2
 8002fca:	4a05      	ldr	r2, [pc, #20]	; (8002fe0 <_sbrk+0x64>)
 8002fcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fce:	68fb      	ldr	r3, [r7, #12]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3718      	adds	r7, #24
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	20080000 	.word	0x20080000
 8002fdc:	00000400 	.word	0x00000400
 8002fe0:	2000028c 	.word	0x2000028c
 8002fe4:	200571e8 	.word	0x200571e8

08002fe8 <MX_TIM3_Init>:
DMA_HandleTypeDef hdma_tim3_ch1_trig;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08e      	sub	sp, #56	; 0x38
 8002fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	605a      	str	r2, [r3, #4]
 8002ff8:	609a      	str	r2, [r3, #8]
 8002ffa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ffc:	f107 031c 	add.w	r3, r7, #28
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	605a      	str	r2, [r3, #4]
 8003006:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003008:	463b      	mov	r3, r7
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	605a      	str	r2, [r3, #4]
 8003010:	609a      	str	r2, [r3, #8]
 8003012:	60da      	str	r2, [r3, #12]
 8003014:	611a      	str	r2, [r3, #16]
 8003016:	615a      	str	r2, [r3, #20]
 8003018:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800301a:	4b2c      	ldr	r3, [pc, #176]	; (80030cc <MX_TIM3_Init+0xe4>)
 800301c:	4a2c      	ldr	r2, [pc, #176]	; (80030d0 <MX_TIM3_Init+0xe8>)
 800301e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003020:	4b2a      	ldr	r3, [pc, #168]	; (80030cc <MX_TIM3_Init+0xe4>)
 8003022:	2200      	movs	r2, #0
 8003024:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003026:	4b29      	ldr	r3, [pc, #164]	; (80030cc <MX_TIM3_Init+0xe4>)
 8003028:	2200      	movs	r2, #0
 800302a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 134;
 800302c:	4b27      	ldr	r3, [pc, #156]	; (80030cc <MX_TIM3_Init+0xe4>)
 800302e:	2286      	movs	r2, #134	; 0x86
 8003030:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003032:	4b26      	ldr	r3, [pc, #152]	; (80030cc <MX_TIM3_Init+0xe4>)
 8003034:	2200      	movs	r2, #0
 8003036:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003038:	4b24      	ldr	r3, [pc, #144]	; (80030cc <MX_TIM3_Init+0xe4>)
 800303a:	2200      	movs	r2, #0
 800303c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800303e:	4823      	ldr	r0, [pc, #140]	; (80030cc <MX_TIM3_Init+0xe4>)
 8003040:	f00d f851 	bl	80100e6 <HAL_TIM_Base_Init>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800304a:	f7ff fd3d 	bl	8002ac8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800304e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003052:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003054:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003058:	4619      	mov	r1, r3
 800305a:	481c      	ldr	r0, [pc, #112]	; (80030cc <MX_TIM3_Init+0xe4>)
 800305c:	f00d ff84 	bl	8010f68 <HAL_TIM_ConfigClockSource>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003066:	f7ff fd2f 	bl	8002ac8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800306a:	4818      	ldr	r0, [pc, #96]	; (80030cc <MX_TIM3_Init+0xe4>)
 800306c:	f00d f90a 	bl	8010284 <HAL_TIM_PWM_Init>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003076:	f7ff fd27 	bl	8002ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800307a:	2300      	movs	r3, #0
 800307c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800307e:	2300      	movs	r3, #0
 8003080:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003082:	f107 031c 	add.w	r3, r7, #28
 8003086:	4619      	mov	r1, r3
 8003088:	4810      	ldr	r0, [pc, #64]	; (80030cc <MX_TIM3_Init+0xe4>)
 800308a:	f00e fcf5 	bl	8011a78 <HAL_TIMEx_MasterConfigSynchronization>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003094:	f7ff fd18 	bl	8002ac8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003098:	2360      	movs	r3, #96	; 0x60
 800309a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800309c:	2300      	movs	r3, #0
 800309e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030a0:	2300      	movs	r3, #0
 80030a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030a4:	2300      	movs	r3, #0
 80030a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030a8:	463b      	mov	r3, r7
 80030aa:	2200      	movs	r2, #0
 80030ac:	4619      	mov	r1, r3
 80030ae:	4807      	ldr	r0, [pc, #28]	; (80030cc <MX_TIM3_Init+0xe4>)
 80030b0:	f00d fe4a 	bl	8010d48 <HAL_TIM_PWM_ConfigChannel>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80030ba:	f7ff fd05 	bl	8002ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80030be:	4803      	ldr	r0, [pc, #12]	; (80030cc <MX_TIM3_Init+0xe4>)
 80030c0:	f000 f91e 	bl	8003300 <HAL_TIM_MspPostInit>

}
 80030c4:	bf00      	nop
 80030c6:	3738      	adds	r7, #56	; 0x38
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	20057084 	.word	0x20057084
 80030d0:	40000400 	.word	0x40000400

080030d4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b08e      	sub	sp, #56	; 0x38
 80030d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	605a      	str	r2, [r3, #4]
 80030e4:	609a      	str	r2, [r3, #8]
 80030e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030e8:	f107 031c 	add.w	r3, r7, #28
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	605a      	str	r2, [r3, #4]
 80030f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030f4:	463b      	mov	r3, r7
 80030f6:	2200      	movs	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	605a      	str	r2, [r3, #4]
 80030fc:	609a      	str	r2, [r3, #8]
 80030fe:	60da      	str	r2, [r3, #12]
 8003100:	611a      	str	r2, [r3, #16]
 8003102:	615a      	str	r2, [r3, #20]
 8003104:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003106:	4b2c      	ldr	r3, [pc, #176]	; (80031b8 <MX_TIM4_Init+0xe4>)
 8003108:	4a2c      	ldr	r2, [pc, #176]	; (80031bc <MX_TIM4_Init+0xe8>)
 800310a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800310c:	4b2a      	ldr	r3, [pc, #168]	; (80031b8 <MX_TIM4_Init+0xe4>)
 800310e:	2200      	movs	r2, #0
 8003110:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003112:	4b29      	ldr	r3, [pc, #164]	; (80031b8 <MX_TIM4_Init+0xe4>)
 8003114:	2200      	movs	r2, #0
 8003116:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 215;
 8003118:	4b27      	ldr	r3, [pc, #156]	; (80031b8 <MX_TIM4_Init+0xe4>)
 800311a:	22d7      	movs	r2, #215	; 0xd7
 800311c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800311e:	4b26      	ldr	r3, [pc, #152]	; (80031b8 <MX_TIM4_Init+0xe4>)
 8003120:	2200      	movs	r2, #0
 8003122:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003124:	4b24      	ldr	r3, [pc, #144]	; (80031b8 <MX_TIM4_Init+0xe4>)
 8003126:	2200      	movs	r2, #0
 8003128:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800312a:	4823      	ldr	r0, [pc, #140]	; (80031b8 <MX_TIM4_Init+0xe4>)
 800312c:	f00c ffdb 	bl	80100e6 <HAL_TIM_Base_Init>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8003136:	f7ff fcc7 	bl	8002ac8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800313a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800313e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003140:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003144:	4619      	mov	r1, r3
 8003146:	481c      	ldr	r0, [pc, #112]	; (80031b8 <MX_TIM4_Init+0xe4>)
 8003148:	f00d ff0e 	bl	8010f68 <HAL_TIM_ConfigClockSource>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8003152:	f7ff fcb9 	bl	8002ac8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003156:	4818      	ldr	r0, [pc, #96]	; (80031b8 <MX_TIM4_Init+0xe4>)
 8003158:	f00d f894 	bl	8010284 <HAL_TIM_PWM_Init>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8003162:	f7ff fcb1 	bl	8002ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003166:	2300      	movs	r3, #0
 8003168:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800316a:	2300      	movs	r3, #0
 800316c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800316e:	f107 031c 	add.w	r3, r7, #28
 8003172:	4619      	mov	r1, r3
 8003174:	4810      	ldr	r0, [pc, #64]	; (80031b8 <MX_TIM4_Init+0xe4>)
 8003176:	f00e fc7f 	bl	8011a78 <HAL_TIMEx_MasterConfigSynchronization>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8003180:	f7ff fca2 	bl	8002ac8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003184:	2360      	movs	r3, #96	; 0x60
 8003186:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003188:	2300      	movs	r3, #0
 800318a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800318c:	2300      	movs	r3, #0
 800318e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003190:	2300      	movs	r3, #0
 8003192:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003194:	463b      	mov	r3, r7
 8003196:	2200      	movs	r2, #0
 8003198:	4619      	mov	r1, r3
 800319a:	4807      	ldr	r0, [pc, #28]	; (80031b8 <MX_TIM4_Init+0xe4>)
 800319c:	f00d fdd4 	bl	8010d48 <HAL_TIM_PWM_ConfigChannel>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80031a6:	f7ff fc8f 	bl	8002ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80031aa:	4803      	ldr	r0, [pc, #12]	; (80031b8 <MX_TIM4_Init+0xe4>)
 80031ac:	f000 f8a8 	bl	8003300 <HAL_TIM_MspPostInit>

}
 80031b0:	bf00      	nop
 80031b2:	3738      	adds	r7, #56	; 0x38
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	20057038 	.word	0x20057038
 80031bc:	40000800 	.word	0x40000800

080031c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a45      	ldr	r2, [pc, #276]	; (80032e4 <HAL_TIM_Base_MspInit+0x124>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d142      	bne.n	8003258 <HAL_TIM_Base_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031d2:	4b45      	ldr	r3, [pc, #276]	; (80032e8 <HAL_TIM_Base_MspInit+0x128>)
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	4a44      	ldr	r2, [pc, #272]	; (80032e8 <HAL_TIM_Base_MspInit+0x128>)
 80031d8:	f043 0302 	orr.w	r3, r3, #2
 80031dc:	6413      	str	r3, [r2, #64]	; 0x40
 80031de:	4b42      	ldr	r3, [pc, #264]	; (80032e8 <HAL_TIM_Base_MspInit+0x128>)
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 80031ea:	4b40      	ldr	r3, [pc, #256]	; (80032ec <HAL_TIM_Base_MspInit+0x12c>)
 80031ec:	4a40      	ldr	r2, [pc, #256]	; (80032f0 <HAL_TIM_Base_MspInit+0x130>)
 80031ee:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 80031f0:	4b3e      	ldr	r3, [pc, #248]	; (80032ec <HAL_TIM_Base_MspInit+0x12c>)
 80031f2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80031f6:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031f8:	4b3c      	ldr	r3, [pc, #240]	; (80032ec <HAL_TIM_Base_MspInit+0x12c>)
 80031fa:	2240      	movs	r2, #64	; 0x40
 80031fc:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80031fe:	4b3b      	ldr	r3, [pc, #236]	; (80032ec <HAL_TIM_Base_MspInit+0x12c>)
 8003200:	2200      	movs	r2, #0
 8003202:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8003204:	4b39      	ldr	r3, [pc, #228]	; (80032ec <HAL_TIM_Base_MspInit+0x12c>)
 8003206:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800320a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800320c:	4b37      	ldr	r3, [pc, #220]	; (80032ec <HAL_TIM_Base_MspInit+0x12c>)
 800320e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003212:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003214:	4b35      	ldr	r3, [pc, #212]	; (80032ec <HAL_TIM_Base_MspInit+0x12c>)
 8003216:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800321a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 800321c:	4b33      	ldr	r3, [pc, #204]	; (80032ec <HAL_TIM_Base_MspInit+0x12c>)
 800321e:	2200      	movs	r2, #0
 8003220:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8003222:	4b32      	ldr	r3, [pc, #200]	; (80032ec <HAL_TIM_Base_MspInit+0x12c>)
 8003224:	2200      	movs	r2, #0
 8003226:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003228:	4b30      	ldr	r3, [pc, #192]	; (80032ec <HAL_TIM_Base_MspInit+0x12c>)
 800322a:	2200      	movs	r2, #0
 800322c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 800322e:	482f      	ldr	r0, [pc, #188]	; (80032ec <HAL_TIM_Base_MspInit+0x12c>)
 8003230:	f009 fa8c 	bl	800c74c <HAL_DMA_Init>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <HAL_TIM_Base_MspInit+0x7e>
    {
      Error_Handler();
 800323a:	f7ff fc45 	bl	8002ac8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a2a      	ldr	r2, [pc, #168]	; (80032ec <HAL_TIM_Base_MspInit+0x12c>)
 8003242:	625a      	str	r2, [r3, #36]	; 0x24
 8003244:	4a29      	ldr	r2, [pc, #164]	; (80032ec <HAL_TIM_Base_MspInit+0x12c>)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a27      	ldr	r2, [pc, #156]	; (80032ec <HAL_TIM_Base_MspInit+0x12c>)
 800324e:	639a      	str	r2, [r3, #56]	; 0x38
 8003250:	4a26      	ldr	r2, [pc, #152]	; (80032ec <HAL_TIM_Base_MspInit+0x12c>)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003256:	e040      	b.n	80032da <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM4)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a25      	ldr	r2, [pc, #148]	; (80032f4 <HAL_TIM_Base_MspInit+0x134>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d13b      	bne.n	80032da <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003262:	4b21      	ldr	r3, [pc, #132]	; (80032e8 <HAL_TIM_Base_MspInit+0x128>)
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	4a20      	ldr	r2, [pc, #128]	; (80032e8 <HAL_TIM_Base_MspInit+0x128>)
 8003268:	f043 0304 	orr.w	r3, r3, #4
 800326c:	6413      	str	r3, [r2, #64]	; 0x40
 800326e:	4b1e      	ldr	r3, [pc, #120]	; (80032e8 <HAL_TIM_Base_MspInit+0x128>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f003 0304 	and.w	r3, r3, #4
 8003276:	60bb      	str	r3, [r7, #8]
 8003278:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 800327a:	4b1f      	ldr	r3, [pc, #124]	; (80032f8 <HAL_TIM_Base_MspInit+0x138>)
 800327c:	4a1f      	ldr	r2, [pc, #124]	; (80032fc <HAL_TIM_Base_MspInit+0x13c>)
 800327e:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8003280:	4b1d      	ldr	r3, [pc, #116]	; (80032f8 <HAL_TIM_Base_MspInit+0x138>)
 8003282:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003286:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003288:	4b1b      	ldr	r3, [pc, #108]	; (80032f8 <HAL_TIM_Base_MspInit+0x138>)
 800328a:	2240      	movs	r2, #64	; 0x40
 800328c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800328e:	4b1a      	ldr	r3, [pc, #104]	; (80032f8 <HAL_TIM_Base_MspInit+0x138>)
 8003290:	2200      	movs	r2, #0
 8003292:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003294:	4b18      	ldr	r3, [pc, #96]	; (80032f8 <HAL_TIM_Base_MspInit+0x138>)
 8003296:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800329a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800329c:	4b16      	ldr	r3, [pc, #88]	; (80032f8 <HAL_TIM_Base_MspInit+0x138>)
 800329e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032a2:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80032a4:	4b14      	ldr	r3, [pc, #80]	; (80032f8 <HAL_TIM_Base_MspInit+0x138>)
 80032a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032aa:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 80032ac:	4b12      	ldr	r3, [pc, #72]	; (80032f8 <HAL_TIM_Base_MspInit+0x138>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80032b2:	4b11      	ldr	r3, [pc, #68]	; (80032f8 <HAL_TIM_Base_MspInit+0x138>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032b8:	4b0f      	ldr	r3, [pc, #60]	; (80032f8 <HAL_TIM_Base_MspInit+0x138>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 80032be:	480e      	ldr	r0, [pc, #56]	; (80032f8 <HAL_TIM_Base_MspInit+0x138>)
 80032c0:	f009 fa44 	bl	800c74c <HAL_DMA_Init>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <HAL_TIM_Base_MspInit+0x10e>
      Error_Handler();
 80032ca:	f7ff fbfd 	bl	8002ac8 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a09      	ldr	r2, [pc, #36]	; (80032f8 <HAL_TIM_Base_MspInit+0x138>)
 80032d2:	625a      	str	r2, [r3, #36]	; 0x24
 80032d4:	4a08      	ldr	r2, [pc, #32]	; (80032f8 <HAL_TIM_Base_MspInit+0x138>)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80032da:	bf00      	nop
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40000400 	.word	0x40000400
 80032e8:	40023800 	.word	0x40023800
 80032ec:	200570d0 	.word	0x200570d0
 80032f0:	40026070 	.word	0x40026070
 80032f4:	40000800 	.word	0x40000800
 80032f8:	20057130 	.word	0x20057130
 80032fc:	40026010 	.word	0x40026010

08003300 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08a      	sub	sp, #40	; 0x28
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003308:	f107 0314 	add.w	r3, r7, #20
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	605a      	str	r2, [r3, #4]
 8003312:	609a      	str	r2, [r3, #8]
 8003314:	60da      	str	r2, [r3, #12]
 8003316:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a22      	ldr	r2, [pc, #136]	; (80033a8 <HAL_TIM_MspPostInit+0xa8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d11c      	bne.n	800335c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003322:	4b22      	ldr	r3, [pc, #136]	; (80033ac <HAL_TIM_MspPostInit+0xac>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003326:	4a21      	ldr	r2, [pc, #132]	; (80033ac <HAL_TIM_MspPostInit+0xac>)
 8003328:	f043 0302 	orr.w	r3, r3, #2
 800332c:	6313      	str	r3, [r2, #48]	; 0x30
 800332e:	4b1f      	ldr	r3, [pc, #124]	; (80033ac <HAL_TIM_MspPostInit+0xac>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	613b      	str	r3, [r7, #16]
 8003338:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800333a:	2310      	movs	r3, #16
 800333c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333e:	2302      	movs	r3, #2
 8003340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003342:	2300      	movs	r3, #0
 8003344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003346:	2300      	movs	r3, #0
 8003348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800334a:	2302      	movs	r3, #2
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800334e:	f107 0314 	add.w	r3, r7, #20
 8003352:	4619      	mov	r1, r3
 8003354:	4816      	ldr	r0, [pc, #88]	; (80033b0 <HAL_TIM_MspPostInit+0xb0>)
 8003356:	f009 ff9b 	bl	800d290 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800335a:	e021      	b.n	80033a0 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM4)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a14      	ldr	r2, [pc, #80]	; (80033b4 <HAL_TIM_MspPostInit+0xb4>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d11c      	bne.n	80033a0 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003366:	4b11      	ldr	r3, [pc, #68]	; (80033ac <HAL_TIM_MspPostInit+0xac>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	4a10      	ldr	r2, [pc, #64]	; (80033ac <HAL_TIM_MspPostInit+0xac>)
 800336c:	f043 0308 	orr.w	r3, r3, #8
 8003370:	6313      	str	r3, [r2, #48]	; 0x30
 8003372:	4b0e      	ldr	r3, [pc, #56]	; (80033ac <HAL_TIM_MspPostInit+0xac>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800337e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003382:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003384:	2302      	movs	r3, #2
 8003386:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003388:	2300      	movs	r3, #0
 800338a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338c:	2300      	movs	r3, #0
 800338e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003390:	2302      	movs	r3, #2
 8003392:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003394:	f107 0314 	add.w	r3, r7, #20
 8003398:	4619      	mov	r1, r3
 800339a:	4807      	ldr	r0, [pc, #28]	; (80033b8 <HAL_TIM_MspPostInit+0xb8>)
 800339c:	f009 ff78 	bl	800d290 <HAL_GPIO_Init>
}
 80033a0:	bf00      	nop
 80033a2:	3728      	adds	r7, #40	; 0x28
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40000400 	.word	0x40000400
 80033ac:	40023800 	.word	0x40023800
 80033b0:	40020400 	.word	0x40020400
 80033b4:	40000800 	.word	0x40000800
 80033b8:	40020c00 	.word	0x40020c00

080033bc <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 80033bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033c0:	480d      	ldr	r0, [pc, #52]	; (80033f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80033c2:	490e      	ldr	r1, [pc, #56]	; (80033fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80033c4:	4a0e      	ldr	r2, [pc, #56]	; (8003400 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80033c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033c8:	e002      	b.n	80033d0 <LoopCopyDataInit>

080033ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033ce:	3304      	adds	r3, #4

080033d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033d4:	d3f9      	bcc.n	80033ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033d6:	4a0b      	ldr	r2, [pc, #44]	; (8003404 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80033d8:	4c0b      	ldr	r4, [pc, #44]	; (8003408 <LoopFillZerobss+0x26>)
  movs r3, #0
 80033da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033dc:	e001      	b.n	80033e2 <LoopFillZerobss>

080033de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033e0:	3204      	adds	r2, #4

080033e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033e4:	d3fb      	bcc.n	80033de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80033e6:	f007 fcf3 	bl	800add0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033ea:	f023 fb33 	bl	8026a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033ee:	f7ff fabd 	bl	800296c <main>
  bx  lr    
 80033f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80033f4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80033f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033fc:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 8003400:	080d99bc 	.word	0x080d99bc
  ldr r2, =_sbss
 8003404:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 8003408:	200571e4 	.word	0x200571e4

0800340c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800340c:	e7fe      	b.n	800340c <ADC_IRQHandler>

0800340e <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 8003412:	f001 fbdf 	bl	8004bd4 <touchgfx_init>
}
 8003416:	bf00      	nop
 8003418:	bd80      	pop	{r7, pc}

0800341a <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800341e:	f001 fc03 	bl	8004c28 <touchgfx_taskEntry>
}
 8003422:	bf00      	nop
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
    {
 8003430:	4a04      	ldr	r2, [pc, #16]	; (8003444 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	601a      	str	r2, [r3, #0]
    }
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4618      	mov	r0, r3
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	0802bf6c 	.word	0x0802bf6c

08003448 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
    }
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7ff ffe9 	bl	8003428 <_ZN8touchgfx15TouchControllerD1Ev>
 8003456:	2104      	movs	r1, #4
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f023 f97c 	bl	8026756 <_ZdlPvj>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
	...

08003498 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	4a05      	ldr	r2, [pc, #20]	; (80034b8 <_ZN20STM32TouchControllerD1Ev+0x20>)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff ffbd 	bl	8003428 <_ZN8touchgfx15TouchControllerD1Ev>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4618      	mov	r0, r3
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	0802bf54 	.word	0x0802bf54

080034bc <_ZN20STM32TouchControllerD0Ev>:
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7ff ffe7 	bl	8003498 <_ZN20STM32TouchControllerD1Ev>
 80034ca:	2104      	movs	r1, #4
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f023 f942 	bl	8026756 <_ZdlPvj>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4618      	mov	r0, r3
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	4603      	mov	r3, r0
 80034e4:	71fb      	strb	r3, [r7, #7]

}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	4603      	mov	r3, r0
 80034fa:	71fb      	strb	r3, [r7, #7]

}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	71fb      	strb	r3, [r7, #7]

}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
	...

08003520 <_ZN8touchgfx3HALD1Ev>:
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
    {
 8003528:	4a04      	ldr	r2, [pc, #16]	; (800353c <_ZN8touchgfx3HALD1Ev+0x1c>)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	601a      	str	r2, [r3, #0]
    }
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4618      	mov	r0, r3
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	0802ce78 	.word	0x0802ce78

08003540 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
    }
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f7ff ffe9 	bl	8003520 <_ZN8touchgfx3HALD1Ev>
 800354e:	217c      	movs	r1, #124	; 0x7c
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f023 f900 	bl	8026756 <_ZdlPvj>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4618      	mov	r0, r3
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	460b      	mov	r3, r1
 800356a:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	78fa      	ldrb	r2, [r7, #3]
 8003570:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8003596:	2b00      	cmp	r3, #0
 8003598:	d009      	beq.n	80035ae <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4610      	mov	r0, r2
 80035a8:	4798      	blx	r3
 80035aa:	4603      	mov	r3, r0
 80035ac:	e000      	b.n	80035b0 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        else
        {
            return static_cast<BlitOperations>(0);
 80035ae:	2300      	movs	r3, #0
        }
    }
 80035b0:	4618      	mov	r0, r3
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f013 f9df 	bl	8016984 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	33a0      	adds	r3, #160	; 0xa0
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	4798      	blx	r3
    }
 80035d2:	bf00      	nop
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
 80035e2:	6039      	str	r1, [r7, #0]
    {
        return false;
 80035e4:	2300      	movs	r3, #0
    }
 80035e6:	4618      	mov	r0, r3
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
	...

080035f4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d106      	bne.n	8003616 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8003608:	4b11      	ldr	r3, [pc, #68]	; (8003650 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800360a:	4a12      	ldr	r2, [pc, #72]	; (8003654 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800360c:	f44f 7125 	mov.w	r1, #660	; 0x294
 8003610:	4811      	ldr	r0, [pc, #68]	; (8003658 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8003612:	f023 f9d5 	bl	80269c0 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	bf14      	ite	ne
 800362e:	2301      	movne	r3, #1
 8003630:	2300      	moveq	r3, #0
 8003632:	b2da      	uxtb	r2, r3
 8003634:	4b09      	ldr	r3, [pc, #36]	; (800365c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8003636:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	bf14      	ite	ne
 800363e:	2301      	movne	r3, #1
 8003640:	2300      	moveq	r3, #0
 8003642:	b2da      	uxtb	r2, r3
 8003644:	4b06      	ldr	r3, [pc, #24]	; (8003660 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8003646:	701a      	strb	r2, [r3, #0]
    }
 8003648:	bf00      	nop
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	0802b218 	.word	0x0802b218
 8003654:	0802b250 	.word	0x0802b250
 8003658:	0802b2a0 	.word	0x0802b2a0
 800365c:	2005677e 	.word	0x2005677e
 8003660:	2005677f 	.word	0x2005677f

08003664 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800366c:	2300      	movs	r3, #0
    }
 800366e:	4618      	mov	r0, r3
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 800367a:	b580      	push	{r7, lr}
 800367c:	b082      	sub	sp, #8
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	460b      	mov	r3, r1
 8003684:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368a:	2b00      	cmp	r3, #0
 800368c:	d004      	beq.n	8003698 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003692:	887a      	ldrh	r2, [r7, #2]
 8003694:	4610      	mov	r0, r2
 8003696:	4798      	blx	r3
        }
    }
 8003698:	bf00      	nop
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	3318      	adds	r3, #24
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4610      	mov	r0, r2
 80036b8:	4798      	blx	r3
 80036ba:	4603      	mov	r3, r0
    }
 80036bc:	4618      	mov	r0, r3
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036d8:	429a      	cmp	r2, r3
 80036da:	d017      	beq.n	800370c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 80036dc:	4b1a      	ldr	r3, [pc, #104]	; (8003748 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d12a      	bne.n	800373a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80036e4:	4b19      	ldr	r3, [pc, #100]	; (800374c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80036e6:	881a      	ldrh	r2, [r3, #0]
 80036e8:	4b19      	ldr	r3, [pc, #100]	; (8003750 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80036ea:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80036ec:	4b19      	ldr	r3, [pc, #100]	; (8003754 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80036ee:	881a      	ldrh	r2, [r3, #0]
 80036f0:	4b19      	ldr	r3, [pc, #100]	; (8003758 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80036f2:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 80036f4:	4b16      	ldr	r3, [pc, #88]	; (8003750 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80036f6:	881a      	ldrh	r2, [r3, #0]
 80036f8:	4b16      	ldr	r3, [pc, #88]	; (8003754 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80036fa:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 80036fc:	4b16      	ldr	r3, [pc, #88]	; (8003758 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80036fe:	881a      	ldrh	r2, [r3, #0]
 8003700:	4b12      	ldr	r3, [pc, #72]	; (800374c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8003702:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8003704:	4b10      	ldr	r3, [pc, #64]	; (8003748 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8003706:	2201      	movs	r2, #1
 8003708:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 800370a:	e016      	b.n	800373a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 800370c:	4b0e      	ldr	r3, [pc, #56]	; (8003748 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d012      	beq.n	800373a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8003714:	4b0f      	ldr	r3, [pc, #60]	; (8003754 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8003716:	881a      	ldrh	r2, [r3, #0]
 8003718:	4b0d      	ldr	r3, [pc, #52]	; (8003750 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800371a:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 800371c:	4b0b      	ldr	r3, [pc, #44]	; (800374c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800371e:	881a      	ldrh	r2, [r3, #0]
 8003720:	4b0d      	ldr	r3, [pc, #52]	; (8003758 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8003722:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8003724:	4b0c      	ldr	r3, [pc, #48]	; (8003758 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8003726:	881a      	ldrh	r2, [r3, #0]
 8003728:	4b0a      	ldr	r3, [pc, #40]	; (8003754 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800372a:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 800372c:	4b08      	ldr	r3, [pc, #32]	; (8003750 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800372e:	881a      	ldrh	r2, [r3, #0]
 8003730:	4b06      	ldr	r3, [pc, #24]	; (800374c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8003732:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8003734:	4b04      	ldr	r3, [pc, #16]	; (8003748 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8003736:	2200      	movs	r2, #0
 8003738:	701a      	strb	r2, [r3, #0]
    }
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	20056778 	.word	0x20056778
 800374c:	20056774 	.word	0x20056774
 8003750:	2005677a 	.word	0x2005677a
 8003754:	20056776 	.word	0x20056776
 8003758:	2005677c 	.word	0x2005677c

0800375c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4618      	mov	r0, r3
 8003768:	f012 fadd 	bl	8015d26 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800376c:	bf00      	nop
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	4a05      	ldr	r2, [pc, #20]	; (8003794 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff fecb 	bl	8003520 <_ZN8touchgfx3HALD1Ev>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4618      	mov	r0, r3
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	0802c2d0 	.word	0x0802c2d0

08003798 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff ffe7 	bl	8003774 <_ZN20TouchGFXGeneratedHALD1Ev>
 80037a6:	217c      	movs	r1, #124	; 0x7c
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f022 ffd4 	bl	8026756 <_ZdlPvj>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4618      	mov	r0, r3
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7ff ffca 	bl	800375c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80037c8:	bf00      	nop
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <_ZN11TouchGFXHAL10initializeEv>:
{
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXHAL::initialize() {
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.
	// Please note, HAL::initialize() must be called to initialize the framework.

	TouchGFXGeneratedHAL::initialize();
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4618      	mov	r0, r3
 80037dc:	f001 fee0 	bl	80055a0 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80037e0:	bf00      	nop
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
/**
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const {
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of getTFTFrameBuffer().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f001 ff7a 	bl	80056ec <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 80037f8:	4603      	mov	r3, r0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
/**
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t *address) {
 8003802:	b580      	push	{r7, lr}
 8003804:	b082      	sub	sp, #8
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
 800380a:	6039      	str	r1, [r7, #0]
	// Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6839      	ldr	r1, [r7, #0]
 8003810:	4618      	mov	r0, r3
 8003812:	f001 ff79 	bl	8005708 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8003816:	bf00      	nop
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 *
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect &rect) {
 800381e:	b580      	push	{r7, lr}
 8003820:	b082      	sub	sp, #8
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
 8003826:	6039      	str	r1, [r7, #0]
	// be called to notify the touchgfx framework that flush has been performed.
	// To calculate he start adress of rect,
	// use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
	// defined in TouchGFXGeneratedHAL.cpp

	TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6839      	ldr	r1, [r7, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f001 ff81 	bl	8005734 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8003832:	bf00      	nop
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void *RESTRICT dest, const void *RESTRICT src,
		uint32_t numBytes) {
 800383a:	b580      	push	{r7, lr}
 800383c:	b084      	sub	sp, #16
 800383e:	af00      	add	r7, sp, #0
 8003840:	60f8      	str	r0, [r7, #12]
 8003842:	60b9      	str	r1, [r7, #8]
 8003844:	607a      	str	r2, [r7, #4]
 8003846:	603b      	str	r3, [r7, #0]
	return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	68b9      	ldr	r1, [r7, #8]
 8003850:	f001 ff8e 	bl	8005770 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8003854:	4603      	mov	r3, r0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <_ZN11TouchGFXHAL19configureInterruptsEv>:

/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts() {
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of configureInterrupts().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::configureInterrupts();
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4618      	mov	r0, r3
 800386c:	f001 feca 	bl	8005604 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

	// custom code
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8003870:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <_ZN11TouchGFXHAL19configureInterruptsEv+0x40>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	b29b      	uxth	r3, r3
 8003876:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800387a:	b29b      	uxth	r3, r3
 800387c:	3b01      	subs	r3, #1
 800387e:	b29a      	uxth	r2, r3
 8003880:	4b08      	ldr	r3, [pc, #32]	; (80038a4 <_ZN11TouchGFXHAL19configureInterruptsEv+0x44>)
 8003882:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8003884:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <_ZN11TouchGFXHAL19configureInterruptsEv+0x40>)
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	b29b      	uxth	r3, r3
 800388a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800388e:	b29b      	uxth	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	4b04      	ldr	r3, [pc, #16]	; (80038a8 <_ZN11TouchGFXHAL19configureInterruptsEv+0x48>)
 8003896:	801a      	strh	r2, [r3, #0]
}
 8003898:	bf00      	nop
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40016800 	.word	0x40016800
 80038a4:	20000290 	.word	0x20000290
 80038a8:	20000292 	.word	0x20000292

080038ac <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts() {
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of enableInterrupts().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::enableInterrupts();
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f001 feb4 	bl	8005624 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80038bc:	bf00      	nop
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts() {
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of disableInterrupts().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::disableInterrupts();
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f001 feb6 	bl	8005640 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80038d4:	bf00      	nop
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:

/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt() {
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of enableLCDControllerInterrupt().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f001 feb8 	bl	800565c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80038ec:	bf00      	nop
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	4a05      	ldr	r2, [pc, #20]	; (8003914 <_ZN11TouchGFXHALD1Ev+0x20>)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff ff35 	bl	8003774 <_ZN20TouchGFXGeneratedHALD1Ev>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4618      	mov	r0, r3
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	0802bf84 	.word	0x0802bf84

08003918 <_ZN11TouchGFXHALD0Ev>:
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7ff ffe7 	bl	80038f4 <_ZN11TouchGFXHALD1Ev>
 8003926:	217c      	movs	r1, #124	; 0x7c
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f022 ff14 	bl	8026756 <_ZdlPvj>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4618      	mov	r0, r3
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800393c:	2200      	movs	r2, #0
 800393e:	2101      	movs	r1, #1
 8003940:	2001      	movs	r0, #1
 8003942:	f00e fbe5 	bl	8012110 <osSemaphoreNew>
 8003946:	4603      	mov	r3, r0
 8003948:	4a0f      	ldr	r2, [pc, #60]	; (8003988 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800394a:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 800394c:	4b0e      	ldr	r3, [pc, #56]	; (8003988 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d105      	bne.n	8003960 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8003954:	4b0d      	ldr	r3, [pc, #52]	; (800398c <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8003956:	4a0e      	ldr	r2, [pc, #56]	; (8003990 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8003958:	2126      	movs	r1, #38	; 0x26
 800395a:	480e      	ldr	r0, [pc, #56]	; (8003994 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800395c:	f023 f830 	bl	80269c0 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8003960:	2200      	movs	r2, #0
 8003962:	2104      	movs	r1, #4
 8003964:	2001      	movs	r0, #1
 8003966:	f00e fd2d 	bl	80123c4 <osMessageQueueNew>
 800396a:	4603      	mov	r3, r0
 800396c:	4a0a      	ldr	r2, [pc, #40]	; (8003998 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800396e:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8003970:	4b09      	ldr	r3, [pc, #36]	; (8003998 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d105      	bne.n	8003984 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8003978:	4b08      	ldr	r3, [pc, #32]	; (800399c <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 800397a:	4a05      	ldr	r2, [pc, #20]	; (8003990 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800397c:	212a      	movs	r1, #42	; 0x2a
 800397e:	4805      	ldr	r0, [pc, #20]	; (8003994 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8003980:	f023 f81e 	bl	80269c0 <__assert_func>
}
 8003984:	bf00      	nop
 8003986:	bd80      	pop	{r7, pc}
 8003988:	20000294 	.word	0x20000294
 800398c:	0802b2e8 	.word	0x0802b2e8
 8003990:	0802b334 	.word	0x0802b334
 8003994:	0802b364 	.word	0x0802b364
 8003998:	20000298 	.word	0x20000298
 800399c:	0802b3e0 	.word	0x0802b3e0

080039a0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 80039a4:	4b04      	ldr	r3, [pc, #16]	; (80039b8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f04f 31ff 	mov.w	r1, #4294967295
 80039ac:	4618      	mov	r0, r3
 80039ae:	f00e fc4b 	bl	8012248 <osSemaphoreAcquire>
}
 80039b2:	bf00      	nop
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	20000294 	.word	0x20000294

080039bc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80039c0:	4b03      	ldr	r3, [pc, #12]	; (80039d0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f00e fca5 	bl	8012314 <osSemaphoreRelease>
}
 80039ca:	bf00      	nop
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20000294 	.word	0x20000294

080039d4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80039d8:	4b03      	ldr	r3, [pc, #12]	; (80039e8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2100      	movs	r1, #0
 80039de:	4618      	mov	r0, r3
 80039e0:	f00e fc32 	bl	8012248 <osSemaphoreAcquire>
}
 80039e4:	bf00      	nop
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	20000294 	.word	0x20000294

080039ec <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80039f0:	4b03      	ldr	r3, [pc, #12]	; (8003a00 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f00e fc8d 	bl	8012314 <osSemaphoreRelease>
}
 80039fa:	bf00      	nop
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	20000294 	.word	0x20000294

08003a04 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8003a08:	4b04      	ldr	r3, [pc, #16]	; (8003a1c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8003a0a:	6818      	ldr	r0, [r3, #0]
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	2200      	movs	r2, #0
 8003a10:	4903      	ldr	r1, [pc, #12]	; (8003a20 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8003a12:	f00e fd5d 	bl	80124d0 <osMessageQueuePut>
}
 8003a16:	bf00      	nop
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	20000298 	.word	0x20000298
 8003a20:	2000000c 	.word	0x2000000c

08003a24 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8003a2a:	4b09      	ldr	r3, [pc, #36]	; (8003a50 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8003a2c:	6818      	ldr	r0, [r3, #0]
 8003a2e:	1d39      	adds	r1, r7, #4
 8003a30:	2300      	movs	r3, #0
 8003a32:	2200      	movs	r2, #0
 8003a34:	f00e fdc0 	bl	80125b8 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8003a38:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8003a3a:	6818      	ldr	r0, [r3, #0]
 8003a3c:	1d39      	adds	r1, r7, #4
 8003a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a42:	2200      	movs	r2, #0
 8003a44:	f00e fdb8 	bl	80125b8 <osMessageQueueGet>
}
 8003a48:	bf00      	nop
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	20000298 	.word	0x20000298

08003a54 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 8003a5e:	88fb      	ldrh	r3, [r7, #6]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f00e fb27 	bl	80120b4 <osDelay>
}
 8003a66:	bf00      	nop
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <_ZN8touchgfx10OSWrappers9taskYieldEv>:
 * system to change to another task of similar priority. When
 * running without an operating system, the implementation can run
 * a very short task and return.
 */
void OSWrappers::taskYield()
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	af00      	add	r7, sp, #0
    osThreadYield();
 8003a72:	f00e faed 	bl	8012050 <osThreadYield>
}
 8003a76:	bf00      	nop
 8003a78:	bd80      	pop	{r7, pc}
	...

08003a7c <__NVIC_EnableIRQ>:
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	db0b      	blt.n	8003aa6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a8e:	79fb      	ldrb	r3, [r7, #7]
 8003a90:	f003 021f 	and.w	r2, r3, #31
 8003a94:	4907      	ldr	r1, [pc, #28]	; (8003ab4 <__NVIC_EnableIRQ+0x38>)
 8003a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9a:	095b      	lsrs	r3, r3, #5
 8003a9c:	2001      	movs	r0, #1
 8003a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	e000e100 	.word	0xe000e100

08003ab8 <__NVIC_DisableIRQ>:
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	4603      	mov	r3, r0
 8003ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	db12      	blt.n	8003af0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	f003 021f 	and.w	r2, r3, #31
 8003ad0:	490a      	ldr	r1, [pc, #40]	; (8003afc <__NVIC_DisableIRQ+0x44>)
 8003ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad6:	095b      	lsrs	r3, r3, #5
 8003ad8:	2001      	movs	r0, #1
 8003ada:	fa00 f202 	lsl.w	r2, r0, r2
 8003ade:	3320      	adds	r3, #32
 8003ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003ae4:	f3bf 8f4f 	dsb	sy
}
 8003ae8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003aea:	f3bf 8f6f 	isb	sy
}
 8003aee:	bf00      	nop
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	e000e100 	.word	0xe000e100

08003b00 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
        : color(0)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	601a      	str	r2, [r3, #0]
    {
    }
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4618      	mov	r0, r3
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
    {
        return color;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
    }
 8003b28:	4618      	mov	r0, r3
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
    {
 8003b3c:	4a04      	ldr	r2, [pc, #16]	; (8003b50 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	601a      	str	r2, [r3, #0]
    }
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4618      	mov	r0, r3
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	0802c0a0 	.word	0x0802c0a0

08003b54 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
    }
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7ff ffe9 	bl	8003b34 <_ZN8touchgfx9DMA_QueueD1Ev>
 8003b62:	2104      	movs	r1, #4
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f022 fdf6 	bl	8026756 <_ZdlPvj>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3708      	adds	r7, #8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	3344      	adds	r3, #68	; 0x44
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	4798      	blx	r3
    }
 8003b88:	bf00      	nop
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
    {
 8003b98:	4a04      	ldr	r2, [pc, #16]	; (8003bac <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	601a      	str	r2, [r3, #0]
    }
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	0802d3b8 	.word	0x0802d3b8

08003bb0 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
    }
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f7ff ffe9 	bl	8003b90 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8003bbe:	210c      	movs	r1, #12
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f022 fdc8 	bl	8026756 <_ZdlPvj>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8003bda:	4a09      	ldr	r2, [pc, #36]	; (8003c00 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	605a      	str	r2, [r3, #4]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	721a      	strb	r2, [r3, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	725a      	strb	r2, [r3, #9]
    {
    }
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	0802d3b8 	.word	0x0802d3b8

08003c04 <_ZN10STM32F7DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8003c0c:	2301      	movs	r3, #1
    }
 8003c0e:	4618      	mov	r0, r3
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b082      	sub	sp, #8
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3328      	adds	r3, #40	; 0x28
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	4798      	blx	r3
    }
 8003c30:	bf00      	nop
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
        return instance;
 8003c3c:	4b03      	ldr	r3, [pc, #12]	; (8003c4c <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
    }
 8003c40:	4618      	mov	r0, r3
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	20056780 	.word	0x20056780

08003c50 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	3314      	adds	r3, #20
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4610      	mov	r0, r2
 8003c68:	4798      	blx	r3
    }
 8003c6a:	bf00      	nop
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b082      	sub	sp, #8
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8003c7a:	f7ff ffdd 	bl	8003c38 <_ZN8touchgfx3HAL11getInstanceEv>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff ffe5 	bl	8003c50 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8003c86:	bf00      	nop
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b082      	sub	sp, #8
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	330c      	adds	r3, #12
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7ff ff30 	bl	8003b00 <_ZN8touchgfx9colortypeC1Ev>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
	...

08003cac <_ZN10STM32F7DMAC1Ev>:
}

STM32F7DMA::STM32F7DMA()
 8003cac:	b5b0      	push	{r4, r5, r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	330c      	adds	r3, #12
 8003cba:	4619      	mov	r1, r3
 8003cbc:	4610      	mov	r0, r2
 8003cbe:	f7ff ff87 	bl	8003bd0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8003cc2:	4a0e      	ldr	r2, [pc, #56]	; (8003cfc <_ZN10STM32F7DMAC1Ev+0x50>)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	601a      	str	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f103 000c 	add.w	r0, r3, #12
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	3320      	adds	r3, #32
 8003cd2:	2260      	movs	r2, #96	; 0x60
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	f012 ffbf 	bl	8016c58 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	3320      	adds	r3, #32
 8003cde:	245f      	movs	r4, #95	; 0x5f
 8003ce0:	461d      	mov	r5, r3
 8003ce2:	2c00      	cmp	r4, #0
 8003ce4:	db05      	blt.n	8003cf2 <_ZN10STM32F7DMAC1Ev+0x46>
 8003ce6:	4628      	mov	r0, r5
 8003ce8:	f7ff ffd1 	bl	8003c8e <_ZN8touchgfx6BlitOpC1Ev>
 8003cec:	3520      	adds	r5, #32
 8003cee:	3c01      	subs	r4, #1
 8003cf0:	e7f7      	b.n	8003ce2 <_ZN10STM32F7DMAC1Ev+0x36>
{
}
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3708      	adds	r7, #8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bdb0      	pop	{r4, r5, r7, pc}
 8003cfc:	0802c050 	.word	0x0802c050

08003d00 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	4a09      	ldr	r2, [pc, #36]	; (8003d30 <_ZN10STM32F7DMAD1Ev+0x30>)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8003d0e:	205a      	movs	r0, #90	; 0x5a
 8003d10:	f7ff fed2 	bl	8003ab8 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	330c      	adds	r3, #12
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 faad 	bl	8004278 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff ff35 	bl	8003b90 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	0802c050 	.word	0x0802c050

08003d34 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
}
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff ffdf 	bl	8003d00 <_ZN10STM32F7DMAD1Ev>
 8003d42:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f022 fd05 	bl	8026756 <_ZdlPvj>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003d60:	4b10      	ldr	r3, [pc, #64]	; (8003da4 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d64:	4a0f      	ldr	r2, [pc, #60]	; (8003da4 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003d66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8003d6c:	4b0d      	ldr	r3, [pc, #52]	; (8003da4 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8003d78:	4b0a      	ldr	r3, [pc, #40]	; (8003da4 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	4a09      	ldr	r2, [pc, #36]	; (8003da4 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003d7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d82:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8003d84:	4b07      	ldr	r3, [pc, #28]	; (8003da4 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	4a06      	ldr	r2, [pc, #24]	; (8003da4 <_ZN10STM32F7DMA10initializeEv+0x4c>)
 8003d8a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d8e:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8003d90:	4b05      	ldr	r3, [pc, #20]	; (8003da8 <_ZN10STM32F7DMA10initializeEv+0x50>)
 8003d92:	4a06      	ldr	r2, [pc, #24]	; (8003dac <_ZN10STM32F7DMA10initializeEv+0x54>)
 8003d94:	619a      	str	r2, [r3, #24]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8003d96:	205a      	movs	r0, #90	; 0x5a
 8003d98:	f7ff fe70 	bl	8003a7c <__NVIC_EnableIRQ>
}
 8003d9c:	bf00      	nop
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40023800 	.word	0x40023800
 8003da8:	20056e58 	.word	0x20056e58
 8003dac:	08003c73 	.word	0x08003c73

08003db0 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F7DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	460b      	mov	r3, r1
 8003dba:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	60fb      	str	r3, [r7, #12]

    switch (format)
 8003dc0:	78fb      	ldrb	r3, [r7, #3]
 8003dc2:	2b0b      	cmp	r3, #11
 8003dc4:	d826      	bhi.n	8003e14 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8003dc6:	a201      	add	r2, pc, #4	; (adr r2, 8003dcc <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8003dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dcc:	08003e09 	.word	0x08003e09
 8003dd0:	08003e03 	.word	0x08003e03
 8003dd4:	08003dfd 	.word	0x08003dfd
 8003dd8:	08003e15 	.word	0x08003e15
 8003ddc:	08003e15 	.word	0x08003e15
 8003de0:	08003e15 	.word	0x08003e15
 8003de4:	08003e15 	.word	0x08003e15
 8003de8:	08003e0f 	.word	0x08003e0f
 8003dec:	08003e0f 	.word	0x08003e0f
 8003df0:	08003e0f 	.word	0x08003e0f
 8003df4:	08003e0f 	.word	0x08003e0f
 8003df8:	08003e0f 	.word	0x08003e0f
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	60fb      	str	r3, [r7, #12]
        break;
 8003e00:	e00e      	b.n	8003e20 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8003e02:	2301      	movs	r3, #1
 8003e04:	60fb      	str	r3, [r7, #12]
        break;
 8003e06:	e00b      	b.n	8003e20 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8003e08:	2302      	movs	r3, #2
 8003e0a:	60fb      	str	r3, [r7, #12]
        break;
 8003e0c:	e008      	b.n	8003e20 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8003e0e:	2305      	movs	r3, #5
 8003e10:	60fb      	str	r3, [r7, #12]
        break;
 8003e12:	e005      	b.n	8003e20 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8003e14:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8003e16:	4a06      	ldr	r2, [pc, #24]	; (8003e30 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8003e18:	2164      	movs	r1, #100	; 0x64
 8003e1a:	4806      	ldr	r0, [pc, #24]	; (8003e34 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8003e1c:	f022 fdd0 	bl	80269c0 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8003e20:	68fb      	ldr	r3, [r7, #12]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	0802b424 	.word	0x0802b424
 8003e30:	0802b440 	.word	0x0802b440
 8003e34:	0802b48c 	.word	0x0802b48c

08003e38 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F7DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	460b      	mov	r3, r1
 8003e42:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8003e44:	2300      	movs	r3, #0
 8003e46:	60fb      	str	r3, [r7, #12]

    switch (format)
 8003e48:	78fb      	ldrb	r3, [r7, #3]
 8003e4a:	2b0a      	cmp	r3, #10
 8003e4c:	d821      	bhi.n	8003e92 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8003e4e:	a201      	add	r2, pc, #4	; (adr r2, 8003e54 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8003e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e54:	08003e8d 	.word	0x08003e8d
 8003e58:	08003e87 	.word	0x08003e87
 8003e5c:	08003e81 	.word	0x08003e81
 8003e60:	08003e93 	.word	0x08003e93
 8003e64:	08003e93 	.word	0x08003e93
 8003e68:	08003e93 	.word	0x08003e93
 8003e6c:	08003e93 	.word	0x08003e93
 8003e70:	08003e87 	.word	0x08003e87
 8003e74:	08003e87 	.word	0x08003e87
 8003e78:	08003e87 	.word	0x08003e87
 8003e7c:	08003e87 	.word	0x08003e87
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8003e80:	2300      	movs	r3, #0
 8003e82:	60fb      	str	r3, [r7, #12]
        break;
 8003e84:	e00b      	b.n	8003e9e <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8003e86:	2301      	movs	r3, #1
 8003e88:	60fb      	str	r3, [r7, #12]
        break;
 8003e8a:	e008      	b.n	8003e9e <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	60fb      	str	r3, [r7, #12]
        break;
 8003e90:	e005      	b.n	8003e9e <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8003e92:	4b05      	ldr	r3, [pc, #20]	; (8003ea8 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8003e94:	4a05      	ldr	r2, [pc, #20]	; (8003eac <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8003e96:	2185      	movs	r1, #133	; 0x85
 8003e98:	4805      	ldr	r0, [pc, #20]	; (8003eb0 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8003e9a:	f022 fd91 	bl	80269c0 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	0802b424 	.word	0x0802b424
 8003eac:	0802b504 	.word	0x0802b504
 8003eb0:	0802b48c 	.word	0x0802b48c

08003eb4 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8003ebc:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8003ecc:	b590      	push	{r4, r7, lr}
 8003ece:	b089      	sub	sp, #36	; 0x24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	7f5b      	ldrb	r3, [r3, #29]
 8003eda:	4619      	mov	r1, r3
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7ff ff67 	bl	8003db0 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8003ee2:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	7f9b      	ldrb	r3, [r3, #30]
 8003ee8:	4619      	mov	r1, r3
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7ff ff60 	bl	8003db0 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8003ef0:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	7f9b      	ldrb	r3, [r3, #30]
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7ff ff9d 	bl	8003e38 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8003efe:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	8b5b      	ldrh	r3, [r3, #26]
 8003f04:	461a      	mov	r2, r3
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	8a9b      	ldrh	r3, [r3, #20]
 8003f0a:	1ad2      	subs	r2, r2, r3
 8003f0c:	4b97      	ldr	r3, [pc, #604]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003f0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	8b5b      	ldrh	r3, [r3, #26]
 8003f14:	461a      	mov	r2, r3
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	8a9b      	ldrh	r3, [r3, #20]
 8003f1a:	1ad2      	subs	r2, r2, r3
 8003f1c:	4b93      	ldr	r3, [pc, #588]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003f1e:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	8b1b      	ldrh	r3, [r3, #24]
 8003f24:	461a      	mov	r2, r3
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	8a9b      	ldrh	r3, [r3, #20]
 8003f2a:	1ad2      	subs	r2, r2, r3
 8003f2c:	4b8f      	ldr	r3, [pc, #572]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003f2e:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8003f30:	4a8e      	ldr	r2, [pc, #568]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	8adb      	ldrh	r3, [r3, #22]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	8a9b      	ldrh	r3, [r3, #20]
 8003f40:	041b      	lsls	r3, r3, #16
 8003f42:	431a      	orrs	r2, r3
 8003f44:	4b89      	ldr	r3, [pc, #548]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003f46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	4b87      	ldr	r3, [pc, #540]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003f4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	4b85      	ldr	r3, [pc, #532]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003f56:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f60:	d037      	beq.n	8003fd2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 8003f62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f66:	f200 80e4 	bhi.w	8004132 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8003f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f6e:	d015      	beq.n	8003f9c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8003f70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f74:	f200 80dd 	bhi.w	8004132 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8003f78:	2b80      	cmp	r3, #128	; 0x80
 8003f7a:	d045      	beq.n	8004008 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>
 8003f7c:	2b80      	cmp	r3, #128	; 0x80
 8003f7e:	f200 80d8 	bhi.w	8004132 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8003f82:	2b40      	cmp	r3, #64	; 0x40
 8003f84:	f000 80c0 	beq.w	8004108 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>
 8003f88:	2b40      	cmp	r3, #64	; 0x40
 8003f8a:	f200 80d2 	bhi.w	8004132 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	f000 80a5 	beq.w	80040de <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x212>
 8003f94:	2b20      	cmp	r3, #32
 8003f96:	f000 80b7 	beq.w	8004108 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>
 8003f9a:	e0ca      	b.n	8004132 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x266>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	7f1b      	ldrb	r3, [r3, #28]
 8003fa0:	061b      	lsls	r3, r3, #24
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4a71      	ldr	r2, [pc, #452]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003fa6:	4b72      	ldr	r3, [pc, #456]	; (8004170 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8003fa8:	430b      	orrs	r3, r1
 8003faa:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	330c      	adds	r3, #12
 8003fb0:	4c6e      	ldr	r4, [pc, #440]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7ff fdb2 	bl	8003b1c <_ZNK8touchgfx9colortypecvmEv>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003fbc:	4a6b      	ldr	r2, [pc, #428]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	691a      	ldr	r2, [r3, #16]
 8003fc6:	4b69      	ldr	r3, [pc, #420]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003fc8:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8003fca:	4b68      	ldr	r3, [pc, #416]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003fcc:	4a69      	ldr	r2, [pc, #420]	; (8004174 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8003fce:	601a      	str	r2, [r3, #0]
        break;
 8003fd0:	e0c8      	b.n	8004164 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	7f1b      	ldrb	r3, [r3, #28]
 8003fd6:	061b      	lsls	r3, r3, #24
 8003fd8:	4619      	mov	r1, r3
 8003fda:	4a64      	ldr	r2, [pc, #400]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003fdc:	4b66      	ldr	r3, [pc, #408]	; (8004178 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8003fde:	430b      	orrs	r3, r1
 8003fe0:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	330c      	adds	r3, #12
 8003fe6:	4c61      	ldr	r4, [pc, #388]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7ff fd97 	bl	8003b1c <_ZNK8touchgfx9colortypecvmEv>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003ff2:	4a5e      	ldr	r2, [pc, #376]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	691a      	ldr	r2, [r3, #16]
 8003ffc:	4b5b      	ldr	r3, [pc, #364]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8003ffe:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8004000:	4b5a      	ldr	r3, [pc, #360]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8004002:	4a5c      	ldr	r2, [pc, #368]	; (8004174 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8004004:	601a      	str	r2, [r3, #0]
        break;
 8004006:	e0ad      	b.n	8004164 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
  case BLIT_OP_COPY_L8:
      {
        const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	60fb      	str	r3, [r7, #12]
        bool blend = true;
 800400e:	2301      	movs	r3, #1
 8004010:	77fb      	strb	r3, [r7, #31]

        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	7f1b      	ldrb	r3, [r3, #28]
 8004016:	061b      	lsls	r3, r3, #24
 8004018:	461a      	mov	r2, r3
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	4313      	orrs	r3, r2
 800401e:	4a53      	ldr	r2, [pc, #332]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8004020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004024:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8004026:	4a51      	ldr	r2, [pc, #324]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	691a      	ldr	r2, [r3, #16]
 8004030:	4b4e      	ldr	r3, [pc, #312]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8004032:	615a      	str	r2, [r3, #20]

        /* Write foreground CLUT memory address */
        WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	1d1a      	adds	r2, r3, #4
 8004038:	4b4c      	ldr	r3, [pc, #304]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800403a:	62da      	str	r2, [r3, #44]	; 0x2c

        switch ((Bitmap::ClutFormat)palette->format)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	881b      	ldrh	r3, [r3, #0]
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x180>
 8004046:	2b01      	cmp	r3, #1
 8004048:	d00d      	beq.n	8004066 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19a>
 800404a:	e020      	b.n	800408e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
        {
        case Bitmap::CLUT_FORMAT_L8_ARGB8888:
            /* Write foreground CLUT size and CLUT color mode */
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800404c:	4b47      	ldr	r3, [pc, #284]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800404e:	69da      	ldr	r2, [r3, #28]
 8004050:	4b4a      	ldr	r3, [pc, #296]	; (800417c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8004052:	4013      	ands	r3, r2
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	8852      	ldrh	r2, [r2, #2]
 8004058:	3a01      	subs	r2, #1
 800405a:	0212      	lsls	r2, r2, #8
 800405c:	4611      	mov	r1, r2
 800405e:	4a43      	ldr	r2, [pc, #268]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8004060:	430b      	orrs	r3, r1
 8004062:	61d3      	str	r3, [r2, #28]
            break;
 8004064:	e019      	b.n	800409a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
        case Bitmap::CLUT_FORMAT_L8_RGB888:
            if(blitOp.alpha == 255)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	7f1b      	ldrb	r3, [r3, #28]
 800406a:	2bff      	cmp	r3, #255	; 0xff
 800406c:	d101      	bne.n	8004072 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a6>
            {
                blend = false;
 800406e:	2300      	movs	r3, #0
 8004070:	77fb      	strb	r3, [r7, #31]
            }
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8004072:	4b3e      	ldr	r3, [pc, #248]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8004074:	69da      	ldr	r2, [r3, #28]
 8004076:	4b41      	ldr	r3, [pc, #260]	; (800417c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8004078:	4013      	ands	r3, r2
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	8852      	ldrh	r2, [r2, #2]
 800407e:	3a01      	subs	r2, #1
 8004080:	0212      	lsls	r2, r2, #8
 8004082:	4313      	orrs	r3, r2
 8004084:	4a39      	ldr	r2, [pc, #228]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8004086:	f043 0310 	orr.w	r3, r3, #16
 800408a:	61d3      	str	r3, [r2, #28]
            break;
 800408c:	e005      	b.n	800409a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
        case Bitmap::CLUT_FORMAT_L8_RGB565:
        default:
            assert(0 && "Unsupported format");
 800408e:	4b3c      	ldr	r3, [pc, #240]	; (8004180 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 8004090:	4a3c      	ldr	r2, [pc, #240]	; (8004184 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>)
 8004092:	21ff      	movs	r1, #255	; 0xff
 8004094:	483c      	ldr	r0, [pc, #240]	; (8004188 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 8004096:	f022 fc93 	bl	80269c0 <__assert_func>
            break;
        }

        /* Enable the CLUT loading for the foreground */
        SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800409a:	4b34      	ldr	r3, [pc, #208]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	4a33      	ldr	r2, [pc, #204]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80040a0:	f043 0320 	orr.w	r3, r3, #32
 80040a4:	61d3      	str	r3, [r2, #28]

        while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80040a6:	4b31      	ldr	r3, [pc, #196]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	f003 0320 	and.w	r3, r3, #32
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	bf14      	ite	ne
 80040b2:	2301      	movne	r3, #1
 80040b4:	2300      	moveq	r3, #0
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f6>
        {
            OSWrappers::taskYield();
 80040bc:	f7ff fcd7 	bl	8003a6e <_ZN8touchgfx10OSWrappers9taskYieldEv>
        while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80040c0:	e7f1      	b.n	80040a6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1da>
        }
        DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80040c2:	4b2a      	ldr	r3, [pc, #168]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80040c4:	2210      	movs	r2, #16
 80040c6:	609a      	str	r2, [r3, #8]

        /* Set DMA2D mode */
        if(blend)
 80040c8:	7ffb      	ldrb	r3, [r7, #31]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20a>
        {
            WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80040ce:	4b27      	ldr	r3, [pc, #156]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80040d0:	4a28      	ldr	r2, [pc, #160]	; (8004174 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80040d2:	601a      	str	r2, [r3, #0]
        else
        {
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
        }
      }
      break;
 80040d4:	e046      	b.n	8004164 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80040d6:	4b25      	ldr	r3, [pc, #148]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80040d8:	4a2c      	ldr	r2, [pc, #176]	; (800418c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c0>)
 80040da:	601a      	str	r2, [r3, #0]
      break;
 80040dc:	e042      	b.n	8004164 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	7f1b      	ldrb	r3, [r3, #28]
 80040e2:	061b      	lsls	r3, r3, #24
 80040e4:	461a      	mov	r2, r3
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	4a20      	ldr	r2, [pc, #128]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80040ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040f0:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80040f2:	4a1e      	ldr	r2, [pc, #120]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	4b1b      	ldr	r3, [pc, #108]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80040fe:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8004100:	4b1a      	ldr	r3, [pc, #104]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8004102:	4a1c      	ldr	r2, [pc, #112]	; (8004174 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8004104:	601a      	str	r2, [r3, #0]
        break;
 8004106:	e02d      	b.n	8004164 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	7f1b      	ldrb	r3, [r3, #28]
 800410c:	061b      	lsls	r3, r3, #24
 800410e:	461a      	mov	r2, r3
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	4313      	orrs	r3, r2
 8004114:	4a15      	ldr	r2, [pc, #84]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8004116:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800411a:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800411c:	4a13      	ldr	r2, [pc, #76]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	691a      	ldr	r2, [r3, #16]
 8004126:	4b11      	ldr	r3, [pc, #68]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8004128:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800412a:	4b10      	ldr	r3, [pc, #64]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800412c:	4a11      	ldr	r2, [pc, #68]	; (8004174 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 800412e:	601a      	str	r2, [r3, #0]
        break;
 8004130:	e018      	b.n	8004164 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	7f1b      	ldrb	r3, [r3, #28]
 8004136:	061b      	lsls	r3, r3, #24
 8004138:	461a      	mov	r2, r3
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	4313      	orrs	r3, r2
 800413e:	4a0b      	ldr	r2, [pc, #44]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8004140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004144:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	7f5a      	ldrb	r2, [r3, #29]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	7f9b      	ldrb	r3, [r3, #30]
 800414e:	429a      	cmp	r2, r3
 8004150:	d003      	beq.n	800415a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28e>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8004152:	4b06      	ldr	r3, [pc, #24]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8004154:	4a0d      	ldr	r2, [pc, #52]	; (800418c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c0>)
 8004156:	601a      	str	r2, [r3, #0]
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }

        break;
 8004158:	e003      	b.n	8004162 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 800415a:	4b04      	ldr	r3, [pc, #16]	; (800416c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800415c:	f240 2201 	movw	r2, #513	; 0x201
 8004160:	601a      	str	r2, [r3, #0]
        break;
 8004162:	bf00      	nop
    }
}
 8004164:	bf00      	nop
 8004166:	3724      	adds	r7, #36	; 0x24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd90      	pop	{r4, r7, pc}
 800416c:	4002b000 	.word	0x4002b000
 8004170:	0002000a 	.word	0x0002000a
 8004174:	00020201 	.word	0x00020201
 8004178:	00020009 	.word	0x00020009
 800417c:	ffff00ef 	.word	0xffff00ef
 8004180:	0802b554 	.word	0x0802b554
 8004184:	0802b570 	.word	0x0802b570
 8004188:	0802b48c 	.word	0x0802b48c
 800418c:	00010201 	.word	0x00010201

08004190 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32F7DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8004190:	b590      	push	{r4, r7, lr}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	7f9b      	ldrb	r3, [r3, #30]
 800419e:	4619      	mov	r1, r3
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff fe49 	bl	8003e38 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80041a6:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80041a8:	4a2f      	ldr	r2, [pc, #188]	; (8004268 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	8adb      	ldrh	r3, [r3, #22]
 80041b2:	461a      	mov	r2, r3
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	8a9b      	ldrh	r3, [r3, #20]
 80041b8:	041b      	lsls	r3, r3, #16
 80041ba:	431a      	orrs	r2, r3
 80041bc:	4b2a      	ldr	r3, [pc, #168]	; (8004268 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80041be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	691a      	ldr	r2, [r3, #16]
 80041c4:	4b28      	ldr	r3, [pc, #160]	; (8004268 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80041c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	8b5b      	ldrh	r3, [r3, #26]
 80041cc:	461a      	mov	r2, r3
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	8a9b      	ldrh	r3, [r3, #20]
 80041d2:	1ad2      	subs	r2, r2, r3
 80041d4:	4b24      	ldr	r3, [pc, #144]	; (8004268 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80041d6:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2b08      	cmp	r3, #8
 80041de:	d12e      	bne.n	800423e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	8b5b      	ldrh	r3, [r3, #26]
 80041e4:	461a      	mov	r2, r3
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	8a9b      	ldrh	r3, [r3, #20]
 80041ea:	1ad2      	subs	r2, r2, r3
 80041ec:	4b1e      	ldr	r3, [pc, #120]	; (8004268 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80041ee:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	8b5b      	ldrh	r3, [r3, #26]
 80041f4:	461a      	mov	r2, r3
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	8a9b      	ldrh	r3, [r3, #20]
 80041fa:	1ad2      	subs	r2, r2, r3
 80041fc:	4b1a      	ldr	r3, [pc, #104]	; (8004268 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80041fe:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8004200:	4a19      	ldr	r2, [pc, #100]	; (8004268 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	7f1b      	ldrb	r3, [r3, #28]
 800420a:	061b      	lsls	r3, r3, #24
 800420c:	4619      	mov	r1, r3
 800420e:	4a16      	ldr	r2, [pc, #88]	; (8004268 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8004210:	4b16      	ldr	r3, [pc, #88]	; (800426c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 8004212:	430b      	orrs	r3, r1
 8004214:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	330c      	adds	r3, #12
 800421a:	4c13      	ldr	r4, [pc, #76]	; (8004268 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff fc7d 	bl	8003b1c <_ZNK8touchgfx9colortypecvmEv>
 8004222:	4603      	mov	r3, r0
 8004224:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	691a      	ldr	r2, [r3, #16]
 800422a:	4b0f      	ldr	r3, [pc, #60]	; (8004268 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800422c:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	691a      	ldr	r2, [r3, #16]
 8004232:	4b0d      	ldr	r3, [pc, #52]	; (8004268 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8004234:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8004236:	4b0c      	ldr	r3, [pc, #48]	; (8004268 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8004238:	4a0d      	ldr	r2, [pc, #52]	; (8004270 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 800423a:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 800423c:	e010      	b.n	8004260 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800423e:	4a0a      	ldr	r2, [pc, #40]	; (8004268 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8004244:	4b08      	ldr	r3, [pc, #32]	; (8004268 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8004246:	2200      	movs	r2, #0
 8004248:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	330c      	adds	r3, #12
 800424e:	4c06      	ldr	r4, [pc, #24]	; (8004268 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8004250:	4618      	mov	r0, r3
 8004252:	f7ff fc63 	bl	8003b1c <_ZNK8touchgfx9colortypecvmEv>
 8004256:	4603      	mov	r3, r0
 8004258:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800425a:	4b03      	ldr	r3, [pc, #12]	; (8004268 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800425c:	4a05      	ldr	r2, [pc, #20]	; (8004274 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 800425e:	601a      	str	r2, [r3, #0]
}
 8004260:	bf00      	nop
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	bd90      	pop	{r4, r7, pc}
 8004268:	4002b000 	.word	0x4002b000
 800426c:	00010009 	.word	0x00010009
 8004270:	00020201 	.word	0x00020201
 8004274:	00030201 	.word	0x00030201

08004278 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	4a05      	ldr	r2, [pc, #20]	; (8004298 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff fc53 	bl	8003b34 <_ZN8touchgfx9DMA_QueueD1Ev>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4618      	mov	r0, r3
 8004292:	3708      	adds	r7, #8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	0802d408 	.word	0x0802d408

0800429c <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7ff ffe7 	bl	8004278 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80042aa:	2114      	movs	r1, #20
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f022 fa52 	bl	8026756 <_ZdlPvj>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4618      	mov	r0, r3
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
        : color(col)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	601a      	str	r2, [r3, #0]
    }
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4618      	mov	r0, r3
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	801a      	strh	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	805a      	strh	r2, [r3, #2]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	809a      	strh	r2, [r3, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	80da      	strh	r2, [r3, #6]
    {
    }
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4618      	mov	r0, r3
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8004310:	4a04      	ldr	r2, [pc, #16]	; (8004324 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6013      	str	r3, [r2, #0]
    }
 8004316:	bf00      	nop
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	200567fc 	.word	0x200567fc

08004328 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
    {
 8004330:	4a04      	ldr	r2, [pc, #16]	; (8004344 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	601a      	str	r2, [r3, #0]
    }
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4618      	mov	r0, r3
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	0802c2bc 	.word	0x0802c2bc

08004348 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
    }
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7ff ffe9 	bl	8004328 <_ZN8touchgfx12FontProviderD1Ev>
 8004356:	2104      	movs	r1, #4
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f022 f9fc 	bl	8026756 <_ZdlPvj>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4618      	mov	r0, r3
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
 8004374:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8004376:	4a0b      	ldr	r2, [pc, #44]	; (80043a4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	605a      	str	r2, [r3, #4]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	609a      	str	r2, [r3, #8]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	60da      	str	r2, [r3, #12]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	611a      	str	r2, [r3, #16]
    {
    }
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4618      	mov	r0, r3
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	0802c2ac 	.word	0x0802c2ac

080043a8 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
    {
 80043b0:	4a04      	ldr	r2, [pc, #16]	; (80043c4 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	601a      	str	r2, [r3, #0]
    }
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4618      	mov	r0, r3
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr
 80043c4:	0802c2ac 	.word	0x0802c2ac

080043c8 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
    }
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7ff ffe9 	bl	80043a8 <_ZN8touchgfx7MVPHeapD1Ev>
 80043d6:	2114      	movs	r1, #20
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f022 f9bc 	bl	8026756 <_ZdlPvj>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4618      	mov	r0, r3
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
    {
    }
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
 8004406:	6039      	str	r1, [r7, #0]
    {
    }
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
    {
    }
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
 8004432:	460b      	mov	r3, r1
 8004434:	70fb      	strb	r3, [r7, #3]
    {
    }
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8004442:	b480      	push	{r7}
 8004444:	b083      	sub	sp, #12
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
    {
    }
 800444a:	bf00      	nop
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
    {
    }
 800445e:	bf00      	nop
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
	...

0800446c <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
    {
 8004474:	4a04      	ldr	r2, [pc, #16]	; (8004488 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	601a      	str	r2, [r3, #0]
    }
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4618      	mov	r0, r3
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	0802c284 	.word	0x0802c284

0800448c <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
    }
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f7ff ffe9 	bl	800446c <_ZN8touchgfx15UIEventListenerD1Ev>
 800449a:	2104      	movs	r1, #4
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f022 f95a 	bl	8026756 <_ZdlPvj>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4618      	mov	r0, r3
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
    {
 80044b4:	4a04      	ldr	r2, [pc, #16]	; (80044c8 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	601a      	str	r2, [r3, #0]
    }
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4618      	mov	r0, r3
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	0802dc74 	.word	0x0802dc74

080044cc <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
    }
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f7ff ffe9 	bl	80044ac <_ZN8touchgfx3LCDD1Ev>
 80044da:	2108      	movs	r1, #8
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f022 f93a 	bl	8026756 <_ZdlPvj>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4618      	mov	r0, r3
 80044e6:	3708      	adds	r7, #8
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	460b      	mov	r3, r1
 80044f6:	70fb      	strb	r3, [r7, #3]
    {
    }
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8004516:	6810      	ldr	r0, [r2, #0]
 8004518:	6851      	ldr	r1, [r2, #4]
 800451a:	c303      	stmia	r3!, {r0, r1}
    }
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
    {
 8004530:	4a04      	ldr	r2, [pc, #16]	; (8004544 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	601a      	str	r2, [r3, #0]
    }
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4618      	mov	r0, r3
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	0802c26c 	.word	0x0802c26c

08004548 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
    }
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f7ff ffe9 	bl	8004528 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8004556:	2104      	movs	r1, #4
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f022 f8fc 	bl	8026756 <_ZdlPvj>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4618      	mov	r0, r3
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	4a05      	ldr	r2, [pc, #20]	; (8004588 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4618      	mov	r0, r3
 800457a:	f7ff ff77 	bl	800446c <_ZN8touchgfx15UIEventListenerD1Ev>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4618      	mov	r0, r3
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	0802dd4c 	.word	0x0802dd4c

0800458c <_ZN8touchgfx11ApplicationD0Ev>:
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f7ff ffe7 	bl	8004568 <_ZN8touchgfx11ApplicationD1Ev>
 800459a:	f44f 719c 	mov.w	r1, #312	; 0x138
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f022 f8d9 	bl	8026756 <_ZdlPvj>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4618      	mov	r0, r3
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b082      	sub	sp, #8
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f804 	bl	80045c4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 80045bc:	bf00      	nop
 80045be:	3708      	adds	r7, #8
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00f      	beq.n	80045f6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	330c      	adds	r3, #12
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4610      	mov	r0, r2
 80045ea:	4798      	blx	r3
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80045f2:	2301      	movs	r3, #1
 80045f4:	e000      	b.n	80045f8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 80045f6:	2300      	movs	r3, #0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00e      	beq.n	800461a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	3308      	adds	r3, #8
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4610      	mov	r0, r2
 8004610:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 800461a:	bf00      	nop
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
	...

08004624 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	4a05      	ldr	r2, [pc, #20]	; (8004644 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4618      	mov	r0, r3
 8004636:	f7ff ff97 	bl	8004568 <_ZN8touchgfx11ApplicationD1Ev>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4618      	mov	r0, r3
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	0802c228 	.word	0x0802c228

08004648 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f7ff ffe7 	bl	8004624 <_ZN8touchgfx14MVPApplicationD1Ev>
 8004656:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f022 f87b 	bl	8026756 <_ZdlPvj>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
	...

0800466c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	4a08      	ldr	r2, [pc, #32]	; (8004698 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004680:	4618      	mov	r0, r3
 8004682:	f000 fd07 	bl	8005094 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff ffcb 	bl	8004624 <_ZN8touchgfx14MVPApplicationD1Ev>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4618      	mov	r0, r3
 8004692:	3708      	adds	r7, #8
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	0802c1cc 	.word	0x0802c1cc

0800469c <_ZN23FrontendApplicationBaseD0Ev>:
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7ff ffe1 	bl	800466c <_ZN23FrontendApplicationBaseD1Ev>
 80046aa:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f022 f851 	bl	8026756 <_ZdlPvj>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4618      	mov	r0, r3
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
	...

080046c0 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	4a05      	ldr	r2, [pc, #20]	; (80046e0 <_ZN19FrontendApplicationD1Ev+0x20>)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff ffcb 	bl	800466c <_ZN23FrontendApplicationBaseD1Ev>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4618      	mov	r0, r3
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	0802c188 	.word	0x0802c188

080046e4 <_ZN19FrontendApplicationD0Ev>:
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7ff ffe7 	bl	80046c0 <_ZN19FrontendApplicationD1Ev>
 80046f2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f022 f82d 	bl	8026756 <_ZdlPvj>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4618      	mov	r0, r3
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8004706:	b580      	push	{r7, lr}
 8004708:	b082      	sub	sp, #8
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004714:	4618      	mov	r0, r3
 8004716:	f005 ff0b 	bl	800a530 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4618      	mov	r0, r3
 800471e:	f014 ff4f 	bl	80195c0 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8004722:	bf00      	nop
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 800472a:	b480      	push	{r7}
 800472c:	b083      	sub	sp, #12
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	801a      	strh	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	805a      	strh	r2, [r3, #2]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	809a      	strh	r2, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	80da      	strh	r2, [r3, #6]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	811a      	strh	r2, [r3, #8]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	815a      	strh	r2, [r3, #10]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	819a      	strh	r2, [r3, #12]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	739a      	strb	r2, [r3, #14]
        {
        }
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4618      	mov	r0, r3
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4618      	mov	r0, r3
 800477c:	f7ff ffd5 	bl	800472a <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	611a      	str	r2, [r3, #16]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	829a      	strh	r2, [r3, #20]
    {
    }
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4618      	mov	r0, r3
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
	...

08004798 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
 80047a4:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 80047a6:	4a55      	ldr	r2, [pc, #340]	; (80048fc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	605a      	str	r2, [r3, #4]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	609a      	str	r2, [r3, #8]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	60da      	str	r2, [r3, #12]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	611a      	str	r2, [r3, #16]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	615a      	str	r2, [r3, #20]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	619a      	str	r2, [r3, #24]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	331c      	adds	r3, #28
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff ffcb 	bl	8004770 <_ZN8touchgfx8GesturesC1Ev>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	639a      	str	r2, [r3, #56]	; 0x38
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	63da      	str	r2, [r3, #60]	; 0x3c
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	641a      	str	r2, [r3, #64]	; 0x40
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	645a      	str	r2, [r3, #68]	; 0x44
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	64da      	str	r2, [r3, #76]	; 0x4c
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	3350      	adds	r3, #80	; 0x50
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff fd58 	bl	80042da <_ZN8touchgfx4RectC1Ev>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	659a      	str	r2, [r3, #88]	; 0x58
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	65da      	str	r2, [r3, #92]	; 0x5c
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	661a      	str	r2, [r3, #96]	; 0x60
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	671a      	str	r2, [r3, #112]	; 0x70
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 80048b2:	4a13      	ldr	r2, [pc, #76]	; (8004900 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 80048b8:	4a12      	ldr	r2, [pc, #72]	; (8004904 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 80048ba:	8b3b      	ldrh	r3, [r7, #24]
 80048bc:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 80048be:	4a12      	ldr	r2, [pc, #72]	; (8004908 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 80048c0:	8bbb      	ldrh	r3, [r7, #28]
 80048c2:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 80048c4:	4b11      	ldr	r3, [pc, #68]	; (800490c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80048ca:	4b0e      	ldr	r3, [pc, #56]	; (8004904 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 80048cc:	881a      	ldrh	r2, [r3, #0]
 80048ce:	4b10      	ldr	r3, [pc, #64]	; (8004910 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 80048d0:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80048d2:	4b0d      	ldr	r3, [pc, #52]	; (8004908 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 80048d4:	881a      	ldrh	r2, [r3, #0]
 80048d6:	4b0f      	ldr	r3, [pc, #60]	; (8004914 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 80048d8:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80048da:	8b3a      	ldrh	r2, [r7, #24]
 80048dc:	8bbb      	ldrh	r3, [r7, #28]
 80048de:	429a      	cmp	r2, r3
 80048e0:	bf34      	ite	cc
 80048e2:	2301      	movcc	r3, #1
 80048e4:	2300      	movcs	r3, #0
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	461a      	mov	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	0802ce78 	.word	0x0802ce78
 8004900:	20056780 	.word	0x20056780
 8004904:	20056774 	.word	0x20056774
 8004908:	20056776 	.word	0x20056776
 800490c:	20056778 	.word	0x20056778
 8004910:	2005677a 	.word	0x2005677a
 8004914:	2005677c 	.word	0x2005677c

08004918 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	4618      	mov	r0, r3
 8004926:	f001 fedf 	bl	80066e8 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 800492a:	bf00      	nop
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
	...

08004934 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af02      	add	r7, sp, #8
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
 8004940:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	68b9      	ldr	r1, [r7, #8]
 800494e:	f7ff fd0b 	bl	8004368 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8004952:	4a04      	ldr	r2, [pc, #16]	; (8004964 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	601a      	str	r2, [r3, #0]
    {

    }
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	0802c174 	.word	0x0802c174

08004968 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
 800496c:	4801      	ldr	r0, [pc, #4]	; (8004974 <__tcf_0+0xc>)
 800496e:	f000 f965 	bl	8004c3c <_ZN12FrontendHeapD1Ev>
 8004972:	bd80      	pop	{r7, pc}
 8004974:	200002b4 	.word	0x200002b4

08004978 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 800497c:	4b12      	ldr	r3, [pc, #72]	; (80049c8 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	f3bf 8f5b 	dmb	ish
 8004984:	b2db      	uxtb	r3, r3
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	bf0c      	ite	eq
 800498e:	2301      	moveq	r3, #1
 8004990:	2300      	movne	r3, #0
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d013      	beq.n	80049c0 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8004998:	480b      	ldr	r0, [pc, #44]	; (80049c8 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800499a:	f021 fede 	bl	802675a <__cxa_guard_acquire>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	bf14      	ite	ne
 80049a4:	2301      	movne	r3, #1
 80049a6:	2300      	moveq	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d008      	beq.n	80049c0 <_ZN12FrontendHeap11getInstanceEv+0x48>
 80049ae:	4807      	ldr	r0, [pc, #28]	; (80049cc <_ZN12FrontendHeap11getInstanceEv+0x54>)
 80049b0:	f000 f868 	bl	8004a84 <_ZN12FrontendHeapC1Ev>
 80049b4:	4804      	ldr	r0, [pc, #16]	; (80049c8 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80049b6:	f021 fedc 	bl	8026772 <__cxa_guard_release>
 80049ba:	4805      	ldr	r0, [pc, #20]	; (80049d0 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 80049bc:	f022 f81e 	bl	80269fc <atexit>
        return instance;
 80049c0:	4b02      	ldr	r3, [pc, #8]	; (80049cc <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 80049c2:	4618      	mov	r0, r3
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	20022b18 	.word	0x20022b18
 80049cc:	200002b4 	.word	0x200002b4
 80049d0:	08004969 	.word	0x08004969

080049d4 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	4a05      	ldr	r2, [pc, #20]	; (80049f4 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7ff fcdf 	bl	80043a8 <_ZN8touchgfx7MVPHeapD1Ev>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4618      	mov	r0, r3
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	0802c174 	.word	0x0802c174

080049f8 <_ZN16FrontendHeapBaseD0Ev>:
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f7ff ffe7 	bl	80049d4 <_ZN16FrontendHeapBaseD1Ev>
 8004a06:	2114      	movs	r1, #20
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f021 fea4 	bl	8026756 <_ZdlPvj>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4618      	mov	r0, r3
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f010 ff9a 	bl	801595c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8004a28:	4a03      	ldr	r2, [pc, #12]	; (8004a38 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	601a      	str	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4618      	mov	r0, r3
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	0802c140 	.word	0x0802c140

08004a3c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f010 ff88 	bl	801595c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8004a4c:	4a03      	ldr	r2, [pc, #12]	; (8004a5c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4618      	mov	r0, r3
 8004a56:	3708      	adds	r7, #8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	0802c10c 	.word	0x0802c10c

08004a60 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f010 ff76 	bl	801595c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8004a70:	4a03      	ldr	r2, [pc, #12]	; (8004a80 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	0802c0d8 	.word	0x0802c0d8

08004a84 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8004a84:	b5b0      	push	{r4, r5, r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f103 0414 	add.w	r4, r3, #20
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a1c      	ldr	r2, [pc, #112]	; (8004b10 <_ZN12FrontendHeapC1Ev+0x8c>)
 8004a9e:	441a      	add	r2, r3
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8004aa0:	6879      	ldr	r1, [r7, #4]
 8004aa2:	4b1c      	ldr	r3, [pc, #112]	; (8004b14 <_ZN12FrontendHeapC1Ev+0x90>)
 8004aa4:	440b      	add	r3, r1
                     app(model, *this)
 8004aa6:	9300      	str	r3, [sp, #0]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	462a      	mov	r2, r5
 8004aac:	4621      	mov	r1, r4
 8004aae:	f7ff ff41 	bl	8004934 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8004ab2:	4a19      	ldr	r2, [pc, #100]	; (8004b18 <_ZN12FrontendHeapC1Ev+0x94>)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3314      	adds	r3, #20
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7ff ffab 	bl	8004a18 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	332c      	adds	r3, #44	; 0x2c
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7ff ffb8 	bl	8004a3c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	4b10      	ldr	r3, [pc, #64]	; (8004b10 <_ZN12FrontendHeapC1Ev+0x8c>)
 8004ad0:	4413      	add	r3, r2
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7ff ffc4 	bl	8004a60 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	4b10      	ldr	r3, [pc, #64]	; (8004b1c <_ZN12FrontendHeapC1Ev+0x98>)
 8004adc:	4413      	add	r3, r2
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f005 fd18 	bl	800a514 <_ZN5ModelC1Ev>
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	4b0b      	ldr	r3, [pc, #44]	; (8004b14 <_ZN12FrontendHeapC1Ev+0x90>)
 8004ae8:	4413      	add	r3, r2
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	490b      	ldr	r1, [pc, #44]	; (8004b1c <_ZN12FrontendHeapC1Ev+0x98>)
 8004aee:	4411      	add	r1, r2
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f004 fd72 	bl	80095dc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	4b05      	ldr	r3, [pc, #20]	; (8004b14 <_ZN12FrontendHeapC1Ev+0x90>)
 8004afe:	4413      	add	r3, r2
 8004b00:	4619      	mov	r1, r3
 8004b02:	f7ff ff09 	bl	8004918 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bdb0      	pop	{r4, r5, r7, pc}
 8004b10:	000226f4 	.word	0x000226f4
 8004b14:	0002270c 	.word	0x0002270c
 8004b18:	0802c0c4 	.word	0x0802c0c4
 8004b1c:	00022708 	.word	0x00022708

08004b20 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af02      	add	r7, sp, #8
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
 8004b2c:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	8bbb      	ldrh	r3, [r7, #28]
 8004b32:	9301      	str	r3, [sp, #4]
 8004b34:	8b3b      	ldrh	r3, [r7, #24]
 8004b36:	9300      	str	r3, [sp, #0]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	68b9      	ldr	r1, [r7, #8]
 8004b3e:	f7ff fe2b 	bl	8004798 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8004b42:	4a04      	ldr	r2, [pc, #16]	; (8004b54 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	601a      	str	r2, [r3, #0]
    }
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	0802c2d0 	.word	0x0802c2d0

08004b58 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af02      	add	r7, sp, #8
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
 8004b64:	603b      	str	r3, [r7, #0]
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	8bbb      	ldrh	r3, [r7, #28]
 8004b6a:	9301      	str	r3, [sp, #4]
 8004b6c:	8b3b      	ldrh	r3, [r7, #24]
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	68b9      	ldr	r1, [r7, #8]
 8004b76:	f7ff ffd3 	bl	8004b20 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8004b7a:	4a04      	ldr	r2, [pc, #16]	; (8004b8c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	601a      	str	r2, [r3, #0]
    }
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	0802bf84 	.word	0x0802bf84

08004b90 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	4a04      	ldr	r2, [pc, #16]	; (8004bac <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	0802bf6c 	.word	0x0802bf6c

08004bb0 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7ff ffe8 	bl	8004b90 <_ZN8touchgfx15TouchControllerC1Ev>
 8004bc0:	4a03      	ldr	r2, [pc, #12]	; (8004bd0 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3708      	adds	r7, #8
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	0802bf54 	.word	0x0802bf54

08004bd4 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 8004bd4:	b590      	push	{r4, r7, lr}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8004bda:	f001 f801 	bl	8005be0 <_ZN14BitmapDatabase11getInstanceEv>
 8004bde:	4604      	mov	r4, r0
 8004be0:	f001 f808 	bl	8005bf4 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8004be4:	4603      	mov	r3, r0
 8004be6:	4619      	mov	r1, r3
 8004be8:	2300      	movs	r3, #0
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	2300      	movs	r3, #0
 8004bee:	2200      	movs	r2, #0
 8004bf0:	4620      	mov	r0, r4
 8004bf2:	f017 fea5 	bl	801c940 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8004bf6:	4809      	ldr	r0, [pc, #36]	; (8004c1c <touchgfx_init+0x48>)
 8004bf8:	f7ff fb86 	bl	8004308 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8004bfc:	2000      	movs	r0, #0
 8004bfe:	f004 f9a5 	bl	8008f4c <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8004c02:	4807      	ldr	r0, [pc, #28]	; (8004c20 <touchgfx_init+0x4c>)
 8004c04:	f017 fdde 	bl	801c7c4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8004c08:	f7ff feb6 	bl	8004978 <_ZN12FrontendHeap11getInstanceEv>
 8004c0c:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8004c0e:	4805      	ldr	r0, [pc, #20]	; (8004c24 <touchgfx_init+0x50>)
 8004c10:	f7fe fdde 	bl	80037d0 <_ZN11TouchGFXHAL10initializeEv>
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd90      	pop	{r4, r7, pc}
 8004c1c:	20023798 	.word	0x20023798
 8004c20:	20000010 	.word	0x20000010
 8004c24:	2002379c 	.word	0x2002379c

08004c28 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8004c2c:	4802      	ldr	r0, [pc, #8]	; (8004c38 <touchgfx_taskEntry+0x10>)
 8004c2e:	f011 f8de 	bl	8015dee <_ZN8touchgfx3HAL9taskEntryEv>
}
 8004c32:	bf00      	nop
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	2002379c 	.word	0x2002379c

08004c3c <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	4a10      	ldr	r2, [pc, #64]	; (8004c88 <_ZN12FrontendHeapD1Ev+0x4c>)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	4b0f      	ldr	r3, [pc, #60]	; (8004c8c <_ZN12FrontendHeapD1Ev+0x50>)
 8004c4e:	4413      	add	r3, r2
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7ff fd35 	bl	80046c0 <_ZN19FrontendApplicationD1Ev>
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	4b0d      	ldr	r3, [pc, #52]	; (8004c90 <_ZN12FrontendHeapD1Ev+0x54>)
 8004c5a:	4413      	add	r3, r2
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f000 f82b 	bl	8004cb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	332c      	adds	r3, #44	; 0x2c
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 f848 	bl	8004cfc <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	3314      	adds	r3, #20
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 f867 	bl	8004d44 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7ff feab 	bl	80049d4 <_ZN16FrontendHeapBaseD1Ev>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4618      	mov	r0, r3
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	0802c0c4 	.word	0x0802c0c4
 8004c8c:	0002270c 	.word	0x0002270c
 8004c90:	000226f4 	.word	0x000226f4

08004c94 <_ZN12FrontendHeapD0Ev>:
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f7ff ffcd 	bl	8004c3c <_ZN12FrontendHeapD1Ev>
 8004ca2:	4904      	ldr	r1, [pc, #16]	; (8004cb4 <_ZN12FrontendHeapD0Ev+0x20>)
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f021 fd56 	bl	8026756 <_ZdlPvj>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4618      	mov	r0, r3
 8004cae:	3708      	adds	r7, #8
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	00022864 	.word	0x00022864

08004cb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	4a05      	ldr	r2, [pc, #20]	; (8004cd8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	601a      	str	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f010 fe45 	bl	8015958 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	0802c0d8 	.word	0x0802c0d8

08004cdc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f7ff ffe7 	bl	8004cb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004cea:	2114      	movs	r1, #20
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f021 fd32 	bl	8026756 <_ZdlPvj>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	4a05      	ldr	r2, [pc, #20]	; (8004d1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f010 fe23 	bl	8015958 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4618      	mov	r0, r3
 8004d16:	3708      	adds	r7, #8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	0802c10c 	.word	0x0802c10c

08004d20 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f7ff ffe7 	bl	8004cfc <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004d2e:	4904      	ldr	r1, [pc, #16]	; (8004d40 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x20>)
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f021 fd10 	bl	8026756 <_ZdlPvj>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	000226c8 	.word	0x000226c8

08004d44 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	4a05      	ldr	r2, [pc, #20]	; (8004d64 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f010 fdff 	bl	8015958 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	0802c140 	.word	0x0802c140

08004d68 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f7ff ffe7 	bl	8004d44 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8004d76:	2118      	movs	r1, #24
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f021 fcec 	bl	8026756 <_ZdlPvj>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4618      	mov	r0, r3
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	4a05      	ldr	r2, [pc, #20]	; (8004da8 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	601a      	str	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7ff fb87 	bl	80044ac <_ZN8touchgfx3LCDD1Ev>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4618      	mov	r0, r3
 8004da2:	3708      	adds	r7, #8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	0802ed44 	.word	0x0802ed44

08004dac <_ZN8touchgfx8LCD24bppD0Ev>:
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7ff ffe7 	bl	8004d88 <_ZN8touchgfx8LCD24bppD1Ev>
 8004dba:	2158      	movs	r1, #88	; 0x58
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f021 fcca 	bl	8026756 <_ZdlPvj>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <_Z41__static_initialization_and_destruction_0ii>:
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b094      	sub	sp, #80	; 0x50
 8004dd0:	af02      	add	r7, sp, #8
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	f040 8129 	bne.w	8005030 <_Z41__static_initialization_and_destruction_0ii+0x264>
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004de4:	4293      	cmp	r3, r2
 8004de6:	f040 8123 	bne.w	8005030 <_Z41__static_initialization_and_destruction_0ii+0x264>
 8004dea:	2300      	movs	r3, #0
 8004dec:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8004df0:	2300      	movs	r3, #0
 8004df2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8004df6:	2300      	movs	r3, #0
 8004df8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004dfc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004e00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004e04:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e08:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e10:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004e14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004e18:	041b      	lsls	r3, r3, #16
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004e20:	021b      	lsls	r3, r3, #8
 8004e22:	431a      	orrs	r2, r3
 8004e24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004e2e:	f107 0320 	add.w	r3, r7, #32
 8004e32:	4611      	mov	r1, r2
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff fa41 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 8004e3c:	bf00      	nop
 8004e3e:	461a      	mov	r2, r3
};

namespace colors
{
    using namespace touchgfx;
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8004e40:	4b89      	ldr	r3, [pc, #548]	; (8005068 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	23ff      	movs	r3, #255	; 0xff
 8004e46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004e50:	2300      	movs	r3, #0
 8004e52:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8004e56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e5a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8004e5e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e66:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004e6a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004e6e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004e72:	041b      	lsls	r3, r3, #16
 8004e74:	461a      	mov	r2, r3
 8004e76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e7a:	021b      	lsls	r3, r3, #8
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004e88:	f107 031c 	add.w	r3, r7, #28
 8004e8c:	4611      	mov	r1, r2
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7ff fa14 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 8004e94:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 8004e96:	bf00      	nop
 8004e98:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 8004e9a:	4b74      	ldr	r3, [pc, #464]	; (800506c <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8004ea4:	23c0      	movs	r3, #192	; 0xc0
 8004ea6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8004eaa:	2300      	movs	r3, #0
 8004eac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004eb0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004eb4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004eb8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004ebc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8004ec0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ec4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004ec8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004ecc:	041b      	lsls	r3, r3, #16
 8004ece:	461a      	mov	r2, r3
 8004ed0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004ed4:	021b      	lsls	r3, r3, #8
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004edc:	4313      	orrs	r3, r2
 8004ede:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004ee2:	f107 0318 	add.w	r3, r7, #24
 8004ee6:	4611      	mov	r1, r2
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7ff f9e7 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 8004eee:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8004ef0:	bf00      	nop
 8004ef2:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 192, 0);
 8004ef4:	4b5e      	ldr	r3, [pc, #376]	; (8005070 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	2300      	movs	r3, #0
 8004efa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004efe:	2300      	movs	r3, #0
 8004f00:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8004f04:	23c0      	movs	r3, #192	; 0xc0
 8004f06:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8004f0a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004f0e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8004f12:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004f16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004f1a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8004f1e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004f22:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004f26:	041b      	lsls	r3, r3, #16
 8004f28:	461a      	mov	r2, r3
 8004f2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f2e:	021b      	lsls	r3, r3, #8
 8004f30:	431a      	orrs	r2, r3
 8004f32:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004f36:	4313      	orrs	r3, r2
 8004f38:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004f3c:	f107 0314 	add.w	r3, r7, #20
 8004f40:	4611      	mov	r1, r2
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7ff f9ba 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 8004f48:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 8004f4a:	bf00      	nop
 8004f4c:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 192);
 8004f4e:	4b49      	ldr	r3, [pc, #292]	; (8005074 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	23f7      	movs	r3, #247	; 0xf7
 8004f54:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8004f58:	234c      	movs	r3, #76	; 0x4c
 8004f5a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8004f5e:	2302      	movs	r3, #2
 8004f60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004f64:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8004f68:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8004f6c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004f70:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8004f74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004f78:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004f7c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004f80:	041b      	lsls	r3, r3, #16
 8004f82:	461a      	mov	r2, r3
 8004f84:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004f88:	021b      	lsls	r3, r3, #8
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004f90:	4313      	orrs	r3, r2
 8004f92:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004f96:	f107 0310 	add.w	r3, r7, #16
 8004f9a:	4611      	mov	r1, r2
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7ff f98d 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 8004fa2:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 8004fa4:	bf00      	nop
 8004fa6:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8004fa8:	4b33      	ldr	r3, [pc, #204]	; (8005078 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8004faa:	601a      	str	r2, [r3, #0]
 8004fac:	23f7      	movs	r3, #247	; 0xf7
 8004fae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004fb2:	23d2      	movs	r3, #210	; 0xd2
 8004fb4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8004fb8:	2302      	movs	r3, #2
 8004fba:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8004fbe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004fc2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8004fc6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fce:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8004fd2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004fd6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004fda:	041b      	lsls	r3, r3, #16
 8004fdc:	461a      	mov	r2, r3
 8004fde:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004fe2:	021b      	lsls	r3, r3, #8
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8004fea:	4313      	orrs	r3, r2
 8004fec:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004ff0:	f107 030c 	add.w	r3, r7, #12
 8004ff4:	4611      	mov	r1, r2
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7ff f960 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 8004ffe:	bf00      	nop
 8005000:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 8005002:	4b1e      	ldr	r3, [pc, #120]	; (800507c <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8005004:	601a      	str	r2, [r3, #0]
static STM32TouchController tc;
 8005006:	481e      	ldr	r0, [pc, #120]	; (8005080 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8005008:	f7ff fdd2 	bl	8004bb0 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 800500c:	481d      	ldr	r0, [pc, #116]	; (8005084 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 800500e:	f7fe fe4d 	bl	8003cac <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 8005012:	481d      	ldr	r0, [pc, #116]	; (8005088 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8005014:	f019 fef6 	bl	801ee04 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8005018:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800501c:	9301      	str	r3, [sp, #4]
 800501e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	4b16      	ldr	r3, [pc, #88]	; (8005080 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8005026:	4a18      	ldr	r2, [pc, #96]	; (8005088 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8005028:	4916      	ldr	r1, [pc, #88]	; (8005084 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 800502a:	4818      	ldr	r0, [pc, #96]	; (800508c <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 800502c:	f7ff fd94 	bl	8004b58 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d113      	bne.n	800505e <_Z41__static_initialization_and_destruction_0ii+0x292>
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800503c:	4293      	cmp	r3, r2
 800503e:	d10e      	bne.n	800505e <_Z41__static_initialization_and_destruction_0ii+0x292>
 8005040:	4812      	ldr	r0, [pc, #72]	; (800508c <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8005042:	f7fe fc57 	bl	80038f4 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8005046:	4812      	ldr	r0, [pc, #72]	; (8005090 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8005048:	f000 f846 	bl	80050d8 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 800504c:	480e      	ldr	r0, [pc, #56]	; (8005088 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800504e:	f7ff fe9b 	bl	8004d88 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 8005052:	480c      	ldr	r0, [pc, #48]	; (8005084 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8005054:	f7fe fe54 	bl	8003d00 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 8005058:	4809      	ldr	r0, [pc, #36]	; (8005080 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 800505a:	f7fe fa1d 	bl	8003498 <_ZN20STM32TouchControllerD1Ev>
}
 800505e:	bf00      	nop
 8005060:	3748      	adds	r7, #72	; 0x48
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	2000029c 	.word	0x2000029c
 800506c:	200002a0 	.word	0x200002a0
 8005070:	200002a4 	.word	0x200002a4
 8005074:	200002a8 	.word	0x200002a8
 8005078:	200002ac 	.word	0x200002ac
 800507c:	200002b0 	.word	0x200002b0
 8005080:	20022b1c 	.word	0x20022b1c
 8005084:	20022b20 	.word	0x20022b20
 8005088:	20023740 	.word	0x20023740
 800508c:	2002379c 	.word	0x2002379c
 8005090:	20000010 	.word	0x20000010

08005094 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	4a05      	ldr	r2, [pc, #20]	; (80050b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7ff fa3f 	bl	8004528 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4618      	mov	r0, r3
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	0802c210 	.word	0x0802c210

080050b8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7ff ffe7 	bl	8005094 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80050c6:	2110      	movs	r1, #16
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f021 fb44 	bl	8026756 <_ZdlPvj>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4618      	mov	r0, r3
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId TYPOGRAPHY_06 = 7; // verdana_12_4bpp
    static const touchgfx::FontId TYPOGRAPHY_07 = 0; // verdana_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 8;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	4a05      	ldr	r2, [pc, #20]	; (80050f8 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7ff f91d 	bl	8004328 <_ZN8touchgfx12FontProviderD1Ev>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4618      	mov	r0, r3
 80050f2:	3708      	adds	r7, #8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	0802c39c 	.word	0x0802c39c

080050fc <_ZN23ApplicationFontProviderD0Ev>:
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f7ff ffe7 	bl	80050d8 <_ZN23ApplicationFontProviderD1Ev>
 800510a:	2104      	movs	r1, #4
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f021 fb22 	bl	8026756 <_ZdlPvj>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4618      	mov	r0, r3
 8005116:	3708      	adds	r7, #8
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8005124:	2301      	movs	r3, #1
    }
 8005126:	4618      	mov	r0, r3
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8005132:	b480      	push	{r7}
 8005134:	b083      	sub	sp, #12
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 800513a:	230c      	movs	r3, #12
    }
 800513c:	4618      	mov	r0, r3
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	460b      	mov	r3, r1
 8005152:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8005154:	887a      	ldrh	r2, [r7, #2]
 8005156:	4613      	mov	r3, r2
 8005158:	005b      	lsls	r3, r3, #1
 800515a:	4413      	add	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	3308      	adds	r3, #8
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	4413      	add	r3, r2
    }
 8005164:	4618      	mov	r0, r3
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	460b      	mov	r3, r1
 800517a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800517c:	887a      	ldrh	r2, [r7, #2]
 800517e:	4613      	mov	r3, r2
 8005180:	005b      	lsls	r3, r3, #1
 8005182:	4413      	add	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	3308      	adds	r3, #8
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	4413      	add	r3, r2
    }
 800518c:	4618      	mov	r0, r3
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80051a0:	2301      	movs	r3, #1
    }
 80051a2:	4618      	mov	r0, r3
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
	...

080051b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80051b8:	4b03      	ldr	r3, [pc, #12]	; (80051c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv+0x18>)
    }
 80051ba:	4618      	mov	r0, r3
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	000226c0 	.word	0x000226c0

080051cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	460b      	mov	r3, r1
 80051d6:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80051d8:	887b      	ldrh	r3, [r7, #2]
 80051da:	4a06      	ldr	r2, [pc, #24]	; (80051f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt+0x28>)
 80051dc:	fb02 f303 	mul.w	r3, r2, r3
 80051e0:	3308      	adds	r3, #8
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	4413      	add	r3, r2
    }
 80051e6:	4618      	mov	r0, r3
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	000226c0 	.word	0x000226c0

080051f8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	460b      	mov	r3, r1
 8005202:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8005204:	887b      	ldrh	r3, [r7, #2]
 8005206:	4a06      	ldr	r2, [pc, #24]	; (8005220 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt+0x28>)
 8005208:	fb02 f303 	mul.w	r3, r2, r3
 800520c:	3308      	adds	r3, #8
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	4413      	add	r3, r2
    }
 8005212:	4618      	mov	r0, r3
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	000226c0 	.word	0x000226c0

08005224 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800522c:	2301      	movs	r3, #1
    }
 800522e:	4618      	mov	r0, r3
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800523a:	b480      	push	{r7}
 800523c:	b083      	sub	sp, #12
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8005242:	2310      	movs	r3, #16
    }
 8005244:	4618      	mov	r0, r3
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	460b      	mov	r3, r1
 800525a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800525c:	887b      	ldrh	r3, [r7, #2]
 800525e:	011b      	lsls	r3, r3, #4
 8005260:	3308      	adds	r3, #8
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	4413      	add	r3, r2
    }
 8005266:	4618      	mov	r0, r3
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8005272:	b480      	push	{r7}
 8005274:	b083      	sub	sp, #12
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
 800527a:	460b      	mov	r3, r1
 800527c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800527e:	887b      	ldrh	r3, [r7, #2]
 8005280:	011b      	lsls	r3, r3, #4
 8005282:	3308      	adds	r3, #8
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	4413      	add	r3, r2
    }
 8005288:	4618      	mov	r0, r3
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	68d2      	ldr	r2, [r2, #12]
 80052a4:	1052      	asrs	r2, r2, #1
 80052a6:	1899      	adds	r1, r3, r2
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d102      	bne.n	80052ba <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	e00a      	b.n	80052d0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	68d2      	ldr	r2, [r2, #12]
 80052c2:	1052      	asrs	r2, r2, #1
 80052c4:	4413      	add	r3, r2
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	6892      	ldr	r2, [r2, #8]
 80052cc:	4413      	add	r3, r2
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4608      	mov	r0, r1
 80052d2:	4798      	blx	r3
    }
 80052d4:	bf00      	nop
 80052d6:	3708      	adds	r7, #8
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d010      	beq.n	800530e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d107      	bne.n	8005304 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d101      	bne.n	8005304 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8005300:	2301      	movs	r3, #1
 8005302:	e000      	b.n	8005306 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8005304:	2300      	movs	r3, #0
 8005306:	2b01      	cmp	r3, #1
 8005308:	d001      	beq.n	800530e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800530a:	2301      	movs	r3, #1
 800530c:	e000      	b.n	8005310 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800530e:	2300      	movs	r3, #0
    }
 8005310:	4618      	mov	r0, r3
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <_GLOBAL__sub_I_touchgfx_init>:
 800531c:	b580      	push	{r7, lr}
 800531e:	af00      	add	r7, sp, #0
 8005320:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005324:	2001      	movs	r0, #1
 8005326:	f7ff fd51 	bl	8004dcc <_Z41__static_initialization_and_destruction_0ii>
 800532a:	bd80      	pop	{r7, pc}

0800532c <_GLOBAL__sub_D_touchgfx_init>:
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
 8005330:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005334:	2000      	movs	r0, #0
 8005336:	f7ff fd49 	bl	8004dcc <_Z41__static_initialization_and_destruction_0ii>
 800533a:	bd80      	pop	{r7, pc}

0800533c <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	331c      	adds	r3, #28
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	4798      	blx	r3
    }
 8005350:	bf00      	nop
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	460b      	mov	r3, r1
 8005362:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	78fa      	ldrb	r2, [r7, #3]
 8005368:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8005386:	3301      	adds	r3, #1
 8005388:	b2da      	uxtb	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	460b      	mov	r3, r1
 80053a6:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 80053a8:	78fb      	ldrb	r3, [r7, #3]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d002      	beq.n	80053b4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 80053ae:	78fb      	ldrb	r3, [r7, #3]
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d105      	bne.n	80053c0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	78fa      	ldrb	r2, [r7, #3]
 80053b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 80053bc:	2301      	movs	r3, #1
 80053be:	e027      	b.n	8005410 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 80053c0:	78fb      	ldrb	r3, [r7, #3]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d123      	bne.n	800540e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d014      	beq.n	80053f8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	3390      	adds	r3, #144	; 0x90
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	4798      	blx	r3
 80053da:	4603      	mov	r3, r0
 80053dc:	461a      	mov	r2, r3
 80053de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d008      	beq.n	80053f8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80053e6:	4b0c      	ldr	r3, [pc, #48]	; (8005418 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	f083 0301 	eor.w	r3, r3, #1
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d001      	beq.n	80053f8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80053f4:	2301      	movs	r3, #1
 80053f6:	e000      	b.n	80053fa <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 80053f8:	2300      	movs	r3, #0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d005      	beq.n	800540a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	78fa      	ldrb	r2, [r7, #3]
 8005402:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8005406:	2301      	movs	r3, #1
 8005408:	e002      	b.n	8005410 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 800540a:	2300      	movs	r3, #0
 800540c:	e000      	b.n	8005410 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 800540e:	2300      	movs	r3, #0
    }
 8005410:	4618      	mov	r0, r3
 8005412:	3708      	adds	r7, #8
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	2005677e 	.word	0x2005677e

0800541c <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	639a      	str	r2, [r3, #56]	; 0x38
    }
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <__NVIC_EnableIRQ>:
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	4603      	mov	r3, r0
 8005440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005446:	2b00      	cmp	r3, #0
 8005448:	db0b      	blt.n	8005462 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800544a:	79fb      	ldrb	r3, [r7, #7]
 800544c:	f003 021f 	and.w	r2, r3, #31
 8005450:	4907      	ldr	r1, [pc, #28]	; (8005470 <__NVIC_EnableIRQ+0x38>)
 8005452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005456:	095b      	lsrs	r3, r3, #5
 8005458:	2001      	movs	r0, #1
 800545a:	fa00 f202 	lsl.w	r2, r0, r2
 800545e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005462:	bf00      	nop
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	e000e100 	.word	0xe000e100

08005474 <__NVIC_DisableIRQ>:
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	4603      	mov	r3, r0
 800547c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800547e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005482:	2b00      	cmp	r3, #0
 8005484:	db12      	blt.n	80054ac <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005486:	79fb      	ldrb	r3, [r7, #7]
 8005488:	f003 021f 	and.w	r2, r3, #31
 800548c:	490a      	ldr	r1, [pc, #40]	; (80054b8 <__NVIC_DisableIRQ+0x44>)
 800548e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005492:	095b      	lsrs	r3, r3, #5
 8005494:	2001      	movs	r0, #1
 8005496:	fa00 f202 	lsl.w	r2, r0, r2
 800549a:	3320      	adds	r3, #32
 800549c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80054a0:	f3bf 8f4f 	dsb	sy
}
 80054a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80054a6:	f3bf 8f6f 	isb	sy
}
 80054aa:	bf00      	nop
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr
 80054b8:	e000e100 	.word	0xe000e100

080054bc <__NVIC_SetPriority>:
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	4603      	mov	r3, r0
 80054c4:	6039      	str	r1, [r7, #0]
 80054c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	db0a      	blt.n	80054e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	490c      	ldr	r1, [pc, #48]	; (8005508 <__NVIC_SetPriority+0x4c>)
 80054d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054da:	0112      	lsls	r2, r2, #4
 80054dc:	b2d2      	uxtb	r2, r2
 80054de:	440b      	add	r3, r1
 80054e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80054e4:	e00a      	b.n	80054fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	4908      	ldr	r1, [pc, #32]	; (800550c <__NVIC_SetPriority+0x50>)
 80054ec:	79fb      	ldrb	r3, [r7, #7]
 80054ee:	f003 030f 	and.w	r3, r3, #15
 80054f2:	3b04      	subs	r3, #4
 80054f4:	0112      	lsls	r2, r2, #4
 80054f6:	b2d2      	uxtb	r2, r2
 80054f8:	440b      	add	r3, r1
 80054fa:	761a      	strb	r2, [r3, #24]
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	e000e100 	.word	0xe000e100
 800550c:	e000ed00 	.word	0xe000ed00

08005510 <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8005516:	4b21      	ldr	r3, [pc, #132]	; (800559c <SCB_CleanInvalidateDCache+0x8c>)
 8005518:	2200      	movs	r2, #0
 800551a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800551e:	f3bf 8f4f 	dsb	sy
}
 8005522:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8005524:	4b1d      	ldr	r3, [pc, #116]	; (800559c <SCB_CleanInvalidateDCache+0x8c>)
 8005526:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800552a:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	0b5b      	lsrs	r3, r3, #13
 8005530:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005534:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	08db      	lsrs	r3, r3, #3
 800553a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800553e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	015a      	lsls	r2, r3, #5
 8005544:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8005548:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800554e:	4913      	ldr	r1, [pc, #76]	; (800559c <SCB_CleanInvalidateDCache+0x8c>)
 8005550:	4313      	orrs	r3, r2
 8005552:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	1e5a      	subs	r2, r3, #1
 800555a:	60ba      	str	r2, [r7, #8]
 800555c:	2b00      	cmp	r3, #0
 800555e:	bf14      	ite	ne
 8005560:	2301      	movne	r3, #1
 8005562:	2300      	moveq	r3, #0
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d000      	beq.n	800556c <SCB_CleanInvalidateDCache+0x5c>
      do {
 800556a:	e7e9      	b.n	8005540 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	1e5a      	subs	r2, r3, #1
 8005570:	60fa      	str	r2, [r7, #12]
 8005572:	2b00      	cmp	r3, #0
 8005574:	bf14      	ite	ne
 8005576:	2301      	movne	r3, #1
 8005578:	2300      	moveq	r3, #0
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b00      	cmp	r3, #0
 800557e:	d000      	beq.n	8005582 <SCB_CleanInvalidateDCache+0x72>
    do {
 8005580:	e7d9      	b.n	8005536 <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8005582:	f3bf 8f4f 	dsb	sy
}
 8005586:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005588:	f3bf 8f6f 	isb	sy
}
 800558c:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800558e:	bf00      	nop
 8005590:	3714      	adds	r7, #20
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	e000ed00 	.word	0xe000ed00

080055a0 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 80055a0:	b5b0      	push	{r4, r5, r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f010 fc0d 	bl	8015dca <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80055b0:	687d      	ldr	r5, [r7, #4]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	335c      	adds	r3, #92	; 0x5c
 80055b8:	681c      	ldr	r4, [r3, #0]
 80055ba:	f014 f8fd 	bl	80197b8 <_ZN8touchgfx11Application11getInstanceEv>
 80055be:	4603      	mov	r3, r0
 80055c0:	4619      	mov	r1, r3
 80055c2:	4628      	mov	r0, r5
 80055c4:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	490d      	ldr	r1, [pc, #52]	; (8005600 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7ff ff26 	bl	800541c <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2101      	movs	r1, #1
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7ff fee1 	bl	800539c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	3380      	adds	r3, #128	; 0x80
 80055e2:	681c      	ldr	r4, [r3, #0]
 80055e4:	2300      	movs	r3, #0
 80055e6:	2200      	movs	r2, #0
 80055e8:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80055ec:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2101      	movs	r1, #1
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7ff feb0 	bl	8005358 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 80055f8:	bf00      	nop
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bdb0      	pop	{r4, r5, r7, pc}
 8005600:	08003a55 	.word	0x08003a55

08005604 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 800560c:	2109      	movs	r1, #9
 800560e:	205a      	movs	r0, #90	; 0x5a
 8005610:	f7ff ff54 	bl	80054bc <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8005614:	2109      	movs	r1, #9
 8005616:	2058      	movs	r0, #88	; 0x58
 8005618:	f7ff ff50 	bl	80054bc <__NVIC_SetPriority>
}
 800561c:	bf00      	nop
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 800562c:	205a      	movs	r0, #90	; 0x5a
 800562e:	f7ff ff03 	bl	8005438 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8005632:	2058      	movs	r0, #88	; 0x58
 8005634:	f7ff ff00 	bl	8005438 <__NVIC_EnableIRQ>
}
 8005638:	bf00      	nop
 800563a:	3708      	adds	r7, #8
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8005648:	205a      	movs	r0, #90	; 0x5a
 800564a:	f7ff ff13 	bl	8005474 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 800564e:	2058      	movs	r0, #88	; 0x58
 8005650:	f7ff ff10 	bl	8005474 <__NVIC_DisableIRQ>
}
 8005654:	bf00      	nop
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8005664:	4b11      	ldr	r3, [pc, #68]	; (80056ac <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	b29b      	uxth	r3, r3
 800566a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800566e:	b29b      	uxth	r3, r3
 8005670:	3b01      	subs	r3, #1
 8005672:	b29a      	uxth	r2, r3
 8005674:	4b0e      	ldr	r3, [pc, #56]	; (80056b0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8005676:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8005678:	4b0c      	ldr	r3, [pc, #48]	; (80056ac <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	b29b      	uxth	r3, r3
 800567e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005682:	b29b      	uxth	r3, r3
 8005684:	3b01      	subs	r3, #1
 8005686:	b29a      	uxth	r2, r3
 8005688:	4b0a      	ldr	r3, [pc, #40]	; (80056b4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 800568a:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 800568c:	4b08      	ldr	r3, [pc, #32]	; (80056b0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800568e:	881a      	ldrh	r2, [r3, #0]
 8005690:	4b06      	ldr	r3, [pc, #24]	; (80056ac <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8005692:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8005694:	4b05      	ldr	r3, [pc, #20]	; (80056ac <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8005696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005698:	4a04      	ldr	r2, [pc, #16]	; (80056ac <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800569a:	f043 0301 	orr.w	r3, r3, #1
 800569e:	6353      	str	r3, [r2, #52]	; 0x34
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	40016800 	.word	0x40016800
 80056b0:	20023830 	.word	0x20023830
 80056b4:	20023832 	.word	0x20023832

080056b8 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f010 fb68 	bl	8015d98 <_ZN8touchgfx3HAL10beginFrameEv>
 80056c8:	4603      	mov	r3, r0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b082      	sub	sp, #8
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4618      	mov	r0, r3
 80056de:	f010 fb67 	bl	8015db0 <_ZN8touchgfx3HAL8endFrameEv>
}
 80056e2:	bf00      	nop
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
	...

080056ec <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80056f4:	4b03      	ldr	r3, [pc, #12]	; (8005704 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 80056f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	40016884 	.word	0x40016884

08005708 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8005712:	4a06      	ldr	r2, [pc, #24]	; (800572c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8005718:	4b05      	ldr	r3, [pc, #20]	; (8005730 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 800571a:	2201      	movs	r2, #1
 800571c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800571e:	bf00      	nop
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	40016884 	.word	0x40016884
 8005730:	40016800 	.word	0x40016800

08005734 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6839      	ldr	r1, [r7, #0]
 8005742:	4618      	mov	r0, r3
 8005744:	f010 faf5 	bl	8015d32 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8005748:	4b08      	ldr	r3, [pc, #32]	; (800576c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x38>)
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005750:	2b00      	cmp	r3, #0
 8005752:	bf14      	ite	ne
 8005754:	2301      	movne	r3, #1
 8005756:	2300      	moveq	r3, #0
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d001      	beq.n	8005762 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x2e>
    {
        SCB_CleanInvalidateDCache();
 800575e:	f7ff fed7 	bl	8005510 <SCB_CleanInvalidateDCache>
    }
}
 8005762:	bf00      	nop
 8005764:	3708      	adds	r7, #8
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	e000ed00 	.word	0xe000ed00

08005770 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
 800577c:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	68b9      	ldr	r1, [r7, #8]
 8005786:	f010 fc3c 	bl	8016002 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 800578a:	4603      	mov	r3, r0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 800579c:	4b0d      	ldr	r3, [pc, #52]	; (80057d4 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 800579e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a0:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 80057a2:	4b0c      	ldr	r3, [pc, #48]	; (80057d4 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	3301      	adds	r3, #1
 80057b0:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 80057b2:	89fa      	ldrh	r2, [r7, #14]
 80057b4:	89bb      	ldrh	r3, [r7, #12]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d304      	bcc.n	80057c4 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 80057ba:	89fa      	ldrh	r2, [r7, #14]
 80057bc:	89bb      	ldrh	r3, [r7, #12]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	e000      	b.n	80057c6 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	40016800 	.word	0x40016800

080057d8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80057e0:	4b08      	ldr	r3, [pc, #32]	; (8005804 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x2c>)
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	bf14      	ite	ne
 80057ec:	2301      	movne	r3, #1
 80057ee:	2300      	moveq	r3, #0
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d001      	beq.n	80057fa <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 80057f6:	f7ff fe8b 	bl	8005510 <SCB_CleanInvalidateDCache>
    }
}
 80057fa:	bf00      	nop
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	e000ed00 	.word	0xe000ed00

08005808 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8005810:	4b08      	ldr	r3, [pc, #32]	; (8005834 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>)
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005818:	2b00      	cmp	r3, #0
 800581a:	bf14      	ite	ne
 800581c:	2301      	movne	r3, #1
 800581e:	2300      	moveq	r3, #0
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 8005826:	f7ff fe73 	bl	8005510 <SCB_CleanInvalidateDCache>
    }
}
 800582a:	bf00      	nop
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	e000ed00 	.word	0xe000ed00

08005838 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8005840:	4b1a      	ldr	r3, [pc, #104]	; (80058ac <HAL_LTDC_LineEventCallback+0x74>)
 8005842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005844:	4a1a      	ldr	r2, [pc, #104]	; (80058b0 <HAL_LTDC_LineEventCallback+0x78>)
 8005846:	8812      	ldrh	r2, [r2, #0]
 8005848:	4293      	cmp	r3, r2
 800584a:	bf0c      	ite	eq
 800584c:	2301      	moveq	r3, #1
 800584e:	2300      	movne	r3, #0
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d017      	beq.n	8005886 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8005856:	4b17      	ldr	r3, [pc, #92]	; (80058b4 <HAL_LTDC_LineEventCallback+0x7c>)
 8005858:	881b      	ldrh	r3, [r3, #0]
 800585a:	4619      	mov	r1, r3
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f008 f9c9 	bl	800dbf4 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8005862:	f7fe f9e9 	bl	8003c38 <_ZN8touchgfx3HAL11getInstanceEv>
 8005866:	4603      	mov	r3, r0
 8005868:	4618      	mov	r0, r3
 800586a:	f7ff fd85 	bl	8005378 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 800586e:	f7fe f8c9 	bl	8003a04 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8005872:	f7fe f9e1 	bl	8003c38 <_ZN8touchgfx3HAL11getInstanceEv>
 8005876:	4603      	mov	r3, r0
 8005878:	4618      	mov	r0, r3
 800587a:	f011 f883 	bl	8016984 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 800587e:	2000      	movs	r0, #0
 8005880:	f7fd fe2c 	bl	80034dc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8005884:	e00e      	b.n	80058a4 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8005886:	4b0a      	ldr	r3, [pc, #40]	; (80058b0 <HAL_LTDC_LineEventCallback+0x78>)
 8005888:	881b      	ldrh	r3, [r3, #0]
 800588a:	4619      	mov	r1, r3
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f008 f9b1 	bl	800dbf4 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8005892:	2000      	movs	r0, #0
 8005894:	f7fd fe2d 	bl	80034f2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8005898:	f7fe f9ce 	bl	8003c38 <_ZN8touchgfx3HAL11getInstanceEv>
 800589c:	4603      	mov	r3, r0
 800589e:	4618      	mov	r0, r3
 80058a0:	f7ff fd4c 	bl	800533c <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 80058a4:	bf00      	nop
 80058a6:	3708      	adds	r7, #8
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	40016800 	.word	0x40016800
 80058b0:	20023830 	.word	0x20023830
 80058b4:	20023832 	.word	0x20023832

080058b8 <_Z41__static_initialization_and_destruction_0ii>:
}
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b092      	sub	sp, #72	; 0x48
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	f040 8114 	bne.w	8005af2 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058d0:	4293      	cmp	r3, r2
 80058d2:	f040 810e 	bne.w	8005af2 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 80058d6:	2300      	movs	r3, #0
 80058d8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80058dc:	2300      	movs	r3, #0
 80058de:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80058e2:	2300      	movs	r3, #0
 80058e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80058e8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80058ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80058f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80058f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80058f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058fc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005900:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005904:	041b      	lsls	r3, r3, #16
 8005906:	461a      	mov	r2, r3
 8005908:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800590c:	021b      	lsls	r3, r3, #8
 800590e:	431a      	orrs	r2, r3
 8005910:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005914:	4313      	orrs	r3, r2
 8005916:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800591a:	f107 0320 	add.w	r3, r7, #32
 800591e:	4611      	mov	r1, r2
 8005920:	4618      	mov	r0, r3
 8005922:	f7fe fccb 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 8005926:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 8005928:	bf00      	nop
 800592a:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 800592c:	4b73      	ldr	r3, [pc, #460]	; (8005afc <_Z41__static_initialization_and_destruction_0ii+0x244>)
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	23ff      	movs	r3, #255	; 0xff
 8005932:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005936:	2300      	movs	r3, #0
 8005938:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800593c:	2300      	movs	r3, #0
 800593e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8005942:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005946:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800594a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800594e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005952:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005956:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800595a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800595e:	041b      	lsls	r3, r3, #16
 8005960:	461a      	mov	r2, r3
 8005962:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005966:	021b      	lsls	r3, r3, #8
 8005968:	431a      	orrs	r2, r3
 800596a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800596e:	4313      	orrs	r3, r2
 8005970:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005974:	f107 031c 	add.w	r3, r7, #28
 8005978:	4611      	mov	r1, r2
 800597a:	4618      	mov	r0, r3
 800597c:	f7fe fc9e 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 8005980:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 8005982:	bf00      	nop
 8005984:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 8005986:	4b5e      	ldr	r3, [pc, #376]	; (8005b00 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8005988:	601a      	str	r2, [r3, #0]
 800598a:	2300      	movs	r3, #0
 800598c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8005990:	23c0      	movs	r3, #192	; 0xc0
 8005992:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8005996:	2300      	movs	r3, #0
 8005998:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800599c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80059a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80059a4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80059a8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80059ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80059b0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80059b4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80059b8:	041b      	lsls	r3, r3, #16
 80059ba:	461a      	mov	r2, r3
 80059bc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80059c0:	021b      	lsls	r3, r3, #8
 80059c2:	431a      	orrs	r2, r3
 80059c4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80059c8:	4313      	orrs	r3, r2
 80059ca:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80059ce:	f107 0318 	add.w	r3, r7, #24
 80059d2:	4611      	mov	r1, r2
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7fe fc71 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 80059da:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 80059dc:	bf00      	nop
 80059de:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 192, 0);
 80059e0:	4b48      	ldr	r3, [pc, #288]	; (8005b04 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 80059e2:	601a      	str	r2, [r3, #0]
 80059e4:	2300      	movs	r3, #0
 80059e6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80059ea:	2300      	movs	r3, #0
 80059ec:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 80059f0:	23c0      	movs	r3, #192	; 0xc0
 80059f2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 80059f6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80059fa:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 80059fe:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005a02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005a06:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8005a0a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005a0e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005a12:	041b      	lsls	r3, r3, #16
 8005a14:	461a      	mov	r2, r3
 8005a16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a1a:	021b      	lsls	r3, r3, #8
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005a22:	4313      	orrs	r3, r2
 8005a24:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005a28:	f107 0314 	add.w	r3, r7, #20
 8005a2c:	4611      	mov	r1, r2
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7fe fc44 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 8005a34:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 8005a36:	bf00      	nop
 8005a38:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 192);
 8005a3a:	4b33      	ldr	r3, [pc, #204]	; (8005b08 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8005a3c:	601a      	str	r2, [r3, #0]
 8005a3e:	23f7      	movs	r3, #247	; 0xf7
 8005a40:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8005a44:	234c      	movs	r3, #76	; 0x4c
 8005a46:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005a50:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8005a54:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8005a58:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005a5c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8005a60:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005a64:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005a68:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005a6c:	041b      	lsls	r3, r3, #16
 8005a6e:	461a      	mov	r2, r3
 8005a70:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005a74:	021b      	lsls	r3, r3, #8
 8005a76:	431a      	orrs	r2, r3
 8005a78:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005a82:	f107 0310 	add.w	r3, r7, #16
 8005a86:	4611      	mov	r1, r2
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7fe fc17 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 8005a8e:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 8005a90:	bf00      	nop
 8005a92:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8005a94:	4b1d      	ldr	r3, [pc, #116]	; (8005b0c <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8005a96:	601a      	str	r2, [r3, #0]
 8005a98:	23f7      	movs	r3, #247	; 0xf7
 8005a9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005a9e:	23d2      	movs	r3, #210	; 0xd2
 8005aa0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8005aaa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005aae:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8005ab2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aba:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005abe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005ac2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8005ac6:	041b      	lsls	r3, r3, #16
 8005ac8:	461a      	mov	r2, r3
 8005aca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005ace:	021b      	lsls	r3, r3, #8
 8005ad0:	431a      	orrs	r2, r3
 8005ad2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005adc:	f107 030c 	add.w	r3, r7, #12
 8005ae0:	4611      	mov	r1, r2
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7fe fbea 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 8005aea:	bf00      	nop
 8005aec:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 8005aee:	4b08      	ldr	r3, [pc, #32]	; (8005b10 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	bf00      	nop
 8005af4:	3748      	adds	r7, #72	; 0x48
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	20023818 	.word	0x20023818
 8005b00:	2002381c 	.word	0x2002381c
 8005b04:	20023820 	.word	0x20023820
 8005b08:	20023824 	.word	0x20023824
 8005b0c:	20023828 	.word	0x20023828
 8005b10:	2002382c 	.word	0x2002382c

08005b14 <_GLOBAL__sub_I__ZN20TouchGFXGeneratedHAL10initializeEv>:
 8005b14:	b580      	push	{r7, lr}
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005b1c:	2001      	movs	r0, #1
 8005b1e:	f7ff fecb 	bl	80058b8 <_Z41__static_initialization_and_destruction_0ii>
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8005b30:	887b      	ldrh	r3, [r7, #2]
 8005b32:	2b0a      	cmp	r3, #10
 8005b34:	d84f      	bhi.n	8005bd6 <_ZN23ApplicationFontProvider7getFontEt+0xb2>
 8005b36:	a201      	add	r2, pc, #4	; (adr r2, 8005b3c <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 8005b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3c:	08005b69 	.word	0x08005b69
 8005b40:	08005b73 	.word	0x08005b73
 8005b44:	08005b7d 	.word	0x08005b7d
 8005b48:	08005b87 	.word	0x08005b87
 8005b4c:	08005b91 	.word	0x08005b91
 8005b50:	08005b9b 	.word	0x08005b9b
 8005b54:	08005ba5 	.word	0x08005ba5
 8005b58:	08005baf 	.word	0x08005baf
 8005b5c:	08005bb9 	.word	0x08005bb9
 8005b60:	08005bc3 	.word	0x08005bc3
 8005b64:	08005bcd 	.word	0x08005bcd
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8005b68:	f003 fa68 	bl	800903c <_ZN17TypedTextDatabase8getFontsEv>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	e032      	b.n	8005bd8 <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8005b72:	f003 fa63 	bl	800903c <_ZN17TypedTextDatabase8getFontsEv>
 8005b76:	4603      	mov	r3, r0
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	e02d      	b.n	8005bd8 <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8005b7c:	f003 fa5e 	bl	800903c <_ZN17TypedTextDatabase8getFontsEv>
 8005b80:	4603      	mov	r3, r0
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	e028      	b.n	8005bd8 <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_00:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8005b86:	f003 fa59 	bl	800903c <_ZN17TypedTextDatabase8getFontsEv>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	e023      	b.n	8005bd8 <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_01:
        // swisop3_300_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8005b90:	f003 fa54 	bl	800903c <_ZN17TypedTextDatabase8getFontsEv>
 8005b94:	4603      	mov	r3, r0
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	e01e      	b.n	8005bd8 <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_02:
        // JetBrainsMono_Regular_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 8005b9a:	f003 fa4f 	bl	800903c <_ZN17TypedTextDatabase8getFontsEv>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	e019      	b.n	8005bd8 <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_03:
        // JetBrainsMono_Regular_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 8005ba4:	f003 fa4a 	bl	800903c <_ZN17TypedTextDatabase8getFontsEv>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	695b      	ldr	r3, [r3, #20]
 8005bac:	e014      	b.n	8005bd8 <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_04:
        // swisop3_50_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 8005bae:	f003 fa45 	bl	800903c <_ZN17TypedTextDatabase8getFontsEv>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	e00f      	b.n	8005bd8 <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_05:
        // JetBrainsMono_Regular_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 8005bb8:	f003 fa40 	bl	800903c <_ZN17TypedTextDatabase8getFontsEv>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	e00a      	b.n	8005bd8 <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_06:
        // verdana_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[7]);
 8005bc2:	f003 fa3b 	bl	800903c <_ZN17TypedTextDatabase8getFontsEv>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	e005      	b.n	8005bd8 <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_07:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8005bcc:	f003 fa36 	bl	800903c <_ZN17TypedTextDatabase8getFontsEv>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	e000      	b.n	8005bd8 <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    default:
        return 0;
 8005bd6:	2300      	movs	r3, #0
    }
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3708      	adds	r7, #8
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8005be0:	b480      	push	{r7}
 8005be2:	af00      	add	r7, sp, #0
    return bitmap_database;
 8005be4:	4b02      	ldr	r3, [pc, #8]	; (8005bf0 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	0802c3a8 	.word	0x0802c3a8

08005bf4 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8005bf8:	2301      	movs	r3, #1
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
    {
 8005c0c:	4a04      	ldr	r2, [pc, #16]	; (8005c20 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	601a      	str	r2, [r3, #0]
    }
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4618      	mov	r0, r3
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr
 8005c20:	0802c574 	.word	0x0802c574

08005c24 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
    }
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f7ff ffe9 	bl	8005c04 <_ZN8touchgfx4FontD1Ev>
 8005c32:	2110      	movs	r1, #16
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f020 fd8e 	bl	8026756 <_ZdlPvj>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8005c44:	b590      	push	{r4, r7, lr}
 8005c46:	b087      	sub	sp, #28
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8005c50:	887b      	ldrh	r3, [r7, #2]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d101      	bne.n	8005c5a <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8005c56:	2300      	movs	r3, #0
 8005c58:	e010      	b.n	8005c7c <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	3308      	adds	r3, #8
 8005c68:	681c      	ldr	r4, [r3, #0]
 8005c6a:	f107 030f 	add.w	r3, r7, #15
 8005c6e:	f107 0210 	add.w	r2, r7, #16
 8005c72:	8879      	ldrh	r1, [r7, #2]
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	47a0      	blx	r4
 8005c78:	6178      	str	r0, [r7, #20]
        return glyph;
 8005c7a:	697b      	ldr	r3, [r7, #20]
    }
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	371c      	adds	r7, #28
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd90      	pop	{r4, r7, pc}

08005c84 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	895b      	ldrh	r3, [r3, #10]
    }
 8005c90:	4618      	mov	r0, r3
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	899b      	ldrh	r3, [r3, #12]
    }
 8005ca8:	4618      	mov	r0, r3
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	889b      	ldrh	r3, [r3, #4]
    }
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	889a      	ldrh	r2, [r3, #4]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	799b      	ldrb	r3, [r3, #6]
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	4413      	add	r3, r2
 8005ce0:	b29b      	uxth	r3, r3
    }
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	79db      	ldrb	r3, [r3, #7]
 8005cfa:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8005cfe:	b2db      	uxtb	r3, r3
    }
 8005d00:	4618      	mov	r0, r3
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	79db      	ldrb	r3, [r3, #7]
 8005d18:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005d1c:	b2db      	uxtb	r3, r3
    }
 8005d1e:	4618      	mov	r0, r3
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
	...

08005d2c <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	4a05      	ldr	r2, [pc, #20]	; (8005d4c <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	601a      	str	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7ff ff61 	bl	8005c04 <_ZN8touchgfx4FontD1Ev>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4618      	mov	r0, r3
 8005d46:	3708      	adds	r7, #8
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	0802dea0 	.word	0x0802dea0

08005d50 <_ZN8touchgfx9ConstFontD0Ev>:
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f7ff ffe7 	bl	8005d2c <_ZN8touchgfx9ConstFontD1Ev>
 8005d5e:	2118      	movs	r1, #24
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f020 fcf8 	bl	8026756 <_ZdlPvj>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3708      	adds	r7, #8
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	4a05      	ldr	r2, [pc, #20]	; (8005d90 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	601a      	str	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7ff ffd3 	bl	8005d2c <_ZN8touchgfx9ConstFontD1Ev>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3708      	adds	r7, #8
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	0802c480 	.word	0x0802c480

08005d94 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f7ff ffe7 	bl	8005d70 <_ZN8touchgfx13GeneratedFontD1Ev>
 8005da2:	2128      	movs	r1, #40	; 0x28
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f020 fcd6 	bl	8026756 <_ZdlPvj>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4618      	mov	r0, r3
 8005dae:	3708      	adds	r7, #8
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8005dbc:	4a14      	ldr	r2, [pc, #80]	; (8005e10 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	3304      	adds	r3, #4
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7fe fa87 	bl	80042da <_ZN8touchgfx4RectC1Ev>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	330c      	adds	r3, #12
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7fe fa82 	bl	80042da <_ZN8touchgfx4RectC1Ev>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	615a      	str	r2, [r3, #20]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	619a      	str	r2, [r3, #24]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	61da      	str	r2, [r3, #28]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	841a      	strh	r2, [r3, #32]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	845a      	strh	r2, [r3, #34]	; 0x22
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4618      	mov	r0, r3
 8005e08:	3708      	adds	r7, #8
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	0802de3c 	.word	0x0802de3c

08005e14 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
    {
 8005e1c:	4a04      	ldr	r2, [pc, #16]	; (8005e30 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	601a      	str	r2, [r3, #0]
    }
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4618      	mov	r0, r3
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr
 8005e30:	0802de3c 	.word	0x0802de3c

08005e34 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
    }
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7ff ffe9 	bl	8005e14 <_ZN8touchgfx8DrawableD1Ev>
 8005e42:	2128      	movs	r1, #40	; 0x28
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f020 fc86 	bl	8026756 <_ZdlPvj>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3708      	adds	r7, #8
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8005e5c:	2300      	movs	r3, #0
    }
 8005e5e:	4618      	mov	r0, r3
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b084      	sub	sp, #16
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	60f8      	str	r0, [r7, #12]
 8005e72:	4608      	mov	r0, r1
 8005e74:	4611      	mov	r1, r2
 8005e76:	461a      	mov	r2, r3
 8005e78:	4603      	mov	r3, r0
 8005e7a:	817b      	strh	r3, [r7, #10]
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	813b      	strh	r3, [r7, #8]
 8005e80:	4613      	mov	r3, r2
 8005e82:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8005e84:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005e88:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f000 f82a 	bl	8005ee8 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8005e94:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005e98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f000 f87e 	bl	8005fa0 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8005ea4:	bf00      	nop
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	887a      	ldrh	r2, [r7, #2]
 8005ebc:	809a      	strh	r2, [r3, #4]
    }
 8005ebe:	bf00      	nop
 8005ec0:	370c      	adds	r7, #12
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8005eca:	b480      	push	{r7}
 8005ecc:	b083      	sub	sp, #12
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	887a      	ldrh	r2, [r7, #2]
 8005eda:	80da      	strh	r2, [r3, #6]
    }
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	807b      	strh	r3, [r7, #2]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	332c      	adds	r3, #44	; 0x2c
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005f04:	4611      	mov	r1, r2
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	4798      	blx	r3
        setY(y);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	3330      	adds	r3, #48	; 0x30
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005f16:	4611      	mov	r1, r2
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	4798      	blx	r3
    }
 8005f1c:	bf00      	nop
 8005f1e:	3708      	adds	r7, #8
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	887a      	ldrh	r2, [r7, #2]
 8005f34:	811a      	strh	r2, [r3, #8]
    }
 8005f36:	bf00      	nop
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8005f42:	b480      	push	{r7}
 8005f44:	b083      	sub	sp, #12
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	887a      	ldrh	r2, [r7, #2]
 8005f52:	815a      	strh	r2, [r3, #10]
    }
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
    {
    }
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
    {
    }
 8005f7e:	bf00      	nop
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8005f8a:	b480      	push	{r7}
 8005f8c:	b083      	sub	sp, #12
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	6039      	str	r1, [r7, #0]
    {
    }
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	460b      	mov	r3, r1
 8005faa:	807b      	strh	r3, [r7, #2]
 8005fac:	4613      	mov	r3, r2
 8005fae:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	3334      	adds	r3, #52	; 0x34
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005fbc:	4611      	mov	r1, r2
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	4798      	blx	r3
        setHeight(height);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	3338      	adds	r3, #56	; 0x38
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005fce:	4611      	mov	r1, r2
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	4798      	blx	r3
    }
 8005fd4:	bf00      	nop
 8005fd6:	3708      	adds	r7, #8
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
    {
    }
 8005fe6:	bf00      	nop
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr

08005ff2 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8005ff2:	b480      	push	{r7}
 8005ff4:	b083      	sub	sp, #12
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
    {
    }
 8005ffa:	bf00      	nop
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8006006:	b480      	push	{r7}
 8006008:	b083      	sub	sp, #12
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8006014:	4618      	mov	r0, r3
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800602e:	4618      	mov	r0, r3
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800603a:	b580      	push	{r7, lr}
 800603c:	b082      	sub	sp, #8
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
 8006042:	460b      	mov	r3, r1
 8006044:	807b      	strh	r3, [r7, #2]
 8006046:	4613      	mov	r3, r2
 8006048:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	3350      	adds	r3, #80	; 0x50
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	8879      	ldrh	r1, [r7, #2]
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800605a:	b292      	uxth	r2, r2
 800605c:	1a8a      	subs	r2, r1, r2
 800605e:	b292      	uxth	r2, r2
 8006060:	b210      	sxth	r0, r2
 8006062:	8839      	ldrh	r1, [r7, #0]
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800606a:	b292      	uxth	r2, r2
 800606c:	1a8a      	subs	r2, r1, r2
 800606e:	b292      	uxth	r2, r2
 8006070:	b212      	sxth	r2, r2
 8006072:	4601      	mov	r1, r0
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	4798      	blx	r3
    }
 8006078:	bf00      	nop
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800608e:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006096:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800609e:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f7ff ffe1 	bl	8006080 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	601a      	str	r2, [r3, #0]
    }
 80060cc:	bf00      	nop
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4618      	mov	r0, r3
 80060e0:	f7ff fe68 	bl	8005db4 <_ZN8touchgfx8DrawableC1Ev>
 80060e4:	4a05      	ldr	r2, [pc, #20]	; (80060fc <_ZN8touchgfx9ContainerC1Ev+0x28>)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	601a      	str	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4618      	mov	r0, r3
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	0802cb54 	.word	0x0802cb54

08006100 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
    {
 8006108:	4a06      	ldr	r2, [pc, #24]	; (8006124 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	601a      	str	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	3304      	adds	r3, #4
 8006112:	4618      	mov	r0, r3
 8006114:	f000 f926 	bl	8006364 <_ZN8touchgfx9ContainerD1Ev>
    }
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4618      	mov	r0, r3
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	0802df34 	.word	0x0802df34

08006128 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
    }
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7ff ffe5 	bl	8006100 <_ZN8touchgfx6ScreenD1Ev>
 8006136:	213c      	movs	r1, #60	; 0x3c
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f020 fb0c 	bl	8026756 <_ZdlPvj>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4618      	mov	r0, r3
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
    {
    }
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
    {
    }
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
    {
    }
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
    {
    }
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	460b      	mov	r3, r1
 80061a2:	70fb      	strb	r3, [r7, #3]
    {
    }
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	3304      	adds	r3, #4
 80061be:	6839      	ldr	r1, [r7, #0]
 80061c0:	4618      	mov	r0, r3
 80061c2:	f00f fc6b 	bl	8015a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80061c6:	bf00      	nop
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b084      	sub	sp, #16
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	60f8      	str	r0, [r7, #12]
 80061d6:	607b      	str	r3, [r7, #4]
 80061d8:	460b      	mov	r3, r1
 80061da:	817b      	strh	r3, [r7, #10]
 80061dc:	4613      	mov	r3, r2
 80061de:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7ff ff0f 	bl	8006006 <_ZNK8touchgfx8Drawable9isVisibleEv>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d008      	beq.n	8006200 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7ff ff15 	bl	8006020 <_ZNK8touchgfx8Drawable11isTouchableEv>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d001      	beq.n	8006200 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80061fc:	2301      	movs	r3, #1
 80061fe:	e000      	b.n	8006202 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8006200:	2300      	movs	r3, #0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d002      	beq.n	800620c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	601a      	str	r2, [r3, #0]
        }
    }
 800620c:	bf00      	nop
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4618      	mov	r0, r3
 8006220:	f7ff fdc8 	bl	8005db4 <_ZN8touchgfx8DrawableC1Ev>
 8006224:	4a03      	ldr	r2, [pc, #12]	; (8006234 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	601a      	str	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4618      	mov	r0, r3
 800622e:	3708      	adds	r7, #8
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	0802c3d4 	.word	0x0802c3d4

08006238 <_ZN8touchgfx6WidgetD1Ev>:
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	4a05      	ldr	r2, [pc, #20]	; (8006258 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	601a      	str	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4618      	mov	r0, r3
 800624a:	f7ff fde3 	bl	8005e14 <_ZN8touchgfx8DrawableD1Ev>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4618      	mov	r0, r3
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	0802c3d4 	.word	0x0802c3d4

0800625c <_ZN8touchgfx6WidgetD0Ev>:
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f7ff ffe7 	bl	8006238 <_ZN8touchgfx6WidgetD1Ev>
 800626a:	2128      	movs	r1, #40	; 0x28
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f020 fa72 	bl	8026756 <_ZdlPvj>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4618      	mov	r0, r3
 8006276:	3708      	adds	r7, #8
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4618      	mov	r0, r3
 8006288:	2326      	movs	r3, #38	; 0x26
 800628a:	461a      	mov	r2, r3
 800628c:	2100      	movs	r1, #0
 800628e:	f020 fc23 	bl	8026ad8 <memset>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4618      	mov	r0, r3
 8006296:	f7ff ffbd 	bl	8006214 <_ZN8touchgfx6WidgetC1Ev>
 800629a:	4a09      	ldr	r2, [pc, #36]	; (80062c0 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	601a      	str	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	22ff      	movs	r2, #255	; 0xff
 80062a4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	3328      	adds	r3, #40	; 0x28
 80062ac:	2100      	movs	r1, #0
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7fe f804 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
    {
    }
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4618      	mov	r0, r3
 80062b8:	3708      	adds	r7, #8
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	0802d9f0 	.word	0x0802d9f0

080062c4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	683a      	ldr	r2, [r7, #0]
 80062d2:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	4a05      	ldr	r2, [pc, #20]	; (8006300 <_ZN8touchgfx3BoxD1Ev+0x20>)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	601a      	str	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4618      	mov	r0, r3
 80062f2:	f7ff ffa1 	bl	8006238 <_ZN8touchgfx6WidgetD1Ev>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4618      	mov	r0, r3
 80062fa:	3708      	adds	r7, #8
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	0802d9f0 	.word	0x0802d9f0

08006304 <_ZN8touchgfx3BoxD0Ev>:
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f7ff ffe7 	bl	80062e0 <_ZN8touchgfx3BoxD1Ev>
 8006312:	212c      	movs	r1, #44	; 0x2c
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f020 fa1e 	bl	8026756 <_ZdlPvj>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4618      	mov	r0, r3
 800631e:	3708      	adds	r7, #8
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
    {
 800632c:	4a04      	ldr	r2, [pc, #16]	; (8006340 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	601a      	str	r2, [r3, #0]
    }
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4618      	mov	r0, r3
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr
 8006340:	0802c3c4 	.word	0x0802c3c4

08006344 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
    }
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f7ff ffe9 	bl	8006324 <_ZN8touchgfx9TypedTextD1Ev>
 8006352:	2108      	movs	r1, #8
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f020 f9fe 	bl	8026756 <_ZdlPvj>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4618      	mov	r0, r3
 800635e:	3708      	adds	r7, #8
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	4a05      	ldr	r2, [pc, #20]	; (8006384 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4618      	mov	r0, r3
 8006376:	f7ff fd4d 	bl	8005e14 <_ZN8touchgfx8DrawableD1Ev>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4618      	mov	r0, r3
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	0802cb54 	.word	0x0802cb54

08006388 <_ZN8touchgfx9ContainerD0Ev>:
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f7ff ffe7 	bl	8006364 <_ZN8touchgfx9ContainerD1Ev>
 8006396:	212c      	movs	r1, #44	; 0x2c
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f020 f9dc 	bl	8026756 <_ZdlPvj>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4618      	mov	r0, r3
 80063a2:	3708      	adds	r7, #8
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <_ZN8touchgfx13BoxWithBorderD1Ev>:
/**
 * The BoxWithBorder class is used to create objects that can draw a box with a border on the
 * display. The width of the border can be specified. If the border width is 0 the
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	4a05      	ldr	r2, [pc, #20]	; (80063c8 <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	601a      	str	r2, [r3, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7ff ff91 	bl	80062e0 <_ZN8touchgfx3BoxD1Ev>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4618      	mov	r0, r3
 80063c2:	3708      	adds	r7, #8
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	0802dafc 	.word	0x0802dafc

080063cc <_ZN8touchgfx13BoxWithBorderD0Ev>:
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f7ff ffe7 	bl	80063a8 <_ZN8touchgfx13BoxWithBorderD1Ev>
 80063da:	2134      	movs	r1, #52	; 0x34
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f020 f9ba 	bl	8026756 <_ZdlPvj>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4618      	mov	r0, r3
 80063e6:	3708      	adds	r7, #8
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <_ZN8touchgfx8TextAreaD1Ev>:
 * @see TypedText, TextAreaWithOneWildcard, TextAreaWithTwoWildcards
 *
 * @note A TextArea just holds a pointer to the text displayed. The developer must ensure that
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	4a08      	ldr	r2, [pc, #32]	; (8006418 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	601a      	str	r2, [r3, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	3328      	adds	r3, #40	; 0x28
 80063fe:	4618      	mov	r0, r3
 8006400:	f7ff ff90 	bl	8006324 <_ZN8touchgfx9TypedTextD1Ev>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4618      	mov	r0, r3
 8006408:	f7ff ff16 	bl	8006238 <_ZN8touchgfx6WidgetD1Ev>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4618      	mov	r0, r3
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	0802d948 	.word	0x0802d948

0800641c <_ZN8touchgfx8TextAreaD0Ev>:
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f7ff ffe1 	bl	80063ec <_ZN8touchgfx8TextAreaD1Ev>
 800642a:	213c      	movs	r1, #60	; 0x3c
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f020 f992 	bl	8026756 <_ZdlPvj>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4618      	mov	r0, r3
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <_ZN8touchgfx9TypedTextC1ERKS0_>:
class TypedText
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
 8006446:	4a07      	ldr	r2, [pc, #28]	; (8006464 <_ZN8touchgfx9TypedTextC1ERKS0_+0x28>)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	601a      	str	r2, [r3, #0]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	889a      	ldrh	r2, [r3, #4]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	809a      	strh	r2, [r3, #4]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4618      	mov	r0, r3
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	0802c3c4 	.word	0x0802c3c4

08006468 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	4618      	mov	r0, r3
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8006488:	4a07      	ldr	r2, [pc, #28]	; (80064a8 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	601a      	str	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	605a      	str	r2, [r3, #4]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	721a      	strb	r2, [r3, #8]
    {
    }
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4618      	mov	r0, r3
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr
 80064a8:	0802c45c 	.word	0x0802c45c

080064ac <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
    {
 80064b4:	4a04      	ldr	r2, [pc, #16]	; (80064c8 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	601a      	str	r2, [r3, #0]
    }
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4618      	mov	r0, r3
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr
 80064c8:	0802c45c 	.word	0x0802c45c

080064cc <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
    }
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f7ff ffe9 	bl	80064ac <_ZN8touchgfx10TransitionD1Ev>
 80064da:	210c      	movs	r1, #12
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f020 f93a 	bl	8026756 <_ZdlPvj>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4618      	mov	r0, r3
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
    {
    }
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
    {
    }
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
    {
    }
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 8006530:	f013 f942 	bl	80197b8 <_ZN8touchgfx11Application11getInstanceEv>
 8006534:	4603      	mov	r3, r0
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	3230      	adds	r2, #48	; 0x30
 800653a:	6812      	ldr	r2, [r2, #0]
 800653c:	4618      	mov	r0, r3
 800653e:	4790      	blx	r2
    }
 8006540:	bf00      	nop
 8006542:	3708      	adds	r7, #8
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	683a      	ldr	r2, [r7, #0]
 8006556:	605a      	str	r2, [r3, #4]
    }
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4618      	mov	r0, r3
 8006570:	f013 f944 	bl	80197fc <_ZN8touchgfx11ApplicationC1Ev>
 8006574:	4a09      	ldr	r2, [pc, #36]	; (800659c <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	601a      	str	r2, [r3, #0]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        instance = this;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a04      	ldr	r2, [pc, #16]	; (80065a0 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800658e:	6013      	str	r3, [r2, #0]
    }
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4618      	mov	r0, r3
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	0802c228 	.word	0x0802c228
 80065a0:	200567ec 	.word	0x200567ec

080065a4 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	683a      	ldr	r2, [r7, #0]
 80065b2:	601a      	str	r2, [r3, #0]
    }
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
    {
        done = true;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	721a      	strb	r2, [r3, #8]
    }
 80065ce:	bf00      	nop
 80065d0:	370c      	adds	r7, #12
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr

080065da <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 80065da:	b480      	push	{r7}
 80065dc:	b083      	sub	sp, #12
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
 80065e2:	6039      	str	r1, [r7, #0]
    {
        model = m;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	605a      	str	r2, [r3, #4]
    }
 80065ea:	bf00      	nop
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
	...

080065f8 <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 80065f8:	b480      	push	{r7}
 80065fa:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80065fc:	4b0b      	ldr	r3, [pc, #44]	; (800662c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8006604:	2b00      	cmp	r3, #0
 8006606:	d008      	beq.n	800661a <_ZN8touchgfx3HAL3lcdEv+0x22>
 8006608:	4b08      	ldr	r3, [pc, #32]	; (800662c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800660e:	2b00      	cmp	r3, #0
 8006610:	d003      	beq.n	800661a <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 8006612:	4b06      	ldr	r3, [pc, #24]	; (800662c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006618:	e002      	b.n	8006620 <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 800661a:	4b04      	ldr	r3, [pc, #16]	; (800662c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689b      	ldr	r3, [r3, #8]
    }
 8006620:	4618      	mov	r0, r3
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	20056780 	.word	0x20056780

08006630 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/lana_screen/LanaView.hpp>
#include <gui/lana_screen/LanaPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4618      	mov	r0, r3
 8006640:	f7ff ff90 	bl	8006564 <_ZN8touchgfx14MVPApplicationC1Ev>
 8006644:	4a13      	ldr	r2, [pc, #76]	; (8006694 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	601a      	str	r2, [r3, #0]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006650:	4618      	mov	r0, r3
 8006652:	f000 f89f 	bl	8006794 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8006666:	f7fd fae7 	bl	8003c38 <_ZN8touchgfx3HAL11getInstanceEv>
 800666a:	4603      	mov	r3, r0
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	3208      	adds	r2, #8
 8006670:	6812      	ldr	r2, [r2, #0]
 8006672:	2100      	movs	r1, #0
 8006674:	4618      	mov	r0, r3
 8006676:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8006678:	2000      	movs	r0, #0
 800667a:	f002 fc67 	bl	8008f4c <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800667e:	f7ff ffbb 	bl	80065f8 <_ZN8touchgfx3HAL3lcdEv>
 8006682:	4603      	mov	r3, r0
 8006684:	4618      	mov	r0, r3
 8006686:	f019 fc9e 	bl	801ffc6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	4618      	mov	r0, r3
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	0802c1cc 	.word	0x0802c1cc

08006698 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4618      	mov	r0, r3
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	683a      	ldr	r2, [r7, #0]
 80066be:	4611      	mov	r1, r2
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7ff ffe9 	bl	8006698 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	685a      	ldr	r2, [r3, #4]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	605a      	str	r2, [r3, #4]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	683a      	ldr	r2, [r7, #0]
 80066d2:	3308      	adds	r3, #8
 80066d4:	3208      	adds	r2, #8
 80066d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80066da:	e883 0003 	stmia.w	r3, {r0, r1}
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4618      	mov	r0, r3
 80066e2:	3708      	adds	r7, #8
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 80066e8:	b590      	push	{r4, r7, lr}
 80066ea:	b089      	sub	sp, #36	; 0x24
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80066f6:	4b10      	ldr	r3, [pc, #64]	; (8006738 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 80066f8:	61bb      	str	r3, [r7, #24]
 80066fa:	2300      	movs	r3, #0
 80066fc:	61fb      	str	r3, [r7, #28]
 80066fe:	f107 0008 	add.w	r0, r7, #8
 8006702:	f107 0318 	add.w	r3, r7, #24
 8006706:	cb0c      	ldmia	r3, {r2, r3}
 8006708:	6879      	ldr	r1, [r7, #4]
 800670a:	f000 f85f 	bl	80067cc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800670e:	f107 0308 	add.w	r3, r7, #8
 8006712:	4619      	mov	r1, r3
 8006714:	4620      	mov	r0, r4
 8006716:	f7ff ffcb 	bl	80066b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800671a:	f107 0308 	add.w	r3, r7, #8
 800671e:	4618      	mov	r0, r3
 8006720:	f7fe fcb8 	bl	8005094 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8006730:	bf00      	nop
 8006732:	3724      	adds	r7, #36	; 0x24
 8006734:	46bd      	mov	sp, r7
 8006736:	bd90      	pop	{r4, r7, pc}
 8006738:	0800673d 	.word	0x0800673d

0800673c <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af02      	add	r7, sp, #8
 8006742:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8006750:	461a      	mov	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	4b04      	ldr	r3, [pc, #16]	; (800676c <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 800675c:	4804      	ldr	r0, [pc, #16]	; (8006770 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 800675e:	f000 f867 	bl	8006830 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8006762:	bf00      	nop
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	200567e0 	.word	0x200567e0
 8006770:	200567dc 	.word	0x200567dc

08006774 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	4a04      	ldr	r2, [pc, #16]	; (8006790 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	601a      	str	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4618      	mov	r0, r3
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr
 8006790:	0802c26c 	.word	0x0802c26c

08006794 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4618      	mov	r0, r3
 80067a0:	f7ff ffe8 	bl	8006774 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80067a4:	4a08      	ldr	r2, [pc, #32]	; (80067c8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	601a      	str	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	605a      	str	r2, [r3, #4]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	609a      	str	r2, [r3, #8]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	60da      	str	r2, [r3, #12]
    }
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4618      	mov	r0, r3
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	0802c210 	.word	0x0802c210

080067cc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	4639      	mov	r1, r7
 80067d8:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_0(pmemfun_0)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4618      	mov	r0, r3
 80067e0:	f7ff ffc8 	bl	8006774 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80067e4:	4a08      	ldr	r2, [pc, #32]	; (8006808 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	601a      	str	r2, [r3, #0]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	605a      	str	r2, [r3, #4]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	3308      	adds	r3, #8
 80067f4:	463a      	mov	r2, r7
 80067f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80067fa:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	4618      	mov	r0, r3
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	0802c210 	.word	0x0802c210

0800680c <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4618      	mov	r0, r3
 8006818:	f7ff fe32 	bl	8006480 <_ZN8touchgfx10TransitionC1Ev>
 800681c:	4a03      	ldr	r2, [pc, #12]	; (800682c <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	601a      	str	r2, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4618      	mov	r0, r3
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	0802c438 	.word	0x0802c438

08006830 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8006830:	b590      	push	{r4, r7, lr}
 8006832:	b08f      	sub	sp, #60	; 0x3c
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
 800683c:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	689a      	ldr	r2, [r3, #8]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	3320      	adds	r3, #32
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4610      	mov	r0, r2
 800684e:	4798      	blx	r3
 8006850:	4603      	mov	r3, r0
 8006852:	4a80      	ldr	r2, [pc, #512]	; (8006a54 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d805      	bhi.n	8006864 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8006858:	4b7f      	ldr	r3, [pc, #508]	; (8006a58 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800685a:	4a80      	ldr	r2, [pc, #512]	; (8006a5c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800685c:	21a3      	movs	r1, #163	; 0xa3
 800685e:	4880      	ldr	r0, [pc, #512]	; (8006a60 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8006860:	f020 f8ae 	bl	80269c0 <__assert_func>
 8006864:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685a      	ldr	r2, [r3, #4]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	3320      	adds	r3, #32
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4610      	mov	r0, r2
 8006876:	4798      	blx	r3
 8006878:	4603      	mov	r3, r0
 800687a:	2b0f      	cmp	r3, #15
 800687c:	d805      	bhi.n	800688a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800687e:	4b79      	ldr	r3, [pc, #484]	; (8006a64 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8006880:	4a76      	ldr	r2, [pc, #472]	; (8006a5c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8006882:	21a4      	movs	r1, #164	; 0xa4
 8006884:	4876      	ldr	r0, [pc, #472]	; (8006a60 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8006886:	f020 f89b 	bl	80269c0 <__assert_func>
 800688a:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	68da      	ldr	r2, [r3, #12]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	3320      	adds	r3, #32
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4610      	mov	r0, r2
 800689c:	4798      	blx	r3
 800689e:	4603      	mov	r3, r0
 80068a0:	2b0b      	cmp	r3, #11
 80068a2:	d805      	bhi.n	80068b0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 80068a4:	4b70      	ldr	r3, [pc, #448]	; (8006a68 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 80068a6:	4a6d      	ldr	r2, [pc, #436]	; (8006a5c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80068a8:	21a5      	movs	r1, #165	; 0xa5
 80068aa:	486d      	ldr	r0, [pc, #436]	; (8006a60 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80068ac:	f020 f888 	bl	80269c0 <__assert_func>
 80068b0:	bf00      	nop
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	627b      	str	r3, [r7, #36]	; 0x24
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 80068be:	f012 ff7b 	bl	80197b8 <_ZN8touchgfx11Application11getInstanceEv>
 80068c2:	4603      	mov	r3, r0
 80068c4:	4618      	mov	r0, r3
 80068c6:	f012 ff7d 	bl	80197c4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80068ca:	6a3b      	ldr	r3, [r7, #32]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d008      	beq.n	80068e4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 80068d2:	6a3b      	ldr	r3, [r7, #32]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	6a3b      	ldr	r3, [r7, #32]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	330c      	adds	r3, #12
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4610      	mov	r0, r2
 80068e2:	4798      	blx	r3
    if (*currentTrans)
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d007      	beq.n	80068fc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 80068ec:	6a3b      	ldr	r3, [r7, #32]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	6a3b      	ldr	r3, [r7, #32]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4610      	mov	r0, r2
 80068fa:	4798      	blx	r3
    if (*currentScreen)
 80068fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d008      	beq.n	8006916 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8006904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	3314      	adds	r3, #20
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4610      	mov	r0, r2
 8006914:	4798      	blx	r3
    if (*currentPresenter)
 8006916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d008      	beq.n	8006930 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800691e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	3304      	adds	r3, #4
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4610      	mov	r0, r2
 800692e:	4798      	blx	r3
    if (*currentScreen)
 8006930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d007      	beq.n	8006948 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8006938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4610      	mov	r0, r2
 8006946:	4798      	blx	r3
    if (*currentPresenter)
 8006948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d008      	beq.n	8006962 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 8006950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	3308      	adds	r3, #8
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4610      	mov	r0, r2
 8006960:	4798      	blx	r3
}
 8006962:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	2100      	movs	r1, #0
 800696a:	4618      	mov	r0, r3
 800696c:	f000 f880 	bl	8006a70 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8006970:	4603      	mov	r3, r0
 8006972:	4619      	mov	r1, r3
 8006974:	200c      	movs	r0, #12
 8006976:	f7ff fd77 	bl	8006468 <_ZnwjPv>
 800697a:	4604      	mov	r4, r0
 800697c:	4620      	mov	r0, r4
 800697e:	f7ff ff45 	bl	800680c <_ZN8touchgfx12NoTransitionC1Ev>
 8006982:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	2100      	movs	r1, #0
 800698a:	4618      	mov	r0, r3
 800698c:	f000 f883 	bl	8006a96 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 8006990:	4603      	mov	r3, r0
 8006992:	4619      	mov	r1, r3
 8006994:	4835      	ldr	r0, [pc, #212]	; (8006a6c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x23c>)
 8006996:	f7ff fd67 	bl	8006468 <_ZnwjPv>
 800699a:	4604      	mov	r4, r0
 800699c:	4620      	mov	r0, r4
 800699e:	f002 fff5 	bl	800998c <_ZN8MainViewC1Ev>
 80069a2:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	2100      	movs	r1, #0
 80069aa:	4618      	mov	r0, r3
 80069ac:	f000 f886 	bl	8006abc <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 80069b0:	4603      	mov	r3, r0
 80069b2:	4619      	mov	r1, r3
 80069b4:	2010      	movs	r0, #16
 80069b6:	f7ff fd57 	bl	8006468 <_ZnwjPv>
 80069ba:	4604      	mov	r4, r0
 80069bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069be:	4620      	mov	r0, r4
 80069c0:	f002 fe56 	bl	8009670 <_ZN13MainPresenterC1ER8MainView>
 80069c4:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069ca:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069d0:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069d6:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80069d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d002      	beq.n	80069e4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 80069de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e0:	3304      	adds	r3, #4
 80069e2:	e000      	b.n	80069e6 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 80069e4:	2300      	movs	r3, #0
 80069e6:	4619      	mov	r1, r3
 80069e8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80069ea:	f7ff fddb 	bl	80065a4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80069ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f0:	3304      	adds	r3, #4
 80069f2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7ff fdf0 	bl	80065da <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80069fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069fe:	4618      	mov	r0, r3
 8006a00:	f000 f86f 	bl	8006ae2 <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>
 8006a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a06:	61fb      	str	r3, [r7, #28]
 8006a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0a:	61bb      	str	r3, [r7, #24]
 8006a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a0e:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	330c      	adds	r3, #12
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	69f8      	ldr	r0, [r7, #28]
 8006a1a:	4798      	blx	r3
    newPresenter->activate();
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	69b8      	ldr	r0, [r7, #24]
 8006a24:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8006a26:	6979      	ldr	r1, [r7, #20]
 8006a28:	69f8      	ldr	r0, [r7, #28]
 8006a2a:	f014 fba2 	bl	801b172 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	3310      	adds	r3, #16
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6978      	ldr	r0, [r7, #20]
 8006a38:	4798      	blx	r3
    newTransition->invalidate();
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3314      	adds	r3, #20
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6978      	ldr	r0, [r7, #20]
 8006a44:	4798      	blx	r3
}
 8006a46:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8006a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	373c      	adds	r7, #60	; 0x3c
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd90      	pop	{r4, r7, pc}
 8006a52:	bf00      	nop
 8006a54:	000226bf 	.word	0x000226bf
 8006a58:	0802b5b0 	.word	0x0802b5b0
 8006a5c:	0802b640 	.word	0x0802b640
 8006a60:	0802b740 	.word	0x0802b740
 8006a64:	0802b788 	.word	0x0802b788
 8006a68:	0802b82c 	.word	0x0802b82c
 8006a6c:	000226c0 	.word	0x000226c0

08006a70 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	460b      	mov	r3, r1
 8006a7a:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	3324      	adds	r3, #36	; 0x24
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	887a      	ldrh	r2, [r7, #2]
 8006a86:	4611      	mov	r1, r2
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	4798      	blx	r3
 8006a8c:	4603      	mov	r3, r0
    }
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3708      	adds	r7, #8
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b082      	sub	sp, #8
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3324      	adds	r3, #36	; 0x24
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	887a      	ldrh	r2, [r7, #2]
 8006aac:	4611      	mov	r1, r2
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	4798      	blx	r3
 8006ab2:	4603      	mov	r3, r0
    }
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3708      	adds	r7, #8
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3324      	adds	r3, #36	; 0x24
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	887a      	ldrh	r2, [r7, #2]
 8006ad2:	4611      	mov	r1, r2
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	4798      	blx	r3
 8006ad8:	4603      	mov	r3, r0
    }
 8006ada:	4618      	mov	r0, r3
 8006adc:	3708      	adds	r7, #8
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8006ae2:	b480      	push	{r7}
 8006ae4:	b083      	sub	sp, #12
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
 8006aea:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8006af2:	bf00      	nop
 8006af4:	370c      	adds	r7, #12
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
	...

08006b00 <_ZN8touchgfx12NoTransitionD1Ev>:
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	4a05      	ldr	r2, [pc, #20]	; (8006b20 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	601a      	str	r2, [r3, #0]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4618      	mov	r0, r3
 8006b12:	f7ff fccb 	bl	80064ac <_ZN8touchgfx10TransitionD1Ev>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3708      	adds	r7, #8
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	0802c438 	.word	0x0802c438

08006b24 <_ZN8touchgfx12NoTransitionD0Ev>:
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f7ff ffe7 	bl	8006b00 <_ZN8touchgfx12NoTransitionD1Ev>
 8006b32:	210c      	movs	r1, #12
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f01f fe0e 	bl	8026756 <_ZdlPvj>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3708      	adds	r7, #8
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <_Z41__static_initialization_and_destruction_0ii>:
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b092      	sub	sp, #72	; 0x48
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	f040 8114 	bne.w	8006d7e <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	f040 810e 	bne.w	8006d7e <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8006b62:	2300      	movs	r3, #0
 8006b64:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8006b68:	2300      	movs	r3, #0
 8006b6a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8006b6e:	2300      	movs	r3, #0
 8006b70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006b74:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006b78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006b7c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006b80:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006b84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b88:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8006b8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b90:	041b      	lsls	r3, r3, #16
 8006b92:	461a      	mov	r2, r3
 8006b94:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006b98:	021b      	lsls	r3, r3, #8
 8006b9a:	431a      	orrs	r2, r3
 8006b9c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006ba6:	f107 0320 	add.w	r3, r7, #32
 8006baa:	4611      	mov	r1, r2
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7fd fb85 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 8006bb2:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 8006bb4:	bf00      	nop
 8006bb6:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8006bb8:	4b73      	ldr	r3, [pc, #460]	; (8006d88 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8006bba:	601a      	str	r2, [r3, #0]
 8006bbc:	23ff      	movs	r3, #255	; 0xff
 8006bbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006bc8:	2300      	movs	r3, #0
 8006bca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8006bce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006bd2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8006bd6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bde:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006be2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8006be6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006bea:	041b      	lsls	r3, r3, #16
 8006bec:	461a      	mov	r2, r3
 8006bee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006bf2:	021b      	lsls	r3, r3, #8
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006c00:	f107 031c 	add.w	r3, r7, #28
 8006c04:	4611      	mov	r1, r2
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7fd fb58 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 8006c0c:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 8006c0e:	bf00      	nop
 8006c10:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 8006c12:	4b5e      	ldr	r3, [pc, #376]	; (8006d8c <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8006c14:	601a      	str	r2, [r3, #0]
 8006c16:	2300      	movs	r3, #0
 8006c18:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8006c1c:	23c0      	movs	r3, #192	; 0xc0
 8006c1e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8006c22:	2300      	movs	r3, #0
 8006c24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c28:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006c2c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006c30:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006c34:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8006c38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006c3c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8006c40:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006c44:	041b      	lsls	r3, r3, #16
 8006c46:	461a      	mov	r2, r3
 8006c48:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8006c4c:	021b      	lsls	r3, r3, #8
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006c54:	4313      	orrs	r3, r2
 8006c56:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006c5a:	f107 0318 	add.w	r3, r7, #24
 8006c5e:	4611      	mov	r1, r2
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7fd fb2b 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 8006c66:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8006c68:	bf00      	nop
 8006c6a:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 192, 0);
 8006c6c:	4b48      	ldr	r3, [pc, #288]	; (8006d90 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8006c6e:	601a      	str	r2, [r3, #0]
 8006c70:	2300      	movs	r3, #0
 8006c72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c76:	2300      	movs	r3, #0
 8006c78:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8006c7c:	23c0      	movs	r3, #192	; 0xc0
 8006c7e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8006c82:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006c86:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8006c8a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006c8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006c92:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8006c96:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8006c9a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8006c9e:	041b      	lsls	r3, r3, #16
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ca6:	021b      	lsls	r3, r3, #8
 8006ca8:	431a      	orrs	r2, r3
 8006caa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006cb4:	f107 0314 	add.w	r3, r7, #20
 8006cb8:	4611      	mov	r1, r2
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7fd fafe 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 8006cc0:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 8006cc2:	bf00      	nop
 8006cc4:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 192);
 8006cc6:	4b33      	ldr	r3, [pc, #204]	; (8006d94 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8006cc8:	601a      	str	r2, [r3, #0]
 8006cca:	23f7      	movs	r3, #247	; 0xf7
 8006ccc:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8006cd0:	234c      	movs	r3, #76	; 0x4c
 8006cd2:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8006cd6:	2302      	movs	r3, #2
 8006cd8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006cdc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8006ce0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8006ce4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006ce8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8006cec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006cf0:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8006cf4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006cf8:	041b      	lsls	r3, r3, #16
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8006d00:	021b      	lsls	r3, r3, #8
 8006d02:	431a      	orrs	r2, r3
 8006d04:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006d0e:	f107 0310 	add.w	r3, r7, #16
 8006d12:	4611      	mov	r1, r2
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7fd fad1 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 8006d1a:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 8006d1c:	bf00      	nop
 8006d1e:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 8006d20:	4b1d      	ldr	r3, [pc, #116]	; (8006d98 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	23f7      	movs	r3, #247	; 0xf7
 8006d26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006d2a:	23d2      	movs	r3, #210	; 0xd2
 8006d2c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8006d30:	2302      	movs	r3, #2
 8006d32:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8006d36:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006d3a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8006d3e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d46:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006d4a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8006d4e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8006d52:	041b      	lsls	r3, r3, #16
 8006d54:	461a      	mov	r2, r3
 8006d56:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006d5a:	021b      	lsls	r3, r3, #8
 8006d5c:	431a      	orrs	r2, r3
 8006d5e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8006d62:	4313      	orrs	r3, r2
 8006d64:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006d68:	f107 030c 	add.w	r3, r7, #12
 8006d6c:	4611      	mov	r1, r2
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7fd faa4 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 8006d74:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 8006d76:	bf00      	nop
 8006d78:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 8006d7a:	4b08      	ldr	r3, [pc, #32]	; (8006d9c <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8006d7c:	601a      	str	r2, [r3, #0]
 8006d7e:	bf00      	nop
 8006d80:	3748      	adds	r7, #72	; 0x48
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	20023834 	.word	0x20023834
 8006d8c:	20023838 	.word	0x20023838
 8006d90:	2002383c 	.word	0x2002383c
 8006d94:	20023840 	.word	0x20023840
 8006d98:	20023844 	.word	0x20023844
 8006d9c:	20023848 	.word	0x20023848

08006da0 <_GLOBAL__sub_I__ZN23FrontendApplicationBaseC2ER5ModelR12FrontendHeap>:
 8006da0:	b580      	push	{r7, lr}
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006da8:	2001      	movs	r0, #1
 8006daa:	f7ff fecb 	bl	8006b44 <_Z41__static_initialization_and_destruction_0ii>
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a1b      	ldr	r3, [r3, #32]
    }
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b08c      	sub	sp, #48	; 0x30
 8006de4:	af08      	add	r7, sp, #32
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	4611      	mov	r1, r2
 8006dec:	461a      	mov	r2, r3
 8006dee:	460b      	mov	r3, r1
 8006df0:	80fb      	strh	r3, [r7, #6]
 8006df2:	4613      	mov	r3, r2
 8006df4:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	88b9      	ldrh	r1, [r7, #4]
 8006dfa:	88fa      	ldrh	r2, [r7, #6]
 8006dfc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006dfe:	9306      	str	r3, [sp, #24]
 8006e00:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006e02:	9305      	str	r3, [sp, #20]
 8006e04:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006e08:	9304      	str	r3, [sp, #16]
 8006e0a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006e0e:	9303      	str	r3, [sp, #12]
 8006e10:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006e14:	9302      	str	r3, [sp, #8]
 8006e16:	7f3b      	ldrb	r3, [r7, #28]
 8006e18:	9301      	str	r3, [sp, #4]
 8006e1a:	7e3b      	ldrb	r3, [r7, #24]
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	460b      	mov	r3, r1
 8006e20:	68b9      	ldr	r1, [r7, #8]
 8006e22:	f013 fcff 	bl	801a824 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8006e26:	4a0a      	ldr	r2, [pc, #40]	; (8006e50 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	601a      	str	r2, [r3, #0]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e30:	619a      	str	r2, [r3, #24]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e36:	61da      	str	r2, [r3, #28]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e3c:	621a      	str	r2, [r3, #32]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e42:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	4618      	mov	r0, r3
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	0802c480 	.word	0x0802c480

08006e54 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	889b      	ldrh	r3, [r3, #4]
 8006e68:	0adb      	lsrs	r3, r3, #11
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	4413      	add	r3, r2
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4413      	add	r3, r2
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3714      	adds	r7, #20
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr

08006e86 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8006e86:	b480      	push	{r7}
 8006e88:	b089      	sub	sp, #36	; 0x24
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	60f8      	str	r0, [r7, #12]
 8006e8e:	460b      	mov	r3, r1
 8006e90:	607a      	str	r2, [r7, #4]
 8006e92:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d003      	beq.n	8006ea2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	7b1b      	ldrb	r3, [r3, #12]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d101      	bne.n	8006ea6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	e030      	b.n	8006f08 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	69da      	ldr	r2, [r3, #28]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	7b5b      	ldrb	r3, [r3, #13]
 8006eb2:	021b      	lsls	r3, r3, #8
 8006eb4:	b21b      	sxth	r3, r3
 8006eb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006eba:	b219      	sxth	r1, r3
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	7adb      	ldrb	r3, [r3, #11]
 8006ec0:	b21b      	sxth	r3, r3
 8006ec2:	430b      	orrs	r3, r1
 8006ec4:	b21b      	sxth	r3, r3
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	4413      	add	r3, r2
 8006ecc:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	7b1b      	ldrb	r3, [r3, #12]
 8006ed2:	837b      	strh	r3, [r7, #26]
 8006ed4:	8b7b      	ldrh	r3, [r7, #26]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d015      	beq.n	8006f06 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	881b      	ldrh	r3, [r3, #0]
 8006ede:	897a      	ldrh	r2, [r7, #10]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d103      	bne.n	8006eec <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8006eea:	e00d      	b.n	8006f08 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	881b      	ldrh	r3, [r3, #0]
 8006ef0:	897a      	ldrh	r2, [r7, #10]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d306      	bcc.n	8006f04 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8006ef6:	8b7b      	ldrh	r3, [r7, #26]
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	837b      	strh	r3, [r7, #26]
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	3304      	adds	r3, #4
 8006f00:	61fb      	str	r3, [r7, #28]
 8006f02:	e7e7      	b.n	8006ed4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 8006f04:	bf00      	nop
        }
    }
    return 0;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3724      	adds	r7, #36	; 0x24
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8006f20:	4a06      	ldr	r2, [pc, #24]	; (8006f3c <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	601a      	str	r2, [r3, #0]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	887a      	ldrh	r2, [r7, #2]
 8006f2a:	809a      	strh	r2, [r3, #4]
    }
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4618      	mov	r0, r3
 8006f30:	370c      	adds	r7, #12
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	0802c3c4 	.word	0x0802c3c4

08006f40 <_ZN8touchgfx8TextAreaC1Ev>:
{
public:
    TextArea()
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	2326      	movs	r3, #38	; 0x26
 8006f4e:	461a      	mov	r2, r3
 8006f50:	2100      	movs	r1, #0
 8006f52:	f01f fdc1 	bl	8026ad8 <memset>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7ff f95b 	bl	8006214 <_ZN8touchgfx6WidgetC1Ev>
 8006f5e:	4a14      	ldr	r2, [pc, #80]	; (8006fb0 <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	601a      	str	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	3328      	adds	r3, #40	; 0x28
 8006f68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7ff ffd1 	bl	8006f14 <_ZN8touchgfx9TypedTextC1Et>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	3330      	adds	r3, #48	; 0x30
 8006f76:	2100      	movs	r1, #0
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7fd f99f 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	869a      	strh	r2, [r3, #52]	; 0x34
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	22ff      	movs	r2, #255	; 0xff
 8006f88:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3708      	adds	r7, #8
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	0802d948 	.word	0x0802d948

08006fb4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7ff ffbe 	bl	8006f40 <_ZN8touchgfx8TextAreaC1Ev>
 8006fc4:	4a05      	ldr	r2, [pc, #20]	; (8006fdc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	601a      	str	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3708      	adds	r7, #8
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	0802da54 	.word	0x0802da54

08006fe0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8006ff0:	bf00      	nop
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    LCD* getAuxiliaryLCD()
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
        return auxiliaryLCD;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 8007008:	4618      	mov	r0, r3
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
        : areaOffsetX(0),
          areaOffsetY(0),
          widgetAlpha(255)
 800701c:	4a09      	ldr	r2, [pc, #36]	; (8007044 <_ZN8touchgfx15AbstractPainterC1Ev+0x30>)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	601a      	str	r2, [r3, #0]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	809a      	strh	r2, [r3, #4]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	80da      	strh	r2, [r3, #6]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	22ff      	movs	r2, #255	; 0xff
 8007032:	721a      	strb	r2, [r3, #8]
    {
    }
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4618      	mov	r0, r3
 8007038:	370c      	adds	r7, #12
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	0802c540 	.word	0x0802c540

08007048 <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
    {
 8007050:	4a04      	ldr	r2, [pc, #16]	; (8007064 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	601a      	str	r2, [r3, #0]
    }
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4618      	mov	r0, r3
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr
 8007064:	0802c540 	.word	0x0802c540

08007068 <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
    }
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f7ff ffe9 	bl	8007048 <_ZN8touchgfx15AbstractPainterD1Ev>
 8007076:	210c      	movs	r1, #12
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f01f fb6c 	bl	8026756 <_ZdlPvj>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4618      	mov	r0, r3
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
            : v(i)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	683a      	ldr	r2, [r7, #0]
 8007096:	601a      	str	r2, [r3, #0]
        {
        }
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4618      	mov	r0, r3
 800709c:	370c      	adds	r7, #12
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr

080070a6 <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
        /**
         * Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 80070a6:	b480      	push	{r7}
 80070a8:	b083      	sub	sp, #12
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
        {
            return v;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
        }
 80070b2:	4618      	mov	r0, r3
 80070b4:	370c      	adds	r7, #12
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @see updateLineWidth
     *
     * @note The area containing the Line is not invalidated.
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 80070be:	b590      	push	{r4, r7, lr}
 80070c0:	b083      	sub	sp, #12
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
 80070c6:	6039      	str	r1, [r7, #0]
    {
        if (lineWidth == widthQ5)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	3340      	adds	r3, #64	; 0x40
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7ff ffea 	bl	80070a6 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 80070d2:	4604      	mov	r4, r0
 80070d4:	463b      	mov	r3, r7
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7ff ffe5 	bl	80070a6 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 80070dc:	4603      	mov	r3, r0
 80070de:	429c      	cmp	r4, r3
 80070e0:	bf0c      	ite	eq
 80070e2:	2301      	moveq	r3, #1
 80070e4:	2300      	movne	r3, #0
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d106      	bne.n	80070fa <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidth = widthQ5;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	641a      	str	r2, [r3, #64]	; 0x40

        updateCachedShape();
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f010 f8e6 	bl	80172c4 <_ZN8touchgfx4Line17updateCachedShapeEv>
 80070f8:	e000      	b.n	80070fc <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 80070fa:	bf00      	nop
    }
 80070fc:	370c      	adds	r7, #12
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd90      	pop	{r4, r7, pc}
	...

08007104 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
        : AbstractPainter(), currentX(0), currentY(0)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4618      	mov	r0, r3
 8007110:	f7ff ff80 	bl	8007014 <_ZN8touchgfx15AbstractPainterC1Ev>
 8007114:	4a29      	ldr	r2, [pc, #164]	; (80071bc <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb8>)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	601a      	str	r2, [r3, #0]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	60da      	str	r2, [r3, #12]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	611a      	str	r2, [r3, #16]
 8007126:	2301      	movs	r3, #1
 8007128:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 800712a:	f7ff fa65 	bl	80065f8 <_ZN8touchgfx3HAL3lcdEv>
 800712e:	4603      	mov	r3, r0
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	3224      	adds	r2, #36	; 0x24
 8007134:	6812      	ldr	r2, [r2, #0]
 8007136:	4618      	mov	r0, r3
 8007138:	4790      	blx	r2
 800713a:	4603      	mov	r3, r0
 800713c:	461a      	mov	r2, r3
 800713e:	7bfb      	ldrb	r3, [r7, #15]
 8007140:	4293      	cmp	r3, r2
 8007142:	bf0c      	ite	eq
 8007144:	2301      	moveq	r3, #1
 8007146:	2300      	movne	r3, #0
 8007148:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 800714a:	f7fc fd75 	bl	8003c38 <_ZN8touchgfx3HAL11getInstanceEv>
 800714e:	4603      	mov	r3, r0
 8007150:	4618      	mov	r0, r3
 8007152:	f7ff ff53 	bl	8006ffc <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	bf14      	ite	ne
 800715c:	2301      	movne	r3, #1
 800715e:	2300      	moveq	r3, #0
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b00      	cmp	r3, #0
 8007164:	d01b      	beq.n	800719e <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x9a>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8007166:	f7fc fd67 	bl	8003c38 <_ZN8touchgfx3HAL11getInstanceEv>
 800716a:	4603      	mov	r3, r0
 800716c:	4618      	mov	r0, r3
 800716e:	f7ff ff45 	bl	8006ffc <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 8007172:	4603      	mov	r3, r0
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	3224      	adds	r2, #36	; 0x24
 8007178:	6812      	ldr	r2, [r2, #0]
 800717a:	4618      	mov	r0, r3
 800717c:	4790      	blx	r2
 800717e:	4603      	mov	r3, r0
 8007180:	461a      	mov	r2, r3
 8007182:	7bfb      	ldrb	r3, [r7, #15]
 8007184:	4293      	cmp	r3, r2
 8007186:	bf0c      	ite	eq
 8007188:	2301      	moveq	r3, #1
 800718a:	2300      	movne	r3, #0
 800718c:	b2da      	uxtb	r2, r3
 800718e:	7bbb      	ldrb	r3, [r7, #14]
 8007190:	4313      	orrs	r3, r2
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b00      	cmp	r3, #0
 8007196:	bf14      	ite	ne
 8007198:	2301      	movne	r3, #1
 800719a:	2300      	moveq	r3, #0
 800719c:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 800719e:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d105      	bne.n	80071b0 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xac>
 80071a4:	4b06      	ldr	r3, [pc, #24]	; (80071c0 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xbc>)
 80071a6:	4a07      	ldr	r2, [pc, #28]	; (80071c4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xc0>)
 80071a8:	2128      	movs	r1, #40	; 0x28
 80071aa:	4807      	ldr	r0, [pc, #28]	; (80071c8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xc4>)
 80071ac:	f01f fc08 	bl	80269c0 <__assert_func>
 80071b0:	bf00      	nop
    }
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4618      	mov	r0, r3
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	0802d4dc 	.word	0x0802d4dc
 80071c0:	0802b8d0 	.word	0x0802b8d0
 80071c4:	0802b930 	.word	0x0802b930
 80071c8:	0802b96c 	.word	0x0802b96c

080071cc <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
class AbstractPainterRGB888 : public AbstractPainter
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	4a05      	ldr	r2, [pc, #20]	; (80071ec <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	601a      	str	r2, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4618      	mov	r0, r3
 80071de:	f7ff ff33 	bl	8007048 <_ZN8touchgfx15AbstractPainterD1Ev>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4618      	mov	r0, r3
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	0802d4dc 	.word	0x0802d4dc

080071f0 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f7ff ffe7 	bl	80071cc <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 80071fe:	2114      	movs	r1, #20
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f01f faa8 	bl	8026756 <_ZdlPvj>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4618      	mov	r0, r3
 800720a:	3708      	adds	r7, #8
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
        : AbstractPainterRGB888(), painterRed(0), painterGreen(0), painterBlue(0)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4618      	mov	r0, r3
 800721e:	f7ff ff71 	bl	8007104 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8007222:	4a0a      	ldr	r2, [pc, #40]	; (800724c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE+0x3c>)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	601a      	str	r2, [r3, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	751a      	strb	r2, [r3, #20]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	755a      	strb	r2, [r3, #21]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	759a      	strb	r2, [r3, #22]
    {
        setColor(color);
 800723a:	6839      	ldr	r1, [r7, #0]
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 f807 	bl	8007250 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    }
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4618      	mov	r0, r3
 8007246:	3708      	adds	r7, #8
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	0802d4fc 	.word	0x0802d4fc

08007250 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    void setColor(colortype color)
 8007250:	b580      	push	{r7, lr}
 8007252:	b086      	sub	sp, #24
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	617b      	str	r3, [r7, #20]
     *
     * @return The red part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getRed(colortype color)
    {
        return color >> 16;
 800725e:	f107 0314 	add.w	r3, r7, #20
 8007262:	4618      	mov	r0, r3
 8007264:	f7fc fc5a 	bl	8003b1c <_ZNK8touchgfx9colortypecvmEv>
 8007268:	4603      	mov	r3, r0
 800726a:	0c1b      	lsrs	r3, r3, #16
 800726c:	b2da      	uxtb	r2, r3
    {
        painterRed = Color::getRed(color);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	751a      	strb	r2, [r3, #20]
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	613b      	str	r3, [r7, #16]
     *
     * @return The green part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getGreen(colortype color)
    {
        return color >> 8;
 8007276:	f107 0310 	add.w	r3, r7, #16
 800727a:	4618      	mov	r0, r3
 800727c:	f7fc fc4e 	bl	8003b1c <_ZNK8touchgfx9colortypecvmEv>
 8007280:	4603      	mov	r3, r0
 8007282:	0a1b      	lsrs	r3, r3, #8
 8007284:	b2da      	uxtb	r2, r3
        painterGreen = Color::getGreen(color);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	755a      	strb	r2, [r3, #21]
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	60fb      	str	r3, [r7, #12]
     *
     * @return The blue part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getBlue(colortype color)
    {
        return color;
 800728e:	f107 030c 	add.w	r3, r7, #12
 8007292:	4618      	mov	r0, r3
 8007294:	f7fc fc42 	bl	8003b1c <_ZNK8touchgfx9colortypecvmEv>
 8007298:	4603      	mov	r3, r0
 800729a:	b2da      	uxtb	r2, r3
        painterBlue = Color::getBlue(color);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	759a      	strb	r2, [r3, #22]
    }
 80072a0:	bf00      	nop
 80072a2:	3718      	adds	r7, #24
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <_ZN11tempBoxBaseD1Ev>:

class tempBoxBase : public touchgfx::Container
{
public:
    tempBoxBase();
    virtual ~tempBoxBase() {}
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	4a0d      	ldr	r2, [pc, #52]	; (80072e8 <_ZN11tempBoxBaseD1Ev+0x40>)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	601a      	str	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	33b8      	adds	r3, #184	; 0xb8
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7ff f896 	bl	80063ec <_ZN8touchgfx8TextAreaD1Ev>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	33a0      	adds	r3, #160	; 0xa0
 80072c4:	4618      	mov	r0, r3
 80072c6:	f001 f9fb 	bl	80086c0 <_ZN8touchgfx13PainterRGB888D1Ev>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	332c      	adds	r3, #44	; 0x2c
 80072ce:	4618      	mov	r0, r3
 80072d0:	f001 f9d4 	bl	800867c <_ZN8touchgfx4LineD1Ev>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7ff f844 	bl	8006364 <_ZN8touchgfx9ContainerD1Ev>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4618      	mov	r0, r3
 80072e0:	3708      	adds	r7, #8
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	0802c654 	.word	0x0802c654

080072ec <_ZN11tempBoxBaseD0Ev>:
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f7ff ffd7 	bl	80072a8 <_ZN11tempBoxBaseD1Ev>
 80072fa:	21f4      	movs	r1, #244	; 0xf4
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f01f fa2a 	bl	8026756 <_ZdlPvj>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4618      	mov	r0, r3
 8007306:	3708      	adds	r7, #8
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <_ZN7tempBoxD1Ev>:

class tempBox : public tempBoxBase
{
public:
    tempBox();
    virtual ~tempBox() {}
 800730c:	b590      	push	{r4, r7, lr}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	4a1c      	ldr	r2, [pc, #112]	; (8007388 <_ZN7tempBoxD1Ev+0x7c>)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	601a      	str	r2, [r3, #0]
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	f646 031c 	movw	r3, #26652	; 0x681c
 8007320:	4413      	add	r3, r2
 8007322:	2b00      	cmp	r3, #0
 8007324:	d011      	beq.n	800734a <_ZN7tempBoxD1Ev+0x3e>
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	f646 031c 	movw	r3, #26652	; 0x681c
 800732c:	4413      	add	r3, r2
 800732e:	f503 54a5 	add.w	r4, r3, #5280	; 0x14a0
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	f646 031c 	movw	r3, #26652	; 0x681c
 8007338:	4413      	add	r3, r2
 800733a:	429c      	cmp	r4, r3
 800733c:	d005      	beq.n	800734a <_ZN7tempBoxD1Ev+0x3e>
 800733e:	3c18      	subs	r4, #24
 8007340:	6823      	ldr	r3, [r4, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4620      	mov	r0, r4
 8007346:	4798      	blx	r3
 8007348:	e7f3      	b.n	8007332 <_ZN7tempBoxD1Ev+0x26>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 8007350:	2b00      	cmp	r3, #0
 8007352:	d010      	beq.n	8007376 <_ZN7tempBoxD1Ev+0x6a>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 800735a:	f246 34b0 	movw	r4, #25520	; 0x63b0
 800735e:	441c      	add	r4, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 8007366:	429c      	cmp	r4, r3
 8007368:	d005      	beq.n	8007376 <_ZN7tempBoxD1Ev+0x6a>
 800736a:	3c74      	subs	r4, #116	; 0x74
 800736c:	6823      	ldr	r3, [r4, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4620      	mov	r0, r4
 8007372:	4798      	blx	r3
 8007374:	e7f4      	b.n	8007360 <_ZN7tempBoxD1Ev+0x54>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4618      	mov	r0, r3
 800737a:	f7ff ff95 	bl	80072a8 <_ZN11tempBoxBaseD1Ev>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4618      	mov	r0, r3
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	bd90      	pop	{r4, r7, pc}
 8007388:	0802c7f0 	.word	0x0802c7f0

0800738c <_ZN7tempBoxD0Ev>:
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f7ff ffb9 	bl	800730c <_ZN7tempBoxD1Ev>
 800739a:	f647 41bc 	movw	r1, #31932	; 0x7cbc
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f01f f9d9 	bl	8026756 <_ZdlPvj>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4618      	mov	r0, r3
 80073a8:	3708      	adds	r7, #8
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
	...

080073b0 <_ZN12alertBarBaseD1Ev>:

class alertBarBase : public touchgfx::Container
{
public:
    alertBarBase();
    virtual ~alertBarBase() {}
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	4a0a      	ldr	r2, [pc, #40]	; (80073e4 <_ZN12alertBarBaseD1Ev+0x34>)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	601a      	str	r2, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	3360      	adds	r3, #96	; 0x60
 80073c2:	4618      	mov	r0, r3
 80073c4:	f001 f99e 	bl	8008704 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	332c      	adds	r3, #44	; 0x2c
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7fe ffeb 	bl	80063a8 <_ZN8touchgfx13BoxWithBorderD1Ev>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7fe ffc5 	bl	8006364 <_ZN8touchgfx9ContainerD1Ev>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4618      	mov	r0, r3
 80073de:	3708      	adds	r7, #8
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	0802c5c8 	.word	0x0802c5c8

080073e8 <_ZN12alertBarBaseD0Ev>:
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f7ff ffdd 	bl	80073b0 <_ZN12alertBarBaseD1Ev>
 80073f6:	21a0      	movs	r1, #160	; 0xa0
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f01f f9ac 	bl	8026756 <_ZdlPvj>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4618      	mov	r0, r3
 8007402:	3708      	adds	r7, #8
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <_ZN8alertBarD1Ev>:

class alertBar : public alertBarBase
{
public:
    alertBar();
    virtual ~alertBar() {}
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	4a05      	ldr	r2, [pc, #20]	; (8007428 <_ZN8alertBarD1Ev+0x20>)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	601a      	str	r2, [r3, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4618      	mov	r0, r3
 800741a:	f7ff ffc9 	bl	80073b0 <_ZN12alertBarBaseD1Ev>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4618      	mov	r0, r3
 8007422:	3708      	adds	r7, #8
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	0802c764 	.word	0x0802c764

0800742c <_ZN8alertBarD0Ev>:
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f7ff ffe7 	bl	8007408 <_ZN8alertBarD1Ev>
 800743a:	21f0      	movs	r1, #240	; 0xf0
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f01f f98a 	bl	8026756 <_ZdlPvj>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4618      	mov	r0, r3
 8007446:	3708      	adds	r7, #8
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	4a05      	ldr	r2, [pc, #20]	; (800746c <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	601a      	str	r2, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4618      	mov	r0, r3
 800745e:	f7fe fe4f 	bl	8006100 <_ZN8touchgfx6ScreenD1Ev>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4618      	mov	r0, r3
 8007466:	3708      	adds	r7, #8
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	0802c50c 	.word	0x0802c50c

08007470 <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f7ff ffe7 	bl	800744c <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 800747e:	2140      	movs	r1, #64	; 0x40
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f01f f968 	bl	8026756 <_ZdlPvj>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4618      	mov	r0, r3
 800748a:	3708      	adds	r7, #8
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	4a34      	ldr	r2, [pc, #208]	; (800756c <_ZN12MainViewBaseD1Ev+0xdc>)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	601a      	str	r2, [r3, #0]
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	4b33      	ldr	r3, [pc, #204]	; (8007570 <_ZN12MainViewBaseD1Ev+0xe0>)
 80074a2:	4413      	add	r3, r2
 80074a4:	4618      	mov	r0, r3
 80074a6:	f001 f92d 	bl	8008704 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	4b31      	ldr	r3, [pc, #196]	; (8007574 <_ZN12MainViewBaseD1Ev+0xe4>)
 80074ae:	4413      	add	r3, r2
 80074b0:	4618      	mov	r0, r3
 80074b2:	f001 f927 	bl	8008704 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	4b2f      	ldr	r3, [pc, #188]	; (8007578 <_ZN12MainViewBaseD1Ev+0xe8>)
 80074ba:	4413      	add	r3, r2
 80074bc:	4618      	mov	r0, r3
 80074be:	f7ff ffa3 	bl	8007408 <_ZN8alertBarD1Ev>
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	4b2d      	ldr	r3, [pc, #180]	; (800757c <_ZN12MainViewBaseD1Ev+0xec>)
 80074c6:	4413      	add	r3, r2
 80074c8:	4618      	mov	r0, r3
 80074ca:	f7ff ff9d 	bl	8007408 <_ZN8alertBarD1Ev>
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	4b2b      	ldr	r3, [pc, #172]	; (8007580 <_ZN12MainViewBaseD1Ev+0xf0>)
 80074d2:	4413      	add	r3, r2
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7ff ff19 	bl	800730c <_ZN7tempBoxD1Ev>
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 80074e0:	4413      	add	r3, r2
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7ff ff12 	bl	800730c <_ZN7tempBoxD1Ev>
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 80074ee:	4413      	add	r3, r2
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7ff ff0b 	bl	800730c <_ZN7tempBoxD1Ev>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7ff ff05 	bl	800730c <_ZN7tempBoxD1Ev>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007508:	4618      	mov	r0, r3
 800750a:	f001 f8fb 	bl	8008704 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8007514:	4618      	mov	r0, r3
 8007516:	f001 f8f5 	bl	8008704 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007520:	4618      	mov	r0, r3
 8007522:	f001 f8ef 	bl	8008704 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800752c:	4618      	mov	r0, r3
 800752e:	f001 f8c7 	bl	80086c0 <_ZN8touchgfx13PainterRGB888D1Ev>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	33d8      	adds	r3, #216	; 0xd8
 8007536:	4618      	mov	r0, r3
 8007538:	f001 f8a0 	bl	800867c <_ZN8touchgfx4LineD1Ev>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	3398      	adds	r3, #152	; 0x98
 8007540:	4618      	mov	r0, r3
 8007542:	f001 f8df 	bl	8008704 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	336c      	adds	r3, #108	; 0x6c
 800754a:	4618      	mov	r0, r3
 800754c:	f7fe fec8 	bl	80062e0 <_ZN8touchgfx3BoxD1Ev>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	3340      	adds	r3, #64	; 0x40
 8007554:	4618      	mov	r0, r3
 8007556:	f7fe fec3 	bl	80062e0 <_ZN8touchgfx3BoxD1Ev>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4618      	mov	r0, r3
 800755e:	f7ff ff75 	bl	800744c <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4618      	mov	r0, r3
 8007566:	3708      	adds	r7, #8
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}
 800756c:	0802c4d8 	.word	0x0802c4d8
 8007570:	0001f734 	.word	0x0001f734
 8007574:	0001f6f4 	.word	0x0001f6f4
 8007578:	0001f604 	.word	0x0001f604
 800757c:	0001f514 	.word	0x0001f514
 8007580:	00017858 	.word	0x00017858

08007584 <_ZN12MainViewBaseD0Ev>:
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f7ff ff7f 	bl	8007490 <_ZN12MainViewBaseD1Ev>
 8007592:	4904      	ldr	r1, [pc, #16]	; (80075a4 <_ZN12MainViewBaseD0Ev+0x20>)
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f01f f8de 	bl	8026756 <_ZdlPvj>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4618      	mov	r0, r3
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	000226bc 	.word	0x000226bc

080075a8 <_ZN12MainViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

MainViewBase::MainViewBase()
 80075a8:	b590      	push	{r4, r7, lr}
 80075aa:	b0cf      	sub	sp, #316	; 0x13c
 80075ac:	af02      	add	r7, sp, #8
 80075ae:	1d3b      	adds	r3, r7, #4
 80075b0:	6018      	str	r0, [r3, #0]
 80075b2:	1d3b      	adds	r3, r7, #4
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 fe96 	bl	80082e8 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 80075bc:	4aaa      	ldr	r2, [pc, #680]	; (8007868 <_ZN12MainViewBaseC1Ev+0x2c0>)
 80075be:	1d3b      	adds	r3, r7, #4
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	601a      	str	r2, [r3, #0]
 80075c4:	1d3b      	adds	r3, r7, #4
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	3340      	adds	r3, #64	; 0x40
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7fe fe56 	bl	800627c <_ZN8touchgfx3BoxC1Ev>
 80075d0:	1d3b      	adds	r3, r7, #4
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	336c      	adds	r3, #108	; 0x6c
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7fe fe50 	bl	800627c <_ZN8touchgfx3BoxC1Ev>
 80075dc:	1d3b      	adds	r3, r7, #4
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	3398      	adds	r3, #152	; 0x98
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7ff fce6 	bl	8006fb4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80075e8:	1d3b      	adds	r3, r7, #4
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	33d8      	adds	r3, #216	; 0xd8
 80075ee:	4618      	mov	r0, r3
 80075f0:	f00f fe48 	bl	8017284 <_ZN8touchgfx4LineC1Ev>
 80075f4:	1d3b      	adds	r3, r7, #4
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 80075fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007600:	2100      	movs	r1, #0
 8007602:	4618      	mov	r0, r3
 8007604:	f7fc fe5a 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 8007608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800760c:	6819      	ldr	r1, [r3, #0]
 800760e:	4620      	mov	r0, r4
 8007610:	f7ff fdfe 	bl	8007210 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 8007614:	1d3b      	adds	r3, r7, #4
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800761c:	4618      	mov	r0, r3
 800761e:	f7ff fcc9 	bl	8006fb4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8007622:	1d3b      	adds	r3, r7, #4
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 800762a:	4618      	mov	r0, r3
 800762c:	f7ff fcc2 	bl	8006fb4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8007630:	1d3b      	adds	r3, r7, #4
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007638:	4618      	mov	r0, r3
 800763a:	f7ff fcbb 	bl	8006fb4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800763e:	1d3b      	adds	r3, r7, #4
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8007646:	4618      	mov	r0, r3
 8007648:	f003 f984 	bl	800a954 <_ZN7tempBoxC1Ev>
 800764c:	1d3b      	adds	r3, r7, #4
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 8007654:	4413      	add	r3, r2
 8007656:	4618      	mov	r0, r3
 8007658:	f003 f97c 	bl	800a954 <_ZN7tempBoxC1Ev>
 800765c:	1d3b      	adds	r3, r7, #4
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 8007664:	4413      	add	r3, r2
 8007666:	4618      	mov	r0, r3
 8007668:	f003 f974 	bl	800a954 <_ZN7tempBoxC1Ev>
 800766c:	1d3b      	adds	r3, r7, #4
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	4b7e      	ldr	r3, [pc, #504]	; (800786c <_ZN12MainViewBaseC1Ev+0x2c4>)
 8007672:	4413      	add	r3, r2
 8007674:	4618      	mov	r0, r3
 8007676:	f003 f96d 	bl	800a954 <_ZN7tempBoxC1Ev>
 800767a:	1d3b      	adds	r3, r7, #4
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	4b7c      	ldr	r3, [pc, #496]	; (8007870 <_ZN12MainViewBaseC1Ev+0x2c8>)
 8007680:	4413      	add	r3, r2
 8007682:	4618      	mov	r0, r3
 8007684:	f002 ff5e 	bl	800a544 <_ZN8alertBarC1Ev>
 8007688:	1d3b      	adds	r3, r7, #4
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	4b79      	ldr	r3, [pc, #484]	; (8007874 <_ZN12MainViewBaseC1Ev+0x2cc>)
 800768e:	4413      	add	r3, r2
 8007690:	4618      	mov	r0, r3
 8007692:	f002 ff57 	bl	800a544 <_ZN8alertBarC1Ev>
 8007696:	1d3b      	adds	r3, r7, #4
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	4b77      	ldr	r3, [pc, #476]	; (8007878 <_ZN12MainViewBaseC1Ev+0x2d0>)
 800769c:	4413      	add	r3, r2
 800769e:	4618      	mov	r0, r3
 80076a0:	f7ff fc88 	bl	8006fb4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80076a4:	1d3b      	adds	r3, r7, #4
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	4b74      	ldr	r3, [pc, #464]	; (800787c <_ZN12MainViewBaseC1Ev+0x2d4>)
 80076aa:	4413      	add	r3, r2
 80076ac:	4618      	mov	r0, r3
 80076ae:	f7ff fc81 	bl	8006fb4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 80076b2:	1d3b      	adds	r3, r7, #4
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	4b72      	ldr	r3, [pc, #456]	; (8007880 <_ZN12MainViewBaseC1Ev+0x2d8>)
 80076b8:	4413      	add	r3, r2
 80076ba:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 80076be:	4618      	mov	r0, r3
 80076c0:	f010 fb66 	bl	8017d90 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    __background.setPosition(0, 0, 800, 480);
 80076c4:	1d3b      	adds	r3, r7, #4
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80076cc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80076d0:	9300      	str	r3, [sp, #0]
 80076d2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80076d6:	2200      	movs	r2, #0
 80076d8:	2100      	movs	r1, #0
 80076da:	f7fe fbc6 	bl	8005e6a <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80076de:	1d3b      	adds	r3, r7, #4
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80076e6:	2300      	movs	r3, #0
 80076e8:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 80076ec:	2300      	movs	r3, #0
 80076ee:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
 80076f2:	2300      	movs	r3, #0
 80076f4:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80076f8:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 80076fc:	041b      	lsls	r3, r3, #16
 80076fe:	461a      	mov	r2, r3
 8007700:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8007704:	021b      	lsls	r3, r3, #8
 8007706:	431a      	orrs	r2, r3
 8007708:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800770c:	4313      	orrs	r3, r2
 800770e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007712:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8007716:	4611      	mov	r1, r2
 8007718:	4618      	mov	r0, r3
 800771a:	f7fc fdcf 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 800771e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007722:	4619      	mov	r1, r3
 8007724:	4620      	mov	r0, r4
 8007726:	f7fe fdcd 	bl	80062c4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box1.setPosition(0, 0, 805, 480);
 800772a:	1d3b      	adds	r3, r7, #4
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8007732:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	f240 3325 	movw	r3, #805	; 0x325
 800773c:	2200      	movs	r2, #0
 800773e:	2100      	movs	r1, #0
 8007740:	f7fe fb93 	bl	8005e6a <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8007744:	1d3b      	adds	r3, r7, #4
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800774c:	2300      	movs	r3, #0
 800774e:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8007752:	2300      	movs	r3, #0
 8007754:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8007758:	2300      	movs	r3, #0
 800775a:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
 800775e:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8007762:	041b      	lsls	r3, r3, #16
 8007764:	461a      	mov	r2, r3
 8007766:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800776a:	021b      	lsls	r3, r3, #8
 800776c:	431a      	orrs	r2, r3
 800776e:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8007772:	4313      	orrs	r3, r2
 8007774:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007778:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800777c:	4611      	mov	r1, r2
 800777e:	4618      	mov	r0, r3
 8007780:	f7fc fd9c 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 8007784:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007788:	4619      	mov	r1, r3
 800778a:	4620      	mov	r0, r4
 800778c:	f7fe fd9a 	bl	80062c4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    gearArea.setXY(331, 60);
 8007790:	1d3b      	adds	r3, r7, #4
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	3398      	adds	r3, #152	; 0x98
 8007796:	223c      	movs	r2, #60	; 0x3c
 8007798:	f240 114b 	movw	r1, #331	; 0x14b
 800779c:	4618      	mov	r0, r3
 800779e:	f7fe fba3 	bl	8005ee8 <_ZN8touchgfx8Drawable5setXYEss>
    gearArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80077a2:	1d3b      	adds	r3, r7, #4
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f103 0498 	add.w	r4, r3, #152	; 0x98
 80077aa:	23ff      	movs	r3, #255	; 0xff
 80077ac:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 80077b0:	23ff      	movs	r3, #255	; 0xff
 80077b2:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 80077b6:	23ff      	movs	r3, #255	; 0xff
 80077b8:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 80077bc:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80077c0:	041b      	lsls	r3, r3, #16
 80077c2:	461a      	mov	r2, r3
 80077c4:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80077c8:	021b      	lsls	r3, r3, #8
 80077ca:	431a      	orrs	r2, r3
 80077cc:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80077d0:	4313      	orrs	r3, r2
 80077d2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80077d6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80077da:	4611      	mov	r1, r2
 80077dc:	4618      	mov	r0, r3
 80077de:	f7fc fd6d 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 80077e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80077e6:	461a      	mov	r2, r3
 80077e8:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 80077ec:	f107 0320 	add.w	r3, r7, #32
 80077f0:	601a      	str	r2, [r3, #0]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 80077f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80077f6:	f107 0220 	add.w	r2, r7, #32
 80077fa:	6812      	ldr	r2, [r2, #0]
 80077fc:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80077fe:	bf00      	nop
    gearArea.setLinespacing(0);
 8007800:	1d3b      	adds	r3, r7, #4
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	3398      	adds	r3, #152	; 0x98
 8007806:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800780a:	2300      	movs	r3, #0
 800780c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 8007810:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007814:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007818:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 800781a:	bf00      	nop
    Unicode::snprintf(gearAreaBuffer, GEARAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID14).getText());
 800781c:	1d3b      	adds	r3, r7, #4
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4c18      	ldr	r4, [pc, #96]	; (8007884 <_ZN12MainViewBaseC1Ev+0x2dc>)
 8007822:	441c      	add	r4, r3
 8007824:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007828:	210b      	movs	r1, #11
 800782a:	4618      	mov	r0, r3
 800782c:	f7ff fb72 	bl	8006f14 <_ZN8touchgfx9TypedTextC1Et>
 8007830:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007834:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8007838:	4b13      	ldr	r3, [pc, #76]	; (8007888 <_ZN12MainViewBaseC1Ev+0x2e0>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d105      	bne.n	800784c <_ZN12MainViewBaseC1Ev+0x2a4>
 8007840:	4b12      	ldr	r3, [pc, #72]	; (800788c <_ZN12MainViewBaseC1Ev+0x2e4>)
 8007842:	4a13      	ldr	r2, [pc, #76]	; (8007890 <_ZN12MainViewBaseC1Ev+0x2e8>)
 8007844:	21ae      	movs	r1, #174	; 0xae
 8007846:	4813      	ldr	r0, [pc, #76]	; (8007894 <_ZN12MainViewBaseC1Ev+0x2ec>)
 8007848:	f01f f8ba 	bl	80269c0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800784c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007850:	889a      	ldrh	r2, [r3, #4]
 8007852:	4b11      	ldr	r3, [pc, #68]	; (8007898 <_ZN12MainViewBaseC1Ev+0x2f0>)
 8007854:	881b      	ldrh	r3, [r3, #0]
 8007856:	429a      	cmp	r2, r3
 8007858:	d322      	bcc.n	80078a0 <_ZN12MainViewBaseC1Ev+0x2f8>
 800785a:	4b10      	ldr	r3, [pc, #64]	; (800789c <_ZN12MainViewBaseC1Ev+0x2f4>)
 800785c:	4a0c      	ldr	r2, [pc, #48]	; (8007890 <_ZN12MainViewBaseC1Ev+0x2e8>)
 800785e:	21af      	movs	r1, #175	; 0xaf
 8007860:	480c      	ldr	r0, [pc, #48]	; (8007894 <_ZN12MainViewBaseC1Ev+0x2ec>)
 8007862:	f01f f8ad 	bl	80269c0 <__assert_func>
 8007866:	bf00      	nop
 8007868:	0802c4d8 	.word	0x0802c4d8
 800786c:	00017858 	.word	0x00017858
 8007870:	0001f514 	.word	0x0001f514
 8007874:	0001f604 	.word	0x0001f604
 8007878:	0001f6f4 	.word	0x0001f6f4
 800787c:	0001f734 	.word	0x0001f734
 8007880:	0001f7dc 	.word	0x0001f7dc
 8007884:	0001f774 	.word	0x0001f774
 8007888:	200567f0 	.word	0x200567f0
 800788c:	0802b9d0 	.word	0x0802b9d0
 8007890:	0802ba14 	.word	0x0802ba14
 8007894:	0802ba44 	.word	0x0802ba44
 8007898:	200567f4 	.word	0x200567f4
 800789c:	0802ba8c 	.word	0x0802ba8c
    }
 80078a0:	bf00      	nop
        return texts->getText(typedTextId);
 80078a2:	4bd4      	ldr	r3, [pc, #848]	; (8007bf4 <_ZN12MainViewBaseC1Ev+0x64c>)
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80078aa:	889b      	ldrh	r3, [r3, #4]
 80078ac:	4619      	mov	r1, r3
 80078ae:	4610      	mov	r0, r2
 80078b0:	f001 fba2 	bl	8008ff8 <_ZNK8touchgfx5Texts7getTextEt>
 80078b4:	4603      	mov	r3, r0
 80078b6:	bf00      	nop
 80078b8:	4acf      	ldr	r2, [pc, #828]	; (8007bf8 <_ZN12MainViewBaseC1Ev+0x650>)
 80078ba:	2102      	movs	r1, #2
 80078bc:	4620      	mov	r0, r4
 80078be:	f014 ff73 	bl	801c7a8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80078c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7fe fd2c 	bl	8006324 <_ZN8touchgfx9TypedTextD1Ev>
    gearArea.setWildcard(gearAreaBuffer);
 80078cc:	1d3b      	adds	r3, r7, #4
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f103 0098 	add.w	r0, r3, #152	; 0x98
 80078d4:	1d3b      	adds	r3, r7, #4
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	4bc8      	ldr	r3, [pc, #800]	; (8007bfc <_ZN12MainViewBaseC1Ev+0x654>)
 80078da:	4413      	add	r3, r2
 80078dc:	4619      	mov	r1, r3
 80078de:	f7ff fb7f 	bl	8006fe0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    gearArea.resizeToCurrentText();
 80078e2:	1d3b      	adds	r3, r7, #4
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	3398      	adds	r3, #152	; 0x98
 80078e8:	4618      	mov	r0, r3
 80078ea:	f010 f879 	bl	80179e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    gearArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID1));
 80078ee:	1d3b      	adds	r3, r7, #4
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f103 0498 	add.w	r4, r3, #152	; 0x98
 80078f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80078fa:	2100      	movs	r1, #0
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7ff fb09 	bl	8006f14 <_ZN8touchgfx9TypedTextC1Et>
 8007902:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007906:	4619      	mov	r1, r3
 8007908:	4620      	mov	r0, r4
 800790a:	f010 f886 	bl	8017a1a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800790e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007912:	4618      	mov	r0, r3
 8007914:	f7fe fd06 	bl	8006324 <_ZN8touchgfx9TypedTextD1Ev>

    line1.setPosition(329, 140, 152, 20);
 8007918:	1d3b      	adds	r3, r7, #4
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 8007920:	2314      	movs	r3, #20
 8007922:	9300      	str	r3, [sp, #0]
 8007924:	2398      	movs	r3, #152	; 0x98
 8007926:	228c      	movs	r2, #140	; 0x8c
 8007928:	f240 1149 	movw	r1, #329	; 0x149
 800792c:	f7fe fa9d 	bl	8005e6a <_ZN8touchgfx8Drawable11setPositionEssss>
    line1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007930:	1d3b      	adds	r3, r7, #4
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8007938:	23ff      	movs	r3, #255	; 0xff
 800793a:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
 800793e:	23ff      	movs	r3, #255	; 0xff
 8007940:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 8007944:	23ff      	movs	r3, #255	; 0xff
 8007946:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
 800794a:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 800794e:	041b      	lsls	r3, r3, #16
 8007950:	461a      	mov	r2, r3
 8007952:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8007956:	021b      	lsls	r3, r3, #8
 8007958:	431a      	orrs	r2, r3
 800795a:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 800795e:	4313      	orrs	r3, r2
 8007960:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007964:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007968:	4611      	mov	r1, r2
 800796a:	4618      	mov	r0, r3
 800796c:	f7fc fca6 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 8007970:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007974:	4619      	mov	r1, r3
 8007976:	4620      	mov	r0, r4
 8007978:	f7ff fc6a 	bl	8007250 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    line1.setPainter(line1Painter);
 800797c:	1d3b      	adds	r3, r7, #4
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8007984:	1d3b      	adds	r3, r7, #4
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800798c:	4619      	mov	r1, r3
 800798e:	4610      	mov	r0, r2
 8007990:	f00f fa9c 	bl	8016ecc <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line1.setStart(0, 0);
 8007994:	1d3b      	adds	r3, r7, #4
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	33d8      	adds	r3, #216	; 0xd8
 800799a:	2200      	movs	r2, #0
 800799c:	2100      	movs	r1, #0
 800799e:	4618      	mov	r0, r3
 80079a0:	f000 fcb8 	bl	8008314 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1.setEnd(150, 0);
 80079a4:	1d3b      	adds	r3, r7, #4
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	33d8      	adds	r3, #216	; 0xd8
 80079aa:	2200      	movs	r2, #0
 80079ac:	2196      	movs	r1, #150	; 0x96
 80079ae:	4618      	mov	r0, r3
 80079b0:	f000 fcd6 	bl	8008360 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1.setLineWidth(4);
 80079b4:	1d3b      	adds	r3, r7, #4
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	33d8      	adds	r3, #216	; 0xd8
 80079ba:	2104      	movs	r1, #4
 80079bc:	4618      	mov	r0, r3
 80079be:	f000 fcf5 	bl	80083ac <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 80079c2:	1d3b      	adds	r3, r7, #4
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	33d8      	adds	r3, #216	; 0xd8
 80079c8:	2101      	movs	r1, #1
 80079ca:	4618      	mov	r0, r3
 80079cc:	f00f fda0 	bl	8017510 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    rpmArea.setPosition(298, 71, 212, 69);
 80079d0:	1d3b      	adds	r3, r7, #4
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f503 70b2 	add.w	r0, r3, #356	; 0x164
 80079d8:	2345      	movs	r3, #69	; 0x45
 80079da:	9300      	str	r3, [sp, #0]
 80079dc:	23d4      	movs	r3, #212	; 0xd4
 80079de:	2247      	movs	r2, #71	; 0x47
 80079e0:	f44f 7195 	mov.w	r1, #298	; 0x12a
 80079e4:	f7fe fa41 	bl	8005e6a <_ZN8touchgfx8Drawable11setPositionEssss>
    rpmArea.setColor(touchgfx::Color::getColorFromRGB(0, 102, 255));
 80079e8:	1d3b      	adds	r3, r7, #4
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f503 74b2 	add.w	r4, r3, #356	; 0x164
 80079f0:	2300      	movs	r3, #0
 80079f2:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 80079f6:	2366      	movs	r3, #102	; 0x66
 80079f8:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
 80079fc:	23ff      	movs	r3, #255	; 0xff
 80079fe:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
 8007a02:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8007a06:	041b      	lsls	r3, r3, #16
 8007a08:	461a      	mov	r2, r3
 8007a0a:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8007a0e:	021b      	lsls	r3, r3, #8
 8007a10:	431a      	orrs	r2, r3
 8007a12:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8007a16:	4313      	orrs	r3, r2
 8007a18:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007a1c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007a20:	4611      	mov	r1, r2
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7fc fc4a 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 8007a28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 8007a32:	f107 031c 	add.w	r3, r7, #28
 8007a36:	601a      	str	r2, [r3, #0]
        this->color = color;
 8007a38:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007a3c:	f107 021c 	add.w	r2, r7, #28
 8007a40:	6812      	ldr	r2, [r2, #0]
 8007a42:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8007a44:	bf00      	nop
    rpmArea.setLinespacing(0);
 8007a46:	1d3b      	adds	r3, r7, #4
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a52:	2300      	movs	r3, #0
 8007a54:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
        linespace = space;
 8007a58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a5c:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 8007a60:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8007a62:	bf00      	nop
    Unicode::snprintf(rpmAreaBuffer, RPMAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID13).getText());
 8007a64:	1d3b      	adds	r3, r7, #4
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4c65      	ldr	r4, [pc, #404]	; (8007c00 <_ZN12MainViewBaseC1Ev+0x658>)
 8007a6a:	441c      	add	r4, r3
 8007a6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007a70:	210a      	movs	r1, #10
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7ff fa4e 	bl	8006f14 <_ZN8touchgfx9TypedTextC1Et>
 8007a78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007a7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8007a80:	4b60      	ldr	r3, [pc, #384]	; (8007c04 <_ZN12MainViewBaseC1Ev+0x65c>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d105      	bne.n	8007a94 <_ZN12MainViewBaseC1Ev+0x4ec>
 8007a88:	4b5f      	ldr	r3, [pc, #380]	; (8007c08 <_ZN12MainViewBaseC1Ev+0x660>)
 8007a8a:	4a60      	ldr	r2, [pc, #384]	; (8007c0c <_ZN12MainViewBaseC1Ev+0x664>)
 8007a8c:	21ae      	movs	r1, #174	; 0xae
 8007a8e:	4860      	ldr	r0, [pc, #384]	; (8007c10 <_ZN12MainViewBaseC1Ev+0x668>)
 8007a90:	f01e ff96 	bl	80269c0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8007a94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a98:	889a      	ldrh	r2, [r3, #4]
 8007a9a:	4b5e      	ldr	r3, [pc, #376]	; (8007c14 <_ZN12MainViewBaseC1Ev+0x66c>)
 8007a9c:	881b      	ldrh	r3, [r3, #0]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d305      	bcc.n	8007aae <_ZN12MainViewBaseC1Ev+0x506>
 8007aa2:	4b5d      	ldr	r3, [pc, #372]	; (8007c18 <_ZN12MainViewBaseC1Ev+0x670>)
 8007aa4:	4a59      	ldr	r2, [pc, #356]	; (8007c0c <_ZN12MainViewBaseC1Ev+0x664>)
 8007aa6:	21af      	movs	r1, #175	; 0xaf
 8007aa8:	4859      	ldr	r0, [pc, #356]	; (8007c10 <_ZN12MainViewBaseC1Ev+0x668>)
 8007aaa:	f01e ff89 	bl	80269c0 <__assert_func>
    }
 8007aae:	bf00      	nop
        return texts->getText(typedTextId);
 8007ab0:	4b50      	ldr	r3, [pc, #320]	; (8007bf4 <_ZN12MainViewBaseC1Ev+0x64c>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8007ab6:	4611      	mov	r1, r2
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f001 fa9d 	bl	8008ff8 <_ZNK8touchgfx5Texts7getTextEt>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	bf00      	nop
 8007ac2:	4a4d      	ldr	r2, [pc, #308]	; (8007bf8 <_ZN12MainViewBaseC1Ev+0x650>)
 8007ac4:	210a      	movs	r1, #10
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	f014 fe6e 	bl	801c7a8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8007acc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7fe fc27 	bl	8006324 <_ZN8touchgfx9TypedTextD1Ev>
    rpmArea.setWildcard(rpmAreaBuffer);
 8007ad6:	1d3b      	adds	r3, r7, #4
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f503 70b2 	add.w	r0, r3, #356	; 0x164
 8007ade:	1d3b      	adds	r3, r7, #4
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	4b47      	ldr	r3, [pc, #284]	; (8007c00 <_ZN12MainViewBaseC1Ev+0x658>)
 8007ae4:	4413      	add	r3, r2
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	f7ff fa7a 	bl	8006fe0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpmArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID2));
 8007aec:	1d3b      	adds	r3, r7, #4
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f503 74b2 	add.w	r4, r3, #356	; 0x164
 8007af4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007af8:	2101      	movs	r1, #1
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7ff fa0a 	bl	8006f14 <_ZN8touchgfx9TypedTextC1Et>
 8007b00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007b04:	4619      	mov	r1, r3
 8007b06:	4620      	mov	r0, r4
 8007b08:	f00f ff87 	bl	8017a1a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007b0c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7fe fc07 	bl	8006324 <_ZN8touchgfx9TypedTextD1Ev>

    battArea.setPosition(14, 82, 240, 49);
 8007b16:	1d3b      	adds	r3, r7, #4
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f503 70d2 	add.w	r0, r3, #420	; 0x1a4
 8007b1e:	2331      	movs	r3, #49	; 0x31
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	23f0      	movs	r3, #240	; 0xf0
 8007b24:	2252      	movs	r2, #82	; 0x52
 8007b26:	210e      	movs	r1, #14
 8007b28:	f7fe f99f 	bl	8005e6a <_ZN8touchgfx8Drawable11setPositionEssss>
    battArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007b2c:	1d3b      	adds	r3, r7, #4
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f503 74d2 	add.w	r4, r3, #420	; 0x1a4
 8007b34:	23ff      	movs	r3, #255	; 0xff
 8007b36:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
 8007b3a:	23ff      	movs	r3, #255	; 0xff
 8007b3c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8007b40:	23ff      	movs	r3, #255	; 0xff
 8007b42:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
 8007b46:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007b4a:	041b      	lsls	r3, r3, #16
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 8007b52:	021b      	lsls	r3, r3, #8
 8007b54:	431a      	orrs	r2, r3
 8007b56:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007b60:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8007b64:	4611      	mov	r1, r2
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7fc fba8 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 8007b6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007b70:	461a      	mov	r2, r3
 8007b72:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
 8007b76:	f107 0318 	add.w	r3, r7, #24
 8007b7a:	601a      	str	r2, [r3, #0]
        this->color = color;
 8007b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b80:	f107 0218 	add.w	r2, r7, #24
 8007b84:	6812      	ldr	r2, [r2, #0]
 8007b86:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8007b88:	bf00      	nop
    battArea.setLinespacing(0);
 8007b8a:	1d3b      	adds	r3, r7, #4
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8007b92:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007b96:	2300      	movs	r3, #0
 8007b98:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
        linespace = space;
 8007b9c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007ba0:	f8b7 20ea 	ldrh.w	r2, [r7, #234]	; 0xea
 8007ba4:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8007ba6:	bf00      	nop
    Unicode::snprintf(battAreaBuffer, BATTAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID9).getText());
 8007ba8:	1d3b      	adds	r3, r7, #4
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4c1b      	ldr	r4, [pc, #108]	; (8007c1c <_ZN12MainViewBaseC1Ev+0x674>)
 8007bae:	441c      	add	r4, r3
 8007bb0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007bb4:	2108      	movs	r1, #8
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7ff f9ac 	bl	8006f14 <_ZN8touchgfx9TypedTextC1Et>
 8007bbc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007bc0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8007bc4:	4b0f      	ldr	r3, [pc, #60]	; (8007c04 <_ZN12MainViewBaseC1Ev+0x65c>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d105      	bne.n	8007bd8 <_ZN12MainViewBaseC1Ev+0x630>
 8007bcc:	4b0e      	ldr	r3, [pc, #56]	; (8007c08 <_ZN12MainViewBaseC1Ev+0x660>)
 8007bce:	4a0f      	ldr	r2, [pc, #60]	; (8007c0c <_ZN12MainViewBaseC1Ev+0x664>)
 8007bd0:	21ae      	movs	r1, #174	; 0xae
 8007bd2:	480f      	ldr	r0, [pc, #60]	; (8007c10 <_ZN12MainViewBaseC1Ev+0x668>)
 8007bd4:	f01e fef4 	bl	80269c0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8007bd8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007bdc:	889a      	ldrh	r2, [r3, #4]
 8007bde:	4b0d      	ldr	r3, [pc, #52]	; (8007c14 <_ZN12MainViewBaseC1Ev+0x66c>)
 8007be0:	881b      	ldrh	r3, [r3, #0]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d31c      	bcc.n	8007c20 <_ZN12MainViewBaseC1Ev+0x678>
 8007be6:	4b0c      	ldr	r3, [pc, #48]	; (8007c18 <_ZN12MainViewBaseC1Ev+0x670>)
 8007be8:	4a08      	ldr	r2, [pc, #32]	; (8007c0c <_ZN12MainViewBaseC1Ev+0x664>)
 8007bea:	21af      	movs	r1, #175	; 0xaf
 8007bec:	4808      	ldr	r0, [pc, #32]	; (8007c10 <_ZN12MainViewBaseC1Ev+0x668>)
 8007bee:	f01e fee7 	bl	80269c0 <__assert_func>
 8007bf2:	bf00      	nop
 8007bf4:	200567fc 	.word	0x200567fc
 8007bf8:	0802bae0 	.word	0x0802bae0
 8007bfc:	0001f774 	.word	0x0001f774
 8007c00:	0001f778 	.word	0x0001f778
 8007c04:	200567f0 	.word	0x200567f0
 8007c08:	0802b9d0 	.word	0x0802b9d0
 8007c0c:	0802ba14 	.word	0x0802ba14
 8007c10:	0802ba44 	.word	0x0802ba44
 8007c14:	200567f4 	.word	0x200567f4
 8007c18:	0802ba8c 	.word	0x0802ba8c
 8007c1c:	0001f78c 	.word	0x0001f78c
    }
 8007c20:	bf00      	nop
        return texts->getText(typedTextId);
 8007c22:	4bc1      	ldr	r3, [pc, #772]	; (8007f28 <_ZN12MainViewBaseC1Ev+0x980>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007c2a:	4611      	mov	r1, r2
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f001 f9e3 	bl	8008ff8 <_ZNK8touchgfx5Texts7getTextEt>
 8007c32:	4603      	mov	r3, r0
 8007c34:	bf00      	nop
 8007c36:	4abd      	ldr	r2, [pc, #756]	; (8007f2c <_ZN12MainViewBaseC1Ev+0x984>)
 8007c38:	210a      	movs	r1, #10
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f014 fdb4 	bl	801c7a8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8007c40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7fe fb6d 	bl	8006324 <_ZN8touchgfx9TypedTextD1Ev>
    battArea.setWildcard(battAreaBuffer);
 8007c4a:	1d3b      	adds	r3, r7, #4
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f503 70d2 	add.w	r0, r3, #420	; 0x1a4
 8007c52:	1d3b      	adds	r3, r7, #4
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	4bb6      	ldr	r3, [pc, #728]	; (8007f30 <_ZN12MainViewBaseC1Ev+0x988>)
 8007c58:	4413      	add	r3, r2
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	f7ff f9c0 	bl	8006fe0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    battArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3));
 8007c60:	1d3b      	adds	r3, r7, #4
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f503 74d2 	add.w	r4, r3, #420	; 0x1a4
 8007c68:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007c6c:	2102      	movs	r1, #2
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7ff f950 	bl	8006f14 <_ZN8touchgfx9TypedTextC1Et>
 8007c74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007c78:	4619      	mov	r1, r3
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	f00f fecd 	bl	8017a1a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007c80:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7fe fb4d 	bl	8006324 <_ZN8touchgfx9TypedTextD1Ev>

    oilPressArea.setPosition(544, 82, 240, 49);
 8007c8a:	1d3b      	adds	r3, r7, #4
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f503 70f2 	add.w	r0, r3, #484	; 0x1e4
 8007c92:	2331      	movs	r3, #49	; 0x31
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	23f0      	movs	r3, #240	; 0xf0
 8007c98:	2252      	movs	r2, #82	; 0x52
 8007c9a:	f44f 7108 	mov.w	r1, #544	; 0x220
 8007c9e:	f7fe f8e4 	bl	8005e6a <_ZN8touchgfx8Drawable11setPositionEssss>
    oilPressArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007ca2:	1d3b      	adds	r3, r7, #4
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 8007caa:	23ff      	movs	r3, #255	; 0xff
 8007cac:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 8007cb0:	23ff      	movs	r3, #255	; 0xff
 8007cb2:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
 8007cb6:	23ff      	movs	r3, #255	; 0xff
 8007cb8:	f887 30f5 	strb.w	r3, [r7, #245]	; 0xf5
 8007cbc:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8007cc0:	041b      	lsls	r3, r3, #16
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	f897 30f6 	ldrb.w	r3, [r7, #246]	; 0xf6
 8007cc8:	021b      	lsls	r3, r3, #8
 8007cca:	431a      	orrs	r2, r3
 8007ccc:	f897 30f5 	ldrb.w	r3, [r7, #245]	; 0xf5
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007cd6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007cda:	4611      	mov	r1, r2
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7fc faed 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 8007ce2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
 8007cec:	f107 0314 	add.w	r3, r7, #20
 8007cf0:	601a      	str	r2, [r3, #0]
        this->color = color;
 8007cf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007cf6:	f107 0214 	add.w	r2, r7, #20
 8007cfa:	6812      	ldr	r2, [r2, #0]
 8007cfc:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8007cfe:	bf00      	nop
    oilPressArea.setLinespacing(0);
 8007d00:	1d3b      	adds	r3, r7, #4
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007d08:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
        linespace = space;
 8007d12:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d16:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 8007d1a:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8007d1c:	bf00      	nop
    Unicode::snprintf(oilPressAreaBuffer, OILPRESSAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID16).getText());
 8007d1e:	1d3b      	adds	r3, r7, #4
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4c84      	ldr	r4, [pc, #528]	; (8007f34 <_ZN12MainViewBaseC1Ev+0x98c>)
 8007d24:	441c      	add	r4, r3
 8007d26:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d2a:	210d      	movs	r1, #13
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f7ff f8f1 	bl	8006f14 <_ZN8touchgfx9TypedTextC1Et>
 8007d32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d36:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8007d3a:	4b7f      	ldr	r3, [pc, #508]	; (8007f38 <_ZN12MainViewBaseC1Ev+0x990>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d105      	bne.n	8007d4e <_ZN12MainViewBaseC1Ev+0x7a6>
 8007d42:	4b7e      	ldr	r3, [pc, #504]	; (8007f3c <_ZN12MainViewBaseC1Ev+0x994>)
 8007d44:	4a7e      	ldr	r2, [pc, #504]	; (8007f40 <_ZN12MainViewBaseC1Ev+0x998>)
 8007d46:	21ae      	movs	r1, #174	; 0xae
 8007d48:	487e      	ldr	r0, [pc, #504]	; (8007f44 <_ZN12MainViewBaseC1Ev+0x99c>)
 8007d4a:	f01e fe39 	bl	80269c0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8007d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d52:	889a      	ldrh	r2, [r3, #4]
 8007d54:	4b7c      	ldr	r3, [pc, #496]	; (8007f48 <_ZN12MainViewBaseC1Ev+0x9a0>)
 8007d56:	881b      	ldrh	r3, [r3, #0]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d305      	bcc.n	8007d68 <_ZN12MainViewBaseC1Ev+0x7c0>
 8007d5c:	4b7b      	ldr	r3, [pc, #492]	; (8007f4c <_ZN12MainViewBaseC1Ev+0x9a4>)
 8007d5e:	4a78      	ldr	r2, [pc, #480]	; (8007f40 <_ZN12MainViewBaseC1Ev+0x998>)
 8007d60:	21af      	movs	r1, #175	; 0xaf
 8007d62:	4878      	ldr	r0, [pc, #480]	; (8007f44 <_ZN12MainViewBaseC1Ev+0x99c>)
 8007d64:	f01e fe2c 	bl	80269c0 <__assert_func>
    }
 8007d68:	bf00      	nop
        return texts->getText(typedTextId);
 8007d6a:	4b6f      	ldr	r3, [pc, #444]	; (8007f28 <_ZN12MainViewBaseC1Ev+0x980>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8007d72:	4611      	mov	r1, r2
 8007d74:	4618      	mov	r0, r3
 8007d76:	f001 f93f 	bl	8008ff8 <_ZNK8touchgfx5Texts7getTextEt>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	bf00      	nop
 8007d7e:	4a6b      	ldr	r2, [pc, #428]	; (8007f2c <_ZN12MainViewBaseC1Ev+0x984>)
 8007d80:	210a      	movs	r1, #10
 8007d82:	4620      	mov	r0, r4
 8007d84:	f014 fd10 	bl	801c7a8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8007d88:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7fe fac9 	bl	8006324 <_ZN8touchgfx9TypedTextD1Ev>
    oilPressArea.setWildcard(oilPressAreaBuffer);
 8007d92:	1d3b      	adds	r3, r7, #4
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f503 70f2 	add.w	r0, r3, #484	; 0x1e4
 8007d9a:	1d3b      	adds	r3, r7, #4
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	4b65      	ldr	r3, [pc, #404]	; (8007f34 <_ZN12MainViewBaseC1Ev+0x98c>)
 8007da0:	4413      	add	r3, r2
 8007da2:	4619      	mov	r1, r3
 8007da4:	f7ff f91c 	bl	8006fe0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    oilPressArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4));
 8007da8:	1d3b      	adds	r3, r7, #4
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 8007db0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007db4:	2103      	movs	r1, #3
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7ff f8ac 	bl	8006f14 <_ZN8touchgfx9TypedTextC1Et>
 8007dbc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	f00f fe29 	bl	8017a1a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007dc8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7fe faa9 	bl	8006324 <_ZN8touchgfx9TypedTextD1Ev>

    tempBox1.setXY(11, 248);
 8007dd2:	1d3b      	adds	r3, r7, #4
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8007dda:	22f8      	movs	r2, #248	; 0xf8
 8007ddc:	210b      	movs	r1, #11
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7fe f882 	bl	8005ee8 <_ZN8touchgfx8Drawable5setXYEss>

    tempBox1_1.setXY(11, 329);
 8007de4:	1d3b      	adds	r3, r7, #4
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 8007dec:	4413      	add	r3, r2
 8007dee:	f240 1249 	movw	r2, #329	; 0x149
 8007df2:	210b      	movs	r1, #11
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7fe f877 	bl	8005ee8 <_ZN8touchgfx8Drawable5setXYEss>

    tempBox1_2.setXY(570, 248);
 8007dfa:	1d3b      	adds	r3, r7, #4
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 8007e02:	4413      	add	r3, r2
 8007e04:	22f8      	movs	r2, #248	; 0xf8
 8007e06:	f240 213a 	movw	r1, #570	; 0x23a
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7fe f86c 	bl	8005ee8 <_ZN8touchgfx8Drawable5setXYEss>

    tempBox1_3.setXY(570, 329);
 8007e10:	1d3b      	adds	r3, r7, #4
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	4b4e      	ldr	r3, [pc, #312]	; (8007f50 <_ZN12MainViewBaseC1Ev+0x9a8>)
 8007e16:	4413      	add	r3, r2
 8007e18:	f240 1249 	movw	r2, #329	; 0x149
 8007e1c:	f240 213a 	movw	r1, #570	; 0x23a
 8007e20:	4618      	mov	r0, r3
 8007e22:	f7fe f861 	bl	8005ee8 <_ZN8touchgfx8Drawable5setXYEss>

    alertBar1.setXY(0, 0);
 8007e26:	1d3b      	adds	r3, r7, #4
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	4b4a      	ldr	r3, [pc, #296]	; (8007f54 <_ZN12MainViewBaseC1Ev+0x9ac>)
 8007e2c:	4413      	add	r3, r2
 8007e2e:	2200      	movs	r2, #0
 8007e30:	2100      	movs	r1, #0
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7fe f858 	bl	8005ee8 <_ZN8touchgfx8Drawable5setXYEss>

    alertBar2.setXY(0, 420);
 8007e38:	1d3b      	adds	r3, r7, #4
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	4b46      	ldr	r3, [pc, #280]	; (8007f58 <_ZN12MainViewBaseC1Ev+0x9b0>)
 8007e3e:	4413      	add	r3, r2
 8007e40:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8007e44:	2100      	movs	r1, #0
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7fe f84e 	bl	8005ee8 <_ZN8touchgfx8Drawable5setXYEss>

    cltArea.setPosition(14, 150, 238, 49);
 8007e4c:	1d3b      	adds	r3, r7, #4
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4842      	ldr	r0, [pc, #264]	; (8007f5c <_ZN12MainViewBaseC1Ev+0x9b4>)
 8007e52:	4418      	add	r0, r3
 8007e54:	2331      	movs	r3, #49	; 0x31
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	23ee      	movs	r3, #238	; 0xee
 8007e5a:	2296      	movs	r2, #150	; 0x96
 8007e5c:	210e      	movs	r1, #14
 8007e5e:	f7fe f804 	bl	8005e6a <_ZN8touchgfx8Drawable11setPositionEssss>
    cltArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007e62:	1d3b      	adds	r3, r7, #4
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4c3d      	ldr	r4, [pc, #244]	; (8007f5c <_ZN12MainViewBaseC1Ev+0x9b4>)
 8007e68:	441c      	add	r4, r3
 8007e6a:	23ff      	movs	r3, #255	; 0xff
 8007e6c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
 8007e70:	23ff      	movs	r3, #255	; 0xff
 8007e72:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
 8007e76:	23ff      	movs	r3, #255	; 0xff
 8007e78:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
 8007e7c:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8007e80:	041b      	lsls	r3, r3, #16
 8007e82:	461a      	mov	r2, r3
 8007e84:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8007e88:	021b      	lsls	r3, r3, #8
 8007e8a:	431a      	orrs	r2, r3
 8007e8c:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 8007e90:	4313      	orrs	r3, r2
 8007e92:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007e96:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007e9a:	4611      	mov	r1, r2
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7fc fa0d 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 8007ea2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	f8c7 410c 	str.w	r4, [r7, #268]	; 0x10c
 8007eac:	f107 0310 	add.w	r3, r7, #16
 8007eb0:	601a      	str	r2, [r3, #0]
        this->color = color;
 8007eb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007eb6:	f107 0210 	add.w	r2, r7, #16
 8007eba:	6812      	ldr	r2, [r2, #0]
 8007ebc:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8007ebe:	bf00      	nop
    cltArea.setLinespacing(0);
 8007ec0:	1d3b      	adds	r3, r7, #4
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	4b25      	ldr	r3, [pc, #148]	; (8007f5c <_ZN12MainViewBaseC1Ev+0x9b4>)
 8007ec6:	4413      	add	r3, r2
 8007ec8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007ecc:	2300      	movs	r3, #0
 8007ece:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
        linespace = space;
 8007ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ed6:	f8b7 2112 	ldrh.w	r2, [r7, #274]	; 0x112
 8007eda:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8007edc:	bf00      	nop
    Unicode::snprintf(cltAreaBuffer, CLTAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID11).getText());
 8007ede:	1d3b      	adds	r3, r7, #4
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4c1f      	ldr	r4, [pc, #124]	; (8007f60 <_ZN12MainViewBaseC1Ev+0x9b8>)
 8007ee4:	441c      	add	r4, r3
 8007ee6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007eea:	2109      	movs	r1, #9
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7ff f811 	bl	8006f14 <_ZN8touchgfx9TypedTextC1Et>
 8007ef2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007ef6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8007efa:	4b0f      	ldr	r3, [pc, #60]	; (8007f38 <_ZN12MainViewBaseC1Ev+0x990>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d105      	bne.n	8007f0e <_ZN12MainViewBaseC1Ev+0x966>
 8007f02:	4b0e      	ldr	r3, [pc, #56]	; (8007f3c <_ZN12MainViewBaseC1Ev+0x994>)
 8007f04:	4a0e      	ldr	r2, [pc, #56]	; (8007f40 <_ZN12MainViewBaseC1Ev+0x998>)
 8007f06:	21ae      	movs	r1, #174	; 0xae
 8007f08:	480e      	ldr	r0, [pc, #56]	; (8007f44 <_ZN12MainViewBaseC1Ev+0x99c>)
 8007f0a:	f01e fd59 	bl	80269c0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8007f0e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007f12:	889a      	ldrh	r2, [r3, #4]
 8007f14:	4b0c      	ldr	r3, [pc, #48]	; (8007f48 <_ZN12MainViewBaseC1Ev+0x9a0>)
 8007f16:	881b      	ldrh	r3, [r3, #0]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d323      	bcc.n	8007f64 <_ZN12MainViewBaseC1Ev+0x9bc>
 8007f1c:	4b0b      	ldr	r3, [pc, #44]	; (8007f4c <_ZN12MainViewBaseC1Ev+0x9a4>)
 8007f1e:	4a08      	ldr	r2, [pc, #32]	; (8007f40 <_ZN12MainViewBaseC1Ev+0x998>)
 8007f20:	21af      	movs	r1, #175	; 0xaf
 8007f22:	4808      	ldr	r0, [pc, #32]	; (8007f44 <_ZN12MainViewBaseC1Ev+0x99c>)
 8007f24:	f01e fd4c 	bl	80269c0 <__assert_func>
 8007f28:	200567fc 	.word	0x200567fc
 8007f2c:	0802bae0 	.word	0x0802bae0
 8007f30:	0001f78c 	.word	0x0001f78c
 8007f34:	0001f7a0 	.word	0x0001f7a0
 8007f38:	200567f0 	.word	0x200567f0
 8007f3c:	0802b9d0 	.word	0x0802b9d0
 8007f40:	0802ba14 	.word	0x0802ba14
 8007f44:	0802ba44 	.word	0x0802ba44
 8007f48:	200567f4 	.word	0x200567f4
 8007f4c:	0802ba8c 	.word	0x0802ba8c
 8007f50:	00017858 	.word	0x00017858
 8007f54:	0001f514 	.word	0x0001f514
 8007f58:	0001f604 	.word	0x0001f604
 8007f5c:	0001f6f4 	.word	0x0001f6f4
 8007f60:	0001f7b4 	.word	0x0001f7b4
    }
 8007f64:	bf00      	nop
        return texts->getText(typedTextId);
 8007f66:	4bb7      	ldr	r3, [pc, #732]	; (8008244 <_ZN12MainViewBaseC1Ev+0xc9c>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007f6e:	4611      	mov	r1, r2
 8007f70:	4618      	mov	r0, r3
 8007f72:	f001 f841 	bl	8008ff8 <_ZNK8touchgfx5Texts7getTextEt>
 8007f76:	4603      	mov	r3, r0
 8007f78:	bf00      	nop
 8007f7a:	4ab3      	ldr	r2, [pc, #716]	; (8008248 <_ZN12MainViewBaseC1Ev+0xca0>)
 8007f7c:	210a      	movs	r1, #10
 8007f7e:	4620      	mov	r0, r4
 8007f80:	f014 fc12 	bl	801c7a8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8007f84:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f7fe f9cb 	bl	8006324 <_ZN8touchgfx9TypedTextD1Ev>
    cltArea.setWildcard(cltAreaBuffer);
 8007f8e:	1d3b      	adds	r3, r7, #4
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	4bae      	ldr	r3, [pc, #696]	; (800824c <_ZN12MainViewBaseC1Ev+0xca4>)
 8007f94:	4413      	add	r3, r2
 8007f96:	1d3a      	adds	r2, r7, #4
 8007f98:	6811      	ldr	r1, [r2, #0]
 8007f9a:	4aad      	ldr	r2, [pc, #692]	; (8008250 <_ZN12MainViewBaseC1Ev+0xca8>)
 8007f9c:	440a      	add	r2, r1
 8007f9e:	4611      	mov	r1, r2
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7ff f81d 	bl	8006fe0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    cltArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID8));
 8007fa6:	1d3b      	adds	r3, r7, #4
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4ca8      	ldr	r4, [pc, #672]	; (800824c <_ZN12MainViewBaseC1Ev+0xca4>)
 8007fac:	441c      	add	r4, r3
 8007fae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007fb2:	2107      	movs	r1, #7
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7fe ffad 	bl	8006f14 <_ZN8touchgfx9TypedTextC1Et>
 8007fba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	f00f fd2a 	bl	8017a1a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007fc6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7fe f9aa 	bl	8006324 <_ZN8touchgfx9TypedTextD1Ev>

    oilTempArea.setPosition(544, 150, 240, 49);
 8007fd0:	1d3b      	adds	r3, r7, #4
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	489f      	ldr	r0, [pc, #636]	; (8008254 <_ZN12MainViewBaseC1Ev+0xcac>)
 8007fd6:	4418      	add	r0, r3
 8007fd8:	2331      	movs	r3, #49	; 0x31
 8007fda:	9300      	str	r3, [sp, #0]
 8007fdc:	23f0      	movs	r3, #240	; 0xf0
 8007fde:	2296      	movs	r2, #150	; 0x96
 8007fe0:	f44f 7108 	mov.w	r1, #544	; 0x220
 8007fe4:	f7fd ff41 	bl	8005e6a <_ZN8touchgfx8Drawable11setPositionEssss>
    oilTempArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007fe8:	1d3b      	adds	r3, r7, #4
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4c99      	ldr	r4, [pc, #612]	; (8008254 <_ZN12MainViewBaseC1Ev+0xcac>)
 8007fee:	441c      	add	r4, r3
 8007ff0:	23ff      	movs	r3, #255	; 0xff
 8007ff2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8007ff6:	23ff      	movs	r3, #255	; 0xff
 8007ff8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8007ffc:	23ff      	movs	r3, #255	; 0xff
 8007ffe:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8008002:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008006:	041b      	lsls	r3, r3, #16
 8008008:	461a      	mov	r2, r3
 800800a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800800e:	021b      	lsls	r3, r3, #8
 8008010:	431a      	orrs	r2, r3
 8008012:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8008016:	4313      	orrs	r3, r2
 8008018:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800801c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008020:	4611      	mov	r1, r2
 8008022:	4618      	mov	r0, r3
 8008024:	f7fc f94a 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 8008028:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800802c:	461a      	mov	r2, r3
 800802e:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8008032:	f107 030c 	add.w	r3, r7, #12
 8008036:	601a      	str	r2, [r3, #0]
        this->color = color;
 8008038:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800803c:	f107 020c 	add.w	r2, r7, #12
 8008040:	6812      	ldr	r2, [r2, #0]
 8008042:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8008044:	bf00      	nop
    oilTempArea.setLinespacing(0);
 8008046:	1d3b      	adds	r3, r7, #4
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	4b82      	ldr	r3, [pc, #520]	; (8008254 <_ZN12MainViewBaseC1Ev+0xcac>)
 800804c:	4413      	add	r3, r2
 800804e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008052:	2300      	movs	r3, #0
 8008054:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
        linespace = space;
 8008058:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800805c:	f8b7 2126 	ldrh.w	r2, [r7, #294]	; 0x126
 8008060:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8008062:	bf00      	nop
    Unicode::snprintf(oilTempAreaBuffer, OILTEMPAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID17).getText());
 8008064:	1d3b      	adds	r3, r7, #4
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4c7b      	ldr	r4, [pc, #492]	; (8008258 <_ZN12MainViewBaseC1Ev+0xcb0>)
 800806a:	441c      	add	r4, r3
 800806c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008070:	210e      	movs	r1, #14
 8008072:	4618      	mov	r0, r3
 8008074:	f7fe ff4e 	bl	8006f14 <_ZN8touchgfx9TypedTextC1Et>
 8008078:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800807c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8008080:	4b76      	ldr	r3, [pc, #472]	; (800825c <_ZN12MainViewBaseC1Ev+0xcb4>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d105      	bne.n	8008094 <_ZN12MainViewBaseC1Ev+0xaec>
 8008088:	4b75      	ldr	r3, [pc, #468]	; (8008260 <_ZN12MainViewBaseC1Ev+0xcb8>)
 800808a:	4a76      	ldr	r2, [pc, #472]	; (8008264 <_ZN12MainViewBaseC1Ev+0xcbc>)
 800808c:	21ae      	movs	r1, #174	; 0xae
 800808e:	4876      	ldr	r0, [pc, #472]	; (8008268 <_ZN12MainViewBaseC1Ev+0xcc0>)
 8008090:	f01e fc96 	bl	80269c0 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8008094:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008098:	889a      	ldrh	r2, [r3, #4]
 800809a:	4b74      	ldr	r3, [pc, #464]	; (800826c <_ZN12MainViewBaseC1Ev+0xcc4>)
 800809c:	881b      	ldrh	r3, [r3, #0]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d305      	bcc.n	80080ae <_ZN12MainViewBaseC1Ev+0xb06>
 80080a2:	4b73      	ldr	r3, [pc, #460]	; (8008270 <_ZN12MainViewBaseC1Ev+0xcc8>)
 80080a4:	4a6f      	ldr	r2, [pc, #444]	; (8008264 <_ZN12MainViewBaseC1Ev+0xcbc>)
 80080a6:	21af      	movs	r1, #175	; 0xaf
 80080a8:	486f      	ldr	r0, [pc, #444]	; (8008268 <_ZN12MainViewBaseC1Ev+0xcc0>)
 80080aa:	f01e fc89 	bl	80269c0 <__assert_func>
    }
 80080ae:	bf00      	nop
        return texts->getText(typedTextId);
 80080b0:	4b64      	ldr	r3, [pc, #400]	; (8008244 <_ZN12MainViewBaseC1Ev+0xc9c>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80080b8:	4611      	mov	r1, r2
 80080ba:	4618      	mov	r0, r3
 80080bc:	f000 ff9c 	bl	8008ff8 <_ZNK8touchgfx5Texts7getTextEt>
 80080c0:	4603      	mov	r3, r0
 80080c2:	bf00      	nop
 80080c4:	4a60      	ldr	r2, [pc, #384]	; (8008248 <_ZN12MainViewBaseC1Ev+0xca0>)
 80080c6:	210a      	movs	r1, #10
 80080c8:	4620      	mov	r0, r4
 80080ca:	f014 fb6d 	bl	801c7a8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80080ce:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7fe f926 	bl	8006324 <_ZN8touchgfx9TypedTextD1Ev>
    oilTempArea.setWildcard(oilTempAreaBuffer);
 80080d8:	1d3b      	adds	r3, r7, #4
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	4b5d      	ldr	r3, [pc, #372]	; (8008254 <_ZN12MainViewBaseC1Ev+0xcac>)
 80080de:	4413      	add	r3, r2
 80080e0:	1d3a      	adds	r2, r7, #4
 80080e2:	6811      	ldr	r1, [r2, #0]
 80080e4:	4a5c      	ldr	r2, [pc, #368]	; (8008258 <_ZN12MainViewBaseC1Ev+0xcb0>)
 80080e6:	440a      	add	r2, r1
 80080e8:	4611      	mov	r1, r2
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7fe ff78 	bl	8006fe0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    oilTempArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID15));
 80080f0:	1d3b      	adds	r3, r7, #4
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4c57      	ldr	r4, [pc, #348]	; (8008254 <_ZN12MainViewBaseC1Ev+0xcac>)
 80080f6:	441c      	add	r4, r3
 80080f8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80080fc:	210c      	movs	r1, #12
 80080fe:	4618      	mov	r0, r3
 8008100:	f7fe ff08 	bl	8006f14 <_ZN8touchgfx9TypedTextC1Et>
 8008104:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008108:	4619      	mov	r1, r3
 800810a:	4620      	mov	r0, r4
 800810c:	f00f fc85 	bl	8017a1a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008110:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008114:	4618      	mov	r0, r3
 8008116:	f7fe f905 	bl	8006324 <_ZN8touchgfx9TypedTextD1Ev>

    add(__background);
 800811a:	1d3b      	adds	r3, r7, #4
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	1d3b      	adds	r3, r7, #4
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	3340      	adds	r3, #64	; 0x40
 8008124:	4619      	mov	r1, r3
 8008126:	4610      	mov	r0, r2
 8008128:	f7fe f842 	bl	80061b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box1);
 800812c:	1d3b      	adds	r3, r7, #4
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	1d3b      	adds	r3, r7, #4
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	336c      	adds	r3, #108	; 0x6c
 8008136:	4619      	mov	r1, r3
 8008138:	4610      	mov	r0, r2
 800813a:	f7fe f839 	bl	80061b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(gearArea);
 800813e:	1d3b      	adds	r3, r7, #4
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	1d3b      	adds	r3, r7, #4
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	3398      	adds	r3, #152	; 0x98
 8008148:	4619      	mov	r1, r3
 800814a:	4610      	mov	r0, r2
 800814c:	f7fe f830 	bl	80061b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line1);
 8008150:	1d3b      	adds	r3, r7, #4
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	1d3b      	adds	r3, r7, #4
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	33d8      	adds	r3, #216	; 0xd8
 800815a:	4619      	mov	r1, r3
 800815c:	4610      	mov	r0, r2
 800815e:	f7fe f827 	bl	80061b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpmArea);
 8008162:	1d3b      	adds	r3, r7, #4
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	1d3b      	adds	r3, r7, #4
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800816e:	4619      	mov	r1, r3
 8008170:	4610      	mov	r0, r2
 8008172:	f7fe f81d 	bl	80061b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(battArea);
 8008176:	1d3b      	adds	r3, r7, #4
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	1d3b      	adds	r3, r7, #4
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8008182:	4619      	mov	r1, r3
 8008184:	4610      	mov	r0, r2
 8008186:	f7fe f813 	bl	80061b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oilPressArea);
 800818a:	1d3b      	adds	r3, r7, #4
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	1d3b      	adds	r3, r7, #4
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008196:	4619      	mov	r1, r3
 8008198:	4610      	mov	r0, r2
 800819a:	f7fe f809 	bl	80061b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1);
 800819e:	1d3b      	adds	r3, r7, #4
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	1d3b      	adds	r3, r7, #4
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80081aa:	4619      	mov	r1, r3
 80081ac:	4610      	mov	r0, r2
 80081ae:	f7fd ffff 	bl	80061b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1_1);
 80081b2:	1d3b      	adds	r3, r7, #4
 80081b4:	6818      	ldr	r0, [r3, #0]
 80081b6:	1d3b      	adds	r3, r7, #4
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 80081be:	4413      	add	r3, r2
 80081c0:	4619      	mov	r1, r3
 80081c2:	f7fd fff5 	bl	80061b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1_2);
 80081c6:	1d3b      	adds	r3, r7, #4
 80081c8:	6818      	ldr	r0, [r3, #0]
 80081ca:	1d3b      	adds	r3, r7, #4
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 80081d2:	4413      	add	r3, r2
 80081d4:	4619      	mov	r1, r3
 80081d6:	f7fd ffeb 	bl	80061b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1_3);
 80081da:	1d3b      	adds	r3, r7, #4
 80081dc:	6818      	ldr	r0, [r3, #0]
 80081de:	1d3b      	adds	r3, r7, #4
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	4b24      	ldr	r3, [pc, #144]	; (8008274 <_ZN12MainViewBaseC1Ev+0xccc>)
 80081e4:	4413      	add	r3, r2
 80081e6:	4619      	mov	r1, r3
 80081e8:	f7fd ffe2 	bl	80061b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(alertBar1);
 80081ec:	1d3b      	adds	r3, r7, #4
 80081ee:	6818      	ldr	r0, [r3, #0]
 80081f0:	1d3b      	adds	r3, r7, #4
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	4b20      	ldr	r3, [pc, #128]	; (8008278 <_ZN12MainViewBaseC1Ev+0xcd0>)
 80081f6:	4413      	add	r3, r2
 80081f8:	4619      	mov	r1, r3
 80081fa:	f7fd ffd9 	bl	80061b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(alertBar2);
 80081fe:	1d3b      	adds	r3, r7, #4
 8008200:	6818      	ldr	r0, [r3, #0]
 8008202:	1d3b      	adds	r3, r7, #4
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	4b1d      	ldr	r3, [pc, #116]	; (800827c <_ZN12MainViewBaseC1Ev+0xcd4>)
 8008208:	4413      	add	r3, r2
 800820a:	4619      	mov	r1, r3
 800820c:	f7fd ffd0 	bl	80061b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(cltArea);
 8008210:	1d3b      	adds	r3, r7, #4
 8008212:	6818      	ldr	r0, [r3, #0]
 8008214:	1d3b      	adds	r3, r7, #4
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	4b0c      	ldr	r3, [pc, #48]	; (800824c <_ZN12MainViewBaseC1Ev+0xca4>)
 800821a:	4413      	add	r3, r2
 800821c:	4619      	mov	r1, r3
 800821e:	f7fd ffc7 	bl	80061b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oilTempArea);
 8008222:	1d3b      	adds	r3, r7, #4
 8008224:	6818      	ldr	r0, [r3, #0]
 8008226:	1d3b      	adds	r3, r7, #4
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	4b0a      	ldr	r3, [pc, #40]	; (8008254 <_ZN12MainViewBaseC1Ev+0xcac>)
 800822c:	4413      	add	r3, r2
 800822e:	4619      	mov	r1, r3
 8008230:	f7fd ffbe 	bl	80061b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8008234:	1d3b      	adds	r3, r7, #4
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4618      	mov	r0, r3
 800823a:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800823e:	46bd      	mov	sp, r7
 8008240:	bd90      	pop	{r4, r7, pc}
 8008242:	bf00      	nop
 8008244:	200567fc 	.word	0x200567fc
 8008248:	0802bae0 	.word	0x0802bae0
 800824c:	0001f6f4 	.word	0x0001f6f4
 8008250:	0001f7b4 	.word	0x0001f7b4
 8008254:	0001f734 	.word	0x0001f734
 8008258:	0001f7c8 	.word	0x0001f7c8
 800825c:	200567f0 	.word	0x200567f0
 8008260:	0802b9d0 	.word	0x0802b9d0
 8008264:	0802ba14 	.word	0x0802ba14
 8008268:	0802ba44 	.word	0x0802ba44
 800826c:	200567f4 	.word	0x200567f4
 8008270:	0802ba8c 	.word	0x0802ba8c
 8008274:	00017858 	.word	0x00017858
 8008278:	0001f514 	.word	0x0001f514
 800827c:	0001f604 	.word	0x0001f604

08008280 <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
    tempBox1.initialize();
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800828e:	4618      	mov	r0, r3
 8008290:	f002 fc40 	bl	800ab14 <_ZN7tempBox10initializeEv>
    tempBox1_1.initialize();
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	f647 63e0 	movw	r3, #32480	; 0x7ee0
 800829a:	4413      	add	r3, r2
 800829c:	4618      	mov	r0, r3
 800829e:	f002 fc39 	bl	800ab14 <_ZN7tempBox10initializeEv>
    tempBox1_2.initialize();
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	f64f 339c 	movw	r3, #64412	; 0xfb9c
 80082a8:	4413      	add	r3, r2
 80082aa:	4618      	mov	r0, r3
 80082ac:	f002 fc32 	bl	800ab14 <_ZN7tempBox10initializeEv>
    tempBox1_3.initialize();
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	4b0a      	ldr	r3, [pc, #40]	; (80082dc <_ZN12MainViewBase11setupScreenEv+0x5c>)
 80082b4:	4413      	add	r3, r2
 80082b6:	4618      	mov	r0, r3
 80082b8:	f002 fc2c 	bl	800ab14 <_ZN7tempBox10initializeEv>
    alertBar1.initialize();
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	4b08      	ldr	r3, [pc, #32]	; (80082e0 <_ZN12MainViewBase11setupScreenEv+0x60>)
 80082c0:	4413      	add	r3, r2
 80082c2:	4618      	mov	r0, r3
 80082c4:	f002 f974 	bl	800a5b0 <_ZN8alertBar10initializeEv>
    alertBar2.initialize();
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	4b06      	ldr	r3, [pc, #24]	; (80082e4 <_ZN12MainViewBase11setupScreenEv+0x64>)
 80082cc:	4413      	add	r3, r2
 80082ce:	4618      	mov	r0, r3
 80082d0:	f002 f96e 	bl	800a5b0 <_ZN8alertBar10initializeEv>
}
 80082d4:	bf00      	nop
 80082d6:	3708      	adds	r7, #8
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	00017858 	.word	0x00017858
 80082e0:	0001f514 	.word	0x0001f514
 80082e4:	0001f604 	.word	0x0001f604

080082e8 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View()
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
        : presenter(0)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4618      	mov	r0, r3
 80082f4:	f012 fdc0 	bl	801ae78 <_ZN8touchgfx6ScreenC1Ev>
 80082f8:	4a05      	ldr	r2, [pc, #20]	; (8008310 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	601a      	str	r2, [r3, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4618      	mov	r0, r3
 8008308:	3708      	adds	r7, #8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	0802c50c 	.word	0x0802c50c

08008314 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 8008314:	b590      	push	{r4, r7, lr}
 8008316:	b089      	sub	sp, #36	; 0x24
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	015a      	lsls	r2, r3, #5
 8008328:	f107 0314 	add.w	r3, r7, #20
 800832c:	4611      	mov	r1, r2
 800832e:	4618      	mov	r0, r3
 8008330:	f7fe feaa 	bl	8007088 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	461c      	mov	r4, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	61fb      	str	r3, [r7, #28]
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	015a      	lsls	r2, r3, #5
 8008340:	f107 0310 	add.w	r3, r7, #16
 8008344:	4611      	mov	r1, r2
 8008346:	4618      	mov	r0, r3
 8008348:	f7fe fe9e 	bl	8007088 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800834c:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 800834e:	461a      	mov	r2, r3
 8008350:	4621      	mov	r1, r4
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f00f f8c6 	bl	80174e4 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 8008358:	bf00      	nop
 800835a:	3724      	adds	r7, #36	; 0x24
 800835c:	46bd      	mov	sp, r7
 800835e:	bd90      	pop	{r4, r7, pc}

08008360 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 8008360:	b590      	push	{r4, r7, lr}
 8008362:	b089      	sub	sp, #36	; 0x24
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	61bb      	str	r3, [r7, #24]
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	015a      	lsls	r2, r3, #5
 8008374:	f107 0314 	add.w	r3, r7, #20
 8008378:	4611      	mov	r1, r2
 800837a:	4618      	mov	r0, r3
 800837c:	f7fe fe84 	bl	8007088 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	461c      	mov	r4, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	61fb      	str	r3, [r7, #28]
 8008388:	69fb      	ldr	r3, [r7, #28]
 800838a:	015a      	lsls	r2, r3, #5
 800838c:	f107 0310 	add.w	r3, r7, #16
 8008390:	4611      	mov	r1, r2
 8008392:	4618      	mov	r0, r3
 8008394:	f7fe fe78 	bl	8007088 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8008398:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 800839a:	461a      	mov	r2, r3
 800839c:	4621      	mov	r1, r4
 800839e:	68f8      	ldr	r0, [r7, #12]
 80083a0:	f00f f8ab 	bl	80174fa <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 80083a4:	bf00      	nop
 80083a6:	3724      	adds	r7, #36	; 0x24
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd90      	pop	{r4, r7, pc}

080083ac <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	60fb      	str	r3, [r7, #12]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	015a      	lsls	r2, r3, #5
 80083be:	f107 0308 	add.w	r3, r7, #8
 80083c2:	4611      	mov	r1, r2
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7fe fe5f 	bl	8007088 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80083ca:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 80083cc:	4619      	mov	r1, r3
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f7fe fe75 	bl	80070be <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 80083d4:	bf00      	nop
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <_Z41__static_initialization_and_destruction_0ii>:
 80083dc:	b580      	push	{r7, lr}
 80083de:	b092      	sub	sp, #72	; 0x48
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	f040 8114 	bne.w	8008616 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083f4:	4293      	cmp	r3, r2
 80083f6:	f040 810e 	bne.w	8008616 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 80083fa:	2300      	movs	r3, #0
 80083fc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8008400:	2300      	movs	r3, #0
 8008402:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8008406:	2300      	movs	r3, #0
 8008408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800840c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008410:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008414:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008418:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800841c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008420:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8008424:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008428:	041b      	lsls	r3, r3, #16
 800842a:	461a      	mov	r2, r3
 800842c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008430:	021b      	lsls	r3, r3, #8
 8008432:	431a      	orrs	r2, r3
 8008434:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008438:	4313      	orrs	r3, r2
 800843a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800843e:	f107 0320 	add.w	r3, r7, #32
 8008442:	4611      	mov	r1, r2
 8008444:	4618      	mov	r0, r3
 8008446:	f7fb ff39 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 800844a:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 800844c:	bf00      	nop
 800844e:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 8008450:	4b73      	ldr	r3, [pc, #460]	; (8008620 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8008452:	601a      	str	r2, [r3, #0]
 8008454:	23ff      	movs	r3, #255	; 0xff
 8008456:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800845a:	2300      	movs	r3, #0
 800845c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8008460:	2300      	movs	r3, #0
 8008462:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8008466:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800846a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800846e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008476:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800847a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800847e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008482:	041b      	lsls	r3, r3, #16
 8008484:	461a      	mov	r2, r3
 8008486:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800848a:	021b      	lsls	r3, r3, #8
 800848c:	431a      	orrs	r2, r3
 800848e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008492:	4313      	orrs	r3, r2
 8008494:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008498:	f107 031c 	add.w	r3, r7, #28
 800849c:	4611      	mov	r1, r2
 800849e:	4618      	mov	r0, r3
 80084a0:	f7fb ff0c 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 80084a4:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 80084a6:	bf00      	nop
 80084a8:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 80084aa:	4b5e      	ldr	r3, [pc, #376]	; (8008624 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 80084ac:	601a      	str	r2, [r3, #0]
 80084ae:	2300      	movs	r3, #0
 80084b0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80084b4:	23c0      	movs	r3, #192	; 0xc0
 80084b6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80084ba:	2300      	movs	r3, #0
 80084bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084c0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80084c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80084c8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80084cc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80084d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80084d4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80084d8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80084dc:	041b      	lsls	r3, r3, #16
 80084de:	461a      	mov	r2, r3
 80084e0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80084e4:	021b      	lsls	r3, r3, #8
 80084e6:	431a      	orrs	r2, r3
 80084e8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80084ec:	4313      	orrs	r3, r2
 80084ee:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80084f2:	f107 0318 	add.w	r3, r7, #24
 80084f6:	4611      	mov	r1, r2
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7fb fedf 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 80084fe:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 8008500:	bf00      	nop
 8008502:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 192, 0);
 8008504:	4b48      	ldr	r3, [pc, #288]	; (8008628 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8008506:	601a      	str	r2, [r3, #0]
 8008508:	2300      	movs	r3, #0
 800850a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800850e:	2300      	movs	r3, #0
 8008510:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8008514:	23c0      	movs	r3, #192	; 0xc0
 8008516:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800851a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800851e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8008522:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008526:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800852a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800852e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8008532:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8008536:	041b      	lsls	r3, r3, #16
 8008538:	461a      	mov	r2, r3
 800853a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800853e:	021b      	lsls	r3, r3, #8
 8008540:	431a      	orrs	r2, r3
 8008542:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008546:	4313      	orrs	r3, r2
 8008548:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800854c:	f107 0314 	add.w	r3, r7, #20
 8008550:	4611      	mov	r1, r2
 8008552:	4618      	mov	r0, r3
 8008554:	f7fb feb2 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 8008558:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 800855a:	bf00      	nop
 800855c:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 192);
 800855e:	4b33      	ldr	r3, [pc, #204]	; (800862c <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8008560:	601a      	str	r2, [r3, #0]
 8008562:	23f7      	movs	r3, #247	; 0xf7
 8008564:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8008568:	234c      	movs	r3, #76	; 0x4c
 800856a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 800856e:	2302      	movs	r3, #2
 8008570:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008574:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8008578:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800857c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8008580:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8008584:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008588:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800858c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008590:	041b      	lsls	r3, r3, #16
 8008592:	461a      	mov	r2, r3
 8008594:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8008598:	021b      	lsls	r3, r3, #8
 800859a:	431a      	orrs	r2, r3
 800859c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80085a0:	4313      	orrs	r3, r2
 80085a2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80085a6:	f107 0310 	add.w	r3, r7, #16
 80085aa:	4611      	mov	r1, r2
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7fb fe85 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 80085b2:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 80085b4:	bf00      	nop
 80085b6:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 80085b8:	4b1d      	ldr	r3, [pc, #116]	; (8008630 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 80085ba:	601a      	str	r2, [r3, #0]
 80085bc:	23f7      	movs	r3, #247	; 0xf7
 80085be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80085c2:	23d2      	movs	r3, #210	; 0xd2
 80085c4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80085c8:	2302      	movs	r3, #2
 80085ca:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80085ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80085d2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 80085d6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80085da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085de:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80085e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80085e6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80085ea:	041b      	lsls	r3, r3, #16
 80085ec:	461a      	mov	r2, r3
 80085ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80085f2:	021b      	lsls	r3, r3, #8
 80085f4:	431a      	orrs	r2, r3
 80085f6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80085fa:	4313      	orrs	r3, r2
 80085fc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008600:	f107 030c 	add.w	r3, r7, #12
 8008604:	4611      	mov	r1, r2
 8008606:	4618      	mov	r0, r3
 8008608:	f7fb fe58 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 800860c:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 800860e:	bf00      	nop
 8008610:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 8008612:	4b08      	ldr	r3, [pc, #32]	; (8008634 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8008614:	601a      	str	r2, [r3, #0]
 8008616:	bf00      	nop
 8008618:	3748      	adds	r7, #72	; 0x48
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	2002384c 	.word	0x2002384c
 8008624:	20023850 	.word	0x20023850
 8008628:	20023854 	.word	0x20023854
 800862c:	20023858 	.word	0x20023858
 8008630:	2002385c 	.word	0x2002385c
 8008634:	20023860 	.word	0x20023860

08008638 <_ZN8touchgfx12CanvasWidgetD1Ev>:
 * Class for drawing complex polygons on the display using CanvasWidgetRenderer. The
 * CanvasWidget is used by passing it to a Canvas object, drawing the outline of the
 * object and then having CanvasWidget render the outline on the display using the
 * assigned painter.
 */
class CanvasWidget : public Widget
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	4a05      	ldr	r2, [pc, #20]	; (8008658 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	601a      	str	r2, [r3, #0]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4618      	mov	r0, r3
 800864a:	f7fd fdf5 	bl	8006238 <_ZN8touchgfx6WidgetD1Ev>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4618      	mov	r0, r3
 8008652:	3708      	adds	r7, #8
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	0802d580 	.word	0x0802d580

0800865c <_ZN8touchgfx12CanvasWidgetD0Ev>:
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f7ff ffe7 	bl	8008638 <_ZN8touchgfx12CanvasWidgetD1Ev>
 800866a:	2130      	movs	r1, #48	; 0x30
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f01e f872 	bl	8026756 <_ZdlPvj>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4618      	mov	r0, r3
 8008676:	3708      	adds	r7, #8
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	4a05      	ldr	r2, [pc, #20]	; (800869c <_ZN8touchgfx4LineD1Ev+0x20>)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	601a      	str	r2, [r3, #0]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4618      	mov	r0, r3
 800868e:	f7ff ffd3 	bl	8008638 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4618      	mov	r0, r3
 8008696:	3708      	adds	r7, #8
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}
 800869c:	0802d7a4 	.word	0x0802d7a4

080086a0 <_ZN8touchgfx4LineD0Ev>:
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f7ff ffe7 	bl	800867c <_ZN8touchgfx4LineD1Ev>
 80086ae:	2174      	movs	r1, #116	; 0x74
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f01e f850 	bl	8026756 <_ZdlPvj>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	4618      	mov	r0, r3
 80086ba:	3708      	adds	r7, #8
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <_ZN8touchgfx13PainterRGB888D1Ev>:
class PainterRGB888 : public AbstractPainterRGB888
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	4a05      	ldr	r2, [pc, #20]	; (80086e0 <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	601a      	str	r2, [r3, #0]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7fe fd7b 	bl	80071cc <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4618      	mov	r0, r3
 80086da:	3708      	adds	r7, #8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	0802d4fc 	.word	0x0802d4fc

080086e4 <_ZN8touchgfx13PainterRGB888D0Ev>:
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f7ff ffe7 	bl	80086c0 <_ZN8touchgfx13PainterRGB888D1Ev>
 80086f2:	2118      	movs	r1, #24
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f01e f82e 	bl	8026756 <_ZdlPvj>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4618      	mov	r0, r3
 80086fe:	3708      	adds	r7, #8
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	4a05      	ldr	r2, [pc, #20]	; (8008724 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	601a      	str	r2, [r3, #0]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4618      	mov	r0, r3
 8008716:	f7fd fe69 	bl	80063ec <_ZN8touchgfx8TextAreaD1Ev>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4618      	mov	r0, r3
 800871e:	3708      	adds	r7, #8
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}
 8008724:	0802da54 	.word	0x0802da54

08008728 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f7ff ffe7 	bl	8008704 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8008736:	2140      	movs	r1, #64	; 0x40
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f01e f80c 	bl	8026756 <_ZdlPvj>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4618      	mov	r0, r3
 8008742:	3708      	adds	r7, #8
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <_GLOBAL__sub_I__ZN12MainViewBaseC2Ev>:
 8008748:	b580      	push	{r7, lr}
 800874a:	af00      	add	r7, sp, #0
 800874c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008750:	2001      	movs	r0, #1
 8008752:	f7ff fe43 	bl	80083dc <_Z41__static_initialization_and_destruction_0ii>
 8008756:	bd80      	pop	{r7, pc}

08008758 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 8008764:	4618      	mov	r0, r3
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <__tcf_0>:

touchgfx::GeneratedFont& getFont_JetBrainsMono_Regular_40_4bpp();

touchgfx::GeneratedFont& getFont_JetBrainsMono_Regular_40_4bpp()
{
    static touchgfx::GeneratedFont JetBrainsMono_Regular_40_4bpp(glyphs_JetBrainsMono_Regular_40_4bpp, 66, 40, 7, 4, 1, 0, 0, unicodes_JetBrainsMono_Regular_40_4bpp, kerning_JetBrainsMono_Regular_40_4bpp, 63, 0, 0, 0);
 8008770:	b580      	push	{r7, lr}
 8008772:	af00      	add	r7, sp, #0
 8008774:	4801      	ldr	r0, [pc, #4]	; (800877c <__tcf_0+0xc>)
 8008776:	f7fd fafb 	bl	8005d70 <_ZN8touchgfx13GeneratedFontD1Ev>
 800877a:	bd80      	pop	{r7, pc}
 800877c:	20023864 	.word	0x20023864

08008780 <_Z37getFont_JetBrainsMono_Regular_40_4bppv>:
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b08c      	sub	sp, #48	; 0x30
 8008784:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont JetBrainsMono_Regular_40_4bpp(glyphs_JetBrainsMono_Regular_40_4bpp, 66, 40, 7, 4, 1, 0, 0, unicodes_JetBrainsMono_Regular_40_4bpp, kerning_JetBrainsMono_Regular_40_4bpp, 63, 0, 0, 0);
 8008786:	4b1f      	ldr	r3, [pc, #124]	; (8008804 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x84>)
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	f3bf 8f5b 	dmb	ish
 800878e:	b2db      	uxtb	r3, r3
 8008790:	f003 0301 	and.w	r3, r3, #1
 8008794:	2b00      	cmp	r3, #0
 8008796:	bf0c      	ite	eq
 8008798:	2301      	moveq	r3, #1
 800879a:	2300      	movne	r3, #0
 800879c:	b2db      	uxtb	r3, r3
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d02c      	beq.n	80087fc <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x7c>
 80087a2:	4818      	ldr	r0, [pc, #96]	; (8008804 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x84>)
 80087a4:	f01d ffd9 	bl	802675a <__cxa_guard_acquire>
 80087a8:	4603      	mov	r3, r0
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	bf14      	ite	ne
 80087ae:	2301      	movne	r3, #1
 80087b0:	2300      	moveq	r3, #0
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d021      	beq.n	80087fc <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x7c>
 80087b8:	2300      	movs	r3, #0
 80087ba:	930a      	str	r3, [sp, #40]	; 0x28
 80087bc:	2300      	movs	r3, #0
 80087be:	9309      	str	r3, [sp, #36]	; 0x24
 80087c0:	2300      	movs	r3, #0
 80087c2:	9308      	str	r3, [sp, #32]
 80087c4:	233f      	movs	r3, #63	; 0x3f
 80087c6:	9307      	str	r3, [sp, #28]
 80087c8:	4b0f      	ldr	r3, [pc, #60]	; (8008808 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x88>)
 80087ca:	9306      	str	r3, [sp, #24]
 80087cc:	4b0f      	ldr	r3, [pc, #60]	; (800880c <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x8c>)
 80087ce:	9305      	str	r3, [sp, #20]
 80087d0:	2300      	movs	r3, #0
 80087d2:	9304      	str	r3, [sp, #16]
 80087d4:	2300      	movs	r3, #0
 80087d6:	9303      	str	r3, [sp, #12]
 80087d8:	2301      	movs	r3, #1
 80087da:	9302      	str	r3, [sp, #8]
 80087dc:	2304      	movs	r3, #4
 80087de:	9301      	str	r3, [sp, #4]
 80087e0:	2307      	movs	r3, #7
 80087e2:	9300      	str	r3, [sp, #0]
 80087e4:	2328      	movs	r3, #40	; 0x28
 80087e6:	2242      	movs	r2, #66	; 0x42
 80087e8:	4909      	ldr	r1, [pc, #36]	; (8008810 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x90>)
 80087ea:	480a      	ldr	r0, [pc, #40]	; (8008814 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x94>)
 80087ec:	f7fe faf8 	bl	8006de0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80087f0:	4804      	ldr	r0, [pc, #16]	; (8008804 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x84>)
 80087f2:	f01d ffbe 	bl	8026772 <__cxa_guard_release>
 80087f6:	4808      	ldr	r0, [pc, #32]	; (8008818 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x98>)
 80087f8:	f01e f900 	bl	80269fc <atexit>
    return JetBrainsMono_Regular_40_4bpp;
 80087fc:	4b05      	ldr	r3, [pc, #20]	; (8008814 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x94>)
}
 80087fe:	4618      	mov	r0, r3
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}
 8008804:	2002388c 	.word	0x2002388c
 8008808:	080d9574 	.word	0x080d9574
 800880c:	0802c54c 	.word	0x0802c54c
 8008810:	080d8368 	.word	0x080d8368
 8008814:	20023864 	.word	0x20023864
 8008818:	08008771 	.word	0x08008771

0800881c <__tcf_0>:

touchgfx::GeneratedFont& getFont_JetBrainsMono_Regular_60_4bpp();

touchgfx::GeneratedFont& getFont_JetBrainsMono_Regular_60_4bpp()
{
    static touchgfx::GeneratedFont JetBrainsMono_Regular_60_4bpp(glyphs_JetBrainsMono_Regular_60_4bpp, 63, 60, 11, 4, 1, 0, 0, unicodes_JetBrainsMono_Regular_60_4bpp, kerning_JetBrainsMono_Regular_60_4bpp, 63, 0, 0, 0);
 800881c:	b580      	push	{r7, lr}
 800881e:	af00      	add	r7, sp, #0
 8008820:	4801      	ldr	r0, [pc, #4]	; (8008828 <__tcf_0+0xc>)
 8008822:	f7fd faa5 	bl	8005d70 <_ZN8touchgfx13GeneratedFontD1Ev>
 8008826:	bd80      	pop	{r7, pc}
 8008828:	20023890 	.word	0x20023890

0800882c <_Z37getFont_JetBrainsMono_Regular_60_4bppv>:
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b08c      	sub	sp, #48	; 0x30
 8008830:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont JetBrainsMono_Regular_60_4bpp(glyphs_JetBrainsMono_Regular_60_4bpp, 63, 60, 11, 4, 1, 0, 0, unicodes_JetBrainsMono_Regular_60_4bpp, kerning_JetBrainsMono_Regular_60_4bpp, 63, 0, 0, 0);
 8008832:	4b1f      	ldr	r3, [pc, #124]	; (80088b0 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x84>)
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	f3bf 8f5b 	dmb	ish
 800883a:	b2db      	uxtb	r3, r3
 800883c:	f003 0301 	and.w	r3, r3, #1
 8008840:	2b00      	cmp	r3, #0
 8008842:	bf0c      	ite	eq
 8008844:	2301      	moveq	r3, #1
 8008846:	2300      	movne	r3, #0
 8008848:	b2db      	uxtb	r3, r3
 800884a:	2b00      	cmp	r3, #0
 800884c:	d02c      	beq.n	80088a8 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x7c>
 800884e:	4818      	ldr	r0, [pc, #96]	; (80088b0 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x84>)
 8008850:	f01d ff83 	bl	802675a <__cxa_guard_acquire>
 8008854:	4603      	mov	r3, r0
 8008856:	2b00      	cmp	r3, #0
 8008858:	bf14      	ite	ne
 800885a:	2301      	movne	r3, #1
 800885c:	2300      	moveq	r3, #0
 800885e:	b2db      	uxtb	r3, r3
 8008860:	2b00      	cmp	r3, #0
 8008862:	d021      	beq.n	80088a8 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x7c>
 8008864:	2300      	movs	r3, #0
 8008866:	930a      	str	r3, [sp, #40]	; 0x28
 8008868:	2300      	movs	r3, #0
 800886a:	9309      	str	r3, [sp, #36]	; 0x24
 800886c:	2300      	movs	r3, #0
 800886e:	9308      	str	r3, [sp, #32]
 8008870:	233f      	movs	r3, #63	; 0x3f
 8008872:	9307      	str	r3, [sp, #28]
 8008874:	4b0f      	ldr	r3, [pc, #60]	; (80088b4 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x88>)
 8008876:	9306      	str	r3, [sp, #24]
 8008878:	4b0f      	ldr	r3, [pc, #60]	; (80088b8 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x8c>)
 800887a:	9305      	str	r3, [sp, #20]
 800887c:	2300      	movs	r3, #0
 800887e:	9304      	str	r3, [sp, #16]
 8008880:	2300      	movs	r3, #0
 8008882:	9303      	str	r3, [sp, #12]
 8008884:	2301      	movs	r3, #1
 8008886:	9302      	str	r3, [sp, #8]
 8008888:	2304      	movs	r3, #4
 800888a:	9301      	str	r3, [sp, #4]
 800888c:	230b      	movs	r3, #11
 800888e:	9300      	str	r3, [sp, #0]
 8008890:	233c      	movs	r3, #60	; 0x3c
 8008892:	223f      	movs	r2, #63	; 0x3f
 8008894:	4909      	ldr	r1, [pc, #36]	; (80088bc <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x90>)
 8008896:	480a      	ldr	r0, [pc, #40]	; (80088c0 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x94>)
 8008898:	f7fe faa2 	bl	8006de0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800889c:	4804      	ldr	r0, [pc, #16]	; (80088b0 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x84>)
 800889e:	f01d ff68 	bl	8026772 <__cxa_guard_release>
 80088a2:	4808      	ldr	r0, [pc, #32]	; (80088c4 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x98>)
 80088a4:	f01e f8aa 	bl	80269fc <atexit>
    return JetBrainsMono_Regular_60_4bpp;
 80088a8:	4b05      	ldr	r3, [pc, #20]	; (80088c0 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x94>)
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}
 80088b0:	200238b8 	.word	0x200238b8
 80088b4:	080d9578 	.word	0x080d9578
 80088b8:	0802c550 	.word	0x0802c550
 80088bc:	080d8704 	.word	0x080d8704
 80088c0:	20023890 	.word	0x20023890
 80088c4:	0800881d 	.word	0x0800881d

080088c8 <__tcf_0>:

touchgfx::GeneratedFont& getFont_swisop3_300_4bpp();

touchgfx::GeneratedFont& getFont_swisop3_300_4bpp()
{
    static touchgfx::GeneratedFont swisop3_300_4bpp(glyphs_swisop3_300_4bpp, 63, 300, 59, 4, 1, 0, 0, unicodes_swisop3_300_4bpp, kerning_swisop3_300_4bpp, 63, 0, 0, 0);
 80088c8:	b580      	push	{r7, lr}
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	4801      	ldr	r0, [pc, #4]	; (80088d4 <__tcf_0+0xc>)
 80088ce:	f7fd fa4f 	bl	8005d70 <_ZN8touchgfx13GeneratedFontD1Ev>
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	200238bc 	.word	0x200238bc

080088d8 <_Z24getFont_swisop3_300_4bppv>:
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b08c      	sub	sp, #48	; 0x30
 80088dc:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont swisop3_300_4bpp(glyphs_swisop3_300_4bpp, 63, 300, 59, 4, 1, 0, 0, unicodes_swisop3_300_4bpp, kerning_swisop3_300_4bpp, 63, 0, 0, 0);
 80088de:	4b20      	ldr	r3, [pc, #128]	; (8008960 <_Z24getFont_swisop3_300_4bppv+0x88>)
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	f3bf 8f5b 	dmb	ish
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	f003 0301 	and.w	r3, r3, #1
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	bf0c      	ite	eq
 80088f0:	2301      	moveq	r3, #1
 80088f2:	2300      	movne	r3, #0
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d02d      	beq.n	8008956 <_Z24getFont_swisop3_300_4bppv+0x7e>
 80088fa:	4819      	ldr	r0, [pc, #100]	; (8008960 <_Z24getFont_swisop3_300_4bppv+0x88>)
 80088fc:	f01d ff2d 	bl	802675a <__cxa_guard_acquire>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	bf14      	ite	ne
 8008906:	2301      	movne	r3, #1
 8008908:	2300      	moveq	r3, #0
 800890a:	b2db      	uxtb	r3, r3
 800890c:	2b00      	cmp	r3, #0
 800890e:	d022      	beq.n	8008956 <_Z24getFont_swisop3_300_4bppv+0x7e>
 8008910:	2300      	movs	r3, #0
 8008912:	930a      	str	r3, [sp, #40]	; 0x28
 8008914:	2300      	movs	r3, #0
 8008916:	9309      	str	r3, [sp, #36]	; 0x24
 8008918:	2300      	movs	r3, #0
 800891a:	9308      	str	r3, [sp, #32]
 800891c:	233f      	movs	r3, #63	; 0x3f
 800891e:	9307      	str	r3, [sp, #28]
 8008920:	4b10      	ldr	r3, [pc, #64]	; (8008964 <_Z24getFont_swisop3_300_4bppv+0x8c>)
 8008922:	9306      	str	r3, [sp, #24]
 8008924:	4b10      	ldr	r3, [pc, #64]	; (8008968 <_Z24getFont_swisop3_300_4bppv+0x90>)
 8008926:	9305      	str	r3, [sp, #20]
 8008928:	2300      	movs	r3, #0
 800892a:	9304      	str	r3, [sp, #16]
 800892c:	2300      	movs	r3, #0
 800892e:	9303      	str	r3, [sp, #12]
 8008930:	2301      	movs	r3, #1
 8008932:	9302      	str	r3, [sp, #8]
 8008934:	2304      	movs	r3, #4
 8008936:	9301      	str	r3, [sp, #4]
 8008938:	233b      	movs	r3, #59	; 0x3b
 800893a:	9300      	str	r3, [sp, #0]
 800893c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8008940:	223f      	movs	r2, #63	; 0x3f
 8008942:	490a      	ldr	r1, [pc, #40]	; (800896c <_Z24getFont_swisop3_300_4bppv+0x94>)
 8008944:	480a      	ldr	r0, [pc, #40]	; (8008970 <_Z24getFont_swisop3_300_4bppv+0x98>)
 8008946:	f7fe fa4b 	bl	8006de0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800894a:	4805      	ldr	r0, [pc, #20]	; (8008960 <_Z24getFont_swisop3_300_4bppv+0x88>)
 800894c:	f01d ff11 	bl	8026772 <__cxa_guard_release>
 8008950:	4808      	ldr	r0, [pc, #32]	; (8008974 <_Z24getFont_swisop3_300_4bppv+0x9c>)
 8008952:	f01e f853 	bl	80269fc <atexit>
    return swisop3_300_4bpp;
 8008956:	4b06      	ldr	r3, [pc, #24]	; (8008970 <_Z24getFont_swisop3_300_4bppv+0x98>)
}
 8008958:	4618      	mov	r0, r3
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	200238e4 	.word	0x200238e4
 8008964:	080d957c 	.word	0x080d957c
 8008968:	0802c554 	.word	0x0802c554
 800896c:	080d8a78 	.word	0x080d8a78
 8008970:	200238bc 	.word	0x200238bc
 8008974:	080088c9 	.word	0x080088c9

08008978 <__tcf_0>:

touchgfx::GeneratedFont& getFont_swisop3_50_4bpp();

touchgfx::GeneratedFont& getFont_swisop3_50_4bpp()
{
    static touchgfx::GeneratedFont swisop3_50_4bpp(glyphs_swisop3_50_4bpp, 65, 50, 10, 4, 1, 0, 0, unicodes_swisop3_50_4bpp, kerning_swisop3_50_4bpp, 63, 0, 0, 0);
 8008978:	b580      	push	{r7, lr}
 800897a:	af00      	add	r7, sp, #0
 800897c:	4801      	ldr	r0, [pc, #4]	; (8008984 <__tcf_0+0xc>)
 800897e:	f7fd f9f7 	bl	8005d70 <_ZN8touchgfx13GeneratedFontD1Ev>
 8008982:	bd80      	pop	{r7, pc}
 8008984:	200238e8 	.word	0x200238e8

08008988 <_Z23getFont_swisop3_50_4bppv>:
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b08c      	sub	sp, #48	; 0x30
 800898c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont swisop3_50_4bpp(glyphs_swisop3_50_4bpp, 65, 50, 10, 4, 1, 0, 0, unicodes_swisop3_50_4bpp, kerning_swisop3_50_4bpp, 63, 0, 0, 0);
 800898e:	4b1f      	ldr	r3, [pc, #124]	; (8008a0c <_Z23getFont_swisop3_50_4bppv+0x84>)
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	f3bf 8f5b 	dmb	ish
 8008996:	b2db      	uxtb	r3, r3
 8008998:	f003 0301 	and.w	r3, r3, #1
 800899c:	2b00      	cmp	r3, #0
 800899e:	bf0c      	ite	eq
 80089a0:	2301      	moveq	r3, #1
 80089a2:	2300      	movne	r3, #0
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d02c      	beq.n	8008a04 <_Z23getFont_swisop3_50_4bppv+0x7c>
 80089aa:	4818      	ldr	r0, [pc, #96]	; (8008a0c <_Z23getFont_swisop3_50_4bppv+0x84>)
 80089ac:	f01d fed5 	bl	802675a <__cxa_guard_acquire>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	bf14      	ite	ne
 80089b6:	2301      	movne	r3, #1
 80089b8:	2300      	moveq	r3, #0
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d021      	beq.n	8008a04 <_Z23getFont_swisop3_50_4bppv+0x7c>
 80089c0:	2300      	movs	r3, #0
 80089c2:	930a      	str	r3, [sp, #40]	; 0x28
 80089c4:	2300      	movs	r3, #0
 80089c6:	9309      	str	r3, [sp, #36]	; 0x24
 80089c8:	2300      	movs	r3, #0
 80089ca:	9308      	str	r3, [sp, #32]
 80089cc:	233f      	movs	r3, #63	; 0x3f
 80089ce:	9307      	str	r3, [sp, #28]
 80089d0:	4b0f      	ldr	r3, [pc, #60]	; (8008a10 <_Z23getFont_swisop3_50_4bppv+0x88>)
 80089d2:	9306      	str	r3, [sp, #24]
 80089d4:	4b0f      	ldr	r3, [pc, #60]	; (8008a14 <_Z23getFont_swisop3_50_4bppv+0x8c>)
 80089d6:	9305      	str	r3, [sp, #20]
 80089d8:	2300      	movs	r3, #0
 80089da:	9304      	str	r3, [sp, #16]
 80089dc:	2300      	movs	r3, #0
 80089de:	9303      	str	r3, [sp, #12]
 80089e0:	2301      	movs	r3, #1
 80089e2:	9302      	str	r3, [sp, #8]
 80089e4:	2304      	movs	r3, #4
 80089e6:	9301      	str	r3, [sp, #4]
 80089e8:	230a      	movs	r3, #10
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	2332      	movs	r3, #50	; 0x32
 80089ee:	2241      	movs	r2, #65	; 0x41
 80089f0:	4909      	ldr	r1, [pc, #36]	; (8008a18 <_Z23getFont_swisop3_50_4bppv+0x90>)
 80089f2:	480a      	ldr	r0, [pc, #40]	; (8008a1c <_Z23getFont_swisop3_50_4bppv+0x94>)
 80089f4:	f7fe f9f4 	bl	8006de0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80089f8:	4804      	ldr	r0, [pc, #16]	; (8008a0c <_Z23getFont_swisop3_50_4bppv+0x84>)
 80089fa:	f01d feba 	bl	8026772 <__cxa_guard_release>
 80089fe:	4808      	ldr	r0, [pc, #32]	; (8008a20 <_Z23getFont_swisop3_50_4bppv+0x98>)
 8008a00:	f01d fffc 	bl	80269fc <atexit>
    return swisop3_50_4bpp;
 8008a04:	4b05      	ldr	r3, [pc, #20]	; (8008a1c <_Z23getFont_swisop3_50_4bppv+0x94>)
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	20023910 	.word	0x20023910
 8008a10:	080d9580 	.word	0x080d9580
 8008a14:	0802c558 	.word	0x0802c558
 8008a18:	080d8dec 	.word	0x080d8dec
 8008a1c:	200238e8 	.word	0x200238e8
 8008a20:	08008979 	.word	0x08008979

08008a24 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8008a24:	b580      	push	{r7, lr}
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	4801      	ldr	r0, [pc, #4]	; (8008a30 <__tcf_0+0xc>)
 8008a2a:	f7fd f9a1 	bl	8005d70 <_ZN8touchgfx13GeneratedFontD1Ev>
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	20023914 	.word	0x20023914

08008a34 <_Z23getFont_verdana_10_4bppv>:
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b08c      	sub	sp, #48	; 0x30
 8008a38:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8008a3a:	4b1f      	ldr	r3, [pc, #124]	; (8008ab8 <_Z23getFont_verdana_10_4bppv+0x84>)
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	f3bf 8f5b 	dmb	ish
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	f003 0301 	and.w	r3, r3, #1
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	bf0c      	ite	eq
 8008a4c:	2301      	moveq	r3, #1
 8008a4e:	2300      	movne	r3, #0
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d02c      	beq.n	8008ab0 <_Z23getFont_verdana_10_4bppv+0x7c>
 8008a56:	4818      	ldr	r0, [pc, #96]	; (8008ab8 <_Z23getFont_verdana_10_4bppv+0x84>)
 8008a58:	f01d fe7f 	bl	802675a <__cxa_guard_acquire>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	bf14      	ite	ne
 8008a62:	2301      	movne	r3, #1
 8008a64:	2300      	moveq	r3, #0
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d021      	beq.n	8008ab0 <_Z23getFont_verdana_10_4bppv+0x7c>
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	930a      	str	r3, [sp, #40]	; 0x28
 8008a70:	2300      	movs	r3, #0
 8008a72:	9309      	str	r3, [sp, #36]	; 0x24
 8008a74:	2300      	movs	r3, #0
 8008a76:	9308      	str	r3, [sp, #32]
 8008a78:	233f      	movs	r3, #63	; 0x3f
 8008a7a:	9307      	str	r3, [sp, #28]
 8008a7c:	4b0f      	ldr	r3, [pc, #60]	; (8008abc <_Z23getFont_verdana_10_4bppv+0x88>)
 8008a7e:	9306      	str	r3, [sp, #24]
 8008a80:	4b0f      	ldr	r3, [pc, #60]	; (8008ac0 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8008a82:	9305      	str	r3, [sp, #20]
 8008a84:	2300      	movs	r3, #0
 8008a86:	9304      	str	r3, [sp, #16]
 8008a88:	2300      	movs	r3, #0
 8008a8a:	9303      	str	r3, [sp, #12]
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	9302      	str	r3, [sp, #8]
 8008a90:	2304      	movs	r3, #4
 8008a92:	9301      	str	r3, [sp, #4]
 8008a94:	2300      	movs	r3, #0
 8008a96:	9300      	str	r3, [sp, #0]
 8008a98:	230a      	movs	r3, #10
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	4909      	ldr	r1, [pc, #36]	; (8008ac4 <_Z23getFont_verdana_10_4bppv+0x90>)
 8008a9e:	480a      	ldr	r0, [pc, #40]	; (8008ac8 <_Z23getFont_verdana_10_4bppv+0x94>)
 8008aa0:	f7fe f99e 	bl	8006de0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008aa4:	4804      	ldr	r0, [pc, #16]	; (8008ab8 <_Z23getFont_verdana_10_4bppv+0x84>)
 8008aa6:	f01d fe64 	bl	8026772 <__cxa_guard_release>
 8008aaa:	4808      	ldr	r0, [pc, #32]	; (8008acc <_Z23getFont_verdana_10_4bppv+0x98>)
 8008aac:	f01d ffa6 	bl	80269fc <atexit>
    return verdana_10_4bpp;
 8008ab0:	4b05      	ldr	r3, [pc, #20]	; (8008ac8 <_Z23getFont_verdana_10_4bppv+0x94>)
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	2002393c 	.word	0x2002393c
 8008abc:	080d9584 	.word	0x080d9584
 8008ac0:	0802c55c 	.word	0x0802c55c
 8008ac4:	080d917c 	.word	0x080d917c
 8008ac8:	20023914 	.word	0x20023914
 8008acc:	08008a25 	.word	0x08008a25

08008ad0 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_12_4bpp();

touchgfx::GeneratedFont& getFont_verdana_12_4bpp()
{
    static touchgfx::GeneratedFont verdana_12_4bpp(glyphs_verdana_12_4bpp, 7, 12, 0, 4, 1, 0, 1, unicodes_verdana_12_4bpp, kerning_verdana_12_4bpp, 63, 0, 0, 0);
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	4801      	ldr	r0, [pc, #4]	; (8008adc <__tcf_0+0xc>)
 8008ad6:	f7fd f94b 	bl	8005d70 <_ZN8touchgfx13GeneratedFontD1Ev>
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	20023940 	.word	0x20023940

08008ae0 <_Z23getFont_verdana_12_4bppv>:
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b08c      	sub	sp, #48	; 0x30
 8008ae4:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_12_4bpp(glyphs_verdana_12_4bpp, 7, 12, 0, 4, 1, 0, 1, unicodes_verdana_12_4bpp, kerning_verdana_12_4bpp, 63, 0, 0, 0);
 8008ae6:	4b1f      	ldr	r3, [pc, #124]	; (8008b64 <_Z23getFont_verdana_12_4bppv+0x84>)
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	f3bf 8f5b 	dmb	ish
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	f003 0301 	and.w	r3, r3, #1
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	bf0c      	ite	eq
 8008af8:	2301      	moveq	r3, #1
 8008afa:	2300      	movne	r3, #0
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d02c      	beq.n	8008b5c <_Z23getFont_verdana_12_4bppv+0x7c>
 8008b02:	4818      	ldr	r0, [pc, #96]	; (8008b64 <_Z23getFont_verdana_12_4bppv+0x84>)
 8008b04:	f01d fe29 	bl	802675a <__cxa_guard_acquire>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	bf14      	ite	ne
 8008b0e:	2301      	movne	r3, #1
 8008b10:	2300      	moveq	r3, #0
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d021      	beq.n	8008b5c <_Z23getFont_verdana_12_4bppv+0x7c>
 8008b18:	2300      	movs	r3, #0
 8008b1a:	930a      	str	r3, [sp, #40]	; 0x28
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b20:	2300      	movs	r3, #0
 8008b22:	9308      	str	r3, [sp, #32]
 8008b24:	233f      	movs	r3, #63	; 0x3f
 8008b26:	9307      	str	r3, [sp, #28]
 8008b28:	4b0f      	ldr	r3, [pc, #60]	; (8008b68 <_Z23getFont_verdana_12_4bppv+0x88>)
 8008b2a:	9306      	str	r3, [sp, #24]
 8008b2c:	4b0f      	ldr	r3, [pc, #60]	; (8008b6c <_Z23getFont_verdana_12_4bppv+0x8c>)
 8008b2e:	9305      	str	r3, [sp, #20]
 8008b30:	2301      	movs	r3, #1
 8008b32:	9304      	str	r3, [sp, #16]
 8008b34:	2300      	movs	r3, #0
 8008b36:	9303      	str	r3, [sp, #12]
 8008b38:	2301      	movs	r3, #1
 8008b3a:	9302      	str	r3, [sp, #8]
 8008b3c:	2304      	movs	r3, #4
 8008b3e:	9301      	str	r3, [sp, #4]
 8008b40:	2300      	movs	r3, #0
 8008b42:	9300      	str	r3, [sp, #0]
 8008b44:	230c      	movs	r3, #12
 8008b46:	2207      	movs	r2, #7
 8008b48:	4909      	ldr	r1, [pc, #36]	; (8008b70 <_Z23getFont_verdana_12_4bppv+0x90>)
 8008b4a:	480a      	ldr	r0, [pc, #40]	; (8008b74 <_Z23getFont_verdana_12_4bppv+0x94>)
 8008b4c:	f7fe f948 	bl	8006de0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008b50:	4804      	ldr	r0, [pc, #16]	; (8008b64 <_Z23getFont_verdana_12_4bppv+0x84>)
 8008b52:	f01d fe0e 	bl	8026772 <__cxa_guard_release>
 8008b56:	4808      	ldr	r0, [pc, #32]	; (8008b78 <_Z23getFont_verdana_12_4bppv+0x98>)
 8008b58:	f01d ff50 	bl	80269fc <atexit>
    return verdana_12_4bpp;
 8008b5c:	4b05      	ldr	r3, [pc, #20]	; (8008b74 <_Z23getFont_verdana_12_4bppv+0x94>)
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	20023968 	.word	0x20023968
 8008b68:	080d9588 	.word	0x080d9588
 8008b6c:	0802c560 	.word	0x0802c560
 8008b70:	080d918c 	.word	0x080d918c
 8008b74:	20023940 	.word	0x20023940
 8008b78:	08008ad1 	.word	0x08008ad1

08008b7c <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 63, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	4801      	ldr	r0, [pc, #4]	; (8008b88 <__tcf_0+0xc>)
 8008b82:	f7fd f8f5 	bl	8005d70 <_ZN8touchgfx13GeneratedFontD1Ev>
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	2002396c 	.word	0x2002396c

08008b8c <_Z23getFont_verdana_20_4bppv>:
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b08c      	sub	sp, #48	; 0x30
 8008b90:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 63, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8008b92:	4b1f      	ldr	r3, [pc, #124]	; (8008c10 <_Z23getFont_verdana_20_4bppv+0x84>)
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	f3bf 8f5b 	dmb	ish
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	f003 0301 	and.w	r3, r3, #1
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	bf0c      	ite	eq
 8008ba4:	2301      	moveq	r3, #1
 8008ba6:	2300      	movne	r3, #0
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d02c      	beq.n	8008c08 <_Z23getFont_verdana_20_4bppv+0x7c>
 8008bae:	4818      	ldr	r0, [pc, #96]	; (8008c10 <_Z23getFont_verdana_20_4bppv+0x84>)
 8008bb0:	f01d fdd3 	bl	802675a <__cxa_guard_acquire>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	bf14      	ite	ne
 8008bba:	2301      	movne	r3, #1
 8008bbc:	2300      	moveq	r3, #0
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d021      	beq.n	8008c08 <_Z23getFont_verdana_20_4bppv+0x7c>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	930a      	str	r3, [sp, #40]	; 0x28
 8008bc8:	2300      	movs	r3, #0
 8008bca:	9309      	str	r3, [sp, #36]	; 0x24
 8008bcc:	2300      	movs	r3, #0
 8008bce:	9308      	str	r3, [sp, #32]
 8008bd0:	233f      	movs	r3, #63	; 0x3f
 8008bd2:	9307      	str	r3, [sp, #28]
 8008bd4:	4b0f      	ldr	r3, [pc, #60]	; (8008c14 <_Z23getFont_verdana_20_4bppv+0x88>)
 8008bd6:	9306      	str	r3, [sp, #24]
 8008bd8:	4b0f      	ldr	r3, [pc, #60]	; (8008c18 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8008bda:	9305      	str	r3, [sp, #20]
 8008bdc:	2301      	movs	r3, #1
 8008bde:	9304      	str	r3, [sp, #16]
 8008be0:	2301      	movs	r3, #1
 8008be2:	9303      	str	r3, [sp, #12]
 8008be4:	2301      	movs	r3, #1
 8008be6:	9302      	str	r3, [sp, #8]
 8008be8:	2304      	movs	r3, #4
 8008bea:	9301      	str	r3, [sp, #4]
 8008bec:	2304      	movs	r3, #4
 8008bee:	9300      	str	r3, [sp, #0]
 8008bf0:	2314      	movs	r3, #20
 8008bf2:	223f      	movs	r2, #63	; 0x3f
 8008bf4:	4909      	ldr	r1, [pc, #36]	; (8008c1c <_Z23getFont_verdana_20_4bppv+0x90>)
 8008bf6:	480a      	ldr	r0, [pc, #40]	; (8008c20 <_Z23getFont_verdana_20_4bppv+0x94>)
 8008bf8:	f7fe f8f2 	bl	8006de0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008bfc:	4804      	ldr	r0, [pc, #16]	; (8008c10 <_Z23getFont_verdana_20_4bppv+0x84>)
 8008bfe:	f01d fdb8 	bl	8026772 <__cxa_guard_release>
 8008c02:	4808      	ldr	r0, [pc, #32]	; (8008c24 <_Z23getFont_verdana_20_4bppv+0x98>)
 8008c04:	f01d fefa 	bl	80269fc <atexit>
    return verdana_20_4bpp;
 8008c08:	4b05      	ldr	r3, [pc, #20]	; (8008c20 <_Z23getFont_verdana_20_4bppv+0x94>)
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	20023994 	.word	0x20023994
 8008c14:	080d958c 	.word	0x080d958c
 8008c18:	0802c564 	.word	0x0802c564
 8008c1c:	080d91f0 	.word	0x080d91f0
 8008c20:	2002396c 	.word	0x2002396c
 8008c24:	08008b7d 	.word	0x08008b7d

08008c28 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	4801      	ldr	r0, [pc, #4]	; (8008c34 <__tcf_0+0xc>)
 8008c2e:	f7fd f89f 	bl	8005d70 <_ZN8touchgfx13GeneratedFontD1Ev>
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	20023998 	.word	0x20023998

08008c38 <_Z23getFont_verdana_40_4bppv>:
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b08c      	sub	sp, #48	; 0x30
 8008c3c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8008c3e:	4b1f      	ldr	r3, [pc, #124]	; (8008cbc <_Z23getFont_verdana_40_4bppv+0x84>)
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	f3bf 8f5b 	dmb	ish
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	f003 0301 	and.w	r3, r3, #1
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	bf0c      	ite	eq
 8008c50:	2301      	moveq	r3, #1
 8008c52:	2300      	movne	r3, #0
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d02c      	beq.n	8008cb4 <_Z23getFont_verdana_40_4bppv+0x7c>
 8008c5a:	4818      	ldr	r0, [pc, #96]	; (8008cbc <_Z23getFont_verdana_40_4bppv+0x84>)
 8008c5c:	f01d fd7d 	bl	802675a <__cxa_guard_acquire>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	bf14      	ite	ne
 8008c66:	2301      	movne	r3, #1
 8008c68:	2300      	moveq	r3, #0
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d021      	beq.n	8008cb4 <_Z23getFont_verdana_40_4bppv+0x7c>
 8008c70:	2300      	movs	r3, #0
 8008c72:	930a      	str	r3, [sp, #40]	; 0x28
 8008c74:	2300      	movs	r3, #0
 8008c76:	9309      	str	r3, [sp, #36]	; 0x24
 8008c78:	2300      	movs	r3, #0
 8008c7a:	9308      	str	r3, [sp, #32]
 8008c7c:	233f      	movs	r3, #63	; 0x3f
 8008c7e:	9307      	str	r3, [sp, #28]
 8008c80:	4b0f      	ldr	r3, [pc, #60]	; (8008cc0 <_Z23getFont_verdana_40_4bppv+0x88>)
 8008c82:	9306      	str	r3, [sp, #24]
 8008c84:	4b0f      	ldr	r3, [pc, #60]	; (8008cc4 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8008c86:	9305      	str	r3, [sp, #20]
 8008c88:	2300      	movs	r3, #0
 8008c8a:	9304      	str	r3, [sp, #16]
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	9303      	str	r3, [sp, #12]
 8008c90:	2301      	movs	r3, #1
 8008c92:	9302      	str	r3, [sp, #8]
 8008c94:	2304      	movs	r3, #4
 8008c96:	9301      	str	r3, [sp, #4]
 8008c98:	2300      	movs	r3, #0
 8008c9a:	9300      	str	r3, [sp, #0]
 8008c9c:	2328      	movs	r3, #40	; 0x28
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	4909      	ldr	r1, [pc, #36]	; (8008cc8 <_Z23getFont_verdana_40_4bppv+0x90>)
 8008ca2:	480a      	ldr	r0, [pc, #40]	; (8008ccc <_Z23getFont_verdana_40_4bppv+0x94>)
 8008ca4:	f7fe f89c 	bl	8006de0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008ca8:	4804      	ldr	r0, [pc, #16]	; (8008cbc <_Z23getFont_verdana_40_4bppv+0x84>)
 8008caa:	f01d fd62 	bl	8026772 <__cxa_guard_release>
 8008cae:	4808      	ldr	r0, [pc, #32]	; (8008cd0 <_Z23getFont_verdana_40_4bppv+0x98>)
 8008cb0:	f01d fea4 	bl	80269fc <atexit>
    return verdana_40_4bpp;
 8008cb4:	4b05      	ldr	r3, [pc, #20]	; (8008ccc <_Z23getFont_verdana_40_4bppv+0x94>)
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	200239c0 	.word	0x200239c0
 8008cc0:	080d966c 	.word	0x080d966c
 8008cc4:	0802c568 	.word	0x0802c568
 8008cc8:	080d9564 	.word	0x080d9564
 8008ccc:	20023998 	.word	0x20023998
 8008cd0:	08008c29 	.word	0x08008c29

08008cd4 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	460b      	mov	r3, r1
 8008cde:	607a      	str	r2, [r7, #4]
 8008ce0:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 8008ce2:	2300      	movs	r3, #0
    }
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3714      	adds	r7, #20
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8008cf8:	2300      	movs	r3, #0
    }
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	370c      	adds	r7, #12
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr

08008d06 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8008d06:	b480      	push	{r7}
 8008d08:	b083      	sub	sp, #12
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8008d0e:	2300      	movs	r3, #0
    }
 8008d10:	4618      	mov	r0, r3
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr

08008d1c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8008d1c:	b480      	push	{r7}
 8008d1e:	b085      	sub	sp, #20
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	4613      	mov	r3, r2
 8008d28:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8008d2a:	4a07      	ldr	r2, [pc, #28]	; (8008d48 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6013      	str	r3, [r2, #0]
        fonts = f;
 8008d30:	4a06      	ldr	r2, [pc, #24]	; (8008d4c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8008d36:	4a06      	ldr	r2, [pc, #24]	; (8008d50 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8008d38:	88fb      	ldrh	r3, [r7, #6]
 8008d3a:	8013      	strh	r3, [r2, #0]
    }
 8008d3c:	bf00      	nop
 8008d3e:	3714      	adds	r7, #20
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr
 8008d48:	200567f0 	.word	0x200567f0
 8008d4c:	200567f8 	.word	0x200567f8
 8008d50:	200567f4 	.word	0x200567f4

08008d54 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8008d54:	b40e      	push	{r1, r2, r3}
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b085      	sub	sp, #20
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8008d5e:	f107 0320 	add.w	r3, r7, #32
 8008d62:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	69fa      	ldr	r2, [r7, #28]
 8008d68:	2100      	movs	r1, #0
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f011 fb78 	bl	801a460 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8008d70:	4603      	mov	r3, r0
 8008d72:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8008d74:	89fb      	ldrh	r3, [r7, #14]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3714      	adds	r7, #20
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d80:	b003      	add	sp, #12
 8008d82:	4770      	bx	lr

08008d84 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8008d84:	b40c      	push	{r2, r3}
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b084      	sub	sp, #16
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
 8008d8e:	460b      	mov	r3, r1
 8008d90:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8008d92:	f107 031c 	add.w	r3, r7, #28
 8008d96:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8008d98:	78f9      	ldrb	r1, [r7, #3]
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	69ba      	ldr	r2, [r7, #24]
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f011 fb5e 	bl	801a460 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8008da4:	4603      	mov	r3, r0
 8008da6:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8008da8:	89fb      	ldrh	r3, [r7, #14]
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008db4:	b002      	add	sp, #8
 8008db6:	4770      	bx	lr

08008db8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b08a      	sub	sp, #40	; 0x28
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d016      	beq.n	8008dfa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	331a      	adds	r3, #26
 8008dd0:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8008dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd4:	8adb      	ldrh	r3, [r3, #22]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d105      	bne.n	8008de6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8008dda:	4b43      	ldr	r3, [pc, #268]	; (8008ee8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8008ddc:	4a43      	ldr	r2, [pc, #268]	; (8008eec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8008dde:	21bf      	movs	r1, #191	; 0xbf
 8008de0:	4843      	ldr	r0, [pc, #268]	; (8008ef0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008de2:	f01d fded 	bl	80269c0 <__assert_func>
            return buffer[pos];
 8008de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de8:	8a9b      	ldrh	r3, [r3, #20]
 8008dea:	461a      	mov	r2, r3
 8008dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d001      	beq.n	8008dfa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8008df6:	2301      	movs	r3, #1
 8008df8:	e000      	b.n	8008dfc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d06a      	beq.n	8008ed6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f012 ff19 	bl	801bc38 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	331a      	adds	r3, #26
 8008e0a:	623b      	str	r3, [r7, #32]
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8008e10:	6a3b      	ldr	r3, [r7, #32]
 8008e12:	8adb      	ldrh	r3, [r3, #22]
 8008e14:	8bfa      	ldrh	r2, [r7, #30]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d305      	bcc.n	8008e26 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8008e1a:	4b36      	ldr	r3, [pc, #216]	; (8008ef4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8008e1c:	4a36      	ldr	r2, [pc, #216]	; (8008ef8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8008e1e:	21c4      	movs	r1, #196	; 0xc4
 8008e20:	4833      	ldr	r0, [pc, #204]	; (8008ef0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008e22:	f01d fdcd 	bl	80269c0 <__assert_func>
            const uint16_t index = pos + offset;
 8008e26:	6a3b      	ldr	r3, [r7, #32]
 8008e28:	8a9a      	ldrh	r2, [r3, #20]
 8008e2a:	8bfb      	ldrh	r3, [r7, #30]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8008e30:	8bbb      	ldrh	r3, [r7, #28]
 8008e32:	2b09      	cmp	r3, #9
 8008e34:	d801      	bhi.n	8008e3a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8008e36:	8bbb      	ldrh	r3, [r7, #28]
 8008e38:	e001      	b.n	8008e3e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8008e3a:	8bbb      	ldrh	r3, [r7, #28]
 8008e3c:	3b0a      	subs	r3, #10
 8008e3e:	6a3a      	ldr	r2, [r7, #32]
 8008e40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e44:	f640 123f 	movw	r2, #2367	; 0x93f
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	bf0c      	ite	eq
 8008e4c:	2301      	moveq	r3, #1
 8008e4e:	2300      	movne	r3, #0
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d03f      	beq.n	8008ed6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	331a      	adds	r3, #26
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	321a      	adds	r2, #26
 8008e5e:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8008e60:	68ba      	ldr	r2, [r7, #8]
 8008e62:	8ad2      	ldrh	r2, [r2, #22]
 8008e64:	2a00      	cmp	r2, #0
 8008e66:	d105      	bne.n	8008e74 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8008e68:	4b1f      	ldr	r3, [pc, #124]	; (8008ee8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8008e6a:	4a20      	ldr	r2, [pc, #128]	; (8008eec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8008e6c:	21bf      	movs	r1, #191	; 0xbf
 8008e6e:	4820      	ldr	r0, [pc, #128]	; (8008ef0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008e70:	f01d fda6 	bl	80269c0 <__assert_func>
            return buffer[pos];
 8008e74:	68ba      	ldr	r2, [r7, #8]
 8008e76:	8a92      	ldrh	r2, [r2, #20]
 8008e78:	4611      	mov	r1, r2
 8008e7a:	68ba      	ldr	r2, [r7, #8]
 8008e7c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8008e80:	613b      	str	r3, [r7, #16]
 8008e82:	4613      	mov	r3, r2
 8008e84:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	8adb      	ldrh	r3, [r3, #22]
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d806      	bhi.n	8008e9c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8008e8e:	4b1b      	ldr	r3, [pc, #108]	; (8008efc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8008e90:	4a1b      	ldr	r2, [pc, #108]	; (8008f00 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8008e92:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8008e96:	4816      	ldr	r0, [pc, #88]	; (8008ef0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008e98:	f01d fd92 	bl	80269c0 <__assert_func>
            const uint16_t index = pos + 1;
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	8a9b      	ldrh	r3, [r3, #20]
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8008ea4:	89bb      	ldrh	r3, [r7, #12]
 8008ea6:	2b09      	cmp	r3, #9
 8008ea8:	d801      	bhi.n	8008eae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8008eaa:	89bb      	ldrh	r3, [r7, #12]
 8008eac:	e000      	b.n	8008eb0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8008eae:	2300      	movs	r3, #0
 8008eb0:	693a      	ldr	r2, [r7, #16]
 8008eb2:	89f9      	ldrh	r1, [r7, #14]
 8008eb4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8008eb8:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	331a      	adds	r3, #26
 8008ebe:	61bb      	str	r3, [r7, #24]
 8008ec0:	f640 133f 	movw	r3, #2367	; 0x93f
 8008ec4:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	8a9b      	ldrh	r3, [r3, #20]
 8008eca:	4619      	mov	r1, r3
 8008ecc:	69bb      	ldr	r3, [r7, #24]
 8008ece:	8afa      	ldrh	r2, [r7, #22]
 8008ed0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8008ed4:	bf00      	nop
        }
    }
    return getNextChar();
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f012 fd92 	bl	801ba00 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8008edc:	4603      	mov	r3, r0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3728      	adds	r7, #40	; 0x28
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	0802bae4 	.word	0x0802bae4
 8008eec:	0802baf0 	.word	0x0802baf0
 8008ef0:	0802bb9c 	.word	0x0802bb9c
 8008ef4:	0802bbe8 	.word	0x0802bbe8
 8008ef8:	0802bbf8 	.word	0x0802bbf8
 8008efc:	0802bccc 	.word	0x0802bccc
 8008f00:	0802bcd8 	.word	0x0802bcd8

08008f04 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f012 fd31 	bl	801b974 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8008f12:	bf00      	nop
 8008f14:	3708      	adds	r7, #8
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b088      	sub	sp, #32
 8008f1e:	af02      	add	r7, sp, #8
 8008f20:	60f8      	str	r0, [r7, #12]
 8008f22:	1d38      	adds	r0, r7, #4
 8008f24:	e880 0006 	stmia.w	r0, {r1, r2}
 8008f28:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8008f2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008f2e:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8008f30:	1d39      	adds	r1, r7, #4
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	9301      	str	r3, [sp, #4]
 8008f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f38:	9300      	str	r3, [sp, #0]
 8008f3a:	6a3b      	ldr	r3, [r7, #32]
 8008f3c:	683a      	ldr	r2, [r7, #0]
 8008f3e:	68f8      	ldr	r0, [r7, #12]
 8008f40:	f00f ffea 	bl	8018f18 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8008f44:	bf00      	nop
 8008f46:	3718      	adds	r7, #24
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8008f4c:	b590      	push	{r4, r7, lr}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	4603      	mov	r3, r0
 8008f54:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8008f56:	2300      	movs	r3, #0
 8008f58:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8008f5a:	88fb      	ldrh	r3, [r7, #6]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d127      	bne.n	8008fb0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8008f60:	88fb      	ldrh	r3, [r7, #6]
 8008f62:	4a1e      	ldr	r2, [pc, #120]	; (8008fdc <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8008f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d016      	beq.n	8008f9a <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8008f6c:	88fb      	ldrh	r3, [r7, #6]
 8008f6e:	4a1b      	ldr	r2, [pc, #108]	; (8008fdc <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8008f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f74:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	68ba      	ldr	r2, [r7, #8]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	4a18      	ldr	r2, [pc, #96]	; (8008fe0 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8008f80:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	68ba      	ldr	r2, [r7, #8]
 8008f88:	4413      	add	r3, r2
 8008f8a:	4a16      	ldr	r2, [pc, #88]	; (8008fe4 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8008f8c:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	68ba      	ldr	r2, [r7, #8]
 8008f94:	4413      	add	r3, r2
 8008f96:	60fb      	str	r3, [r7, #12]
 8008f98:	e00a      	b.n	8008fb0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8008f9a:	4b11      	ldr	r3, [pc, #68]	; (8008fe0 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8008f9c:	4a12      	ldr	r2, [pc, #72]	; (8008fe8 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8008f9e:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8008fa0:	4a12      	ldr	r2, [pc, #72]	; (8008fec <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8008fa2:	4b10      	ldr	r3, [pc, #64]	; (8008fe4 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8008fa4:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8008fa6:	88fb      	ldrh	r3, [r7, #6]
 8008fa8:	4a11      	ldr	r2, [pc, #68]	; (8008ff0 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8008faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fae:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00d      	beq.n	8008fd2 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8008fb6:	4a0f      	ldr	r2, [pc, #60]	; (8008ff4 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8008fb8:	88fb      	ldrh	r3, [r7, #6]
 8008fba:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8008fbc:	f000 f83e 	bl	800903c <_ZN17TypedTextDatabase8getFontsEv>
 8008fc0:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8008fc2:	f000 f833 	bl	800902c <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	461a      	mov	r2, r3
 8008fca:	4621      	mov	r1, r4
 8008fcc:	68f8      	ldr	r0, [r7, #12]
 8008fce:	f7ff fea5 	bl	8008d1c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8008fd2:	bf00      	nop
 8008fd4:	3714      	adds	r7, #20
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd90      	pop	{r4, r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	200239c4 	.word	0x200239c4
 8008fe0:	200239cc 	.word	0x200239cc
 8008fe4:	200239d0 	.word	0x200239d0
 8008fe8:	080d9804 	.word	0x080d9804
 8008fec:	080d9670 	.word	0x080d9670
 8008ff0:	080d9978 	.word	0x080d9978
 8008ff4:	200239c8 	.word	0x200239c8

08008ff8 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	460b      	mov	r3, r1
 8009002:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8009004:	4b07      	ldr	r3, [pc, #28]	; (8009024 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	4b07      	ldr	r3, [pc, #28]	; (8009028 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800900a:	6819      	ldr	r1, [r3, #0]
 800900c:	887b      	ldrh	r3, [r7, #2]
 800900e:	009b      	lsls	r3, r3, #2
 8009010:	440b      	add	r3, r1
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	005b      	lsls	r3, r3, #1
 8009016:	4413      	add	r3, r2
}
 8009018:	4618      	mov	r0, r3
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr
 8009024:	200239cc 	.word	0x200239cc
 8009028:	200239d0 	.word	0x200239d0

0800902c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800902c:	b480      	push	{r7}
 800902e:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8009030:	2365      	movs	r3, #101	; 0x65
}
 8009032:	4618      	mov	r0, r3
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800903c:	b480      	push	{r7}
 800903e:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8009040:	4b02      	ldr	r3, [pc, #8]	; (800904c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8009042:	4618      	mov	r0, r3
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr
 800904c:	200239d4 	.word	0x200239d4

08009050 <_Z41__static_initialization_and_destruction_0ii>:
    case 7:
        touchgfx_fonts[7] = &(getFont_verdana_12_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2b01      	cmp	r3, #1
 800905e:	d12c      	bne.n	80090ba <_Z41__static_initialization_and_destruction_0ii+0x6a>
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009066:	4293      	cmp	r3, r2
 8009068:	d127      	bne.n	80090ba <_Z41__static_initialization_and_destruction_0ii+0x6a>
    &(getFont_verdana_20_4bpp()),
 800906a:	f7ff fd8f 	bl	8008b8c <_Z23getFont_verdana_20_4bppv>
 800906e:	4603      	mov	r3, r0
};
 8009070:	4a14      	ldr	r2, [pc, #80]	; (80090c4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8009072:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8009074:	f7ff fde0 	bl	8008c38 <_Z23getFont_verdana_40_4bppv>
 8009078:	4603      	mov	r3, r0
};
 800907a:	4a12      	ldr	r2, [pc, #72]	; (80090c4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800907c:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp()),
 800907e:	f7ff fcd9 	bl	8008a34 <_Z23getFont_verdana_10_4bppv>
 8009082:	4603      	mov	r3, r0
};
 8009084:	4a0f      	ldr	r2, [pc, #60]	; (80090c4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8009086:	6093      	str	r3, [r2, #8]
    &(getFont_swisop3_300_4bpp()),
 8009088:	f7ff fc26 	bl	80088d8 <_Z24getFont_swisop3_300_4bppv>
 800908c:	4603      	mov	r3, r0
};
 800908e:	4a0d      	ldr	r2, [pc, #52]	; (80090c4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8009090:	60d3      	str	r3, [r2, #12]
    &(getFont_JetBrainsMono_Regular_40_4bpp()),
 8009092:	f7ff fb75 	bl	8008780 <_Z37getFont_JetBrainsMono_Regular_40_4bppv>
 8009096:	4603      	mov	r3, r0
};
 8009098:	4a0a      	ldr	r2, [pc, #40]	; (80090c4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800909a:	6113      	str	r3, [r2, #16]
    &(getFont_JetBrainsMono_Regular_60_4bpp()),
 800909c:	f7ff fbc6 	bl	800882c <_Z37getFont_JetBrainsMono_Regular_60_4bppv>
 80090a0:	4603      	mov	r3, r0
};
 80090a2:	4a08      	ldr	r2, [pc, #32]	; (80090c4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80090a4:	6153      	str	r3, [r2, #20]
    &(getFont_swisop3_50_4bpp()),
 80090a6:	f7ff fc6f 	bl	8008988 <_Z23getFont_swisop3_50_4bppv>
 80090aa:	4603      	mov	r3, r0
};
 80090ac:	4a05      	ldr	r2, [pc, #20]	; (80090c4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80090ae:	6193      	str	r3, [r2, #24]
    &(getFont_verdana_12_4bpp())
 80090b0:	f7ff fd16 	bl	8008ae0 <_Z23getFont_verdana_12_4bppv>
 80090b4:	4603      	mov	r3, r0
};
 80090b6:	4a03      	ldr	r2, [pc, #12]	; (80090c4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80090b8:	61d3      	str	r3, [r2, #28]
} // namespace TypedTextDatabase
 80090ba:	bf00      	nop
 80090bc:	3708      	adds	r7, #8
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	200239d4 	.word	0x200239d4

080090c8 <_GLOBAL__sub_I_touchgfx_fonts>:
 80090c8:	b580      	push	{r7, lr}
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80090d0:	2001      	movs	r0, #1
 80090d2:	f7ff ffbd 	bl	8009050 <_Z41__static_initialization_and_destruction_0ii>
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <_ZN8touchgfx13BoxWithBorderC1Ev>:
{
public:
    BoxWithBorder()
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
        : Box(), borderColor(0), borderSize(0)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7fd f8ca 	bl	800627c <_ZN8touchgfx3BoxC1Ev>
 80090e8:	4a08      	ldr	r2, [pc, #32]	; (800910c <_ZN8touchgfx13BoxWithBorderC1Ev+0x34>)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	601a      	str	r2, [r3, #0]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	332c      	adds	r3, #44	; 0x2c
 80090f2:	2100      	movs	r1, #0
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7fb f8e1 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	861a      	strh	r2, [r3, #48]	; 0x30
    {
    }
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	4618      	mov	r0, r3
 8009104:	3708      	adds	r7, #8
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	0802dafc 	.word	0x0802dafc

08009110 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     * Sets the color of the border drawn along the edge of the BoxWithBorder.
     *
     * @param  color The color of the border.
     * @see setColor, getBorderColor, Color::getColorFrom24BitRGB
     */
    void setBorderColor(colortype color)
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
    {
        borderColor = color;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	683a      	ldr	r2, [r7, #0]
 800911e:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 8009120:	bf00      	nop
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>:
     *
     * @param  size The width of the border.
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	460b      	mov	r3, r1
 8009136:	807b      	strh	r3, [r7, #2]
    {
        borderSize = size;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	887a      	ldrh	r2, [r7, #2]
 800913c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
 800913e:	bf00      	nop
 8009140:	370c      	adds	r7, #12
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr
	...

0800914c <_ZN12alertBarBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/containers/alertBarBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

alertBarBase::alertBarBase()
 800914c:	b590      	push	{r4, r7, lr}
 800914e:	b091      	sub	sp, #68	; 0x44
 8009150:	af02      	add	r7, sp, #8
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4618      	mov	r0, r3
 8009158:	f7fc ffbc 	bl	80060d4 <_ZN8touchgfx9ContainerC1Ev>
 800915c:	4a68      	ldr	r2, [pc, #416]	; (8009300 <_ZN12alertBarBaseC1Ev+0x1b4>)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	601a      	str	r2, [r3, #0]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	332c      	adds	r3, #44	; 0x2c
 8009166:	4618      	mov	r0, r3
 8009168:	f7ff ffb6 	bl	80090d8 <_ZN8touchgfx13BoxWithBorderC1Ev>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	3360      	adds	r3, #96	; 0x60
 8009170:	4618      	mov	r0, r3
 8009172:	f7fd ff1f 	bl	8006fb4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{
    setWidth(800);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f44f 7148 	mov.w	r1, #800	; 0x320
 800917c:	4618      	mov	r0, r3
 800917e:	f7fc fed1 	bl	8005f24 <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(60);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	213c      	movs	r1, #60	; 0x3c
 8009186:	4618      	mov	r0, r3
 8009188:	f7fc fedb 	bl	8005f42 <_ZN8touchgfx8Drawable9setHeightEs>
    bgBox.setPosition(0, 0, 800, 60);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8009192:	233c      	movs	r3, #60	; 0x3c
 8009194:	9300      	str	r3, [sp, #0]
 8009196:	f44f 7348 	mov.w	r3, #800	; 0x320
 800919a:	2200      	movs	r2, #0
 800919c:	2100      	movs	r1, #0
 800919e:	f7fc fe64 	bl	8005e6a <_ZN8touchgfx8Drawable11setPositionEssss>
    bgBox.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80091a8:	23ff      	movs	r3, #255	; 0xff
 80091aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80091ae:	2300      	movs	r3, #0
 80091b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80091b4:	2300      	movs	r3, #0
 80091b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80091ba:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80091be:	041b      	lsls	r3, r3, #16
 80091c0:	461a      	mov	r2, r3
 80091c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80091c6:	021b      	lsls	r3, r3, #8
 80091c8:	431a      	orrs	r2, r3
 80091ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80091ce:	4313      	orrs	r3, r2
 80091d0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80091d4:	f107 031c 	add.w	r3, r7, #28
 80091d8:	4611      	mov	r1, r2
 80091da:	4618      	mov	r0, r3
 80091dc:	f7fb f86e 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	4619      	mov	r1, r3
 80091e4:	4620      	mov	r0, r4
 80091e6:	f7fd f86d 	bl	80062c4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    bgBox.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80091f0:	2300      	movs	r3, #0
 80091f2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80091f6:	2300      	movs	r3, #0
 80091f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80091fc:	2300      	movs	r3, #0
 80091fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009202:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009206:	041b      	lsls	r3, r3, #16
 8009208:	461a      	mov	r2, r3
 800920a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800920e:	021b      	lsls	r3, r3, #8
 8009210:	431a      	orrs	r2, r3
 8009212:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009216:	4313      	orrs	r3, r2
 8009218:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800921c:	f107 0318 	add.w	r3, r7, #24
 8009220:	4611      	mov	r1, r2
 8009222:	4618      	mov	r0, r3
 8009224:	f7fb f84a 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 8009228:	69bb      	ldr	r3, [r7, #24]
 800922a:	4619      	mov	r1, r3
 800922c:	4620      	mov	r0, r4
 800922e:	f7ff ff6f 	bl	8009110 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    bgBox.setBorderSize(5);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	332c      	adds	r3, #44	; 0x2c
 8009236:	2105      	movs	r1, #5
 8009238:	4618      	mov	r0, r3
 800923a:	f7ff ff77 	bl	800912c <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>

    frontText.setPosition(0, 0, 800, 60);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f103 0060 	add.w	r0, r3, #96	; 0x60
 8009244:	233c      	movs	r3, #60	; 0x3c
 8009246:	9300      	str	r3, [sp, #0]
 8009248:	f44f 7348 	mov.w	r3, #800	; 0x320
 800924c:	2200      	movs	r2, #0
 800924e:	2100      	movs	r1, #0
 8009250:	f7fc fe0b 	bl	8005e6a <_ZN8touchgfx8Drawable11setPositionEssss>
    frontText.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800925a:	23ff      	movs	r3, #255	; 0xff
 800925c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009260:	23ff      	movs	r3, #255	; 0xff
 8009262:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009266:	23ff      	movs	r3, #255	; 0xff
 8009268:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800926c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009270:	041b      	lsls	r3, r3, #16
 8009272:	461a      	mov	r2, r3
 8009274:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8009278:	021b      	lsls	r3, r3, #8
 800927a:	431a      	orrs	r2, r3
 800927c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009280:	4313      	orrs	r3, r2
 8009282:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009286:	f107 0314 	add.w	r3, r7, #20
 800928a:	4611      	mov	r1, r2
 800928c:	4618      	mov	r0, r3
 800928e:	f7fb f815 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	62fc      	str	r4, [r7, #44]	; 0x2c
 8009296:	60bb      	str	r3, [r7, #8]
        this->color = color;
 8009298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929a:	68ba      	ldr	r2, [r7, #8]
 800929c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800929e:	bf00      	nop
    frontText.setLinespacing(0);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	3360      	adds	r3, #96	; 0x60
 80092a4:	637b      	str	r3, [r7, #52]	; 0x34
 80092a6:	2300      	movs	r3, #0
 80092a8:	867b      	strh	r3, [r7, #50]	; 0x32
        linespace = space;
 80092aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ac:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80092ae:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80092b0:	bf00      	nop
    frontText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80092b8:	f107 030c 	add.w	r3, r7, #12
 80092bc:	2105      	movs	r1, #5
 80092be:	4618      	mov	r0, r3
 80092c0:	f7fd fe28 	bl	8006f14 <_ZN8touchgfx9TypedTextC1Et>
 80092c4:	f107 030c 	add.w	r3, r7, #12
 80092c8:	4619      	mov	r1, r3
 80092ca:	4620      	mov	r0, r4
 80092cc:	f00e fba5 	bl	8017a1a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80092d0:	f107 030c 	add.w	r3, r7, #12
 80092d4:	4618      	mov	r0, r3
 80092d6:	f7fd f825 	bl	8006324 <_ZN8touchgfx9TypedTextD1Ev>

    add(bgBox);
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	332c      	adds	r3, #44	; 0x2c
 80092e0:	4619      	mov	r1, r3
 80092e2:	4610      	mov	r0, r2
 80092e4:	f00c fbda 	bl	8015a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(frontText);
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	3360      	adds	r3, #96	; 0x60
 80092ee:	4619      	mov	r1, r3
 80092f0:	4610      	mov	r0, r2
 80092f2:	f00c fbd3 	bl	8015a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	4618      	mov	r0, r3
 80092fa:	373c      	adds	r7, #60	; 0x3c
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd90      	pop	{r4, r7, pc}
 8009300:	0802c5c8 	.word	0x0802c5c8

08009304 <_ZN12alertBarBase10initializeEv>:

void alertBarBase::initialize()
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]

}
 800930c:	bf00      	nop
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <_ZN11tempBoxBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/containers/tempBoxBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

tempBoxBase::tempBoxBase()
 8009318:	b590      	push	{r4, r7, lr}
 800931a:	b091      	sub	sp, #68	; 0x44
 800931c:	af02      	add	r7, sp, #8
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	4618      	mov	r0, r3
 8009324:	f7fc fed6 	bl	80060d4 <_ZN8touchgfx9ContainerC1Ev>
 8009328:	4a6a      	ldr	r2, [pc, #424]	; (80094d4 <_ZN11tempBoxBaseC1Ev+0x1bc>)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	601a      	str	r2, [r3, #0]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	332c      	adds	r3, #44	; 0x2c
 8009332:	4618      	mov	r0, r3
 8009334:	f00d ffa6 	bl	8017284 <_ZN8touchgfx4LineC1Ev>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 800933e:	f107 0310 	add.w	r3, r7, #16
 8009342:	2100      	movs	r1, #0
 8009344:	4618      	mov	r0, r3
 8009346:	f7fa ffb9 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 800934a:	6939      	ldr	r1, [r7, #16]
 800934c:	4620      	mov	r0, r4
 800934e:	f7fd ff5f 	bl	8007210 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	33b8      	adds	r3, #184	; 0xb8
 8009356:	4618      	mov	r0, r3
 8009358:	f7fd fdf2 	bl	8006f40 <_ZN8touchgfx8TextAreaC1Ev>
{
    setWidth(220);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	21dc      	movs	r1, #220	; 0xdc
 8009360:	4618      	mov	r0, r3
 8009362:	f7fc fddf 	bl	8005f24 <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(60);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	213c      	movs	r1, #60	; 0x3c
 800936a:	4618      	mov	r0, r3
 800936c:	f7fc fde9 	bl	8005f42 <_ZN8touchgfx8Drawable9setHeightEs>
    line1.setPosition(0, 0, 100, 60);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8009376:	233c      	movs	r3, #60	; 0x3c
 8009378:	9300      	str	r3, [sp, #0]
 800937a:	2364      	movs	r3, #100	; 0x64
 800937c:	2200      	movs	r2, #0
 800937e:	2100      	movs	r1, #0
 8009380:	f7fc fd73 	bl	8005e6a <_ZN8touchgfx8Drawable11setPositionEssss>
    line1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 800938a:	23ff      	movs	r3, #255	; 0xff
 800938c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8009390:	23ff      	movs	r3, #255	; 0xff
 8009392:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009396:	23ff      	movs	r3, #255	; 0xff
 8009398:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800939c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80093a0:	041b      	lsls	r3, r3, #16
 80093a2:	461a      	mov	r2, r3
 80093a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093a8:	021b      	lsls	r3, r3, #8
 80093aa:	431a      	orrs	r2, r3
 80093ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80093b0:	4313      	orrs	r3, r2
 80093b2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80093b6:	f107 0320 	add.w	r3, r7, #32
 80093ba:	4611      	mov	r1, r2
 80093bc:	4618      	mov	r0, r3
 80093be:	f7fa ff7d 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 80093c2:	6a3b      	ldr	r3, [r7, #32]
 80093c4:	4619      	mov	r1, r3
 80093c6:	4620      	mov	r0, r4
 80093c8:	f7fd ff42 	bl	8007250 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    line1.setPainter(line1Painter);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	33a0      	adds	r3, #160	; 0xa0
 80093d6:	4619      	mov	r1, r3
 80093d8:	4610      	mov	r0, r2
 80093da:	f00d fd77 	bl	8016ecc <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line1.setStart(0, 0);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	332c      	adds	r3, #44	; 0x2c
 80093e2:	2200      	movs	r2, #0
 80093e4:	2100      	movs	r1, #0
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7fe ff94 	bl	8008314 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1.setEnd(0, 220);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	332c      	adds	r3, #44	; 0x2c
 80093f0:	22dc      	movs	r2, #220	; 0xdc
 80093f2:	2100      	movs	r1, #0
 80093f4:	4618      	mov	r0, r3
 80093f6:	f7fe ffb3 	bl	8008360 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1.setLineWidth(1);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	332c      	adds	r3, #44	; 0x2c
 80093fe:	2101      	movs	r1, #1
 8009400:	4618      	mov	r0, r3
 8009402:	f7fe ffd3 	bl	80083ac <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	332c      	adds	r3, #44	; 0x2c
 800940a:	2101      	movs	r1, #1
 800940c:	4618      	mov	r0, r3
 800940e:	f00e f87f 	bl	8017510 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    textArea1.setPosition(0, 0, 220, 60);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
 8009418:	233c      	movs	r3, #60	; 0x3c
 800941a:	9300      	str	r3, [sp, #0]
 800941c:	23dc      	movs	r3, #220	; 0xdc
 800941e:	2200      	movs	r2, #0
 8009420:	2100      	movs	r1, #0
 8009422:	f7fc fd22 	bl	8005e6a <_ZN8touchgfx8Drawable11setPositionEssss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 800942c:	23ff      	movs	r3, #255	; 0xff
 800942e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009432:	23ff      	movs	r3, #255	; 0xff
 8009434:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009438:	23ff      	movs	r3, #255	; 0xff
 800943a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800943e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009442:	041b      	lsls	r3, r3, #16
 8009444:	461a      	mov	r2, r3
 8009446:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800944a:	021b      	lsls	r3, r3, #8
 800944c:	431a      	orrs	r2, r3
 800944e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009452:	4313      	orrs	r3, r2
 8009454:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009458:	f107 031c 	add.w	r3, r7, #28
 800945c:	4611      	mov	r1, r2
 800945e:	4618      	mov	r0, r3
 8009460:	f7fa ff2c 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 8009464:	69fb      	ldr	r3, [r7, #28]
 8009466:	62fc      	str	r4, [r7, #44]	; 0x2c
 8009468:	60fb      	str	r3, [r7, #12]
        this->color = color;
 800946a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800946c:	68fa      	ldr	r2, [r7, #12]
 800946e:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8009470:	bf00      	nop
    textArea1.setLinespacing(2);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	33b8      	adds	r3, #184	; 0xb8
 8009476:	637b      	str	r3, [r7, #52]	; 0x34
 8009478:	2302      	movs	r3, #2
 800947a:	867b      	strh	r3, [r7, #50]	; 0x32
        linespace = space;
 800947c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800947e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8009480:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8009482:	bf00      	nop
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID6));
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 800948a:	f107 0314 	add.w	r3, r7, #20
 800948e:	2104      	movs	r1, #4
 8009490:	4618      	mov	r0, r3
 8009492:	f7fd fd3f 	bl	8006f14 <_ZN8touchgfx9TypedTextC1Et>
 8009496:	f107 0314 	add.w	r3, r7, #20
 800949a:	4619      	mov	r1, r3
 800949c:	4620      	mov	r0, r4
 800949e:	f00e fabc 	bl	8017a1a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80094a2:	f107 0314 	add.w	r3, r7, #20
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7fc ff3c 	bl	8006324 <_ZN8touchgfx9TypedTextD1Ev>

    add(line1);
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	332c      	adds	r3, #44	; 0x2c
 80094b2:	4619      	mov	r1, r3
 80094b4:	4610      	mov	r0, r2
 80094b6:	f00c faf1 	bl	8015a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(textArea1);
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	33b8      	adds	r3, #184	; 0xb8
 80094c0:	4619      	mov	r1, r3
 80094c2:	4610      	mov	r0, r2
 80094c4:	f00c faea 	bl	8015a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	4618      	mov	r0, r3
 80094cc:	373c      	adds	r7, #60	; 0x3c
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd90      	pop	{r4, r7, pc}
 80094d2:	bf00      	nop
 80094d4:	0802c654 	.word	0x0802c654

080094d8 <_ZN11tempBoxBase10initializeEv>:

void tempBoxBase::initialize()
{
 80094d8:	b480      	push	{r7}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]

}
 80094e0:	bf00      	nop
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
    {
    }
 80094f4:	bf00      	nop
 80094f6:	370c      	adds	r7, #12
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
    {
    }
 8009508:	bf00      	nop
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
    {
 800951c:	4a04      	ldr	r2, [pc, #16]	; (8009530 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	601a      	str	r2, [r3, #0]
    }
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	4618      	mov	r0, r3
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr
 8009530:	0802c6f0 	.word	0x0802c6f0

08009534 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
    }
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f7ff ffe9 	bl	8009514 <_ZN8touchgfx9PresenterD1Ev>
 8009542:	2104      	movs	r1, #4
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f01d f906 	bl	8026756 <_ZdlPvj>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4618      	mov	r0, r3
 800954e:	3708      	adds	r7, #8
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
    {
 800955c:	4a04      	ldr	r2, [pc, #16]	; (8009570 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	601a      	str	r2, [r3, #0]
    }
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4618      	mov	r0, r3
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr
 8009570:	0802c6f0 	.word	0x0802c6f0

08009574 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	4a06      	ldr	r2, [pc, #24]	; (8009598 <_ZN13ModelListenerC1Ev+0x24>)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	601a      	str	r2, [r3, #0]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	605a      	str	r2, [r3, #4]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	4618      	mov	r0, r3
 800958c:	370c      	adds	r7, #12
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr
 8009596:	bf00      	nop
 8009598:	0802c6e0 	.word	0x0802c6e0

0800959c <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	4a04      	ldr	r2, [pc, #16]	; (80095b8 <_ZN13ModelListenerD1Ev+0x1c>)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	601a      	str	r2, [r3, #0]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4618      	mov	r0, r3
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr
 80095b8:	0802c6e0 	.word	0x0802c6e0

080095bc <_ZN13ModelListenerD0Ev>:
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f7ff ffe9 	bl	800959c <_ZN13ModelListenerD1Ev>
 80095ca:	2108      	movs	r1, #8
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f01d f8c2 	bl	8026756 <_ZdlPvj>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4618      	mov	r0, r3
 80095d6:	3708      	adds	r7, #8
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	68b9      	ldr	r1, [r7, #8]
 80095ee:	4618      	mov	r0, r3
 80095f0:	f7fd f81e 	bl	8006630 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80095f4:	4a03      	ldr	r2, [pc, #12]	; (8009604 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	601a      	str	r2, [r3, #0]
{

}
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	4618      	mov	r0, r3
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}
 8009604:	0802c188 	.word	0x0802c188

08009608 <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 8009608:	b580      	push	{r7, lr}
 800960a:	b082      	sub	sp, #8
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	4a09      	ldr	r2, [pc, #36]	; (8009638 <_ZN13MainPresenterD1Ev+0x30>)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	601a      	str	r2, [r3, #0]
 8009616:	4a09      	ldr	r2, [pc, #36]	; (800963c <_ZN13MainPresenterD1Ev+0x34>)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	605a      	str	r2, [r3, #4]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	3304      	adds	r3, #4
 8009620:	4618      	mov	r0, r3
 8009622:	f7ff ffbb 	bl	800959c <_ZN13ModelListenerD1Ev>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	4618      	mov	r0, r3
 800962a:	f7ff ff73 	bl	8009514 <_ZN8touchgfx9PresenterD1Ev>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4618      	mov	r0, r3
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	0802c708 	.word	0x0802c708
 800963c:	0802c720 	.word	0x0802c720

08009640 <_ZThn4_N13MainPresenterD1Ev>:
 8009640:	f1a0 0004 	sub.w	r0, r0, #4
 8009644:	e7e0      	b.n	8009608 <_ZN13MainPresenterD1Ev>
 8009646:	bf00      	nop

08009648 <_ZN13MainPresenterD0Ev>:
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f7ff ffd9 	bl	8009608 <_ZN13MainPresenterD1Ev>
 8009656:	2110      	movs	r1, #16
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f01d f87c 	bl	8026756 <_ZdlPvj>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4618      	mov	r0, r3
 8009662:	3708      	adds	r7, #8
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <_ZThn4_N13MainPresenterD0Ev>:
 8009668:	f1a0 0004 	sub.w	r0, r0, #4
 800966c:	e7ec      	b.n	8009648 <_ZN13MainPresenterD0Ev>
	...

08009670 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]
    : view(v)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4618      	mov	r0, r3
 800967e:	f7ff ff69 	bl	8009554 <_ZN8touchgfx9PresenterC1Ev>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	3304      	adds	r3, #4
 8009686:	4618      	mov	r0, r3
 8009688:	f7ff ff74 	bl	8009574 <_ZN13ModelListenerC1Ev>
 800968c:	4a06      	ldr	r2, [pc, #24]	; (80096a8 <_ZN13MainPresenterC1ER8MainView+0x38>)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	601a      	str	r2, [r3, #0]
 8009692:	4a06      	ldr	r2, [pc, #24]	; (80096ac <_ZN13MainPresenterC1ER8MainView+0x3c>)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	605a      	str	r2, [r3, #4]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	683a      	ldr	r2, [r7, #0]
 800969c:	60da      	str	r2, [r3, #12]
{

}
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4618      	mov	r0, r3
 80096a2:	3708      	adds	r7, #8
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	0802c708 	.word	0x0802c708
 80096ac:	0802c720 	.word	0x0802c720

080096b0 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]

}
 80096b8:	bf00      	nop
 80096ba:	370c      	adds	r7, #12
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]

}
 80096cc:	bf00      	nop
 80096ce:	370c      	adds	r7, #12
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <_Z41__static_initialization_and_destruction_0ii>:
 80096d8:	b580      	push	{r7, lr}
 80096da:	b092      	sub	sp, #72	; 0x48
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	6039      	str	r1, [r7, #0]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	f040 8114 	bne.w	8009912 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80096f0:	4293      	cmp	r3, r2
 80096f2:	f040 810e 	bne.w	8009912 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 80096f6:	2300      	movs	r3, #0
 80096f8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80096fc:	2300      	movs	r3, #0
 80096fe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8009702:	2300      	movs	r3, #0
 8009704:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009708:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800970c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009710:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009714:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8009718:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800971c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8009720:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009724:	041b      	lsls	r3, r3, #16
 8009726:	461a      	mov	r2, r3
 8009728:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800972c:	021b      	lsls	r3, r3, #8
 800972e:	431a      	orrs	r2, r3
 8009730:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009734:	4313      	orrs	r3, r2
 8009736:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800973a:	f107 0320 	add.w	r3, r7, #32
 800973e:	4611      	mov	r1, r2
 8009740:	4618      	mov	r0, r3
 8009742:	f7fa fdbb 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 8009746:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 8009748:	bf00      	nop
 800974a:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 800974c:	4b73      	ldr	r3, [pc, #460]	; (800991c <_Z41__static_initialization_and_destruction_0ii+0x244>)
 800974e:	601a      	str	r2, [r3, #0]
 8009750:	23ff      	movs	r3, #255	; 0xff
 8009752:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009756:	2300      	movs	r3, #0
 8009758:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800975c:	2300      	movs	r3, #0
 800975e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8009762:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009766:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800976a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800976e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009772:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009776:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800977a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800977e:	041b      	lsls	r3, r3, #16
 8009780:	461a      	mov	r2, r3
 8009782:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009786:	021b      	lsls	r3, r3, #8
 8009788:	431a      	orrs	r2, r3
 800978a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800978e:	4313      	orrs	r3, r2
 8009790:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009794:	f107 031c 	add.w	r3, r7, #28
 8009798:	4611      	mov	r1, r2
 800979a:	4618      	mov	r0, r3
 800979c:	f7fa fd8e 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 80097a0:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 80097a2:	bf00      	nop
 80097a4:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 80097a6:	4b5e      	ldr	r3, [pc, #376]	; (8009920 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 80097a8:	601a      	str	r2, [r3, #0]
 80097aa:	2300      	movs	r3, #0
 80097ac:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80097b0:	23c0      	movs	r3, #192	; 0xc0
 80097b2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80097b6:	2300      	movs	r3, #0
 80097b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097bc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80097c0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80097c4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80097c8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80097cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80097d0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80097d4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80097d8:	041b      	lsls	r3, r3, #16
 80097da:	461a      	mov	r2, r3
 80097dc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80097e0:	021b      	lsls	r3, r3, #8
 80097e2:	431a      	orrs	r2, r3
 80097e4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80097e8:	4313      	orrs	r3, r2
 80097ea:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80097ee:	f107 0318 	add.w	r3, r7, #24
 80097f2:	4611      	mov	r1, r2
 80097f4:	4618      	mov	r0, r3
 80097f6:	f7fa fd61 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 80097fa:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 80097fc:	bf00      	nop
 80097fe:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 192, 0);
 8009800:	4b48      	ldr	r3, [pc, #288]	; (8009924 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8009802:	601a      	str	r2, [r3, #0]
 8009804:	2300      	movs	r3, #0
 8009806:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800980a:	2300      	movs	r3, #0
 800980c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8009810:	23c0      	movs	r3, #192	; 0xc0
 8009812:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8009816:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800981a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800981e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009822:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009826:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800982a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800982e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8009832:	041b      	lsls	r3, r3, #16
 8009834:	461a      	mov	r2, r3
 8009836:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800983a:	021b      	lsls	r3, r3, #8
 800983c:	431a      	orrs	r2, r3
 800983e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009842:	4313      	orrs	r3, r2
 8009844:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009848:	f107 0314 	add.w	r3, r7, #20
 800984c:	4611      	mov	r1, r2
 800984e:	4618      	mov	r0, r3
 8009850:	f7fa fd34 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 8009854:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 8009856:	bf00      	nop
 8009858:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 192);
 800985a:	4b33      	ldr	r3, [pc, #204]	; (8009928 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 800985c:	601a      	str	r2, [r3, #0]
 800985e:	23f7      	movs	r3, #247	; 0xf7
 8009860:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8009864:	234c      	movs	r3, #76	; 0x4c
 8009866:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 800986a:	2302      	movs	r3, #2
 800986c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009870:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8009874:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8009878:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800987c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8009880:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009884:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8009888:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800988c:	041b      	lsls	r3, r3, #16
 800988e:	461a      	mov	r2, r3
 8009890:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009894:	021b      	lsls	r3, r3, #8
 8009896:	431a      	orrs	r2, r3
 8009898:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800989c:	4313      	orrs	r3, r2
 800989e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80098a2:	f107 0310 	add.w	r3, r7, #16
 80098a6:	4611      	mov	r1, r2
 80098a8:	4618      	mov	r0, r3
 80098aa:	f7fa fd07 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 80098ae:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 80098b0:	bf00      	nop
 80098b2:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 80098b4:	4b1d      	ldr	r3, [pc, #116]	; (800992c <_Z41__static_initialization_and_destruction_0ii+0x254>)
 80098b6:	601a      	str	r2, [r3, #0]
 80098b8:	23f7      	movs	r3, #247	; 0xf7
 80098ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80098be:	23d2      	movs	r3, #210	; 0xd2
 80098c0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80098c4:	2302      	movs	r3, #2
 80098c6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80098ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80098ce:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 80098d2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80098d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098da:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80098de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80098e2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80098e6:	041b      	lsls	r3, r3, #16
 80098e8:	461a      	mov	r2, r3
 80098ea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80098ee:	021b      	lsls	r3, r3, #8
 80098f0:	431a      	orrs	r2, r3
 80098f2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80098f6:	4313      	orrs	r3, r2
 80098f8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80098fc:	f107 030c 	add.w	r3, r7, #12
 8009900:	4611      	mov	r1, r2
 8009902:	4618      	mov	r0, r3
 8009904:	f7fa fcda 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 8009908:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 800990a:	bf00      	nop
 800990c:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 800990e:	4b08      	ldr	r3, [pc, #32]	; (8009930 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8009910:	601a      	str	r2, [r3, #0]
 8009912:	bf00      	nop
 8009914:	3748      	adds	r7, #72	; 0x48
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	200239f4 	.word	0x200239f4
 8009920:	200239f8 	.word	0x200239f8
 8009924:	200239fc 	.word	0x200239fc
 8009928:	20023a00 	.word	0x20023a00
 800992c:	20023a04 	.word	0x20023a04
 8009930:	20023a08 	.word	0x20023a08

08009934 <_GLOBAL__sub_I__ZN13MainPresenterC2ER8MainView>:
 8009934:	b580      	push	{r7, lr}
 8009936:	af00      	add	r7, sp, #0
 8009938:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800993c:	2001      	movs	r0, #1
 800993e:	f7ff fecb 	bl	80096d8 <_Z41__static_initialization_and_destruction_0ii>
 8009942:	bd80      	pop	{r7, pc}

08009944 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	4a05      	ldr	r2, [pc, #20]	; (8009964 <_ZN8MainViewD1Ev+0x20>)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	601a      	str	r2, [r3, #0]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	4618      	mov	r0, r3
 8009956:	f7fd fd9b 	bl	8007490 <_ZN12MainViewBaseD1Ev>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4618      	mov	r0, r3
 800995e:	3708      	adds	r7, #8
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}
 8009964:	0802c730 	.word	0x0802c730

08009968 <_ZN8MainViewD0Ev>:
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f7ff ffe7 	bl	8009944 <_ZN8MainViewD1Ev>
 8009976:	4904      	ldr	r1, [pc, #16]	; (8009988 <_ZN8MainViewD0Ev+0x20>)
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f01c feec 	bl	8026756 <_ZdlPvj>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	4618      	mov	r0, r3
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	000226c0 	.word	0x000226c0

0800998c <_ZN8MainViewC1Ev>:
#include <cstring>
#include <ecumaster.h>
#include <telemetry_data.h>
#include <main.h>

MainView::MainView()
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	4618      	mov	r0, r3
 8009998:	f7fd fe06 	bl	80075a8 <_ZN12MainViewBaseC1Ev>
 800999c:	4a3d      	ldr	r2, [pc, #244]	; (8009a94 <_ZN8MainViewC1Ev+0x108>)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	601a      	str	r2, [r3, #0]
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	4b3c      	ldr	r3, [pc, #240]	; (8009a98 <_ZN8MainViewC1Ev+0x10c>)
 80099a6:	4413      	add	r3, r2
 80099a8:	2200      	movs	r2, #0
 80099aa:	601a      	str	r2, [r3, #0]
{
	rpmArea.setWildcard(rpmAreaBuffer);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f503 70b2 	add.w	r0, r3, #356	; 0x164
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	4b39      	ldr	r3, [pc, #228]	; (8009a9c <_ZN8MainViewC1Ev+0x110>)
 80099b6:	4413      	add	r3, r2
 80099b8:	4619      	mov	r1, r3
 80099ba:	f7fd fb11 	bl	8006fe0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
	gearArea.setWildcard(gearAreaBuffer);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f103 0098 	add.w	r0, r3, #152	; 0x98
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	4b36      	ldr	r3, [pc, #216]	; (8009aa0 <_ZN8MainViewC1Ev+0x114>)
 80099c8:	4413      	add	r3, r2
 80099ca:	4619      	mov	r1, r3
 80099cc:	f7fd fb08 	bl	8006fe0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
	cltArea.setWildcard(cltAreaBuffer);
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	4b34      	ldr	r3, [pc, #208]	; (8009aa4 <_ZN8MainViewC1Ev+0x118>)
 80099d4:	4413      	add	r3, r2
 80099d6:	6879      	ldr	r1, [r7, #4]
 80099d8:	4a33      	ldr	r2, [pc, #204]	; (8009aa8 <_ZN8MainViewC1Ev+0x11c>)
 80099da:	440a      	add	r2, r1
 80099dc:	4611      	mov	r1, r2
 80099de:	4618      	mov	r0, r3
 80099e0:	f7fd fafe 	bl	8006fe0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
	battArea.setWildcard(battAreaBuffer);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f503 70d2 	add.w	r0, r3, #420	; 0x1a4
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	4b2f      	ldr	r3, [pc, #188]	; (8009aac <_ZN8MainViewC1Ev+0x120>)
 80099ee:	4413      	add	r3, r2
 80099f0:	4619      	mov	r1, r3
 80099f2:	f7fd faf5 	bl	8006fe0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
	oilPressArea.setWildcard(oilPressAreaBuffer);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f503 70f2 	add.w	r0, r3, #484	; 0x1e4
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	4b2c      	ldr	r3, [pc, #176]	; (8009ab0 <_ZN8MainViewC1Ev+0x124>)
 8009a00:	4413      	add	r3, r2
 8009a02:	4619      	mov	r1, r3
 8009a04:	f7fd faec 	bl	8006fe0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
	oilTempArea.setWildcard(oilTempAreaBuffer);
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	4b2a      	ldr	r3, [pc, #168]	; (8009ab4 <_ZN8MainViewC1Ev+0x128>)
 8009a0c:	4413      	add	r3, r2
 8009a0e:	6879      	ldr	r1, [r7, #4]
 8009a10:	4a29      	ldr	r2, [pc, #164]	; (8009ab8 <_ZN8MainViewC1Ev+0x12c>)
 8009a12:	440a      	add	r2, r1
 8009a14:	4611      	mov	r1, r2
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7fd fae2 	bl	8006fe0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>

	setRPM(EcuData.rpm);
 8009a1c:	4b27      	ldr	r3, [pc, #156]	; (8009abc <_ZN8MainViewC1Ev+0x130>)
 8009a1e:	881b      	ldrh	r3, [r3, #0]
 8009a20:	4619      	mov	r1, r3
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 fad0 	bl	8009fc8 <_ZN8MainView6setRPMEi>
	setGear(telemetryData.gear);
 8009a28:	4b25      	ldr	r3, [pc, #148]	; (8009ac0 <_ZN8MainViewC1Ev+0x134>)
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 fbe4 	bl	800a1fc <_ZN8MainView7setGearEi>
	setClt(EcuData.clt);
 8009a34:	4b21      	ldr	r3, [pc, #132]	; (8009abc <_ZN8MainViewC1Ev+0x130>)
 8009a36:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 fbad 	bl	800a19c <_ZN8MainView6setCltEs>
	setBatt(EcuData.batt);
 8009a42:	4b1e      	ldr	r3, [pc, #120]	; (8009abc <_ZN8MainViewC1Ev+0x130>)
 8009a44:	edd3 7a07 	vldr	s15, [r3, #28]
 8009a48:	eeb0 0a67 	vmov.f32	s0, s15
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f000 fae7 	bl	800a020 <_ZN8MainView7setBattEf>
	setOilPress(EcuData.oilPress);
 8009a52:	4b1a      	ldr	r3, [pc, #104]	; (8009abc <_ZN8MainViewC1Ev+0x130>)
 8009a54:	edd3 7a03 	vldr	s15, [r3, #12]
 8009a58:	eeb0 0a67 	vmov.f32	s0, s15
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 fb27 	bl	800a0b0 <_ZN8MainView11setOilPressEf>
	setOilTemp(EcuData.oilTemp);
 8009a62:	4b16      	ldr	r3, [pc, #88]	; (8009abc <_ZN8MainViewC1Ev+0x130>)
 8009a64:	7adb      	ldrb	r3, [r3, #11]
 8009a66:	4619      	mov	r1, r3
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 fb67 	bl	800a13c <_ZN8MainView10setOilTempEh>
	alertBar1.setState(EBarState::Blank);
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	4b14      	ldr	r3, [pc, #80]	; (8009ac4 <_ZN8MainViewC1Ev+0x138>)
 8009a72:	4413      	add	r3, r2
 8009a74:	2100      	movs	r1, #0
 8009a76:	4618      	mov	r0, r3
 8009a78:	f000 fdb0 	bl	800a5dc <_ZN8alertBar8setStateE9EBarState>
	alertBar2.setState(EBarState::Blank);
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	4b12      	ldr	r3, [pc, #72]	; (8009ac8 <_ZN8MainViewC1Ev+0x13c>)
 8009a80:	4413      	add	r3, r2
 8009a82:	2100      	movs	r1, #0
 8009a84:	4618      	mov	r0, r3
 8009a86:	f000 fda9 	bl	800a5dc <_ZN8alertBar8setStateE9EBarState>
}
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3708      	adds	r7, #8
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}
 8009a94:	0802c730 	.word	0x0802c730
 8009a98:	000226bc 	.word	0x000226bc
 8009a9c:	0001f778 	.word	0x0001f778
 8009aa0:	0001f774 	.word	0x0001f774
 8009aa4:	0001f6f4 	.word	0x0001f6f4
 8009aa8:	0001f7b4 	.word	0x0001f7b4
 8009aac:	0001f78c 	.word	0x0001f78c
 8009ab0:	0001f7a0 	.word	0x0001f7a0
 8009ab4:	0001f734 	.word	0x0001f734
 8009ab8:	0001f7c8 	.word	0x0001f7c8
 8009abc:	20056dcc 	.word	0x20056dcc
 8009ac0:	20056d90 	.word	0x20056d90
 8009ac4:	0001f514 	.word	0x0001f514
 8009ac8:	0001f604 	.word	0x0001f604

08009acc <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
	MainViewBase::setupScreen();
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f7fe fbd2 	bl	8008280 <_ZN12MainViewBase11setupScreenEv>
}
 8009adc:	bf00      	nop
 8009ade:	3708      	adds	r7, #8
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b082      	sub	sp, #8
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
	MainViewBase::tearDownScreen();
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7fc fb3e 	bl	8006170 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8009af4:	bf00      	nop
 8009af6:	3708      	adds	r7, #8
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <_ZN8MainView15handleTickEventEv>:

void MainView::handleTickEvent()
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b08a      	sub	sp, #40	; 0x28
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
	//// Screen1View::tempBox1_1.redraw();
	//tempBox1_1.invalidate();
	static int a = 0;

	static uint16_t lastRPM = 0;
	if (EcuData.rpm != lastRPM)
 8009b04:	4b9f      	ldr	r3, [pc, #636]	; (8009d84 <_ZN8MainView15handleTickEventEv+0x288>)
 8009b06:	881a      	ldrh	r2, [r3, #0]
 8009b08:	4b9f      	ldr	r3, [pc, #636]	; (8009d88 <_ZN8MainView15handleTickEventEv+0x28c>)
 8009b0a:	881b      	ldrh	r3, [r3, #0]
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d00e      	beq.n	8009b2e <_ZN8MainView15handleTickEventEv+0x32>
	{
		setRPM(EcuData.rpm);
 8009b10:	4b9c      	ldr	r3, [pc, #624]	; (8009d84 <_ZN8MainView15handleTickEventEv+0x288>)
 8009b12:	881b      	ldrh	r3, [r3, #0]
 8009b14:	4619      	mov	r1, r3
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f000 fa56 	bl	8009fc8 <_ZN8MainView6setRPMEi>
		lastRPM = EcuData.rpm;
 8009b1c:	4b99      	ldr	r3, [pc, #612]	; (8009d84 <_ZN8MainView15handleTickEventEv+0x288>)
 8009b1e:	881a      	ldrh	r2, [r3, #0]
 8009b20:	4b99      	ldr	r3, [pc, #612]	; (8009d88 <_ZN8MainView15handleTickEventEv+0x28c>)
 8009b22:	801a      	strh	r2, [r3, #0]
		// if(EcuData.rpm <12000)
		gearArea.invalidate();
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	3398      	adds	r3, #152	; 0x98
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f010 fdbb 	bl	801a6a4 <_ZNK8touchgfx8Drawable10invalidateEv>
		//setGear(2);
	}
	static uint8_t lastGear = 0;
	static uint32_t lastGearUpdateTime =0;
	if (telemetryData.gear != lastGear)
 8009b2e:	4b97      	ldr	r3, [pc, #604]	; (8009d8c <_ZN8MainView15handleTickEventEv+0x290>)
 8009b30:	781a      	ldrb	r2, [r3, #0]
 8009b32:	4b97      	ldr	r3, [pc, #604]	; (8009d90 <_ZN8MainView15handleTickEventEv+0x294>)
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d027      	beq.n	8009b8a <_ZN8MainView15handleTickEventEv+0x8e>
	{
		setGear(telemetryData.gear);
 8009b3a:	4b94      	ldr	r3, [pc, #592]	; (8009d8c <_ZN8MainView15handleTickEventEv+0x290>)
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	4619      	mov	r1, r3
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 fb5b 	bl	800a1fc <_ZN8MainView7setGearEi>
		lastGear = telemetryData.gear;
 8009b46:	4b91      	ldr	r3, [pc, #580]	; (8009d8c <_ZN8MainView15handleTickEventEv+0x290>)
 8009b48:	781a      	ldrb	r2, [r3, #0]
 8009b4a:	4b91      	ldr	r3, [pc, #580]	; (8009d90 <_ZN8MainView15handleTickEventEv+0x294>)
 8009b4c:	701a      	strb	r2, [r3, #0]
		lastGearUpdateTime = HAL_GetTick();
 8009b4e:	f001 f973 	bl	800ae38 <HAL_GetTick>
 8009b52:	4603      	mov	r3, r0
 8009b54:	4a8f      	ldr	r2, [pc, #572]	; (8009d94 <_ZN8MainView15handleTickEventEv+0x298>)
 8009b56:	6013      	str	r3, [r2, #0]
		char buffer[30];
		sprintf(buffer, "GEAR CHANGE TIME: %u", telemetryData.gearChangeTime);
 8009b58:	4b8c      	ldr	r3, [pc, #560]	; (8009d8c <_ZN8MainView15handleTickEventEv+0x290>)
 8009b5a:	785b      	ldrb	r3, [r3, #1]
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	f107 0308 	add.w	r3, r7, #8
 8009b62:	498d      	ldr	r1, [pc, #564]	; (8009d98 <_ZN8MainView15handleTickEventEv+0x29c>)
 8009b64:	4618      	mov	r0, r3
 8009b66:	f01e f863 	bl	8027c30 <siprintf>
		alertBar2.setText(buffer);
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	4b8b      	ldr	r3, [pc, #556]	; (8009d9c <_ZN8MainView15handleTickEventEv+0x2a0>)
 8009b6e:	4413      	add	r3, r2
 8009b70:	f107 0208 	add.w	r2, r7, #8
 8009b74:	4611      	mov	r1, r2
 8009b76:	4618      	mov	r0, r3
 8009b78:	f000 fd98 	bl	800a6ac <_ZN8alertBar7setTextEPKc>
		alertBar2.setState(EBarState::Info);
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	4b87      	ldr	r3, [pc, #540]	; (8009d9c <_ZN8MainView15handleTickEventEv+0x2a0>)
 8009b80:	4413      	add	r3, r2
 8009b82:	2101      	movs	r1, #1
 8009b84:	4618      	mov	r0, r3
 8009b86:	f000 fd29 	bl	800a5dc <_ZN8alertBar8setStateE9EBarState>
	}
	static float lastBatt = 0.0f;
	if (lastBatt != EcuData.batt)
 8009b8a:	4b7e      	ldr	r3, [pc, #504]	; (8009d84 <_ZN8MainView15handleTickEventEv+0x288>)
 8009b8c:	ed93 7a07 	vldr	s14, [r3, #28]
 8009b90:	4b83      	ldr	r3, [pc, #524]	; (8009da0 <_ZN8MainView15handleTickEventEv+0x2a4>)
 8009b92:	edd3 7a00 	vldr	s15, [r3]
 8009b96:	eeb4 7a67 	vcmp.f32	s14, s15
 8009b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b9e:	d00b      	beq.n	8009bb8 <_ZN8MainView15handleTickEventEv+0xbc>
	{
		setBatt(EcuData.batt);
 8009ba0:	4b78      	ldr	r3, [pc, #480]	; (8009d84 <_ZN8MainView15handleTickEventEv+0x288>)
 8009ba2:	edd3 7a07 	vldr	s15, [r3, #28]
 8009ba6:	eeb0 0a67 	vmov.f32	s0, s15
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 fa38 	bl	800a020 <_ZN8MainView7setBattEf>
		lastBatt = EcuData.batt;
 8009bb0:	4b74      	ldr	r3, [pc, #464]	; (8009d84 <_ZN8MainView15handleTickEventEv+0x288>)
 8009bb2:	69db      	ldr	r3, [r3, #28]
 8009bb4:	4a7a      	ldr	r2, [pc, #488]	; (8009da0 <_ZN8MainView15handleTickEventEv+0x2a4>)
 8009bb6:	6013      	str	r3, [r2, #0]
	}
	static int16_t lastClt = 0;
	if (lastClt != EcuData.clt)
 8009bb8:	4b72      	ldr	r3, [pc, #456]	; (8009d84 <_ZN8MainView15handleTickEventEv+0x288>)
 8009bba:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8009bbe:	4b79      	ldr	r3, [pc, #484]	; (8009da4 <_ZN8MainView15handleTickEventEv+0x2a8>)
 8009bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d00b      	beq.n	8009be0 <_ZN8MainView15handleTickEventEv+0xe4>
	{
		setClt(EcuData.clt);
 8009bc8:	4b6e      	ldr	r3, [pc, #440]	; (8009d84 <_ZN8MainView15handleTickEventEv+0x288>)
 8009bca:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8009bce:	4619      	mov	r1, r3
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 fae3 	bl	800a19c <_ZN8MainView6setCltEs>
		lastClt = EcuData.clt;
 8009bd6:	4b6b      	ldr	r3, [pc, #428]	; (8009d84 <_ZN8MainView15handleTickEventEv+0x288>)
 8009bd8:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8009bdc:	4b71      	ldr	r3, [pc, #452]	; (8009da4 <_ZN8MainView15handleTickEventEv+0x2a8>)
 8009bde:	801a      	strh	r2, [r3, #0]
	}
	static uint8_t lastOilPressure = 0;
	if (lastOilPressure != EcuData.oilPress)
 8009be0:	4b71      	ldr	r3, [pc, #452]	; (8009da8 <_ZN8MainView15handleTickEventEv+0x2ac>)
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	ee07 3a90 	vmov	s15, r3
 8009be8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009bec:	4b65      	ldr	r3, [pc, #404]	; (8009d84 <_ZN8MainView15handleTickEventEv+0x288>)
 8009bee:	edd3 7a03 	vldr	s15, [r3, #12]
 8009bf2:	eeb4 7a67 	vcmp.f32	s14, s15
 8009bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bfa:	d022      	beq.n	8009c42 <_ZN8MainView15handleTickEventEv+0x146>
	{
		if (EcuData.ain2 > 0.4f)
 8009bfc:	4b61      	ldr	r3, [pc, #388]	; (8009d84 <_ZN8MainView15handleTickEventEv+0x288>)
 8009bfe:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009c02:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8009dac <_ZN8MainView15handleTickEventEv+0x2b0>
 8009c06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c0e:	dd08      	ble.n	8009c22 <_ZN8MainView15handleTickEventEv+0x126>
		{
			setOilPress(EcuData.oilPress);
 8009c10:	4b5c      	ldr	r3, [pc, #368]	; (8009d84 <_ZN8MainView15handleTickEventEv+0x288>)
 8009c12:	edd3 7a03 	vldr	s15, [r3, #12]
 8009c16:	eeb0 0a67 	vmov.f32	s0, s15
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f000 fa48 	bl	800a0b0 <_ZN8MainView11setOilPressEf>
 8009c20:	e004      	b.n	8009c2c <_ZN8MainView15handleTickEventEv+0x130>
		}
		else
		{
			setOilPress(-1.0f);
 8009c22:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 fa42 	bl	800a0b0 <_ZN8MainView11setOilPressEf>
		}
		lastOilPressure = EcuData.oilPress;
 8009c2c:	4b55      	ldr	r3, [pc, #340]	; (8009d84 <_ZN8MainView15handleTickEventEv+0x288>)
 8009c2e:	edd3 7a03 	vldr	s15, [r3, #12]
 8009c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c36:	edc7 7a00 	vstr	s15, [r7]
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	b2da      	uxtb	r2, r3
 8009c3e:	4b5a      	ldr	r3, [pc, #360]	; (8009da8 <_ZN8MainView15handleTickEventEv+0x2ac>)
 8009c40:	701a      	strb	r2, [r3, #0]
	}

	static uint8_t lastOilTemperature = 0;
	if (lastOilTemperature != EcuData.oilTemp)
 8009c42:	4b50      	ldr	r3, [pc, #320]	; (8009d84 <_ZN8MainView15handleTickEventEv+0x288>)
 8009c44:	7ada      	ldrb	r2, [r3, #11]
 8009c46:	4b5a      	ldr	r3, [pc, #360]	; (8009db0 <_ZN8MainView15handleTickEventEv+0x2b4>)
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d009      	beq.n	8009c62 <_ZN8MainView15handleTickEventEv+0x166>
	{
		setOilTemp(EcuData.oilTemp);
 8009c4e:	4b4d      	ldr	r3, [pc, #308]	; (8009d84 <_ZN8MainView15handleTickEventEv+0x288>)
 8009c50:	7adb      	ldrb	r3, [r3, #11]
 8009c52:	4619      	mov	r1, r3
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 fa71 	bl	800a13c <_ZN8MainView10setOilTempEh>
		lastOilTemperature = EcuData.oilTemp;
 8009c5a:	4b4a      	ldr	r3, [pc, #296]	; (8009d84 <_ZN8MainView15handleTickEventEv+0x288>)
 8009c5c:	7ada      	ldrb	r2, [r3, #11]
 8009c5e:	4b54      	ldr	r3, [pc, #336]	; (8009db0 <_ZN8MainView15handleTickEventEv+0x2b4>)
 8009c60:	701a      	strb	r2, [r3, #0]
	}

	if (EcuData.oilPress <= 1.5 && EcuData.rpm > 1000 && EcuData.ain2 > 0.4f)
 8009c62:	4b48      	ldr	r3, [pc, #288]	; (8009d84 <_ZN8MainView15handleTickEventEv+0x288>)
 8009c64:	edd3 7a03 	vldr	s15, [r3, #12]
 8009c68:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8009c6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c74:	d844      	bhi.n	8009d00 <_ZN8MainView15handleTickEventEv+0x204>
 8009c76:	4b43      	ldr	r3, [pc, #268]	; (8009d84 <_ZN8MainView15handleTickEventEv+0x288>)
 8009c78:	881b      	ldrh	r3, [r3, #0]
 8009c7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c7e:	d93f      	bls.n	8009d00 <_ZN8MainView15handleTickEventEv+0x204>
 8009c80:	4b40      	ldr	r3, [pc, #256]	; (8009d84 <_ZN8MainView15handleTickEventEv+0x288>)
 8009c82:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009c86:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8009dac <_ZN8MainView15handleTickEventEv+0x2b0>
 8009c8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c92:	dd35      	ble.n	8009d00 <_ZN8MainView15handleTickEventEv+0x204>
	{
		static int lastChange = 0;
		if (tickCounter - lastChange > 15)
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	4b47      	ldr	r3, [pc, #284]	; (8009db4 <_ZN8MainView15handleTickEventEv+0x2b8>)
 8009c98:	4413      	add	r3, r2
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	4b46      	ldr	r3, [pc, #280]	; (8009db8 <_ZN8MainView15handleTickEventEv+0x2bc>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	1ad3      	subs	r3, r2, r3
 8009ca2:	2b0f      	cmp	r3, #15
 8009ca4:	dd5a      	ble.n	8009d5c <_ZN8MainView15handleTickEventEv+0x260>
		{
			alertBar1.setText("LOW OIL PRESS\n");
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	4b44      	ldr	r3, [pc, #272]	; (8009dbc <_ZN8MainView15handleTickEventEv+0x2c0>)
 8009caa:	4413      	add	r3, r2
 8009cac:	4944      	ldr	r1, [pc, #272]	; (8009dc0 <_ZN8MainView15handleTickEventEv+0x2c4>)
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f000 fcfc 	bl	800a6ac <_ZN8alertBar7setTextEPKc>
			if (a == 0)
 8009cb4:	4b43      	ldr	r3, [pc, #268]	; (8009dc4 <_ZN8MainView15handleTickEventEv+0x2c8>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d107      	bne.n	8009ccc <_ZN8MainView15handleTickEventEv+0x1d0>
			{
				alertBar1.setState(EBarState::Critical1);
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	4b3f      	ldr	r3, [pc, #252]	; (8009dbc <_ZN8MainView15handleTickEventEv+0x2c0>)
 8009cc0:	4413      	add	r3, r2
 8009cc2:	2104      	movs	r1, #4
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f000 fc89 	bl	800a5dc <_ZN8alertBar8setStateE9EBarState>
 8009cca:	e006      	b.n	8009cda <_ZN8MainView15handleTickEventEv+0x1de>
			}
			else
			{
				alertBar1.setState(EBarState::Critical2);
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	4b3b      	ldr	r3, [pc, #236]	; (8009dbc <_ZN8MainView15handleTickEventEv+0x2c0>)
 8009cd0:	4413      	add	r3, r2
 8009cd2:	2105      	movs	r1, #5
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f000 fc81 	bl	800a5dc <_ZN8alertBar8setStateE9EBarState>
			}
			alertBar1.invalidate();
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	4b37      	ldr	r3, [pc, #220]	; (8009dbc <_ZN8MainView15handleTickEventEv+0x2c0>)
 8009cde:	4413      	add	r3, r2
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f010 fcdf 	bl	801a6a4 <_ZNK8touchgfx8Drawable10invalidateEv>
			a = 1 - a;
 8009ce6:	4b37      	ldr	r3, [pc, #220]	; (8009dc4 <_ZN8MainView15handleTickEventEv+0x2c8>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f1c3 0301 	rsb	r3, r3, #1
 8009cee:	4a35      	ldr	r2, [pc, #212]	; (8009dc4 <_ZN8MainView15handleTickEventEv+0x2c8>)
 8009cf0:	6013      	str	r3, [r2, #0]
			lastChange = tickCounter;
 8009cf2:	687a      	ldr	r2, [r7, #4]
 8009cf4:	4b2f      	ldr	r3, [pc, #188]	; (8009db4 <_ZN8MainView15handleTickEventEv+0x2b8>)
 8009cf6:	4413      	add	r3, r2
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a2f      	ldr	r2, [pc, #188]	; (8009db8 <_ZN8MainView15handleTickEventEv+0x2bc>)
 8009cfc:	6013      	str	r3, [r2, #0]
		}
 8009cfe:	e02d      	b.n	8009d5c <_ZN8MainView15handleTickEventEv+0x260>
	}
	else if (telemetryData.gear == 7)
 8009d00:	4b22      	ldr	r3, [pc, #136]	; (8009d8c <_ZN8MainView15handleTickEventEv+0x290>)
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	2b07      	cmp	r3, #7
 8009d06:	d10e      	bne.n	8009d26 <_ZN8MainView15handleTickEventEv+0x22a>
	{
		alertBar1.setState(EBarState::Warning);
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	4b2c      	ldr	r3, [pc, #176]	; (8009dbc <_ZN8MainView15handleTickEventEv+0x2c0>)
 8009d0c:	4413      	add	r3, r2
 8009d0e:	2102      	movs	r1, #2
 8009d10:	4618      	mov	r0, r3
 8009d12:	f000 fc63 	bl	800a5dc <_ZN8alertBar8setStateE9EBarState>
		alertBar1.setText("GEAR UNKNOWN");
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	4b28      	ldr	r3, [pc, #160]	; (8009dbc <_ZN8MainView15handleTickEventEv+0x2c0>)
 8009d1a:	4413      	add	r3, r2
 8009d1c:	492a      	ldr	r1, [pc, #168]	; (8009dc8 <_ZN8MainView15handleTickEventEv+0x2cc>)
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f000 fcc4 	bl	800a6ac <_ZN8alertBar7setTextEPKc>
 8009d24:	e01b      	b.n	8009d5e <_ZN8MainView15handleTickEventEv+0x262>
	}
	else if (telemetryData.steeringWheelAttached == 1)
 8009d26:	4b19      	ldr	r3, [pc, #100]	; (8009d8c <_ZN8MainView15handleTickEventEv+0x290>)
 8009d28:	791b      	ldrb	r3, [r3, #4]
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d10e      	bne.n	8009d4c <_ZN8MainView15handleTickEventEv+0x250>
	{
		alertBar1.setState(EBarState::Info);
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	4b22      	ldr	r3, [pc, #136]	; (8009dbc <_ZN8MainView15handleTickEventEv+0x2c0>)
 8009d32:	4413      	add	r3, r2
 8009d34:	2101      	movs	r1, #1
 8009d36:	4618      	mov	r0, r3
 8009d38:	f000 fc50 	bl	800a5dc <_ZN8alertBar8setStateE9EBarState>
		alertBar1.setText("STEERING WHEEL ATTACHED");
 8009d3c:	687a      	ldr	r2, [r7, #4]
 8009d3e:	4b1f      	ldr	r3, [pc, #124]	; (8009dbc <_ZN8MainView15handleTickEventEv+0x2c0>)
 8009d40:	4413      	add	r3, r2
 8009d42:	4922      	ldr	r1, [pc, #136]	; (8009dcc <_ZN8MainView15handleTickEventEv+0x2d0>)
 8009d44:	4618      	mov	r0, r3
 8009d46:	f000 fcb1 	bl	800a6ac <_ZN8alertBar7setTextEPKc>
 8009d4a:	e008      	b.n	8009d5e <_ZN8MainView15handleTickEventEv+0x262>
	}
	else
	{
		alertBar1.setState(EBarState::Blank);
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	4b1b      	ldr	r3, [pc, #108]	; (8009dbc <_ZN8MainView15handleTickEventEv+0x2c0>)
 8009d50:	4413      	add	r3, r2
 8009d52:	2100      	movs	r1, #0
 8009d54:	4618      	mov	r0, r3
 8009d56:	f000 fc41 	bl	800a5dc <_ZN8alertBar8setStateE9EBarState>
 8009d5a:	e000      	b.n	8009d5e <_ZN8MainView15handleTickEventEv+0x262>
		}
 8009d5c:	bf00      	nop
	}


	if (telemetryData.isIntercomActive == 1)
 8009d5e:	4b0b      	ldr	r3, [pc, #44]	; (8009d8c <_ZN8MainView15handleTickEventEv+0x290>)
 8009d60:	7b1b      	ldrb	r3, [r3, #12]
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d136      	bne.n	8009dd4 <_ZN8MainView15handleTickEventEv+0x2d8>
	{
		alertBar2.setState(EBarState::Info);
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	4b0c      	ldr	r3, [pc, #48]	; (8009d9c <_ZN8MainView15handleTickEventEv+0x2a0>)
 8009d6a:	4413      	add	r3, r2
 8009d6c:	2101      	movs	r1, #1
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f000 fc34 	bl	800a5dc <_ZN8alertBar8setStateE9EBarState>
		alertBar2.setText("INTERCOM ACTIVE");
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	4b09      	ldr	r3, [pc, #36]	; (8009d9c <_ZN8MainView15handleTickEventEv+0x2a0>)
 8009d78:	4413      	add	r3, r2
 8009d7a:	4915      	ldr	r1, [pc, #84]	; (8009dd0 <_ZN8MainView15handleTickEventEv+0x2d4>)
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f000 fc95 	bl	800a6ac <_ZN8alertBar7setTextEPKc>
 8009d82:	e03d      	b.n	8009e00 <_ZN8MainView15handleTickEventEv+0x304>
 8009d84:	20056dcc 	.word	0x20056dcc
 8009d88:	20023a28 	.word	0x20023a28
 8009d8c:	20056d90 	.word	0x20056d90
 8009d90:	20023a2a 	.word	0x20023a2a
 8009d94:	20023a2c 	.word	0x20023a2c
 8009d98:	0802bd8c 	.word	0x0802bd8c
 8009d9c:	0001f604 	.word	0x0001f604
 8009da0:	20023a30 	.word	0x20023a30
 8009da4:	20023a34 	.word	0x20023a34
 8009da8:	20023a36 	.word	0x20023a36
 8009dac:	3ecccccd 	.word	0x3ecccccd
 8009db0:	20023a37 	.word	0x20023a37
 8009db4:	000226bc 	.word	0x000226bc
 8009db8:	20023a38 	.word	0x20023a38
 8009dbc:	0001f514 	.word	0x0001f514
 8009dc0:	0802bda4 	.word	0x0802bda4
 8009dc4:	20023a24 	.word	0x20023a24
 8009dc8:	0802bdb4 	.word	0x0802bdb4
 8009dcc:	0802bdc4 	.word	0x0802bdc4
 8009dd0:	0802bddc 	.word	0x0802bddc
	}else if(HAL_GetTick()-lastGearUpdateTime>750)
 8009dd4:	f001 f830 	bl	800ae38 <HAL_GetTick>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	4b10      	ldr	r3, [pc, #64]	; (8009e1c <_ZN8MainView15handleTickEventEv+0x320>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	1ad3      	subs	r3, r2, r3
 8009de0:	f240 22ee 	movw	r2, #750	; 0x2ee
 8009de4:	4293      	cmp	r3, r2
 8009de6:	bf8c      	ite	hi
 8009de8:	2301      	movhi	r3, #1
 8009dea:	2300      	movls	r3, #0
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d006      	beq.n	8009e00 <_ZN8MainView15handleTickEventEv+0x304>
	{
		alertBar2.setState(EBarState::Blank);
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	4b0a      	ldr	r3, [pc, #40]	; (8009e20 <_ZN8MainView15handleTickEventEv+0x324>)
 8009df6:	4413      	add	r3, r2
 8009df8:	2100      	movs	r1, #0
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f000 fbee 	bl	800a5dc <_ZN8alertBar8setStateE9EBarState>

	//setClt(EcuData.clt);
	//setBatt(EcuData.batt);
	//alertBar1.invalidate();
	//alertBar1.setText("12345678912345\n");
	tickCounter++;
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	4b08      	ldr	r3, [pc, #32]	; (8009e24 <_ZN8MainView15handleTickEventEv+0x328>)
 8009e04:	4413      	add	r3, r2
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	1c5a      	adds	r2, r3, #1
 8009e0a:	6879      	ldr	r1, [r7, #4]
 8009e0c:	4b05      	ldr	r3, [pc, #20]	; (8009e24 <_ZN8MainView15handleTickEventEv+0x328>)
 8009e0e:	440b      	add	r3, r1
 8009e10:	601a      	str	r2, [r3, #0]
}
 8009e12:	bf00      	nop
 8009e14:	3728      	adds	r7, #40	; 0x28
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	bf00      	nop
 8009e1c:	20023a2c 	.word	0x20023a2c
 8009e20:	0001f604 	.word	0x0001f604
 8009e24:	000226bc 	.word	0x000226bc

08009e28 <_ZN8MainView7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>:

void MainView::setText(touchgfx::TextAreaWithOneWildcard textArea,
		touchgfx::Unicode::UnicodeChar *buffer, const char inText[])
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	60f8      	str	r0, [r7, #12]
 8009e30:	60b9      	str	r1, [r7, #8]
 8009e32:	607a      	str	r2, [r7, #4]
 8009e34:	603b      	str	r3, [r7, #0]
	Unicode::snprintf(buffer, strlen(inText) + 1, inText);
 8009e36:	6838      	ldr	r0, [r7, #0]
 8009e38:	f7f6 fa02 	bl	8000240 <strlen>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	3301      	adds	r3, #1
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	683a      	ldr	r2, [r7, #0]
 8009e46:	4619      	mov	r1, r3
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f012 fcad 	bl	801c7a8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	//textArea.resizeToCurrentText();
	textArea.invalidate();
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	4618      	mov	r0, r3
 8009e52:	f010 fc27 	bl	801a6a4 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8009e56:	bf00      	nop
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
	...

08009e60 <_ZN8touchgfx8DrawableC1ERKS0_>:
class Drawable
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6039      	str	r1, [r7, #0]
 8009e6a:	4a1e      	ldr	r2, [pc, #120]	; (8009ee4 <_ZN8touchgfx8DrawableC1ERKS0_+0x84>)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	601a      	str	r2, [r3, #0]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	683a      	ldr	r2, [r7, #0]
 8009e74:	3304      	adds	r3, #4
 8009e76:	3204      	adds	r2, #4
 8009e78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e7c:	e883 0003 	stmia.w	r3, {r0, r1}
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	683a      	ldr	r2, [r7, #0]
 8009e84:	330c      	adds	r3, #12
 8009e86:	320c      	adds	r2, #12
 8009e88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e8c:	e883 0003 	stmia.w	r3, {r0, r1}
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	695a      	ldr	r2, [r3, #20]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	615a      	str	r2, [r3, #20]
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	699a      	ldr	r2, [r3, #24]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	619a      	str	r2, [r3, #24]
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	69da      	ldr	r2, [r3, #28]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	61da      	str	r2, [r3, #28]
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	841a      	strh	r2, [r3, #32]
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	845a      	strh	r2, [r3, #34]	; 0x22
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	370c      	adds	r7, #12
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr
 8009ee2:	bf00      	nop
 8009ee4:	0802de3c 	.word	0x0802de3c

08009ee8 <_ZN8touchgfx6WidgetC1ERKS0_>:
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	683a      	ldr	r2, [r7, #0]
 8009ef6:	4611      	mov	r1, r2
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f7ff ffb1 	bl	8009e60 <_ZN8touchgfx8DrawableC1ERKS0_>
 8009efe:	4a04      	ldr	r2, [pc, #16]	; (8009f10 <_ZN8touchgfx6WidgetC1ERKS0_+0x28>)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	601a      	str	r2, [r3, #0]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	4618      	mov	r0, r3
 8009f08:	3708      	adds	r7, #8
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	0802c3d4 	.word	0x0802c3d4

08009f14 <_ZN8touchgfx8TextAreaC1ERKS0_>:
class TextArea : public Widget
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	683a      	ldr	r2, [r7, #0]
 8009f22:	4611      	mov	r1, r2
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7ff ffdf 	bl	8009ee8 <_ZN8touchgfx6WidgetC1ERKS0_>
 8009f2a:	4a19      	ldr	r2, [pc, #100]	; (8009f90 <_ZN8touchgfx8TextAreaC1ERKS0_+0x7c>)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	601a      	str	r2, [r3, #0]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	3328      	adds	r3, #40	; 0x28
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	4610      	mov	r0, r2
 8009f3e:	f7fc fa7d 	bl	800643c <_ZN8touchgfx9TypedTextC1ERKS0_>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	683a      	ldr	r2, [r7, #0]
 8009f46:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009f48:	631a      	str	r2, [r3, #48]	; 0x30
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	; 0x34
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	869a      	strh	r2, [r3, #52]	; 0x34
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	4618      	mov	r0, r3
 8009f88:	3708      	adds	r7, #8
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	0802d948 	.word	0x0802d948

08009f94 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>:
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	683a      	ldr	r2, [r7, #0]
 8009fa2:	4611      	mov	r1, r2
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f7ff ffb5 	bl	8009f14 <_ZN8touchgfx8TextAreaC1ERKS0_>
 8009faa:	4a06      	ldr	r2, [pc, #24]	; (8009fc4 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_+0x30>)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	601a      	str	r2, [r3, #0]
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	63da      	str	r2, [r3, #60]	; 0x3c
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3708      	adds	r7, #8
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	0802da54 	.word	0x0802da54

08009fc8 <_ZN8MainView6setRPMEi>:

void MainView::setRPM(int inRPM)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b096      	sub	sp, #88	; 0x58
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
	char textBuffer[10];
	sprintf(textBuffer, "%d", inRPM);
 8009fd2:	f107 030c 	add.w	r3, r7, #12
 8009fd6:	683a      	ldr	r2, [r7, #0]
 8009fd8:	490f      	ldr	r1, [pc, #60]	; (800a018 <_ZN8MainView6setRPMEi+0x50>)
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f01d fe28 	bl	8027c30 <siprintf>
	setText(rpmArea, rpmAreaBuffer, textBuffer);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f503 72b2 	add.w	r2, r3, #356	; 0x164
 8009fe6:	f107 0318 	add.w	r3, r7, #24
 8009fea:	4611      	mov	r1, r2
 8009fec:	4618      	mov	r0, r3
 8009fee:	f7ff ffd1 	bl	8009f94 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	4a09      	ldr	r2, [pc, #36]	; (800a01c <_ZN8MainView6setRPMEi+0x54>)
 8009ff6:	441a      	add	r2, r3
 8009ff8:	f107 030c 	add.w	r3, r7, #12
 8009ffc:	f107 0118 	add.w	r1, r7, #24
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f7ff ff11 	bl	8009e28 <_ZN8MainView7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 800a006:	f107 0318 	add.w	r3, r7, #24
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7fe fb7a 	bl	8008704 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 800a010:	bf00      	nop
 800a012:	3758      	adds	r7, #88	; 0x58
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}
 800a018:	0802bdec 	.word	0x0802bdec
 800a01c:	0001f778 	.word	0x0001f778

0800a020 <_ZN8MainView7setBattEf>:

void MainView::setBatt(float inBatt)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b096      	sub	sp, #88	; 0x58
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	ed87 0a00 	vstr	s0, [r7]
	char textBuffer[10];
	if (inBatt < 10.0f)
 800a02c:	edd7 7a00 	vldr	s15, [r7]
 800a030:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800a034:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a03c:	d50b      	bpl.n	800a056 <_ZN8MainView7setBattEf+0x36>
	{
		sprintf(textBuffer, " %.1f", inBatt);
 800a03e:	edd7 7a00 	vldr	s15, [r7]
 800a042:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800a046:	f107 000c 	add.w	r0, r7, #12
 800a04a:	ec53 2b17 	vmov	r2, r3, d7
 800a04e:	4915      	ldr	r1, [pc, #84]	; (800a0a4 <_ZN8MainView7setBattEf+0x84>)
 800a050:	f01d fdee 	bl	8027c30 <siprintf>
 800a054:	e00a      	b.n	800a06c <_ZN8MainView7setBattEf+0x4c>
	}
	else
	{
		sprintf(textBuffer, "%.1f", inBatt);
 800a056:	edd7 7a00 	vldr	s15, [r7]
 800a05a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800a05e:	f107 000c 	add.w	r0, r7, #12
 800a062:	ec53 2b17 	vmov	r2, r3, d7
 800a066:	4910      	ldr	r1, [pc, #64]	; (800a0a8 <_ZN8MainView7setBattEf+0x88>)
 800a068:	f01d fde2 	bl	8027c30 <siprintf>
	}

	setText(battArea, battAreaBuffer, textBuffer);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f503 72d2 	add.w	r2, r3, #420	; 0x1a4
 800a072:	f107 0318 	add.w	r3, r7, #24
 800a076:	4611      	mov	r1, r2
 800a078:	4618      	mov	r0, r3
 800a07a:	f7ff ff8b 	bl	8009f94 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	4a0a      	ldr	r2, [pc, #40]	; (800a0ac <_ZN8MainView7setBattEf+0x8c>)
 800a082:	441a      	add	r2, r3
 800a084:	f107 030c 	add.w	r3, r7, #12
 800a088:	f107 0118 	add.w	r1, r7, #24
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f7ff fecb 	bl	8009e28 <_ZN8MainView7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 800a092:	f107 0318 	add.w	r3, r7, #24
 800a096:	4618      	mov	r0, r3
 800a098:	f7fe fb34 	bl	8008704 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 800a09c:	bf00      	nop
 800a09e:	3758      	adds	r7, #88	; 0x58
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	0802bdf0 	.word	0x0802bdf0
 800a0a8:	0802bdf8 	.word	0x0802bdf8
 800a0ac:	0001f78c 	.word	0x0001f78c

0800a0b0 <_ZN8MainView11setOilPressEf>:

void MainView::setOilPress(float inOilPress)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b096      	sub	sp, #88	; 0x58
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	ed87 0a00 	vstr	s0, [r7]
	char textBuffer[10];
	if (inOilPress == -1.0f)
 800a0bc:	edd7 7a00 	vldr	s15, [r7]
 800a0c0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a0c4:	eef4 7a47 	vcmp.f32	s15, s14
 800a0c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0cc:	d107      	bne.n	800a0de <_ZN8MainView11setOilPressEf+0x2e>
	{
		sprintf(textBuffer, "%s", "---");
 800a0ce:	f107 030c 	add.w	r3, r7, #12
 800a0d2:	4a16      	ldr	r2, [pc, #88]	; (800a12c <_ZN8MainView11setOilPressEf+0x7c>)
 800a0d4:	4916      	ldr	r1, [pc, #88]	; (800a130 <_ZN8MainView11setOilPressEf+0x80>)
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f01d fdaa 	bl	8027c30 <siprintf>
 800a0dc:	e00a      	b.n	800a0f4 <_ZN8MainView11setOilPressEf+0x44>
	}
	else
	{
		sprintf(textBuffer, "%.1f", inOilPress);
 800a0de:	edd7 7a00 	vldr	s15, [r7]
 800a0e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800a0e6:	f107 000c 	add.w	r0, r7, #12
 800a0ea:	ec53 2b17 	vmov	r2, r3, d7
 800a0ee:	4911      	ldr	r1, [pc, #68]	; (800a134 <_ZN8MainView11setOilPressEf+0x84>)
 800a0f0:	f01d fd9e 	bl	8027c30 <siprintf>
	}
	setText(oilPressArea, oilPressAreaBuffer, textBuffer);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f503 72f2 	add.w	r2, r3, #484	; 0x1e4
 800a0fa:	f107 0318 	add.w	r3, r7, #24
 800a0fe:	4611      	mov	r1, r2
 800a100:	4618      	mov	r0, r3
 800a102:	f7ff ff47 	bl	8009f94 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	4a0b      	ldr	r2, [pc, #44]	; (800a138 <_ZN8MainView11setOilPressEf+0x88>)
 800a10a:	441a      	add	r2, r3
 800a10c:	f107 030c 	add.w	r3, r7, #12
 800a110:	f107 0118 	add.w	r1, r7, #24
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f7ff fe87 	bl	8009e28 <_ZN8MainView7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 800a11a:	f107 0318 	add.w	r3, r7, #24
 800a11e:	4618      	mov	r0, r3
 800a120:	f7fe faf0 	bl	8008704 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 800a124:	bf00      	nop
 800a126:	3758      	adds	r7, #88	; 0x58
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}
 800a12c:	0802be00 	.word	0x0802be00
 800a130:	0802be04 	.word	0x0802be04
 800a134:	0802bdf8 	.word	0x0802bdf8
 800a138:	0001f7a0 	.word	0x0001f7a0

0800a13c <_ZN8MainView10setOilTempEh>:
void MainView::setOilTemp(uint8_t inOilTemp)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b096      	sub	sp, #88	; 0x58
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	460b      	mov	r3, r1
 800a146:	70fb      	strb	r3, [r7, #3]
	char textBuffer[10];
	sprintf(textBuffer, "%i", inOilTemp);
 800a148:	78fa      	ldrb	r2, [r7, #3]
 800a14a:	f107 030c 	add.w	r3, r7, #12
 800a14e:	4910      	ldr	r1, [pc, #64]	; (800a190 <_ZN8MainView10setOilTempEh+0x54>)
 800a150:	4618      	mov	r0, r3
 800a152:	f01d fd6d 	bl	8027c30 <siprintf>
	setText(oilTempArea, oilTempAreaBuffer, textBuffer);
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	4b0e      	ldr	r3, [pc, #56]	; (800a194 <_ZN8MainView10setOilTempEh+0x58>)
 800a15a:	4413      	add	r3, r2
 800a15c:	f107 0218 	add.w	r2, r7, #24
 800a160:	4619      	mov	r1, r3
 800a162:	4610      	mov	r0, r2
 800a164:	f7ff ff16 	bl	8009f94 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	4a0b      	ldr	r2, [pc, #44]	; (800a198 <_ZN8MainView10setOilTempEh+0x5c>)
 800a16c:	441a      	add	r2, r3
 800a16e:	f107 030c 	add.w	r3, r7, #12
 800a172:	f107 0118 	add.w	r1, r7, #24
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f7ff fe56 	bl	8009e28 <_ZN8MainView7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 800a17c:	f107 0318 	add.w	r3, r7, #24
 800a180:	4618      	mov	r0, r3
 800a182:	f7fe fabf 	bl	8008704 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 800a186:	bf00      	nop
 800a188:	3758      	adds	r7, #88	; 0x58
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	0802be08 	.word	0x0802be08
 800a194:	0001f734 	.word	0x0001f734
 800a198:	0001f7c8 	.word	0x0001f7c8

0800a19c <_ZN8MainView6setCltEs>:

void MainView::setClt(int16_t inClt)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b096      	sub	sp, #88	; 0x58
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	807b      	strh	r3, [r7, #2]
	char textBuffer[10];
	sprintf(textBuffer, "%i", inClt);
 800a1a8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800a1ac:	f107 030c 	add.w	r3, r7, #12
 800a1b0:	490f      	ldr	r1, [pc, #60]	; (800a1f0 <_ZN8MainView6setCltEs+0x54>)
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f01d fd3c 	bl	8027c30 <siprintf>
	setText(cltArea, cltAreaBuffer, textBuffer);
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	4b0e      	ldr	r3, [pc, #56]	; (800a1f4 <_ZN8MainView6setCltEs+0x58>)
 800a1bc:	4413      	add	r3, r2
 800a1be:	f107 0218 	add.w	r2, r7, #24
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	4610      	mov	r0, r2
 800a1c6:	f7ff fee5 	bl	8009f94 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4a0a      	ldr	r2, [pc, #40]	; (800a1f8 <_ZN8MainView6setCltEs+0x5c>)
 800a1ce:	441a      	add	r2, r3
 800a1d0:	f107 030c 	add.w	r3, r7, #12
 800a1d4:	f107 0118 	add.w	r1, r7, #24
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f7ff fe25 	bl	8009e28 <_ZN8MainView7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 800a1de:	f107 0318 	add.w	r3, r7, #24
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7fe fa8e 	bl	8008704 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 800a1e8:	bf00      	nop
 800a1ea:	3758      	adds	r7, #88	; 0x58
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	0802be08 	.word	0x0802be08
 800a1f4:	0001f6f4 	.word	0x0001f6f4
 800a1f8:	0001f7b4 	.word	0x0001f7b4

0800a1fc <_ZN8MainView7setGearEi>:

void MainView::setGear(int inGear)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b0a6      	sub	sp, #152	; 0x98
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	6039      	str	r1, [r7, #0]
	char textBuffer[10];
	if (inGear == 0)
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d11f      	bne.n	800a24c <_ZN8MainView7setGearEi+0x50>
	{
		sprintf(textBuffer, "%s", "N");
 800a20c:	f107 030c 	add.w	r3, r7, #12
 800a210:	4a21      	ldr	r2, [pc, #132]	; (800a298 <_ZN8MainView7setGearEi+0x9c>)
 800a212:	4922      	ldr	r1, [pc, #136]	; (800a29c <_ZN8MainView7setGearEi+0xa0>)
 800a214:	4618      	mov	r0, r3
 800a216:	f01d fd0b 	bl	8027c30 <siprintf>
		setText(gearArea, gearAreaBuffer, textBuffer);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f103 0298 	add.w	r2, r3, #152	; 0x98
 800a220:	f107 0318 	add.w	r3, r7, #24
 800a224:	4611      	mov	r1, r2
 800a226:	4618      	mov	r0, r3
 800a228:	f7ff feb4 	bl	8009f94 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	4a1c      	ldr	r2, [pc, #112]	; (800a2a0 <_ZN8MainView7setGearEi+0xa4>)
 800a230:	441a      	add	r2, r3
 800a232:	f107 030c 	add.w	r3, r7, #12
 800a236:	f107 0118 	add.w	r1, r7, #24
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f7ff fdf4 	bl	8009e28 <_ZN8MainView7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 800a240:	f107 0318 	add.w	r3, r7, #24
 800a244:	4618      	mov	r0, r3
 800a246:	f7fe fa5d 	bl	8008704 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
	{
		sprintf(textBuffer, "%d", inGear);
		setText(gearArea, gearAreaBuffer, textBuffer);
	}

}
 800a24a:	e021      	b.n	800a290 <_ZN8MainView7setGearEi+0x94>
	else if (inGear < 7)
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	2b06      	cmp	r3, #6
 800a250:	dc1e      	bgt.n	800a290 <_ZN8MainView7setGearEi+0x94>
		sprintf(textBuffer, "%d", inGear);
 800a252:	f107 030c 	add.w	r3, r7, #12
 800a256:	683a      	ldr	r2, [r7, #0]
 800a258:	4912      	ldr	r1, [pc, #72]	; (800a2a4 <_ZN8MainView7setGearEi+0xa8>)
 800a25a:	4618      	mov	r0, r3
 800a25c:	f01d fce8 	bl	8027c30 <siprintf>
		setText(gearArea, gearAreaBuffer, textBuffer);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f103 0298 	add.w	r2, r3, #152	; 0x98
 800a266:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a26a:	4611      	mov	r1, r2
 800a26c:	4618      	mov	r0, r3
 800a26e:	f7ff fe91 	bl	8009f94 <_ZN8touchgfx23TextAreaWithOneWildcardC1ERKS0_>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	4a0a      	ldr	r2, [pc, #40]	; (800a2a0 <_ZN8MainView7setGearEi+0xa4>)
 800a276:	441a      	add	r2, r3
 800a278:	f107 030c 	add.w	r3, r7, #12
 800a27c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f7ff fdd1 	bl	8009e28 <_ZN8MainView7setTextEN8touchgfx23TextAreaWithOneWildcardEPtPKc>
 800a286:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a28a:	4618      	mov	r0, r3
 800a28c:	f7fe fa3a 	bl	8008704 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
}
 800a290:	bf00      	nop
 800a292:	3798      	adds	r7, #152	; 0x98
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}
 800a298:	0802be0c 	.word	0x0802be0c
 800a29c:	0802be04 	.word	0x0802be04
 800a2a0:	0001f774 	.word	0x0001f774
 800a2a4:	0802bdec 	.word	0x0802bdec

0800a2a8 <_Z41__static_initialization_and_destruction_0ii>:
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b092      	sub	sp, #72	; 0x48
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	f040 8114 	bne.w	800a4e2 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	f040 810e 	bne.w	800a4e2 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a2d8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a2dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a2e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a2e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a2e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2ec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a2f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a2f4:	041b      	lsls	r3, r3, #16
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a2fc:	021b      	lsls	r3, r3, #8
 800a2fe:	431a      	orrs	r2, r3
 800a300:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a304:	4313      	orrs	r3, r2
 800a306:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a30a:	f107 0320 	add.w	r3, r7, #32
 800a30e:	4611      	mov	r1, r2
 800a310:	4618      	mov	r0, r3
 800a312:	f7f9 ffd3 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 800a316:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 800a318:	bf00      	nop
 800a31a:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 800a31c:	4b73      	ldr	r3, [pc, #460]	; (800a4ec <_Z41__static_initialization_and_destruction_0ii+0x244>)
 800a31e:	601a      	str	r2, [r3, #0]
 800a320:	23ff      	movs	r3, #255	; 0xff
 800a322:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a326:	2300      	movs	r3, #0
 800a328:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a32c:	2300      	movs	r3, #0
 800a32e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800a332:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a336:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800a33a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a33e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a342:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a346:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a34a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a34e:	041b      	lsls	r3, r3, #16
 800a350:	461a      	mov	r2, r3
 800a352:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a356:	021b      	lsls	r3, r3, #8
 800a358:	431a      	orrs	r2, r3
 800a35a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800a35e:	4313      	orrs	r3, r2
 800a360:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a364:	f107 031c 	add.w	r3, r7, #28
 800a368:	4611      	mov	r1, r2
 800a36a:	4618      	mov	r0, r3
 800a36c:	f7f9 ffa6 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 800a370:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 800a372:	bf00      	nop
 800a374:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 800a376:	4b5e      	ldr	r3, [pc, #376]	; (800a4f0 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 800a378:	601a      	str	r2, [r3, #0]
 800a37a:	2300      	movs	r3, #0
 800a37c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800a380:	23c0      	movs	r3, #192	; 0xc0
 800a382:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800a386:	2300      	movs	r3, #0
 800a388:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a38c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800a390:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a394:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800a398:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800a39c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a3a0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a3a4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a3a8:	041b      	lsls	r3, r3, #16
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800a3b0:	021b      	lsls	r3, r3, #8
 800a3b2:	431a      	orrs	r2, r3
 800a3b4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a3be:	f107 0318 	add.w	r3, r7, #24
 800a3c2:	4611      	mov	r1, r2
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7f9 ff79 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 800a3ca:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 800a3cc:	bf00      	nop
 800a3ce:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 192, 0);
 800a3d0:	4b48      	ldr	r3, [pc, #288]	; (800a4f4 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 800a3d2:	601a      	str	r2, [r3, #0]
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3da:	2300      	movs	r3, #0
 800a3dc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800a3e0:	23c0      	movs	r3, #192	; 0xc0
 800a3e2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800a3e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a3ea:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800a3ee:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800a3f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a3f6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800a3fa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a3fe:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800a402:	041b      	lsls	r3, r3, #16
 800a404:	461a      	mov	r2, r3
 800a406:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a40a:	021b      	lsls	r3, r3, #8
 800a40c:	431a      	orrs	r2, r3
 800a40e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a412:	4313      	orrs	r3, r2
 800a414:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a418:	f107 0314 	add.w	r3, r7, #20
 800a41c:	4611      	mov	r1, r2
 800a41e:	4618      	mov	r0, r3
 800a420:	f7f9 ff4c 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 800a424:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 800a426:	bf00      	nop
 800a428:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 192);
 800a42a:	4b33      	ldr	r3, [pc, #204]	; (800a4f8 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 800a42c:	601a      	str	r2, [r3, #0]
 800a42e:	23f7      	movs	r3, #247	; 0xf7
 800a430:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800a434:	234c      	movs	r3, #76	; 0x4c
 800a436:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 800a43a:	2302      	movs	r3, #2
 800a43c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a440:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a444:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800a448:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a44c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800a450:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a454:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a458:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a45c:	041b      	lsls	r3, r3, #16
 800a45e:	461a      	mov	r2, r3
 800a460:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a464:	021b      	lsls	r3, r3, #8
 800a466:	431a      	orrs	r2, r3
 800a468:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a46c:	4313      	orrs	r3, r2
 800a46e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a472:	f107 0310 	add.w	r3, r7, #16
 800a476:	4611      	mov	r1, r2
 800a478:	4618      	mov	r0, r3
 800a47a:	f7f9 ff1f 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 800a47e:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 800a480:	bf00      	nop
 800a482:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 800a484:	4b1d      	ldr	r3, [pc, #116]	; (800a4fc <_Z41__static_initialization_and_destruction_0ii+0x254>)
 800a486:	601a      	str	r2, [r3, #0]
 800a488:	23f7      	movs	r3, #247	; 0xf7
 800a48a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a48e:	23d2      	movs	r3, #210	; 0xd2
 800a490:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800a494:	2302      	movs	r3, #2
 800a496:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800a49a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a49e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 800a4a2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4aa:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800a4ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a4b2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a4b6:	041b      	lsls	r3, r3, #16
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a4be:	021b      	lsls	r3, r3, #8
 800a4c0:	431a      	orrs	r2, r3
 800a4c2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a4cc:	f107 030c 	add.w	r3, r7, #12
 800a4d0:	4611      	mov	r1, r2
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f7f9 fef2 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 800a4d8:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 800a4da:	bf00      	nop
 800a4dc:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 800a4de:	4b08      	ldr	r3, [pc, #32]	; (800a500 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 800a4e0:	601a      	str	r2, [r3, #0]
 800a4e2:	bf00      	nop
 800a4e4:	3748      	adds	r7, #72	; 0x48
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
 800a4ea:	bf00      	nop
 800a4ec:	20023a0c 	.word	0x20023a0c
 800a4f0:	20023a10 	.word	0x20023a10
 800a4f4:	20023a14 	.word	0x20023a14
 800a4f8:	20023a18 	.word	0x20023a18
 800a4fc:	20023a1c 	.word	0x20023a1c
 800a500:	20023a20 	.word	0x20023a20

0800a504 <_GLOBAL__sub_I__ZN8MainViewC2Ev>:
 800a504:	b580      	push	{r7, lr}
 800a506:	af00      	add	r7, sp, #0
 800a508:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a50c:	2001      	movs	r0, #1
 800a50e:	f7ff fecb 	bl	800a2a8 <_Z41__static_initialization_and_destruction_0ii>
 800a512:	bd80      	pop	{r7, pc}

0800a514 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	601a      	str	r2, [r3, #0]
{

}
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	4618      	mov	r0, r3
 800a526:	370c      	adds	r7, #12
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr

0800a530 <_ZN5Model4tickEv>:

void Model::tick()
{
 800a530:	b480      	push	{r7}
 800a532:	b083      	sub	sp, #12
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]

}
 800a538:	bf00      	nop
 800a53a:	370c      	adds	r7, #12
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <_ZN8alertBarC1Ev>:
#include <gui/containers/alertBar.hpp>
#include <string.h>

alertBar::alertBar()
 800a544:	b580      	push	{r7, lr}
 800a546:	b082      	sub	sp, #8
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	4618      	mov	r0, r3
 800a550:	f7fe fdfc 	bl	800914c <_ZN12alertBarBaseC1Ev>
 800a554:	4a10      	ldr	r2, [pc, #64]	; (800a598 <_ZN8alertBarC1Ev+0x54>)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	601a      	str	r2, [r3, #0]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	4a0f      	ldr	r2, [pc, #60]	; (800a59c <_ZN8alertBarC1Ev+0x58>)
 800a55e:	6812      	ldr	r2, [r2, #0]
 800a560:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	4a0e      	ldr	r2, [pc, #56]	; (800a5a0 <_ZN8alertBarC1Ev+0x5c>)
 800a568:	6812      	ldr	r2, [r2, #0]
 800a56a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	4a0c      	ldr	r2, [pc, #48]	; (800a5a4 <_ZN8alertBarC1Ev+0x60>)
 800a572:	6812      	ldr	r2, [r2, #0]
 800a574:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	4a0b      	ldr	r2, [pc, #44]	; (800a5a8 <_ZN8alertBarC1Ev+0x64>)
 800a57c:	6812      	ldr	r2, [r2, #0]
 800a57e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	4a09      	ldr	r2, [pc, #36]	; (800a5ac <_ZN8alertBarC1Ev+0x68>)
 800a586:	6812      	ldr	r2, [r2, #0]
 800a588:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
{
}
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	4618      	mov	r0, r3
 800a590:	3708      	adds	r7, #8
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	0802c764 	.word	0x0802c764
 800a59c:	20023a48 	.word	0x20023a48
 800a5a0:	20023a4c 	.word	0x20023a4c
 800a5a4:	20023a40 	.word	0x20023a40
 800a5a8:	20023a50 	.word	0x20023a50
 800a5ac:	20023a44 	.word	0x20023a44

0800a5b0 <_ZN8alertBar10initializeEv>:

void alertBar::initialize()
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
    alertBarBase::initialize();
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7fe fea2 	bl	8009304 <_ZN12alertBarBase10initializeEv>
    frontText.setWildcard(frontTextBuffer);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	33b4      	adds	r3, #180	; 0xb4
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	4610      	mov	r0, r2
 800a5ce:	f7fc fd07 	bl	8006fe0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
}
 800a5d2:	bf00      	nop
 800a5d4:	3708      	adds	r7, #8
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
	...

0800a5dc <_ZN8alertBar8setStateE9EBarState>:

void alertBar::setState(EBarState inState)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	2b06      	cmp	r3, #6
 800a5ea:	d84d      	bhi.n	800a688 <_ZN8alertBar8setStateE9EBarState+0xac>
 800a5ec:	a201      	add	r2, pc, #4	; (adr r2, 800a5f4 <_ZN8alertBar8setStateE9EBarState+0x18>)
 800a5ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5f2:	bf00      	nop
 800a5f4:	0800a611 	.word	0x0800a611
 800a5f8:	0800a629 	.word	0x0800a629
 800a5fc:	0800a639 	.word	0x0800a639
 800a600:	0800a649 	.word	0x0800a649
 800a604:	0800a659 	.word	0x0800a659
 800a608:	0800a669 	.word	0x0800a669
 800a60c:	0800a679 	.word	0x0800a679
    switch (inState)
    {
    case EBarState::Blank:
    	bgBox.setColor(colors::blue);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	332c      	adds	r3, #44	; 0x2c
 800a614:	4a1f      	ldr	r2, [pc, #124]	; (800a694 <_ZN8alertBar8setStateE9EBarState+0xb8>)
 800a616:	6811      	ldr	r1, [r2, #0]
 800a618:	4618      	mov	r0, r3
 800a61a:	f7fb fe53 	bl	80062c4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    	setText("");
 800a61e:	491e      	ldr	r1, [pc, #120]	; (800a698 <_ZN8alertBar8setStateE9EBarState+0xbc>)
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 f843 	bl	800a6ac <_ZN8alertBar7setTextEPKc>
    	break;
 800a626:	e030      	b.n	800a68a <_ZN8alertBar8setStateE9EBarState+0xae>
    case EBarState::Info:
        bgBox.setColor(colors::green);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	332c      	adds	r3, #44	; 0x2c
 800a62c:	4a1b      	ldr	r2, [pc, #108]	; (800a69c <_ZN8alertBar8setStateE9EBarState+0xc0>)
 800a62e:	6811      	ldr	r1, [r2, #0]
 800a630:	4618      	mov	r0, r3
 800a632:	f7fb fe47 	bl	80062c4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        break;
 800a636:	e028      	b.n	800a68a <_ZN8alertBar8setStateE9EBarState+0xae>
    case EBarState::Warning:
        bgBox.setColor(colors::orange);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	332c      	adds	r3, #44	; 0x2c
 800a63c:	4a18      	ldr	r2, [pc, #96]	; (800a6a0 <_ZN8alertBar8setStateE9EBarState+0xc4>)
 800a63e:	6811      	ldr	r1, [r2, #0]
 800a640:	4618      	mov	r0, r3
 800a642:	f7fb fe3f 	bl	80062c4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        break;
 800a646:	e020      	b.n	800a68a <_ZN8alertBar8setStateE9EBarState+0xae>
    case EBarState::Fault:
        bgBox.setColor(colors::red);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	332c      	adds	r3, #44	; 0x2c
 800a64c:	4a15      	ldr	r2, [pc, #84]	; (800a6a4 <_ZN8alertBar8setStateE9EBarState+0xc8>)
 800a64e:	6811      	ldr	r1, [r2, #0]
 800a650:	4618      	mov	r0, r3
 800a652:	f7fb fe37 	bl	80062c4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        break;
 800a656:	e018      	b.n	800a68a <_ZN8alertBar8setStateE9EBarState+0xae>
    case EBarState::Critical1:
    	bgBox.setColor(colors::red);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	332c      	adds	r3, #44	; 0x2c
 800a65c:	4a11      	ldr	r2, [pc, #68]	; (800a6a4 <_ZN8alertBar8setStateE9EBarState+0xc8>)
 800a65e:	6811      	ldr	r1, [r2, #0]
 800a660:	4618      	mov	r0, r3
 800a662:	f7fb fe2f 	bl	80062c4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    	break;
 800a666:	e010      	b.n	800a68a <_ZN8alertBar8setStateE9EBarState+0xae>
    case EBarState::Critical2:
    	bgBox.setColor(colors::yellow);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	332c      	adds	r3, #44	; 0x2c
 800a66c:	4a0e      	ldr	r2, [pc, #56]	; (800a6a8 <_ZN8alertBar8setStateE9EBarState+0xcc>)
 800a66e:	6811      	ldr	r1, [r2, #0]
 800a670:	4618      	mov	r0, r3
 800a672:	f7fb fe27 	bl	80062c4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    	break;
 800a676:	e008      	b.n	800a68a <_ZN8alertBar8setStateE9EBarState+0xae>
    case EBarState::News:
        bgBox.setColor(colors::blue);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	332c      	adds	r3, #44	; 0x2c
 800a67c:	4a05      	ldr	r2, [pc, #20]	; (800a694 <_ZN8alertBar8setStateE9EBarState+0xb8>)
 800a67e:	6811      	ldr	r1, [r2, #0]
 800a680:	4618      	mov	r0, r3
 800a682:	f7fb fe1f 	bl	80062c4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        break;
 800a686:	e000      	b.n	800a68a <_ZN8alertBar8setStateE9EBarState+0xae>

    default:
        break;
 800a688:	bf00      	nop
    }
}
 800a68a:	bf00      	nop
 800a68c:	3708      	adds	r7, #8
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	20023a48 	.word	0x20023a48
 800a698:	0802be10 	.word	0x0802be10
 800a69c:	20023a44 	.word	0x20023a44
 800a6a0:	20023a4c 	.word	0x20023a4c
 800a6a4:	20023a40 	.word	0x20023a40
 800a6a8:	20023a50 	.word	0x20023a50

0800a6ac <_ZN8alertBar7setTextEPKc>:

void alertBar::setText(const char inText[])
{
 800a6ac:	b590      	push	{r4, r7, lr}
 800a6ae:	b083      	sub	sp, #12
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
    Unicode::snprintf(frontTextBuffer, strlen(inText) + 1, inText);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 800a6bc:	6838      	ldr	r0, [r7, #0]
 800a6be:	f7f5 fdbf 	bl	8000240 <strlen>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	683a      	ldr	r2, [r7, #0]
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	4620      	mov	r0, r4
 800a6d0:	f012 f86a 	bl	801c7a8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    //frontText.resizeToCurrentText();
    frontText.invalidate();
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	3360      	adds	r3, #96	; 0x60
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f00f ffe3 	bl	801a6a4 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 800a6de:	bf00      	nop
 800a6e0:	370c      	adds	r7, #12
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd90      	pop	{r4, r7, pc}
	...

0800a6e8 <_Z41__static_initialization_and_destruction_0ii>:
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b092      	sub	sp, #72	; 0x48
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	6039      	str	r1, [r7, #0]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	f040 8114 	bne.w	800a922 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a700:	4293      	cmp	r3, r2
 800a702:	f040 810e 	bne.w	800a922 <_Z41__static_initialization_and_destruction_0ii+0x23a>
 800a706:	2300      	movs	r3, #0
 800a708:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800a70c:	2300      	movs	r3, #0
 800a70e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800a712:	2300      	movs	r3, #0
 800a714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a718:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a71c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a720:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a724:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a72c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a730:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a734:	041b      	lsls	r3, r3, #16
 800a736:	461a      	mov	r2, r3
 800a738:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a73c:	021b      	lsls	r3, r3, #8
 800a73e:	431a      	orrs	r2, r3
 800a740:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a744:	4313      	orrs	r3, r2
 800a746:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a74a:	f107 0320 	add.w	r3, r7, #32
 800a74e:	4611      	mov	r1, r2
 800a750:	4618      	mov	r0, r3
 800a752:	f7f9 fdb3 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 800a756:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 800a758:	bf00      	nop
 800a75a:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 800a75c:	4b73      	ldr	r3, [pc, #460]	; (800a92c <_Z41__static_initialization_and_destruction_0ii+0x244>)
 800a75e:	601a      	str	r2, [r3, #0]
 800a760:	23ff      	movs	r3, #255	; 0xff
 800a762:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a766:	2300      	movs	r3, #0
 800a768:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a76c:	2300      	movs	r3, #0
 800a76e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800a772:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a776:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800a77a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a77e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a782:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a786:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a78a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a78e:	041b      	lsls	r3, r3, #16
 800a790:	461a      	mov	r2, r3
 800a792:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a796:	021b      	lsls	r3, r3, #8
 800a798:	431a      	orrs	r2, r3
 800a79a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a7a4:	f107 031c 	add.w	r3, r7, #28
 800a7a8:	4611      	mov	r1, r2
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f7f9 fd86 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 800a7b0:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 800a7b2:	bf00      	nop
 800a7b4:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 800a7b6:	4b5e      	ldr	r3, [pc, #376]	; (800a930 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 800a7b8:	601a      	str	r2, [r3, #0]
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800a7c0:	23c0      	movs	r3, #192	; 0xc0
 800a7c2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7cc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800a7d0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a7d4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800a7d8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800a7dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a7e0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a7e4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a7e8:	041b      	lsls	r3, r3, #16
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800a7f0:	021b      	lsls	r3, r3, #8
 800a7f2:	431a      	orrs	r2, r3
 800a7f4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a7fe:	f107 0318 	add.w	r3, r7, #24
 800a802:	4611      	mov	r1, r2
 800a804:	4618      	mov	r0, r3
 800a806:	f7f9 fd59 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 800a80a:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 800a80c:	bf00      	nop
 800a80e:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 192, 0);
 800a810:	4b48      	ldr	r3, [pc, #288]	; (800a934 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 800a812:	601a      	str	r2, [r3, #0]
 800a814:	2300      	movs	r3, #0
 800a816:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a81a:	2300      	movs	r3, #0
 800a81c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800a820:	23c0      	movs	r3, #192	; 0xc0
 800a822:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800a826:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a82a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800a82e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800a832:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a836:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800a83a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a83e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800a842:	041b      	lsls	r3, r3, #16
 800a844:	461a      	mov	r2, r3
 800a846:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a84a:	021b      	lsls	r3, r3, #8
 800a84c:	431a      	orrs	r2, r3
 800a84e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800a852:	4313      	orrs	r3, r2
 800a854:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a858:	f107 0314 	add.w	r3, r7, #20
 800a85c:	4611      	mov	r1, r2
 800a85e:	4618      	mov	r0, r3
 800a860:	f7f9 fd2c 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 800a864:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 800a866:	bf00      	nop
 800a868:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 192);
 800a86a:	4b33      	ldr	r3, [pc, #204]	; (800a938 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 800a86c:	601a      	str	r2, [r3, #0]
 800a86e:	23f7      	movs	r3, #247	; 0xf7
 800a870:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800a874:	234c      	movs	r3, #76	; 0x4c
 800a876:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 800a87a:	2302      	movs	r3, #2
 800a87c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a880:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a884:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800a888:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a88c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800a890:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a894:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a898:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a89c:	041b      	lsls	r3, r3, #16
 800a89e:	461a      	mov	r2, r3
 800a8a0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a8a4:	021b      	lsls	r3, r3, #8
 800a8a6:	431a      	orrs	r2, r3
 800a8a8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a8b2:	f107 0310 	add.w	r3, r7, #16
 800a8b6:	4611      	mov	r1, r2
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f7f9 fcff 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 800a8be:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 800a8c0:	bf00      	nop
 800a8c2:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 800a8c4:	4b1d      	ldr	r3, [pc, #116]	; (800a93c <_Z41__static_initialization_and_destruction_0ii+0x254>)
 800a8c6:	601a      	str	r2, [r3, #0]
 800a8c8:	23f7      	movs	r3, #247	; 0xf7
 800a8ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a8ce:	23d2      	movs	r3, #210	; 0xd2
 800a8d0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800a8d4:	2302      	movs	r3, #2
 800a8d6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800a8da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a8de:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 800a8e2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a8e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8ea:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800a8ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800a8f2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a8f6:	041b      	lsls	r3, r3, #16
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a8fe:	021b      	lsls	r3, r3, #8
 800a900:	431a      	orrs	r2, r3
 800a902:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800a906:	4313      	orrs	r3, r2
 800a908:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800a90c:	f107 030c 	add.w	r3, r7, #12
 800a910:	4611      	mov	r1, r2
 800a912:	4618      	mov	r0, r3
 800a914:	f7f9 fcd2 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 800a918:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 800a91a:	bf00      	nop
 800a91c:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 800a91e:	4b08      	ldr	r3, [pc, #32]	; (800a940 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 800a920:	601a      	str	r2, [r3, #0]
 800a922:	bf00      	nop
 800a924:	3748      	adds	r7, #72	; 0x48
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
 800a92a:	bf00      	nop
 800a92c:	20023a3c 	.word	0x20023a3c
 800a930:	20023a40 	.word	0x20023a40
 800a934:	20023a44 	.word	0x20023a44
 800a938:	20023a48 	.word	0x20023a48
 800a93c:	20023a4c 	.word	0x20023a4c
 800a940:	20023a50 	.word	0x20023a50

0800a944 <_GLOBAL__sub_I__ZN8alertBarC2Ev>:
 800a944:	b580      	push	{r7, lr}
 800a946:	af00      	add	r7, sp, #0
 800a948:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a94c:	2001      	movs	r0, #1
 800a94e:	f7ff fecb 	bl	800a6e8 <_Z41__static_initialization_and_destruction_0ii>
 800a952:	bd80      	pop	{r7, pc}

0800a954 <_ZN7tempBoxC1Ev>:
#include <gui/containers/tempBox.hpp>
#include <cmath>

tempBox::tempBox()
 800a954:	b5b0      	push	{r4, r5, r7, lr}
 800a956:	b088      	sub	sp, #32
 800a958:	af02      	add	r7, sp, #8
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	4618      	mov	r0, r3
 800a960:	f7fe fcda 	bl	8009318 <_ZN11tempBoxBaseC1Ev>
 800a964:	4a6a      	ldr	r2, [pc, #424]	; (800ab10 <_ZN7tempBoxC1Ev+0x1bc>)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	601a      	str	r2, [r3, #0]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	22dc      	movs	r2, #220	; 0xdc
 800a976:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 800a980:	24db      	movs	r4, #219	; 0xdb
 800a982:	461d      	mov	r5, r3
 800a984:	2c00      	cmp	r4, #0
 800a986:	db05      	blt.n	800a994 <_ZN7tempBoxC1Ev+0x40>
 800a988:	4628      	mov	r0, r5
 800a98a:	f00c fc7b 	bl	8017284 <_ZN8touchgfx4LineC1Ev>
 800a98e:	3574      	adds	r5, #116	; 0x74
 800a990:	3c01      	subs	r4, #1
 800a992:	e7f7      	b.n	800a984 <_ZN7tempBoxC1Ev+0x30>
 800a994:	687a      	ldr	r2, [r7, #4]
 800a996:	f646 031c 	movw	r3, #26652	; 0x681c
 800a99a:	4413      	add	r3, r2
 800a99c:	24db      	movs	r4, #219	; 0xdb
 800a99e:	461d      	mov	r5, r3
 800a9a0:	2c00      	cmp	r4, #0
 800a9a2:	db0c      	blt.n	800a9be <_ZN7tempBoxC1Ev+0x6a>
 800a9a4:	f107 0308 	add.w	r3, r7, #8
 800a9a8:	2100      	movs	r1, #0
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f7f9 fc86 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 800a9b0:	68b9      	ldr	r1, [r7, #8]
 800a9b2:	4628      	mov	r0, r5
 800a9b4:	f7fc fc2c 	bl	8007210 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 800a9b8:	3518      	adds	r5, #24
 800a9ba:	3c01      	subs	r4, #1
 800a9bc:	e7f0      	b.n	800a9a0 <_ZN7tempBoxC1Ev+0x4c>
{
    for(int i=0; i < 220; i++)
 800a9be:	2300      	movs	r3, #0
 800a9c0:	617b      	str	r3, [r7, #20]
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	2bdb      	cmp	r3, #219	; 0xdb
 800a9c6:	f300 809e 	bgt.w	800ab06 <_ZN7tempBoxC1Ev+0x1b2>
    {
        lines[i].setPosition(0,0,220,60);
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	2274      	movs	r2, #116	; 0x74
 800a9ce:	fb02 f303 	mul.w	r3, r2, r3
 800a9d2:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800a9d6:	687a      	ldr	r2, [r7, #4]
 800a9d8:	4413      	add	r3, r2
 800a9da:	1d18      	adds	r0, r3, #4
 800a9dc:	233c      	movs	r3, #60	; 0x3c
 800a9de:	9300      	str	r3, [sp, #0]
 800a9e0:	23dc      	movs	r3, #220	; 0xdc
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	2100      	movs	r1, #0
 800a9e6:	f7fb fa40 	bl	8005e6a <_ZN8touchgfx8Drawable11setPositionEssss>
        linesPainter[i].setColor(touchgfx::Color::getColorFromRGB(10 ,255, 0));
 800a9ea:	697a      	ldr	r2, [r7, #20]
 800a9ec:	4613      	mov	r3, r2
 800a9ee:	005b      	lsls	r3, r3, #1
 800a9f0:	4413      	add	r3, r2
 800a9f2:	00db      	lsls	r3, r3, #3
 800a9f4:	f646 0218 	movw	r2, #26648	; 0x6818
 800a9f8:	441a      	add	r2, r3
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	4413      	add	r3, r2
 800a9fe:	1d1c      	adds	r4, r3, #4
 800aa00:	230a      	movs	r3, #10
 800aa02:	74fb      	strb	r3, [r7, #19]
 800aa04:	23ff      	movs	r3, #255	; 0xff
 800aa06:	74bb      	strb	r3, [r7, #18]
 800aa08:	2300      	movs	r3, #0
 800aa0a:	747b      	strb	r3, [r7, #17]
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800aa0c:	7cfb      	ldrb	r3, [r7, #19]
 800aa0e:	041b      	lsls	r3, r3, #16
 800aa10:	461a      	mov	r2, r3
 800aa12:	7cbb      	ldrb	r3, [r7, #18]
 800aa14:	021b      	lsls	r3, r3, #8
 800aa16:	431a      	orrs	r2, r3
 800aa18:	7c7b      	ldrb	r3, [r7, #17]
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800aa20:	f107 030c 	add.w	r3, r7, #12
 800aa24:	4611      	mov	r1, r2
 800aa26:	4618      	mov	r0, r3
 800aa28:	f7f9 fc48 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	4619      	mov	r1, r3
 800aa30:	4620      	mov	r0, r4
 800aa32:	f7fc fc0d 	bl	8007250 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
        lines[i].setPainter(linesPainter[i]);
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	2274      	movs	r2, #116	; 0x74
 800aa3a:	fb02 f303 	mul.w	r3, r2, r3
 800aa3e:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	4413      	add	r3, r2
 800aa46:	1d18      	adds	r0, r3, #4
 800aa48:	687a      	ldr	r2, [r7, #4]
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	2174      	movs	r1, #116	; 0x74
 800aa4e:	fb01 f303 	mul.w	r3, r1, r3
 800aa52:	4413      	add	r3, r2
 800aa54:	f203 436c 	addw	r3, r3, #1132	; 0x46c
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	335c      	adds	r3, #92	; 0x5c
 800aa5c:	681c      	ldr	r4, [r3, #0]
 800aa5e:	697a      	ldr	r2, [r7, #20]
 800aa60:	4613      	mov	r3, r2
 800aa62:	005b      	lsls	r3, r3, #1
 800aa64:	4413      	add	r3, r2
 800aa66:	00db      	lsls	r3, r3, #3
 800aa68:	f646 0218 	movw	r2, #26648	; 0x6818
 800aa6c:	441a      	add	r2, r3
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	4413      	add	r3, r2
 800aa72:	3304      	adds	r3, #4
 800aa74:	4619      	mov	r1, r3
 800aa76:	47a0      	blx	r4
        lines[i].setStart(i,0);
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	2274      	movs	r2, #116	; 0x74
 800aa7c:	fb02 f303 	mul.w	r3, r2, r3
 800aa80:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800aa84:	687a      	ldr	r2, [r7, #4]
 800aa86:	4413      	add	r3, r2
 800aa88:	3304      	adds	r3, #4
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	6979      	ldr	r1, [r7, #20]
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7fd fc40 	bl	8008314 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
        lines[i].setEnd(i,60);
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	2274      	movs	r2, #116	; 0x74
 800aa98:	fb02 f303 	mul.w	r3, r2, r3
 800aa9c:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800aaa0:	687a      	ldr	r2, [r7, #4]
 800aaa2:	4413      	add	r3, r2
 800aaa4:	3304      	adds	r3, #4
 800aaa6:	223c      	movs	r2, #60	; 0x3c
 800aaa8:	6979      	ldr	r1, [r7, #20]
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f7fd fc58 	bl	8008360 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
        lines[i].setLineWidth(1);
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	2274      	movs	r2, #116	; 0x74
 800aab4:	fb02 f303 	mul.w	r3, r2, r3
 800aab8:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	4413      	add	r3, r2
 800aac0:	3304      	adds	r3, #4
 800aac2:	2101      	movs	r1, #1
 800aac4:	4618      	mov	r0, r3
 800aac6:	f7fd fc71 	bl	80083ac <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
        lines[i].setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	2274      	movs	r2, #116	; 0x74
 800aace:	fb02 f303 	mul.w	r3, r2, r3
 800aad2:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800aad6:	687a      	ldr	r2, [r7, #4]
 800aad8:	4413      	add	r3, r2
 800aada:	3304      	adds	r3, #4
 800aadc:	2101      	movs	r1, #1
 800aade:	4618      	mov	r0, r3
 800aae0:	f00c fd16 	bl	8017510 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
        add(lines[i]);
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	2274      	movs	r2, #116	; 0x74
 800aaea:	fb02 f303 	mul.w	r3, r2, r3
 800aaee:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	4413      	add	r3, r2
 800aaf6:	3304      	adds	r3, #4
 800aaf8:	4619      	mov	r1, r3
 800aafa:	f00a ffcf 	bl	8015a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    for(int i=0; i < 220; i++)
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	3301      	adds	r3, #1
 800ab02:	617b      	str	r3, [r7, #20]
 800ab04:	e75d      	b.n	800a9c2 <_ZN7tempBoxC1Ev+0x6e>
    }

}
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3718      	adds	r7, #24
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bdb0      	pop	{r4, r5, r7, pc}
 800ab10:	0802c7f0 	.word	0x0802c7f0

0800ab14 <_ZN7tempBox10initializeEv>:

void tempBox::initialize()
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
    tempBoxBase::initialize();
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7fe fcda 	bl	80094d8 <_ZN11tempBoxBase10initializeEv>
    tempValues[0] = 25;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2219      	movs	r2, #25
 800ab28:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    tempValues[1] = 25;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2219      	movs	r2, #25
 800ab30:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    tempValues[2] = 25;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2219      	movs	r2, #25
 800ab38:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    tempValues[3] = 25;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2219      	movs	r2, #25
 800ab40:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    tempValues[4] = 25;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2219      	movs	r2, #25
 800ab48:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    tempValues[5]= 25;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2219      	movs	r2, #25
 800ab50:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    numberOfValues = 5;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2205      	movs	r2, #5
 800ab58:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
}
 800ab5c:	bf00      	nop
 800ab5e:	3708      	adds	r7, #8
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <_Z41__static_initialization_and_destruction_0ii>:
        float endValue = lerp(tempValues[kFloor], tempValues[kCeil], alpha);
        
        const colortype tempColor = mapTemp(endValue);
        linesPainter[i].setColor(tempColor);
    }
}
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b092      	sub	sp, #72	; 0x48
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	6039      	str	r1, [r7, #0]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2b01      	cmp	r3, #1
 800ab72:	f040 8114 	bne.w	800ad9e <_Z41__static_initialization_and_destruction_0ii+0x23a>
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	f040 810e 	bne.w	800ad9e <_Z41__static_initialization_and_destruction_0ii+0x23a>
 800ab82:	2300      	movs	r3, #0
 800ab84:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800ab88:	2300      	movs	r3, #0
 800ab8a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800ab8e:	2300      	movs	r3, #0
 800ab90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ab94:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ab98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ab9c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aba0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800aba4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aba8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800abac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800abb0:	041b      	lsls	r3, r3, #16
 800abb2:	461a      	mov	r2, r3
 800abb4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800abb8:	021b      	lsls	r3, r3, #8
 800abba:	431a      	orrs	r2, r3
 800abbc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800abc0:	4313      	orrs	r3, r2
 800abc2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800abc6:	f107 0320 	add.w	r3, r7, #32
 800abca:	4611      	mov	r1, r2
 800abcc:	4618      	mov	r0, r3
 800abce:	f7f9 fb75 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 800abd2:	6a3b      	ldr	r3, [r7, #32]
        return getColorFromRGB(red, green, blue);
 800abd4:	bf00      	nop
 800abd6:	461a      	mov	r2, r3
    const colortype black = Color::getColorFrom24BitRGB(0, 0, 0);
 800abd8:	4b73      	ldr	r3, [pc, #460]	; (800ada8 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 800abda:	601a      	str	r2, [r3, #0]
 800abdc:	23ff      	movs	r3, #255	; 0xff
 800abde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800abe2:	2300      	movs	r3, #0
 800abe4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800abe8:	2300      	movs	r3, #0
 800abea:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800abee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800abf2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800abf6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800abfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abfe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ac02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800ac06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ac0a:	041b      	lsls	r3, r3, #16
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ac12:	021b      	lsls	r3, r3, #8
 800ac14:	431a      	orrs	r2, r3
 800ac16:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800ac20:	f107 031c 	add.w	r3, r7, #28
 800ac24:	4611      	mov	r1, r2
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7f9 fb48 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 800ac2c:	69fb      	ldr	r3, [r7, #28]
        return getColorFromRGB(red, green, blue);
 800ac2e:	bf00      	nop
 800ac30:	461a      	mov	r2, r3
    const colortype red = Color::getColorFrom24BitRGB(255, 0, 0);
 800ac32:	4b5e      	ldr	r3, [pc, #376]	; (800adac <_Z41__static_initialization_and_destruction_0ii+0x248>)
 800ac34:	601a      	str	r2, [r3, #0]
 800ac36:	2300      	movs	r3, #0
 800ac38:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800ac3c:	23c0      	movs	r3, #192	; 0xc0
 800ac3e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800ac42:	2300      	movs	r3, #0
 800ac44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac48:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800ac4c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ac50:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800ac54:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800ac58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ac5c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800ac60:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ac64:	041b      	lsls	r3, r3, #16
 800ac66:	461a      	mov	r2, r3
 800ac68:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800ac6c:	021b      	lsls	r3, r3, #8
 800ac6e:	431a      	orrs	r2, r3
 800ac70:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800ac74:	4313      	orrs	r3, r2
 800ac76:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800ac7a:	f107 0318 	add.w	r3, r7, #24
 800ac7e:	4611      	mov	r1, r2
 800ac80:	4618      	mov	r0, r3
 800ac82:	f7f9 fb1b 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 800ac86:	69bb      	ldr	r3, [r7, #24]
        return getColorFromRGB(red, green, blue);
 800ac88:	bf00      	nop
 800ac8a:	461a      	mov	r2, r3
    const colortype green = Color::getColorFrom24BitRGB(0, 192, 0);
 800ac8c:	4b48      	ldr	r3, [pc, #288]	; (800adb0 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 800ac8e:	601a      	str	r2, [r3, #0]
 800ac90:	2300      	movs	r3, #0
 800ac92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800ac96:	2300      	movs	r3, #0
 800ac98:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800ac9c:	23c0      	movs	r3, #192	; 0xc0
 800ac9e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800aca2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800aca6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800acaa:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800acae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800acb2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800acb6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800acba:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800acbe:	041b      	lsls	r3, r3, #16
 800acc0:	461a      	mov	r2, r3
 800acc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800acc6:	021b      	lsls	r3, r3, #8
 800acc8:	431a      	orrs	r2, r3
 800acca:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800acce:	4313      	orrs	r3, r2
 800acd0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800acd4:	f107 0314 	add.w	r3, r7, #20
 800acd8:	4611      	mov	r1, r2
 800acda:	4618      	mov	r0, r3
 800acdc:	f7f9 faee 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 800ace0:	697b      	ldr	r3, [r7, #20]
        return getColorFromRGB(red, green, blue);
 800ace2:	bf00      	nop
 800ace4:	461a      	mov	r2, r3
    const colortype blue = Color::getColorFrom24BitRGB(0, 0, 192);
 800ace6:	4b33      	ldr	r3, [pc, #204]	; (800adb4 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 800ace8:	601a      	str	r2, [r3, #0]
 800acea:	23f7      	movs	r3, #247	; 0xf7
 800acec:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800acf0:	234c      	movs	r3, #76	; 0x4c
 800acf2:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 800acf6:	2302      	movs	r3, #2
 800acf8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800acfc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800ad00:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800ad04:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ad08:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800ad0c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ad10:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800ad14:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800ad18:	041b      	lsls	r3, r3, #16
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800ad20:	021b      	lsls	r3, r3, #8
 800ad22:	431a      	orrs	r2, r3
 800ad24:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800ad2e:	f107 0310 	add.w	r3, r7, #16
 800ad32:	4611      	mov	r1, r2
 800ad34:	4618      	mov	r0, r3
 800ad36:	f7f9 fac1 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 800ad3a:	693b      	ldr	r3, [r7, #16]
        return getColorFromRGB(red, green, blue);
 800ad3c:	bf00      	nop
 800ad3e:	461a      	mov	r2, r3
    const colortype orange = Color::getColorFrom24BitRGB(247, 76, 2);
 800ad40:	4b1d      	ldr	r3, [pc, #116]	; (800adb8 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 800ad42:	601a      	str	r2, [r3, #0]
 800ad44:	23f7      	movs	r3, #247	; 0xf7
 800ad46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ad4a:	23d2      	movs	r3, #210	; 0xd2
 800ad4c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800ad50:	2302      	movs	r3, #2
 800ad52:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800ad56:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ad5a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 800ad5e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800ad62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad66:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800ad6a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800ad6e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800ad72:	041b      	lsls	r3, r3, #16
 800ad74:	461a      	mov	r2, r3
 800ad76:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ad7a:	021b      	lsls	r3, r3, #8
 800ad7c:	431a      	orrs	r2, r3
 800ad7e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800ad82:	4313      	orrs	r3, r2
 800ad84:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800ad88:	f107 030c 	add.w	r3, r7, #12
 800ad8c:	4611      	mov	r1, r2
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7f9 fa94 	bl	80042bc <_ZN8touchgfx9colortypeC1Em>
 800ad94:	68fb      	ldr	r3, [r7, #12]
        return getColorFromRGB(red, green, blue);
 800ad96:	bf00      	nop
 800ad98:	461a      	mov	r2, r3
    const colortype yellow = Color::getColorFrom24BitRGB(247, 210, 2);
 800ad9a:	4b08      	ldr	r3, [pc, #32]	; (800adbc <_Z41__static_initialization_and_destruction_0ii+0x258>)
 800ad9c:	601a      	str	r2, [r3, #0]
 800ad9e:	bf00      	nop
 800ada0:	3748      	adds	r7, #72	; 0x48
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	bf00      	nop
 800ada8:	20023a54 	.word	0x20023a54
 800adac:	20023a58 	.word	0x20023a58
 800adb0:	20023a5c 	.word	0x20023a5c
 800adb4:	20023a60 	.word	0x20023a60
 800adb8:	20023a64 	.word	0x20023a64
 800adbc:	20023a68 	.word	0x20023a68

0800adc0 <_GLOBAL__sub_I__ZN7tempBoxC2Ev>:
 800adc0:	b580      	push	{r7, lr}
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800adc8:	2001      	movs	r0, #1
 800adca:	f7ff fecb 	bl	800ab64 <_Z41__static_initialization_and_destruction_0ii>
 800adce:	bd80      	pop	{r7, pc}

0800add0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800add0:	b480      	push	{r7}
 800add2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800add4:	4b06      	ldr	r3, [pc, #24]	; (800adf0 <SystemInit+0x20>)
 800add6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adda:	4a05      	ldr	r2, [pc, #20]	; (800adf0 <SystemInit+0x20>)
 800addc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ade0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800ade4:	bf00      	nop
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr
 800adee:	bf00      	nop
 800adf0:	e000ed00 	.word	0xe000ed00

0800adf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800adf8:	2003      	movs	r0, #3
 800adfa:	f001 fb7a 	bl	800c4f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800adfe:	200f      	movs	r0, #15
 800ae00:	f7f7 ff6e 	bl	8002ce0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800ae04:	f7f7 ff44 	bl	8002c90 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800ae08:	2300      	movs	r3, #0
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	bd80      	pop	{r7, pc}
	...

0800ae10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ae10:	b480      	push	{r7}
 800ae12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ae14:	4b06      	ldr	r3, [pc, #24]	; (800ae30 <HAL_IncTick+0x20>)
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	461a      	mov	r2, r3
 800ae1a:	4b06      	ldr	r3, [pc, #24]	; (800ae34 <HAL_IncTick+0x24>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4413      	add	r3, r2
 800ae20:	4a04      	ldr	r2, [pc, #16]	; (800ae34 <HAL_IncTick+0x24>)
 800ae22:	6013      	str	r3, [r2, #0]
}
 800ae24:	bf00      	nop
 800ae26:	46bd      	mov	sp, r7
 800ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2c:	4770      	bx	lr
 800ae2e:	bf00      	nop
 800ae30:	2000001c 	.word	0x2000001c
 800ae34:	20057190 	.word	0x20057190

0800ae38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	af00      	add	r7, sp, #0
  return uwTick;
 800ae3c:	4b03      	ldr	r3, [pc, #12]	; (800ae4c <HAL_GetTick+0x14>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	46bd      	mov	sp, r7
 800ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae48:	4770      	bx	lr
 800ae4a:	bf00      	nop
 800ae4c:	20057190 	.word	0x20057190

0800ae50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ae58:	f7ff ffee 	bl	800ae38 <HAL_GetTick>
 800ae5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae68:	d005      	beq.n	800ae76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800ae6a:	4b0a      	ldr	r3, [pc, #40]	; (800ae94 <HAL_Delay+0x44>)
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	461a      	mov	r2, r3
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	4413      	add	r3, r2
 800ae74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800ae76:	bf00      	nop
 800ae78:	f7ff ffde 	bl	800ae38 <HAL_GetTick>
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	1ad3      	subs	r3, r2, r3
 800ae82:	68fa      	ldr	r2, [r7, #12]
 800ae84:	429a      	cmp	r2, r3
 800ae86:	d8f7      	bhi.n	800ae78 <HAL_Delay+0x28>
  {
  }
}
 800ae88:	bf00      	nop
 800ae8a:	bf00      	nop
 800ae8c:	3710      	adds	r7, #16
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop
 800ae94:	2000001c 	.word	0x2000001c

0800ae98 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b084      	sub	sp, #16
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800aea0:	2300      	movs	r3, #0
 800aea2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d101      	bne.n	800aeae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800aeaa:	2301      	movs	r3, #1
 800aeac:	e031      	b.n	800af12 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d109      	bne.n	800aeca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f7f6 f90e 	bl	80010d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2200      	movs	r2, #0
 800aec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aece:	f003 0310 	and.w	r3, r3, #16
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d116      	bne.n	800af04 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aeda:	4b10      	ldr	r3, [pc, #64]	; (800af1c <HAL_ADC_Init+0x84>)
 800aedc:	4013      	ands	r3, r2
 800aede:	f043 0202 	orr.w	r2, r3, #2
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 faca 	bl	800b480 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2200      	movs	r2, #0
 800aef0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef6:	f023 0303 	bic.w	r3, r3, #3
 800aefa:	f043 0201 	orr.w	r2, r3, #1
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	641a      	str	r2, [r3, #64]	; 0x40
 800af02:	e001      	b.n	800af08 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800af04:	2301      	movs	r3, #1
 800af06:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2200      	movs	r2, #0
 800af0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800af10:	7bfb      	ldrb	r3, [r7, #15]
}
 800af12:	4618      	mov	r0, r3
 800af14:	3710      	adds	r7, #16
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	ffffeefd 	.word	0xffffeefd

0800af20 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800af20:	b480      	push	{r7}
 800af22:	b085      	sub	sp, #20
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800af28:	2300      	movs	r3, #0
 800af2a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af32:	2b01      	cmp	r3, #1
 800af34:	d101      	bne.n	800af3a <HAL_ADC_Start+0x1a>
 800af36:	2302      	movs	r3, #2
 800af38:	e0ad      	b.n	800b096 <HAL_ADC_Start+0x176>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2201      	movs	r2, #1
 800af3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	689b      	ldr	r3, [r3, #8]
 800af48:	f003 0301 	and.w	r3, r3, #1
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d018      	beq.n	800af82 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	689a      	ldr	r2, [r3, #8]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f042 0201 	orr.w	r2, r2, #1
 800af5e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800af60:	4b50      	ldr	r3, [pc, #320]	; (800b0a4 <HAL_ADC_Start+0x184>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	4a50      	ldr	r2, [pc, #320]	; (800b0a8 <HAL_ADC_Start+0x188>)
 800af66:	fba2 2303 	umull	r2, r3, r2, r3
 800af6a:	0c9a      	lsrs	r2, r3, #18
 800af6c:	4613      	mov	r3, r2
 800af6e:	005b      	lsls	r3, r3, #1
 800af70:	4413      	add	r3, r2
 800af72:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800af74:	e002      	b.n	800af7c <HAL_ADC_Start+0x5c>
    {
      counter--;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	3b01      	subs	r3, #1
 800af7a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d1f9      	bne.n	800af76 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	f003 0301 	and.w	r3, r3, #1
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d175      	bne.n	800b07c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af94:	4b45      	ldr	r3, [pc, #276]	; (800b0ac <HAL_ADC_Start+0x18c>)
 800af96:	4013      	ands	r3, r2
 800af98:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d007      	beq.n	800afbe <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afb2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800afb6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800afc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afca:	d106      	bne.n	800afda <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afd0:	f023 0206 	bic.w	r2, r3, #6
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	645a      	str	r2, [r3, #68]	; 0x44
 800afd8:	e002      	b.n	800afe0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2200      	movs	r2, #0
 800afde:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2200      	movs	r2, #0
 800afe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800aff0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800aff2:	4b2f      	ldr	r3, [pc, #188]	; (800b0b0 <HAL_ADC_Start+0x190>)
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	f003 031f 	and.w	r3, r3, #31
 800affa:	2b00      	cmp	r3, #0
 800affc:	d10f      	bne.n	800b01e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d143      	bne.n	800b094 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	689a      	ldr	r2, [r3, #8]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800b01a:	609a      	str	r2, [r3, #8]
 800b01c:	e03a      	b.n	800b094 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	4a24      	ldr	r2, [pc, #144]	; (800b0b4 <HAL_ADC_Start+0x194>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d10e      	bne.n	800b046 <HAL_ADC_Start+0x126>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	689b      	ldr	r3, [r3, #8]
 800b02e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b032:	2b00      	cmp	r3, #0
 800b034:	d107      	bne.n	800b046 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	689a      	ldr	r2, [r3, #8]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800b044:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800b046:	4b1a      	ldr	r3, [pc, #104]	; (800b0b0 <HAL_ADC_Start+0x190>)
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	f003 0310 	and.w	r3, r3, #16
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d120      	bne.n	800b094 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	4a18      	ldr	r2, [pc, #96]	; (800b0b8 <HAL_ADC_Start+0x198>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d11b      	bne.n	800b094 <HAL_ADC_Start+0x174>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	689b      	ldr	r3, [r3, #8]
 800b062:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b066:	2b00      	cmp	r3, #0
 800b068:	d114      	bne.n	800b094 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	689a      	ldr	r2, [r3, #8]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800b078:	609a      	str	r2, [r3, #8]
 800b07a:	e00b      	b.n	800b094 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b080:	f043 0210 	orr.w	r2, r3, #16
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b08c:	f043 0201 	orr.w	r2, r3, #1
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800b094:	2300      	movs	r3, #0
}
 800b096:	4618      	mov	r0, r3
 800b098:	3714      	adds	r7, #20
 800b09a:	46bd      	mov	sp, r7
 800b09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a0:	4770      	bx	lr
 800b0a2:	bf00      	nop
 800b0a4:	20000014 	.word	0x20000014
 800b0a8:	431bde83 	.word	0x431bde83
 800b0ac:	fffff8fe 	.word	0xfffff8fe
 800b0b0:	40012300 	.word	0x40012300
 800b0b4:	40012000 	.word	0x40012000
 800b0b8:	40012200 	.word	0x40012200

0800b0bc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b084      	sub	sp, #16
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	689b      	ldr	r3, [r3, #8]
 800b0d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0d8:	d113      	bne.n	800b102 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	689b      	ldr	r3, [r3, #8]
 800b0e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800b0e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0e8:	d10b      	bne.n	800b102 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ee:	f043 0220 	orr.w	r2, r3, #32
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800b0fe:	2301      	movs	r3, #1
 800b100:	e063      	b.n	800b1ca <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800b102:	f7ff fe99 	bl	800ae38 <HAL_GetTick>
 800b106:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800b108:	e021      	b.n	800b14e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b110:	d01d      	beq.n	800b14e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d007      	beq.n	800b128 <HAL_ADC_PollForConversion+0x6c>
 800b118:	f7ff fe8e 	bl	800ae38 <HAL_GetTick>
 800b11c:	4602      	mov	r2, r0
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	1ad3      	subs	r3, r2, r3
 800b122:	683a      	ldr	r2, [r7, #0]
 800b124:	429a      	cmp	r2, r3
 800b126:	d212      	bcs.n	800b14e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f003 0302 	and.w	r3, r3, #2
 800b132:	2b02      	cmp	r3, #2
 800b134:	d00b      	beq.n	800b14e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b13a:	f043 0204 	orr.w	r2, r3, #4
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2200      	movs	r2, #0
 800b146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800b14a:	2303      	movs	r3, #3
 800b14c:	e03d      	b.n	800b1ca <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f003 0302 	and.w	r3, r3, #2
 800b158:	2b02      	cmp	r3, #2
 800b15a:	d1d6      	bne.n	800b10a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f06f 0212 	mvn.w	r2, #18
 800b164:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b16a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	689b      	ldr	r3, [r3, #8]
 800b178:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d123      	bne.n	800b1c8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800b184:	2b00      	cmp	r3, #0
 800b186:	d11f      	bne.n	800b1c8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b18e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800b192:	2b00      	cmp	r3, #0
 800b194:	d006      	beq.n	800b1a4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	689b      	ldr	r3, [r3, #8]
 800b19c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d111      	bne.n	800b1c8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d105      	bne.n	800b1c8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1c0:	f043 0201 	orr.w	r2, r3, #1
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800b1c8:	2300      	movs	r3, #0
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3710      	adds	r7, #16
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800b1d2:	b480      	push	{r7}
 800b1d4:	b083      	sub	sp, #12
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	370c      	adds	r7, #12
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr

0800b1ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b085      	sub	sp, #20
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b200:	2b01      	cmp	r3, #1
 800b202:	d101      	bne.n	800b208 <HAL_ADC_ConfigChannel+0x1c>
 800b204:	2302      	movs	r3, #2
 800b206:	e12a      	b.n	800b45e <HAL_ADC_ConfigChannel+0x272>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2201      	movs	r2, #1
 800b20c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	2b09      	cmp	r3, #9
 800b216:	d93a      	bls.n	800b28e <HAL_ADC_ConfigChannel+0xa2>
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b220:	d035      	beq.n	800b28e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	68d9      	ldr	r1, [r3, #12]
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	461a      	mov	r2, r3
 800b230:	4613      	mov	r3, r2
 800b232:	005b      	lsls	r3, r3, #1
 800b234:	4413      	add	r3, r2
 800b236:	3b1e      	subs	r3, #30
 800b238:	2207      	movs	r2, #7
 800b23a:	fa02 f303 	lsl.w	r3, r2, r3
 800b23e:	43da      	mvns	r2, r3
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	400a      	ands	r2, r1
 800b246:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	4a87      	ldr	r2, [pc, #540]	; (800b46c <HAL_ADC_ConfigChannel+0x280>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d10a      	bne.n	800b268 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	68d9      	ldr	r1, [r3, #12]
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	689b      	ldr	r3, [r3, #8]
 800b25c:	061a      	lsls	r2, r3, #24
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	430a      	orrs	r2, r1
 800b264:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800b266:	e035      	b.n	800b2d4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	68d9      	ldr	r1, [r3, #12]
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	689a      	ldr	r2, [r3, #8]
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	b29b      	uxth	r3, r3
 800b278:	4618      	mov	r0, r3
 800b27a:	4603      	mov	r3, r0
 800b27c:	005b      	lsls	r3, r3, #1
 800b27e:	4403      	add	r3, r0
 800b280:	3b1e      	subs	r3, #30
 800b282:	409a      	lsls	r2, r3
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	430a      	orrs	r2, r1
 800b28a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800b28c:	e022      	b.n	800b2d4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	6919      	ldr	r1, [r3, #16]
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	b29b      	uxth	r3, r3
 800b29a:	461a      	mov	r2, r3
 800b29c:	4613      	mov	r3, r2
 800b29e:	005b      	lsls	r3, r3, #1
 800b2a0:	4413      	add	r3, r2
 800b2a2:	2207      	movs	r2, #7
 800b2a4:	fa02 f303 	lsl.w	r3, r2, r3
 800b2a8:	43da      	mvns	r2, r3
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	400a      	ands	r2, r1
 800b2b0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	6919      	ldr	r1, [r3, #16]
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	689a      	ldr	r2, [r3, #8]
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	b29b      	uxth	r3, r3
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	005b      	lsls	r3, r3, #1
 800b2c8:	4403      	add	r3, r0
 800b2ca:	409a      	lsls	r2, r3
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	430a      	orrs	r2, r1
 800b2d2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	2b06      	cmp	r3, #6
 800b2da:	d824      	bhi.n	800b326 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	685a      	ldr	r2, [r3, #4]
 800b2e6:	4613      	mov	r3, r2
 800b2e8:	009b      	lsls	r3, r3, #2
 800b2ea:	4413      	add	r3, r2
 800b2ec:	3b05      	subs	r3, #5
 800b2ee:	221f      	movs	r2, #31
 800b2f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b2f4:	43da      	mvns	r2, r3
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	400a      	ands	r2, r1
 800b2fc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	b29b      	uxth	r3, r3
 800b30a:	4618      	mov	r0, r3
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	685a      	ldr	r2, [r3, #4]
 800b310:	4613      	mov	r3, r2
 800b312:	009b      	lsls	r3, r3, #2
 800b314:	4413      	add	r3, r2
 800b316:	3b05      	subs	r3, #5
 800b318:	fa00 f203 	lsl.w	r2, r0, r3
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	430a      	orrs	r2, r1
 800b322:	635a      	str	r2, [r3, #52]	; 0x34
 800b324:	e04c      	b.n	800b3c0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	2b0c      	cmp	r3, #12
 800b32c:	d824      	bhi.n	800b378 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	685a      	ldr	r2, [r3, #4]
 800b338:	4613      	mov	r3, r2
 800b33a:	009b      	lsls	r3, r3, #2
 800b33c:	4413      	add	r3, r2
 800b33e:	3b23      	subs	r3, #35	; 0x23
 800b340:	221f      	movs	r2, #31
 800b342:	fa02 f303 	lsl.w	r3, r2, r3
 800b346:	43da      	mvns	r2, r3
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	400a      	ands	r2, r1
 800b34e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	b29b      	uxth	r3, r3
 800b35c:	4618      	mov	r0, r3
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	685a      	ldr	r2, [r3, #4]
 800b362:	4613      	mov	r3, r2
 800b364:	009b      	lsls	r3, r3, #2
 800b366:	4413      	add	r3, r2
 800b368:	3b23      	subs	r3, #35	; 0x23
 800b36a:	fa00 f203 	lsl.w	r2, r0, r3
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	430a      	orrs	r2, r1
 800b374:	631a      	str	r2, [r3, #48]	; 0x30
 800b376:	e023      	b.n	800b3c0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	685a      	ldr	r2, [r3, #4]
 800b382:	4613      	mov	r3, r2
 800b384:	009b      	lsls	r3, r3, #2
 800b386:	4413      	add	r3, r2
 800b388:	3b41      	subs	r3, #65	; 0x41
 800b38a:	221f      	movs	r2, #31
 800b38c:	fa02 f303 	lsl.w	r3, r2, r3
 800b390:	43da      	mvns	r2, r3
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	400a      	ands	r2, r1
 800b398:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	b29b      	uxth	r3, r3
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	685a      	ldr	r2, [r3, #4]
 800b3ac:	4613      	mov	r3, r2
 800b3ae:	009b      	lsls	r3, r3, #2
 800b3b0:	4413      	add	r3, r2
 800b3b2:	3b41      	subs	r3, #65	; 0x41
 800b3b4:	fa00 f203 	lsl.w	r2, r0, r3
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	430a      	orrs	r2, r1
 800b3be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4a2a      	ldr	r2, [pc, #168]	; (800b470 <HAL_ADC_ConfigChannel+0x284>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d10a      	bne.n	800b3e0 <HAL_ADC_ConfigChannel+0x1f4>
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b3d2:	d105      	bne.n	800b3e0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800b3d4:	4b27      	ldr	r3, [pc, #156]	; (800b474 <HAL_ADC_ConfigChannel+0x288>)
 800b3d6:	685b      	ldr	r3, [r3, #4]
 800b3d8:	4a26      	ldr	r2, [pc, #152]	; (800b474 <HAL_ADC_ConfigChannel+0x288>)
 800b3da:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800b3de:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	4a22      	ldr	r2, [pc, #136]	; (800b470 <HAL_ADC_ConfigChannel+0x284>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d109      	bne.n	800b3fe <HAL_ADC_ConfigChannel+0x212>
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	2b12      	cmp	r3, #18
 800b3f0:	d105      	bne.n	800b3fe <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800b3f2:	4b20      	ldr	r3, [pc, #128]	; (800b474 <HAL_ADC_ConfigChannel+0x288>)
 800b3f4:	685b      	ldr	r3, [r3, #4]
 800b3f6:	4a1f      	ldr	r2, [pc, #124]	; (800b474 <HAL_ADC_ConfigChannel+0x288>)
 800b3f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b3fc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	4a1b      	ldr	r2, [pc, #108]	; (800b470 <HAL_ADC_ConfigChannel+0x284>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d125      	bne.n	800b454 <HAL_ADC_ConfigChannel+0x268>
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4a17      	ldr	r2, [pc, #92]	; (800b46c <HAL_ADC_ConfigChannel+0x280>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d003      	beq.n	800b41a <HAL_ADC_ConfigChannel+0x22e>
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	2b11      	cmp	r3, #17
 800b418:	d11c      	bne.n	800b454 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800b41a:	4b16      	ldr	r3, [pc, #88]	; (800b474 <HAL_ADC_ConfigChannel+0x288>)
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	4a15      	ldr	r2, [pc, #84]	; (800b474 <HAL_ADC_ConfigChannel+0x288>)
 800b420:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b424:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	4a10      	ldr	r2, [pc, #64]	; (800b46c <HAL_ADC_ConfigChannel+0x280>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d111      	bne.n	800b454 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800b430:	4b11      	ldr	r3, [pc, #68]	; (800b478 <HAL_ADC_ConfigChannel+0x28c>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4a11      	ldr	r2, [pc, #68]	; (800b47c <HAL_ADC_ConfigChannel+0x290>)
 800b436:	fba2 2303 	umull	r2, r3, r2, r3
 800b43a:	0c9a      	lsrs	r2, r3, #18
 800b43c:	4613      	mov	r3, r2
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	4413      	add	r3, r2
 800b442:	005b      	lsls	r3, r3, #1
 800b444:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800b446:	e002      	b.n	800b44e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	3b01      	subs	r3, #1
 800b44c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d1f9      	bne.n	800b448 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2200      	movs	r2, #0
 800b458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800b45c:	2300      	movs	r3, #0
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3714      	adds	r7, #20
 800b462:	46bd      	mov	sp, r7
 800b464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b468:	4770      	bx	lr
 800b46a:	bf00      	nop
 800b46c:	10000012 	.word	0x10000012
 800b470:	40012000 	.word	0x40012000
 800b474:	40012300 	.word	0x40012300
 800b478:	20000014 	.word	0x20000014
 800b47c:	431bde83 	.word	0x431bde83

0800b480 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800b480:	b480      	push	{r7}
 800b482:	b083      	sub	sp, #12
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800b488:	4b78      	ldr	r3, [pc, #480]	; (800b66c <ADC_Init+0x1ec>)
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	4a77      	ldr	r2, [pc, #476]	; (800b66c <ADC_Init+0x1ec>)
 800b48e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800b492:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800b494:	4b75      	ldr	r3, [pc, #468]	; (800b66c <ADC_Init+0x1ec>)
 800b496:	685a      	ldr	r2, [r3, #4]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	4973      	ldr	r1, [pc, #460]	; (800b66c <ADC_Init+0x1ec>)
 800b49e:	4313      	orrs	r3, r2
 800b4a0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	685a      	ldr	r2, [r3, #4]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b4b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	6859      	ldr	r1, [r3, #4]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	691b      	ldr	r3, [r3, #16]
 800b4bc:	021a      	lsls	r2, r3, #8
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	430a      	orrs	r2, r1
 800b4c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	685a      	ldr	r2, [r3, #4]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800b4d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	6859      	ldr	r1, [r3, #4]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	689a      	ldr	r2, [r3, #8]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	430a      	orrs	r2, r1
 800b4e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	689a      	ldr	r2, [r3, #8]
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b4f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	6899      	ldr	r1, [r3, #8]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	68da      	ldr	r2, [r3, #12]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	430a      	orrs	r2, r1
 800b508:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b50e:	4a58      	ldr	r2, [pc, #352]	; (800b670 <ADC_Init+0x1f0>)
 800b510:	4293      	cmp	r3, r2
 800b512:	d022      	beq.n	800b55a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	689a      	ldr	r2, [r3, #8]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b522:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	6899      	ldr	r1, [r3, #8]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	430a      	orrs	r2, r1
 800b534:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	689a      	ldr	r2, [r3, #8]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800b544:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	6899      	ldr	r1, [r3, #8]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	430a      	orrs	r2, r1
 800b556:	609a      	str	r2, [r3, #8]
 800b558:	e00f      	b.n	800b57a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	689a      	ldr	r2, [r3, #8]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b568:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	689a      	ldr	r2, [r3, #8]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800b578:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	689a      	ldr	r2, [r3, #8]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f022 0202 	bic.w	r2, r2, #2
 800b588:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	6899      	ldr	r1, [r3, #8]
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	699b      	ldr	r3, [r3, #24]
 800b594:	005a      	lsls	r2, r3, #1
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	430a      	orrs	r2, r1
 800b59c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d01b      	beq.n	800b5e0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	685a      	ldr	r2, [r3, #4]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b5b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	685a      	ldr	r2, [r3, #4]
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800b5c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	6859      	ldr	r1, [r3, #4]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d2:	3b01      	subs	r3, #1
 800b5d4:	035a      	lsls	r2, r3, #13
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	430a      	orrs	r2, r1
 800b5dc:	605a      	str	r2, [r3, #4]
 800b5de:	e007      	b.n	800b5f0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	685a      	ldr	r2, [r3, #4]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b5ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800b5fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	69db      	ldr	r3, [r3, #28]
 800b60a:	3b01      	subs	r3, #1
 800b60c:	051a      	lsls	r2, r3, #20
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	430a      	orrs	r2, r1
 800b614:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	689a      	ldr	r2, [r3, #8]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b624:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	6899      	ldr	r1, [r3, #8]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b632:	025a      	lsls	r2, r3, #9
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	430a      	orrs	r2, r1
 800b63a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	689a      	ldr	r2, [r3, #8]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b64a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	6899      	ldr	r1, [r3, #8]
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	695b      	ldr	r3, [r3, #20]
 800b656:	029a      	lsls	r2, r3, #10
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	430a      	orrs	r2, r1
 800b65e:	609a      	str	r2, [r3, #8]
}
 800b660:	bf00      	nop
 800b662:	370c      	adds	r7, #12
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr
 800b66c:	40012300 	.word	0x40012300
 800b670:	0f000001 	.word	0x0f000001

0800b674 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b084      	sub	sp, #16
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d101      	bne.n	800b686 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800b682:	2301      	movs	r3, #1
 800b684:	e0ed      	b.n	800b862 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d102      	bne.n	800b698 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f7f5 ffd2 	bl	800163c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	681a      	ldr	r2, [r3, #0]
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f022 0202 	bic.w	r2, r2, #2
 800b6a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b6a8:	f7ff fbc6 	bl	800ae38 <HAL_GetTick>
 800b6ac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800b6ae:	e012      	b.n	800b6d6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b6b0:	f7ff fbc2 	bl	800ae38 <HAL_GetTick>
 800b6b4:	4602      	mov	r2, r0
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	1ad3      	subs	r3, r2, r3
 800b6ba:	2b0a      	cmp	r3, #10
 800b6bc:	d90b      	bls.n	800b6d6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2205      	movs	r2, #5
 800b6ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	e0c5      	b.n	800b862 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	685b      	ldr	r3, [r3, #4]
 800b6dc:	f003 0302 	and.w	r3, r3, #2
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d1e5      	bne.n	800b6b0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	681a      	ldr	r2, [r3, #0]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f042 0201 	orr.w	r2, r2, #1
 800b6f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b6f4:	f7ff fba0 	bl	800ae38 <HAL_GetTick>
 800b6f8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800b6fa:	e012      	b.n	800b722 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b6fc:	f7ff fb9c 	bl	800ae38 <HAL_GetTick>
 800b700:	4602      	mov	r2, r0
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	1ad3      	subs	r3, r2, r3
 800b706:	2b0a      	cmp	r3, #10
 800b708:	d90b      	bls.n	800b722 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b70e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2205      	movs	r2, #5
 800b71a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800b71e:	2301      	movs	r3, #1
 800b720:	e09f      	b.n	800b862 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	f003 0301 	and.w	r3, r3, #1
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d0e5      	beq.n	800b6fc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	7e1b      	ldrb	r3, [r3, #24]
 800b734:	2b01      	cmp	r3, #1
 800b736:	d108      	bne.n	800b74a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	681a      	ldr	r2, [r3, #0]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b746:	601a      	str	r2, [r3, #0]
 800b748:	e007      	b.n	800b75a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b758:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	7e5b      	ldrb	r3, [r3, #25]
 800b75e:	2b01      	cmp	r3, #1
 800b760:	d108      	bne.n	800b774 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	681a      	ldr	r2, [r3, #0]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b770:	601a      	str	r2, [r3, #0]
 800b772:	e007      	b.n	800b784 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	681a      	ldr	r2, [r3, #0]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b782:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	7e9b      	ldrb	r3, [r3, #26]
 800b788:	2b01      	cmp	r3, #1
 800b78a:	d108      	bne.n	800b79e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	681a      	ldr	r2, [r3, #0]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f042 0220 	orr.w	r2, r2, #32
 800b79a:	601a      	str	r2, [r3, #0]
 800b79c:	e007      	b.n	800b7ae <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	681a      	ldr	r2, [r3, #0]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f022 0220 	bic.w	r2, r2, #32
 800b7ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	7edb      	ldrb	r3, [r3, #27]
 800b7b2:	2b01      	cmp	r3, #1
 800b7b4:	d108      	bne.n	800b7c8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	681a      	ldr	r2, [r3, #0]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f022 0210 	bic.w	r2, r2, #16
 800b7c4:	601a      	str	r2, [r3, #0]
 800b7c6:	e007      	b.n	800b7d8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f042 0210 	orr.w	r2, r2, #16
 800b7d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	7f1b      	ldrb	r3, [r3, #28]
 800b7dc:	2b01      	cmp	r3, #1
 800b7de:	d108      	bne.n	800b7f2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f042 0208 	orr.w	r2, r2, #8
 800b7ee:	601a      	str	r2, [r3, #0]
 800b7f0:	e007      	b.n	800b802 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	681a      	ldr	r2, [r3, #0]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f022 0208 	bic.w	r2, r2, #8
 800b800:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	7f5b      	ldrb	r3, [r3, #29]
 800b806:	2b01      	cmp	r3, #1
 800b808:	d108      	bne.n	800b81c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	681a      	ldr	r2, [r3, #0]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f042 0204 	orr.w	r2, r2, #4
 800b818:	601a      	str	r2, [r3, #0]
 800b81a:	e007      	b.n	800b82c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	681a      	ldr	r2, [r3, #0]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f022 0204 	bic.w	r2, r2, #4
 800b82a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	689a      	ldr	r2, [r3, #8]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	68db      	ldr	r3, [r3, #12]
 800b834:	431a      	orrs	r2, r3
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	691b      	ldr	r3, [r3, #16]
 800b83a:	431a      	orrs	r2, r3
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	695b      	ldr	r3, [r3, #20]
 800b840:	ea42 0103 	orr.w	r1, r2, r3
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	1e5a      	subs	r2, r3, #1
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	430a      	orrs	r2, r1
 800b850:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2200      	movs	r2, #0
 800b856:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2201      	movs	r2, #1
 800b85c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800b860:	2300      	movs	r3, #0
}
 800b862:	4618      	mov	r0, r3
 800b864:	3710      	adds	r7, #16
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}
	...

0800b86c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800b86c:	b480      	push	{r7}
 800b86e:	b087      	sub	sp, #28
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
 800b874:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b882:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800b884:	7cfb      	ldrb	r3, [r7, #19]
 800b886:	2b01      	cmp	r3, #1
 800b888:	d003      	beq.n	800b892 <HAL_CAN_ConfigFilter+0x26>
 800b88a:	7cfb      	ldrb	r3, [r7, #19]
 800b88c:	2b02      	cmp	r3, #2
 800b88e:	f040 80c7 	bne.w	800ba20 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	4a69      	ldr	r2, [pc, #420]	; (800ba3c <HAL_CAN_ConfigFilter+0x1d0>)
 800b898:	4293      	cmp	r3, r2
 800b89a:	d001      	beq.n	800b8a0 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 800b89c:	4b68      	ldr	r3, [pc, #416]	; (800ba40 <HAL_CAN_ConfigFilter+0x1d4>)
 800b89e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b8a6:	f043 0201 	orr.w	r2, r3, #1
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	4a63      	ldr	r2, [pc, #396]	; (800ba40 <HAL_CAN_ConfigFilter+0x1d4>)
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d111      	bne.n	800b8dc <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b8be:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d2:	021b      	lsls	r3, r3, #8
 800b8d4:	431a      	orrs	r2, r3
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	695b      	ldr	r3, [r3, #20]
 800b8e0:	f003 031f 	and.w	r3, r3, #31
 800b8e4:	2201      	movs	r2, #1
 800b8e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b8ea:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	43db      	mvns	r3, r3
 800b8f6:	401a      	ands	r2, r3
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	69db      	ldr	r3, [r3, #28]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d123      	bne.n	800b94e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	43db      	mvns	r3, r3
 800b910:	401a      	ands	r2, r3
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	68db      	ldr	r3, [r3, #12]
 800b91c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	685b      	ldr	r3, [r3, #4]
 800b922:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b924:	683a      	ldr	r2, [r7, #0]
 800b926:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800b928:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	3248      	adds	r2, #72	; 0x48
 800b92e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	689b      	ldr	r3, [r3, #8]
 800b936:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b942:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b944:	6979      	ldr	r1, [r7, #20]
 800b946:	3348      	adds	r3, #72	; 0x48
 800b948:	00db      	lsls	r3, r3, #3
 800b94a:	440b      	add	r3, r1
 800b94c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	69db      	ldr	r3, [r3, #28]
 800b952:	2b01      	cmp	r3, #1
 800b954:	d122      	bne.n	800b99c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	431a      	orrs	r2, r3
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	685b      	ldr	r3, [r3, #4]
 800b970:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b972:	683a      	ldr	r2, [r7, #0]
 800b974:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800b976:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	3248      	adds	r2, #72	; 0x48
 800b97c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	689b      	ldr	r3, [r3, #8]
 800b984:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	68db      	ldr	r3, [r3, #12]
 800b98a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b990:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b992:	6979      	ldr	r1, [r7, #20]
 800b994:	3348      	adds	r3, #72	; 0x48
 800b996:	00db      	lsls	r3, r3, #3
 800b998:	440b      	add	r3, r1
 800b99a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	699b      	ldr	r3, [r3, #24]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d109      	bne.n	800b9b8 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	43db      	mvns	r3, r3
 800b9ae:	401a      	ands	r2, r3
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800b9b6:	e007      	b.n	800b9c8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	431a      	orrs	r2, r3
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	691b      	ldr	r3, [r3, #16]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d109      	bne.n	800b9e4 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	43db      	mvns	r3, r3
 800b9da:	401a      	ands	r2, r3
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800b9e2:	e007      	b.n	800b9f4 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	431a      	orrs	r2, r3
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	6a1b      	ldr	r3, [r3, #32]
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	d107      	bne.n	800ba0c <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	431a      	orrs	r2, r3
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ba12:	f023 0201 	bic.w	r2, r3, #1
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	e006      	b.n	800ba2e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba24:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800ba2c:	2301      	movs	r3, #1
  }
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	371c      	adds	r7, #28
 800ba32:	46bd      	mov	sp, r7
 800ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba38:	4770      	bx	lr
 800ba3a:	bf00      	nop
 800ba3c:	40003400 	.word	0x40003400
 800ba40:	40006400 	.word	0x40006400

0800ba44 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b084      	sub	sp, #16
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	2b01      	cmp	r3, #1
 800ba56:	d12e      	bne.n	800bab6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2202      	movs	r2, #2
 800ba5c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	681a      	ldr	r2, [r3, #0]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f022 0201 	bic.w	r2, r2, #1
 800ba6e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ba70:	f7ff f9e2 	bl	800ae38 <HAL_GetTick>
 800ba74:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800ba76:	e012      	b.n	800ba9e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800ba78:	f7ff f9de 	bl	800ae38 <HAL_GetTick>
 800ba7c:	4602      	mov	r2, r0
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	1ad3      	subs	r3, r2, r3
 800ba82:	2b0a      	cmp	r3, #10
 800ba84:	d90b      	bls.n	800ba9e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba8a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2205      	movs	r2, #5
 800ba96:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	e012      	b.n	800bac4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	f003 0301 	and.w	r3, r3, #1
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d1e5      	bne.n	800ba78 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2200      	movs	r2, #0
 800bab0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800bab2:	2300      	movs	r3, #0
 800bab4:	e006      	b.n	800bac4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800bac2:	2301      	movs	r3, #1
  }
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3710      	adds	r7, #16
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}

0800bacc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800bacc:	b480      	push	{r7}
 800bace:	b089      	sub	sp, #36	; 0x24
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	60f8      	str	r0, [r7, #12]
 800bad4:	60b9      	str	r1, [r7, #8]
 800bad6:	607a      	str	r2, [r7, #4]
 800bad8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bae0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800baea:	7ffb      	ldrb	r3, [r7, #31]
 800baec:	2b01      	cmp	r3, #1
 800baee:	d003      	beq.n	800baf8 <HAL_CAN_AddTxMessage+0x2c>
 800baf0:	7ffb      	ldrb	r3, [r7, #31]
 800baf2:	2b02      	cmp	r3, #2
 800baf4:	f040 80b8 	bne.w	800bc68 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800baf8:	69bb      	ldr	r3, [r7, #24]
 800bafa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d10a      	bne.n	800bb18 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800bb02:	69bb      	ldr	r3, [r7, #24]
 800bb04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d105      	bne.n	800bb18 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800bb0c:	69bb      	ldr	r3, [r7, #24]
 800bb0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	f000 80a0 	beq.w	800bc58 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800bb18:	69bb      	ldr	r3, [r7, #24]
 800bb1a:	0e1b      	lsrs	r3, r3, #24
 800bb1c:	f003 0303 	and.w	r3, r3, #3
 800bb20:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	2b02      	cmp	r3, #2
 800bb26:	d907      	bls.n	800bb38 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb2c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800bb34:	2301      	movs	r3, #1
 800bb36:	e09e      	b.n	800bc76 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800bb38:	2201      	movs	r2, #1
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	409a      	lsls	r2, r3
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	689b      	ldr	r3, [r3, #8]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d10d      	bne.n	800bb66 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800bb54:	68f9      	ldr	r1, [r7, #12]
 800bb56:	6809      	ldr	r1, [r1, #0]
 800bb58:	431a      	orrs	r2, r3
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	3318      	adds	r3, #24
 800bb5e:	011b      	lsls	r3, r3, #4
 800bb60:	440b      	add	r3, r1
 800bb62:	601a      	str	r2, [r3, #0]
 800bb64:	e00f      	b.n	800bb86 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800bb70:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800bb76:	68f9      	ldr	r1, [r7, #12]
 800bb78:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800bb7a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	3318      	adds	r3, #24
 800bb80:	011b      	lsls	r3, r3, #4
 800bb82:	440b      	add	r3, r1
 800bb84:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	6819      	ldr	r1, [r3, #0]
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	691a      	ldr	r2, [r3, #16]
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	3318      	adds	r3, #24
 800bb92:	011b      	lsls	r3, r3, #4
 800bb94:	440b      	add	r3, r1
 800bb96:	3304      	adds	r3, #4
 800bb98:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	7d1b      	ldrb	r3, [r3, #20]
 800bb9e:	2b01      	cmp	r3, #1
 800bba0:	d111      	bne.n	800bbc6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	681a      	ldr	r2, [r3, #0]
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	3318      	adds	r3, #24
 800bbaa:	011b      	lsls	r3, r3, #4
 800bbac:	4413      	add	r3, r2
 800bbae:	3304      	adds	r3, #4
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	68fa      	ldr	r2, [r7, #12]
 800bbb4:	6811      	ldr	r1, [r2, #0]
 800bbb6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	3318      	adds	r3, #24
 800bbbe:	011b      	lsls	r3, r3, #4
 800bbc0:	440b      	add	r3, r1
 800bbc2:	3304      	adds	r3, #4
 800bbc4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	3307      	adds	r3, #7
 800bbca:	781b      	ldrb	r3, [r3, #0]
 800bbcc:	061a      	lsls	r2, r3, #24
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	3306      	adds	r3, #6
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	041b      	lsls	r3, r3, #16
 800bbd6:	431a      	orrs	r2, r3
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	3305      	adds	r3, #5
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	021b      	lsls	r3, r3, #8
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	3204      	adds	r2, #4
 800bbe6:	7812      	ldrb	r2, [r2, #0]
 800bbe8:	4610      	mov	r0, r2
 800bbea:	68fa      	ldr	r2, [r7, #12]
 800bbec:	6811      	ldr	r1, [r2, #0]
 800bbee:	ea43 0200 	orr.w	r2, r3, r0
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	011b      	lsls	r3, r3, #4
 800bbf6:	440b      	add	r3, r1
 800bbf8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800bbfc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	3303      	adds	r3, #3
 800bc02:	781b      	ldrb	r3, [r3, #0]
 800bc04:	061a      	lsls	r2, r3, #24
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	3302      	adds	r3, #2
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	041b      	lsls	r3, r3, #16
 800bc0e:	431a      	orrs	r2, r3
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	3301      	adds	r3, #1
 800bc14:	781b      	ldrb	r3, [r3, #0]
 800bc16:	021b      	lsls	r3, r3, #8
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	7812      	ldrb	r2, [r2, #0]
 800bc1e:	4610      	mov	r0, r2
 800bc20:	68fa      	ldr	r2, [r7, #12]
 800bc22:	6811      	ldr	r1, [r2, #0]
 800bc24:	ea43 0200 	orr.w	r2, r3, r0
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	011b      	lsls	r3, r3, #4
 800bc2c:	440b      	add	r3, r1
 800bc2e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800bc32:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681a      	ldr	r2, [r3, #0]
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	3318      	adds	r3, #24
 800bc3c:	011b      	lsls	r3, r3, #4
 800bc3e:	4413      	add	r3, r2
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	68fa      	ldr	r2, [r7, #12]
 800bc44:	6811      	ldr	r1, [r2, #0]
 800bc46:	f043 0201 	orr.w	r2, r3, #1
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	3318      	adds	r3, #24
 800bc4e:	011b      	lsls	r3, r3, #4
 800bc50:	440b      	add	r3, r1
 800bc52:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800bc54:	2300      	movs	r3, #0
 800bc56:	e00e      	b.n	800bc76 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc5c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800bc64:	2301      	movs	r3, #1
 800bc66:	e006      	b.n	800bc76 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc6c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800bc74:	2301      	movs	r3, #1
  }
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3724      	adds	r7, #36	; 0x24
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc80:	4770      	bx	lr

0800bc82 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800bc82:	b480      	push	{r7}
 800bc84:	b087      	sub	sp, #28
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	60f8      	str	r0, [r7, #12]
 800bc8a:	60b9      	str	r1, [r7, #8]
 800bc8c:	607a      	str	r2, [r7, #4]
 800bc8e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bc96:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800bc98:	7dfb      	ldrb	r3, [r7, #23]
 800bc9a:	2b01      	cmp	r3, #1
 800bc9c:	d003      	beq.n	800bca6 <HAL_CAN_GetRxMessage+0x24>
 800bc9e:	7dfb      	ldrb	r3, [r7, #23]
 800bca0:	2b02      	cmp	r3, #2
 800bca2:	f040 80f3 	bne.w	800be8c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d10e      	bne.n	800bcca <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	68db      	ldr	r3, [r3, #12]
 800bcb2:	f003 0303 	and.w	r3, r3, #3
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d116      	bne.n	800bce8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcbe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	e0e7      	b.n	800be9a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	691b      	ldr	r3, [r3, #16]
 800bcd0:	f003 0303 	and.w	r3, r3, #3
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d107      	bne.n	800bce8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcdc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800bce4:	2301      	movs	r3, #1
 800bce6:	e0d8      	b.n	800be9a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681a      	ldr	r2, [r3, #0]
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	331b      	adds	r3, #27
 800bcf0:	011b      	lsls	r3, r3, #4
 800bcf2:	4413      	add	r3, r2
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f003 0204 	and.w	r2, r3, #4
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	689b      	ldr	r3, [r3, #8]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d10c      	bne.n	800bd20 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681a      	ldr	r2, [r3, #0]
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	331b      	adds	r3, #27
 800bd0e:	011b      	lsls	r3, r3, #4
 800bd10:	4413      	add	r3, r2
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	0d5b      	lsrs	r3, r3, #21
 800bd16:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	601a      	str	r2, [r3, #0]
 800bd1e:	e00b      	b.n	800bd38 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681a      	ldr	r2, [r3, #0]
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	331b      	adds	r3, #27
 800bd28:	011b      	lsls	r3, r3, #4
 800bd2a:	4413      	add	r3, r2
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	08db      	lsrs	r3, r3, #3
 800bd30:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	681a      	ldr	r2, [r3, #0]
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	331b      	adds	r3, #27
 800bd40:	011b      	lsls	r3, r3, #4
 800bd42:	4413      	add	r3, r2
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f003 0202 	and.w	r2, r3, #2
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681a      	ldr	r2, [r3, #0]
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	331b      	adds	r3, #27
 800bd56:	011b      	lsls	r3, r3, #4
 800bd58:	4413      	add	r3, r2
 800bd5a:	3304      	adds	r3, #4
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f003 020f 	and.w	r2, r3, #15
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681a      	ldr	r2, [r3, #0]
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	331b      	adds	r3, #27
 800bd6e:	011b      	lsls	r3, r3, #4
 800bd70:	4413      	add	r3, r2
 800bd72:	3304      	adds	r3, #4
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	0a1b      	lsrs	r3, r3, #8
 800bd78:	b2da      	uxtb	r2, r3
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681a      	ldr	r2, [r3, #0]
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	331b      	adds	r3, #27
 800bd86:	011b      	lsls	r3, r3, #4
 800bd88:	4413      	add	r3, r2
 800bd8a:	3304      	adds	r3, #4
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	0c1b      	lsrs	r3, r3, #16
 800bd90:	b29a      	uxth	r2, r3
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	011b      	lsls	r3, r3, #4
 800bd9e:	4413      	add	r3, r2
 800bda0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	b2da      	uxtb	r2, r3
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	681a      	ldr	r2, [r3, #0]
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	011b      	lsls	r3, r3, #4
 800bdb4:	4413      	add	r3, r2
 800bdb6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	0a1a      	lsrs	r2, r3, #8
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	b2d2      	uxtb	r2, r2
 800bdc4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681a      	ldr	r2, [r3, #0]
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	011b      	lsls	r3, r3, #4
 800bdce:	4413      	add	r3, r2
 800bdd0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	0c1a      	lsrs	r2, r3, #16
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	3302      	adds	r3, #2
 800bddc:	b2d2      	uxtb	r2, r2
 800bdde:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681a      	ldr	r2, [r3, #0]
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	011b      	lsls	r3, r3, #4
 800bde8:	4413      	add	r3, r2
 800bdea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	0e1a      	lsrs	r2, r3, #24
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	3303      	adds	r3, #3
 800bdf6:	b2d2      	uxtb	r2, r2
 800bdf8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681a      	ldr	r2, [r3, #0]
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	011b      	lsls	r3, r3, #4
 800be02:	4413      	add	r3, r2
 800be04:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800be08:	681a      	ldr	r2, [r3, #0]
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	3304      	adds	r3, #4
 800be0e:	b2d2      	uxtb	r2, r2
 800be10:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681a      	ldr	r2, [r3, #0]
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	011b      	lsls	r3, r3, #4
 800be1a:	4413      	add	r3, r2
 800be1c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	0a1a      	lsrs	r2, r3, #8
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	3305      	adds	r3, #5
 800be28:	b2d2      	uxtb	r2, r2
 800be2a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	681a      	ldr	r2, [r3, #0]
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	011b      	lsls	r3, r3, #4
 800be34:	4413      	add	r3, r2
 800be36:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	0c1a      	lsrs	r2, r3, #16
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	3306      	adds	r3, #6
 800be42:	b2d2      	uxtb	r2, r2
 800be44:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681a      	ldr	r2, [r3, #0]
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	011b      	lsls	r3, r3, #4
 800be4e:	4413      	add	r3, r2
 800be50:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	0e1a      	lsrs	r2, r3, #24
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	3307      	adds	r3, #7
 800be5c:	b2d2      	uxtb	r2, r2
 800be5e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d108      	bne.n	800be78 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	68da      	ldr	r2, [r3, #12]
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f042 0220 	orr.w	r2, r2, #32
 800be74:	60da      	str	r2, [r3, #12]
 800be76:	e007      	b.n	800be88 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	691a      	ldr	r2, [r3, #16]
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f042 0220 	orr.w	r2, r2, #32
 800be86:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800be88:	2300      	movs	r3, #0
 800be8a:	e006      	b.n	800be9a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be90:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800be98:	2301      	movs	r3, #1
  }
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	371c      	adds	r7, #28
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr

0800bea6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800bea6:	b480      	push	{r7}
 800bea8:	b085      	sub	sp, #20
 800beaa:	af00      	add	r7, sp, #0
 800beac:	6078      	str	r0, [r7, #4]
 800beae:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800beb6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800beb8:	7bfb      	ldrb	r3, [r7, #15]
 800beba:	2b01      	cmp	r3, #1
 800bebc:	d002      	beq.n	800bec4 <HAL_CAN_ActivateNotification+0x1e>
 800bebe:	7bfb      	ldrb	r3, [r7, #15]
 800bec0:	2b02      	cmp	r3, #2
 800bec2:	d109      	bne.n	800bed8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	6959      	ldr	r1, [r3, #20]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	683a      	ldr	r2, [r7, #0]
 800bed0:	430a      	orrs	r2, r1
 800bed2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800bed4:	2300      	movs	r3, #0
 800bed6:	e006      	b.n	800bee6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bedc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800bee4:	2301      	movs	r3, #1
  }
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3714      	adds	r7, #20
 800beea:	46bd      	mov	sp, r7
 800beec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef0:	4770      	bx	lr

0800bef2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800bef2:	b580      	push	{r7, lr}
 800bef4:	b08a      	sub	sp, #40	; 0x28
 800bef6:	af00      	add	r7, sp, #0
 800bef8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800befa:	2300      	movs	r3, #0
 800befc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	695b      	ldr	r3, [r3, #20]
 800bf04:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	685b      	ldr	r3, [r3, #4]
 800bf0c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	689b      	ldr	r3, [r3, #8]
 800bf14:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	68db      	ldr	r3, [r3, #12]
 800bf1c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	691b      	ldr	r3, [r3, #16]
 800bf24:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	699b      	ldr	r3, [r3, #24]
 800bf2c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800bf2e:	6a3b      	ldr	r3, [r7, #32]
 800bf30:	f003 0301 	and.w	r3, r3, #1
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d07c      	beq.n	800c032 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800bf38:	69bb      	ldr	r3, [r7, #24]
 800bf3a:	f003 0301 	and.w	r3, r3, #1
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d023      	beq.n	800bf8a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	2201      	movs	r2, #1
 800bf48:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800bf4a:	69bb      	ldr	r3, [r7, #24]
 800bf4c:	f003 0302 	and.w	r3, r3, #2
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d003      	beq.n	800bf5c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f000 f983 	bl	800c260 <HAL_CAN_TxMailbox0CompleteCallback>
 800bf5a:	e016      	b.n	800bf8a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800bf5c:	69bb      	ldr	r3, [r7, #24]
 800bf5e:	f003 0304 	and.w	r3, r3, #4
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d004      	beq.n	800bf70 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800bf66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bf6c:	627b      	str	r3, [r7, #36]	; 0x24
 800bf6e:	e00c      	b.n	800bf8a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800bf70:	69bb      	ldr	r3, [r7, #24]
 800bf72:	f003 0308 	and.w	r3, r3, #8
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d004      	beq.n	800bf84 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800bf7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bf80:	627b      	str	r3, [r7, #36]	; 0x24
 800bf82:	e002      	b.n	800bf8a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f000 f989 	bl	800c29c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800bf8a:	69bb      	ldr	r3, [r7, #24]
 800bf8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d024      	beq.n	800bfde <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bf9c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800bf9e:	69bb      	ldr	r3, [r7, #24]
 800bfa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d003      	beq.n	800bfb0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f000 f963 	bl	800c274 <HAL_CAN_TxMailbox1CompleteCallback>
 800bfae:	e016      	b.n	800bfde <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800bfb0:	69bb      	ldr	r3, [r7, #24]
 800bfb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d004      	beq.n	800bfc4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800bfba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfbc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bfc0:	627b      	str	r3, [r7, #36]	; 0x24
 800bfc2:	e00c      	b.n	800bfde <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800bfc4:	69bb      	ldr	r3, [r7, #24]
 800bfc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d004      	beq.n	800bfd8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800bfce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bfd4:	627b      	str	r3, [r7, #36]	; 0x24
 800bfd6:	e002      	b.n	800bfde <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f000 f969 	bl	800c2b0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800bfde:	69bb      	ldr	r3, [r7, #24]
 800bfe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d024      	beq.n	800c032 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bff0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800bff2:	69bb      	ldr	r3, [r7, #24]
 800bff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d003      	beq.n	800c004 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f000 f943 	bl	800c288 <HAL_CAN_TxMailbox2CompleteCallback>
 800c002:	e016      	b.n	800c032 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800c004:	69bb      	ldr	r3, [r7, #24]
 800c006:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d004      	beq.n	800c018 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800c00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c010:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c014:	627b      	str	r3, [r7, #36]	; 0x24
 800c016:	e00c      	b.n	800c032 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800c018:	69bb      	ldr	r3, [r7, #24]
 800c01a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d004      	beq.n	800c02c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800c022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c028:	627b      	str	r3, [r7, #36]	; 0x24
 800c02a:	e002      	b.n	800c032 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f000 f949 	bl	800c2c4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800c032:	6a3b      	ldr	r3, [r7, #32]
 800c034:	f003 0308 	and.w	r3, r3, #8
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d00c      	beq.n	800c056 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	f003 0310 	and.w	r3, r3, #16
 800c042:	2b00      	cmp	r3, #0
 800c044:	d007      	beq.n	800c056 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800c046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c048:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c04c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	2210      	movs	r2, #16
 800c054:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800c056:	6a3b      	ldr	r3, [r7, #32]
 800c058:	f003 0304 	and.w	r3, r3, #4
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d00b      	beq.n	800c078 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	f003 0308 	and.w	r3, r3, #8
 800c066:	2b00      	cmp	r3, #0
 800c068:	d006      	beq.n	800c078 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	2208      	movs	r2, #8
 800c070:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 f930 	bl	800c2d8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800c078:	6a3b      	ldr	r3, [r7, #32]
 800c07a:	f003 0302 	and.w	r3, r3, #2
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d009      	beq.n	800c096 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	68db      	ldr	r3, [r3, #12]
 800c088:	f003 0303 	and.w	r3, r3, #3
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d002      	beq.n	800c096 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f7f5 fb87 	bl	80017a4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800c096:	6a3b      	ldr	r3, [r7, #32]
 800c098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d00c      	beq.n	800c0ba <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	f003 0310 	and.w	r3, r3, #16
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d007      	beq.n	800c0ba <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800c0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c0b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	2210      	movs	r2, #16
 800c0b8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800c0ba:	6a3b      	ldr	r3, [r7, #32]
 800c0bc:	f003 0320 	and.w	r3, r3, #32
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d00b      	beq.n	800c0dc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	f003 0308 	and.w	r3, r3, #8
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d006      	beq.n	800c0dc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	2208      	movs	r2, #8
 800c0d4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 f912 	bl	800c300 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800c0dc:	6a3b      	ldr	r3, [r7, #32]
 800c0de:	f003 0310 	and.w	r3, r3, #16
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d009      	beq.n	800c0fa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	691b      	ldr	r3, [r3, #16]
 800c0ec:	f003 0303 	and.w	r3, r3, #3
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d002      	beq.n	800c0fa <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f000 f8f9 	bl	800c2ec <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800c0fa:	6a3b      	ldr	r3, [r7, #32]
 800c0fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c100:	2b00      	cmp	r3, #0
 800c102:	d00b      	beq.n	800c11c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800c104:	69fb      	ldr	r3, [r7, #28]
 800c106:	f003 0310 	and.w	r3, r3, #16
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d006      	beq.n	800c11c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	2210      	movs	r2, #16
 800c114:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f000 f8fc 	bl	800c314 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800c11c:	6a3b      	ldr	r3, [r7, #32]
 800c11e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c122:	2b00      	cmp	r3, #0
 800c124:	d00b      	beq.n	800c13e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800c126:	69fb      	ldr	r3, [r7, #28]
 800c128:	f003 0308 	and.w	r3, r3, #8
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d006      	beq.n	800c13e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	2208      	movs	r2, #8
 800c136:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f000 f8f5 	bl	800c328 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800c13e:	6a3b      	ldr	r3, [r7, #32]
 800c140:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c144:	2b00      	cmp	r3, #0
 800c146:	d07b      	beq.n	800c240 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800c148:	69fb      	ldr	r3, [r7, #28]
 800c14a:	f003 0304 	and.w	r3, r3, #4
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d072      	beq.n	800c238 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800c152:	6a3b      	ldr	r3, [r7, #32]
 800c154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d008      	beq.n	800c16e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800c162:	2b00      	cmp	r3, #0
 800c164:	d003      	beq.n	800c16e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800c166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c168:	f043 0301 	orr.w	r3, r3, #1
 800c16c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800c16e:	6a3b      	ldr	r3, [r7, #32]
 800c170:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c174:	2b00      	cmp	r3, #0
 800c176:	d008      	beq.n	800c18a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d003      	beq.n	800c18a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800c182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c184:	f043 0302 	orr.w	r3, r3, #2
 800c188:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800c18a:	6a3b      	ldr	r3, [r7, #32]
 800c18c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c190:	2b00      	cmp	r3, #0
 800c192:	d008      	beq.n	800c1a6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d003      	beq.n	800c1a6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800c19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a0:	f043 0304 	orr.w	r3, r3, #4
 800c1a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800c1a6:	6a3b      	ldr	r3, [r7, #32]
 800c1a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d043      	beq.n	800c238 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d03e      	beq.n	800c238 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c1c0:	2b60      	cmp	r3, #96	; 0x60
 800c1c2:	d02b      	beq.n	800c21c <HAL_CAN_IRQHandler+0x32a>
 800c1c4:	2b60      	cmp	r3, #96	; 0x60
 800c1c6:	d82e      	bhi.n	800c226 <HAL_CAN_IRQHandler+0x334>
 800c1c8:	2b50      	cmp	r3, #80	; 0x50
 800c1ca:	d022      	beq.n	800c212 <HAL_CAN_IRQHandler+0x320>
 800c1cc:	2b50      	cmp	r3, #80	; 0x50
 800c1ce:	d82a      	bhi.n	800c226 <HAL_CAN_IRQHandler+0x334>
 800c1d0:	2b40      	cmp	r3, #64	; 0x40
 800c1d2:	d019      	beq.n	800c208 <HAL_CAN_IRQHandler+0x316>
 800c1d4:	2b40      	cmp	r3, #64	; 0x40
 800c1d6:	d826      	bhi.n	800c226 <HAL_CAN_IRQHandler+0x334>
 800c1d8:	2b30      	cmp	r3, #48	; 0x30
 800c1da:	d010      	beq.n	800c1fe <HAL_CAN_IRQHandler+0x30c>
 800c1dc:	2b30      	cmp	r3, #48	; 0x30
 800c1de:	d822      	bhi.n	800c226 <HAL_CAN_IRQHandler+0x334>
 800c1e0:	2b10      	cmp	r3, #16
 800c1e2:	d002      	beq.n	800c1ea <HAL_CAN_IRQHandler+0x2f8>
 800c1e4:	2b20      	cmp	r3, #32
 800c1e6:	d005      	beq.n	800c1f4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800c1e8:	e01d      	b.n	800c226 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800c1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ec:	f043 0308 	orr.w	r3, r3, #8
 800c1f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800c1f2:	e019      	b.n	800c228 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800c1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f6:	f043 0310 	orr.w	r3, r3, #16
 800c1fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800c1fc:	e014      	b.n	800c228 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800c1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c200:	f043 0320 	orr.w	r3, r3, #32
 800c204:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800c206:	e00f      	b.n	800c228 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800c208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c20a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c20e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800c210:	e00a      	b.n	800c228 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800c212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c218:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800c21a:	e005      	b.n	800c228 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800c21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c222:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800c224:	e000      	b.n	800c228 <HAL_CAN_IRQHandler+0x336>
            break;
 800c226:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	699a      	ldr	r2, [r3, #24]
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800c236:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	2204      	movs	r2, #4
 800c23e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800c240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c242:	2b00      	cmp	r3, #0
 800c244:	d008      	beq.n	800c258 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24c:	431a      	orrs	r2, r3
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f000 f872 	bl	800c33c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800c258:	bf00      	nop
 800c25a:	3728      	adds	r7, #40	; 0x28
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}

0800c260 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800c260:	b480      	push	{r7}
 800c262:	b083      	sub	sp, #12
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800c268:	bf00      	nop
 800c26a:	370c      	adds	r7, #12
 800c26c:	46bd      	mov	sp, r7
 800c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c272:	4770      	bx	lr

0800c274 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800c274:	b480      	push	{r7}
 800c276:	b083      	sub	sp, #12
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800c27c:	bf00      	nop
 800c27e:	370c      	adds	r7, #12
 800c280:	46bd      	mov	sp, r7
 800c282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c286:	4770      	bx	lr

0800c288 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800c288:	b480      	push	{r7}
 800c28a:	b083      	sub	sp, #12
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800c290:	bf00      	nop
 800c292:	370c      	adds	r7, #12
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr

0800c29c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800c29c:	b480      	push	{r7}
 800c29e:	b083      	sub	sp, #12
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800c2a4:	bf00      	nop
 800c2a6:	370c      	adds	r7, #12
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr

0800c2b0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b083      	sub	sp, #12
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800c2b8:	bf00      	nop
 800c2ba:	370c      	adds	r7, #12
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c2:	4770      	bx	lr

0800c2c4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b083      	sub	sp, #12
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800c2cc:	bf00      	nop
 800c2ce:	370c      	adds	r7, #12
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d6:	4770      	bx	lr

0800c2d8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b083      	sub	sp, #12
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800c2e0:	bf00      	nop
 800c2e2:	370c      	adds	r7, #12
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ea:	4770      	bx	lr

0800c2ec <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b083      	sub	sp, #12
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800c2f4:	bf00      	nop
 800c2f6:	370c      	adds	r7, #12
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr

0800c300 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800c300:	b480      	push	{r7}
 800c302:	b083      	sub	sp, #12
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800c308:	bf00      	nop
 800c30a:	370c      	adds	r7, #12
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr

0800c314 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800c314:	b480      	push	{r7}
 800c316:	b083      	sub	sp, #12
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800c31c:	bf00      	nop
 800c31e:	370c      	adds	r7, #12
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr

0800c328 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800c328:	b480      	push	{r7}
 800c32a:	b083      	sub	sp, #12
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800c330:	bf00      	nop
 800c332:	370c      	adds	r7, #12
 800c334:	46bd      	mov	sp, r7
 800c336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33a:	4770      	bx	lr

0800c33c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b083      	sub	sp, #12
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800c344:	bf00      	nop
 800c346:	370c      	adds	r7, #12
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr

0800c350 <__NVIC_SetPriorityGrouping>:
{
 800c350:	b480      	push	{r7}
 800c352:	b085      	sub	sp, #20
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f003 0307 	and.w	r3, r3, #7
 800c35e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c360:	4b0b      	ldr	r3, [pc, #44]	; (800c390 <__NVIC_SetPriorityGrouping+0x40>)
 800c362:	68db      	ldr	r3, [r3, #12]
 800c364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c366:	68ba      	ldr	r2, [r7, #8]
 800c368:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c36c:	4013      	ands	r3, r2
 800c36e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800c378:	4b06      	ldr	r3, [pc, #24]	; (800c394 <__NVIC_SetPriorityGrouping+0x44>)
 800c37a:	4313      	orrs	r3, r2
 800c37c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c37e:	4a04      	ldr	r2, [pc, #16]	; (800c390 <__NVIC_SetPriorityGrouping+0x40>)
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	60d3      	str	r3, [r2, #12]
}
 800c384:	bf00      	nop
 800c386:	3714      	adds	r7, #20
 800c388:	46bd      	mov	sp, r7
 800c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38e:	4770      	bx	lr
 800c390:	e000ed00 	.word	0xe000ed00
 800c394:	05fa0000 	.word	0x05fa0000

0800c398 <__NVIC_GetPriorityGrouping>:
{
 800c398:	b480      	push	{r7}
 800c39a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c39c:	4b04      	ldr	r3, [pc, #16]	; (800c3b0 <__NVIC_GetPriorityGrouping+0x18>)
 800c39e:	68db      	ldr	r3, [r3, #12]
 800c3a0:	0a1b      	lsrs	r3, r3, #8
 800c3a2:	f003 0307 	and.w	r3, r3, #7
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr
 800c3b0:	e000ed00 	.word	0xe000ed00

0800c3b4 <__NVIC_EnableIRQ>:
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b083      	sub	sp, #12
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c3be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	db0b      	blt.n	800c3de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c3c6:	79fb      	ldrb	r3, [r7, #7]
 800c3c8:	f003 021f 	and.w	r2, r3, #31
 800c3cc:	4907      	ldr	r1, [pc, #28]	; (800c3ec <__NVIC_EnableIRQ+0x38>)
 800c3ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3d2:	095b      	lsrs	r3, r3, #5
 800c3d4:	2001      	movs	r0, #1
 800c3d6:	fa00 f202 	lsl.w	r2, r0, r2
 800c3da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c3de:	bf00      	nop
 800c3e0:	370c      	adds	r7, #12
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e8:	4770      	bx	lr
 800c3ea:	bf00      	nop
 800c3ec:	e000e100 	.word	0xe000e100

0800c3f0 <__NVIC_DisableIRQ>:
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b083      	sub	sp, #12
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c3fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	db12      	blt.n	800c428 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c402:	79fb      	ldrb	r3, [r7, #7]
 800c404:	f003 021f 	and.w	r2, r3, #31
 800c408:	490a      	ldr	r1, [pc, #40]	; (800c434 <__NVIC_DisableIRQ+0x44>)
 800c40a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c40e:	095b      	lsrs	r3, r3, #5
 800c410:	2001      	movs	r0, #1
 800c412:	fa00 f202 	lsl.w	r2, r0, r2
 800c416:	3320      	adds	r3, #32
 800c418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800c41c:	f3bf 8f4f 	dsb	sy
}
 800c420:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c422:	f3bf 8f6f 	isb	sy
}
 800c426:	bf00      	nop
}
 800c428:	bf00      	nop
 800c42a:	370c      	adds	r7, #12
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr
 800c434:	e000e100 	.word	0xe000e100

0800c438 <__NVIC_SetPriority>:
{
 800c438:	b480      	push	{r7}
 800c43a:	b083      	sub	sp, #12
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	4603      	mov	r3, r0
 800c440:	6039      	str	r1, [r7, #0]
 800c442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	db0a      	blt.n	800c462 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	b2da      	uxtb	r2, r3
 800c450:	490c      	ldr	r1, [pc, #48]	; (800c484 <__NVIC_SetPriority+0x4c>)
 800c452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c456:	0112      	lsls	r2, r2, #4
 800c458:	b2d2      	uxtb	r2, r2
 800c45a:	440b      	add	r3, r1
 800c45c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c460:	e00a      	b.n	800c478 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	b2da      	uxtb	r2, r3
 800c466:	4908      	ldr	r1, [pc, #32]	; (800c488 <__NVIC_SetPriority+0x50>)
 800c468:	79fb      	ldrb	r3, [r7, #7]
 800c46a:	f003 030f 	and.w	r3, r3, #15
 800c46e:	3b04      	subs	r3, #4
 800c470:	0112      	lsls	r2, r2, #4
 800c472:	b2d2      	uxtb	r2, r2
 800c474:	440b      	add	r3, r1
 800c476:	761a      	strb	r2, [r3, #24]
}
 800c478:	bf00      	nop
 800c47a:	370c      	adds	r7, #12
 800c47c:	46bd      	mov	sp, r7
 800c47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c482:	4770      	bx	lr
 800c484:	e000e100 	.word	0xe000e100
 800c488:	e000ed00 	.word	0xe000ed00

0800c48c <NVIC_EncodePriority>:
{
 800c48c:	b480      	push	{r7}
 800c48e:	b089      	sub	sp, #36	; 0x24
 800c490:	af00      	add	r7, sp, #0
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	f003 0307 	and.w	r3, r3, #7
 800c49e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c4a0:	69fb      	ldr	r3, [r7, #28]
 800c4a2:	f1c3 0307 	rsb	r3, r3, #7
 800c4a6:	2b04      	cmp	r3, #4
 800c4a8:	bf28      	it	cs
 800c4aa:	2304      	movcs	r3, #4
 800c4ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c4ae:	69fb      	ldr	r3, [r7, #28]
 800c4b0:	3304      	adds	r3, #4
 800c4b2:	2b06      	cmp	r3, #6
 800c4b4:	d902      	bls.n	800c4bc <NVIC_EncodePriority+0x30>
 800c4b6:	69fb      	ldr	r3, [r7, #28]
 800c4b8:	3b03      	subs	r3, #3
 800c4ba:	e000      	b.n	800c4be <NVIC_EncodePriority+0x32>
 800c4bc:	2300      	movs	r3, #0
 800c4be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c4c0:	f04f 32ff 	mov.w	r2, #4294967295
 800c4c4:	69bb      	ldr	r3, [r7, #24]
 800c4c6:	fa02 f303 	lsl.w	r3, r2, r3
 800c4ca:	43da      	mvns	r2, r3
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	401a      	ands	r2, r3
 800c4d0:	697b      	ldr	r3, [r7, #20]
 800c4d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c4d4:	f04f 31ff 	mov.w	r1, #4294967295
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	fa01 f303 	lsl.w	r3, r1, r3
 800c4de:	43d9      	mvns	r1, r3
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c4e4:	4313      	orrs	r3, r2
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3724      	adds	r7, #36	; 0x24
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f0:	4770      	bx	lr

0800c4f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c4f2:	b580      	push	{r7, lr}
 800c4f4:	b082      	sub	sp, #8
 800c4f6:	af00      	add	r7, sp, #0
 800c4f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f7ff ff28 	bl	800c350 <__NVIC_SetPriorityGrouping>
}
 800c500:	bf00      	nop
 800c502:	3708      	adds	r7, #8
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}

0800c508 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c508:	b580      	push	{r7, lr}
 800c50a:	b086      	sub	sp, #24
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	4603      	mov	r3, r0
 800c510:	60b9      	str	r1, [r7, #8]
 800c512:	607a      	str	r2, [r7, #4]
 800c514:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800c516:	2300      	movs	r3, #0
 800c518:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c51a:	f7ff ff3d 	bl	800c398 <__NVIC_GetPriorityGrouping>
 800c51e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c520:	687a      	ldr	r2, [r7, #4]
 800c522:	68b9      	ldr	r1, [r7, #8]
 800c524:	6978      	ldr	r0, [r7, #20]
 800c526:	f7ff ffb1 	bl	800c48c <NVIC_EncodePriority>
 800c52a:	4602      	mov	r2, r0
 800c52c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c530:	4611      	mov	r1, r2
 800c532:	4618      	mov	r0, r3
 800c534:	f7ff ff80 	bl	800c438 <__NVIC_SetPriority>
}
 800c538:	bf00      	nop
 800c53a:	3718      	adds	r7, #24
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}

0800c540 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b082      	sub	sp, #8
 800c544:	af00      	add	r7, sp, #0
 800c546:	4603      	mov	r3, r0
 800c548:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c54a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c54e:	4618      	mov	r0, r3
 800c550:	f7ff ff30 	bl	800c3b4 <__NVIC_EnableIRQ>
}
 800c554:	bf00      	nop
 800c556:	3708      	adds	r7, #8
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}

0800c55c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b082      	sub	sp, #8
 800c560:	af00      	add	r7, sp, #0
 800c562:	4603      	mov	r3, r0
 800c564:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800c566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c56a:	4618      	mov	r0, r3
 800c56c:	f7ff ff40 	bl	800c3f0 <__NVIC_DisableIRQ>
}
 800c570:	bf00      	nop
 800c572:	3708      	adds	r7, #8
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}

0800c578 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b082      	sub	sp, #8
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d101      	bne.n	800c58a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800c586:	2301      	movs	r3, #1
 800c588:	e054      	b.n	800c634 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	7f5b      	ldrb	r3, [r3, #29]
 800c58e:	b2db      	uxtb	r3, r3
 800c590:	2b00      	cmp	r3, #0
 800c592:	d105      	bne.n	800c5a0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2200      	movs	r2, #0
 800c598:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f7f5 fb14 	bl	8001bc8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2202      	movs	r2, #2
 800c5a4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	791b      	ldrb	r3, [r3, #4]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d10c      	bne.n	800c5c8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	4a22      	ldr	r2, [pc, #136]	; (800c63c <HAL_CRC_Init+0xc4>)
 800c5b4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	689a      	ldr	r2, [r3, #8]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f022 0218 	bic.w	r2, r2, #24
 800c5c4:	609a      	str	r2, [r3, #8]
 800c5c6:	e00c      	b.n	800c5e2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	6899      	ldr	r1, [r3, #8]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	68db      	ldr	r3, [r3, #12]
 800c5d0:	461a      	mov	r2, r3
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f000 f834 	bl	800c640 <HAL_CRCEx_Polynomial_Set>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d001      	beq.n	800c5e2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800c5de:	2301      	movs	r3, #1
 800c5e0:	e028      	b.n	800c634 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	795b      	ldrb	r3, [r3, #5]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d105      	bne.n	800c5f6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f04f 32ff 	mov.w	r2, #4294967295
 800c5f2:	611a      	str	r2, [r3, #16]
 800c5f4:	e004      	b.n	800c600 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	6912      	ldr	r2, [r2, #16]
 800c5fe:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	689b      	ldr	r3, [r3, #8]
 800c606:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	695a      	ldr	r2, [r3, #20]
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	430a      	orrs	r2, r1
 800c614:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	689b      	ldr	r3, [r3, #8]
 800c61c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	699a      	ldr	r2, [r3, #24]
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	430a      	orrs	r2, r1
 800c62a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2201      	movs	r2, #1
 800c630:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800c632:	2300      	movs	r3, #0
}
 800c634:	4618      	mov	r0, r3
 800c636:	3708      	adds	r7, #8
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}
 800c63c:	04c11db7 	.word	0x04c11db7

0800c640 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800c640:	b480      	push	{r7}
 800c642:	b087      	sub	sp, #28
 800c644:	af00      	add	r7, sp, #0
 800c646:	60f8      	str	r0, [r7, #12]
 800c648:	60b9      	str	r1, [r7, #8]
 800c64a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c64c:	2300      	movs	r3, #0
 800c64e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800c650:	231f      	movs	r3, #31
 800c652:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800c654:	bf00      	nop
 800c656:	693b      	ldr	r3, [r7, #16]
 800c658:	1e5a      	subs	r2, r3, #1
 800c65a:	613a      	str	r2, [r7, #16]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d009      	beq.n	800c674 <HAL_CRCEx_Polynomial_Set+0x34>
 800c660:	693b      	ldr	r3, [r7, #16]
 800c662:	f003 031f 	and.w	r3, r3, #31
 800c666:	68ba      	ldr	r2, [r7, #8]
 800c668:	fa22 f303 	lsr.w	r3, r2, r3
 800c66c:	f003 0301 	and.w	r3, r3, #1
 800c670:	2b00      	cmp	r3, #0
 800c672:	d0f0      	beq.n	800c656 <HAL_CRCEx_Polynomial_Set+0x16>
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2b18      	cmp	r3, #24
 800c678:	d846      	bhi.n	800c708 <HAL_CRCEx_Polynomial_Set+0xc8>
 800c67a:	a201      	add	r2, pc, #4	; (adr r2, 800c680 <HAL_CRCEx_Polynomial_Set+0x40>)
 800c67c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c680:	0800c70f 	.word	0x0800c70f
 800c684:	0800c709 	.word	0x0800c709
 800c688:	0800c709 	.word	0x0800c709
 800c68c:	0800c709 	.word	0x0800c709
 800c690:	0800c709 	.word	0x0800c709
 800c694:	0800c709 	.word	0x0800c709
 800c698:	0800c709 	.word	0x0800c709
 800c69c:	0800c709 	.word	0x0800c709
 800c6a0:	0800c6fd 	.word	0x0800c6fd
 800c6a4:	0800c709 	.word	0x0800c709
 800c6a8:	0800c709 	.word	0x0800c709
 800c6ac:	0800c709 	.word	0x0800c709
 800c6b0:	0800c709 	.word	0x0800c709
 800c6b4:	0800c709 	.word	0x0800c709
 800c6b8:	0800c709 	.word	0x0800c709
 800c6bc:	0800c709 	.word	0x0800c709
 800c6c0:	0800c6f1 	.word	0x0800c6f1
 800c6c4:	0800c709 	.word	0x0800c709
 800c6c8:	0800c709 	.word	0x0800c709
 800c6cc:	0800c709 	.word	0x0800c709
 800c6d0:	0800c709 	.word	0x0800c709
 800c6d4:	0800c709 	.word	0x0800c709
 800c6d8:	0800c709 	.word	0x0800c709
 800c6dc:	0800c709 	.word	0x0800c709
 800c6e0:	0800c6e5 	.word	0x0800c6e5
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	2b06      	cmp	r3, #6
 800c6e8:	d913      	bls.n	800c712 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800c6ea:	2301      	movs	r3, #1
 800c6ec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c6ee:	e010      	b.n	800c712 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	2b07      	cmp	r3, #7
 800c6f4:	d90f      	bls.n	800c716 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c6fa:	e00c      	b.n	800c716 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	2b0f      	cmp	r3, #15
 800c700:	d90b      	bls.n	800c71a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800c702:	2301      	movs	r3, #1
 800c704:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c706:	e008      	b.n	800c71a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800c708:	2301      	movs	r3, #1
 800c70a:	75fb      	strb	r3, [r7, #23]
      break;
 800c70c:	e006      	b.n	800c71c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c70e:	bf00      	nop
 800c710:	e004      	b.n	800c71c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c712:	bf00      	nop
 800c714:	e002      	b.n	800c71c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c716:	bf00      	nop
 800c718:	e000      	b.n	800c71c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c71a:	bf00      	nop
  }
  if (status == HAL_OK)
 800c71c:	7dfb      	ldrb	r3, [r7, #23]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d10d      	bne.n	800c73e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	68ba      	ldr	r2, [r7, #8]
 800c728:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	689b      	ldr	r3, [r3, #8]
 800c730:	f023 0118 	bic.w	r1, r3, #24
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	687a      	ldr	r2, [r7, #4]
 800c73a:	430a      	orrs	r2, r1
 800c73c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800c73e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c740:	4618      	mov	r0, r3
 800c742:	371c      	adds	r7, #28
 800c744:	46bd      	mov	sp, r7
 800c746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74a:	4770      	bx	lr

0800c74c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b086      	sub	sp, #24
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800c754:	2300      	movs	r3, #0
 800c756:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800c758:	f7fe fb6e 	bl	800ae38 <HAL_GetTick>
 800c75c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d101      	bne.n	800c768 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800c764:	2301      	movs	r3, #1
 800c766:	e099      	b.n	800c89c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2200      	movs	r2, #0
 800c76c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2202      	movs	r2, #2
 800c774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	681a      	ldr	r2, [r3, #0]
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	f022 0201 	bic.w	r2, r2, #1
 800c786:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c788:	e00f      	b.n	800c7aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c78a:	f7fe fb55 	bl	800ae38 <HAL_GetTick>
 800c78e:	4602      	mov	r2, r0
 800c790:	693b      	ldr	r3, [r7, #16]
 800c792:	1ad3      	subs	r3, r2, r3
 800c794:	2b05      	cmp	r3, #5
 800c796:	d908      	bls.n	800c7aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2220      	movs	r2, #32
 800c79c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2203      	movs	r2, #3
 800c7a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800c7a6:	2303      	movs	r3, #3
 800c7a8:	e078      	b.n	800c89c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	f003 0301 	and.w	r3, r3, #1
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d1e8      	bne.n	800c78a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800c7c0:	697a      	ldr	r2, [r7, #20]
 800c7c2:	4b38      	ldr	r3, [pc, #224]	; (800c8a4 <HAL_DMA_Init+0x158>)
 800c7c4:	4013      	ands	r3, r2
 800c7c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	685a      	ldr	r2, [r3, #4]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	689b      	ldr	r3, [r3, #8]
 800c7d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c7d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	691b      	ldr	r3, [r3, #16]
 800c7dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c7e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	699b      	ldr	r3, [r3, #24]
 800c7e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c7ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6a1b      	ldr	r3, [r3, #32]
 800c7f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c7f6:	697a      	ldr	r2, [r7, #20]
 800c7f8:	4313      	orrs	r3, r2
 800c7fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c800:	2b04      	cmp	r3, #4
 800c802:	d107      	bne.n	800c814 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c80c:	4313      	orrs	r3, r2
 800c80e:	697a      	ldr	r2, [r7, #20]
 800c810:	4313      	orrs	r3, r2
 800c812:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	697a      	ldr	r2, [r7, #20]
 800c81a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	695b      	ldr	r3, [r3, #20]
 800c822:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	f023 0307 	bic.w	r3, r3, #7
 800c82a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c830:	697a      	ldr	r2, [r7, #20]
 800c832:	4313      	orrs	r3, r2
 800c834:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c83a:	2b04      	cmp	r3, #4
 800c83c:	d117      	bne.n	800c86e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c842:	697a      	ldr	r2, [r7, #20]
 800c844:	4313      	orrs	r3, r2
 800c846:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d00e      	beq.n	800c86e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f000 fa99 	bl	800cd88 <DMA_CheckFifoParam>
 800c856:	4603      	mov	r3, r0
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d008      	beq.n	800c86e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2240      	movs	r2, #64	; 0x40
 800c860:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2201      	movs	r2, #1
 800c866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800c86a:	2301      	movs	r3, #1
 800c86c:	e016      	b.n	800c89c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	697a      	ldr	r2, [r7, #20]
 800c874:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f000 fa50 	bl	800cd1c <DMA_CalcBaseAndBitshift>
 800c87c:	4603      	mov	r3, r0
 800c87e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c884:	223f      	movs	r2, #63	; 0x3f
 800c886:	409a      	lsls	r2, r3
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2200      	movs	r2, #0
 800c890:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2201      	movs	r2, #1
 800c896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800c89a:	2300      	movs	r3, #0
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	3718      	adds	r7, #24
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}
 800c8a4:	e010803f 	.word	0xe010803f

0800c8a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b086      	sub	sp, #24
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	60f8      	str	r0, [r7, #12]
 800c8b0:	60b9      	str	r1, [r7, #8]
 800c8b2:	607a      	str	r2, [r7, #4]
 800c8b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c8c6:	2b01      	cmp	r3, #1
 800c8c8:	d101      	bne.n	800c8ce <HAL_DMA_Start_IT+0x26>
 800c8ca:	2302      	movs	r3, #2
 800c8cc:	e048      	b.n	800c960 <HAL_DMA_Start_IT+0xb8>
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	2201      	movs	r2, #1
 800c8d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c8dc:	b2db      	uxtb	r3, r3
 800c8de:	2b01      	cmp	r3, #1
 800c8e0:	d137      	bne.n	800c952 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	2202      	movs	r2, #2
 800c8e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	687a      	ldr	r2, [r7, #4]
 800c8f4:	68b9      	ldr	r1, [r7, #8]
 800c8f6:	68f8      	ldr	r0, [r7, #12]
 800c8f8:	f000 f9e2 	bl	800ccc0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c900:	223f      	movs	r2, #63	; 0x3f
 800c902:	409a      	lsls	r2, r3
 800c904:	693b      	ldr	r3, [r7, #16]
 800c906:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	681a      	ldr	r2, [r3, #0]
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	f042 0216 	orr.w	r2, r2, #22
 800c916:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	695a      	ldr	r2, [r3, #20]
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c926:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d007      	beq.n	800c940 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	681a      	ldr	r2, [r3, #0]
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f042 0208 	orr.w	r2, r2, #8
 800c93e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	681a      	ldr	r2, [r3, #0]
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	f042 0201 	orr.w	r2, r2, #1
 800c94e:	601a      	str	r2, [r3, #0]
 800c950:	e005      	b.n	800c95e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	2200      	movs	r2, #0
 800c956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800c95a:	2302      	movs	r3, #2
 800c95c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800c95e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c960:	4618      	mov	r0, r3
 800c962:	3718      	adds	r7, #24
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}

0800c968 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c968:	b480      	push	{r7}
 800c96a:	b083      	sub	sp, #12
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c976:	b2db      	uxtb	r3, r3
 800c978:	2b02      	cmp	r3, #2
 800c97a:	d004      	beq.n	800c986 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2280      	movs	r2, #128	; 0x80
 800c980:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800c982:	2301      	movs	r3, #1
 800c984:	e00c      	b.n	800c9a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2205      	movs	r2, #5
 800c98a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	681a      	ldr	r2, [r3, #0]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	f022 0201 	bic.w	r2, r2, #1
 800c99c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800c99e:	2300      	movs	r3, #0
}
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	370c      	adds	r7, #12
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9aa:	4770      	bx	lr

0800c9ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b086      	sub	sp, #24
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800c9b8:	4b92      	ldr	r3, [pc, #584]	; (800cc04 <HAL_DMA_IRQHandler+0x258>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	4a92      	ldr	r2, [pc, #584]	; (800cc08 <HAL_DMA_IRQHandler+0x25c>)
 800c9be:	fba2 2303 	umull	r2, r3, r2, r3
 800c9c2:	0a9b      	lsrs	r3, r3, #10
 800c9c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c9d6:	2208      	movs	r2, #8
 800c9d8:	409a      	lsls	r2, r3
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	4013      	ands	r3, r2
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d01a      	beq.n	800ca18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f003 0304 	and.w	r3, r3, #4
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d013      	beq.n	800ca18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	681a      	ldr	r2, [r3, #0]
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f022 0204 	bic.w	r2, r2, #4
 800c9fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca04:	2208      	movs	r2, #8
 800ca06:	409a      	lsls	r2, r3
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca10:	f043 0201 	orr.w	r2, r3, #1
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	409a      	lsls	r2, r3
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	4013      	ands	r3, r2
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d012      	beq.n	800ca4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	695b      	ldr	r3, [r3, #20]
 800ca2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d00b      	beq.n	800ca4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca3a:	2201      	movs	r2, #1
 800ca3c:	409a      	lsls	r2, r3
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca46:	f043 0202 	orr.w	r2, r3, #2
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca52:	2204      	movs	r2, #4
 800ca54:	409a      	lsls	r2, r3
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	4013      	ands	r3, r2
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d012      	beq.n	800ca84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	f003 0302 	and.w	r3, r3, #2
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d00b      	beq.n	800ca84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca70:	2204      	movs	r2, #4
 800ca72:	409a      	lsls	r2, r3
 800ca74:	693b      	ldr	r3, [r7, #16]
 800ca76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca7c:	f043 0204 	orr.w	r2, r3, #4
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca88:	2210      	movs	r2, #16
 800ca8a:	409a      	lsls	r2, r3
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	4013      	ands	r3, r2
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d043      	beq.n	800cb1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f003 0308 	and.w	r3, r3, #8
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d03c      	beq.n	800cb1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800caa6:	2210      	movs	r2, #16
 800caa8:	409a      	lsls	r2, r3
 800caaa:	693b      	ldr	r3, [r7, #16]
 800caac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d018      	beq.n	800caee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d108      	bne.n	800cadc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d024      	beq.n	800cb1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	4798      	blx	r3
 800cada:	e01f      	b.n	800cb1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d01b      	beq.n	800cb1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	4798      	blx	r3
 800caec:	e016      	b.n	800cb1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d107      	bne.n	800cb0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	681a      	ldr	r2, [r3, #0]
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f022 0208 	bic.w	r2, r2, #8
 800cb0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d003      	beq.n	800cb1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb20:	2220      	movs	r2, #32
 800cb22:	409a      	lsls	r2, r3
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	4013      	ands	r3, r2
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	f000 808e 	beq.w	800cc4a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f003 0310 	and.w	r3, r3, #16
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	f000 8086 	beq.w	800cc4a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb42:	2220      	movs	r2, #32
 800cb44:	409a      	lsls	r2, r3
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800cb50:	b2db      	uxtb	r3, r3
 800cb52:	2b05      	cmp	r3, #5
 800cb54:	d136      	bne.n	800cbc4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	681a      	ldr	r2, [r3, #0]
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f022 0216 	bic.w	r2, r2, #22
 800cb64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	695a      	ldr	r2, [r3, #20]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cb74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d103      	bne.n	800cb86 <HAL_DMA_IRQHandler+0x1da>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d007      	beq.n	800cb96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	681a      	ldr	r2, [r3, #0]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f022 0208 	bic.w	r2, r2, #8
 800cb94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb9a:	223f      	movs	r2, #63	; 0x3f
 800cb9c:	409a      	lsls	r2, r3
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2200      	movs	r2, #0
 800cba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2201      	movs	r2, #1
 800cbae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d07d      	beq.n	800ccb6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	4798      	blx	r3
        }
        return;
 800cbc2:	e078      	b.n	800ccb6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d01c      	beq.n	800cc0c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d108      	bne.n	800cbf2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d030      	beq.n	800cc4a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	4798      	blx	r3
 800cbf0:	e02b      	b.n	800cc4a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d027      	beq.n	800cc4a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	4798      	blx	r3
 800cc02:	e022      	b.n	800cc4a <HAL_DMA_IRQHandler+0x29e>
 800cc04:	20000014 	.word	0x20000014
 800cc08:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d10f      	bne.n	800cc3a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	681a      	ldr	r2, [r3, #0]
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f022 0210 	bic.w	r2, r2, #16
 800cc28:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2201      	movs	r2, #1
 800cc36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d003      	beq.n	800cc4a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d032      	beq.n	800ccb8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc56:	f003 0301 	and.w	r3, r3, #1
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d022      	beq.n	800cca4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2205      	movs	r2, #5
 800cc62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	681a      	ldr	r2, [r3, #0]
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	f022 0201 	bic.w	r2, r2, #1
 800cc74:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800cc76:	68bb      	ldr	r3, [r7, #8]
 800cc78:	3301      	adds	r3, #1
 800cc7a:	60bb      	str	r3, [r7, #8]
 800cc7c:	697a      	ldr	r2, [r7, #20]
 800cc7e:	429a      	cmp	r2, r3
 800cc80:	d307      	bcc.n	800cc92 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f003 0301 	and.w	r3, r3, #1
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d1f2      	bne.n	800cc76 <HAL_DMA_IRQHandler+0x2ca>
 800cc90:	e000      	b.n	800cc94 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800cc92:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2200      	movs	r2, #0
 800cc98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2201      	movs	r2, #1
 800cca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d005      	beq.n	800ccb8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	4798      	blx	r3
 800ccb4:	e000      	b.n	800ccb8 <HAL_DMA_IRQHandler+0x30c>
        return;
 800ccb6:	bf00      	nop
    }
  }
}
 800ccb8:	3718      	adds	r7, #24
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}
 800ccbe:	bf00      	nop

0800ccc0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b085      	sub	sp, #20
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	60f8      	str	r0, [r7, #12]
 800ccc8:	60b9      	str	r1, [r7, #8]
 800ccca:	607a      	str	r2, [r7, #4]
 800cccc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	681a      	ldr	r2, [r3, #0]
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ccdc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	683a      	ldr	r2, [r7, #0]
 800cce4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	689b      	ldr	r3, [r3, #8]
 800ccea:	2b40      	cmp	r3, #64	; 0x40
 800ccec:	d108      	bne.n	800cd00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	687a      	ldr	r2, [r7, #4]
 800ccf4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	68ba      	ldr	r2, [r7, #8]
 800ccfc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800ccfe:	e007      	b.n	800cd10 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	68ba      	ldr	r2, [r7, #8]
 800cd06:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	687a      	ldr	r2, [r7, #4]
 800cd0e:	60da      	str	r2, [r3, #12]
}
 800cd10:	bf00      	nop
 800cd12:	3714      	adds	r7, #20
 800cd14:	46bd      	mov	sp, r7
 800cd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1a:	4770      	bx	lr

0800cd1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	b085      	sub	sp, #20
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	b2db      	uxtb	r3, r3
 800cd2a:	3b10      	subs	r3, #16
 800cd2c:	4a13      	ldr	r2, [pc, #76]	; (800cd7c <DMA_CalcBaseAndBitshift+0x60>)
 800cd2e:	fba2 2303 	umull	r2, r3, r2, r3
 800cd32:	091b      	lsrs	r3, r3, #4
 800cd34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800cd36:	4a12      	ldr	r2, [pc, #72]	; (800cd80 <DMA_CalcBaseAndBitshift+0x64>)
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	4413      	add	r3, r2
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	461a      	mov	r2, r3
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	2b03      	cmp	r3, #3
 800cd48:	d908      	bls.n	800cd5c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	461a      	mov	r2, r3
 800cd50:	4b0c      	ldr	r3, [pc, #48]	; (800cd84 <DMA_CalcBaseAndBitshift+0x68>)
 800cd52:	4013      	ands	r3, r2
 800cd54:	1d1a      	adds	r2, r3, #4
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	659a      	str	r2, [r3, #88]	; 0x58
 800cd5a:	e006      	b.n	800cd6a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	461a      	mov	r2, r3
 800cd62:	4b08      	ldr	r3, [pc, #32]	; (800cd84 <DMA_CalcBaseAndBitshift+0x68>)
 800cd64:	4013      	ands	r3, r2
 800cd66:	687a      	ldr	r2, [r7, #4]
 800cd68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	3714      	adds	r7, #20
 800cd72:	46bd      	mov	sp, r7
 800cd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd78:	4770      	bx	lr
 800cd7a:	bf00      	nop
 800cd7c:	aaaaaaab 	.word	0xaaaaaaab
 800cd80:	0802c88c 	.word	0x0802c88c
 800cd84:	fffffc00 	.word	0xfffffc00

0800cd88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800cd88:	b480      	push	{r7}
 800cd8a:	b085      	sub	sp, #20
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cd90:	2300      	movs	r3, #0
 800cd92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	699b      	ldr	r3, [r3, #24]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d11f      	bne.n	800cde2 <DMA_CheckFifoParam+0x5a>
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	2b03      	cmp	r3, #3
 800cda6:	d856      	bhi.n	800ce56 <DMA_CheckFifoParam+0xce>
 800cda8:	a201      	add	r2, pc, #4	; (adr r2, 800cdb0 <DMA_CheckFifoParam+0x28>)
 800cdaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdae:	bf00      	nop
 800cdb0:	0800cdc1 	.word	0x0800cdc1
 800cdb4:	0800cdd3 	.word	0x0800cdd3
 800cdb8:	0800cdc1 	.word	0x0800cdc1
 800cdbc:	0800ce57 	.word	0x0800ce57
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d046      	beq.n	800ce5a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800cdcc:	2301      	movs	r3, #1
 800cdce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cdd0:	e043      	b.n	800ce5a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdd6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800cdda:	d140      	bne.n	800ce5e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800cddc:	2301      	movs	r3, #1
 800cdde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cde0:	e03d      	b.n	800ce5e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	699b      	ldr	r3, [r3, #24]
 800cde6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cdea:	d121      	bne.n	800ce30 <DMA_CheckFifoParam+0xa8>
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	2b03      	cmp	r3, #3
 800cdf0:	d837      	bhi.n	800ce62 <DMA_CheckFifoParam+0xda>
 800cdf2:	a201      	add	r2, pc, #4	; (adr r2, 800cdf8 <DMA_CheckFifoParam+0x70>)
 800cdf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdf8:	0800ce09 	.word	0x0800ce09
 800cdfc:	0800ce0f 	.word	0x0800ce0f
 800ce00:	0800ce09 	.word	0x0800ce09
 800ce04:	0800ce21 	.word	0x0800ce21
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800ce08:	2301      	movs	r3, #1
 800ce0a:	73fb      	strb	r3, [r7, #15]
      break;
 800ce0c:	e030      	b.n	800ce70 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d025      	beq.n	800ce66 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ce1e:	e022      	b.n	800ce66 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ce28:	d11f      	bne.n	800ce6a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800ce2e:	e01c      	b.n	800ce6a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	2b02      	cmp	r3, #2
 800ce34:	d903      	bls.n	800ce3e <DMA_CheckFifoParam+0xb6>
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	2b03      	cmp	r3, #3
 800ce3a:	d003      	beq.n	800ce44 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800ce3c:	e018      	b.n	800ce70 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800ce3e:	2301      	movs	r3, #1
 800ce40:	73fb      	strb	r3, [r7, #15]
      break;
 800ce42:	e015      	b.n	800ce70 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d00e      	beq.n	800ce6e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800ce50:	2301      	movs	r3, #1
 800ce52:	73fb      	strb	r3, [r7, #15]
      break;
 800ce54:	e00b      	b.n	800ce6e <DMA_CheckFifoParam+0xe6>
      break;
 800ce56:	bf00      	nop
 800ce58:	e00a      	b.n	800ce70 <DMA_CheckFifoParam+0xe8>
      break;
 800ce5a:	bf00      	nop
 800ce5c:	e008      	b.n	800ce70 <DMA_CheckFifoParam+0xe8>
      break;
 800ce5e:	bf00      	nop
 800ce60:	e006      	b.n	800ce70 <DMA_CheckFifoParam+0xe8>
      break;
 800ce62:	bf00      	nop
 800ce64:	e004      	b.n	800ce70 <DMA_CheckFifoParam+0xe8>
      break;
 800ce66:	bf00      	nop
 800ce68:	e002      	b.n	800ce70 <DMA_CheckFifoParam+0xe8>
      break;   
 800ce6a:	bf00      	nop
 800ce6c:	e000      	b.n	800ce70 <DMA_CheckFifoParam+0xe8>
      break;
 800ce6e:	bf00      	nop
    }
  } 
  
  return status; 
 800ce70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce72:	4618      	mov	r0, r3
 800ce74:	3714      	adds	r7, #20
 800ce76:	46bd      	mov	sp, r7
 800ce78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7c:	4770      	bx	lr
 800ce7e:	bf00      	nop

0800ce80 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b082      	sub	sp, #8
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d101      	bne.n	800ce92 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800ce8e:	2301      	movs	r3, #1
 800ce90:	e049      	b.n	800cf26 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ce98:	b2db      	uxtb	r3, r3
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d106      	bne.n	800ceac <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2200      	movs	r2, #0
 800cea2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f7f4 ff0c 	bl	8001cc4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2202      	movs	r2, #2
 800ceb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	685a      	ldr	r2, [r3, #4]
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	430a      	orrs	r2, r1
 800cec8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ced0:	f023 0107 	bic.w	r1, r3, #7
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	689a      	ldr	r2, [r3, #8]
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	430a      	orrs	r2, r1
 800cede:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cee6:	4b12      	ldr	r3, [pc, #72]	; (800cf30 <HAL_DMA2D_Init+0xb0>)
 800cee8:	4013      	ands	r3, r2
 800ceea:	687a      	ldr	r2, [r7, #4]
 800ceec:	68d1      	ldr	r1, [r2, #12]
 800ceee:	687a      	ldr	r2, [r7, #4]
 800cef0:	6812      	ldr	r2, [r2, #0]
 800cef2:	430b      	orrs	r3, r1
 800cef4:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cefc:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	691b      	ldr	r3, [r3, #16]
 800cf04:	051a      	lsls	r2, r3, #20
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	695b      	ldr	r3, [r3, #20]
 800cf0a:	055b      	lsls	r3, r3, #21
 800cf0c:	431a      	orrs	r2, r3
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	430a      	orrs	r2, r1
 800cf14:	635a      	str	r2, [r3, #52]	; 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2201      	movs	r2, #1
 800cf20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800cf24:	2300      	movs	r3, #0
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3708      	adds	r7, #8
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}
 800cf2e:	bf00      	nop
 800cf30:	ffffc000 	.word	0xffffc000

0800cf34 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b084      	sub	sp, #16
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	685b      	ldr	r3, [r3, #4]
 800cf42:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	f003 0301 	and.w	r3, r3, #1
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d026      	beq.n	800cfa4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d021      	beq.n	800cfa4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	681a      	ldr	r2, [r3, #0]
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cf6e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf74:	f043 0201 	orr.w	r2, r3, #1
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	2201      	movs	r2, #1
 800cf82:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2204      	movs	r2, #4
 800cf88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2200      	movs	r2, #0
 800cf90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	69db      	ldr	r3, [r3, #28]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d003      	beq.n	800cfa4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	69db      	ldr	r3, [r3, #28]
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	f003 0320 	and.w	r3, r3, #32
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d026      	beq.n	800cffc <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d021      	beq.n	800cffc <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	681a      	ldr	r2, [r3, #0]
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cfc6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	2220      	movs	r2, #32
 800cfce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfd4:	f043 0202 	orr.w	r2, r3, #2
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2204      	movs	r2, #4
 800cfe0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	69db      	ldr	r3, [r3, #28]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d003      	beq.n	800cffc <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	69db      	ldr	r3, [r3, #28]
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	f003 0308 	and.w	r3, r3, #8
 800d002:	2b00      	cmp	r3, #0
 800d004:	d026      	beq.n	800d054 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d021      	beq.n	800d054 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	681a      	ldr	r2, [r3, #0]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d01e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	2208      	movs	r2, #8
 800d026:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d02c:	f043 0204 	orr.w	r2, r3, #4
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2204      	movs	r2, #4
 800d038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2200      	movs	r2, #0
 800d040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	69db      	ldr	r3, [r3, #28]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d003      	beq.n	800d054 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	69db      	ldr	r3, [r3, #28]
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	f003 0304 	and.w	r3, r3, #4
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d013      	beq.n	800d086 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d064:	2b00      	cmp	r3, #0
 800d066:	d00e      	beq.n	800d086 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	681a      	ldr	r2, [r3, #0]
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d076:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	2204      	movs	r2, #4
 800d07e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f000 f853 	bl	800d12c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	f003 0302 	and.w	r3, r3, #2
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d024      	beq.n	800d0da <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d096:	2b00      	cmp	r3, #0
 800d098:	d01f      	beq.n	800d0da <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	681a      	ldr	r2, [r3, #0]
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d0a8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	2202      	movs	r2, #2
 800d0b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2201      	movs	r2, #1
 800d0be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferCpltCallback != NULL)
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	699b      	ldr	r3, [r3, #24]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d003      	beq.n	800d0da <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	699b      	ldr	r3, [r3, #24]
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	f003 0310 	and.w	r3, r3, #16
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d01f      	beq.n	800d124 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800d0e4:	68bb      	ldr	r3, [r7, #8]
 800d0e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d01a      	beq.n	800d124 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	681a      	ldr	r2, [r3, #0]
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d0fc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	2210      	movs	r2, #16
 800d104:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2201      	movs	r2, #1
 800d112:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2200      	movs	r2, #0
 800d11a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f000 f80e 	bl	800d140 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800d124:	bf00      	nop
 800d126:	3710      	adds	r7, #16
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}

0800d12c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800d12c:	b480      	push	{r7}
 800d12e:	b083      	sub	sp, #12
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800d134:	bf00      	nop
 800d136:	370c      	adds	r7, #12
 800d138:	46bd      	mov	sp, r7
 800d13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13e:	4770      	bx	lr

0800d140 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800d140:	b480      	push	{r7}
 800d142:	b083      	sub	sp, #12
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800d148:	bf00      	nop
 800d14a:	370c      	adds	r7, #12
 800d14c:	46bd      	mov	sp, r7
 800d14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d152:	4770      	bx	lr

0800d154 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800d154:	b480      	push	{r7}
 800d156:	b087      	sub	sp, #28
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	685b      	ldr	r3, [r3, #4]
 800d162:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d16c:	2b01      	cmp	r3, #1
 800d16e:	d101      	bne.n	800d174 <HAL_DMA2D_ConfigLayer+0x20>
 800d170:	2302      	movs	r3, #2
 800d172:	e084      	b.n	800d27e <HAL_DMA2D_ConfigLayer+0x12a>
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2201      	movs	r2, #1
 800d178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2202      	movs	r2, #2
 800d180:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800d184:	683a      	ldr	r2, [r7, #0]
 800d186:	4613      	mov	r3, r2
 800d188:	005b      	lsls	r3, r3, #1
 800d18a:	4413      	add	r3, r2
 800d18c:	00db      	lsls	r3, r3, #3
 800d18e:	3320      	adds	r3, #32
 800d190:	687a      	ldr	r2, [r7, #4]
 800d192:	4413      	add	r3, r2
 800d194:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	685a      	ldr	r2, [r3, #4]
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	689b      	ldr	r3, [r3, #8]
 800d19e:	041b      	lsls	r3, r3, #16
 800d1a0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	691b      	ldr	r3, [r3, #16]
 800d1a6:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800d1a8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800d1aa:	693b      	ldr	r3, [r7, #16]
 800d1ac:	695b      	ldr	r3, [r3, #20]
 800d1ae:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800d1b0:	4313      	orrs	r3, r2
 800d1b2:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800d1b4:	4b35      	ldr	r3, [pc, #212]	; (800d28c <HAL_DMA2D_ConfigLayer+0x138>)
 800d1b6:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	685b      	ldr	r3, [r3, #4]
 800d1bc:	2b0a      	cmp	r3, #10
 800d1be:	d003      	beq.n	800d1c8 <HAL_DMA2D_ConfigLayer+0x74>
 800d1c0:	693b      	ldr	r3, [r7, #16]
 800d1c2:	685b      	ldr	r3, [r3, #4]
 800d1c4:	2b09      	cmp	r3, #9
 800d1c6:	d107      	bne.n	800d1d8 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	68db      	ldr	r3, [r3, #12]
 800d1cc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d1d0:	697a      	ldr	r2, [r7, #20]
 800d1d2:	4313      	orrs	r3, r2
 800d1d4:	617b      	str	r3, [r7, #20]
 800d1d6:	e005      	b.n	800d1e4 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	68db      	ldr	r3, [r3, #12]
 800d1dc:	061b      	lsls	r3, r3, #24
 800d1de:	697a      	ldr	r2, [r7, #20]
 800d1e0:	4313      	orrs	r3, r2
 800d1e2:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d120      	bne.n	800d22c <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	43db      	mvns	r3, r3
 800d1f4:	ea02 0103 	and.w	r1, r2, r3
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	697a      	ldr	r2, [r7, #20]
 800d1fe:	430a      	orrs	r2, r1
 800d200:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	693a      	ldr	r2, [r7, #16]
 800d208:	6812      	ldr	r2, [r2, #0]
 800d20a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	685b      	ldr	r3, [r3, #4]
 800d210:	2b0a      	cmp	r3, #10
 800d212:	d003      	beq.n	800d21c <HAL_DMA2D_ConfigLayer+0xc8>
 800d214:	693b      	ldr	r3, [r7, #16]
 800d216:	685b      	ldr	r3, [r3, #4]
 800d218:	2b09      	cmp	r3, #9
 800d21a:	d127      	bne.n	800d26c <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	68da      	ldr	r2, [r3, #12]
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800d228:	629a      	str	r2, [r3, #40]	; 0x28
 800d22a:	e01f      	b.n	800d26c <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	69da      	ldr	r2, [r3, #28]
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	43db      	mvns	r3, r3
 800d236:	ea02 0103 	and.w	r1, r2, r3
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	697a      	ldr	r2, [r7, #20]
 800d240:	430a      	orrs	r2, r1
 800d242:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	693a      	ldr	r2, [r7, #16]
 800d24a:	6812      	ldr	r2, [r2, #0]
 800d24c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	685b      	ldr	r3, [r3, #4]
 800d252:	2b0a      	cmp	r3, #10
 800d254:	d003      	beq.n	800d25e <HAL_DMA2D_ConfigLayer+0x10a>
 800d256:	693b      	ldr	r3, [r7, #16]
 800d258:	685b      	ldr	r3, [r3, #4]
 800d25a:	2b09      	cmp	r3, #9
 800d25c:	d106      	bne.n	800d26c <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	68da      	ldr	r2, [r3, #12]
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800d26a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2201      	movs	r2, #1
 800d270:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2200      	movs	r2, #0
 800d278:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800d27c:	2300      	movs	r3, #0
}
 800d27e:	4618      	mov	r0, r3
 800d280:	371c      	adds	r7, #28
 800d282:	46bd      	mov	sp, r7
 800d284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d288:	4770      	bx	lr
 800d28a:	bf00      	nop
 800d28c:	ff33000f 	.word	0xff33000f

0800d290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d290:	b480      	push	{r7}
 800d292:	b089      	sub	sp, #36	; 0x24
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800d29a:	2300      	movs	r3, #0
 800d29c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	61fb      	str	r3, [r7, #28]
 800d2ae:	e175      	b.n	800d59c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800d2b0:	2201      	movs	r2, #1
 800d2b2:	69fb      	ldr	r3, [r7, #28]
 800d2b4:	fa02 f303 	lsl.w	r3, r2, r3
 800d2b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	697a      	ldr	r2, [r7, #20]
 800d2c0:	4013      	ands	r3, r2
 800d2c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800d2c4:	693a      	ldr	r2, [r7, #16]
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	429a      	cmp	r2, r3
 800d2ca:	f040 8164 	bne.w	800d596 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	685b      	ldr	r3, [r3, #4]
 800d2d2:	2b01      	cmp	r3, #1
 800d2d4:	d00b      	beq.n	800d2ee <HAL_GPIO_Init+0x5e>
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	685b      	ldr	r3, [r3, #4]
 800d2da:	2b02      	cmp	r3, #2
 800d2dc:	d007      	beq.n	800d2ee <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d2e2:	2b11      	cmp	r3, #17
 800d2e4:	d003      	beq.n	800d2ee <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	685b      	ldr	r3, [r3, #4]
 800d2ea:	2b12      	cmp	r3, #18
 800d2ec:	d130      	bne.n	800d350 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	689b      	ldr	r3, [r3, #8]
 800d2f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800d2f4:	69fb      	ldr	r3, [r7, #28]
 800d2f6:	005b      	lsls	r3, r3, #1
 800d2f8:	2203      	movs	r2, #3
 800d2fa:	fa02 f303 	lsl.w	r3, r2, r3
 800d2fe:	43db      	mvns	r3, r3
 800d300:	69ba      	ldr	r2, [r7, #24]
 800d302:	4013      	ands	r3, r2
 800d304:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	68da      	ldr	r2, [r3, #12]
 800d30a:	69fb      	ldr	r3, [r7, #28]
 800d30c:	005b      	lsls	r3, r3, #1
 800d30e:	fa02 f303 	lsl.w	r3, r2, r3
 800d312:	69ba      	ldr	r2, [r7, #24]
 800d314:	4313      	orrs	r3, r2
 800d316:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	69ba      	ldr	r2, [r7, #24]
 800d31c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	685b      	ldr	r3, [r3, #4]
 800d322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d324:	2201      	movs	r2, #1
 800d326:	69fb      	ldr	r3, [r7, #28]
 800d328:	fa02 f303 	lsl.w	r3, r2, r3
 800d32c:	43db      	mvns	r3, r3
 800d32e:	69ba      	ldr	r2, [r7, #24]
 800d330:	4013      	ands	r3, r2
 800d332:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	685b      	ldr	r3, [r3, #4]
 800d338:	091b      	lsrs	r3, r3, #4
 800d33a:	f003 0201 	and.w	r2, r3, #1
 800d33e:	69fb      	ldr	r3, [r7, #28]
 800d340:	fa02 f303 	lsl.w	r3, r2, r3
 800d344:	69ba      	ldr	r2, [r7, #24]
 800d346:	4313      	orrs	r3, r2
 800d348:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	69ba      	ldr	r2, [r7, #24]
 800d34e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	68db      	ldr	r3, [r3, #12]
 800d354:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800d356:	69fb      	ldr	r3, [r7, #28]
 800d358:	005b      	lsls	r3, r3, #1
 800d35a:	2203      	movs	r2, #3
 800d35c:	fa02 f303 	lsl.w	r3, r2, r3
 800d360:	43db      	mvns	r3, r3
 800d362:	69ba      	ldr	r2, [r7, #24]
 800d364:	4013      	ands	r3, r2
 800d366:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	689a      	ldr	r2, [r3, #8]
 800d36c:	69fb      	ldr	r3, [r7, #28]
 800d36e:	005b      	lsls	r3, r3, #1
 800d370:	fa02 f303 	lsl.w	r3, r2, r3
 800d374:	69ba      	ldr	r2, [r7, #24]
 800d376:	4313      	orrs	r3, r2
 800d378:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	69ba      	ldr	r2, [r7, #24]
 800d37e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	685b      	ldr	r3, [r3, #4]
 800d384:	2b02      	cmp	r3, #2
 800d386:	d003      	beq.n	800d390 <HAL_GPIO_Init+0x100>
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	685b      	ldr	r3, [r3, #4]
 800d38c:	2b12      	cmp	r3, #18
 800d38e:	d123      	bne.n	800d3d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800d390:	69fb      	ldr	r3, [r7, #28]
 800d392:	08da      	lsrs	r2, r3, #3
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	3208      	adds	r2, #8
 800d398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d39c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800d39e:	69fb      	ldr	r3, [r7, #28]
 800d3a0:	f003 0307 	and.w	r3, r3, #7
 800d3a4:	009b      	lsls	r3, r3, #2
 800d3a6:	220f      	movs	r2, #15
 800d3a8:	fa02 f303 	lsl.w	r3, r2, r3
 800d3ac:	43db      	mvns	r3, r3
 800d3ae:	69ba      	ldr	r2, [r7, #24]
 800d3b0:	4013      	ands	r3, r2
 800d3b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	691a      	ldr	r2, [r3, #16]
 800d3b8:	69fb      	ldr	r3, [r7, #28]
 800d3ba:	f003 0307 	and.w	r3, r3, #7
 800d3be:	009b      	lsls	r3, r3, #2
 800d3c0:	fa02 f303 	lsl.w	r3, r2, r3
 800d3c4:	69ba      	ldr	r2, [r7, #24]
 800d3c6:	4313      	orrs	r3, r2
 800d3c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800d3ca:	69fb      	ldr	r3, [r7, #28]
 800d3cc:	08da      	lsrs	r2, r3, #3
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	3208      	adds	r2, #8
 800d3d2:	69b9      	ldr	r1, [r7, #24]
 800d3d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800d3de:	69fb      	ldr	r3, [r7, #28]
 800d3e0:	005b      	lsls	r3, r3, #1
 800d3e2:	2203      	movs	r2, #3
 800d3e4:	fa02 f303 	lsl.w	r3, r2, r3
 800d3e8:	43db      	mvns	r3, r3
 800d3ea:	69ba      	ldr	r2, [r7, #24]
 800d3ec:	4013      	ands	r3, r2
 800d3ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	685b      	ldr	r3, [r3, #4]
 800d3f4:	f003 0203 	and.w	r2, r3, #3
 800d3f8:	69fb      	ldr	r3, [r7, #28]
 800d3fa:	005b      	lsls	r3, r3, #1
 800d3fc:	fa02 f303 	lsl.w	r3, r2, r3
 800d400:	69ba      	ldr	r2, [r7, #24]
 800d402:	4313      	orrs	r3, r2
 800d404:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	69ba      	ldr	r2, [r7, #24]
 800d40a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	685b      	ldr	r3, [r3, #4]
 800d410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d414:	2b00      	cmp	r3, #0
 800d416:	f000 80be 	beq.w	800d596 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d41a:	4b66      	ldr	r3, [pc, #408]	; (800d5b4 <HAL_GPIO_Init+0x324>)
 800d41c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d41e:	4a65      	ldr	r2, [pc, #404]	; (800d5b4 <HAL_GPIO_Init+0x324>)
 800d420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d424:	6453      	str	r3, [r2, #68]	; 0x44
 800d426:	4b63      	ldr	r3, [pc, #396]	; (800d5b4 <HAL_GPIO_Init+0x324>)
 800d428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d42a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d42e:	60fb      	str	r3, [r7, #12]
 800d430:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800d432:	4a61      	ldr	r2, [pc, #388]	; (800d5b8 <HAL_GPIO_Init+0x328>)
 800d434:	69fb      	ldr	r3, [r7, #28]
 800d436:	089b      	lsrs	r3, r3, #2
 800d438:	3302      	adds	r3, #2
 800d43a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d43e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800d440:	69fb      	ldr	r3, [r7, #28]
 800d442:	f003 0303 	and.w	r3, r3, #3
 800d446:	009b      	lsls	r3, r3, #2
 800d448:	220f      	movs	r2, #15
 800d44a:	fa02 f303 	lsl.w	r3, r2, r3
 800d44e:	43db      	mvns	r3, r3
 800d450:	69ba      	ldr	r2, [r7, #24]
 800d452:	4013      	ands	r3, r2
 800d454:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	4a58      	ldr	r2, [pc, #352]	; (800d5bc <HAL_GPIO_Init+0x32c>)
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d037      	beq.n	800d4ce <HAL_GPIO_Init+0x23e>
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	4a57      	ldr	r2, [pc, #348]	; (800d5c0 <HAL_GPIO_Init+0x330>)
 800d462:	4293      	cmp	r3, r2
 800d464:	d031      	beq.n	800d4ca <HAL_GPIO_Init+0x23a>
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	4a56      	ldr	r2, [pc, #344]	; (800d5c4 <HAL_GPIO_Init+0x334>)
 800d46a:	4293      	cmp	r3, r2
 800d46c:	d02b      	beq.n	800d4c6 <HAL_GPIO_Init+0x236>
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	4a55      	ldr	r2, [pc, #340]	; (800d5c8 <HAL_GPIO_Init+0x338>)
 800d472:	4293      	cmp	r3, r2
 800d474:	d025      	beq.n	800d4c2 <HAL_GPIO_Init+0x232>
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	4a54      	ldr	r2, [pc, #336]	; (800d5cc <HAL_GPIO_Init+0x33c>)
 800d47a:	4293      	cmp	r3, r2
 800d47c:	d01f      	beq.n	800d4be <HAL_GPIO_Init+0x22e>
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	4a53      	ldr	r2, [pc, #332]	; (800d5d0 <HAL_GPIO_Init+0x340>)
 800d482:	4293      	cmp	r3, r2
 800d484:	d019      	beq.n	800d4ba <HAL_GPIO_Init+0x22a>
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	4a52      	ldr	r2, [pc, #328]	; (800d5d4 <HAL_GPIO_Init+0x344>)
 800d48a:	4293      	cmp	r3, r2
 800d48c:	d013      	beq.n	800d4b6 <HAL_GPIO_Init+0x226>
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	4a51      	ldr	r2, [pc, #324]	; (800d5d8 <HAL_GPIO_Init+0x348>)
 800d492:	4293      	cmp	r3, r2
 800d494:	d00d      	beq.n	800d4b2 <HAL_GPIO_Init+0x222>
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	4a50      	ldr	r2, [pc, #320]	; (800d5dc <HAL_GPIO_Init+0x34c>)
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d007      	beq.n	800d4ae <HAL_GPIO_Init+0x21e>
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	4a4f      	ldr	r2, [pc, #316]	; (800d5e0 <HAL_GPIO_Init+0x350>)
 800d4a2:	4293      	cmp	r3, r2
 800d4a4:	d101      	bne.n	800d4aa <HAL_GPIO_Init+0x21a>
 800d4a6:	2309      	movs	r3, #9
 800d4a8:	e012      	b.n	800d4d0 <HAL_GPIO_Init+0x240>
 800d4aa:	230a      	movs	r3, #10
 800d4ac:	e010      	b.n	800d4d0 <HAL_GPIO_Init+0x240>
 800d4ae:	2308      	movs	r3, #8
 800d4b0:	e00e      	b.n	800d4d0 <HAL_GPIO_Init+0x240>
 800d4b2:	2307      	movs	r3, #7
 800d4b4:	e00c      	b.n	800d4d0 <HAL_GPIO_Init+0x240>
 800d4b6:	2306      	movs	r3, #6
 800d4b8:	e00a      	b.n	800d4d0 <HAL_GPIO_Init+0x240>
 800d4ba:	2305      	movs	r3, #5
 800d4bc:	e008      	b.n	800d4d0 <HAL_GPIO_Init+0x240>
 800d4be:	2304      	movs	r3, #4
 800d4c0:	e006      	b.n	800d4d0 <HAL_GPIO_Init+0x240>
 800d4c2:	2303      	movs	r3, #3
 800d4c4:	e004      	b.n	800d4d0 <HAL_GPIO_Init+0x240>
 800d4c6:	2302      	movs	r3, #2
 800d4c8:	e002      	b.n	800d4d0 <HAL_GPIO_Init+0x240>
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	e000      	b.n	800d4d0 <HAL_GPIO_Init+0x240>
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	69fa      	ldr	r2, [r7, #28]
 800d4d2:	f002 0203 	and.w	r2, r2, #3
 800d4d6:	0092      	lsls	r2, r2, #2
 800d4d8:	4093      	lsls	r3, r2
 800d4da:	69ba      	ldr	r2, [r7, #24]
 800d4dc:	4313      	orrs	r3, r2
 800d4de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800d4e0:	4935      	ldr	r1, [pc, #212]	; (800d5b8 <HAL_GPIO_Init+0x328>)
 800d4e2:	69fb      	ldr	r3, [r7, #28]
 800d4e4:	089b      	lsrs	r3, r3, #2
 800d4e6:	3302      	adds	r3, #2
 800d4e8:	69ba      	ldr	r2, [r7, #24]
 800d4ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d4ee:	4b3d      	ldr	r3, [pc, #244]	; (800d5e4 <HAL_GPIO_Init+0x354>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d4f4:	693b      	ldr	r3, [r7, #16]
 800d4f6:	43db      	mvns	r3, r3
 800d4f8:	69ba      	ldr	r2, [r7, #24]
 800d4fa:	4013      	ands	r3, r2
 800d4fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	685b      	ldr	r3, [r3, #4]
 800d502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d506:	2b00      	cmp	r3, #0
 800d508:	d003      	beq.n	800d512 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800d50a:	69ba      	ldr	r2, [r7, #24]
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	4313      	orrs	r3, r2
 800d510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800d512:	4a34      	ldr	r2, [pc, #208]	; (800d5e4 <HAL_GPIO_Init+0x354>)
 800d514:	69bb      	ldr	r3, [r7, #24]
 800d516:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800d518:	4b32      	ldr	r3, [pc, #200]	; (800d5e4 <HAL_GPIO_Init+0x354>)
 800d51a:	685b      	ldr	r3, [r3, #4]
 800d51c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d51e:	693b      	ldr	r3, [r7, #16]
 800d520:	43db      	mvns	r3, r3
 800d522:	69ba      	ldr	r2, [r7, #24]
 800d524:	4013      	ands	r3, r2
 800d526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	685b      	ldr	r3, [r3, #4]
 800d52c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d530:	2b00      	cmp	r3, #0
 800d532:	d003      	beq.n	800d53c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800d534:	69ba      	ldr	r2, [r7, #24]
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	4313      	orrs	r3, r2
 800d53a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800d53c:	4a29      	ldr	r2, [pc, #164]	; (800d5e4 <HAL_GPIO_Init+0x354>)
 800d53e:	69bb      	ldr	r3, [r7, #24]
 800d540:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d542:	4b28      	ldr	r3, [pc, #160]	; (800d5e4 <HAL_GPIO_Init+0x354>)
 800d544:	689b      	ldr	r3, [r3, #8]
 800d546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	43db      	mvns	r3, r3
 800d54c:	69ba      	ldr	r2, [r7, #24]
 800d54e:	4013      	ands	r3, r2
 800d550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	685b      	ldr	r3, [r3, #4]
 800d556:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d003      	beq.n	800d566 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800d55e:	69ba      	ldr	r2, [r7, #24]
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	4313      	orrs	r3, r2
 800d564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800d566:	4a1f      	ldr	r2, [pc, #124]	; (800d5e4 <HAL_GPIO_Init+0x354>)
 800d568:	69bb      	ldr	r3, [r7, #24]
 800d56a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800d56c:	4b1d      	ldr	r3, [pc, #116]	; (800d5e4 <HAL_GPIO_Init+0x354>)
 800d56e:	68db      	ldr	r3, [r3, #12]
 800d570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d572:	693b      	ldr	r3, [r7, #16]
 800d574:	43db      	mvns	r3, r3
 800d576:	69ba      	ldr	r2, [r7, #24]
 800d578:	4013      	ands	r3, r2
 800d57a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	685b      	ldr	r3, [r3, #4]
 800d580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d584:	2b00      	cmp	r3, #0
 800d586:	d003      	beq.n	800d590 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800d588:	69ba      	ldr	r2, [r7, #24]
 800d58a:	693b      	ldr	r3, [r7, #16]
 800d58c:	4313      	orrs	r3, r2
 800d58e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800d590:	4a14      	ldr	r2, [pc, #80]	; (800d5e4 <HAL_GPIO_Init+0x354>)
 800d592:	69bb      	ldr	r3, [r7, #24]
 800d594:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800d596:	69fb      	ldr	r3, [r7, #28]
 800d598:	3301      	adds	r3, #1
 800d59a:	61fb      	str	r3, [r7, #28]
 800d59c:	69fb      	ldr	r3, [r7, #28]
 800d59e:	2b0f      	cmp	r3, #15
 800d5a0:	f67f ae86 	bls.w	800d2b0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800d5a4:	bf00      	nop
 800d5a6:	bf00      	nop
 800d5a8:	3724      	adds	r7, #36	; 0x24
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b0:	4770      	bx	lr
 800d5b2:	bf00      	nop
 800d5b4:	40023800 	.word	0x40023800
 800d5b8:	40013800 	.word	0x40013800
 800d5bc:	40020000 	.word	0x40020000
 800d5c0:	40020400 	.word	0x40020400
 800d5c4:	40020800 	.word	0x40020800
 800d5c8:	40020c00 	.word	0x40020c00
 800d5cc:	40021000 	.word	0x40021000
 800d5d0:	40021400 	.word	0x40021400
 800d5d4:	40021800 	.word	0x40021800
 800d5d8:	40021c00 	.word	0x40021c00
 800d5dc:	40022000 	.word	0x40022000
 800d5e0:	40022400 	.word	0x40022400
 800d5e4:	40013c00 	.word	0x40013c00

0800d5e8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800d5e8:	b480      	push	{r7}
 800d5ea:	b087      	sub	sp, #28
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
 800d5f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800d5fe:	2300      	movs	r3, #0
 800d600:	617b      	str	r3, [r7, #20]
 800d602:	e0d9      	b.n	800d7b8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800d604:	2201      	movs	r2, #1
 800d606:	697b      	ldr	r3, [r7, #20]
 800d608:	fa02 f303 	lsl.w	r3, r2, r3
 800d60c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800d60e:	683a      	ldr	r2, [r7, #0]
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	4013      	ands	r3, r2
 800d614:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800d616:	68fa      	ldr	r2, [r7, #12]
 800d618:	693b      	ldr	r3, [r7, #16]
 800d61a:	429a      	cmp	r2, r3
 800d61c:	f040 80c9 	bne.w	800d7b2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800d620:	4a6b      	ldr	r2, [pc, #428]	; (800d7d0 <HAL_GPIO_DeInit+0x1e8>)
 800d622:	697b      	ldr	r3, [r7, #20]
 800d624:	089b      	lsrs	r3, r3, #2
 800d626:	3302      	adds	r3, #2
 800d628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d62c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800d62e:	697b      	ldr	r3, [r7, #20]
 800d630:	f003 0303 	and.w	r3, r3, #3
 800d634:	009b      	lsls	r3, r3, #2
 800d636:	220f      	movs	r2, #15
 800d638:	fa02 f303 	lsl.w	r3, r2, r3
 800d63c:	68ba      	ldr	r2, [r7, #8]
 800d63e:	4013      	ands	r3, r2
 800d640:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	4a63      	ldr	r2, [pc, #396]	; (800d7d4 <HAL_GPIO_DeInit+0x1ec>)
 800d646:	4293      	cmp	r3, r2
 800d648:	d037      	beq.n	800d6ba <HAL_GPIO_DeInit+0xd2>
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	4a62      	ldr	r2, [pc, #392]	; (800d7d8 <HAL_GPIO_DeInit+0x1f0>)
 800d64e:	4293      	cmp	r3, r2
 800d650:	d031      	beq.n	800d6b6 <HAL_GPIO_DeInit+0xce>
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	4a61      	ldr	r2, [pc, #388]	; (800d7dc <HAL_GPIO_DeInit+0x1f4>)
 800d656:	4293      	cmp	r3, r2
 800d658:	d02b      	beq.n	800d6b2 <HAL_GPIO_DeInit+0xca>
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	4a60      	ldr	r2, [pc, #384]	; (800d7e0 <HAL_GPIO_DeInit+0x1f8>)
 800d65e:	4293      	cmp	r3, r2
 800d660:	d025      	beq.n	800d6ae <HAL_GPIO_DeInit+0xc6>
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	4a5f      	ldr	r2, [pc, #380]	; (800d7e4 <HAL_GPIO_DeInit+0x1fc>)
 800d666:	4293      	cmp	r3, r2
 800d668:	d01f      	beq.n	800d6aa <HAL_GPIO_DeInit+0xc2>
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	4a5e      	ldr	r2, [pc, #376]	; (800d7e8 <HAL_GPIO_DeInit+0x200>)
 800d66e:	4293      	cmp	r3, r2
 800d670:	d019      	beq.n	800d6a6 <HAL_GPIO_DeInit+0xbe>
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	4a5d      	ldr	r2, [pc, #372]	; (800d7ec <HAL_GPIO_DeInit+0x204>)
 800d676:	4293      	cmp	r3, r2
 800d678:	d013      	beq.n	800d6a2 <HAL_GPIO_DeInit+0xba>
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	4a5c      	ldr	r2, [pc, #368]	; (800d7f0 <HAL_GPIO_DeInit+0x208>)
 800d67e:	4293      	cmp	r3, r2
 800d680:	d00d      	beq.n	800d69e <HAL_GPIO_DeInit+0xb6>
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	4a5b      	ldr	r2, [pc, #364]	; (800d7f4 <HAL_GPIO_DeInit+0x20c>)
 800d686:	4293      	cmp	r3, r2
 800d688:	d007      	beq.n	800d69a <HAL_GPIO_DeInit+0xb2>
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	4a5a      	ldr	r2, [pc, #360]	; (800d7f8 <HAL_GPIO_DeInit+0x210>)
 800d68e:	4293      	cmp	r3, r2
 800d690:	d101      	bne.n	800d696 <HAL_GPIO_DeInit+0xae>
 800d692:	2309      	movs	r3, #9
 800d694:	e012      	b.n	800d6bc <HAL_GPIO_DeInit+0xd4>
 800d696:	230a      	movs	r3, #10
 800d698:	e010      	b.n	800d6bc <HAL_GPIO_DeInit+0xd4>
 800d69a:	2308      	movs	r3, #8
 800d69c:	e00e      	b.n	800d6bc <HAL_GPIO_DeInit+0xd4>
 800d69e:	2307      	movs	r3, #7
 800d6a0:	e00c      	b.n	800d6bc <HAL_GPIO_DeInit+0xd4>
 800d6a2:	2306      	movs	r3, #6
 800d6a4:	e00a      	b.n	800d6bc <HAL_GPIO_DeInit+0xd4>
 800d6a6:	2305      	movs	r3, #5
 800d6a8:	e008      	b.n	800d6bc <HAL_GPIO_DeInit+0xd4>
 800d6aa:	2304      	movs	r3, #4
 800d6ac:	e006      	b.n	800d6bc <HAL_GPIO_DeInit+0xd4>
 800d6ae:	2303      	movs	r3, #3
 800d6b0:	e004      	b.n	800d6bc <HAL_GPIO_DeInit+0xd4>
 800d6b2:	2302      	movs	r3, #2
 800d6b4:	e002      	b.n	800d6bc <HAL_GPIO_DeInit+0xd4>
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	e000      	b.n	800d6bc <HAL_GPIO_DeInit+0xd4>
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	697a      	ldr	r2, [r7, #20]
 800d6be:	f002 0203 	and.w	r2, r2, #3
 800d6c2:	0092      	lsls	r2, r2, #2
 800d6c4:	4093      	lsls	r3, r2
 800d6c6:	68ba      	ldr	r2, [r7, #8]
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	d132      	bne.n	800d732 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800d6cc:	4b4b      	ldr	r3, [pc, #300]	; (800d7fc <HAL_GPIO_DeInit+0x214>)
 800d6ce:	681a      	ldr	r2, [r3, #0]
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	43db      	mvns	r3, r3
 800d6d4:	4949      	ldr	r1, [pc, #292]	; (800d7fc <HAL_GPIO_DeInit+0x214>)
 800d6d6:	4013      	ands	r3, r2
 800d6d8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800d6da:	4b48      	ldr	r3, [pc, #288]	; (800d7fc <HAL_GPIO_DeInit+0x214>)
 800d6dc:	685a      	ldr	r2, [r3, #4]
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	43db      	mvns	r3, r3
 800d6e2:	4946      	ldr	r1, [pc, #280]	; (800d7fc <HAL_GPIO_DeInit+0x214>)
 800d6e4:	4013      	ands	r3, r2
 800d6e6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800d6e8:	4b44      	ldr	r3, [pc, #272]	; (800d7fc <HAL_GPIO_DeInit+0x214>)
 800d6ea:	689a      	ldr	r2, [r3, #8]
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	43db      	mvns	r3, r3
 800d6f0:	4942      	ldr	r1, [pc, #264]	; (800d7fc <HAL_GPIO_DeInit+0x214>)
 800d6f2:	4013      	ands	r3, r2
 800d6f4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800d6f6:	4b41      	ldr	r3, [pc, #260]	; (800d7fc <HAL_GPIO_DeInit+0x214>)
 800d6f8:	68da      	ldr	r2, [r3, #12]
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	43db      	mvns	r3, r3
 800d6fe:	493f      	ldr	r1, [pc, #252]	; (800d7fc <HAL_GPIO_DeInit+0x214>)
 800d700:	4013      	ands	r3, r2
 800d702:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800d704:	697b      	ldr	r3, [r7, #20]
 800d706:	f003 0303 	and.w	r3, r3, #3
 800d70a:	009b      	lsls	r3, r3, #2
 800d70c:	220f      	movs	r2, #15
 800d70e:	fa02 f303 	lsl.w	r3, r2, r3
 800d712:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800d714:	4a2e      	ldr	r2, [pc, #184]	; (800d7d0 <HAL_GPIO_DeInit+0x1e8>)
 800d716:	697b      	ldr	r3, [r7, #20]
 800d718:	089b      	lsrs	r3, r3, #2
 800d71a:	3302      	adds	r3, #2
 800d71c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	43da      	mvns	r2, r3
 800d724:	482a      	ldr	r0, [pc, #168]	; (800d7d0 <HAL_GPIO_DeInit+0x1e8>)
 800d726:	697b      	ldr	r3, [r7, #20]
 800d728:	089b      	lsrs	r3, r3, #2
 800d72a:	400a      	ands	r2, r1
 800d72c:	3302      	adds	r3, #2
 800d72e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681a      	ldr	r2, [r3, #0]
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	005b      	lsls	r3, r3, #1
 800d73a:	2103      	movs	r1, #3
 800d73c:	fa01 f303 	lsl.w	r3, r1, r3
 800d740:	43db      	mvns	r3, r3
 800d742:	401a      	ands	r2, r3
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	08da      	lsrs	r2, r3, #3
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	3208      	adds	r2, #8
 800d750:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	f003 0307 	and.w	r3, r3, #7
 800d75a:	009b      	lsls	r3, r3, #2
 800d75c:	220f      	movs	r2, #15
 800d75e:	fa02 f303 	lsl.w	r3, r2, r3
 800d762:	43db      	mvns	r3, r3
 800d764:	697a      	ldr	r2, [r7, #20]
 800d766:	08d2      	lsrs	r2, r2, #3
 800d768:	4019      	ands	r1, r3
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	3208      	adds	r2, #8
 800d76e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	68da      	ldr	r2, [r3, #12]
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	005b      	lsls	r3, r3, #1
 800d77a:	2103      	movs	r1, #3
 800d77c:	fa01 f303 	lsl.w	r3, r1, r3
 800d780:	43db      	mvns	r3, r3
 800d782:	401a      	ands	r2, r3
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	685a      	ldr	r2, [r3, #4]
 800d78c:	2101      	movs	r1, #1
 800d78e:	697b      	ldr	r3, [r7, #20]
 800d790:	fa01 f303 	lsl.w	r3, r1, r3
 800d794:	43db      	mvns	r3, r3
 800d796:	401a      	ands	r2, r3
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	689a      	ldr	r2, [r3, #8]
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	005b      	lsls	r3, r3, #1
 800d7a4:	2103      	movs	r1, #3
 800d7a6:	fa01 f303 	lsl.w	r3, r1, r3
 800d7aa:	43db      	mvns	r3, r3
 800d7ac:	401a      	ands	r2, r3
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	3301      	adds	r3, #1
 800d7b6:	617b      	str	r3, [r7, #20]
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	2b0f      	cmp	r3, #15
 800d7bc:	f67f af22 	bls.w	800d604 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800d7c0:	bf00      	nop
 800d7c2:	bf00      	nop
 800d7c4:	371c      	adds	r7, #28
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7cc:	4770      	bx	lr
 800d7ce:	bf00      	nop
 800d7d0:	40013800 	.word	0x40013800
 800d7d4:	40020000 	.word	0x40020000
 800d7d8:	40020400 	.word	0x40020400
 800d7dc:	40020800 	.word	0x40020800
 800d7e0:	40020c00 	.word	0x40020c00
 800d7e4:	40021000 	.word	0x40021000
 800d7e8:	40021400 	.word	0x40021400
 800d7ec:	40021800 	.word	0x40021800
 800d7f0:	40021c00 	.word	0x40021c00
 800d7f4:	40022000 	.word	0x40022000
 800d7f8:	40022400 	.word	0x40022400
 800d7fc:	40013c00 	.word	0x40013c00

0800d800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d800:	b480      	push	{r7}
 800d802:	b083      	sub	sp, #12
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
 800d808:	460b      	mov	r3, r1
 800d80a:	807b      	strh	r3, [r7, #2]
 800d80c:	4613      	mov	r3, r2
 800d80e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d810:	787b      	ldrb	r3, [r7, #1]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d003      	beq.n	800d81e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d816:	887a      	ldrh	r2, [r7, #2]
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800d81c:	e003      	b.n	800d826 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800d81e:	887b      	ldrh	r3, [r7, #2]
 800d820:	041a      	lsls	r2, r3, #16
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	619a      	str	r2, [r3, #24]
}
 800d826:	bf00      	nop
 800d828:	370c      	adds	r7, #12
 800d82a:	46bd      	mov	sp, r7
 800d82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d830:	4770      	bx	lr

0800d832 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d832:	b480      	push	{r7}
 800d834:	b085      	sub	sp, #20
 800d836:	af00      	add	r7, sp, #0
 800d838:	6078      	str	r0, [r7, #4]
 800d83a:	460b      	mov	r3, r1
 800d83c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	695b      	ldr	r3, [r3, #20]
 800d842:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800d844:	887a      	ldrh	r2, [r7, #2]
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	4013      	ands	r3, r2
 800d84a:	041a      	lsls	r2, r3, #16
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	43d9      	mvns	r1, r3
 800d850:	887b      	ldrh	r3, [r7, #2]
 800d852:	400b      	ands	r3, r1
 800d854:	431a      	orrs	r2, r3
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	619a      	str	r2, [r3, #24]
}
 800d85a:	bf00      	nop
 800d85c:	3714      	adds	r7, #20
 800d85e:	46bd      	mov	sp, r7
 800d860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d864:	4770      	bx	lr
	...

0800d868 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b084      	sub	sp, #16
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d101      	bne.n	800d87a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800d876:	2301      	movs	r3, #1
 800d878:	e0bf      	b.n	800d9fa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800d880:	b2db      	uxtb	r3, r3
 800d882:	2b00      	cmp	r3, #0
 800d884:	d106      	bne.n	800d894 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2200      	movs	r2, #0
 800d88a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f7f4 fed2 	bl	8002638 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2202      	movs	r2, #2
 800d898:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	699a      	ldr	r2, [r3, #24]
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800d8aa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	6999      	ldr	r1, [r3, #24]
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	685a      	ldr	r2, [r3, #4]
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	689b      	ldr	r3, [r3, #8]
 800d8ba:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d8c0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	691b      	ldr	r3, [r3, #16]
 800d8c6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	430a      	orrs	r2, r1
 800d8ce:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	6899      	ldr	r1, [r3, #8]
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681a      	ldr	r2, [r3, #0]
 800d8da:	4b4a      	ldr	r3, [pc, #296]	; (800da04 <HAL_LTDC_Init+0x19c>)
 800d8dc:	400b      	ands	r3, r1
 800d8de:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	695b      	ldr	r3, [r3, #20]
 800d8e4:	041b      	lsls	r3, r3, #16
 800d8e6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	6899      	ldr	r1, [r3, #8]
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	699a      	ldr	r2, [r3, #24]
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	431a      	orrs	r2, r3
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	430a      	orrs	r2, r1
 800d8fc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	68d9      	ldr	r1, [r3, #12]
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681a      	ldr	r2, [r3, #0]
 800d908:	4b3e      	ldr	r3, [pc, #248]	; (800da04 <HAL_LTDC_Init+0x19c>)
 800d90a:	400b      	ands	r3, r1
 800d90c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	69db      	ldr	r3, [r3, #28]
 800d912:	041b      	lsls	r3, r3, #16
 800d914:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	68d9      	ldr	r1, [r3, #12]
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6a1a      	ldr	r2, [r3, #32]
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	431a      	orrs	r2, r3
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	430a      	orrs	r2, r1
 800d92a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	6919      	ldr	r1, [r3, #16]
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681a      	ldr	r2, [r3, #0]
 800d936:	4b33      	ldr	r3, [pc, #204]	; (800da04 <HAL_LTDC_Init+0x19c>)
 800d938:	400b      	ands	r3, r1
 800d93a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d940:	041b      	lsls	r3, r3, #16
 800d942:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	6919      	ldr	r1, [r3, #16]
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	431a      	orrs	r2, r3
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	430a      	orrs	r2, r1
 800d958:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	6959      	ldr	r1, [r3, #20]
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681a      	ldr	r2, [r3, #0]
 800d964:	4b27      	ldr	r3, [pc, #156]	; (800da04 <HAL_LTDC_Init+0x19c>)
 800d966:	400b      	ands	r3, r1
 800d968:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d96e:	041b      	lsls	r3, r3, #16
 800d970:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	6959      	ldr	r1, [r3, #20]
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	431a      	orrs	r2, r3
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	430a      	orrs	r2, r1
 800d986:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d98e:	021b      	lsls	r3, r3, #8
 800d990:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d998:	041b      	lsls	r3, r3, #16
 800d99a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800d9aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800d9b2:	68ba      	ldr	r2, [r7, #8]
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	4313      	orrs	r3, r2
 800d9b8:	687a      	ldr	r2, [r7, #4]
 800d9ba:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800d9be:	431a      	orrs	r2, r3
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	430a      	orrs	r2, r1
 800d9c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	f042 0206 	orr.w	r2, r2, #6
 800d9d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	699a      	ldr	r2, [r3, #24]
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	f042 0201 	orr.w	r2, r2, #1
 800d9e6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800d9f8:	2300      	movs	r3, #0
}
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	3710      	adds	r7, #16
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}
 800da02:	bf00      	nop
 800da04:	f000f800 	.word	0xf000f800

0800da08 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b084      	sub	sp, #16
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da16:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da1e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	f003 0304 	and.w	r3, r3, #4
 800da26:	2b00      	cmp	r3, #0
 800da28:	d023      	beq.n	800da72 <HAL_LTDC_IRQHandler+0x6a>
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	f003 0304 	and.w	r3, r3, #4
 800da30:	2b00      	cmp	r3, #0
 800da32:	d01e      	beq.n	800da72 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	f022 0204 	bic.w	r2, r2, #4
 800da42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	2204      	movs	r2, #4
 800da4a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800da52:	f043 0201 	orr.w	r2, r3, #1
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2204      	movs	r2, #4
 800da60:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2200      	movs	r2, #0
 800da68:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f000 f86f 	bl	800db50 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	f003 0302 	and.w	r3, r3, #2
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d023      	beq.n	800dac4 <HAL_LTDC_IRQHandler+0xbc>
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	f003 0302 	and.w	r3, r3, #2
 800da82:	2b00      	cmp	r3, #0
 800da84:	d01e      	beq.n	800dac4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	f022 0202 	bic.w	r2, r2, #2
 800da94:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	2202      	movs	r2, #2
 800da9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800daa4:	f043 0202 	orr.w	r2, r3, #2
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2204      	movs	r2, #4
 800dab2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2200      	movs	r2, #0
 800daba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f000 f846 	bl	800db50 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	f003 0301 	and.w	r3, r3, #1
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d01b      	beq.n	800db06 <HAL_LTDC_IRQHandler+0xfe>
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	f003 0301 	and.w	r3, r3, #1
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d016      	beq.n	800db06 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	f022 0201 	bic.w	r2, r2, #1
 800dae6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	2201      	movs	r2, #1
 800daee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2201      	movs	r2, #1
 800daf4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2200      	movs	r2, #0
 800dafc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f7f7 fe99 	bl	8005838 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	f003 0308 	and.w	r3, r3, #8
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d01b      	beq.n	800db48 <HAL_LTDC_IRQHandler+0x140>
 800db10:	68bb      	ldr	r3, [r7, #8]
 800db12:	f003 0308 	and.w	r3, r3, #8
 800db16:	2b00      	cmp	r3, #0
 800db18:	d016      	beq.n	800db48 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	f022 0208 	bic.w	r2, r2, #8
 800db28:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	2208      	movs	r2, #8
 800db30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2201      	movs	r2, #1
 800db36:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2200      	movs	r2, #0
 800db3e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f000 f80e 	bl	800db64 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800db48:	bf00      	nop
 800db4a:	3710      	adds	r7, #16
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}

0800db50 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800db50:	b480      	push	{r7}
 800db52:	b083      	sub	sp, #12
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800db58:	bf00      	nop
 800db5a:	370c      	adds	r7, #12
 800db5c:	46bd      	mov	sp, r7
 800db5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db62:	4770      	bx	lr

0800db64 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800db64:	b480      	push	{r7}
 800db66:	b083      	sub	sp, #12
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800db6c:	bf00      	nop
 800db6e:	370c      	adds	r7, #12
 800db70:	46bd      	mov	sp, r7
 800db72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db76:	4770      	bx	lr

0800db78 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800db78:	b5b0      	push	{r4, r5, r7, lr}
 800db7a:	b084      	sub	sp, #16
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	60f8      	str	r0, [r7, #12]
 800db80:	60b9      	str	r1, [r7, #8]
 800db82:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800db8a:	2b01      	cmp	r3, #1
 800db8c:	d101      	bne.n	800db92 <HAL_LTDC_ConfigLayer+0x1a>
 800db8e:	2302      	movs	r3, #2
 800db90:	e02c      	b.n	800dbec <HAL_LTDC_ConfigLayer+0x74>
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	2201      	movs	r2, #1
 800db96:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	2202      	movs	r2, #2
 800db9e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800dba2:	68fa      	ldr	r2, [r7, #12]
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2134      	movs	r1, #52	; 0x34
 800dba8:	fb01 f303 	mul.w	r3, r1, r3
 800dbac:	4413      	add	r3, r2
 800dbae:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800dbb2:	68bb      	ldr	r3, [r7, #8]
 800dbb4:	4614      	mov	r4, r2
 800dbb6:	461d      	mov	r5, r3
 800dbb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dbba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dbbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dbbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dbc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dbc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dbc4:	682b      	ldr	r3, [r5, #0]
 800dbc6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800dbc8:	687a      	ldr	r2, [r7, #4]
 800dbca:	68b9      	ldr	r1, [r7, #8]
 800dbcc:	68f8      	ldr	r0, [r7, #12]
 800dbce:	f000 f849 	bl	800dc64 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	2201      	movs	r2, #1
 800dbd8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	2201      	movs	r2, #1
 800dbde:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800dbea:	2300      	movs	r3, #0
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3710      	adds	r7, #16
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bdb0      	pop	{r4, r5, r7, pc}

0800dbf4 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800dbf4:	b480      	push	{r7}
 800dbf6:	b083      	sub	sp, #12
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
 800dbfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	d101      	bne.n	800dc0c <HAL_LTDC_ProgramLineEvent+0x18>
 800dc08:	2302      	movs	r3, #2
 800dc0a:	e023      	b.n	800dc54 <HAL_LTDC_ProgramLineEvent+0x60>
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2201      	movs	r2, #1
 800dc10:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2202      	movs	r2, #2
 800dc18:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	f022 0201 	bic.w	r2, r2, #1
 800dc2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800dc2c:	4a0c      	ldr	r2, [pc, #48]	; (800dc60 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	f042 0201 	orr.w	r2, r2, #1
 800dc40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2201      	movs	r2, #1
 800dc46:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800dc52:	2300      	movs	r3, #0
}
 800dc54:	4618      	mov	r0, r3
 800dc56:	370c      	adds	r7, #12
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5e:	4770      	bx	lr
 800dc60:	40016800 	.word	0x40016800

0800dc64 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800dc64:	b480      	push	{r7}
 800dc66:	b089      	sub	sp, #36	; 0x24
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	60f8      	str	r0, [r7, #12]
 800dc6c:	60b9      	str	r1, [r7, #8]
 800dc6e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	685a      	ldr	r2, [r3, #4]
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	68db      	ldr	r3, [r3, #12]
 800dc7a:	0c1b      	lsrs	r3, r3, #16
 800dc7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dc80:	4413      	add	r3, r2
 800dc82:	041b      	lsls	r3, r3, #16
 800dc84:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	461a      	mov	r2, r3
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	01db      	lsls	r3, r3, #7
 800dc90:	4413      	add	r3, r2
 800dc92:	3384      	adds	r3, #132	; 0x84
 800dc94:	685b      	ldr	r3, [r3, #4]
 800dc96:	68fa      	ldr	r2, [r7, #12]
 800dc98:	6812      	ldr	r2, [r2, #0]
 800dc9a:	4611      	mov	r1, r2
 800dc9c:	687a      	ldr	r2, [r7, #4]
 800dc9e:	01d2      	lsls	r2, r2, #7
 800dca0:	440a      	add	r2, r1
 800dca2:	3284      	adds	r2, #132	; 0x84
 800dca4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800dca8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	681a      	ldr	r2, [r3, #0]
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	68db      	ldr	r3, [r3, #12]
 800dcb4:	0c1b      	lsrs	r3, r3, #16
 800dcb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dcba:	4413      	add	r3, r2
 800dcbc:	1c5a      	adds	r2, r3, #1
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	01db      	lsls	r3, r3, #7
 800dcc8:	440b      	add	r3, r1
 800dcca:	3384      	adds	r3, #132	; 0x84
 800dccc:	4619      	mov	r1, r3
 800dcce:	69fb      	ldr	r3, [r7, #28]
 800dcd0:	4313      	orrs	r3, r2
 800dcd2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	68da      	ldr	r2, [r3, #12]
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	68db      	ldr	r3, [r3, #12]
 800dcde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dce2:	4413      	add	r3, r2
 800dce4:	041b      	lsls	r3, r3, #16
 800dce6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	461a      	mov	r2, r3
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	01db      	lsls	r3, r3, #7
 800dcf2:	4413      	add	r3, r2
 800dcf4:	3384      	adds	r3, #132	; 0x84
 800dcf6:	689b      	ldr	r3, [r3, #8]
 800dcf8:	68fa      	ldr	r2, [r7, #12]
 800dcfa:	6812      	ldr	r2, [r2, #0]
 800dcfc:	4611      	mov	r1, r2
 800dcfe:	687a      	ldr	r2, [r7, #4]
 800dd00:	01d2      	lsls	r2, r2, #7
 800dd02:	440a      	add	r2, r1
 800dd04:	3284      	adds	r2, #132	; 0x84
 800dd06:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800dd0a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	689a      	ldr	r2, [r3, #8]
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	68db      	ldr	r3, [r3, #12]
 800dd16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dd1a:	4413      	add	r3, r2
 800dd1c:	1c5a      	adds	r2, r3, #1
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	4619      	mov	r1, r3
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	01db      	lsls	r3, r3, #7
 800dd28:	440b      	add	r3, r1
 800dd2a:	3384      	adds	r3, #132	; 0x84
 800dd2c:	4619      	mov	r1, r3
 800dd2e:	69fb      	ldr	r3, [r7, #28]
 800dd30:	4313      	orrs	r3, r2
 800dd32:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	461a      	mov	r2, r3
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	01db      	lsls	r3, r3, #7
 800dd3e:	4413      	add	r3, r2
 800dd40:	3384      	adds	r3, #132	; 0x84
 800dd42:	691b      	ldr	r3, [r3, #16]
 800dd44:	68fa      	ldr	r2, [r7, #12]
 800dd46:	6812      	ldr	r2, [r2, #0]
 800dd48:	4611      	mov	r1, r2
 800dd4a:	687a      	ldr	r2, [r7, #4]
 800dd4c:	01d2      	lsls	r2, r2, #7
 800dd4e:	440a      	add	r2, r1
 800dd50:	3284      	adds	r2, #132	; 0x84
 800dd52:	f023 0307 	bic.w	r3, r3, #7
 800dd56:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	461a      	mov	r2, r3
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	01db      	lsls	r3, r3, #7
 800dd62:	4413      	add	r3, r2
 800dd64:	3384      	adds	r3, #132	; 0x84
 800dd66:	461a      	mov	r2, r3
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	691b      	ldr	r3, [r3, #16]
 800dd6c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dd74:	021b      	lsls	r3, r3, #8
 800dd76:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800dd78:	68bb      	ldr	r3, [r7, #8]
 800dd7a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800dd7e:	041b      	lsls	r3, r3, #16
 800dd80:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800dd82:	68bb      	ldr	r3, [r7, #8]
 800dd84:	699b      	ldr	r3, [r3, #24]
 800dd86:	061b      	lsls	r3, r3, #24
 800dd88:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	461a      	mov	r2, r3
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	01db      	lsls	r3, r3, #7
 800dd94:	4413      	add	r3, r2
 800dd96:	3384      	adds	r3, #132	; 0x84
 800dd98:	699b      	ldr	r3, [r3, #24]
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	461a      	mov	r2, r3
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	01db      	lsls	r3, r3, #7
 800dda4:	4413      	add	r3, r2
 800dda6:	3384      	adds	r3, #132	; 0x84
 800dda8:	461a      	mov	r2, r3
 800ddaa:	2300      	movs	r3, #0
 800ddac:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ddb4:	461a      	mov	r2, r3
 800ddb6:	69fb      	ldr	r3, [r7, #28]
 800ddb8:	431a      	orrs	r2, r3
 800ddba:	69bb      	ldr	r3, [r7, #24]
 800ddbc:	431a      	orrs	r2, r3
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	4619      	mov	r1, r3
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	01db      	lsls	r3, r3, #7
 800ddc8:	440b      	add	r3, r1
 800ddca:	3384      	adds	r3, #132	; 0x84
 800ddcc:	4619      	mov	r1, r3
 800ddce:	697b      	ldr	r3, [r7, #20]
 800ddd0:	4313      	orrs	r3, r2
 800ddd2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	461a      	mov	r2, r3
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	01db      	lsls	r3, r3, #7
 800ddde:	4413      	add	r3, r2
 800dde0:	3384      	adds	r3, #132	; 0x84
 800dde2:	695b      	ldr	r3, [r3, #20]
 800dde4:	68fa      	ldr	r2, [r7, #12]
 800dde6:	6812      	ldr	r2, [r2, #0]
 800dde8:	4611      	mov	r1, r2
 800ddea:	687a      	ldr	r2, [r7, #4]
 800ddec:	01d2      	lsls	r2, r2, #7
 800ddee:	440a      	add	r2, r1
 800ddf0:	3284      	adds	r2, #132	; 0x84
 800ddf2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ddf6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	461a      	mov	r2, r3
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	01db      	lsls	r3, r3, #7
 800de02:	4413      	add	r3, r2
 800de04:	3384      	adds	r3, #132	; 0x84
 800de06:	461a      	mov	r2, r3
 800de08:	68bb      	ldr	r3, [r7, #8]
 800de0a:	695b      	ldr	r3, [r3, #20]
 800de0c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	461a      	mov	r2, r3
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	01db      	lsls	r3, r3, #7
 800de18:	4413      	add	r3, r2
 800de1a:	3384      	adds	r3, #132	; 0x84
 800de1c:	69da      	ldr	r2, [r3, #28]
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	4619      	mov	r1, r3
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	01db      	lsls	r3, r3, #7
 800de28:	440b      	add	r3, r1
 800de2a:	3384      	adds	r3, #132	; 0x84
 800de2c:	4619      	mov	r1, r3
 800de2e:	4b58      	ldr	r3, [pc, #352]	; (800df90 <LTDC_SetConfig+0x32c>)
 800de30:	4013      	ands	r3, r2
 800de32:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	69da      	ldr	r2, [r3, #28]
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	6a1b      	ldr	r3, [r3, #32]
 800de3c:	68f9      	ldr	r1, [r7, #12]
 800de3e:	6809      	ldr	r1, [r1, #0]
 800de40:	4608      	mov	r0, r1
 800de42:	6879      	ldr	r1, [r7, #4]
 800de44:	01c9      	lsls	r1, r1, #7
 800de46:	4401      	add	r1, r0
 800de48:	3184      	adds	r1, #132	; 0x84
 800de4a:	4313      	orrs	r3, r2
 800de4c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	461a      	mov	r2, r3
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	01db      	lsls	r3, r3, #7
 800de58:	4413      	add	r3, r2
 800de5a:	3384      	adds	r3, #132	; 0x84
 800de5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	461a      	mov	r2, r3
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	01db      	lsls	r3, r3, #7
 800de68:	4413      	add	r3, r2
 800de6a:	3384      	adds	r3, #132	; 0x84
 800de6c:	461a      	mov	r2, r3
 800de6e:	2300      	movs	r3, #0
 800de70:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	461a      	mov	r2, r3
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	01db      	lsls	r3, r3, #7
 800de7c:	4413      	add	r3, r2
 800de7e:	3384      	adds	r3, #132	; 0x84
 800de80:	461a      	mov	r2, r3
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de86:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	691b      	ldr	r3, [r3, #16]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d102      	bne.n	800de96 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800de90:	2304      	movs	r3, #4
 800de92:	61fb      	str	r3, [r7, #28]
 800de94:	e01b      	b.n	800dece <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	691b      	ldr	r3, [r3, #16]
 800de9a:	2b01      	cmp	r3, #1
 800de9c:	d102      	bne.n	800dea4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800de9e:	2303      	movs	r3, #3
 800dea0:	61fb      	str	r3, [r7, #28]
 800dea2:	e014      	b.n	800dece <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800dea4:	68bb      	ldr	r3, [r7, #8]
 800dea6:	691b      	ldr	r3, [r3, #16]
 800dea8:	2b04      	cmp	r3, #4
 800deaa:	d00b      	beq.n	800dec4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800deb0:	2b02      	cmp	r3, #2
 800deb2:	d007      	beq.n	800dec4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800deb8:	2b03      	cmp	r3, #3
 800deba:	d003      	beq.n	800dec4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800dec0:	2b07      	cmp	r3, #7
 800dec2:	d102      	bne.n	800deca <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800dec4:	2302      	movs	r3, #2
 800dec6:	61fb      	str	r3, [r7, #28]
 800dec8:	e001      	b.n	800dece <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800deca:	2301      	movs	r3, #1
 800decc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	461a      	mov	r2, r3
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	01db      	lsls	r3, r3, #7
 800ded8:	4413      	add	r3, r2
 800deda:	3384      	adds	r3, #132	; 0x84
 800dedc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dede:	68fa      	ldr	r2, [r7, #12]
 800dee0:	6812      	ldr	r2, [r2, #0]
 800dee2:	4611      	mov	r1, r2
 800dee4:	687a      	ldr	r2, [r7, #4]
 800dee6:	01d2      	lsls	r2, r2, #7
 800dee8:	440a      	add	r2, r1
 800deea:	3284      	adds	r2, #132	; 0x84
 800deec:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800def0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800def6:	69fa      	ldr	r2, [r7, #28]
 800def8:	fb02 f303 	mul.w	r3, r2, r3
 800defc:	041a      	lsls	r2, r3, #16
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	6859      	ldr	r1, [r3, #4]
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	1acb      	subs	r3, r1, r3
 800df08:	69f9      	ldr	r1, [r7, #28]
 800df0a:	fb01 f303 	mul.w	r3, r1, r3
 800df0e:	3303      	adds	r3, #3
 800df10:	68f9      	ldr	r1, [r7, #12]
 800df12:	6809      	ldr	r1, [r1, #0]
 800df14:	4608      	mov	r0, r1
 800df16:	6879      	ldr	r1, [r7, #4]
 800df18:	01c9      	lsls	r1, r1, #7
 800df1a:	4401      	add	r1, r0
 800df1c:	3184      	adds	r1, #132	; 0x84
 800df1e:	4313      	orrs	r3, r2
 800df20:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	461a      	mov	r2, r3
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	01db      	lsls	r3, r3, #7
 800df2c:	4413      	add	r3, r2
 800df2e:	3384      	adds	r3, #132	; 0x84
 800df30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	4619      	mov	r1, r3
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	01db      	lsls	r3, r3, #7
 800df3c:	440b      	add	r3, r1
 800df3e:	3384      	adds	r3, #132	; 0x84
 800df40:	4619      	mov	r1, r3
 800df42:	4b14      	ldr	r3, [pc, #80]	; (800df94 <LTDC_SetConfig+0x330>)
 800df44:	4013      	ands	r3, r2
 800df46:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	461a      	mov	r2, r3
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	01db      	lsls	r3, r3, #7
 800df52:	4413      	add	r3, r2
 800df54:	3384      	adds	r3, #132	; 0x84
 800df56:	461a      	mov	r2, r3
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df5c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	461a      	mov	r2, r3
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	01db      	lsls	r3, r3, #7
 800df68:	4413      	add	r3, r2
 800df6a:	3384      	adds	r3, #132	; 0x84
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	68fa      	ldr	r2, [r7, #12]
 800df70:	6812      	ldr	r2, [r2, #0]
 800df72:	4611      	mov	r1, r2
 800df74:	687a      	ldr	r2, [r7, #4]
 800df76:	01d2      	lsls	r2, r2, #7
 800df78:	440a      	add	r2, r1
 800df7a:	3284      	adds	r2, #132	; 0x84
 800df7c:	f043 0301 	orr.w	r3, r3, #1
 800df80:	6013      	str	r3, [r2, #0]
}
 800df82:	bf00      	nop
 800df84:	3724      	adds	r7, #36	; 0x24
 800df86:	46bd      	mov	sp, r7
 800df88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8c:	4770      	bx	lr
 800df8e:	bf00      	nop
 800df90:	fffff8f8 	.word	0xfffff8f8
 800df94:	fffff800 	.word	0xfffff800

0800df98 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b082      	sub	sp, #8
 800df9c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800dfa2:	4b23      	ldr	r3, [pc, #140]	; (800e030 <HAL_PWREx_EnableOverDrive+0x98>)
 800dfa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfa6:	4a22      	ldr	r2, [pc, #136]	; (800e030 <HAL_PWREx_EnableOverDrive+0x98>)
 800dfa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dfac:	6413      	str	r3, [r2, #64]	; 0x40
 800dfae:	4b20      	ldr	r3, [pc, #128]	; (800e030 <HAL_PWREx_EnableOverDrive+0x98>)
 800dfb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dfb6:	603b      	str	r3, [r7, #0]
 800dfb8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800dfba:	4b1e      	ldr	r3, [pc, #120]	; (800e034 <HAL_PWREx_EnableOverDrive+0x9c>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	4a1d      	ldr	r2, [pc, #116]	; (800e034 <HAL_PWREx_EnableOverDrive+0x9c>)
 800dfc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dfc4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800dfc6:	f7fc ff37 	bl	800ae38 <HAL_GetTick>
 800dfca:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800dfcc:	e009      	b.n	800dfe2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800dfce:	f7fc ff33 	bl	800ae38 <HAL_GetTick>
 800dfd2:	4602      	mov	r2, r0
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	1ad3      	subs	r3, r2, r3
 800dfd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dfdc:	d901      	bls.n	800dfe2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800dfde:	2303      	movs	r3, #3
 800dfe0:	e022      	b.n	800e028 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800dfe2:	4b14      	ldr	r3, [pc, #80]	; (800e034 <HAL_PWREx_EnableOverDrive+0x9c>)
 800dfe4:	685b      	ldr	r3, [r3, #4]
 800dfe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dfea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dfee:	d1ee      	bne.n	800dfce <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800dff0:	4b10      	ldr	r3, [pc, #64]	; (800e034 <HAL_PWREx_EnableOverDrive+0x9c>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	4a0f      	ldr	r2, [pc, #60]	; (800e034 <HAL_PWREx_EnableOverDrive+0x9c>)
 800dff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dffa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800dffc:	f7fc ff1c 	bl	800ae38 <HAL_GetTick>
 800e000:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e002:	e009      	b.n	800e018 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800e004:	f7fc ff18 	bl	800ae38 <HAL_GetTick>
 800e008:	4602      	mov	r2, r0
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	1ad3      	subs	r3, r2, r3
 800e00e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e012:	d901      	bls.n	800e018 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800e014:	2303      	movs	r3, #3
 800e016:	e007      	b.n	800e028 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e018:	4b06      	ldr	r3, [pc, #24]	; (800e034 <HAL_PWREx_EnableOverDrive+0x9c>)
 800e01a:	685b      	ldr	r3, [r3, #4]
 800e01c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e020:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e024:	d1ee      	bne.n	800e004 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800e026:	2300      	movs	r3, #0
}
 800e028:	4618      	mov	r0, r3
 800e02a:	3708      	adds	r7, #8
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}
 800e030:	40023800 	.word	0x40023800
 800e034:	40007000 	.word	0x40007000

0800e038 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b086      	sub	sp, #24
 800e03c:	af02      	add	r7, sp, #8
 800e03e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800e040:	f7fc fefa 	bl	800ae38 <HAL_GetTick>
 800e044:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d101      	bne.n	800e050 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800e04c:	2301      	movs	r3, #1
 800e04e:	e067      	b.n	800e120 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e056:	b2db      	uxtb	r3, r3
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d10b      	bne.n	800e074 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2200      	movs	r2, #0
 800e060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800e064:	6878      	ldr	r0, [r7, #4]
 800e066:	f7f4 fd61 	bl	8002b2c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800e06a:	f241 3188 	movw	r1, #5000	; 0x1388
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	f000 fcf2 	bl	800ea58 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	689b      	ldr	r3, [r3, #8]
 800e082:	3b01      	subs	r3, #1
 800e084:	021a      	lsls	r2, r3, #8
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	430a      	orrs	r2, r1
 800e08c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e092:	9300      	str	r3, [sp, #0]
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2200      	movs	r2, #0
 800e098:	2120      	movs	r1, #32
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f000 fd1d 	bl	800eada <QSPI_WaitFlagStateUntilTimeout>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800e0a4:	7afb      	ldrb	r3, [r7, #11]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d135      	bne.n	800e116 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	681a      	ldr	r2, [r3, #0]
 800e0b0:	4b1d      	ldr	r3, [pc, #116]	; (800e128 <HAL_QSPI_Init+0xf0>)
 800e0b2:	4013      	ands	r3, r2
 800e0b4:	687a      	ldr	r2, [r7, #4]
 800e0b6:	6852      	ldr	r2, [r2, #4]
 800e0b8:	0611      	lsls	r1, r2, #24
 800e0ba:	687a      	ldr	r2, [r7, #4]
 800e0bc:	68d2      	ldr	r2, [r2, #12]
 800e0be:	4311      	orrs	r1, r2
 800e0c0:	687a      	ldr	r2, [r7, #4]
 800e0c2:	69d2      	ldr	r2, [r2, #28]
 800e0c4:	4311      	orrs	r1, r2
 800e0c6:	687a      	ldr	r2, [r7, #4]
 800e0c8:	6a12      	ldr	r2, [r2, #32]
 800e0ca:	4311      	orrs	r1, r2
 800e0cc:	687a      	ldr	r2, [r7, #4]
 800e0ce:	6812      	ldr	r2, [r2, #0]
 800e0d0:	430b      	orrs	r3, r1
 800e0d2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	685a      	ldr	r2, [r3, #4]
 800e0da:	4b14      	ldr	r3, [pc, #80]	; (800e12c <HAL_QSPI_Init+0xf4>)
 800e0dc:	4013      	ands	r3, r2
 800e0de:	687a      	ldr	r2, [r7, #4]
 800e0e0:	6912      	ldr	r2, [r2, #16]
 800e0e2:	0411      	lsls	r1, r2, #16
 800e0e4:	687a      	ldr	r2, [r7, #4]
 800e0e6:	6952      	ldr	r2, [r2, #20]
 800e0e8:	4311      	orrs	r1, r2
 800e0ea:	687a      	ldr	r2, [r7, #4]
 800e0ec:	6992      	ldr	r2, [r2, #24]
 800e0ee:	4311      	orrs	r1, r2
 800e0f0:	687a      	ldr	r2, [r7, #4]
 800e0f2:	6812      	ldr	r2, [r2, #0]
 800e0f4:	430b      	orrs	r3, r1
 800e0f6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	681a      	ldr	r2, [r3, #0]
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	f042 0201 	orr.w	r2, r2, #1
 800e106:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2200      	movs	r2, #0
 800e10c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2201      	movs	r2, #1
 800e112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2200      	movs	r2, #0
 800e11a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800e11e:	7afb      	ldrb	r3, [r7, #11]
}
 800e120:	4618      	mov	r0, r3
 800e122:	3710      	adds	r7, #16
 800e124:	46bd      	mov	sp, r7
 800e126:	bd80      	pop	{r7, pc}
 800e128:	00ffff2f 	.word	0x00ffff2f
 800e12c:	ffe0f8fe 	.word	0xffe0f8fe

0800e130 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b082      	sub	sp, #8
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d101      	bne.n	800e142 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800e13e:	2301      	movs	r3, #1
 800e140:	e016      	b.n	800e170 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	681a      	ldr	r2, [r3, #0]
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	f022 0201 	bic.w	r2, r2, #1
 800e150:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	f7f4 fd74 	bl	8002c40 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2200      	movs	r2, #0
 800e15c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	2200      	movs	r2, #0
 800e162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	2200      	movs	r2, #0
 800e16a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800e16e:	2300      	movs	r3, #0
}
 800e170:	4618      	mov	r0, r3
 800e172:	3708      	adds	r7, #8
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}

0800e178 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b086      	sub	sp, #24
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	689b      	ldr	r3, [r3, #8]
 800e186:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800e190:	697b      	ldr	r3, [r7, #20]
 800e192:	f003 0304 	and.w	r3, r3, #4
 800e196:	2b00      	cmp	r3, #0
 800e198:	d064      	beq.n	800e264 <HAL_QSPI_IRQHandler+0xec>
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d05f      	beq.n	800e264 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	3320      	adds	r3, #32
 800e1aa:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e1b2:	b2db      	uxtb	r3, r3
 800e1b4:	2b12      	cmp	r3, #18
 800e1b6:	d125      	bne.n	800e204 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800e1b8:	e01c      	b.n	800e1f4 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d00f      	beq.n	800e1e2 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1c6:	781a      	ldrb	r2, [r3, #0]
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1d0:	1c5a      	adds	r2, r3, #1
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1da:	1e5a      	subs	r2, r3, #1
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	62da      	str	r2, [r3, #44]	; 0x2c
 800e1e0:	e008      	b.n	800e1f4 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	681a      	ldr	r2, [r3, #0]
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e1f0:	601a      	str	r2, [r3, #0]
          break;
 800e1f2:	e033      	b.n	800e25c <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	689b      	ldr	r3, [r3, #8]
 800e1fa:	f003 0304 	and.w	r3, r3, #4
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d1db      	bne.n	800e1ba <HAL_QSPI_IRQHandler+0x42>
 800e202:	e02b      	b.n	800e25c <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e20a:	b2db      	uxtb	r3, r3
 800e20c:	2b22      	cmp	r3, #34	; 0x22
 800e20e:	d125      	bne.n	800e25c <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800e210:	e01d      	b.n	800e24e <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e216:	2b00      	cmp	r3, #0
 800e218:	d010      	beq.n	800e23c <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e21e:	68fa      	ldr	r2, [r7, #12]
 800e220:	7812      	ldrb	r2, [r2, #0]
 800e222:	b2d2      	uxtb	r2, r2
 800e224:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e22a:	1c5a      	adds	r2, r3, #1
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e234:	1e5a      	subs	r2, r3, #1
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	639a      	str	r2, [r3, #56]	; 0x38
 800e23a:	e008      	b.n	800e24e <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	681a      	ldr	r2, [r3, #0]
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e24a:	601a      	str	r2, [r3, #0]
          break;
 800e24c:	e006      	b.n	800e25c <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	689b      	ldr	r3, [r3, #8]
 800e254:	f003 0304 	and.w	r3, r3, #4
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d1da      	bne.n	800e212 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800e25c:	6878      	ldr	r0, [r7, #4]
 800e25e:	f000 fbdd 	bl	800ea1c <HAL_QSPI_FifoThresholdCallback>
 800e262:	e13c      	b.n	800e4de <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 800e264:	697b      	ldr	r3, [r7, #20]
 800e266:	f003 0302 	and.w	r3, r3, #2
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	f000 80b0 	beq.w	800e3d0 <HAL_QSPI_IRQHandler+0x258>
 800e270:	693b      	ldr	r3, [r7, #16]
 800e272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e276:	2b00      	cmp	r3, #0
 800e278:	f000 80aa 	beq.w	800e3d0 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	2202      	movs	r2, #2
 800e282:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	681a      	ldr	r2, [r3, #0]
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800e292:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e29a:	b2db      	uxtb	r3, r3
 800e29c:	2b12      	cmp	r3, #18
 800e29e:	d120      	bne.n	800e2e2 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	f003 0304 	and.w	r3, r3, #4
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d011      	beq.n	800e2d2 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	681a      	ldr	r2, [r3, #0]
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	f022 0204 	bic.w	r2, r2, #4
 800e2bc:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	681a      	ldr	r2, [r3, #0]
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	f022 0201 	bic.w	r2, r2, #1
 800e2d0:	601a      	str	r2, [r3, #0]
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2201      	movs	r2, #1
 800e2d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f000 fb94 	bl	800ea08 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800e2e0:	e0fa      	b.n	800e4d8 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e2e8:	b2db      	uxtb	r3, r3
 800e2ea:	2b22      	cmp	r3, #34	; 0x22
 800e2ec:	d143      	bne.n	800e376 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	f003 0304 	and.w	r3, r3, #4
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d012      	beq.n	800e322 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	681a      	ldr	r2, [r3, #0]
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	f022 0204 	bic.w	r2, r2, #4
 800e30a:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	681a      	ldr	r2, [r3, #0]
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f022 0201 	bic.w	r2, r2, #1
 800e31e:	601a      	str	r2, [r3, #0]
 800e320:	e021      	b.n	800e366 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	3320      	adds	r3, #32
 800e328:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800e32a:	e013      	b.n	800e354 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e330:	2b00      	cmp	r3, #0
 800e332:	d017      	beq.n	800e364 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e338:	68fa      	ldr	r2, [r7, #12]
 800e33a:	7812      	ldrb	r2, [r2, #0]
 800e33c:	b2d2      	uxtb	r2, r2
 800e33e:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e344:	1c5a      	adds	r2, r3, #1
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e34e:	1e5a      	subs	r2, r3, #1
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	689b      	ldr	r3, [r3, #8]
 800e35a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d1e4      	bne.n	800e32c <HAL_QSPI_IRQHandler+0x1b4>
 800e362:	e000      	b.n	800e366 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800e364:	bf00      	nop
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	2201      	movs	r2, #1
 800e36a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f000 fb40 	bl	800e9f4 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800e374:	e0b0      	b.n	800e4d8 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e37c:	b2db      	uxtb	r3, r3
 800e37e:	2b02      	cmp	r3, #2
 800e380:	d107      	bne.n	800e392 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2201      	movs	r2, #1
 800e386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f000 fb28 	bl	800e9e0 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800e390:	e0a2      	b.n	800e4d8 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e398:	b2db      	uxtb	r3, r3
 800e39a:	2b08      	cmp	r3, #8
 800e39c:	f040 809c 	bne.w	800e4d8 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	695a      	ldr	r2, [r3, #20]
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800e3ae:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2201      	movs	r2, #1
 800e3b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d103      	bne.n	800e3c8 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800e3c0:	6878      	ldr	r0, [r7, #4]
 800e3c2:	f000 fb03 	bl	800e9cc <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800e3c6:	e087      	b.n	800e4d8 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800e3c8:	6878      	ldr	r0, [r7, #4]
 800e3ca:	f000 faf5 	bl	800e9b8 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800e3ce:	e083      	b.n	800e4d8 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800e3d0:	697b      	ldr	r3, [r7, #20]
 800e3d2:	f003 0308 	and.w	r3, r3, #8
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d01f      	beq.n	800e41a <HAL_QSPI_IRQHandler+0x2a2>
 800e3da:	693b      	ldr	r3, [r7, #16]
 800e3dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d01a      	beq.n	800e41a <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	2208      	movs	r2, #8
 800e3ea:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d00b      	beq.n	800e412 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	681a      	ldr	r2, [r3, #0]
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800e408:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	2201      	movs	r2, #1
 800e40e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	f000 fb0c 	bl	800ea30 <HAL_QSPI_StatusMatchCallback>
 800e418:	e061      	b.n	800e4de <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800e41a:	697b      	ldr	r3, [r7, #20]
 800e41c:	f003 0301 	and.w	r3, r3, #1
 800e420:	2b00      	cmp	r3, #0
 800e422:	d047      	beq.n	800e4b4 <HAL_QSPI_IRQHandler+0x33c>
 800e424:	693b      	ldr	r3, [r7, #16]
 800e426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d042      	beq.n	800e4b4 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	2201      	movs	r2, #1
 800e434:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	681a      	ldr	r2, [r3, #0]
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800e444:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e44a:	f043 0202 	orr.w	r2, r3, #2
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	f003 0304 	and.w	r3, r3, #4
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d021      	beq.n	800e4a4 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	681a      	ldr	r2, [r3, #0]
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	f022 0204 	bic.w	r2, r2, #4
 800e46e:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e474:	4a1c      	ldr	r2, [pc, #112]	; (800e4e8 <HAL_QSPI_IRQHandler+0x370>)
 800e476:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e47c:	4618      	mov	r0, r3
 800e47e:	f7fe fa73 	bl	800c968 <HAL_DMA_Abort_IT>
 800e482:	4603      	mov	r3, r0
 800e484:	2b00      	cmp	r3, #0
 800e486:	d029      	beq.n	800e4dc <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e48c:	f043 0204 	orr.w	r2, r3, #4
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2201      	movs	r2, #1
 800e498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800e49c:	6878      	ldr	r0, [r7, #4]
 800e49e:	f000 fa8b 	bl	800e9b8 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800e4a2:	e01b      	b.n	800e4dc <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2201      	movs	r2, #1
 800e4a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f000 fa83 	bl	800e9b8 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800e4b2:	e013      	b.n	800e4dc <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800e4b4:	697b      	ldr	r3, [r7, #20]
 800e4b6:	f003 0310 	and.w	r3, r3, #16
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d00f      	beq.n	800e4de <HAL_QSPI_IRQHandler+0x366>
 800e4be:	693b      	ldr	r3, [r7, #16]
 800e4c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d00a      	beq.n	800e4de <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	2210      	movs	r2, #16
 800e4ce:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	f000 fab7 	bl	800ea44 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800e4d6:	e002      	b.n	800e4de <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800e4d8:	bf00      	nop
 800e4da:	e000      	b.n	800e4de <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800e4dc:	bf00      	nop
}
 800e4de:	bf00      	nop
 800e4e0:	3718      	adds	r7, #24
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
 800e4e6:	bf00      	nop
 800e4e8:	0800ea75 	.word	0x0800ea75

0800e4ec <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b088      	sub	sp, #32
 800e4f0:	af02      	add	r7, sp, #8
 800e4f2:	60f8      	str	r0, [r7, #12]
 800e4f4:	60b9      	str	r1, [r7, #8]
 800e4f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800e4f8:	f7fc fc9e 	bl	800ae38 <HAL_GetTick>
 800e4fc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e504:	b2db      	uxtb	r3, r3
 800e506:	2b01      	cmp	r3, #1
 800e508:	d101      	bne.n	800e50e <HAL_QSPI_Command+0x22>
 800e50a:	2302      	movs	r3, #2
 800e50c:	e048      	b.n	800e5a0 <HAL_QSPI_Command+0xb4>
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	2201      	movs	r2, #1
 800e512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e51c:	b2db      	uxtb	r3, r3
 800e51e:	2b01      	cmp	r3, #1
 800e520:	d137      	bne.n	800e592 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	2200      	movs	r2, #0
 800e526:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	2202      	movs	r2, #2
 800e52c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	9300      	str	r3, [sp, #0]
 800e534:	693b      	ldr	r3, [r7, #16]
 800e536:	2200      	movs	r2, #0
 800e538:	2120      	movs	r1, #32
 800e53a:	68f8      	ldr	r0, [r7, #12]
 800e53c:	f000 facd 	bl	800eada <QSPI_WaitFlagStateUntilTimeout>
 800e540:	4603      	mov	r3, r0
 800e542:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800e544:	7dfb      	ldrb	r3, [r7, #23]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d125      	bne.n	800e596 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800e54a:	2200      	movs	r2, #0
 800e54c:	68b9      	ldr	r1, [r7, #8]
 800e54e:	68f8      	ldr	r0, [r7, #12]
 800e550:	f000 fafa 	bl	800eb48 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800e554:	68bb      	ldr	r3, [r7, #8]
 800e556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d115      	bne.n	800e588 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	9300      	str	r3, [sp, #0]
 800e560:	693b      	ldr	r3, [r7, #16]
 800e562:	2201      	movs	r2, #1
 800e564:	2102      	movs	r1, #2
 800e566:	68f8      	ldr	r0, [r7, #12]
 800e568:	f000 fab7 	bl	800eada <QSPI_WaitFlagStateUntilTimeout>
 800e56c:	4603      	mov	r3, r0
 800e56e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800e570:	7dfb      	ldrb	r3, [r7, #23]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d10f      	bne.n	800e596 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	2202      	movs	r2, #2
 800e57c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	2201      	movs	r2, #1
 800e582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e586:	e006      	b.n	800e596 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	2201      	movs	r2, #1
 800e58c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e590:	e001      	b.n	800e596 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800e592:	2302      	movs	r3, #2
 800e594:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	2200      	movs	r2, #0
 800e59a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800e59e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	3718      	adds	r7, #24
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}

0800e5a8 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b08a      	sub	sp, #40	; 0x28
 800e5ac:	af02      	add	r7, sp, #8
 800e5ae:	60f8      	str	r0, [r7, #12]
 800e5b0:	60b9      	str	r1, [r7, #8]
 800e5b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800e5b8:	f7fc fc3e 	bl	800ae38 <HAL_GetTick>
 800e5bc:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	3320      	adds	r3, #32
 800e5c4:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e5cc:	b2db      	uxtb	r3, r3
 800e5ce:	2b01      	cmp	r3, #1
 800e5d0:	d101      	bne.n	800e5d6 <HAL_QSPI_Transmit+0x2e>
 800e5d2:	2302      	movs	r3, #2
 800e5d4:	e076      	b.n	800e6c4 <HAL_QSPI_Transmit+0x11c>
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	2201      	movs	r2, #1
 800e5da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e5e4:	b2db      	uxtb	r3, r3
 800e5e6:	2b01      	cmp	r3, #1
 800e5e8:	d165      	bne.n	800e6b6 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800e5f0:	68bb      	ldr	r3, [r7, #8]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d056      	beq.n	800e6a4 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	2212      	movs	r2, #18
 800e5fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	691b      	ldr	r3, [r3, #16]
 800e604:	1c5a      	adds	r2, r3, #1
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	691b      	ldr	r3, [r3, #16]
 800e610:	1c5a      	adds	r2, r3, #1
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	68ba      	ldr	r2, [r7, #8]
 800e61a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	695a      	ldr	r2, [r3, #20]
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800e62a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800e62c:	e01b      	b.n	800e666 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	9300      	str	r3, [sp, #0]
 800e632:	69bb      	ldr	r3, [r7, #24]
 800e634:	2201      	movs	r2, #1
 800e636:	2104      	movs	r1, #4
 800e638:	68f8      	ldr	r0, [r7, #12]
 800e63a:	f000 fa4e 	bl	800eada <QSPI_WaitFlagStateUntilTimeout>
 800e63e:	4603      	mov	r3, r0
 800e640:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800e642:	7ffb      	ldrb	r3, [r7, #31]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d113      	bne.n	800e670 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e64c:	781a      	ldrb	r2, [r3, #0]
 800e64e:	697b      	ldr	r3, [r7, #20]
 800e650:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e656:	1c5a      	adds	r2, r3, #1
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e660:	1e5a      	subs	r2, r3, #1
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d1df      	bne.n	800e62e <HAL_QSPI_Transmit+0x86>
 800e66e:	e000      	b.n	800e672 <HAL_QSPI_Transmit+0xca>
          break;
 800e670:	bf00      	nop
      }

      if (status == HAL_OK)
 800e672:	7ffb      	ldrb	r3, [r7, #31]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d110      	bne.n	800e69a <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	9300      	str	r3, [sp, #0]
 800e67c:	69bb      	ldr	r3, [r7, #24]
 800e67e:	2201      	movs	r2, #1
 800e680:	2102      	movs	r1, #2
 800e682:	68f8      	ldr	r0, [r7, #12]
 800e684:	f000 fa29 	bl	800eada <QSPI_WaitFlagStateUntilTimeout>
 800e688:	4603      	mov	r3, r0
 800e68a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800e68c:	7ffb      	ldrb	r3, [r7, #31]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d103      	bne.n	800e69a <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	2202      	movs	r2, #2
 800e698:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	2201      	movs	r2, #1
 800e69e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e6a2:	e00a      	b.n	800e6ba <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6a8:	f043 0208 	orr.w	r2, r3, #8
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	77fb      	strb	r3, [r7, #31]
 800e6b4:	e001      	b.n	800e6ba <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800e6b6:	2302      	movs	r3, #2
 800e6b8:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	2200      	movs	r2, #0
 800e6be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800e6c2:	7ffb      	ldrb	r3, [r7, #31]
}
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	3720      	adds	r7, #32
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bd80      	pop	{r7, pc}

0800e6cc <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b08a      	sub	sp, #40	; 0x28
 800e6d0:	af02      	add	r7, sp, #8
 800e6d2:	60f8      	str	r0, [r7, #12]
 800e6d4:	60b9      	str	r1, [r7, #8]
 800e6d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e6d8:	2300      	movs	r3, #0
 800e6da:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800e6dc:	f7fc fbac 	bl	800ae38 <HAL_GetTick>
 800e6e0:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	699b      	ldr	r3, [r3, #24]
 800e6e8:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	3320      	adds	r3, #32
 800e6f0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e6f8:	b2db      	uxtb	r3, r3
 800e6fa:	2b01      	cmp	r3, #1
 800e6fc:	d101      	bne.n	800e702 <HAL_QSPI_Receive+0x36>
 800e6fe:	2302      	movs	r3, #2
 800e700:	e07d      	b.n	800e7fe <HAL_QSPI_Receive+0x132>
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	2201      	movs	r2, #1
 800e706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e710:	b2db      	uxtb	r3, r3
 800e712:	2b01      	cmp	r3, #1
 800e714:	d16c      	bne.n	800e7f0 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	2200      	movs	r2, #0
 800e71a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800e71c:	68bb      	ldr	r3, [r7, #8]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d05d      	beq.n	800e7de <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	2222      	movs	r2, #34	; 0x22
 800e726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	691b      	ldr	r3, [r3, #16]
 800e730:	1c5a      	adds	r2, r3, #1
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	691b      	ldr	r3, [r3, #16]
 800e73c:	1c5a      	adds	r2, r3, #1
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	68ba      	ldr	r2, [r7, #8]
 800e746:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	695b      	ldr	r3, [r3, #20]
 800e74e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800e75a:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	697a      	ldr	r2, [r7, #20]
 800e762:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800e764:	e01c      	b.n	800e7a0 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	9300      	str	r3, [sp, #0]
 800e76a:	69bb      	ldr	r3, [r7, #24]
 800e76c:	2201      	movs	r2, #1
 800e76e:	2106      	movs	r1, #6
 800e770:	68f8      	ldr	r0, [r7, #12]
 800e772:	f000 f9b2 	bl	800eada <QSPI_WaitFlagStateUntilTimeout>
 800e776:	4603      	mov	r3, r0
 800e778:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800e77a:	7ffb      	ldrb	r3, [r7, #31]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d114      	bne.n	800e7aa <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e784:	693a      	ldr	r2, [r7, #16]
 800e786:	7812      	ldrb	r2, [r2, #0]
 800e788:	b2d2      	uxtb	r2, r2
 800e78a:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e790:	1c5a      	adds	r2, r3, #1
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e79a:	1e5a      	subs	r2, r3, #1
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d1de      	bne.n	800e766 <HAL_QSPI_Receive+0x9a>
 800e7a8:	e000      	b.n	800e7ac <HAL_QSPI_Receive+0xe0>
          break;
 800e7aa:	bf00      	nop
      }

      if (status == HAL_OK)
 800e7ac:	7ffb      	ldrb	r3, [r7, #31]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d110      	bne.n	800e7d4 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	9300      	str	r3, [sp, #0]
 800e7b6:	69bb      	ldr	r3, [r7, #24]
 800e7b8:	2201      	movs	r2, #1
 800e7ba:	2102      	movs	r1, #2
 800e7bc:	68f8      	ldr	r0, [r7, #12]
 800e7be:	f000 f98c 	bl	800eada <QSPI_WaitFlagStateUntilTimeout>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800e7c6:	7ffb      	ldrb	r3, [r7, #31]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d103      	bne.n	800e7d4 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	2202      	movs	r2, #2
 800e7d2:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	2201      	movs	r2, #1
 800e7d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e7dc:	e00a      	b.n	800e7f4 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7e2:	f043 0208 	orr.w	r2, r3, #8
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	77fb      	strb	r3, [r7, #31]
 800e7ee:	e001      	b.n	800e7f4 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800e7f0:	2302      	movs	r3, #2
 800e7f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800e7fc:	7ffb      	ldrb	r3, [r7, #31]
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	3720      	adds	r7, #32
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}

0800e806 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800e806:	b580      	push	{r7, lr}
 800e808:	b088      	sub	sp, #32
 800e80a:	af02      	add	r7, sp, #8
 800e80c:	60f8      	str	r0, [r7, #12]
 800e80e:	60b9      	str	r1, [r7, #8]
 800e810:	607a      	str	r2, [r7, #4]
 800e812:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800e814:	f7fc fb10 	bl	800ae38 <HAL_GetTick>
 800e818:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e820:	b2db      	uxtb	r3, r3
 800e822:	2b01      	cmp	r3, #1
 800e824:	d101      	bne.n	800e82a <HAL_QSPI_AutoPolling+0x24>
 800e826:	2302      	movs	r3, #2
 800e828:	e060      	b.n	800e8ec <HAL_QSPI_AutoPolling+0xe6>
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	2201      	movs	r2, #1
 800e82e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e838:	b2db      	uxtb	r3, r3
 800e83a:	2b01      	cmp	r3, #1
 800e83c:	d14f      	bne.n	800e8de <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	2200      	movs	r2, #0
 800e842:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	2242      	movs	r2, #66	; 0x42
 800e848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	9300      	str	r3, [sp, #0]
 800e850:	693b      	ldr	r3, [r7, #16]
 800e852:	2200      	movs	r2, #0
 800e854:	2120      	movs	r1, #32
 800e856:	68f8      	ldr	r0, [r7, #12]
 800e858:	f000 f93f 	bl	800eada <QSPI_WaitFlagStateUntilTimeout>
 800e85c:	4603      	mov	r3, r0
 800e85e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800e860:	7dfb      	ldrb	r3, [r7, #23]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d13d      	bne.n	800e8e2 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	687a      	ldr	r2, [r7, #4]
 800e86c:	6812      	ldr	r2, [r2, #0]
 800e86e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	687a      	ldr	r2, [r7, #4]
 800e876:	6852      	ldr	r2, [r2, #4]
 800e878:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	687a      	ldr	r2, [r7, #4]
 800e880:	6892      	ldr	r2, [r2, #8]
 800e882:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	691b      	ldr	r3, [r3, #16]
 800e892:	431a      	orrs	r2, r3
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800e89c:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	68da      	ldr	r2, [r3, #12]
 800e8a2:	68bb      	ldr	r3, [r7, #8]
 800e8a4:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800e8a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e8aa:	68b9      	ldr	r1, [r7, #8]
 800e8ac:	68f8      	ldr	r0, [r7, #12]
 800e8ae:	f000 f94b 	bl	800eb48 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	9300      	str	r3, [sp, #0]
 800e8b6:	693b      	ldr	r3, [r7, #16]
 800e8b8:	2201      	movs	r2, #1
 800e8ba:	2108      	movs	r1, #8
 800e8bc:	68f8      	ldr	r0, [r7, #12]
 800e8be:	f000 f90c 	bl	800eada <QSPI_WaitFlagStateUntilTimeout>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800e8c6:	7dfb      	ldrb	r3, [r7, #23]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d10a      	bne.n	800e8e2 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	2208      	movs	r2, #8
 800e8d2:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	2201      	movs	r2, #1
 800e8d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e8dc:	e001      	b.n	800e8e2 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800e8de:	2302      	movs	r3, #2
 800e8e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800e8ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	3718      	adds	r7, #24
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}

0800e8f4 <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b088      	sub	sp, #32
 800e8f8:	af02      	add	r7, sp, #8
 800e8fa:	60f8      	str	r0, [r7, #12]
 800e8fc:	60b9      	str	r1, [r7, #8]
 800e8fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800e900:	f7fc fa9a 	bl	800ae38 <HAL_GetTick>
 800e904:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e90c:	b2db      	uxtb	r3, r3
 800e90e:	2b01      	cmp	r3, #1
 800e910:	d101      	bne.n	800e916 <HAL_QSPI_MemoryMapped+0x22>
 800e912:	2302      	movs	r3, #2
 800e914:	e04c      	b.n	800e9b0 <HAL_QSPI_MemoryMapped+0xbc>
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	2201      	movs	r2, #1
 800e91a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e924:	b2db      	uxtb	r3, r3
 800e926:	2b01      	cmp	r3, #1
 800e928:	d13b      	bne.n	800e9a2 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	2200      	movs	r2, #0
 800e92e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	2282      	movs	r2, #130	; 0x82
 800e934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e93c:	9300      	str	r3, [sp, #0]
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	2200      	movs	r2, #0
 800e942:	2120      	movs	r1, #32
 800e944:	68f8      	ldr	r0, [r7, #12]
 800e946:	f000 f8c8 	bl	800eada <QSPI_WaitFlagStateUntilTimeout>
 800e94a:	4603      	mov	r3, r0
 800e94c:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800e94e:	7dfb      	ldrb	r3, [r7, #23]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d128      	bne.n	800e9a6 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	f023 0108 	bic.w	r1, r3, #8
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	685a      	ldr	r2, [r3, #4]
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	430a      	orrs	r2, r1
 800e968:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	685b      	ldr	r3, [r3, #4]
 800e96e:	2b08      	cmp	r3, #8
 800e970:	d110      	bne.n	800e994 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	687a      	ldr	r2, [r7, #4]
 800e978:	6812      	ldr	r2, [r2, #0]
 800e97a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	2210      	movs	r2, #16
 800e982:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	681a      	ldr	r2, [r3, #0]
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800e992:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800e994:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800e998:	68b9      	ldr	r1, [r7, #8]
 800e99a:	68f8      	ldr	r0, [r7, #12]
 800e99c:	f000 f8d4 	bl	800eb48 <QSPI_Config>
 800e9a0:	e001      	b.n	800e9a6 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800e9a2:	2302      	movs	r3, #2
 800e9a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800e9ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	3718      	adds	r7, #24
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}

0800e9b8 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 800e9b8:	b480      	push	{r7}
 800e9ba:	b083      	sub	sp, #12
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800e9c0:	bf00      	nop
 800e9c2:	370c      	adds	r7, #12
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ca:	4770      	bx	lr

0800e9cc <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800e9cc:	b480      	push	{r7}
 800e9ce:	b083      	sub	sp, #12
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800e9d4:	bf00      	nop
 800e9d6:	370c      	adds	r7, #12
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9de:	4770      	bx	lr

0800e9e0 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800e9e0:	b480      	push	{r7}
 800e9e2:	b083      	sub	sp, #12
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800e9e8:	bf00      	nop
 800e9ea:	370c      	adds	r7, #12
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f2:	4770      	bx	lr

0800e9f4 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800e9f4:	b480      	push	{r7}
 800e9f6:	b083      	sub	sp, #12
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 800e9fc:	bf00      	nop
 800e9fe:	370c      	adds	r7, #12
 800ea00:	46bd      	mov	sp, r7
 800ea02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea06:	4770      	bx	lr

0800ea08 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800ea08:	b480      	push	{r7}
 800ea0a:	b083      	sub	sp, #12
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 800ea10:	bf00      	nop
 800ea12:	370c      	adds	r7, #12
 800ea14:	46bd      	mov	sp, r7
 800ea16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1a:	4770      	bx	lr

0800ea1c <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800ea1c:	b480      	push	{r7}
 800ea1e:	b083      	sub	sp, #12
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800ea24:	bf00      	nop
 800ea26:	370c      	adds	r7, #12
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2e:	4770      	bx	lr

0800ea30 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 800ea30:	b480      	push	{r7}
 800ea32:	b083      	sub	sp, #12
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800ea38:	bf00      	nop
 800ea3a:	370c      	adds	r7, #12
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea42:	4770      	bx	lr

0800ea44 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 800ea44:	b480      	push	{r7}
 800ea46:	b083      	sub	sp, #12
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800ea4c:	bf00      	nop
 800ea4e:	370c      	adds	r7, #12
 800ea50:	46bd      	mov	sp, r7
 800ea52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea56:	4770      	bx	lr

0800ea58 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800ea58:	b480      	push	{r7}
 800ea5a:	b083      	sub	sp, #12
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
 800ea60:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	683a      	ldr	r2, [r7, #0]
 800ea66:	649a      	str	r2, [r3, #72]	; 0x48
}
 800ea68:	bf00      	nop
 800ea6a:	370c      	adds	r7, #12
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea72:	4770      	bx	lr

0800ea74 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b084      	sub	sp, #16
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea80:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	2200      	movs	r2, #0
 800ea86:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ea94:	b2db      	uxtb	r3, r3
 800ea96:	2b08      	cmp	r3, #8
 800ea98:	d114      	bne.n	800eac4 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	2202      	movs	r2, #2
 800eaa0:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	681a      	ldr	r2, [r3, #0]
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800eab0:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	681a      	ldr	r2, [r3, #0]
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	f042 0202 	orr.w	r2, r2, #2
 800eac0:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800eac2:	e006      	b.n	800ead2 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	2201      	movs	r2, #1
 800eac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800eacc:	68f8      	ldr	r0, [r7, #12]
 800eace:	f7ff ff73 	bl	800e9b8 <HAL_QSPI_ErrorCallback>
}
 800ead2:	bf00      	nop
 800ead4:	3710      	adds	r7, #16
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}

0800eada <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800eada:	b580      	push	{r7, lr}
 800eadc:	b084      	sub	sp, #16
 800eade:	af00      	add	r7, sp, #0
 800eae0:	60f8      	str	r0, [r7, #12]
 800eae2:	60b9      	str	r1, [r7, #8]
 800eae4:	603b      	str	r3, [r7, #0]
 800eae6:	4613      	mov	r3, r2
 800eae8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800eaea:	e01a      	b.n	800eb22 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eaec:	69bb      	ldr	r3, [r7, #24]
 800eaee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaf2:	d016      	beq.n	800eb22 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eaf4:	f7fc f9a0 	bl	800ae38 <HAL_GetTick>
 800eaf8:	4602      	mov	r2, r0
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	1ad3      	subs	r3, r2, r3
 800eafe:	69ba      	ldr	r2, [r7, #24]
 800eb00:	429a      	cmp	r2, r3
 800eb02:	d302      	bcc.n	800eb0a <QSPI_WaitFlagStateUntilTimeout+0x30>
 800eb04:	69bb      	ldr	r3, [r7, #24]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d10b      	bne.n	800eb22 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	2204      	movs	r2, #4
 800eb0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb16:	f043 0201 	orr.w	r2, r3, #1
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800eb1e:	2301      	movs	r3, #1
 800eb20:	e00e      	b.n	800eb40 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	689a      	ldr	r2, [r3, #8]
 800eb28:	68bb      	ldr	r3, [r7, #8]
 800eb2a:	4013      	ands	r3, r2
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	bf14      	ite	ne
 800eb30:	2301      	movne	r3, #1
 800eb32:	2300      	moveq	r3, #0
 800eb34:	b2db      	uxtb	r3, r3
 800eb36:	461a      	mov	r2, r3
 800eb38:	79fb      	ldrb	r3, [r7, #7]
 800eb3a:	429a      	cmp	r2, r3
 800eb3c:	d1d6      	bne.n	800eaec <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800eb3e:	2300      	movs	r3, #0
}
 800eb40:	4618      	mov	r0, r3
 800eb42:	3710      	adds	r7, #16
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}

0800eb48 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800eb48:	b480      	push	{r7}
 800eb4a:	b085      	sub	sp, #20
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	60f8      	str	r0, [r7, #12]
 800eb50:	60b9      	str	r1, [r7, #8]
 800eb52:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d009      	beq.n	800eb70 <QSPI_Config+0x28>
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800eb62:	d005      	beq.n	800eb70 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	3a01      	subs	r2, #1
 800eb6e:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	699b      	ldr	r3, [r3, #24]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	f000 80b9 	beq.w	800ecec <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	6a1b      	ldr	r3, [r3, #32]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d05f      	beq.n	800ec42 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	68ba      	ldr	r2, [r7, #8]
 800eb88:	6892      	ldr	r2, [r2, #8]
 800eb8a:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	69db      	ldr	r3, [r3, #28]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d031      	beq.n	800ebf8 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800eb94:	68bb      	ldr	r3, [r7, #8]
 800eb96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb98:	68bb      	ldr	r3, [r7, #8]
 800eb9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb9c:	431a      	orrs	r2, r3
 800eb9e:	68bb      	ldr	r3, [r7, #8]
 800eba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eba2:	431a      	orrs	r2, r3
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eba8:	431a      	orrs	r2, r3
 800ebaa:	68bb      	ldr	r3, [r7, #8]
 800ebac:	695b      	ldr	r3, [r3, #20]
 800ebae:	049b      	lsls	r3, r3, #18
 800ebb0:	431a      	orrs	r2, r3
 800ebb2:	68bb      	ldr	r3, [r7, #8]
 800ebb4:	691b      	ldr	r3, [r3, #16]
 800ebb6:	431a      	orrs	r2, r3
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	6a1b      	ldr	r3, [r3, #32]
 800ebbc:	431a      	orrs	r2, r3
 800ebbe:	68bb      	ldr	r3, [r7, #8]
 800ebc0:	68db      	ldr	r3, [r3, #12]
 800ebc2:	431a      	orrs	r2, r3
 800ebc4:	68bb      	ldr	r3, [r7, #8]
 800ebc6:	69db      	ldr	r3, [r3, #28]
 800ebc8:	431a      	orrs	r2, r3
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	699b      	ldr	r3, [r3, #24]
 800ebce:	431a      	orrs	r2, r3
 800ebd0:	68bb      	ldr	r3, [r7, #8]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	ea42 0103 	orr.w	r1, r2, r3
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	687a      	ldr	r2, [r7, #4]
 800ebde:	430a      	orrs	r2, r1
 800ebe0:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ebe8:	f000 812e 	beq.w	800ee48 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	68ba      	ldr	r2, [r7, #8]
 800ebf2:	6852      	ldr	r2, [r2, #4]
 800ebf4:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800ebf6:	e127      	b.n	800ee48 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ebf8:	68bb      	ldr	r3, [r7, #8]
 800ebfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec00:	431a      	orrs	r2, r3
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec06:	431a      	orrs	r2, r3
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec0c:	431a      	orrs	r2, r3
 800ec0e:	68bb      	ldr	r3, [r7, #8]
 800ec10:	695b      	ldr	r3, [r3, #20]
 800ec12:	049b      	lsls	r3, r3, #18
 800ec14:	431a      	orrs	r2, r3
 800ec16:	68bb      	ldr	r3, [r7, #8]
 800ec18:	691b      	ldr	r3, [r3, #16]
 800ec1a:	431a      	orrs	r2, r3
 800ec1c:	68bb      	ldr	r3, [r7, #8]
 800ec1e:	6a1b      	ldr	r3, [r3, #32]
 800ec20:	431a      	orrs	r2, r3
 800ec22:	68bb      	ldr	r3, [r7, #8]
 800ec24:	69db      	ldr	r3, [r3, #28]
 800ec26:	431a      	orrs	r2, r3
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	699b      	ldr	r3, [r3, #24]
 800ec2c:	431a      	orrs	r2, r3
 800ec2e:	68bb      	ldr	r3, [r7, #8]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	ea42 0103 	orr.w	r1, r2, r3
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	687a      	ldr	r2, [r7, #4]
 800ec3c:	430a      	orrs	r2, r1
 800ec3e:	615a      	str	r2, [r3, #20]
}
 800ec40:	e102      	b.n	800ee48 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ec42:	68bb      	ldr	r3, [r7, #8]
 800ec44:	69db      	ldr	r3, [r3, #28]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d02e      	beq.n	800eca8 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ec4a:	68bb      	ldr	r3, [r7, #8]
 800ec4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec52:	431a      	orrs	r2, r3
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec58:	431a      	orrs	r2, r3
 800ec5a:	68bb      	ldr	r3, [r7, #8]
 800ec5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec5e:	431a      	orrs	r2, r3
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	695b      	ldr	r3, [r3, #20]
 800ec64:	049b      	lsls	r3, r3, #18
 800ec66:	431a      	orrs	r2, r3
 800ec68:	68bb      	ldr	r3, [r7, #8]
 800ec6a:	6a1b      	ldr	r3, [r3, #32]
 800ec6c:	431a      	orrs	r2, r3
 800ec6e:	68bb      	ldr	r3, [r7, #8]
 800ec70:	68db      	ldr	r3, [r3, #12]
 800ec72:	431a      	orrs	r2, r3
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	69db      	ldr	r3, [r3, #28]
 800ec78:	431a      	orrs	r2, r3
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	699b      	ldr	r3, [r3, #24]
 800ec7e:	431a      	orrs	r2, r3
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	ea42 0103 	orr.w	r1, r2, r3
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	687a      	ldr	r2, [r7, #4]
 800ec8e:	430a      	orrs	r2, r1
 800ec90:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ec98:	f000 80d6 	beq.w	800ee48 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	68ba      	ldr	r2, [r7, #8]
 800eca2:	6852      	ldr	r2, [r2, #4]
 800eca4:	619a      	str	r2, [r3, #24]
}
 800eca6:	e0cf      	b.n	800ee48 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecac:	68bb      	ldr	r3, [r7, #8]
 800ecae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecb0:	431a      	orrs	r2, r3
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecb6:	431a      	orrs	r2, r3
 800ecb8:	68bb      	ldr	r3, [r7, #8]
 800ecba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecbc:	431a      	orrs	r2, r3
 800ecbe:	68bb      	ldr	r3, [r7, #8]
 800ecc0:	695b      	ldr	r3, [r3, #20]
 800ecc2:	049b      	lsls	r3, r3, #18
 800ecc4:	431a      	orrs	r2, r3
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	6a1b      	ldr	r3, [r3, #32]
 800ecca:	431a      	orrs	r2, r3
 800eccc:	68bb      	ldr	r3, [r7, #8]
 800ecce:	69db      	ldr	r3, [r3, #28]
 800ecd0:	431a      	orrs	r2, r3
 800ecd2:	68bb      	ldr	r3, [r7, #8]
 800ecd4:	699b      	ldr	r3, [r3, #24]
 800ecd6:	431a      	orrs	r2, r3
 800ecd8:	68bb      	ldr	r3, [r7, #8]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	ea42 0103 	orr.w	r1, r2, r3
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	687a      	ldr	r2, [r7, #4]
 800ece6:	430a      	orrs	r2, r1
 800ece8:	615a      	str	r2, [r3, #20]
}
 800ecea:	e0ad      	b.n	800ee48 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800ecec:	68bb      	ldr	r3, [r7, #8]
 800ecee:	6a1b      	ldr	r3, [r3, #32]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d058      	beq.n	800eda6 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	68ba      	ldr	r2, [r7, #8]
 800ecfa:	6892      	ldr	r2, [r2, #8]
 800ecfc:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ecfe:	68bb      	ldr	r3, [r7, #8]
 800ed00:	69db      	ldr	r3, [r3, #28]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d02d      	beq.n	800ed62 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ed06:	68bb      	ldr	r3, [r7, #8]
 800ed08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed0a:	68bb      	ldr	r3, [r7, #8]
 800ed0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed0e:	431a      	orrs	r2, r3
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed14:	431a      	orrs	r2, r3
 800ed16:	68bb      	ldr	r3, [r7, #8]
 800ed18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed1a:	431a      	orrs	r2, r3
 800ed1c:	68bb      	ldr	r3, [r7, #8]
 800ed1e:	695b      	ldr	r3, [r3, #20]
 800ed20:	049b      	lsls	r3, r3, #18
 800ed22:	431a      	orrs	r2, r3
 800ed24:	68bb      	ldr	r3, [r7, #8]
 800ed26:	691b      	ldr	r3, [r3, #16]
 800ed28:	431a      	orrs	r2, r3
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	6a1b      	ldr	r3, [r3, #32]
 800ed2e:	431a      	orrs	r2, r3
 800ed30:	68bb      	ldr	r3, [r7, #8]
 800ed32:	68db      	ldr	r3, [r3, #12]
 800ed34:	431a      	orrs	r2, r3
 800ed36:	68bb      	ldr	r3, [r7, #8]
 800ed38:	69db      	ldr	r3, [r3, #28]
 800ed3a:	431a      	orrs	r2, r3
 800ed3c:	68bb      	ldr	r3, [r7, #8]
 800ed3e:	699b      	ldr	r3, [r3, #24]
 800ed40:	ea42 0103 	orr.w	r1, r2, r3
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	687a      	ldr	r2, [r7, #4]
 800ed4a:	430a      	orrs	r2, r1
 800ed4c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ed54:	d078      	beq.n	800ee48 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	68ba      	ldr	r2, [r7, #8]
 800ed5c:	6852      	ldr	r2, [r2, #4]
 800ed5e:	619a      	str	r2, [r3, #24]
}
 800ed60:	e072      	b.n	800ee48 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ed62:	68bb      	ldr	r3, [r7, #8]
 800ed64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed66:	68bb      	ldr	r3, [r7, #8]
 800ed68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed6a:	431a      	orrs	r2, r3
 800ed6c:	68bb      	ldr	r3, [r7, #8]
 800ed6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed70:	431a      	orrs	r2, r3
 800ed72:	68bb      	ldr	r3, [r7, #8]
 800ed74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed76:	431a      	orrs	r2, r3
 800ed78:	68bb      	ldr	r3, [r7, #8]
 800ed7a:	695b      	ldr	r3, [r3, #20]
 800ed7c:	049b      	lsls	r3, r3, #18
 800ed7e:	431a      	orrs	r2, r3
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	691b      	ldr	r3, [r3, #16]
 800ed84:	431a      	orrs	r2, r3
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	6a1b      	ldr	r3, [r3, #32]
 800ed8a:	431a      	orrs	r2, r3
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	69db      	ldr	r3, [r3, #28]
 800ed90:	431a      	orrs	r2, r3
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	699b      	ldr	r3, [r3, #24]
 800ed96:	ea42 0103 	orr.w	r1, r2, r3
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	687a      	ldr	r2, [r7, #4]
 800eda0:	430a      	orrs	r2, r1
 800eda2:	615a      	str	r2, [r3, #20]
}
 800eda4:	e050      	b.n	800ee48 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800eda6:	68bb      	ldr	r3, [r7, #8]
 800eda8:	69db      	ldr	r3, [r3, #28]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d02a      	beq.n	800ee04 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800edae:	68bb      	ldr	r3, [r7, #8]
 800edb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edb2:	68bb      	ldr	r3, [r7, #8]
 800edb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edb6:	431a      	orrs	r2, r3
 800edb8:	68bb      	ldr	r3, [r7, #8]
 800edba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edbc:	431a      	orrs	r2, r3
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edc2:	431a      	orrs	r2, r3
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	695b      	ldr	r3, [r3, #20]
 800edc8:	049b      	lsls	r3, r3, #18
 800edca:	431a      	orrs	r2, r3
 800edcc:	68bb      	ldr	r3, [r7, #8]
 800edce:	6a1b      	ldr	r3, [r3, #32]
 800edd0:	431a      	orrs	r2, r3
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	68db      	ldr	r3, [r3, #12]
 800edd6:	431a      	orrs	r2, r3
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	69db      	ldr	r3, [r3, #28]
 800eddc:	431a      	orrs	r2, r3
 800edde:	68bb      	ldr	r3, [r7, #8]
 800ede0:	699b      	ldr	r3, [r3, #24]
 800ede2:	ea42 0103 	orr.w	r1, r2, r3
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	687a      	ldr	r2, [r7, #4]
 800edec:	430a      	orrs	r2, r1
 800edee:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800edf6:	d027      	beq.n	800ee48 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	68ba      	ldr	r2, [r7, #8]
 800edfe:	6852      	ldr	r2, [r2, #4]
 800ee00:	619a      	str	r2, [r3, #24]
}
 800ee02:	e021      	b.n	800ee48 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d01d      	beq.n	800ee48 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ee0c:	68bb      	ldr	r3, [r7, #8]
 800ee0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee14:	431a      	orrs	r2, r3
 800ee16:	68bb      	ldr	r3, [r7, #8]
 800ee18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee1a:	431a      	orrs	r2, r3
 800ee1c:	68bb      	ldr	r3, [r7, #8]
 800ee1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee20:	431a      	orrs	r2, r3
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	695b      	ldr	r3, [r3, #20]
 800ee26:	049b      	lsls	r3, r3, #18
 800ee28:	431a      	orrs	r2, r3
 800ee2a:	68bb      	ldr	r3, [r7, #8]
 800ee2c:	6a1b      	ldr	r3, [r3, #32]
 800ee2e:	431a      	orrs	r2, r3
 800ee30:	68bb      	ldr	r3, [r7, #8]
 800ee32:	69db      	ldr	r3, [r3, #28]
 800ee34:	431a      	orrs	r2, r3
 800ee36:	68bb      	ldr	r3, [r7, #8]
 800ee38:	699b      	ldr	r3, [r3, #24]
 800ee3a:	ea42 0103 	orr.w	r1, r2, r3
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	687a      	ldr	r2, [r7, #4]
 800ee44:	430a      	orrs	r2, r1
 800ee46:	615a      	str	r2, [r3, #20]
}
 800ee48:	bf00      	nop
 800ee4a:	3714      	adds	r7, #20
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee52:	4770      	bx	lr

0800ee54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b086      	sub	sp, #24
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d101      	bne.n	800ee6a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800ee66:	2301      	movs	r3, #1
 800ee68:	e29b      	b.n	800f3a2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	f003 0301 	and.w	r3, r3, #1
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	f000 8087 	beq.w	800ef86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ee78:	4b96      	ldr	r3, [pc, #600]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800ee7a:	689b      	ldr	r3, [r3, #8]
 800ee7c:	f003 030c 	and.w	r3, r3, #12
 800ee80:	2b04      	cmp	r3, #4
 800ee82:	d00c      	beq.n	800ee9e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ee84:	4b93      	ldr	r3, [pc, #588]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800ee86:	689b      	ldr	r3, [r3, #8]
 800ee88:	f003 030c 	and.w	r3, r3, #12
 800ee8c:	2b08      	cmp	r3, #8
 800ee8e:	d112      	bne.n	800eeb6 <HAL_RCC_OscConfig+0x62>
 800ee90:	4b90      	ldr	r3, [pc, #576]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800ee92:	685b      	ldr	r3, [r3, #4]
 800ee94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ee98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ee9c:	d10b      	bne.n	800eeb6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ee9e:	4b8d      	ldr	r3, [pc, #564]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d06c      	beq.n	800ef84 <HAL_RCC_OscConfig+0x130>
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	685b      	ldr	r3, [r3, #4]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d168      	bne.n	800ef84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800eeb2:	2301      	movs	r3, #1
 800eeb4:	e275      	b.n	800f3a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	685b      	ldr	r3, [r3, #4]
 800eeba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eebe:	d106      	bne.n	800eece <HAL_RCC_OscConfig+0x7a>
 800eec0:	4b84      	ldr	r3, [pc, #528]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	4a83      	ldr	r2, [pc, #524]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800eec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eeca:	6013      	str	r3, [r2, #0]
 800eecc:	e02e      	b.n	800ef2c <HAL_RCC_OscConfig+0xd8>
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	685b      	ldr	r3, [r3, #4]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d10c      	bne.n	800eef0 <HAL_RCC_OscConfig+0x9c>
 800eed6:	4b7f      	ldr	r3, [pc, #508]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	4a7e      	ldr	r2, [pc, #504]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800eedc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eee0:	6013      	str	r3, [r2, #0]
 800eee2:	4b7c      	ldr	r3, [pc, #496]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	4a7b      	ldr	r2, [pc, #492]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800eee8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800eeec:	6013      	str	r3, [r2, #0]
 800eeee:	e01d      	b.n	800ef2c <HAL_RCC_OscConfig+0xd8>
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	685b      	ldr	r3, [r3, #4]
 800eef4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800eef8:	d10c      	bne.n	800ef14 <HAL_RCC_OscConfig+0xc0>
 800eefa:	4b76      	ldr	r3, [pc, #472]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	4a75      	ldr	r2, [pc, #468]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800ef00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ef04:	6013      	str	r3, [r2, #0]
 800ef06:	4b73      	ldr	r3, [pc, #460]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	4a72      	ldr	r2, [pc, #456]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800ef0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ef10:	6013      	str	r3, [r2, #0]
 800ef12:	e00b      	b.n	800ef2c <HAL_RCC_OscConfig+0xd8>
 800ef14:	4b6f      	ldr	r3, [pc, #444]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	4a6e      	ldr	r2, [pc, #440]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800ef1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ef1e:	6013      	str	r3, [r2, #0]
 800ef20:	4b6c      	ldr	r3, [pc, #432]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	4a6b      	ldr	r2, [pc, #428]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800ef26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ef2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	685b      	ldr	r3, [r3, #4]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d013      	beq.n	800ef5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ef34:	f7fb ff80 	bl	800ae38 <HAL_GetTick>
 800ef38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ef3a:	e008      	b.n	800ef4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ef3c:	f7fb ff7c 	bl	800ae38 <HAL_GetTick>
 800ef40:	4602      	mov	r2, r0
 800ef42:	693b      	ldr	r3, [r7, #16]
 800ef44:	1ad3      	subs	r3, r2, r3
 800ef46:	2b64      	cmp	r3, #100	; 0x64
 800ef48:	d901      	bls.n	800ef4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ef4a:	2303      	movs	r3, #3
 800ef4c:	e229      	b.n	800f3a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ef4e:	4b61      	ldr	r3, [pc, #388]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d0f0      	beq.n	800ef3c <HAL_RCC_OscConfig+0xe8>
 800ef5a:	e014      	b.n	800ef86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ef5c:	f7fb ff6c 	bl	800ae38 <HAL_GetTick>
 800ef60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ef62:	e008      	b.n	800ef76 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ef64:	f7fb ff68 	bl	800ae38 <HAL_GetTick>
 800ef68:	4602      	mov	r2, r0
 800ef6a:	693b      	ldr	r3, [r7, #16]
 800ef6c:	1ad3      	subs	r3, r2, r3
 800ef6e:	2b64      	cmp	r3, #100	; 0x64
 800ef70:	d901      	bls.n	800ef76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800ef72:	2303      	movs	r3, #3
 800ef74:	e215      	b.n	800f3a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ef76:	4b57      	ldr	r3, [pc, #348]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d1f0      	bne.n	800ef64 <HAL_RCC_OscConfig+0x110>
 800ef82:	e000      	b.n	800ef86 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ef84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	f003 0302 	and.w	r3, r3, #2
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d069      	beq.n	800f066 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ef92:	4b50      	ldr	r3, [pc, #320]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800ef94:	689b      	ldr	r3, [r3, #8]
 800ef96:	f003 030c 	and.w	r3, r3, #12
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d00b      	beq.n	800efb6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ef9e:	4b4d      	ldr	r3, [pc, #308]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800efa0:	689b      	ldr	r3, [r3, #8]
 800efa2:	f003 030c 	and.w	r3, r3, #12
 800efa6:	2b08      	cmp	r3, #8
 800efa8:	d11c      	bne.n	800efe4 <HAL_RCC_OscConfig+0x190>
 800efaa:	4b4a      	ldr	r3, [pc, #296]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800efac:	685b      	ldr	r3, [r3, #4]
 800efae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d116      	bne.n	800efe4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800efb6:	4b47      	ldr	r3, [pc, #284]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	f003 0302 	and.w	r3, r3, #2
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d005      	beq.n	800efce <HAL_RCC_OscConfig+0x17a>
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	68db      	ldr	r3, [r3, #12]
 800efc6:	2b01      	cmp	r3, #1
 800efc8:	d001      	beq.n	800efce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800efca:	2301      	movs	r3, #1
 800efcc:	e1e9      	b.n	800f3a2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800efce:	4b41      	ldr	r3, [pc, #260]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	691b      	ldr	r3, [r3, #16]
 800efda:	00db      	lsls	r3, r3, #3
 800efdc:	493d      	ldr	r1, [pc, #244]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800efde:	4313      	orrs	r3, r2
 800efe0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800efe2:	e040      	b.n	800f066 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	68db      	ldr	r3, [r3, #12]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d023      	beq.n	800f034 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800efec:	4b39      	ldr	r3, [pc, #228]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	4a38      	ldr	r2, [pc, #224]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800eff2:	f043 0301 	orr.w	r3, r3, #1
 800eff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eff8:	f7fb ff1e 	bl	800ae38 <HAL_GetTick>
 800effc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800effe:	e008      	b.n	800f012 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f000:	f7fb ff1a 	bl	800ae38 <HAL_GetTick>
 800f004:	4602      	mov	r2, r0
 800f006:	693b      	ldr	r3, [r7, #16]
 800f008:	1ad3      	subs	r3, r2, r3
 800f00a:	2b02      	cmp	r3, #2
 800f00c:	d901      	bls.n	800f012 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800f00e:	2303      	movs	r3, #3
 800f010:	e1c7      	b.n	800f3a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f012:	4b30      	ldr	r3, [pc, #192]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	f003 0302 	and.w	r3, r3, #2
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d0f0      	beq.n	800f000 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f01e:	4b2d      	ldr	r3, [pc, #180]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	691b      	ldr	r3, [r3, #16]
 800f02a:	00db      	lsls	r3, r3, #3
 800f02c:	4929      	ldr	r1, [pc, #164]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800f02e:	4313      	orrs	r3, r2
 800f030:	600b      	str	r3, [r1, #0]
 800f032:	e018      	b.n	800f066 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f034:	4b27      	ldr	r3, [pc, #156]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	4a26      	ldr	r2, [pc, #152]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800f03a:	f023 0301 	bic.w	r3, r3, #1
 800f03e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f040:	f7fb fefa 	bl	800ae38 <HAL_GetTick>
 800f044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f046:	e008      	b.n	800f05a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f048:	f7fb fef6 	bl	800ae38 <HAL_GetTick>
 800f04c:	4602      	mov	r2, r0
 800f04e:	693b      	ldr	r3, [r7, #16]
 800f050:	1ad3      	subs	r3, r2, r3
 800f052:	2b02      	cmp	r3, #2
 800f054:	d901      	bls.n	800f05a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800f056:	2303      	movs	r3, #3
 800f058:	e1a3      	b.n	800f3a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f05a:	4b1e      	ldr	r3, [pc, #120]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	f003 0302 	and.w	r3, r3, #2
 800f062:	2b00      	cmp	r3, #0
 800f064:	d1f0      	bne.n	800f048 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	f003 0308 	and.w	r3, r3, #8
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d038      	beq.n	800f0e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	695b      	ldr	r3, [r3, #20]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d019      	beq.n	800f0ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f07a:	4b16      	ldr	r3, [pc, #88]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800f07c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f07e:	4a15      	ldr	r2, [pc, #84]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800f080:	f043 0301 	orr.w	r3, r3, #1
 800f084:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f086:	f7fb fed7 	bl	800ae38 <HAL_GetTick>
 800f08a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f08c:	e008      	b.n	800f0a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f08e:	f7fb fed3 	bl	800ae38 <HAL_GetTick>
 800f092:	4602      	mov	r2, r0
 800f094:	693b      	ldr	r3, [r7, #16]
 800f096:	1ad3      	subs	r3, r2, r3
 800f098:	2b02      	cmp	r3, #2
 800f09a:	d901      	bls.n	800f0a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800f09c:	2303      	movs	r3, #3
 800f09e:	e180      	b.n	800f3a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f0a0:	4b0c      	ldr	r3, [pc, #48]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800f0a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0a4:	f003 0302 	and.w	r3, r3, #2
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d0f0      	beq.n	800f08e <HAL_RCC_OscConfig+0x23a>
 800f0ac:	e01a      	b.n	800f0e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f0ae:	4b09      	ldr	r3, [pc, #36]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800f0b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0b2:	4a08      	ldr	r2, [pc, #32]	; (800f0d4 <HAL_RCC_OscConfig+0x280>)
 800f0b4:	f023 0301 	bic.w	r3, r3, #1
 800f0b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f0ba:	f7fb febd 	bl	800ae38 <HAL_GetTick>
 800f0be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f0c0:	e00a      	b.n	800f0d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f0c2:	f7fb feb9 	bl	800ae38 <HAL_GetTick>
 800f0c6:	4602      	mov	r2, r0
 800f0c8:	693b      	ldr	r3, [r7, #16]
 800f0ca:	1ad3      	subs	r3, r2, r3
 800f0cc:	2b02      	cmp	r3, #2
 800f0ce:	d903      	bls.n	800f0d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800f0d0:	2303      	movs	r3, #3
 800f0d2:	e166      	b.n	800f3a2 <HAL_RCC_OscConfig+0x54e>
 800f0d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f0d8:	4b92      	ldr	r3, [pc, #584]	; (800f324 <HAL_RCC_OscConfig+0x4d0>)
 800f0da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0dc:	f003 0302 	and.w	r3, r3, #2
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d1ee      	bne.n	800f0c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	f003 0304 	and.w	r3, r3, #4
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	f000 80a4 	beq.w	800f23a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f0f2:	4b8c      	ldr	r3, [pc, #560]	; (800f324 <HAL_RCC_OscConfig+0x4d0>)
 800f0f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d10d      	bne.n	800f11a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800f0fe:	4b89      	ldr	r3, [pc, #548]	; (800f324 <HAL_RCC_OscConfig+0x4d0>)
 800f100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f102:	4a88      	ldr	r2, [pc, #544]	; (800f324 <HAL_RCC_OscConfig+0x4d0>)
 800f104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f108:	6413      	str	r3, [r2, #64]	; 0x40
 800f10a:	4b86      	ldr	r3, [pc, #536]	; (800f324 <HAL_RCC_OscConfig+0x4d0>)
 800f10c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f10e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f112:	60bb      	str	r3, [r7, #8]
 800f114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f116:	2301      	movs	r3, #1
 800f118:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f11a:	4b83      	ldr	r3, [pc, #524]	; (800f328 <HAL_RCC_OscConfig+0x4d4>)
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f122:	2b00      	cmp	r3, #0
 800f124:	d118      	bne.n	800f158 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800f126:	4b80      	ldr	r3, [pc, #512]	; (800f328 <HAL_RCC_OscConfig+0x4d4>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	4a7f      	ldr	r2, [pc, #508]	; (800f328 <HAL_RCC_OscConfig+0x4d4>)
 800f12c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f130:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f132:	f7fb fe81 	bl	800ae38 <HAL_GetTick>
 800f136:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f138:	e008      	b.n	800f14c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f13a:	f7fb fe7d 	bl	800ae38 <HAL_GetTick>
 800f13e:	4602      	mov	r2, r0
 800f140:	693b      	ldr	r3, [r7, #16]
 800f142:	1ad3      	subs	r3, r2, r3
 800f144:	2b64      	cmp	r3, #100	; 0x64
 800f146:	d901      	bls.n	800f14c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800f148:	2303      	movs	r3, #3
 800f14a:	e12a      	b.n	800f3a2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f14c:	4b76      	ldr	r3, [pc, #472]	; (800f328 <HAL_RCC_OscConfig+0x4d4>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f154:	2b00      	cmp	r3, #0
 800f156:	d0f0      	beq.n	800f13a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	689b      	ldr	r3, [r3, #8]
 800f15c:	2b01      	cmp	r3, #1
 800f15e:	d106      	bne.n	800f16e <HAL_RCC_OscConfig+0x31a>
 800f160:	4b70      	ldr	r3, [pc, #448]	; (800f324 <HAL_RCC_OscConfig+0x4d0>)
 800f162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f164:	4a6f      	ldr	r2, [pc, #444]	; (800f324 <HAL_RCC_OscConfig+0x4d0>)
 800f166:	f043 0301 	orr.w	r3, r3, #1
 800f16a:	6713      	str	r3, [r2, #112]	; 0x70
 800f16c:	e02d      	b.n	800f1ca <HAL_RCC_OscConfig+0x376>
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	689b      	ldr	r3, [r3, #8]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d10c      	bne.n	800f190 <HAL_RCC_OscConfig+0x33c>
 800f176:	4b6b      	ldr	r3, [pc, #428]	; (800f324 <HAL_RCC_OscConfig+0x4d0>)
 800f178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f17a:	4a6a      	ldr	r2, [pc, #424]	; (800f324 <HAL_RCC_OscConfig+0x4d0>)
 800f17c:	f023 0301 	bic.w	r3, r3, #1
 800f180:	6713      	str	r3, [r2, #112]	; 0x70
 800f182:	4b68      	ldr	r3, [pc, #416]	; (800f324 <HAL_RCC_OscConfig+0x4d0>)
 800f184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f186:	4a67      	ldr	r2, [pc, #412]	; (800f324 <HAL_RCC_OscConfig+0x4d0>)
 800f188:	f023 0304 	bic.w	r3, r3, #4
 800f18c:	6713      	str	r3, [r2, #112]	; 0x70
 800f18e:	e01c      	b.n	800f1ca <HAL_RCC_OscConfig+0x376>
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	689b      	ldr	r3, [r3, #8]
 800f194:	2b05      	cmp	r3, #5
 800f196:	d10c      	bne.n	800f1b2 <HAL_RCC_OscConfig+0x35e>
 800f198:	4b62      	ldr	r3, [pc, #392]	; (800f324 <HAL_RCC_OscConfig+0x4d0>)
 800f19a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f19c:	4a61      	ldr	r2, [pc, #388]	; (800f324 <HAL_RCC_OscConfig+0x4d0>)
 800f19e:	f043 0304 	orr.w	r3, r3, #4
 800f1a2:	6713      	str	r3, [r2, #112]	; 0x70
 800f1a4:	4b5f      	ldr	r3, [pc, #380]	; (800f324 <HAL_RCC_OscConfig+0x4d0>)
 800f1a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1a8:	4a5e      	ldr	r2, [pc, #376]	; (800f324 <HAL_RCC_OscConfig+0x4d0>)
 800f1aa:	f043 0301 	orr.w	r3, r3, #1
 800f1ae:	6713      	str	r3, [r2, #112]	; 0x70
 800f1b0:	e00b      	b.n	800f1ca <HAL_RCC_OscConfig+0x376>
 800f1b2:	4b5c      	ldr	r3, [pc, #368]	; (800f324 <HAL_RCC_OscConfig+0x4d0>)
 800f1b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1b6:	4a5b      	ldr	r2, [pc, #364]	; (800f324 <HAL_RCC_OscConfig+0x4d0>)
 800f1b8:	f023 0301 	bic.w	r3, r3, #1
 800f1bc:	6713      	str	r3, [r2, #112]	; 0x70
 800f1be:	4b59      	ldr	r3, [pc, #356]	; (800f324 <HAL_RCC_OscConfig+0x4d0>)
 800f1c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1c2:	4a58      	ldr	r2, [pc, #352]	; (800f324 <HAL_RCC_OscConfig+0x4d0>)
 800f1c4:	f023 0304 	bic.w	r3, r3, #4
 800f1c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	689b      	ldr	r3, [r3, #8]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d015      	beq.n	800f1fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f1d2:	f7fb fe31 	bl	800ae38 <HAL_GetTick>
 800f1d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f1d8:	e00a      	b.n	800f1f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f1da:	f7fb fe2d 	bl	800ae38 <HAL_GetTick>
 800f1de:	4602      	mov	r2, r0
 800f1e0:	693b      	ldr	r3, [r7, #16]
 800f1e2:	1ad3      	subs	r3, r2, r3
 800f1e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800f1e8:	4293      	cmp	r3, r2
 800f1ea:	d901      	bls.n	800f1f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800f1ec:	2303      	movs	r3, #3
 800f1ee:	e0d8      	b.n	800f3a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f1f0:	4b4c      	ldr	r3, [pc, #304]	; (800f324 <HAL_RCC_OscConfig+0x4d0>)
 800f1f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1f4:	f003 0302 	and.w	r3, r3, #2
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d0ee      	beq.n	800f1da <HAL_RCC_OscConfig+0x386>
 800f1fc:	e014      	b.n	800f228 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f1fe:	f7fb fe1b 	bl	800ae38 <HAL_GetTick>
 800f202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f204:	e00a      	b.n	800f21c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f206:	f7fb fe17 	bl	800ae38 <HAL_GetTick>
 800f20a:	4602      	mov	r2, r0
 800f20c:	693b      	ldr	r3, [r7, #16]
 800f20e:	1ad3      	subs	r3, r2, r3
 800f210:	f241 3288 	movw	r2, #5000	; 0x1388
 800f214:	4293      	cmp	r3, r2
 800f216:	d901      	bls.n	800f21c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800f218:	2303      	movs	r3, #3
 800f21a:	e0c2      	b.n	800f3a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f21c:	4b41      	ldr	r3, [pc, #260]	; (800f324 <HAL_RCC_OscConfig+0x4d0>)
 800f21e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f220:	f003 0302 	and.w	r3, r3, #2
 800f224:	2b00      	cmp	r3, #0
 800f226:	d1ee      	bne.n	800f206 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800f228:	7dfb      	ldrb	r3, [r7, #23]
 800f22a:	2b01      	cmp	r3, #1
 800f22c:	d105      	bne.n	800f23a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f22e:	4b3d      	ldr	r3, [pc, #244]	; (800f324 <HAL_RCC_OscConfig+0x4d0>)
 800f230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f232:	4a3c      	ldr	r2, [pc, #240]	; (800f324 <HAL_RCC_OscConfig+0x4d0>)
 800f234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f238:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	699b      	ldr	r3, [r3, #24]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	f000 80ae 	beq.w	800f3a0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f244:	4b37      	ldr	r3, [pc, #220]	; (800f324 <HAL_RCC_OscConfig+0x4d0>)
 800f246:	689b      	ldr	r3, [r3, #8]
 800f248:	f003 030c 	and.w	r3, r3, #12
 800f24c:	2b08      	cmp	r3, #8
 800f24e:	d06d      	beq.n	800f32c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	699b      	ldr	r3, [r3, #24]
 800f254:	2b02      	cmp	r3, #2
 800f256:	d14b      	bne.n	800f2f0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f258:	4b32      	ldr	r3, [pc, #200]	; (800f324 <HAL_RCC_OscConfig+0x4d0>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	4a31      	ldr	r2, [pc, #196]	; (800f324 <HAL_RCC_OscConfig+0x4d0>)
 800f25e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f264:	f7fb fde8 	bl	800ae38 <HAL_GetTick>
 800f268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f26a:	e008      	b.n	800f27e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f26c:	f7fb fde4 	bl	800ae38 <HAL_GetTick>
 800f270:	4602      	mov	r2, r0
 800f272:	693b      	ldr	r3, [r7, #16]
 800f274:	1ad3      	subs	r3, r2, r3
 800f276:	2b02      	cmp	r3, #2
 800f278:	d901      	bls.n	800f27e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800f27a:	2303      	movs	r3, #3
 800f27c:	e091      	b.n	800f3a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f27e:	4b29      	ldr	r3, [pc, #164]	; (800f324 <HAL_RCC_OscConfig+0x4d0>)
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f286:	2b00      	cmp	r3, #0
 800f288:	d1f0      	bne.n	800f26c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	69da      	ldr	r2, [r3, #28]
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	6a1b      	ldr	r3, [r3, #32]
 800f292:	431a      	orrs	r2, r3
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f298:	019b      	lsls	r3, r3, #6
 800f29a:	431a      	orrs	r2, r3
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2a0:	085b      	lsrs	r3, r3, #1
 800f2a2:	3b01      	subs	r3, #1
 800f2a4:	041b      	lsls	r3, r3, #16
 800f2a6:	431a      	orrs	r2, r3
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2ac:	061b      	lsls	r3, r3, #24
 800f2ae:	431a      	orrs	r2, r3
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2b4:	071b      	lsls	r3, r3, #28
 800f2b6:	491b      	ldr	r1, [pc, #108]	; (800f324 <HAL_RCC_OscConfig+0x4d0>)
 800f2b8:	4313      	orrs	r3, r2
 800f2ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f2bc:	4b19      	ldr	r3, [pc, #100]	; (800f324 <HAL_RCC_OscConfig+0x4d0>)
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	4a18      	ldr	r2, [pc, #96]	; (800f324 <HAL_RCC_OscConfig+0x4d0>)
 800f2c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f2c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f2c8:	f7fb fdb6 	bl	800ae38 <HAL_GetTick>
 800f2cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f2ce:	e008      	b.n	800f2e2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f2d0:	f7fb fdb2 	bl	800ae38 <HAL_GetTick>
 800f2d4:	4602      	mov	r2, r0
 800f2d6:	693b      	ldr	r3, [r7, #16]
 800f2d8:	1ad3      	subs	r3, r2, r3
 800f2da:	2b02      	cmp	r3, #2
 800f2dc:	d901      	bls.n	800f2e2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800f2de:	2303      	movs	r3, #3
 800f2e0:	e05f      	b.n	800f3a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f2e2:	4b10      	ldr	r3, [pc, #64]	; (800f324 <HAL_RCC_OscConfig+0x4d0>)
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d0f0      	beq.n	800f2d0 <HAL_RCC_OscConfig+0x47c>
 800f2ee:	e057      	b.n	800f3a0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f2f0:	4b0c      	ldr	r3, [pc, #48]	; (800f324 <HAL_RCC_OscConfig+0x4d0>)
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	4a0b      	ldr	r2, [pc, #44]	; (800f324 <HAL_RCC_OscConfig+0x4d0>)
 800f2f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f2fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f2fc:	f7fb fd9c 	bl	800ae38 <HAL_GetTick>
 800f300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f302:	e008      	b.n	800f316 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f304:	f7fb fd98 	bl	800ae38 <HAL_GetTick>
 800f308:	4602      	mov	r2, r0
 800f30a:	693b      	ldr	r3, [r7, #16]
 800f30c:	1ad3      	subs	r3, r2, r3
 800f30e:	2b02      	cmp	r3, #2
 800f310:	d901      	bls.n	800f316 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800f312:	2303      	movs	r3, #3
 800f314:	e045      	b.n	800f3a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f316:	4b03      	ldr	r3, [pc, #12]	; (800f324 <HAL_RCC_OscConfig+0x4d0>)
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d1f0      	bne.n	800f304 <HAL_RCC_OscConfig+0x4b0>
 800f322:	e03d      	b.n	800f3a0 <HAL_RCC_OscConfig+0x54c>
 800f324:	40023800 	.word	0x40023800
 800f328:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800f32c:	4b1f      	ldr	r3, [pc, #124]	; (800f3ac <HAL_RCC_OscConfig+0x558>)
 800f32e:	685b      	ldr	r3, [r3, #4]
 800f330:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	699b      	ldr	r3, [r3, #24]
 800f336:	2b01      	cmp	r3, #1
 800f338:	d030      	beq.n	800f39c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f344:	429a      	cmp	r2, r3
 800f346:	d129      	bne.n	800f39c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f352:	429a      	cmp	r2, r3
 800f354:	d122      	bne.n	800f39c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800f356:	68fa      	ldr	r2, [r7, #12]
 800f358:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800f35c:	4013      	ands	r3, r2
 800f35e:	687a      	ldr	r2, [r7, #4]
 800f360:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f362:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800f364:	4293      	cmp	r3, r2
 800f366:	d119      	bne.n	800f39c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f372:	085b      	lsrs	r3, r3, #1
 800f374:	3b01      	subs	r3, #1
 800f376:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800f378:	429a      	cmp	r2, r3
 800f37a:	d10f      	bne.n	800f39c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f386:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800f388:	429a      	cmp	r2, r3
 800f38a:	d107      	bne.n	800f39c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f396:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800f398:	429a      	cmp	r2, r3
 800f39a:	d001      	beq.n	800f3a0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800f39c:	2301      	movs	r3, #1
 800f39e:	e000      	b.n	800f3a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800f3a0:	2300      	movs	r3, #0
}
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	3718      	adds	r7, #24
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bd80      	pop	{r7, pc}
 800f3aa:	bf00      	nop
 800f3ac:	40023800 	.word	0x40023800

0800f3b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b084      	sub	sp, #16
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
 800f3b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d101      	bne.n	800f3c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800f3c4:	2301      	movs	r3, #1
 800f3c6:	e0d0      	b.n	800f56a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800f3c8:	4b6a      	ldr	r3, [pc, #424]	; (800f574 <HAL_RCC_ClockConfig+0x1c4>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	f003 030f 	and.w	r3, r3, #15
 800f3d0:	683a      	ldr	r2, [r7, #0]
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	d910      	bls.n	800f3f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f3d6:	4b67      	ldr	r3, [pc, #412]	; (800f574 <HAL_RCC_ClockConfig+0x1c4>)
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	f023 020f 	bic.w	r2, r3, #15
 800f3de:	4965      	ldr	r1, [pc, #404]	; (800f574 <HAL_RCC_ClockConfig+0x1c4>)
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	4313      	orrs	r3, r2
 800f3e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f3e6:	4b63      	ldr	r3, [pc, #396]	; (800f574 <HAL_RCC_ClockConfig+0x1c4>)
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	f003 030f 	and.w	r3, r3, #15
 800f3ee:	683a      	ldr	r2, [r7, #0]
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	d001      	beq.n	800f3f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800f3f4:	2301      	movs	r3, #1
 800f3f6:	e0b8      	b.n	800f56a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	f003 0302 	and.w	r3, r3, #2
 800f400:	2b00      	cmp	r3, #0
 800f402:	d020      	beq.n	800f446 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	f003 0304 	and.w	r3, r3, #4
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d005      	beq.n	800f41c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800f410:	4b59      	ldr	r3, [pc, #356]	; (800f578 <HAL_RCC_ClockConfig+0x1c8>)
 800f412:	689b      	ldr	r3, [r3, #8]
 800f414:	4a58      	ldr	r2, [pc, #352]	; (800f578 <HAL_RCC_ClockConfig+0x1c8>)
 800f416:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800f41a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	f003 0308 	and.w	r3, r3, #8
 800f424:	2b00      	cmp	r3, #0
 800f426:	d005      	beq.n	800f434 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800f428:	4b53      	ldr	r3, [pc, #332]	; (800f578 <HAL_RCC_ClockConfig+0x1c8>)
 800f42a:	689b      	ldr	r3, [r3, #8]
 800f42c:	4a52      	ldr	r2, [pc, #328]	; (800f578 <HAL_RCC_ClockConfig+0x1c8>)
 800f42e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800f432:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f434:	4b50      	ldr	r3, [pc, #320]	; (800f578 <HAL_RCC_ClockConfig+0x1c8>)
 800f436:	689b      	ldr	r3, [r3, #8]
 800f438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	689b      	ldr	r3, [r3, #8]
 800f440:	494d      	ldr	r1, [pc, #308]	; (800f578 <HAL_RCC_ClockConfig+0x1c8>)
 800f442:	4313      	orrs	r3, r2
 800f444:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	f003 0301 	and.w	r3, r3, #1
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d040      	beq.n	800f4d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	685b      	ldr	r3, [r3, #4]
 800f456:	2b01      	cmp	r3, #1
 800f458:	d107      	bne.n	800f46a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f45a:	4b47      	ldr	r3, [pc, #284]	; (800f578 <HAL_RCC_ClockConfig+0x1c8>)
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f462:	2b00      	cmp	r3, #0
 800f464:	d115      	bne.n	800f492 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800f466:	2301      	movs	r3, #1
 800f468:	e07f      	b.n	800f56a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	685b      	ldr	r3, [r3, #4]
 800f46e:	2b02      	cmp	r3, #2
 800f470:	d107      	bne.n	800f482 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f472:	4b41      	ldr	r3, [pc, #260]	; (800f578 <HAL_RCC_ClockConfig+0x1c8>)
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d109      	bne.n	800f492 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800f47e:	2301      	movs	r3, #1
 800f480:	e073      	b.n	800f56a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f482:	4b3d      	ldr	r3, [pc, #244]	; (800f578 <HAL_RCC_ClockConfig+0x1c8>)
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	f003 0302 	and.w	r3, r3, #2
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d101      	bne.n	800f492 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800f48e:	2301      	movs	r3, #1
 800f490:	e06b      	b.n	800f56a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f492:	4b39      	ldr	r3, [pc, #228]	; (800f578 <HAL_RCC_ClockConfig+0x1c8>)
 800f494:	689b      	ldr	r3, [r3, #8]
 800f496:	f023 0203 	bic.w	r2, r3, #3
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	685b      	ldr	r3, [r3, #4]
 800f49e:	4936      	ldr	r1, [pc, #216]	; (800f578 <HAL_RCC_ClockConfig+0x1c8>)
 800f4a0:	4313      	orrs	r3, r2
 800f4a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f4a4:	f7fb fcc8 	bl	800ae38 <HAL_GetTick>
 800f4a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f4aa:	e00a      	b.n	800f4c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f4ac:	f7fb fcc4 	bl	800ae38 <HAL_GetTick>
 800f4b0:	4602      	mov	r2, r0
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	1ad3      	subs	r3, r2, r3
 800f4b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800f4ba:	4293      	cmp	r3, r2
 800f4bc:	d901      	bls.n	800f4c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800f4be:	2303      	movs	r3, #3
 800f4c0:	e053      	b.n	800f56a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f4c2:	4b2d      	ldr	r3, [pc, #180]	; (800f578 <HAL_RCC_ClockConfig+0x1c8>)
 800f4c4:	689b      	ldr	r3, [r3, #8]
 800f4c6:	f003 020c 	and.w	r2, r3, #12
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	685b      	ldr	r3, [r3, #4]
 800f4ce:	009b      	lsls	r3, r3, #2
 800f4d0:	429a      	cmp	r2, r3
 800f4d2:	d1eb      	bne.n	800f4ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800f4d4:	4b27      	ldr	r3, [pc, #156]	; (800f574 <HAL_RCC_ClockConfig+0x1c4>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	f003 030f 	and.w	r3, r3, #15
 800f4dc:	683a      	ldr	r2, [r7, #0]
 800f4de:	429a      	cmp	r2, r3
 800f4e0:	d210      	bcs.n	800f504 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f4e2:	4b24      	ldr	r3, [pc, #144]	; (800f574 <HAL_RCC_ClockConfig+0x1c4>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	f023 020f 	bic.w	r2, r3, #15
 800f4ea:	4922      	ldr	r1, [pc, #136]	; (800f574 <HAL_RCC_ClockConfig+0x1c4>)
 800f4ec:	683b      	ldr	r3, [r7, #0]
 800f4ee:	4313      	orrs	r3, r2
 800f4f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f4f2:	4b20      	ldr	r3, [pc, #128]	; (800f574 <HAL_RCC_ClockConfig+0x1c4>)
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	f003 030f 	and.w	r3, r3, #15
 800f4fa:	683a      	ldr	r2, [r7, #0]
 800f4fc:	429a      	cmp	r2, r3
 800f4fe:	d001      	beq.n	800f504 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800f500:	2301      	movs	r3, #1
 800f502:	e032      	b.n	800f56a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	f003 0304 	and.w	r3, r3, #4
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d008      	beq.n	800f522 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f510:	4b19      	ldr	r3, [pc, #100]	; (800f578 <HAL_RCC_ClockConfig+0x1c8>)
 800f512:	689b      	ldr	r3, [r3, #8]
 800f514:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	68db      	ldr	r3, [r3, #12]
 800f51c:	4916      	ldr	r1, [pc, #88]	; (800f578 <HAL_RCC_ClockConfig+0x1c8>)
 800f51e:	4313      	orrs	r3, r2
 800f520:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	f003 0308 	and.w	r3, r3, #8
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d009      	beq.n	800f542 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800f52e:	4b12      	ldr	r3, [pc, #72]	; (800f578 <HAL_RCC_ClockConfig+0x1c8>)
 800f530:	689b      	ldr	r3, [r3, #8]
 800f532:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	691b      	ldr	r3, [r3, #16]
 800f53a:	00db      	lsls	r3, r3, #3
 800f53c:	490e      	ldr	r1, [pc, #56]	; (800f578 <HAL_RCC_ClockConfig+0x1c8>)
 800f53e:	4313      	orrs	r3, r2
 800f540:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800f542:	f000 f821 	bl	800f588 <HAL_RCC_GetSysClockFreq>
 800f546:	4602      	mov	r2, r0
 800f548:	4b0b      	ldr	r3, [pc, #44]	; (800f578 <HAL_RCC_ClockConfig+0x1c8>)
 800f54a:	689b      	ldr	r3, [r3, #8]
 800f54c:	091b      	lsrs	r3, r3, #4
 800f54e:	f003 030f 	and.w	r3, r3, #15
 800f552:	490a      	ldr	r1, [pc, #40]	; (800f57c <HAL_RCC_ClockConfig+0x1cc>)
 800f554:	5ccb      	ldrb	r3, [r1, r3]
 800f556:	fa22 f303 	lsr.w	r3, r2, r3
 800f55a:	4a09      	ldr	r2, [pc, #36]	; (800f580 <HAL_RCC_ClockConfig+0x1d0>)
 800f55c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800f55e:	4b09      	ldr	r3, [pc, #36]	; (800f584 <HAL_RCC_ClockConfig+0x1d4>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	4618      	mov	r0, r3
 800f564:	f7f3 fbbc 	bl	8002ce0 <HAL_InitTick>

  return HAL_OK;
 800f568:	2300      	movs	r3, #0
}
 800f56a:	4618      	mov	r0, r3
 800f56c:	3710      	adds	r7, #16
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd80      	pop	{r7, pc}
 800f572:	bf00      	nop
 800f574:	40023c00 	.word	0x40023c00
 800f578:	40023800 	.word	0x40023800
 800f57c:	0802c874 	.word	0x0802c874
 800f580:	20000014 	.word	0x20000014
 800f584:	20000018 	.word	0x20000018

0800f588 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f588:	b5b0      	push	{r4, r5, r7, lr}
 800f58a:	b084      	sub	sp, #16
 800f58c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800f58e:	2100      	movs	r1, #0
 800f590:	6079      	str	r1, [r7, #4]
 800f592:	2100      	movs	r1, #0
 800f594:	60f9      	str	r1, [r7, #12]
 800f596:	2100      	movs	r1, #0
 800f598:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800f59a:	2100      	movs	r1, #0
 800f59c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f59e:	4952      	ldr	r1, [pc, #328]	; (800f6e8 <HAL_RCC_GetSysClockFreq+0x160>)
 800f5a0:	6889      	ldr	r1, [r1, #8]
 800f5a2:	f001 010c 	and.w	r1, r1, #12
 800f5a6:	2908      	cmp	r1, #8
 800f5a8:	d00d      	beq.n	800f5c6 <HAL_RCC_GetSysClockFreq+0x3e>
 800f5aa:	2908      	cmp	r1, #8
 800f5ac:	f200 8094 	bhi.w	800f6d8 <HAL_RCC_GetSysClockFreq+0x150>
 800f5b0:	2900      	cmp	r1, #0
 800f5b2:	d002      	beq.n	800f5ba <HAL_RCC_GetSysClockFreq+0x32>
 800f5b4:	2904      	cmp	r1, #4
 800f5b6:	d003      	beq.n	800f5c0 <HAL_RCC_GetSysClockFreq+0x38>
 800f5b8:	e08e      	b.n	800f6d8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800f5ba:	4b4c      	ldr	r3, [pc, #304]	; (800f6ec <HAL_RCC_GetSysClockFreq+0x164>)
 800f5bc:	60bb      	str	r3, [r7, #8]
      break;
 800f5be:	e08e      	b.n	800f6de <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800f5c0:	4b4b      	ldr	r3, [pc, #300]	; (800f6f0 <HAL_RCC_GetSysClockFreq+0x168>)
 800f5c2:	60bb      	str	r3, [r7, #8]
      break;
 800f5c4:	e08b      	b.n	800f6de <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f5c6:	4948      	ldr	r1, [pc, #288]	; (800f6e8 <HAL_RCC_GetSysClockFreq+0x160>)
 800f5c8:	6849      	ldr	r1, [r1, #4]
 800f5ca:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800f5ce:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800f5d0:	4945      	ldr	r1, [pc, #276]	; (800f6e8 <HAL_RCC_GetSysClockFreq+0x160>)
 800f5d2:	6849      	ldr	r1, [r1, #4]
 800f5d4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800f5d8:	2900      	cmp	r1, #0
 800f5da:	d024      	beq.n	800f626 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f5dc:	4942      	ldr	r1, [pc, #264]	; (800f6e8 <HAL_RCC_GetSysClockFreq+0x160>)
 800f5de:	6849      	ldr	r1, [r1, #4]
 800f5e0:	0989      	lsrs	r1, r1, #6
 800f5e2:	4608      	mov	r0, r1
 800f5e4:	f04f 0100 	mov.w	r1, #0
 800f5e8:	f240 14ff 	movw	r4, #511	; 0x1ff
 800f5ec:	f04f 0500 	mov.w	r5, #0
 800f5f0:	ea00 0204 	and.w	r2, r0, r4
 800f5f4:	ea01 0305 	and.w	r3, r1, r5
 800f5f8:	493d      	ldr	r1, [pc, #244]	; (800f6f0 <HAL_RCC_GetSysClockFreq+0x168>)
 800f5fa:	fb01 f003 	mul.w	r0, r1, r3
 800f5fe:	2100      	movs	r1, #0
 800f600:	fb01 f102 	mul.w	r1, r1, r2
 800f604:	1844      	adds	r4, r0, r1
 800f606:	493a      	ldr	r1, [pc, #232]	; (800f6f0 <HAL_RCC_GetSysClockFreq+0x168>)
 800f608:	fba2 0101 	umull	r0, r1, r2, r1
 800f60c:	1863      	adds	r3, r4, r1
 800f60e:	4619      	mov	r1, r3
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	461a      	mov	r2, r3
 800f614:	f04f 0300 	mov.w	r3, #0
 800f618:	f7f1 f826 	bl	8000668 <__aeabi_uldivmod>
 800f61c:	4602      	mov	r2, r0
 800f61e:	460b      	mov	r3, r1
 800f620:	4613      	mov	r3, r2
 800f622:	60fb      	str	r3, [r7, #12]
 800f624:	e04a      	b.n	800f6bc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f626:	4b30      	ldr	r3, [pc, #192]	; (800f6e8 <HAL_RCC_GetSysClockFreq+0x160>)
 800f628:	685b      	ldr	r3, [r3, #4]
 800f62a:	099b      	lsrs	r3, r3, #6
 800f62c:	461a      	mov	r2, r3
 800f62e:	f04f 0300 	mov.w	r3, #0
 800f632:	f240 10ff 	movw	r0, #511	; 0x1ff
 800f636:	f04f 0100 	mov.w	r1, #0
 800f63a:	ea02 0400 	and.w	r4, r2, r0
 800f63e:	ea03 0501 	and.w	r5, r3, r1
 800f642:	4620      	mov	r0, r4
 800f644:	4629      	mov	r1, r5
 800f646:	f04f 0200 	mov.w	r2, #0
 800f64a:	f04f 0300 	mov.w	r3, #0
 800f64e:	014b      	lsls	r3, r1, #5
 800f650:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800f654:	0142      	lsls	r2, r0, #5
 800f656:	4610      	mov	r0, r2
 800f658:	4619      	mov	r1, r3
 800f65a:	1b00      	subs	r0, r0, r4
 800f65c:	eb61 0105 	sbc.w	r1, r1, r5
 800f660:	f04f 0200 	mov.w	r2, #0
 800f664:	f04f 0300 	mov.w	r3, #0
 800f668:	018b      	lsls	r3, r1, #6
 800f66a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800f66e:	0182      	lsls	r2, r0, #6
 800f670:	1a12      	subs	r2, r2, r0
 800f672:	eb63 0301 	sbc.w	r3, r3, r1
 800f676:	f04f 0000 	mov.w	r0, #0
 800f67a:	f04f 0100 	mov.w	r1, #0
 800f67e:	00d9      	lsls	r1, r3, #3
 800f680:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f684:	00d0      	lsls	r0, r2, #3
 800f686:	4602      	mov	r2, r0
 800f688:	460b      	mov	r3, r1
 800f68a:	1912      	adds	r2, r2, r4
 800f68c:	eb45 0303 	adc.w	r3, r5, r3
 800f690:	f04f 0000 	mov.w	r0, #0
 800f694:	f04f 0100 	mov.w	r1, #0
 800f698:	0299      	lsls	r1, r3, #10
 800f69a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800f69e:	0290      	lsls	r0, r2, #10
 800f6a0:	4602      	mov	r2, r0
 800f6a2:	460b      	mov	r3, r1
 800f6a4:	4610      	mov	r0, r2
 800f6a6:	4619      	mov	r1, r3
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	461a      	mov	r2, r3
 800f6ac:	f04f 0300 	mov.w	r3, #0
 800f6b0:	f7f0 ffda 	bl	8000668 <__aeabi_uldivmod>
 800f6b4:	4602      	mov	r2, r0
 800f6b6:	460b      	mov	r3, r1
 800f6b8:	4613      	mov	r3, r2
 800f6ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800f6bc:	4b0a      	ldr	r3, [pc, #40]	; (800f6e8 <HAL_RCC_GetSysClockFreq+0x160>)
 800f6be:	685b      	ldr	r3, [r3, #4]
 800f6c0:	0c1b      	lsrs	r3, r3, #16
 800f6c2:	f003 0303 	and.w	r3, r3, #3
 800f6c6:	3301      	adds	r3, #1
 800f6c8:	005b      	lsls	r3, r3, #1
 800f6ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800f6cc:	68fa      	ldr	r2, [r7, #12]
 800f6ce:	683b      	ldr	r3, [r7, #0]
 800f6d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f6d4:	60bb      	str	r3, [r7, #8]
      break;
 800f6d6:	e002      	b.n	800f6de <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f6d8:	4b04      	ldr	r3, [pc, #16]	; (800f6ec <HAL_RCC_GetSysClockFreq+0x164>)
 800f6da:	60bb      	str	r3, [r7, #8]
      break;
 800f6dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f6de:	68bb      	ldr	r3, [r7, #8]
}
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	3710      	adds	r7, #16
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bdb0      	pop	{r4, r5, r7, pc}
 800f6e8:	40023800 	.word	0x40023800
 800f6ec:	00f42400 	.word	0x00f42400
 800f6f0:	017d7840 	.word	0x017d7840

0800f6f4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f6f4:	b480      	push	{r7}
 800f6f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f6f8:	4b03      	ldr	r3, [pc, #12]	; (800f708 <HAL_RCC_GetHCLKFreq+0x14>)
 800f6fa:	681b      	ldr	r3, [r3, #0]
}
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	46bd      	mov	sp, r7
 800f700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f704:	4770      	bx	lr
 800f706:	bf00      	nop
 800f708:	20000014 	.word	0x20000014

0800f70c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800f710:	f7ff fff0 	bl	800f6f4 <HAL_RCC_GetHCLKFreq>
 800f714:	4602      	mov	r2, r0
 800f716:	4b05      	ldr	r3, [pc, #20]	; (800f72c <HAL_RCC_GetPCLK1Freq+0x20>)
 800f718:	689b      	ldr	r3, [r3, #8]
 800f71a:	0a9b      	lsrs	r3, r3, #10
 800f71c:	f003 0307 	and.w	r3, r3, #7
 800f720:	4903      	ldr	r1, [pc, #12]	; (800f730 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f722:	5ccb      	ldrb	r3, [r1, r3]
 800f724:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f728:	4618      	mov	r0, r3
 800f72a:	bd80      	pop	{r7, pc}
 800f72c:	40023800 	.word	0x40023800
 800f730:	0802c884 	.word	0x0802c884

0800f734 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800f734:	b480      	push	{r7}
 800f736:	b083      	sub	sp, #12
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
 800f73c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	220f      	movs	r2, #15
 800f742:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800f744:	4b12      	ldr	r3, [pc, #72]	; (800f790 <HAL_RCC_GetClockConfig+0x5c>)
 800f746:	689b      	ldr	r3, [r3, #8]
 800f748:	f003 0203 	and.w	r2, r3, #3
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800f750:	4b0f      	ldr	r3, [pc, #60]	; (800f790 <HAL_RCC_GetClockConfig+0x5c>)
 800f752:	689b      	ldr	r3, [r3, #8]
 800f754:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800f75c:	4b0c      	ldr	r3, [pc, #48]	; (800f790 <HAL_RCC_GetClockConfig+0x5c>)
 800f75e:	689b      	ldr	r3, [r3, #8]
 800f760:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800f768:	4b09      	ldr	r3, [pc, #36]	; (800f790 <HAL_RCC_GetClockConfig+0x5c>)
 800f76a:	689b      	ldr	r3, [r3, #8]
 800f76c:	08db      	lsrs	r3, r3, #3
 800f76e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800f776:	4b07      	ldr	r3, [pc, #28]	; (800f794 <HAL_RCC_GetClockConfig+0x60>)
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	f003 020f 	and.w	r2, r3, #15
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	601a      	str	r2, [r3, #0]
}
 800f782:	bf00      	nop
 800f784:	370c      	adds	r7, #12
 800f786:	46bd      	mov	sp, r7
 800f788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78c:	4770      	bx	lr
 800f78e:	bf00      	nop
 800f790:	40023800 	.word	0x40023800
 800f794:	40023c00 	.word	0x40023c00

0800f798 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b088      	sub	sp, #32
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	f003 0301 	and.w	r3, r3, #1
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d012      	beq.n	800f7e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800f7c0:	4b69      	ldr	r3, [pc, #420]	; (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f7c2:	689b      	ldr	r3, [r3, #8]
 800f7c4:	4a68      	ldr	r2, [pc, #416]	; (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f7c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f7ca:	6093      	str	r3, [r2, #8]
 800f7cc:	4b66      	ldr	r3, [pc, #408]	; (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f7ce:	689a      	ldr	r2, [r3, #8]
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7d4:	4964      	ldr	r1, [pc, #400]	; (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f7d6:	4313      	orrs	r3, r2
 800f7d8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d101      	bne.n	800f7e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800f7e2:	2301      	movs	r3, #1
 800f7e4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d017      	beq.n	800f822 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f7f2:	4b5d      	ldr	r3, [pc, #372]	; (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f7f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f7f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f800:	4959      	ldr	r1, [pc, #356]	; (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f802:	4313      	orrs	r3, r2
 800f804:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f80c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f810:	d101      	bne.n	800f816 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800f812:	2301      	movs	r3, #1
 800f814:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d101      	bne.n	800f822 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800f81e:	2301      	movs	r3, #1
 800f820:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d017      	beq.n	800f85e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800f82e:	4b4e      	ldr	r3, [pc, #312]	; (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f834:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f83c:	494a      	ldr	r1, [pc, #296]	; (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f83e:	4313      	orrs	r3, r2
 800f840:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f848:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f84c:	d101      	bne.n	800f852 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800f84e:	2301      	movs	r3, #1
 800f850:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f856:	2b00      	cmp	r3, #0
 800f858:	d101      	bne.n	800f85e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800f85a:	2301      	movs	r3, #1
 800f85c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f866:	2b00      	cmp	r3, #0
 800f868:	d001      	beq.n	800f86e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800f86a:	2301      	movs	r3, #1
 800f86c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	f003 0320 	and.w	r3, r3, #32
 800f876:	2b00      	cmp	r3, #0
 800f878:	f000 808b 	beq.w	800f992 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800f87c:	4b3a      	ldr	r3, [pc, #232]	; (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f87e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f880:	4a39      	ldr	r2, [pc, #228]	; (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f886:	6413      	str	r3, [r2, #64]	; 0x40
 800f888:	4b37      	ldr	r3, [pc, #220]	; (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f88a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f88c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f890:	60bb      	str	r3, [r7, #8]
 800f892:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800f894:	4b35      	ldr	r3, [pc, #212]	; (800f96c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	4a34      	ldr	r2, [pc, #208]	; (800f96c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800f89a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f89e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f8a0:	f7fb faca 	bl	800ae38 <HAL_GetTick>
 800f8a4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800f8a6:	e008      	b.n	800f8ba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f8a8:	f7fb fac6 	bl	800ae38 <HAL_GetTick>
 800f8ac:	4602      	mov	r2, r0
 800f8ae:	697b      	ldr	r3, [r7, #20]
 800f8b0:	1ad3      	subs	r3, r2, r3
 800f8b2:	2b64      	cmp	r3, #100	; 0x64
 800f8b4:	d901      	bls.n	800f8ba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800f8b6:	2303      	movs	r3, #3
 800f8b8:	e38f      	b.n	800ffda <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800f8ba:	4b2c      	ldr	r3, [pc, #176]	; (800f96c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d0f0      	beq.n	800f8a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800f8c6:	4b28      	ldr	r3, [pc, #160]	; (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f8c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f8ce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800f8d0:	693b      	ldr	r3, [r7, #16]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d035      	beq.n	800f942 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f8de:	693a      	ldr	r2, [r7, #16]
 800f8e0:	429a      	cmp	r2, r3
 800f8e2:	d02e      	beq.n	800f942 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f8e4:	4b20      	ldr	r3, [pc, #128]	; (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f8e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f8ec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800f8ee:	4b1e      	ldr	r3, [pc, #120]	; (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f8f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8f2:	4a1d      	ldr	r2, [pc, #116]	; (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f8f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f8f8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800f8fa:	4b1b      	ldr	r3, [pc, #108]	; (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f8fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8fe:	4a1a      	ldr	r2, [pc, #104]	; (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f900:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f904:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800f906:	4a18      	ldr	r2, [pc, #96]	; (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f908:	693b      	ldr	r3, [r7, #16]
 800f90a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800f90c:	4b16      	ldr	r3, [pc, #88]	; (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f90e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f910:	f003 0301 	and.w	r3, r3, #1
 800f914:	2b01      	cmp	r3, #1
 800f916:	d114      	bne.n	800f942 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f918:	f7fb fa8e 	bl	800ae38 <HAL_GetTick>
 800f91c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f91e:	e00a      	b.n	800f936 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f920:	f7fb fa8a 	bl	800ae38 <HAL_GetTick>
 800f924:	4602      	mov	r2, r0
 800f926:	697b      	ldr	r3, [r7, #20]
 800f928:	1ad3      	subs	r3, r2, r3
 800f92a:	f241 3288 	movw	r2, #5000	; 0x1388
 800f92e:	4293      	cmp	r3, r2
 800f930:	d901      	bls.n	800f936 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800f932:	2303      	movs	r3, #3
 800f934:	e351      	b.n	800ffda <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f936:	4b0c      	ldr	r3, [pc, #48]	; (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f93a:	f003 0302 	and.w	r3, r3, #2
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d0ee      	beq.n	800f920 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f94a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f94e:	d111      	bne.n	800f974 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800f950:	4b05      	ldr	r3, [pc, #20]	; (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f952:	689b      	ldr	r3, [r3, #8]
 800f954:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800f95c:	4b04      	ldr	r3, [pc, #16]	; (800f970 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800f95e:	400b      	ands	r3, r1
 800f960:	4901      	ldr	r1, [pc, #4]	; (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f962:	4313      	orrs	r3, r2
 800f964:	608b      	str	r3, [r1, #8]
 800f966:	e00b      	b.n	800f980 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800f968:	40023800 	.word	0x40023800
 800f96c:	40007000 	.word	0x40007000
 800f970:	0ffffcff 	.word	0x0ffffcff
 800f974:	4bb3      	ldr	r3, [pc, #716]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f976:	689b      	ldr	r3, [r3, #8]
 800f978:	4ab2      	ldr	r2, [pc, #712]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f97a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800f97e:	6093      	str	r3, [r2, #8]
 800f980:	4bb0      	ldr	r3, [pc, #704]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f982:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f98c:	49ad      	ldr	r1, [pc, #692]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f98e:	4313      	orrs	r3, r2
 800f990:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	f003 0310 	and.w	r3, r3, #16
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d010      	beq.n	800f9c0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f99e:	4ba9      	ldr	r3, [pc, #676]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f9a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f9a4:	4aa7      	ldr	r2, [pc, #668]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f9a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f9aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800f9ae:	4ba5      	ldr	r3, [pc, #660]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f9b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9b8:	49a2      	ldr	r1, [pc, #648]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f9ba:	4313      	orrs	r3, r2
 800f9bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d00a      	beq.n	800f9e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800f9cc:	4b9d      	ldr	r3, [pc, #628]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f9ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f9d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f9da:	499a      	ldr	r1, [pc, #616]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f9dc:	4313      	orrs	r3, r2
 800f9de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d00a      	beq.n	800fa04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800f9ee:	4b95      	ldr	r3, [pc, #596]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f9f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f9f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f9fc:	4991      	ldr	r1, [pc, #580]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800f9fe:	4313      	orrs	r3, r2
 800fa00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d00a      	beq.n	800fa26 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800fa10:	4b8c      	ldr	r3, [pc, #560]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fa12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa1e:	4989      	ldr	r1, [pc, #548]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fa20:	4313      	orrs	r3, r2
 800fa22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d00a      	beq.n	800fa48 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800fa32:	4b84      	ldr	r3, [pc, #528]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fa34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa40:	4980      	ldr	r1, [pc, #512]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fa42:	4313      	orrs	r3, r2
 800fa44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d00a      	beq.n	800fa6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800fa54:	4b7b      	ldr	r3, [pc, #492]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fa56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa5a:	f023 0203 	bic.w	r2, r3, #3
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa62:	4978      	ldr	r1, [pc, #480]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fa64:	4313      	orrs	r3, r2
 800fa66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d00a      	beq.n	800fa8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800fa76:	4b73      	ldr	r3, [pc, #460]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fa78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa7c:	f023 020c 	bic.w	r2, r3, #12
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fa84:	496f      	ldr	r1, [pc, #444]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fa86:	4313      	orrs	r3, r2
 800fa88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d00a      	beq.n	800faae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800fa98:	4b6a      	ldr	r3, [pc, #424]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fa9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa9e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800faa6:	4967      	ldr	r1, [pc, #412]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800faa8:	4313      	orrs	r3, r2
 800faaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d00a      	beq.n	800fad0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800faba:	4b62      	ldr	r3, [pc, #392]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fabc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fac0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fac8:	495e      	ldr	r1, [pc, #376]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800faca:	4313      	orrs	r3, r2
 800facc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d00a      	beq.n	800faf2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800fadc:	4b59      	ldr	r3, [pc, #356]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fae2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800faea:	4956      	ldr	r1, [pc, #344]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800faec:	4313      	orrs	r3, r2
 800faee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d00a      	beq.n	800fb14 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800fafe:	4b51      	ldr	r3, [pc, #324]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fb00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb04:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb0c:	494d      	ldr	r1, [pc, #308]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fb0e:	4313      	orrs	r3, r2
 800fb10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d00a      	beq.n	800fb36 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800fb20:	4b48      	ldr	r3, [pc, #288]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fb22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb26:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fb2e:	4945      	ldr	r1, [pc, #276]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fb30:	4313      	orrs	r3, r2
 800fb32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d00a      	beq.n	800fb58 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800fb42:	4b40      	ldr	r3, [pc, #256]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fb44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb48:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fb50:	493c      	ldr	r1, [pc, #240]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fb52:	4313      	orrs	r3, r2
 800fb54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d00a      	beq.n	800fb7a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800fb64:	4b37      	ldr	r3, [pc, #220]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fb66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb6a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fb72:	4934      	ldr	r1, [pc, #208]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fb74:	4313      	orrs	r3, r2
 800fb76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d011      	beq.n	800fbaa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800fb86:	4b2f      	ldr	r3, [pc, #188]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fb88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb8c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb94:	492b      	ldr	r1, [pc, #172]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fb96:	4313      	orrs	r3, r2
 800fb98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fba0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fba4:	d101      	bne.n	800fbaa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800fba6:	2301      	movs	r3, #1
 800fba8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	f003 0308 	and.w	r3, r3, #8
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d001      	beq.n	800fbba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800fbb6:	2301      	movs	r3, #1
 800fbb8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d00a      	beq.n	800fbdc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800fbc6:	4b1f      	ldr	r3, [pc, #124]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fbc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fbcc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fbd4:	491b      	ldr	r1, [pc, #108]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fbd6:	4313      	orrs	r3, r2
 800fbd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d00b      	beq.n	800fc00 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800fbe8:	4b16      	ldr	r3, [pc, #88]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fbea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fbee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fbf8:	4912      	ldr	r1, [pc, #72]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fbfa:	4313      	orrs	r3, r2
 800fbfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d00b      	beq.n	800fc24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800fc0c:	4b0d      	ldr	r3, [pc, #52]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fc0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc12:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc1c:	4909      	ldr	r1, [pc, #36]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fc1e:	4313      	orrs	r3, r2
 800fc20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d00f      	beq.n	800fc50 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800fc30:	4b04      	ldr	r3, [pc, #16]	; (800fc44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800fc32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc36:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fc40:	e002      	b.n	800fc48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800fc42:	bf00      	nop
 800fc44:	40023800 	.word	0x40023800
 800fc48:	4986      	ldr	r1, [pc, #536]	; (800fe64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fc4a:	4313      	orrs	r3, r2
 800fc4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d00b      	beq.n	800fc74 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800fc5c:	4b81      	ldr	r3, [pc, #516]	; (800fe64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fc5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc62:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc6c:	497d      	ldr	r1, [pc, #500]	; (800fe64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fc6e:	4313      	orrs	r3, r2
 800fc70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800fc74:	69fb      	ldr	r3, [r7, #28]
 800fc76:	2b01      	cmp	r3, #1
 800fc78:	d006      	beq.n	800fc88 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	f000 80d6 	beq.w	800fe34 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800fc88:	4b76      	ldr	r3, [pc, #472]	; (800fe64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	4a75      	ldr	r2, [pc, #468]	; (800fe64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fc8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fc92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fc94:	f7fb f8d0 	bl	800ae38 <HAL_GetTick>
 800fc98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800fc9a:	e008      	b.n	800fcae <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800fc9c:	f7fb f8cc 	bl	800ae38 <HAL_GetTick>
 800fca0:	4602      	mov	r2, r0
 800fca2:	697b      	ldr	r3, [r7, #20]
 800fca4:	1ad3      	subs	r3, r2, r3
 800fca6:	2b64      	cmp	r3, #100	; 0x64
 800fca8:	d901      	bls.n	800fcae <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800fcaa:	2303      	movs	r3, #3
 800fcac:	e195      	b.n	800ffda <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800fcae:	4b6d      	ldr	r3, [pc, #436]	; (800fe64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d1f0      	bne.n	800fc9c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	f003 0301 	and.w	r3, r3, #1
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d021      	beq.n	800fd0a <HAL_RCCEx_PeriphCLKConfig+0x572>
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d11d      	bne.n	800fd0a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800fcce:	4b65      	ldr	r3, [pc, #404]	; (800fe64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fcd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fcd4:	0c1b      	lsrs	r3, r3, #16
 800fcd6:	f003 0303 	and.w	r3, r3, #3
 800fcda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800fcdc:	4b61      	ldr	r3, [pc, #388]	; (800fe64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fcde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fce2:	0e1b      	lsrs	r3, r3, #24
 800fce4:	f003 030f 	and.w	r3, r3, #15
 800fce8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	685b      	ldr	r3, [r3, #4]
 800fcee:	019a      	lsls	r2, r3, #6
 800fcf0:	693b      	ldr	r3, [r7, #16]
 800fcf2:	041b      	lsls	r3, r3, #16
 800fcf4:	431a      	orrs	r2, r3
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	061b      	lsls	r3, r3, #24
 800fcfa:	431a      	orrs	r2, r3
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	689b      	ldr	r3, [r3, #8]
 800fd00:	071b      	lsls	r3, r3, #28
 800fd02:	4958      	ldr	r1, [pc, #352]	; (800fe64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fd04:	4313      	orrs	r3, r2
 800fd06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d004      	beq.n	800fd20 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fd1e:	d00a      	beq.n	800fd36 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d02e      	beq.n	800fd8a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fd34:	d129      	bne.n	800fd8a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800fd36:	4b4b      	ldr	r3, [pc, #300]	; (800fe64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fd38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd3c:	0c1b      	lsrs	r3, r3, #16
 800fd3e:	f003 0303 	and.w	r3, r3, #3
 800fd42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800fd44:	4b47      	ldr	r3, [pc, #284]	; (800fe64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fd46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd4a:	0f1b      	lsrs	r3, r3, #28
 800fd4c:	f003 0307 	and.w	r3, r3, #7
 800fd50:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	685b      	ldr	r3, [r3, #4]
 800fd56:	019a      	lsls	r2, r3, #6
 800fd58:	693b      	ldr	r3, [r7, #16]
 800fd5a:	041b      	lsls	r3, r3, #16
 800fd5c:	431a      	orrs	r2, r3
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	68db      	ldr	r3, [r3, #12]
 800fd62:	061b      	lsls	r3, r3, #24
 800fd64:	431a      	orrs	r2, r3
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	071b      	lsls	r3, r3, #28
 800fd6a:	493e      	ldr	r1, [pc, #248]	; (800fe64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fd6c:	4313      	orrs	r3, r2
 800fd6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800fd72:	4b3c      	ldr	r3, [pc, #240]	; (800fe64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fd74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fd78:	f023 021f 	bic.w	r2, r3, #31
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd80:	3b01      	subs	r3, #1
 800fd82:	4938      	ldr	r1, [pc, #224]	; (800fe64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fd84:	4313      	orrs	r3, r2
 800fd86:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d01d      	beq.n	800fdd2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800fd96:	4b33      	ldr	r3, [pc, #204]	; (800fe64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fd98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd9c:	0e1b      	lsrs	r3, r3, #24
 800fd9e:	f003 030f 	and.w	r3, r3, #15
 800fda2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800fda4:	4b2f      	ldr	r3, [pc, #188]	; (800fe64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fda6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fdaa:	0f1b      	lsrs	r3, r3, #28
 800fdac:	f003 0307 	and.w	r3, r3, #7
 800fdb0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	685b      	ldr	r3, [r3, #4]
 800fdb6:	019a      	lsls	r2, r3, #6
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	691b      	ldr	r3, [r3, #16]
 800fdbc:	041b      	lsls	r3, r3, #16
 800fdbe:	431a      	orrs	r2, r3
 800fdc0:	693b      	ldr	r3, [r7, #16]
 800fdc2:	061b      	lsls	r3, r3, #24
 800fdc4:	431a      	orrs	r2, r3
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	071b      	lsls	r3, r3, #28
 800fdca:	4926      	ldr	r1, [pc, #152]	; (800fe64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fdcc:	4313      	orrs	r3, r2
 800fdce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d011      	beq.n	800fe02 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	685b      	ldr	r3, [r3, #4]
 800fde2:	019a      	lsls	r2, r3, #6
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	691b      	ldr	r3, [r3, #16]
 800fde8:	041b      	lsls	r3, r3, #16
 800fdea:	431a      	orrs	r2, r3
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	68db      	ldr	r3, [r3, #12]
 800fdf0:	061b      	lsls	r3, r3, #24
 800fdf2:	431a      	orrs	r2, r3
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	689b      	ldr	r3, [r3, #8]
 800fdf8:	071b      	lsls	r3, r3, #28
 800fdfa:	491a      	ldr	r1, [pc, #104]	; (800fe64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fdfc:	4313      	orrs	r3, r2
 800fdfe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800fe02:	4b18      	ldr	r3, [pc, #96]	; (800fe64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	4a17      	ldr	r2, [pc, #92]	; (800fe64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fe08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800fe0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fe0e:	f7fb f813 	bl	800ae38 <HAL_GetTick>
 800fe12:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800fe14:	e008      	b.n	800fe28 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800fe16:	f7fb f80f 	bl	800ae38 <HAL_GetTick>
 800fe1a:	4602      	mov	r2, r0
 800fe1c:	697b      	ldr	r3, [r7, #20]
 800fe1e:	1ad3      	subs	r3, r2, r3
 800fe20:	2b64      	cmp	r3, #100	; 0x64
 800fe22:	d901      	bls.n	800fe28 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800fe24:	2303      	movs	r3, #3
 800fe26:	e0d8      	b.n	800ffda <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800fe28:	4b0e      	ldr	r3, [pc, #56]	; (800fe64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d0f0      	beq.n	800fe16 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800fe34:	69bb      	ldr	r3, [r7, #24]
 800fe36:	2b01      	cmp	r3, #1
 800fe38:	f040 80ce 	bne.w	800ffd8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800fe3c:	4b09      	ldr	r3, [pc, #36]	; (800fe64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	4a08      	ldr	r2, [pc, #32]	; (800fe64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800fe42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fe46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fe48:	f7fa fff6 	bl	800ae38 <HAL_GetTick>
 800fe4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800fe4e:	e00b      	b.n	800fe68 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800fe50:	f7fa fff2 	bl	800ae38 <HAL_GetTick>
 800fe54:	4602      	mov	r2, r0
 800fe56:	697b      	ldr	r3, [r7, #20]
 800fe58:	1ad3      	subs	r3, r2, r3
 800fe5a:	2b64      	cmp	r3, #100	; 0x64
 800fe5c:	d904      	bls.n	800fe68 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800fe5e:	2303      	movs	r3, #3
 800fe60:	e0bb      	b.n	800ffda <HAL_RCCEx_PeriphCLKConfig+0x842>
 800fe62:	bf00      	nop
 800fe64:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800fe68:	4b5e      	ldr	r3, [pc, #376]	; (800ffe4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fe70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fe74:	d0ec      	beq.n	800fe50 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d003      	beq.n	800fe8a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d009      	beq.n	800fe9e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d02e      	beq.n	800fef4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d12a      	bne.n	800fef4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800fe9e:	4b51      	ldr	r3, [pc, #324]	; (800ffe4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800fea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fea4:	0c1b      	lsrs	r3, r3, #16
 800fea6:	f003 0303 	and.w	r3, r3, #3
 800feaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800feac:	4b4d      	ldr	r3, [pc, #308]	; (800ffe4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800feae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800feb2:	0f1b      	lsrs	r3, r3, #28
 800feb4:	f003 0307 	and.w	r3, r3, #7
 800feb8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	695b      	ldr	r3, [r3, #20]
 800febe:	019a      	lsls	r2, r3, #6
 800fec0:	693b      	ldr	r3, [r7, #16]
 800fec2:	041b      	lsls	r3, r3, #16
 800fec4:	431a      	orrs	r2, r3
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	699b      	ldr	r3, [r3, #24]
 800feca:	061b      	lsls	r3, r3, #24
 800fecc:	431a      	orrs	r2, r3
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	071b      	lsls	r3, r3, #28
 800fed2:	4944      	ldr	r1, [pc, #272]	; (800ffe4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800fed4:	4313      	orrs	r3, r2
 800fed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800feda:	4b42      	ldr	r3, [pc, #264]	; (800ffe4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800fedc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fee0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fee8:	3b01      	subs	r3, #1
 800feea:	021b      	lsls	r3, r3, #8
 800feec:	493d      	ldr	r1, [pc, #244]	; (800ffe4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800feee:	4313      	orrs	r3, r2
 800fef0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d022      	beq.n	800ff46 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ff08:	d11d      	bne.n	800ff46 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ff0a:	4b36      	ldr	r3, [pc, #216]	; (800ffe4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ff0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff10:	0e1b      	lsrs	r3, r3, #24
 800ff12:	f003 030f 	and.w	r3, r3, #15
 800ff16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ff18:	4b32      	ldr	r3, [pc, #200]	; (800ffe4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ff1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff1e:	0f1b      	lsrs	r3, r3, #28
 800ff20:	f003 0307 	and.w	r3, r3, #7
 800ff24:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	695b      	ldr	r3, [r3, #20]
 800ff2a:	019a      	lsls	r2, r3, #6
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	6a1b      	ldr	r3, [r3, #32]
 800ff30:	041b      	lsls	r3, r3, #16
 800ff32:	431a      	orrs	r2, r3
 800ff34:	693b      	ldr	r3, [r7, #16]
 800ff36:	061b      	lsls	r3, r3, #24
 800ff38:	431a      	orrs	r2, r3
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	071b      	lsls	r3, r3, #28
 800ff3e:	4929      	ldr	r1, [pc, #164]	; (800ffe4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ff40:	4313      	orrs	r3, r2
 800ff42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	f003 0308 	and.w	r3, r3, #8
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d028      	beq.n	800ffa4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ff52:	4b24      	ldr	r3, [pc, #144]	; (800ffe4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ff54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff58:	0e1b      	lsrs	r3, r3, #24
 800ff5a:	f003 030f 	and.w	r3, r3, #15
 800ff5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800ff60:	4b20      	ldr	r3, [pc, #128]	; (800ffe4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ff62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff66:	0c1b      	lsrs	r3, r3, #16
 800ff68:	f003 0303 	and.w	r3, r3, #3
 800ff6c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	695b      	ldr	r3, [r3, #20]
 800ff72:	019a      	lsls	r2, r3, #6
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	041b      	lsls	r3, r3, #16
 800ff78:	431a      	orrs	r2, r3
 800ff7a:	693b      	ldr	r3, [r7, #16]
 800ff7c:	061b      	lsls	r3, r3, #24
 800ff7e:	431a      	orrs	r2, r3
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	69db      	ldr	r3, [r3, #28]
 800ff84:	071b      	lsls	r3, r3, #28
 800ff86:	4917      	ldr	r1, [pc, #92]	; (800ffe4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ff88:	4313      	orrs	r3, r2
 800ff8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800ff8e:	4b15      	ldr	r3, [pc, #84]	; (800ffe4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ff90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ff94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff9c:	4911      	ldr	r1, [pc, #68]	; (800ffe4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ff9e:	4313      	orrs	r3, r2
 800ffa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800ffa4:	4b0f      	ldr	r3, [pc, #60]	; (800ffe4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	4a0e      	ldr	r2, [pc, #56]	; (800ffe4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ffaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ffae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ffb0:	f7fa ff42 	bl	800ae38 <HAL_GetTick>
 800ffb4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ffb6:	e008      	b.n	800ffca <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ffb8:	f7fa ff3e 	bl	800ae38 <HAL_GetTick>
 800ffbc:	4602      	mov	r2, r0
 800ffbe:	697b      	ldr	r3, [r7, #20]
 800ffc0:	1ad3      	subs	r3, r2, r3
 800ffc2:	2b64      	cmp	r3, #100	; 0x64
 800ffc4:	d901      	bls.n	800ffca <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ffc6:	2303      	movs	r3, #3
 800ffc8:	e007      	b.n	800ffda <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ffca:	4b06      	ldr	r3, [pc, #24]	; (800ffe4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ffd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ffd6:	d1ef      	bne.n	800ffb8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800ffd8:	2300      	movs	r3, #0
}
 800ffda:	4618      	mov	r0, r3
 800ffdc:	3720      	adds	r7, #32
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	bd80      	pop	{r7, pc}
 800ffe2:	bf00      	nop
 800ffe4:	40023800 	.word	0x40023800

0800ffe8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b082      	sub	sp, #8
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
 800fff0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d101      	bne.n	800fffc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800fff8:	2301      	movs	r3, #1
 800fffa:	e025      	b.n	8010048 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010002:	b2db      	uxtb	r3, r3
 8010004:	2b00      	cmp	r3, #0
 8010006:	d106      	bne.n	8010016 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	2200      	movs	r2, #0
 801000c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8010010:	6878      	ldr	r0, [r7, #4]
 8010012:	f7f1 ffb5 	bl	8001f80 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	2202      	movs	r2, #2
 801001a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	681a      	ldr	r2, [r3, #0]
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	3304      	adds	r3, #4
 8010026:	4619      	mov	r1, r3
 8010028:	4610      	mov	r0, r2
 801002a:	f001 fdd1 	bl	8011bd0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	6818      	ldr	r0, [r3, #0]
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	685b      	ldr	r3, [r3, #4]
 8010036:	461a      	mov	r2, r3
 8010038:	6839      	ldr	r1, [r7, #0]
 801003a:	f001 fe3b 	bl	8011cb4 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	2201      	movs	r2, #1
 8010042:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8010046:	2300      	movs	r3, #0
}
 8010048:	4618      	mov	r0, r3
 801004a:	3708      	adds	r7, #8
 801004c:	46bd      	mov	sp, r7
 801004e:	bd80      	pop	{r7, pc}

08010050 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b084      	sub	sp, #16
 8010054:	af00      	add	r7, sp, #0
 8010056:	60f8      	str	r0, [r7, #12]
 8010058:	60b9      	str	r1, [r7, #8]
 801005a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010062:	b2db      	uxtb	r3, r3
 8010064:	2b02      	cmp	r3, #2
 8010066:	d101      	bne.n	801006c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8010068:	2302      	movs	r3, #2
 801006a:	e018      	b.n	801009e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	2202      	movs	r2, #2
 8010070:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	687a      	ldr	r2, [r7, #4]
 801007a:	68b9      	ldr	r1, [r7, #8]
 801007c:	4618      	mov	r0, r3
 801007e:	f001 fe99 	bl	8011db4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8010082:	68bb      	ldr	r3, [r7, #8]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	2b02      	cmp	r3, #2
 8010088:	d104      	bne.n	8010094 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	2205      	movs	r2, #5
 801008e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8010092:	e003      	b.n	801009c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	2201      	movs	r2, #1
 8010098:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 801009c:	2300      	movs	r3, #0
}
 801009e:	4618      	mov	r0, r3
 80100a0:	3710      	adds	r7, #16
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd80      	pop	{r7, pc}

080100a6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80100a6:	b580      	push	{r7, lr}
 80100a8:	b082      	sub	sp, #8
 80100aa:	af00      	add	r7, sp, #0
 80100ac:	6078      	str	r0, [r7, #4]
 80100ae:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80100b6:	b2db      	uxtb	r3, r3
 80100b8:	2b02      	cmp	r3, #2
 80100ba:	d101      	bne.n	80100c0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80100bc:	2302      	movs	r3, #2
 80100be:	e00e      	b.n	80100de <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	2202      	movs	r2, #2
 80100c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	6839      	ldr	r1, [r7, #0]
 80100ce:	4618      	mov	r0, r3
 80100d0:	f001 fe94 	bl	8011dfc <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2201      	movs	r2, #1
 80100d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80100dc:	2300      	movs	r3, #0
}
 80100de:	4618      	mov	r0, r3
 80100e0:	3708      	adds	r7, #8
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}

080100e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80100e6:	b580      	push	{r7, lr}
 80100e8:	b082      	sub	sp, #8
 80100ea:	af00      	add	r7, sp, #0
 80100ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d101      	bne.n	80100f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80100f4:	2301      	movs	r3, #1
 80100f6:	e049      	b.n	801018c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80100fe:	b2db      	uxtb	r3, r3
 8010100:	2b00      	cmp	r3, #0
 8010102:	d106      	bne.n	8010112 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	2200      	movs	r2, #0
 8010108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801010c:	6878      	ldr	r0, [r7, #4]
 801010e:	f7f3 f857 	bl	80031c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	2202      	movs	r2, #2
 8010116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	681a      	ldr	r2, [r3, #0]
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	3304      	adds	r3, #4
 8010122:	4619      	mov	r1, r3
 8010124:	4610      	mov	r0, r2
 8010126:	f001 f8e9 	bl	80112fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	2201      	movs	r2, #1
 801012e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	2201      	movs	r2, #1
 8010136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2201      	movs	r2, #1
 801013e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	2201      	movs	r2, #1
 8010146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	2201      	movs	r2, #1
 801014e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	2201      	movs	r2, #1
 8010156:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	2201      	movs	r2, #1
 801015e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	2201      	movs	r2, #1
 8010166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	2201      	movs	r2, #1
 801016e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	2201      	movs	r2, #1
 8010176:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	2201      	movs	r2, #1
 801017e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	2201      	movs	r2, #1
 8010186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801018a:	2300      	movs	r3, #0
}
 801018c:	4618      	mov	r0, r3
 801018e:	3708      	adds	r7, #8
 8010190:	46bd      	mov	sp, r7
 8010192:	bd80      	pop	{r7, pc}

08010194 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010194:	b480      	push	{r7}
 8010196:	b085      	sub	sp, #20
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80101a2:	b2db      	uxtb	r3, r3
 80101a4:	2b01      	cmp	r3, #1
 80101a6:	d001      	beq.n	80101ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80101a8:	2301      	movs	r3, #1
 80101aa:	e054      	b.n	8010256 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	2202      	movs	r2, #2
 80101b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	68da      	ldr	r2, [r3, #12]
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	f042 0201 	orr.w	r2, r2, #1
 80101c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	4a26      	ldr	r2, [pc, #152]	; (8010264 <HAL_TIM_Base_Start_IT+0xd0>)
 80101ca:	4293      	cmp	r3, r2
 80101cc:	d022      	beq.n	8010214 <HAL_TIM_Base_Start_IT+0x80>
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80101d6:	d01d      	beq.n	8010214 <HAL_TIM_Base_Start_IT+0x80>
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	4a22      	ldr	r2, [pc, #136]	; (8010268 <HAL_TIM_Base_Start_IT+0xd4>)
 80101de:	4293      	cmp	r3, r2
 80101e0:	d018      	beq.n	8010214 <HAL_TIM_Base_Start_IT+0x80>
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	4a21      	ldr	r2, [pc, #132]	; (801026c <HAL_TIM_Base_Start_IT+0xd8>)
 80101e8:	4293      	cmp	r3, r2
 80101ea:	d013      	beq.n	8010214 <HAL_TIM_Base_Start_IT+0x80>
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	4a1f      	ldr	r2, [pc, #124]	; (8010270 <HAL_TIM_Base_Start_IT+0xdc>)
 80101f2:	4293      	cmp	r3, r2
 80101f4:	d00e      	beq.n	8010214 <HAL_TIM_Base_Start_IT+0x80>
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	4a1e      	ldr	r2, [pc, #120]	; (8010274 <HAL_TIM_Base_Start_IT+0xe0>)
 80101fc:	4293      	cmp	r3, r2
 80101fe:	d009      	beq.n	8010214 <HAL_TIM_Base_Start_IT+0x80>
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	4a1c      	ldr	r2, [pc, #112]	; (8010278 <HAL_TIM_Base_Start_IT+0xe4>)
 8010206:	4293      	cmp	r3, r2
 8010208:	d004      	beq.n	8010214 <HAL_TIM_Base_Start_IT+0x80>
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	4a1b      	ldr	r2, [pc, #108]	; (801027c <HAL_TIM_Base_Start_IT+0xe8>)
 8010210:	4293      	cmp	r3, r2
 8010212:	d115      	bne.n	8010240 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	689a      	ldr	r2, [r3, #8]
 801021a:	4b19      	ldr	r3, [pc, #100]	; (8010280 <HAL_TIM_Base_Start_IT+0xec>)
 801021c:	4013      	ands	r3, r2
 801021e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	2b06      	cmp	r3, #6
 8010224:	d015      	beq.n	8010252 <HAL_TIM_Base_Start_IT+0xbe>
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801022c:	d011      	beq.n	8010252 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	681a      	ldr	r2, [r3, #0]
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	f042 0201 	orr.w	r2, r2, #1
 801023c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801023e:	e008      	b.n	8010252 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	681a      	ldr	r2, [r3, #0]
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	f042 0201 	orr.w	r2, r2, #1
 801024e:	601a      	str	r2, [r3, #0]
 8010250:	e000      	b.n	8010254 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010252:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010254:	2300      	movs	r3, #0
}
 8010256:	4618      	mov	r0, r3
 8010258:	3714      	adds	r7, #20
 801025a:	46bd      	mov	sp, r7
 801025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010260:	4770      	bx	lr
 8010262:	bf00      	nop
 8010264:	40010000 	.word	0x40010000
 8010268:	40000400 	.word	0x40000400
 801026c:	40000800 	.word	0x40000800
 8010270:	40000c00 	.word	0x40000c00
 8010274:	40010400 	.word	0x40010400
 8010278:	40014000 	.word	0x40014000
 801027c:	40001800 	.word	0x40001800
 8010280:	00010007 	.word	0x00010007

08010284 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b082      	sub	sp, #8
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d101      	bne.n	8010296 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010292:	2301      	movs	r3, #1
 8010294:	e049      	b.n	801032a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801029c:	b2db      	uxtb	r3, r3
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d106      	bne.n	80102b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2200      	movs	r2, #0
 80102a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80102aa:	6878      	ldr	r0, [r7, #4]
 80102ac:	f000 f841 	bl	8010332 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	2202      	movs	r2, #2
 80102b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681a      	ldr	r2, [r3, #0]
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	3304      	adds	r3, #4
 80102c0:	4619      	mov	r1, r3
 80102c2:	4610      	mov	r0, r2
 80102c4:	f001 f81a 	bl	80112fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	2201      	movs	r2, #1
 80102cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	2201      	movs	r2, #1
 80102d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	2201      	movs	r2, #1
 80102dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	2201      	movs	r2, #1
 80102e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	2201      	movs	r2, #1
 80102ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	2201      	movs	r2, #1
 80102f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	2201      	movs	r2, #1
 80102fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	2201      	movs	r2, #1
 8010304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	2201      	movs	r2, #1
 801030c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	2201      	movs	r2, #1
 8010314:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	2201      	movs	r2, #1
 801031c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	2201      	movs	r2, #1
 8010324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010328:	2300      	movs	r3, #0
}
 801032a:	4618      	mov	r0, r3
 801032c:	3708      	adds	r7, #8
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}

08010332 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8010332:	b480      	push	{r7}
 8010334:	b083      	sub	sp, #12
 8010336:	af00      	add	r7, sp, #0
 8010338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801033a:	bf00      	nop
 801033c:	370c      	adds	r7, #12
 801033e:	46bd      	mov	sp, r7
 8010340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010344:	4770      	bx	lr
	...

08010348 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b084      	sub	sp, #16
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
 8010350:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010352:	683b      	ldr	r3, [r7, #0]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d109      	bne.n	801036c <HAL_TIM_PWM_Start+0x24>
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801035e:	b2db      	uxtb	r3, r3
 8010360:	2b01      	cmp	r3, #1
 8010362:	bf14      	ite	ne
 8010364:	2301      	movne	r3, #1
 8010366:	2300      	moveq	r3, #0
 8010368:	b2db      	uxtb	r3, r3
 801036a:	e03c      	b.n	80103e6 <HAL_TIM_PWM_Start+0x9e>
 801036c:	683b      	ldr	r3, [r7, #0]
 801036e:	2b04      	cmp	r3, #4
 8010370:	d109      	bne.n	8010386 <HAL_TIM_PWM_Start+0x3e>
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010378:	b2db      	uxtb	r3, r3
 801037a:	2b01      	cmp	r3, #1
 801037c:	bf14      	ite	ne
 801037e:	2301      	movne	r3, #1
 8010380:	2300      	moveq	r3, #0
 8010382:	b2db      	uxtb	r3, r3
 8010384:	e02f      	b.n	80103e6 <HAL_TIM_PWM_Start+0x9e>
 8010386:	683b      	ldr	r3, [r7, #0]
 8010388:	2b08      	cmp	r3, #8
 801038a:	d109      	bne.n	80103a0 <HAL_TIM_PWM_Start+0x58>
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010392:	b2db      	uxtb	r3, r3
 8010394:	2b01      	cmp	r3, #1
 8010396:	bf14      	ite	ne
 8010398:	2301      	movne	r3, #1
 801039a:	2300      	moveq	r3, #0
 801039c:	b2db      	uxtb	r3, r3
 801039e:	e022      	b.n	80103e6 <HAL_TIM_PWM_Start+0x9e>
 80103a0:	683b      	ldr	r3, [r7, #0]
 80103a2:	2b0c      	cmp	r3, #12
 80103a4:	d109      	bne.n	80103ba <HAL_TIM_PWM_Start+0x72>
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80103ac:	b2db      	uxtb	r3, r3
 80103ae:	2b01      	cmp	r3, #1
 80103b0:	bf14      	ite	ne
 80103b2:	2301      	movne	r3, #1
 80103b4:	2300      	moveq	r3, #0
 80103b6:	b2db      	uxtb	r3, r3
 80103b8:	e015      	b.n	80103e6 <HAL_TIM_PWM_Start+0x9e>
 80103ba:	683b      	ldr	r3, [r7, #0]
 80103bc:	2b10      	cmp	r3, #16
 80103be:	d109      	bne.n	80103d4 <HAL_TIM_PWM_Start+0x8c>
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80103c6:	b2db      	uxtb	r3, r3
 80103c8:	2b01      	cmp	r3, #1
 80103ca:	bf14      	ite	ne
 80103cc:	2301      	movne	r3, #1
 80103ce:	2300      	moveq	r3, #0
 80103d0:	b2db      	uxtb	r3, r3
 80103d2:	e008      	b.n	80103e6 <HAL_TIM_PWM_Start+0x9e>
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80103da:	b2db      	uxtb	r3, r3
 80103dc:	2b01      	cmp	r3, #1
 80103de:	bf14      	ite	ne
 80103e0:	2301      	movne	r3, #1
 80103e2:	2300      	moveq	r3, #0
 80103e4:	b2db      	uxtb	r3, r3
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d001      	beq.n	80103ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80103ea:	2301      	movs	r3, #1
 80103ec:	e092      	b.n	8010514 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80103ee:	683b      	ldr	r3, [r7, #0]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d104      	bne.n	80103fe <HAL_TIM_PWM_Start+0xb6>
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	2202      	movs	r2, #2
 80103f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80103fc:	e023      	b.n	8010446 <HAL_TIM_PWM_Start+0xfe>
 80103fe:	683b      	ldr	r3, [r7, #0]
 8010400:	2b04      	cmp	r3, #4
 8010402:	d104      	bne.n	801040e <HAL_TIM_PWM_Start+0xc6>
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	2202      	movs	r2, #2
 8010408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801040c:	e01b      	b.n	8010446 <HAL_TIM_PWM_Start+0xfe>
 801040e:	683b      	ldr	r3, [r7, #0]
 8010410:	2b08      	cmp	r3, #8
 8010412:	d104      	bne.n	801041e <HAL_TIM_PWM_Start+0xd6>
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2202      	movs	r2, #2
 8010418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801041c:	e013      	b.n	8010446 <HAL_TIM_PWM_Start+0xfe>
 801041e:	683b      	ldr	r3, [r7, #0]
 8010420:	2b0c      	cmp	r3, #12
 8010422:	d104      	bne.n	801042e <HAL_TIM_PWM_Start+0xe6>
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	2202      	movs	r2, #2
 8010428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801042c:	e00b      	b.n	8010446 <HAL_TIM_PWM_Start+0xfe>
 801042e:	683b      	ldr	r3, [r7, #0]
 8010430:	2b10      	cmp	r3, #16
 8010432:	d104      	bne.n	801043e <HAL_TIM_PWM_Start+0xf6>
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	2202      	movs	r2, #2
 8010438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801043c:	e003      	b.n	8010446 <HAL_TIM_PWM_Start+0xfe>
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	2202      	movs	r2, #2
 8010442:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	2201      	movs	r2, #1
 801044c:	6839      	ldr	r1, [r7, #0]
 801044e:	4618      	mov	r0, r3
 8010450:	f001 faec 	bl	8011a2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	4a30      	ldr	r2, [pc, #192]	; (801051c <HAL_TIM_PWM_Start+0x1d4>)
 801045a:	4293      	cmp	r3, r2
 801045c:	d004      	beq.n	8010468 <HAL_TIM_PWM_Start+0x120>
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	4a2f      	ldr	r2, [pc, #188]	; (8010520 <HAL_TIM_PWM_Start+0x1d8>)
 8010464:	4293      	cmp	r3, r2
 8010466:	d101      	bne.n	801046c <HAL_TIM_PWM_Start+0x124>
 8010468:	2301      	movs	r3, #1
 801046a:	e000      	b.n	801046e <HAL_TIM_PWM_Start+0x126>
 801046c:	2300      	movs	r3, #0
 801046e:	2b00      	cmp	r3, #0
 8010470:	d007      	beq.n	8010482 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010480:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	4a25      	ldr	r2, [pc, #148]	; (801051c <HAL_TIM_PWM_Start+0x1d4>)
 8010488:	4293      	cmp	r3, r2
 801048a:	d022      	beq.n	80104d2 <HAL_TIM_PWM_Start+0x18a>
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010494:	d01d      	beq.n	80104d2 <HAL_TIM_PWM_Start+0x18a>
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	4a22      	ldr	r2, [pc, #136]	; (8010524 <HAL_TIM_PWM_Start+0x1dc>)
 801049c:	4293      	cmp	r3, r2
 801049e:	d018      	beq.n	80104d2 <HAL_TIM_PWM_Start+0x18a>
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	4a20      	ldr	r2, [pc, #128]	; (8010528 <HAL_TIM_PWM_Start+0x1e0>)
 80104a6:	4293      	cmp	r3, r2
 80104a8:	d013      	beq.n	80104d2 <HAL_TIM_PWM_Start+0x18a>
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	4a1f      	ldr	r2, [pc, #124]	; (801052c <HAL_TIM_PWM_Start+0x1e4>)
 80104b0:	4293      	cmp	r3, r2
 80104b2:	d00e      	beq.n	80104d2 <HAL_TIM_PWM_Start+0x18a>
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	4a19      	ldr	r2, [pc, #100]	; (8010520 <HAL_TIM_PWM_Start+0x1d8>)
 80104ba:	4293      	cmp	r3, r2
 80104bc:	d009      	beq.n	80104d2 <HAL_TIM_PWM_Start+0x18a>
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	4a1b      	ldr	r2, [pc, #108]	; (8010530 <HAL_TIM_PWM_Start+0x1e8>)
 80104c4:	4293      	cmp	r3, r2
 80104c6:	d004      	beq.n	80104d2 <HAL_TIM_PWM_Start+0x18a>
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	4a19      	ldr	r2, [pc, #100]	; (8010534 <HAL_TIM_PWM_Start+0x1ec>)
 80104ce:	4293      	cmp	r3, r2
 80104d0:	d115      	bne.n	80104fe <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	689a      	ldr	r2, [r3, #8]
 80104d8:	4b17      	ldr	r3, [pc, #92]	; (8010538 <HAL_TIM_PWM_Start+0x1f0>)
 80104da:	4013      	ands	r3, r2
 80104dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	2b06      	cmp	r3, #6
 80104e2:	d015      	beq.n	8010510 <HAL_TIM_PWM_Start+0x1c8>
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80104ea:	d011      	beq.n	8010510 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	681a      	ldr	r2, [r3, #0]
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	f042 0201 	orr.w	r2, r2, #1
 80104fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80104fc:	e008      	b.n	8010510 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	681a      	ldr	r2, [r3, #0]
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	f042 0201 	orr.w	r2, r2, #1
 801050c:	601a      	str	r2, [r3, #0]
 801050e:	e000      	b.n	8010512 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010510:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010512:	2300      	movs	r3, #0
}
 8010514:	4618      	mov	r0, r3
 8010516:	3710      	adds	r7, #16
 8010518:	46bd      	mov	sp, r7
 801051a:	bd80      	pop	{r7, pc}
 801051c:	40010000 	.word	0x40010000
 8010520:	40010400 	.word	0x40010400
 8010524:	40000400 	.word	0x40000400
 8010528:	40000800 	.word	0x40000800
 801052c:	40000c00 	.word	0x40000c00
 8010530:	40014000 	.word	0x40014000
 8010534:	40001800 	.word	0x40001800
 8010538:	00010007 	.word	0x00010007

0801053c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b086      	sub	sp, #24
 8010540:	af00      	add	r7, sp, #0
 8010542:	60f8      	str	r0, [r7, #12]
 8010544:	60b9      	str	r1, [r7, #8]
 8010546:	607a      	str	r2, [r7, #4]
 8010548:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 801054a:	68bb      	ldr	r3, [r7, #8]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d109      	bne.n	8010564 <HAL_TIM_PWM_Start_DMA+0x28>
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010556:	b2db      	uxtb	r3, r3
 8010558:	2b02      	cmp	r3, #2
 801055a:	bf0c      	ite	eq
 801055c:	2301      	moveq	r3, #1
 801055e:	2300      	movne	r3, #0
 8010560:	b2db      	uxtb	r3, r3
 8010562:	e03c      	b.n	80105de <HAL_TIM_PWM_Start_DMA+0xa2>
 8010564:	68bb      	ldr	r3, [r7, #8]
 8010566:	2b04      	cmp	r3, #4
 8010568:	d109      	bne.n	801057e <HAL_TIM_PWM_Start_DMA+0x42>
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010570:	b2db      	uxtb	r3, r3
 8010572:	2b02      	cmp	r3, #2
 8010574:	bf0c      	ite	eq
 8010576:	2301      	moveq	r3, #1
 8010578:	2300      	movne	r3, #0
 801057a:	b2db      	uxtb	r3, r3
 801057c:	e02f      	b.n	80105de <HAL_TIM_PWM_Start_DMA+0xa2>
 801057e:	68bb      	ldr	r3, [r7, #8]
 8010580:	2b08      	cmp	r3, #8
 8010582:	d109      	bne.n	8010598 <HAL_TIM_PWM_Start_DMA+0x5c>
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801058a:	b2db      	uxtb	r3, r3
 801058c:	2b02      	cmp	r3, #2
 801058e:	bf0c      	ite	eq
 8010590:	2301      	moveq	r3, #1
 8010592:	2300      	movne	r3, #0
 8010594:	b2db      	uxtb	r3, r3
 8010596:	e022      	b.n	80105de <HAL_TIM_PWM_Start_DMA+0xa2>
 8010598:	68bb      	ldr	r3, [r7, #8]
 801059a:	2b0c      	cmp	r3, #12
 801059c:	d109      	bne.n	80105b2 <HAL_TIM_PWM_Start_DMA+0x76>
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80105a4:	b2db      	uxtb	r3, r3
 80105a6:	2b02      	cmp	r3, #2
 80105a8:	bf0c      	ite	eq
 80105aa:	2301      	moveq	r3, #1
 80105ac:	2300      	movne	r3, #0
 80105ae:	b2db      	uxtb	r3, r3
 80105b0:	e015      	b.n	80105de <HAL_TIM_PWM_Start_DMA+0xa2>
 80105b2:	68bb      	ldr	r3, [r7, #8]
 80105b4:	2b10      	cmp	r3, #16
 80105b6:	d109      	bne.n	80105cc <HAL_TIM_PWM_Start_DMA+0x90>
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80105be:	b2db      	uxtb	r3, r3
 80105c0:	2b02      	cmp	r3, #2
 80105c2:	bf0c      	ite	eq
 80105c4:	2301      	moveq	r3, #1
 80105c6:	2300      	movne	r3, #0
 80105c8:	b2db      	uxtb	r3, r3
 80105ca:	e008      	b.n	80105de <HAL_TIM_PWM_Start_DMA+0xa2>
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80105d2:	b2db      	uxtb	r3, r3
 80105d4:	2b02      	cmp	r3, #2
 80105d6:	bf0c      	ite	eq
 80105d8:	2301      	moveq	r3, #1
 80105da:	2300      	movne	r3, #0
 80105dc:	b2db      	uxtb	r3, r3
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d001      	beq.n	80105e6 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 80105e2:	2302      	movs	r3, #2
 80105e4:	e19c      	b.n	8010920 <HAL_TIM_PWM_Start_DMA+0x3e4>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80105e6:	68bb      	ldr	r3, [r7, #8]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d109      	bne.n	8010600 <HAL_TIM_PWM_Start_DMA+0xc4>
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80105f2:	b2db      	uxtb	r3, r3
 80105f4:	2b01      	cmp	r3, #1
 80105f6:	bf0c      	ite	eq
 80105f8:	2301      	moveq	r3, #1
 80105fa:	2300      	movne	r3, #0
 80105fc:	b2db      	uxtb	r3, r3
 80105fe:	e03c      	b.n	801067a <HAL_TIM_PWM_Start_DMA+0x13e>
 8010600:	68bb      	ldr	r3, [r7, #8]
 8010602:	2b04      	cmp	r3, #4
 8010604:	d109      	bne.n	801061a <HAL_TIM_PWM_Start_DMA+0xde>
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801060c:	b2db      	uxtb	r3, r3
 801060e:	2b01      	cmp	r3, #1
 8010610:	bf0c      	ite	eq
 8010612:	2301      	moveq	r3, #1
 8010614:	2300      	movne	r3, #0
 8010616:	b2db      	uxtb	r3, r3
 8010618:	e02f      	b.n	801067a <HAL_TIM_PWM_Start_DMA+0x13e>
 801061a:	68bb      	ldr	r3, [r7, #8]
 801061c:	2b08      	cmp	r3, #8
 801061e:	d109      	bne.n	8010634 <HAL_TIM_PWM_Start_DMA+0xf8>
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010626:	b2db      	uxtb	r3, r3
 8010628:	2b01      	cmp	r3, #1
 801062a:	bf0c      	ite	eq
 801062c:	2301      	moveq	r3, #1
 801062e:	2300      	movne	r3, #0
 8010630:	b2db      	uxtb	r3, r3
 8010632:	e022      	b.n	801067a <HAL_TIM_PWM_Start_DMA+0x13e>
 8010634:	68bb      	ldr	r3, [r7, #8]
 8010636:	2b0c      	cmp	r3, #12
 8010638:	d109      	bne.n	801064e <HAL_TIM_PWM_Start_DMA+0x112>
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010640:	b2db      	uxtb	r3, r3
 8010642:	2b01      	cmp	r3, #1
 8010644:	bf0c      	ite	eq
 8010646:	2301      	moveq	r3, #1
 8010648:	2300      	movne	r3, #0
 801064a:	b2db      	uxtb	r3, r3
 801064c:	e015      	b.n	801067a <HAL_TIM_PWM_Start_DMA+0x13e>
 801064e:	68bb      	ldr	r3, [r7, #8]
 8010650:	2b10      	cmp	r3, #16
 8010652:	d109      	bne.n	8010668 <HAL_TIM_PWM_Start_DMA+0x12c>
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801065a:	b2db      	uxtb	r3, r3
 801065c:	2b01      	cmp	r3, #1
 801065e:	bf0c      	ite	eq
 8010660:	2301      	moveq	r3, #1
 8010662:	2300      	movne	r3, #0
 8010664:	b2db      	uxtb	r3, r3
 8010666:	e008      	b.n	801067a <HAL_TIM_PWM_Start_DMA+0x13e>
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801066e:	b2db      	uxtb	r3, r3
 8010670:	2b01      	cmp	r3, #1
 8010672:	bf0c      	ite	eq
 8010674:	2301      	moveq	r3, #1
 8010676:	2300      	movne	r3, #0
 8010678:	b2db      	uxtb	r3, r3
 801067a:	2b00      	cmp	r3, #0
 801067c:	d034      	beq.n	80106e8 <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d104      	bne.n	801068e <HAL_TIM_PWM_Start_DMA+0x152>
 8010684:	887b      	ldrh	r3, [r7, #2]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d001      	beq.n	801068e <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 801068a:	2301      	movs	r3, #1
 801068c:	e148      	b.n	8010920 <HAL_TIM_PWM_Start_DMA+0x3e4>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801068e:	68bb      	ldr	r3, [r7, #8]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d104      	bne.n	801069e <HAL_TIM_PWM_Start_DMA+0x162>
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	2202      	movs	r2, #2
 8010698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801069c:	e026      	b.n	80106ec <HAL_TIM_PWM_Start_DMA+0x1b0>
 801069e:	68bb      	ldr	r3, [r7, #8]
 80106a0:	2b04      	cmp	r3, #4
 80106a2:	d104      	bne.n	80106ae <HAL_TIM_PWM_Start_DMA+0x172>
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	2202      	movs	r2, #2
 80106a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80106ac:	e01e      	b.n	80106ec <HAL_TIM_PWM_Start_DMA+0x1b0>
 80106ae:	68bb      	ldr	r3, [r7, #8]
 80106b0:	2b08      	cmp	r3, #8
 80106b2:	d104      	bne.n	80106be <HAL_TIM_PWM_Start_DMA+0x182>
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	2202      	movs	r2, #2
 80106b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80106bc:	e016      	b.n	80106ec <HAL_TIM_PWM_Start_DMA+0x1b0>
 80106be:	68bb      	ldr	r3, [r7, #8]
 80106c0:	2b0c      	cmp	r3, #12
 80106c2:	d104      	bne.n	80106ce <HAL_TIM_PWM_Start_DMA+0x192>
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	2202      	movs	r2, #2
 80106c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80106cc:	e00e      	b.n	80106ec <HAL_TIM_PWM_Start_DMA+0x1b0>
 80106ce:	68bb      	ldr	r3, [r7, #8]
 80106d0:	2b10      	cmp	r3, #16
 80106d2:	d104      	bne.n	80106de <HAL_TIM_PWM_Start_DMA+0x1a2>
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	2202      	movs	r2, #2
 80106d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80106dc:	e006      	b.n	80106ec <HAL_TIM_PWM_Start_DMA+0x1b0>
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	2202      	movs	r2, #2
 80106e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80106e6:	e001      	b.n	80106ec <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 80106e8:	2301      	movs	r3, #1
 80106ea:	e119      	b.n	8010920 <HAL_TIM_PWM_Start_DMA+0x3e4>
 80106ec:	68bb      	ldr	r3, [r7, #8]
 80106ee:	2b0c      	cmp	r3, #12
 80106f0:	f200 80ae 	bhi.w	8010850 <HAL_TIM_PWM_Start_DMA+0x314>
 80106f4:	a201      	add	r2, pc, #4	; (adr r2, 80106fc <HAL_TIM_PWM_Start_DMA+0x1c0>)
 80106f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106fa:	bf00      	nop
 80106fc:	08010731 	.word	0x08010731
 8010700:	08010851 	.word	0x08010851
 8010704:	08010851 	.word	0x08010851
 8010708:	08010851 	.word	0x08010851
 801070c:	08010779 	.word	0x08010779
 8010710:	08010851 	.word	0x08010851
 8010714:	08010851 	.word	0x08010851
 8010718:	08010851 	.word	0x08010851
 801071c:	080107c1 	.word	0x080107c1
 8010720:	08010851 	.word	0x08010851
 8010724:	08010851 	.word	0x08010851
 8010728:	08010851 	.word	0x08010851
 801072c:	08010809 	.word	0x08010809
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010734:	4a7c      	ldr	r2, [pc, #496]	; (8010928 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8010736:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801073c:	4a7b      	ldr	r2, [pc, #492]	; (801092c <HAL_TIM_PWM_Start_DMA+0x3f0>)
 801073e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010744:	4a7a      	ldr	r2, [pc, #488]	; (8010930 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8010746:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801074c:	6879      	ldr	r1, [r7, #4]
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	3334      	adds	r3, #52	; 0x34
 8010754:	461a      	mov	r2, r3
 8010756:	887b      	ldrh	r3, [r7, #2]
 8010758:	f7fc f8a6 	bl	800c8a8 <HAL_DMA_Start_IT>
 801075c:	4603      	mov	r3, r0
 801075e:	2b00      	cmp	r3, #0
 8010760:	d001      	beq.n	8010766 <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        /* Return error status */
        return HAL_ERROR;
 8010762:	2301      	movs	r3, #1
 8010764:	e0dc      	b.n	8010920 <HAL_TIM_PWM_Start_DMA+0x3e4>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	68da      	ldr	r2, [r3, #12]
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010774:	60da      	str	r2, [r3, #12]
      break;
 8010776:	e06c      	b.n	8010852 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801077c:	4a6a      	ldr	r2, [pc, #424]	; (8010928 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 801077e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010784:	4a69      	ldr	r2, [pc, #420]	; (801092c <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8010786:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801078c:	4a68      	ldr	r2, [pc, #416]	; (8010930 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 801078e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010794:	6879      	ldr	r1, [r7, #4]
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	3338      	adds	r3, #56	; 0x38
 801079c:	461a      	mov	r2, r3
 801079e:	887b      	ldrh	r3, [r7, #2]
 80107a0:	f7fc f882 	bl	800c8a8 <HAL_DMA_Start_IT>
 80107a4:	4603      	mov	r3, r0
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d001      	beq.n	80107ae <HAL_TIM_PWM_Start_DMA+0x272>
      {
        /* Return error status */
        return HAL_ERROR;
 80107aa:	2301      	movs	r3, #1
 80107ac:	e0b8      	b.n	8010920 <HAL_TIM_PWM_Start_DMA+0x3e4>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	68da      	ldr	r2, [r3, #12]
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80107bc:	60da      	str	r2, [r3, #12]
      break;
 80107be:	e048      	b.n	8010852 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107c4:	4a58      	ldr	r2, [pc, #352]	; (8010928 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80107c6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107cc:	4a57      	ldr	r2, [pc, #348]	; (801092c <HAL_TIM_PWM_Start_DMA+0x3f0>)
 80107ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107d4:	4a56      	ldr	r2, [pc, #344]	; (8010930 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 80107d6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80107dc:	6879      	ldr	r1, [r7, #4]
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	333c      	adds	r3, #60	; 0x3c
 80107e4:	461a      	mov	r2, r3
 80107e6:	887b      	ldrh	r3, [r7, #2]
 80107e8:	f7fc f85e 	bl	800c8a8 <HAL_DMA_Start_IT>
 80107ec:	4603      	mov	r3, r0
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d001      	beq.n	80107f6 <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        /* Return error status */
        return HAL_ERROR;
 80107f2:	2301      	movs	r3, #1
 80107f4:	e094      	b.n	8010920 <HAL_TIM_PWM_Start_DMA+0x3e4>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	68da      	ldr	r2, [r3, #12]
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010804:	60da      	str	r2, [r3, #12]
      break;
 8010806:	e024      	b.n	8010852 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801080c:	4a46      	ldr	r2, [pc, #280]	; (8010928 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 801080e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010814:	4a45      	ldr	r2, [pc, #276]	; (801092c <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8010816:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801081c:	4a44      	ldr	r2, [pc, #272]	; (8010930 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 801081e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010824:	6879      	ldr	r1, [r7, #4]
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	3340      	adds	r3, #64	; 0x40
 801082c:	461a      	mov	r2, r3
 801082e:	887b      	ldrh	r3, [r7, #2]
 8010830:	f7fc f83a 	bl	800c8a8 <HAL_DMA_Start_IT>
 8010834:	4603      	mov	r3, r0
 8010836:	2b00      	cmp	r3, #0
 8010838:	d001      	beq.n	801083e <HAL_TIM_PWM_Start_DMA+0x302>
      {
        /* Return error status */
        return HAL_ERROR;
 801083a:	2301      	movs	r3, #1
 801083c:	e070      	b.n	8010920 <HAL_TIM_PWM_Start_DMA+0x3e4>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	68da      	ldr	r2, [r3, #12]
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801084c:	60da      	str	r2, [r3, #12]
      break;
 801084e:	e000      	b.n	8010852 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 8010850:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	2201      	movs	r2, #1
 8010858:	68b9      	ldr	r1, [r7, #8]
 801085a:	4618      	mov	r0, r3
 801085c:	f001 f8e6 	bl	8011a2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	4a33      	ldr	r2, [pc, #204]	; (8010934 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8010866:	4293      	cmp	r3, r2
 8010868:	d004      	beq.n	8010874 <HAL_TIM_PWM_Start_DMA+0x338>
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	4a32      	ldr	r2, [pc, #200]	; (8010938 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8010870:	4293      	cmp	r3, r2
 8010872:	d101      	bne.n	8010878 <HAL_TIM_PWM_Start_DMA+0x33c>
 8010874:	2301      	movs	r3, #1
 8010876:	e000      	b.n	801087a <HAL_TIM_PWM_Start_DMA+0x33e>
 8010878:	2300      	movs	r3, #0
 801087a:	2b00      	cmp	r3, #0
 801087c:	d007      	beq.n	801088e <HAL_TIM_PWM_Start_DMA+0x352>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801088c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	4a28      	ldr	r2, [pc, #160]	; (8010934 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8010894:	4293      	cmp	r3, r2
 8010896:	d022      	beq.n	80108de <HAL_TIM_PWM_Start_DMA+0x3a2>
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80108a0:	d01d      	beq.n	80108de <HAL_TIM_PWM_Start_DMA+0x3a2>
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	4a25      	ldr	r2, [pc, #148]	; (801093c <HAL_TIM_PWM_Start_DMA+0x400>)
 80108a8:	4293      	cmp	r3, r2
 80108aa:	d018      	beq.n	80108de <HAL_TIM_PWM_Start_DMA+0x3a2>
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	4a23      	ldr	r2, [pc, #140]	; (8010940 <HAL_TIM_PWM_Start_DMA+0x404>)
 80108b2:	4293      	cmp	r3, r2
 80108b4:	d013      	beq.n	80108de <HAL_TIM_PWM_Start_DMA+0x3a2>
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	4a22      	ldr	r2, [pc, #136]	; (8010944 <HAL_TIM_PWM_Start_DMA+0x408>)
 80108bc:	4293      	cmp	r3, r2
 80108be:	d00e      	beq.n	80108de <HAL_TIM_PWM_Start_DMA+0x3a2>
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	4a1c      	ldr	r2, [pc, #112]	; (8010938 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 80108c6:	4293      	cmp	r3, r2
 80108c8:	d009      	beq.n	80108de <HAL_TIM_PWM_Start_DMA+0x3a2>
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	4a1e      	ldr	r2, [pc, #120]	; (8010948 <HAL_TIM_PWM_Start_DMA+0x40c>)
 80108d0:	4293      	cmp	r3, r2
 80108d2:	d004      	beq.n	80108de <HAL_TIM_PWM_Start_DMA+0x3a2>
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	4a1c      	ldr	r2, [pc, #112]	; (801094c <HAL_TIM_PWM_Start_DMA+0x410>)
 80108da:	4293      	cmp	r3, r2
 80108dc:	d115      	bne.n	801090a <HAL_TIM_PWM_Start_DMA+0x3ce>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	689a      	ldr	r2, [r3, #8]
 80108e4:	4b1a      	ldr	r3, [pc, #104]	; (8010950 <HAL_TIM_PWM_Start_DMA+0x414>)
 80108e6:	4013      	ands	r3, r2
 80108e8:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80108ea:	697b      	ldr	r3, [r7, #20]
 80108ec:	2b06      	cmp	r3, #6
 80108ee:	d015      	beq.n	801091c <HAL_TIM_PWM_Start_DMA+0x3e0>
 80108f0:	697b      	ldr	r3, [r7, #20]
 80108f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80108f6:	d011      	beq.n	801091c <HAL_TIM_PWM_Start_DMA+0x3e0>
    {
      __HAL_TIM_ENABLE(htim);
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	681a      	ldr	r2, [r3, #0]
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	f042 0201 	orr.w	r2, r2, #1
 8010906:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010908:	e008      	b.n	801091c <HAL_TIM_PWM_Start_DMA+0x3e0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	681a      	ldr	r2, [r3, #0]
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	f042 0201 	orr.w	r2, r2, #1
 8010918:	601a      	str	r2, [r3, #0]
 801091a:	e000      	b.n	801091e <HAL_TIM_PWM_Start_DMA+0x3e2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801091c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801091e:	2300      	movs	r3, #0
}
 8010920:	4618      	mov	r0, r3
 8010922:	3718      	adds	r7, #24
 8010924:	46bd      	mov	sp, r7
 8010926:	bd80      	pop	{r7, pc}
 8010928:	080111eb 	.word	0x080111eb
 801092c:	08011293 	.word	0x08011293
 8010930:	08011159 	.word	0x08011159
 8010934:	40010000 	.word	0x40010000
 8010938:	40010400 	.word	0x40010400
 801093c:	40000400 	.word	0x40000400
 8010940:	40000800 	.word	0x40000800
 8010944:	40000c00 	.word	0x40000c00
 8010948:	40014000 	.word	0x40014000
 801094c:	40001800 	.word	0x40001800
 8010950:	00010007 	.word	0x00010007

08010954 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010954:	b580      	push	{r7, lr}
 8010956:	b082      	sub	sp, #8
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
 801095c:	6039      	str	r1, [r7, #0]
 801095e:	683b      	ldr	r3, [r7, #0]
 8010960:	2b0c      	cmp	r3, #12
 8010962:	d855      	bhi.n	8010a10 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8010964:	a201      	add	r2, pc, #4	; (adr r2, 801096c <HAL_TIM_PWM_Stop_DMA+0x18>)
 8010966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801096a:	bf00      	nop
 801096c:	080109a1 	.word	0x080109a1
 8010970:	08010a11 	.word	0x08010a11
 8010974:	08010a11 	.word	0x08010a11
 8010978:	08010a11 	.word	0x08010a11
 801097c:	080109bd 	.word	0x080109bd
 8010980:	08010a11 	.word	0x08010a11
 8010984:	08010a11 	.word	0x08010a11
 8010988:	08010a11 	.word	0x08010a11
 801098c:	080109d9 	.word	0x080109d9
 8010990:	08010a11 	.word	0x08010a11
 8010994:	08010a11 	.word	0x08010a11
 8010998:	08010a11 	.word	0x08010a11
 801099c:	080109f5 	.word	0x080109f5
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	68da      	ldr	r2, [r3, #12]
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80109ae:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109b4:	4618      	mov	r0, r3
 80109b6:	f7fb ffd7 	bl	800c968 <HAL_DMA_Abort_IT>
      break;
 80109ba:	e02a      	b.n	8010a12 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	68da      	ldr	r2, [r3, #12]
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80109ca:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109d0:	4618      	mov	r0, r3
 80109d2:	f7fb ffc9 	bl	800c968 <HAL_DMA_Abort_IT>
      break;
 80109d6:	e01c      	b.n	8010a12 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	68da      	ldr	r2, [r3, #12]
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80109e6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109ec:	4618      	mov	r0, r3
 80109ee:	f7fb ffbb 	bl	800c968 <HAL_DMA_Abort_IT>
      break;
 80109f2:	e00e      	b.n	8010a12 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	68da      	ldr	r2, [r3, #12]
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010a02:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a08:	4618      	mov	r0, r3
 8010a0a:	f7fb ffad 	bl	800c968 <HAL_DMA_Abort_IT>
      break;
 8010a0e:	e000      	b.n	8010a12 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8010a10:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	2200      	movs	r2, #0
 8010a18:	6839      	ldr	r1, [r7, #0]
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	f001 f806 	bl	8011a2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	4a36      	ldr	r2, [pc, #216]	; (8010b00 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 8010a26:	4293      	cmp	r3, r2
 8010a28:	d004      	beq.n	8010a34 <HAL_TIM_PWM_Stop_DMA+0xe0>
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	4a35      	ldr	r2, [pc, #212]	; (8010b04 <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 8010a30:	4293      	cmp	r3, r2
 8010a32:	d101      	bne.n	8010a38 <HAL_TIM_PWM_Stop_DMA+0xe4>
 8010a34:	2301      	movs	r3, #1
 8010a36:	e000      	b.n	8010a3a <HAL_TIM_PWM_Stop_DMA+0xe6>
 8010a38:	2300      	movs	r3, #0
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d017      	beq.n	8010a6e <HAL_TIM_PWM_Stop_DMA+0x11a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	6a1a      	ldr	r2, [r3, #32]
 8010a44:	f241 1311 	movw	r3, #4369	; 0x1111
 8010a48:	4013      	ands	r3, r2
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d10f      	bne.n	8010a6e <HAL_TIM_PWM_Stop_DMA+0x11a>
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	6a1a      	ldr	r2, [r3, #32]
 8010a54:	f240 4344 	movw	r3, #1092	; 0x444
 8010a58:	4013      	ands	r3, r2
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d107      	bne.n	8010a6e <HAL_TIM_PWM_Stop_DMA+0x11a>
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010a6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	6a1a      	ldr	r2, [r3, #32]
 8010a74:	f241 1311 	movw	r3, #4369	; 0x1111
 8010a78:	4013      	ands	r3, r2
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d10f      	bne.n	8010a9e <HAL_TIM_PWM_Stop_DMA+0x14a>
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	6a1a      	ldr	r2, [r3, #32]
 8010a84:	f240 4344 	movw	r3, #1092	; 0x444
 8010a88:	4013      	ands	r3, r2
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d107      	bne.n	8010a9e <HAL_TIM_PWM_Stop_DMA+0x14a>
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	681a      	ldr	r2, [r3, #0]
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	f022 0201 	bic.w	r2, r2, #1
 8010a9c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8010a9e:	683b      	ldr	r3, [r7, #0]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d104      	bne.n	8010aae <HAL_TIM_PWM_Stop_DMA+0x15a>
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	2201      	movs	r2, #1
 8010aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010aac:	e023      	b.n	8010af6 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8010aae:	683b      	ldr	r3, [r7, #0]
 8010ab0:	2b04      	cmp	r3, #4
 8010ab2:	d104      	bne.n	8010abe <HAL_TIM_PWM_Stop_DMA+0x16a>
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	2201      	movs	r2, #1
 8010ab8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010abc:	e01b      	b.n	8010af6 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8010abe:	683b      	ldr	r3, [r7, #0]
 8010ac0:	2b08      	cmp	r3, #8
 8010ac2:	d104      	bne.n	8010ace <HAL_TIM_PWM_Stop_DMA+0x17a>
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	2201      	movs	r2, #1
 8010ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010acc:	e013      	b.n	8010af6 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8010ace:	683b      	ldr	r3, [r7, #0]
 8010ad0:	2b0c      	cmp	r3, #12
 8010ad2:	d104      	bne.n	8010ade <HAL_TIM_PWM_Stop_DMA+0x18a>
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	2201      	movs	r2, #1
 8010ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010adc:	e00b      	b.n	8010af6 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8010ade:	683b      	ldr	r3, [r7, #0]
 8010ae0:	2b10      	cmp	r3, #16
 8010ae2:	d104      	bne.n	8010aee <HAL_TIM_PWM_Stop_DMA+0x19a>
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	2201      	movs	r2, #1
 8010ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010aec:	e003      	b.n	8010af6 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	2201      	movs	r2, #1
 8010af2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8010af6:	2300      	movs	r3, #0
}
 8010af8:	4618      	mov	r0, r3
 8010afa:	3708      	adds	r7, #8
 8010afc:	46bd      	mov	sp, r7
 8010afe:	bd80      	pop	{r7, pc}
 8010b00:	40010000 	.word	0x40010000
 8010b04:	40010400 	.word	0x40010400

08010b08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b082      	sub	sp, #8
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	691b      	ldr	r3, [r3, #16]
 8010b16:	f003 0302 	and.w	r3, r3, #2
 8010b1a:	2b02      	cmp	r3, #2
 8010b1c:	d122      	bne.n	8010b64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	68db      	ldr	r3, [r3, #12]
 8010b24:	f003 0302 	and.w	r3, r3, #2
 8010b28:	2b02      	cmp	r3, #2
 8010b2a:	d11b      	bne.n	8010b64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	f06f 0202 	mvn.w	r2, #2
 8010b34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	2201      	movs	r2, #1
 8010b3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	699b      	ldr	r3, [r3, #24]
 8010b42:	f003 0303 	and.w	r3, r3, #3
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d003      	beq.n	8010b52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010b4a:	6878      	ldr	r0, [r7, #4]
 8010b4c:	f000 fadc 	bl	8011108 <HAL_TIM_IC_CaptureCallback>
 8010b50:	e005      	b.n	8010b5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010b52:	6878      	ldr	r0, [r7, #4]
 8010b54:	f000 face 	bl	80110f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010b58:	6878      	ldr	r0, [r7, #4]
 8010b5a:	f7ef ff39 	bl	80009d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	2200      	movs	r2, #0
 8010b62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	691b      	ldr	r3, [r3, #16]
 8010b6a:	f003 0304 	and.w	r3, r3, #4
 8010b6e:	2b04      	cmp	r3, #4
 8010b70:	d122      	bne.n	8010bb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	68db      	ldr	r3, [r3, #12]
 8010b78:	f003 0304 	and.w	r3, r3, #4
 8010b7c:	2b04      	cmp	r3, #4
 8010b7e:	d11b      	bne.n	8010bb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	f06f 0204 	mvn.w	r2, #4
 8010b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	2202      	movs	r2, #2
 8010b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	699b      	ldr	r3, [r3, #24]
 8010b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d003      	beq.n	8010ba6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010b9e:	6878      	ldr	r0, [r7, #4]
 8010ba0:	f000 fab2 	bl	8011108 <HAL_TIM_IC_CaptureCallback>
 8010ba4:	e005      	b.n	8010bb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010ba6:	6878      	ldr	r0, [r7, #4]
 8010ba8:	f000 faa4 	bl	80110f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010bac:	6878      	ldr	r0, [r7, #4]
 8010bae:	f7ef ff0f 	bl	80009d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	691b      	ldr	r3, [r3, #16]
 8010bbe:	f003 0308 	and.w	r3, r3, #8
 8010bc2:	2b08      	cmp	r3, #8
 8010bc4:	d122      	bne.n	8010c0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	68db      	ldr	r3, [r3, #12]
 8010bcc:	f003 0308 	and.w	r3, r3, #8
 8010bd0:	2b08      	cmp	r3, #8
 8010bd2:	d11b      	bne.n	8010c0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	f06f 0208 	mvn.w	r2, #8
 8010bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	2204      	movs	r2, #4
 8010be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	69db      	ldr	r3, [r3, #28]
 8010bea:	f003 0303 	and.w	r3, r3, #3
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d003      	beq.n	8010bfa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010bf2:	6878      	ldr	r0, [r7, #4]
 8010bf4:	f000 fa88 	bl	8011108 <HAL_TIM_IC_CaptureCallback>
 8010bf8:	e005      	b.n	8010c06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010bfa:	6878      	ldr	r0, [r7, #4]
 8010bfc:	f000 fa7a 	bl	80110f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010c00:	6878      	ldr	r0, [r7, #4]
 8010c02:	f7ef fee5 	bl	80009d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	2200      	movs	r2, #0
 8010c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	691b      	ldr	r3, [r3, #16]
 8010c12:	f003 0310 	and.w	r3, r3, #16
 8010c16:	2b10      	cmp	r3, #16
 8010c18:	d122      	bne.n	8010c60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	68db      	ldr	r3, [r3, #12]
 8010c20:	f003 0310 	and.w	r3, r3, #16
 8010c24:	2b10      	cmp	r3, #16
 8010c26:	d11b      	bne.n	8010c60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	f06f 0210 	mvn.w	r2, #16
 8010c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	2208      	movs	r2, #8
 8010c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	69db      	ldr	r3, [r3, #28]
 8010c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d003      	beq.n	8010c4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010c46:	6878      	ldr	r0, [r7, #4]
 8010c48:	f000 fa5e 	bl	8011108 <HAL_TIM_IC_CaptureCallback>
 8010c4c:	e005      	b.n	8010c5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010c4e:	6878      	ldr	r0, [r7, #4]
 8010c50:	f000 fa50 	bl	80110f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010c54:	6878      	ldr	r0, [r7, #4]
 8010c56:	f7ef febb 	bl	80009d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	691b      	ldr	r3, [r3, #16]
 8010c66:	f003 0301 	and.w	r3, r3, #1
 8010c6a:	2b01      	cmp	r3, #1
 8010c6c:	d10e      	bne.n	8010c8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	68db      	ldr	r3, [r3, #12]
 8010c74:	f003 0301 	and.w	r3, r3, #1
 8010c78:	2b01      	cmp	r3, #1
 8010c7a:	d107      	bne.n	8010c8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	f06f 0201 	mvn.w	r2, #1
 8010c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010c86:	6878      	ldr	r0, [r7, #4]
 8010c88:	f7f1 ff0c 	bl	8002aa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	691b      	ldr	r3, [r3, #16]
 8010c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c96:	2b80      	cmp	r3, #128	; 0x80
 8010c98:	d10e      	bne.n	8010cb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	68db      	ldr	r3, [r3, #12]
 8010ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ca4:	2b80      	cmp	r3, #128	; 0x80
 8010ca6:	d107      	bne.n	8010cb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010cb2:	6878      	ldr	r0, [r7, #4]
 8010cb4:	f000 ff78 	bl	8011ba8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	691b      	ldr	r3, [r3, #16]
 8010cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010cc6:	d10e      	bne.n	8010ce6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	68db      	ldr	r3, [r3, #12]
 8010cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010cd2:	2b80      	cmp	r3, #128	; 0x80
 8010cd4:	d107      	bne.n	8010ce6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010cde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010ce0:	6878      	ldr	r0, [r7, #4]
 8010ce2:	f000 ff6b 	bl	8011bbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	691b      	ldr	r3, [r3, #16]
 8010cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cf0:	2b40      	cmp	r3, #64	; 0x40
 8010cf2:	d10e      	bne.n	8010d12 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	68db      	ldr	r3, [r3, #12]
 8010cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cfe:	2b40      	cmp	r3, #64	; 0x40
 8010d00:	d107      	bne.n	8010d12 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010d0c:	6878      	ldr	r0, [r7, #4]
 8010d0e:	f000 fa0f 	bl	8011130 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	691b      	ldr	r3, [r3, #16]
 8010d18:	f003 0320 	and.w	r3, r3, #32
 8010d1c:	2b20      	cmp	r3, #32
 8010d1e:	d10e      	bne.n	8010d3e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	68db      	ldr	r3, [r3, #12]
 8010d26:	f003 0320 	and.w	r3, r3, #32
 8010d2a:	2b20      	cmp	r3, #32
 8010d2c:	d107      	bne.n	8010d3e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	f06f 0220 	mvn.w	r2, #32
 8010d36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010d38:	6878      	ldr	r0, [r7, #4]
 8010d3a:	f000 ff2b 	bl	8011b94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010d3e:	bf00      	nop
 8010d40:	3708      	adds	r7, #8
 8010d42:	46bd      	mov	sp, r7
 8010d44:	bd80      	pop	{r7, pc}
	...

08010d48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b084      	sub	sp, #16
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	60f8      	str	r0, [r7, #12]
 8010d50:	60b9      	str	r1, [r7, #8]
 8010d52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010d5a:	2b01      	cmp	r3, #1
 8010d5c:	d101      	bne.n	8010d62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8010d5e:	2302      	movs	r3, #2
 8010d60:	e0fd      	b.n	8010f5e <HAL_TIM_PWM_ConfigChannel+0x216>
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	2201      	movs	r2, #1
 8010d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	2b14      	cmp	r3, #20
 8010d6e:	f200 80f0 	bhi.w	8010f52 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8010d72:	a201      	add	r2, pc, #4	; (adr r2, 8010d78 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8010d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d78:	08010dcd 	.word	0x08010dcd
 8010d7c:	08010f53 	.word	0x08010f53
 8010d80:	08010f53 	.word	0x08010f53
 8010d84:	08010f53 	.word	0x08010f53
 8010d88:	08010e0d 	.word	0x08010e0d
 8010d8c:	08010f53 	.word	0x08010f53
 8010d90:	08010f53 	.word	0x08010f53
 8010d94:	08010f53 	.word	0x08010f53
 8010d98:	08010e4f 	.word	0x08010e4f
 8010d9c:	08010f53 	.word	0x08010f53
 8010da0:	08010f53 	.word	0x08010f53
 8010da4:	08010f53 	.word	0x08010f53
 8010da8:	08010e8f 	.word	0x08010e8f
 8010dac:	08010f53 	.word	0x08010f53
 8010db0:	08010f53 	.word	0x08010f53
 8010db4:	08010f53 	.word	0x08010f53
 8010db8:	08010ed1 	.word	0x08010ed1
 8010dbc:	08010f53 	.word	0x08010f53
 8010dc0:	08010f53 	.word	0x08010f53
 8010dc4:	08010f53 	.word	0x08010f53
 8010dc8:	08010f11 	.word	0x08010f11
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	68b9      	ldr	r1, [r7, #8]
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	f000 fb32 	bl	801143c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	699a      	ldr	r2, [r3, #24]
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	f042 0208 	orr.w	r2, r2, #8
 8010de6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	699a      	ldr	r2, [r3, #24]
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	f022 0204 	bic.w	r2, r2, #4
 8010df6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	6999      	ldr	r1, [r3, #24]
 8010dfe:	68bb      	ldr	r3, [r7, #8]
 8010e00:	691a      	ldr	r2, [r3, #16]
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	430a      	orrs	r2, r1
 8010e08:	619a      	str	r2, [r3, #24]
      break;
 8010e0a:	e0a3      	b.n	8010f54 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	68b9      	ldr	r1, [r7, #8]
 8010e12:	4618      	mov	r0, r3
 8010e14:	f000 fb84 	bl	8011520 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	699a      	ldr	r2, [r3, #24]
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010e26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	699a      	ldr	r2, [r3, #24]
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010e36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	6999      	ldr	r1, [r3, #24]
 8010e3e:	68bb      	ldr	r3, [r7, #8]
 8010e40:	691b      	ldr	r3, [r3, #16]
 8010e42:	021a      	lsls	r2, r3, #8
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	430a      	orrs	r2, r1
 8010e4a:	619a      	str	r2, [r3, #24]
      break;
 8010e4c:	e082      	b.n	8010f54 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	68b9      	ldr	r1, [r7, #8]
 8010e54:	4618      	mov	r0, r3
 8010e56:	f000 fbdb 	bl	8011610 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	69da      	ldr	r2, [r3, #28]
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	f042 0208 	orr.w	r2, r2, #8
 8010e68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	69da      	ldr	r2, [r3, #28]
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	f022 0204 	bic.w	r2, r2, #4
 8010e78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	69d9      	ldr	r1, [r3, #28]
 8010e80:	68bb      	ldr	r3, [r7, #8]
 8010e82:	691a      	ldr	r2, [r3, #16]
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	430a      	orrs	r2, r1
 8010e8a:	61da      	str	r2, [r3, #28]
      break;
 8010e8c:	e062      	b.n	8010f54 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	68b9      	ldr	r1, [r7, #8]
 8010e94:	4618      	mov	r0, r3
 8010e96:	f000 fc31 	bl	80116fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	69da      	ldr	r2, [r3, #28]
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010ea8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	69da      	ldr	r2, [r3, #28]
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010eb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	69d9      	ldr	r1, [r3, #28]
 8010ec0:	68bb      	ldr	r3, [r7, #8]
 8010ec2:	691b      	ldr	r3, [r3, #16]
 8010ec4:	021a      	lsls	r2, r3, #8
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	430a      	orrs	r2, r1
 8010ecc:	61da      	str	r2, [r3, #28]
      break;
 8010ece:	e041      	b.n	8010f54 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	68b9      	ldr	r1, [r7, #8]
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f000 fc68 	bl	80117ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	f042 0208 	orr.w	r2, r2, #8
 8010eea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	f022 0204 	bic.w	r2, r2, #4
 8010efa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010f02:	68bb      	ldr	r3, [r7, #8]
 8010f04:	691a      	ldr	r2, [r3, #16]
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	430a      	orrs	r2, r1
 8010f0c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010f0e:	e021      	b.n	8010f54 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	68b9      	ldr	r1, [r7, #8]
 8010f16:	4618      	mov	r0, r3
 8010f18:	f000 fc9a 	bl	8011850 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010f2a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010f3a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010f42:	68bb      	ldr	r3, [r7, #8]
 8010f44:	691b      	ldr	r3, [r3, #16]
 8010f46:	021a      	lsls	r2, r3, #8
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	430a      	orrs	r2, r1
 8010f4e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010f50:	e000      	b.n	8010f54 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8010f52:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	2200      	movs	r2, #0
 8010f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010f5c:	2300      	movs	r3, #0
}
 8010f5e:	4618      	mov	r0, r3
 8010f60:	3710      	adds	r7, #16
 8010f62:	46bd      	mov	sp, r7
 8010f64:	bd80      	pop	{r7, pc}
 8010f66:	bf00      	nop

08010f68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b084      	sub	sp, #16
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
 8010f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010f78:	2b01      	cmp	r3, #1
 8010f7a:	d101      	bne.n	8010f80 <HAL_TIM_ConfigClockSource+0x18>
 8010f7c:	2302      	movs	r3, #2
 8010f7e:	e0b3      	b.n	80110e8 <HAL_TIM_ConfigClockSource+0x180>
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	2201      	movs	r2, #1
 8010f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	2202      	movs	r2, #2
 8010f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	689b      	ldr	r3, [r3, #8]
 8010f96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010f98:	68fa      	ldr	r2, [r7, #12]
 8010f9a:	4b55      	ldr	r3, [pc, #340]	; (80110f0 <HAL_TIM_ConfigClockSource+0x188>)
 8010f9c:	4013      	ands	r3, r2
 8010f9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010fa6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	68fa      	ldr	r2, [r7, #12]
 8010fae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010fb0:	683b      	ldr	r3, [r7, #0]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010fb8:	d03e      	beq.n	8011038 <HAL_TIM_ConfigClockSource+0xd0>
 8010fba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010fbe:	f200 8087 	bhi.w	80110d0 <HAL_TIM_ConfigClockSource+0x168>
 8010fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010fc6:	f000 8085 	beq.w	80110d4 <HAL_TIM_ConfigClockSource+0x16c>
 8010fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010fce:	d87f      	bhi.n	80110d0 <HAL_TIM_ConfigClockSource+0x168>
 8010fd0:	2b70      	cmp	r3, #112	; 0x70
 8010fd2:	d01a      	beq.n	801100a <HAL_TIM_ConfigClockSource+0xa2>
 8010fd4:	2b70      	cmp	r3, #112	; 0x70
 8010fd6:	d87b      	bhi.n	80110d0 <HAL_TIM_ConfigClockSource+0x168>
 8010fd8:	2b60      	cmp	r3, #96	; 0x60
 8010fda:	d050      	beq.n	801107e <HAL_TIM_ConfigClockSource+0x116>
 8010fdc:	2b60      	cmp	r3, #96	; 0x60
 8010fde:	d877      	bhi.n	80110d0 <HAL_TIM_ConfigClockSource+0x168>
 8010fe0:	2b50      	cmp	r3, #80	; 0x50
 8010fe2:	d03c      	beq.n	801105e <HAL_TIM_ConfigClockSource+0xf6>
 8010fe4:	2b50      	cmp	r3, #80	; 0x50
 8010fe6:	d873      	bhi.n	80110d0 <HAL_TIM_ConfigClockSource+0x168>
 8010fe8:	2b40      	cmp	r3, #64	; 0x40
 8010fea:	d058      	beq.n	801109e <HAL_TIM_ConfigClockSource+0x136>
 8010fec:	2b40      	cmp	r3, #64	; 0x40
 8010fee:	d86f      	bhi.n	80110d0 <HAL_TIM_ConfigClockSource+0x168>
 8010ff0:	2b30      	cmp	r3, #48	; 0x30
 8010ff2:	d064      	beq.n	80110be <HAL_TIM_ConfigClockSource+0x156>
 8010ff4:	2b30      	cmp	r3, #48	; 0x30
 8010ff6:	d86b      	bhi.n	80110d0 <HAL_TIM_ConfigClockSource+0x168>
 8010ff8:	2b20      	cmp	r3, #32
 8010ffa:	d060      	beq.n	80110be <HAL_TIM_ConfigClockSource+0x156>
 8010ffc:	2b20      	cmp	r3, #32
 8010ffe:	d867      	bhi.n	80110d0 <HAL_TIM_ConfigClockSource+0x168>
 8011000:	2b00      	cmp	r3, #0
 8011002:	d05c      	beq.n	80110be <HAL_TIM_ConfigClockSource+0x156>
 8011004:	2b10      	cmp	r3, #16
 8011006:	d05a      	beq.n	80110be <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8011008:	e062      	b.n	80110d0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	6818      	ldr	r0, [r3, #0]
 801100e:	683b      	ldr	r3, [r7, #0]
 8011010:	6899      	ldr	r1, [r3, #8]
 8011012:	683b      	ldr	r3, [r7, #0]
 8011014:	685a      	ldr	r2, [r3, #4]
 8011016:	683b      	ldr	r3, [r7, #0]
 8011018:	68db      	ldr	r3, [r3, #12]
 801101a:	f000 fce7 	bl	80119ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	689b      	ldr	r3, [r3, #8]
 8011024:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801102c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	68fa      	ldr	r2, [r7, #12]
 8011034:	609a      	str	r2, [r3, #8]
      break;
 8011036:	e04e      	b.n	80110d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	6818      	ldr	r0, [r3, #0]
 801103c:	683b      	ldr	r3, [r7, #0]
 801103e:	6899      	ldr	r1, [r3, #8]
 8011040:	683b      	ldr	r3, [r7, #0]
 8011042:	685a      	ldr	r2, [r3, #4]
 8011044:	683b      	ldr	r3, [r7, #0]
 8011046:	68db      	ldr	r3, [r3, #12]
 8011048:	f000 fcd0 	bl	80119ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	689a      	ldr	r2, [r3, #8]
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801105a:	609a      	str	r2, [r3, #8]
      break;
 801105c:	e03b      	b.n	80110d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	6818      	ldr	r0, [r3, #0]
 8011062:	683b      	ldr	r3, [r7, #0]
 8011064:	6859      	ldr	r1, [r3, #4]
 8011066:	683b      	ldr	r3, [r7, #0]
 8011068:	68db      	ldr	r3, [r3, #12]
 801106a:	461a      	mov	r2, r3
 801106c:	f000 fc44 	bl	80118f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	2150      	movs	r1, #80	; 0x50
 8011076:	4618      	mov	r0, r3
 8011078:	f000 fc9d 	bl	80119b6 <TIM_ITRx_SetConfig>
      break;
 801107c:	e02b      	b.n	80110d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	6818      	ldr	r0, [r3, #0]
 8011082:	683b      	ldr	r3, [r7, #0]
 8011084:	6859      	ldr	r1, [r3, #4]
 8011086:	683b      	ldr	r3, [r7, #0]
 8011088:	68db      	ldr	r3, [r3, #12]
 801108a:	461a      	mov	r2, r3
 801108c:	f000 fc63 	bl	8011956 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	2160      	movs	r1, #96	; 0x60
 8011096:	4618      	mov	r0, r3
 8011098:	f000 fc8d 	bl	80119b6 <TIM_ITRx_SetConfig>
      break;
 801109c:	e01b      	b.n	80110d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	6818      	ldr	r0, [r3, #0]
 80110a2:	683b      	ldr	r3, [r7, #0]
 80110a4:	6859      	ldr	r1, [r3, #4]
 80110a6:	683b      	ldr	r3, [r7, #0]
 80110a8:	68db      	ldr	r3, [r3, #12]
 80110aa:	461a      	mov	r2, r3
 80110ac:	f000 fc24 	bl	80118f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	2140      	movs	r1, #64	; 0x40
 80110b6:	4618      	mov	r0, r3
 80110b8:	f000 fc7d 	bl	80119b6 <TIM_ITRx_SetConfig>
      break;
 80110bc:	e00b      	b.n	80110d6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	681a      	ldr	r2, [r3, #0]
 80110c2:	683b      	ldr	r3, [r7, #0]
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	4619      	mov	r1, r3
 80110c8:	4610      	mov	r0, r2
 80110ca:	f000 fc74 	bl	80119b6 <TIM_ITRx_SetConfig>
        break;
 80110ce:	e002      	b.n	80110d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80110d0:	bf00      	nop
 80110d2:	e000      	b.n	80110d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80110d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	2201      	movs	r2, #1
 80110da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	2200      	movs	r2, #0
 80110e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80110e6:	2300      	movs	r3, #0
}
 80110e8:	4618      	mov	r0, r3
 80110ea:	3710      	adds	r7, #16
 80110ec:	46bd      	mov	sp, r7
 80110ee:	bd80      	pop	{r7, pc}
 80110f0:	fffeff88 	.word	0xfffeff88

080110f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80110f4:	b480      	push	{r7}
 80110f6:	b083      	sub	sp, #12
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80110fc:	bf00      	nop
 80110fe:	370c      	adds	r7, #12
 8011100:	46bd      	mov	sp, r7
 8011102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011106:	4770      	bx	lr

08011108 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011108:	b480      	push	{r7}
 801110a:	b083      	sub	sp, #12
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8011110:	bf00      	nop
 8011112:	370c      	adds	r7, #12
 8011114:	46bd      	mov	sp, r7
 8011116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801111a:	4770      	bx	lr

0801111c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 801111c:	b480      	push	{r7}
 801111e:	b083      	sub	sp, #12
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8011124:	bf00      	nop
 8011126:	370c      	adds	r7, #12
 8011128:	46bd      	mov	sp, r7
 801112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112e:	4770      	bx	lr

08011130 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011130:	b480      	push	{r7}
 8011132:	b083      	sub	sp, #12
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011138:	bf00      	nop
 801113a:	370c      	adds	r7, #12
 801113c:	46bd      	mov	sp, r7
 801113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011142:	4770      	bx	lr

08011144 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8011144:	b480      	push	{r7}
 8011146:	b083      	sub	sp, #12
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 801114c:	bf00      	nop
 801114e:	370c      	adds	r7, #12
 8011150:	46bd      	mov	sp, r7
 8011152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011156:	4770      	bx	lr

08011158 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8011158:	b580      	push	{r7, lr}
 801115a:	b084      	sub	sp, #16
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011164:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801116a:	687a      	ldr	r2, [r7, #4]
 801116c:	429a      	cmp	r2, r3
 801116e:	d107      	bne.n	8011180 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	2201      	movs	r2, #1
 8011174:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	2201      	movs	r2, #1
 801117a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801117e:	e02a      	b.n	80111d6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011184:	687a      	ldr	r2, [r7, #4]
 8011186:	429a      	cmp	r2, r3
 8011188:	d107      	bne.n	801119a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	2202      	movs	r2, #2
 801118e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	2201      	movs	r2, #1
 8011194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011198:	e01d      	b.n	80111d6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801119e:	687a      	ldr	r2, [r7, #4]
 80111a0:	429a      	cmp	r2, r3
 80111a2:	d107      	bne.n	80111b4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	2204      	movs	r2, #4
 80111a8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	2201      	movs	r2, #1
 80111ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80111b2:	e010      	b.n	80111d6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111b8:	687a      	ldr	r2, [r7, #4]
 80111ba:	429a      	cmp	r2, r3
 80111bc:	d107      	bne.n	80111ce <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	2208      	movs	r2, #8
 80111c2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	2201      	movs	r2, #1
 80111c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80111cc:	e003      	b.n	80111d6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	2201      	movs	r2, #1
 80111d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80111d6:	68f8      	ldr	r0, [r7, #12]
 80111d8:	f7ff ffb4 	bl	8011144 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	2200      	movs	r2, #0
 80111e0:	771a      	strb	r2, [r3, #28]
}
 80111e2:	bf00      	nop
 80111e4:	3710      	adds	r7, #16
 80111e6:	46bd      	mov	sp, r7
 80111e8:	bd80      	pop	{r7, pc}

080111ea <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80111ea:	b580      	push	{r7, lr}
 80111ec:	b084      	sub	sp, #16
 80111ee:	af00      	add	r7, sp, #0
 80111f0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111f6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111fc:	687a      	ldr	r2, [r7, #4]
 80111fe:	429a      	cmp	r2, r3
 8011200:	d10b      	bne.n	801121a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	2201      	movs	r2, #1
 8011206:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	69db      	ldr	r3, [r3, #28]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d136      	bne.n	801127e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	2201      	movs	r2, #1
 8011214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011218:	e031      	b.n	801127e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801121e:	687a      	ldr	r2, [r7, #4]
 8011220:	429a      	cmp	r2, r3
 8011222:	d10b      	bne.n	801123c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	2202      	movs	r2, #2
 8011228:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	69db      	ldr	r3, [r3, #28]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d125      	bne.n	801127e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	2201      	movs	r2, #1
 8011236:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801123a:	e020      	b.n	801127e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011240:	687a      	ldr	r2, [r7, #4]
 8011242:	429a      	cmp	r2, r3
 8011244:	d10b      	bne.n	801125e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	2204      	movs	r2, #4
 801124a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	69db      	ldr	r3, [r3, #28]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d114      	bne.n	801127e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	2201      	movs	r2, #1
 8011258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801125c:	e00f      	b.n	801127e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011262:	687a      	ldr	r2, [r7, #4]
 8011264:	429a      	cmp	r2, r3
 8011266:	d10a      	bne.n	801127e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	2208      	movs	r2, #8
 801126c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	69db      	ldr	r3, [r3, #28]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d103      	bne.n	801127e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	2201      	movs	r2, #1
 801127a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 801127e:	68f8      	ldr	r0, [r7, #12]
 8011280:	f7ef fba6 	bl	80009d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	2200      	movs	r2, #0
 8011288:	771a      	strb	r2, [r3, #28]
}
 801128a:	bf00      	nop
 801128c:	3710      	adds	r7, #16
 801128e:	46bd      	mov	sp, r7
 8011290:	bd80      	pop	{r7, pc}

08011292 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011292:	b580      	push	{r7, lr}
 8011294:	b084      	sub	sp, #16
 8011296:	af00      	add	r7, sp, #0
 8011298:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801129e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112a4:	687a      	ldr	r2, [r7, #4]
 80112a6:	429a      	cmp	r2, r3
 80112a8:	d103      	bne.n	80112b2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	2201      	movs	r2, #1
 80112ae:	771a      	strb	r2, [r3, #28]
 80112b0:	e019      	b.n	80112e6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112b6:	687a      	ldr	r2, [r7, #4]
 80112b8:	429a      	cmp	r2, r3
 80112ba:	d103      	bne.n	80112c4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	2202      	movs	r2, #2
 80112c0:	771a      	strb	r2, [r3, #28]
 80112c2:	e010      	b.n	80112e6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112c8:	687a      	ldr	r2, [r7, #4]
 80112ca:	429a      	cmp	r2, r3
 80112cc:	d103      	bne.n	80112d6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	2204      	movs	r2, #4
 80112d2:	771a      	strb	r2, [r3, #28]
 80112d4:	e007      	b.n	80112e6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112da:	687a      	ldr	r2, [r7, #4]
 80112dc:	429a      	cmp	r2, r3
 80112de:	d102      	bne.n	80112e6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	2208      	movs	r2, #8
 80112e4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80112e6:	68f8      	ldr	r0, [r7, #12]
 80112e8:	f7ff ff18 	bl	801111c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	2200      	movs	r2, #0
 80112f0:	771a      	strb	r2, [r3, #28]
}
 80112f2:	bf00      	nop
 80112f4:	3710      	adds	r7, #16
 80112f6:	46bd      	mov	sp, r7
 80112f8:	bd80      	pop	{r7, pc}
	...

080112fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80112fc:	b480      	push	{r7}
 80112fe:	b085      	sub	sp, #20
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]
 8011304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	4a40      	ldr	r2, [pc, #256]	; (8011410 <TIM_Base_SetConfig+0x114>)
 8011310:	4293      	cmp	r3, r2
 8011312:	d013      	beq.n	801133c <TIM_Base_SetConfig+0x40>
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801131a:	d00f      	beq.n	801133c <TIM_Base_SetConfig+0x40>
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	4a3d      	ldr	r2, [pc, #244]	; (8011414 <TIM_Base_SetConfig+0x118>)
 8011320:	4293      	cmp	r3, r2
 8011322:	d00b      	beq.n	801133c <TIM_Base_SetConfig+0x40>
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	4a3c      	ldr	r2, [pc, #240]	; (8011418 <TIM_Base_SetConfig+0x11c>)
 8011328:	4293      	cmp	r3, r2
 801132a:	d007      	beq.n	801133c <TIM_Base_SetConfig+0x40>
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	4a3b      	ldr	r2, [pc, #236]	; (801141c <TIM_Base_SetConfig+0x120>)
 8011330:	4293      	cmp	r3, r2
 8011332:	d003      	beq.n	801133c <TIM_Base_SetConfig+0x40>
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	4a3a      	ldr	r2, [pc, #232]	; (8011420 <TIM_Base_SetConfig+0x124>)
 8011338:	4293      	cmp	r3, r2
 801133a:	d108      	bne.n	801134e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011344:	683b      	ldr	r3, [r7, #0]
 8011346:	685b      	ldr	r3, [r3, #4]
 8011348:	68fa      	ldr	r2, [r7, #12]
 801134a:	4313      	orrs	r3, r2
 801134c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	4a2f      	ldr	r2, [pc, #188]	; (8011410 <TIM_Base_SetConfig+0x114>)
 8011352:	4293      	cmp	r3, r2
 8011354:	d02b      	beq.n	80113ae <TIM_Base_SetConfig+0xb2>
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801135c:	d027      	beq.n	80113ae <TIM_Base_SetConfig+0xb2>
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	4a2c      	ldr	r2, [pc, #176]	; (8011414 <TIM_Base_SetConfig+0x118>)
 8011362:	4293      	cmp	r3, r2
 8011364:	d023      	beq.n	80113ae <TIM_Base_SetConfig+0xb2>
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	4a2b      	ldr	r2, [pc, #172]	; (8011418 <TIM_Base_SetConfig+0x11c>)
 801136a:	4293      	cmp	r3, r2
 801136c:	d01f      	beq.n	80113ae <TIM_Base_SetConfig+0xb2>
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	4a2a      	ldr	r2, [pc, #168]	; (801141c <TIM_Base_SetConfig+0x120>)
 8011372:	4293      	cmp	r3, r2
 8011374:	d01b      	beq.n	80113ae <TIM_Base_SetConfig+0xb2>
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	4a29      	ldr	r2, [pc, #164]	; (8011420 <TIM_Base_SetConfig+0x124>)
 801137a:	4293      	cmp	r3, r2
 801137c:	d017      	beq.n	80113ae <TIM_Base_SetConfig+0xb2>
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	4a28      	ldr	r2, [pc, #160]	; (8011424 <TIM_Base_SetConfig+0x128>)
 8011382:	4293      	cmp	r3, r2
 8011384:	d013      	beq.n	80113ae <TIM_Base_SetConfig+0xb2>
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	4a27      	ldr	r2, [pc, #156]	; (8011428 <TIM_Base_SetConfig+0x12c>)
 801138a:	4293      	cmp	r3, r2
 801138c:	d00f      	beq.n	80113ae <TIM_Base_SetConfig+0xb2>
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	4a26      	ldr	r2, [pc, #152]	; (801142c <TIM_Base_SetConfig+0x130>)
 8011392:	4293      	cmp	r3, r2
 8011394:	d00b      	beq.n	80113ae <TIM_Base_SetConfig+0xb2>
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	4a25      	ldr	r2, [pc, #148]	; (8011430 <TIM_Base_SetConfig+0x134>)
 801139a:	4293      	cmp	r3, r2
 801139c:	d007      	beq.n	80113ae <TIM_Base_SetConfig+0xb2>
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	4a24      	ldr	r2, [pc, #144]	; (8011434 <TIM_Base_SetConfig+0x138>)
 80113a2:	4293      	cmp	r3, r2
 80113a4:	d003      	beq.n	80113ae <TIM_Base_SetConfig+0xb2>
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	4a23      	ldr	r2, [pc, #140]	; (8011438 <TIM_Base_SetConfig+0x13c>)
 80113aa:	4293      	cmp	r3, r2
 80113ac:	d108      	bne.n	80113c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80113b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80113b6:	683b      	ldr	r3, [r7, #0]
 80113b8:	68db      	ldr	r3, [r3, #12]
 80113ba:	68fa      	ldr	r2, [r7, #12]
 80113bc:	4313      	orrs	r3, r2
 80113be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80113c6:	683b      	ldr	r3, [r7, #0]
 80113c8:	695b      	ldr	r3, [r3, #20]
 80113ca:	4313      	orrs	r3, r2
 80113cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	68fa      	ldr	r2, [r7, #12]
 80113d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80113d4:	683b      	ldr	r3, [r7, #0]
 80113d6:	689a      	ldr	r2, [r3, #8]
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80113dc:	683b      	ldr	r3, [r7, #0]
 80113de:	681a      	ldr	r2, [r3, #0]
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	4a0a      	ldr	r2, [pc, #40]	; (8011410 <TIM_Base_SetConfig+0x114>)
 80113e8:	4293      	cmp	r3, r2
 80113ea:	d003      	beq.n	80113f4 <TIM_Base_SetConfig+0xf8>
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	4a0c      	ldr	r2, [pc, #48]	; (8011420 <TIM_Base_SetConfig+0x124>)
 80113f0:	4293      	cmp	r3, r2
 80113f2:	d103      	bne.n	80113fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80113f4:	683b      	ldr	r3, [r7, #0]
 80113f6:	691a      	ldr	r2, [r3, #16]
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	2201      	movs	r2, #1
 8011400:	615a      	str	r2, [r3, #20]
}
 8011402:	bf00      	nop
 8011404:	3714      	adds	r7, #20
 8011406:	46bd      	mov	sp, r7
 8011408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140c:	4770      	bx	lr
 801140e:	bf00      	nop
 8011410:	40010000 	.word	0x40010000
 8011414:	40000400 	.word	0x40000400
 8011418:	40000800 	.word	0x40000800
 801141c:	40000c00 	.word	0x40000c00
 8011420:	40010400 	.word	0x40010400
 8011424:	40014000 	.word	0x40014000
 8011428:	40014400 	.word	0x40014400
 801142c:	40014800 	.word	0x40014800
 8011430:	40001800 	.word	0x40001800
 8011434:	40001c00 	.word	0x40001c00
 8011438:	40002000 	.word	0x40002000

0801143c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801143c:	b480      	push	{r7}
 801143e:	b087      	sub	sp, #28
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]
 8011444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	6a1b      	ldr	r3, [r3, #32]
 801144a:	f023 0201 	bic.w	r2, r3, #1
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	6a1b      	ldr	r3, [r3, #32]
 8011456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	685b      	ldr	r3, [r3, #4]
 801145c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	699b      	ldr	r3, [r3, #24]
 8011462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011464:	68fa      	ldr	r2, [r7, #12]
 8011466:	4b2b      	ldr	r3, [pc, #172]	; (8011514 <TIM_OC1_SetConfig+0xd8>)
 8011468:	4013      	ands	r3, r2
 801146a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	f023 0303 	bic.w	r3, r3, #3
 8011472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011474:	683b      	ldr	r3, [r7, #0]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	68fa      	ldr	r2, [r7, #12]
 801147a:	4313      	orrs	r3, r2
 801147c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801147e:	697b      	ldr	r3, [r7, #20]
 8011480:	f023 0302 	bic.w	r3, r3, #2
 8011484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8011486:	683b      	ldr	r3, [r7, #0]
 8011488:	689b      	ldr	r3, [r3, #8]
 801148a:	697a      	ldr	r2, [r7, #20]
 801148c:	4313      	orrs	r3, r2
 801148e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	4a21      	ldr	r2, [pc, #132]	; (8011518 <TIM_OC1_SetConfig+0xdc>)
 8011494:	4293      	cmp	r3, r2
 8011496:	d003      	beq.n	80114a0 <TIM_OC1_SetConfig+0x64>
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	4a20      	ldr	r2, [pc, #128]	; (801151c <TIM_OC1_SetConfig+0xe0>)
 801149c:	4293      	cmp	r3, r2
 801149e:	d10c      	bne.n	80114ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80114a0:	697b      	ldr	r3, [r7, #20]
 80114a2:	f023 0308 	bic.w	r3, r3, #8
 80114a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80114a8:	683b      	ldr	r3, [r7, #0]
 80114aa:	68db      	ldr	r3, [r3, #12]
 80114ac:	697a      	ldr	r2, [r7, #20]
 80114ae:	4313      	orrs	r3, r2
 80114b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80114b2:	697b      	ldr	r3, [r7, #20]
 80114b4:	f023 0304 	bic.w	r3, r3, #4
 80114b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	4a16      	ldr	r2, [pc, #88]	; (8011518 <TIM_OC1_SetConfig+0xdc>)
 80114be:	4293      	cmp	r3, r2
 80114c0:	d003      	beq.n	80114ca <TIM_OC1_SetConfig+0x8e>
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	4a15      	ldr	r2, [pc, #84]	; (801151c <TIM_OC1_SetConfig+0xe0>)
 80114c6:	4293      	cmp	r3, r2
 80114c8:	d111      	bne.n	80114ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80114ca:	693b      	ldr	r3, [r7, #16]
 80114cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80114d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80114d2:	693b      	ldr	r3, [r7, #16]
 80114d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80114d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80114da:	683b      	ldr	r3, [r7, #0]
 80114dc:	695b      	ldr	r3, [r3, #20]
 80114de:	693a      	ldr	r2, [r7, #16]
 80114e0:	4313      	orrs	r3, r2
 80114e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80114e4:	683b      	ldr	r3, [r7, #0]
 80114e6:	699b      	ldr	r3, [r3, #24]
 80114e8:	693a      	ldr	r2, [r7, #16]
 80114ea:	4313      	orrs	r3, r2
 80114ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	693a      	ldr	r2, [r7, #16]
 80114f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	68fa      	ldr	r2, [r7, #12]
 80114f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80114fa:	683b      	ldr	r3, [r7, #0]
 80114fc:	685a      	ldr	r2, [r3, #4]
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	697a      	ldr	r2, [r7, #20]
 8011506:	621a      	str	r2, [r3, #32]
}
 8011508:	bf00      	nop
 801150a:	371c      	adds	r7, #28
 801150c:	46bd      	mov	sp, r7
 801150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011512:	4770      	bx	lr
 8011514:	fffeff8f 	.word	0xfffeff8f
 8011518:	40010000 	.word	0x40010000
 801151c:	40010400 	.word	0x40010400

08011520 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011520:	b480      	push	{r7}
 8011522:	b087      	sub	sp, #28
 8011524:	af00      	add	r7, sp, #0
 8011526:	6078      	str	r0, [r7, #4]
 8011528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	6a1b      	ldr	r3, [r3, #32]
 801152e:	f023 0210 	bic.w	r2, r3, #16
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	6a1b      	ldr	r3, [r3, #32]
 801153a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	685b      	ldr	r3, [r3, #4]
 8011540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	699b      	ldr	r3, [r3, #24]
 8011546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011548:	68fa      	ldr	r2, [r7, #12]
 801154a:	4b2e      	ldr	r3, [pc, #184]	; (8011604 <TIM_OC2_SetConfig+0xe4>)
 801154c:	4013      	ands	r3, r2
 801154e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011556:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011558:	683b      	ldr	r3, [r7, #0]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	021b      	lsls	r3, r3, #8
 801155e:	68fa      	ldr	r2, [r7, #12]
 8011560:	4313      	orrs	r3, r2
 8011562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011564:	697b      	ldr	r3, [r7, #20]
 8011566:	f023 0320 	bic.w	r3, r3, #32
 801156a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801156c:	683b      	ldr	r3, [r7, #0]
 801156e:	689b      	ldr	r3, [r3, #8]
 8011570:	011b      	lsls	r3, r3, #4
 8011572:	697a      	ldr	r2, [r7, #20]
 8011574:	4313      	orrs	r3, r2
 8011576:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	4a23      	ldr	r2, [pc, #140]	; (8011608 <TIM_OC2_SetConfig+0xe8>)
 801157c:	4293      	cmp	r3, r2
 801157e:	d003      	beq.n	8011588 <TIM_OC2_SetConfig+0x68>
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	4a22      	ldr	r2, [pc, #136]	; (801160c <TIM_OC2_SetConfig+0xec>)
 8011584:	4293      	cmp	r3, r2
 8011586:	d10d      	bne.n	80115a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011588:	697b      	ldr	r3, [r7, #20]
 801158a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801158e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011590:	683b      	ldr	r3, [r7, #0]
 8011592:	68db      	ldr	r3, [r3, #12]
 8011594:	011b      	lsls	r3, r3, #4
 8011596:	697a      	ldr	r2, [r7, #20]
 8011598:	4313      	orrs	r3, r2
 801159a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801159c:	697b      	ldr	r3, [r7, #20]
 801159e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80115a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	4a18      	ldr	r2, [pc, #96]	; (8011608 <TIM_OC2_SetConfig+0xe8>)
 80115a8:	4293      	cmp	r3, r2
 80115aa:	d003      	beq.n	80115b4 <TIM_OC2_SetConfig+0x94>
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	4a17      	ldr	r2, [pc, #92]	; (801160c <TIM_OC2_SetConfig+0xec>)
 80115b0:	4293      	cmp	r3, r2
 80115b2:	d113      	bne.n	80115dc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80115b4:	693b      	ldr	r3, [r7, #16]
 80115b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80115ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80115bc:	693b      	ldr	r3, [r7, #16]
 80115be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80115c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80115c4:	683b      	ldr	r3, [r7, #0]
 80115c6:	695b      	ldr	r3, [r3, #20]
 80115c8:	009b      	lsls	r3, r3, #2
 80115ca:	693a      	ldr	r2, [r7, #16]
 80115cc:	4313      	orrs	r3, r2
 80115ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80115d0:	683b      	ldr	r3, [r7, #0]
 80115d2:	699b      	ldr	r3, [r3, #24]
 80115d4:	009b      	lsls	r3, r3, #2
 80115d6:	693a      	ldr	r2, [r7, #16]
 80115d8:	4313      	orrs	r3, r2
 80115da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	693a      	ldr	r2, [r7, #16]
 80115e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	68fa      	ldr	r2, [r7, #12]
 80115e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80115e8:	683b      	ldr	r3, [r7, #0]
 80115ea:	685a      	ldr	r2, [r3, #4]
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	697a      	ldr	r2, [r7, #20]
 80115f4:	621a      	str	r2, [r3, #32]
}
 80115f6:	bf00      	nop
 80115f8:	371c      	adds	r7, #28
 80115fa:	46bd      	mov	sp, r7
 80115fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011600:	4770      	bx	lr
 8011602:	bf00      	nop
 8011604:	feff8fff 	.word	0xfeff8fff
 8011608:	40010000 	.word	0x40010000
 801160c:	40010400 	.word	0x40010400

08011610 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011610:	b480      	push	{r7}
 8011612:	b087      	sub	sp, #28
 8011614:	af00      	add	r7, sp, #0
 8011616:	6078      	str	r0, [r7, #4]
 8011618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	6a1b      	ldr	r3, [r3, #32]
 801161e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	6a1b      	ldr	r3, [r3, #32]
 801162a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	685b      	ldr	r3, [r3, #4]
 8011630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	69db      	ldr	r3, [r3, #28]
 8011636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011638:	68fa      	ldr	r2, [r7, #12]
 801163a:	4b2d      	ldr	r3, [pc, #180]	; (80116f0 <TIM_OC3_SetConfig+0xe0>)
 801163c:	4013      	ands	r3, r2
 801163e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	f023 0303 	bic.w	r3, r3, #3
 8011646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011648:	683b      	ldr	r3, [r7, #0]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	68fa      	ldr	r2, [r7, #12]
 801164e:	4313      	orrs	r3, r2
 8011650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011652:	697b      	ldr	r3, [r7, #20]
 8011654:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011658:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801165a:	683b      	ldr	r3, [r7, #0]
 801165c:	689b      	ldr	r3, [r3, #8]
 801165e:	021b      	lsls	r3, r3, #8
 8011660:	697a      	ldr	r2, [r7, #20]
 8011662:	4313      	orrs	r3, r2
 8011664:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	4a22      	ldr	r2, [pc, #136]	; (80116f4 <TIM_OC3_SetConfig+0xe4>)
 801166a:	4293      	cmp	r3, r2
 801166c:	d003      	beq.n	8011676 <TIM_OC3_SetConfig+0x66>
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	4a21      	ldr	r2, [pc, #132]	; (80116f8 <TIM_OC3_SetConfig+0xe8>)
 8011672:	4293      	cmp	r3, r2
 8011674:	d10d      	bne.n	8011692 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011676:	697b      	ldr	r3, [r7, #20]
 8011678:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801167c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	68db      	ldr	r3, [r3, #12]
 8011682:	021b      	lsls	r3, r3, #8
 8011684:	697a      	ldr	r2, [r7, #20]
 8011686:	4313      	orrs	r3, r2
 8011688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801168a:	697b      	ldr	r3, [r7, #20]
 801168c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011690:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	4a17      	ldr	r2, [pc, #92]	; (80116f4 <TIM_OC3_SetConfig+0xe4>)
 8011696:	4293      	cmp	r3, r2
 8011698:	d003      	beq.n	80116a2 <TIM_OC3_SetConfig+0x92>
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	4a16      	ldr	r2, [pc, #88]	; (80116f8 <TIM_OC3_SetConfig+0xe8>)
 801169e:	4293      	cmp	r3, r2
 80116a0:	d113      	bne.n	80116ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80116a2:	693b      	ldr	r3, [r7, #16]
 80116a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80116a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80116aa:	693b      	ldr	r3, [r7, #16]
 80116ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80116b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80116b2:	683b      	ldr	r3, [r7, #0]
 80116b4:	695b      	ldr	r3, [r3, #20]
 80116b6:	011b      	lsls	r3, r3, #4
 80116b8:	693a      	ldr	r2, [r7, #16]
 80116ba:	4313      	orrs	r3, r2
 80116bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80116be:	683b      	ldr	r3, [r7, #0]
 80116c0:	699b      	ldr	r3, [r3, #24]
 80116c2:	011b      	lsls	r3, r3, #4
 80116c4:	693a      	ldr	r2, [r7, #16]
 80116c6:	4313      	orrs	r3, r2
 80116c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	693a      	ldr	r2, [r7, #16]
 80116ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	68fa      	ldr	r2, [r7, #12]
 80116d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80116d6:	683b      	ldr	r3, [r7, #0]
 80116d8:	685a      	ldr	r2, [r3, #4]
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	697a      	ldr	r2, [r7, #20]
 80116e2:	621a      	str	r2, [r3, #32]
}
 80116e4:	bf00      	nop
 80116e6:	371c      	adds	r7, #28
 80116e8:	46bd      	mov	sp, r7
 80116ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ee:	4770      	bx	lr
 80116f0:	fffeff8f 	.word	0xfffeff8f
 80116f4:	40010000 	.word	0x40010000
 80116f8:	40010400 	.word	0x40010400

080116fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80116fc:	b480      	push	{r7}
 80116fe:	b087      	sub	sp, #28
 8011700:	af00      	add	r7, sp, #0
 8011702:	6078      	str	r0, [r7, #4]
 8011704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	6a1b      	ldr	r3, [r3, #32]
 801170a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	6a1b      	ldr	r3, [r3, #32]
 8011716:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	685b      	ldr	r3, [r3, #4]
 801171c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	69db      	ldr	r3, [r3, #28]
 8011722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011724:	68fa      	ldr	r2, [r7, #12]
 8011726:	4b1e      	ldr	r3, [pc, #120]	; (80117a0 <TIM_OC4_SetConfig+0xa4>)
 8011728:	4013      	ands	r3, r2
 801172a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011732:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011734:	683b      	ldr	r3, [r7, #0]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	021b      	lsls	r3, r3, #8
 801173a:	68fa      	ldr	r2, [r7, #12]
 801173c:	4313      	orrs	r3, r2
 801173e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011740:	693b      	ldr	r3, [r7, #16]
 8011742:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011746:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011748:	683b      	ldr	r3, [r7, #0]
 801174a:	689b      	ldr	r3, [r3, #8]
 801174c:	031b      	lsls	r3, r3, #12
 801174e:	693a      	ldr	r2, [r7, #16]
 8011750:	4313      	orrs	r3, r2
 8011752:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	4a13      	ldr	r2, [pc, #76]	; (80117a4 <TIM_OC4_SetConfig+0xa8>)
 8011758:	4293      	cmp	r3, r2
 801175a:	d003      	beq.n	8011764 <TIM_OC4_SetConfig+0x68>
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	4a12      	ldr	r2, [pc, #72]	; (80117a8 <TIM_OC4_SetConfig+0xac>)
 8011760:	4293      	cmp	r3, r2
 8011762:	d109      	bne.n	8011778 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011764:	697b      	ldr	r3, [r7, #20]
 8011766:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801176a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801176c:	683b      	ldr	r3, [r7, #0]
 801176e:	695b      	ldr	r3, [r3, #20]
 8011770:	019b      	lsls	r3, r3, #6
 8011772:	697a      	ldr	r2, [r7, #20]
 8011774:	4313      	orrs	r3, r2
 8011776:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	697a      	ldr	r2, [r7, #20]
 801177c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	68fa      	ldr	r2, [r7, #12]
 8011782:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011784:	683b      	ldr	r3, [r7, #0]
 8011786:	685a      	ldr	r2, [r3, #4]
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	693a      	ldr	r2, [r7, #16]
 8011790:	621a      	str	r2, [r3, #32]
}
 8011792:	bf00      	nop
 8011794:	371c      	adds	r7, #28
 8011796:	46bd      	mov	sp, r7
 8011798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179c:	4770      	bx	lr
 801179e:	bf00      	nop
 80117a0:	feff8fff 	.word	0xfeff8fff
 80117a4:	40010000 	.word	0x40010000
 80117a8:	40010400 	.word	0x40010400

080117ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80117ac:	b480      	push	{r7}
 80117ae:	b087      	sub	sp, #28
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	6078      	str	r0, [r7, #4]
 80117b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	6a1b      	ldr	r3, [r3, #32]
 80117ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	6a1b      	ldr	r3, [r3, #32]
 80117c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	685b      	ldr	r3, [r3, #4]
 80117cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80117d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80117d4:	68fa      	ldr	r2, [r7, #12]
 80117d6:	4b1b      	ldr	r3, [pc, #108]	; (8011844 <TIM_OC5_SetConfig+0x98>)
 80117d8:	4013      	ands	r3, r2
 80117da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80117dc:	683b      	ldr	r3, [r7, #0]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	68fa      	ldr	r2, [r7, #12]
 80117e2:	4313      	orrs	r3, r2
 80117e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80117e6:	693b      	ldr	r3, [r7, #16]
 80117e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80117ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80117ee:	683b      	ldr	r3, [r7, #0]
 80117f0:	689b      	ldr	r3, [r3, #8]
 80117f2:	041b      	lsls	r3, r3, #16
 80117f4:	693a      	ldr	r2, [r7, #16]
 80117f6:	4313      	orrs	r3, r2
 80117f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	4a12      	ldr	r2, [pc, #72]	; (8011848 <TIM_OC5_SetConfig+0x9c>)
 80117fe:	4293      	cmp	r3, r2
 8011800:	d003      	beq.n	801180a <TIM_OC5_SetConfig+0x5e>
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	4a11      	ldr	r2, [pc, #68]	; (801184c <TIM_OC5_SetConfig+0xa0>)
 8011806:	4293      	cmp	r3, r2
 8011808:	d109      	bne.n	801181e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801180a:	697b      	ldr	r3, [r7, #20]
 801180c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011810:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8011812:	683b      	ldr	r3, [r7, #0]
 8011814:	695b      	ldr	r3, [r3, #20]
 8011816:	021b      	lsls	r3, r3, #8
 8011818:	697a      	ldr	r2, [r7, #20]
 801181a:	4313      	orrs	r3, r2
 801181c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	697a      	ldr	r2, [r7, #20]
 8011822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	68fa      	ldr	r2, [r7, #12]
 8011828:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801182a:	683b      	ldr	r3, [r7, #0]
 801182c:	685a      	ldr	r2, [r3, #4]
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	693a      	ldr	r2, [r7, #16]
 8011836:	621a      	str	r2, [r3, #32]
}
 8011838:	bf00      	nop
 801183a:	371c      	adds	r7, #28
 801183c:	46bd      	mov	sp, r7
 801183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011842:	4770      	bx	lr
 8011844:	fffeff8f 	.word	0xfffeff8f
 8011848:	40010000 	.word	0x40010000
 801184c:	40010400 	.word	0x40010400

08011850 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8011850:	b480      	push	{r7}
 8011852:	b087      	sub	sp, #28
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
 8011858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	6a1b      	ldr	r3, [r3, #32]
 801185e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	6a1b      	ldr	r3, [r3, #32]
 801186a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	685b      	ldr	r3, [r3, #4]
 8011870:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011878:	68fa      	ldr	r2, [r7, #12]
 801187a:	4b1c      	ldr	r3, [pc, #112]	; (80118ec <TIM_OC6_SetConfig+0x9c>)
 801187c:	4013      	ands	r3, r2
 801187e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011880:	683b      	ldr	r3, [r7, #0]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	021b      	lsls	r3, r3, #8
 8011886:	68fa      	ldr	r2, [r7, #12]
 8011888:	4313      	orrs	r3, r2
 801188a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801188c:	693b      	ldr	r3, [r7, #16]
 801188e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011892:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011894:	683b      	ldr	r3, [r7, #0]
 8011896:	689b      	ldr	r3, [r3, #8]
 8011898:	051b      	lsls	r3, r3, #20
 801189a:	693a      	ldr	r2, [r7, #16]
 801189c:	4313      	orrs	r3, r2
 801189e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	4a13      	ldr	r2, [pc, #76]	; (80118f0 <TIM_OC6_SetConfig+0xa0>)
 80118a4:	4293      	cmp	r3, r2
 80118a6:	d003      	beq.n	80118b0 <TIM_OC6_SetConfig+0x60>
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	4a12      	ldr	r2, [pc, #72]	; (80118f4 <TIM_OC6_SetConfig+0xa4>)
 80118ac:	4293      	cmp	r3, r2
 80118ae:	d109      	bne.n	80118c4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80118b0:	697b      	ldr	r3, [r7, #20]
 80118b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80118b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80118b8:	683b      	ldr	r3, [r7, #0]
 80118ba:	695b      	ldr	r3, [r3, #20]
 80118bc:	029b      	lsls	r3, r3, #10
 80118be:	697a      	ldr	r2, [r7, #20]
 80118c0:	4313      	orrs	r3, r2
 80118c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	697a      	ldr	r2, [r7, #20]
 80118c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	68fa      	ldr	r2, [r7, #12]
 80118ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80118d0:	683b      	ldr	r3, [r7, #0]
 80118d2:	685a      	ldr	r2, [r3, #4]
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	693a      	ldr	r2, [r7, #16]
 80118dc:	621a      	str	r2, [r3, #32]
}
 80118de:	bf00      	nop
 80118e0:	371c      	adds	r7, #28
 80118e2:	46bd      	mov	sp, r7
 80118e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e8:	4770      	bx	lr
 80118ea:	bf00      	nop
 80118ec:	feff8fff 	.word	0xfeff8fff
 80118f0:	40010000 	.word	0x40010000
 80118f4:	40010400 	.word	0x40010400

080118f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80118f8:	b480      	push	{r7}
 80118fa:	b087      	sub	sp, #28
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	60f8      	str	r0, [r7, #12]
 8011900:	60b9      	str	r1, [r7, #8]
 8011902:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	6a1b      	ldr	r3, [r3, #32]
 8011908:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	6a1b      	ldr	r3, [r3, #32]
 801190e:	f023 0201 	bic.w	r2, r3, #1
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	699b      	ldr	r3, [r3, #24]
 801191a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801191c:	693b      	ldr	r3, [r7, #16]
 801191e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011922:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	011b      	lsls	r3, r3, #4
 8011928:	693a      	ldr	r2, [r7, #16]
 801192a:	4313      	orrs	r3, r2
 801192c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801192e:	697b      	ldr	r3, [r7, #20]
 8011930:	f023 030a 	bic.w	r3, r3, #10
 8011934:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011936:	697a      	ldr	r2, [r7, #20]
 8011938:	68bb      	ldr	r3, [r7, #8]
 801193a:	4313      	orrs	r3, r2
 801193c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	693a      	ldr	r2, [r7, #16]
 8011942:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	697a      	ldr	r2, [r7, #20]
 8011948:	621a      	str	r2, [r3, #32]
}
 801194a:	bf00      	nop
 801194c:	371c      	adds	r7, #28
 801194e:	46bd      	mov	sp, r7
 8011950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011954:	4770      	bx	lr

08011956 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011956:	b480      	push	{r7}
 8011958:	b087      	sub	sp, #28
 801195a:	af00      	add	r7, sp, #0
 801195c:	60f8      	str	r0, [r7, #12]
 801195e:	60b9      	str	r1, [r7, #8]
 8011960:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	6a1b      	ldr	r3, [r3, #32]
 8011966:	f023 0210 	bic.w	r2, r3, #16
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	699b      	ldr	r3, [r3, #24]
 8011972:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	6a1b      	ldr	r3, [r3, #32]
 8011978:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801197a:	697b      	ldr	r3, [r7, #20]
 801197c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011980:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	031b      	lsls	r3, r3, #12
 8011986:	697a      	ldr	r2, [r7, #20]
 8011988:	4313      	orrs	r3, r2
 801198a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801198c:	693b      	ldr	r3, [r7, #16]
 801198e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8011992:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011994:	68bb      	ldr	r3, [r7, #8]
 8011996:	011b      	lsls	r3, r3, #4
 8011998:	693a      	ldr	r2, [r7, #16]
 801199a:	4313      	orrs	r3, r2
 801199c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	697a      	ldr	r2, [r7, #20]
 80119a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	693a      	ldr	r2, [r7, #16]
 80119a8:	621a      	str	r2, [r3, #32]
}
 80119aa:	bf00      	nop
 80119ac:	371c      	adds	r7, #28
 80119ae:	46bd      	mov	sp, r7
 80119b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b4:	4770      	bx	lr

080119b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80119b6:	b480      	push	{r7}
 80119b8:	b085      	sub	sp, #20
 80119ba:	af00      	add	r7, sp, #0
 80119bc:	6078      	str	r0, [r7, #4]
 80119be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	689b      	ldr	r3, [r3, #8]
 80119c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80119cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80119ce:	683a      	ldr	r2, [r7, #0]
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	4313      	orrs	r3, r2
 80119d4:	f043 0307 	orr.w	r3, r3, #7
 80119d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	68fa      	ldr	r2, [r7, #12]
 80119de:	609a      	str	r2, [r3, #8]
}
 80119e0:	bf00      	nop
 80119e2:	3714      	adds	r7, #20
 80119e4:	46bd      	mov	sp, r7
 80119e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ea:	4770      	bx	lr

080119ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80119ec:	b480      	push	{r7}
 80119ee:	b087      	sub	sp, #28
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	60f8      	str	r0, [r7, #12]
 80119f4:	60b9      	str	r1, [r7, #8]
 80119f6:	607a      	str	r2, [r7, #4]
 80119f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	689b      	ldr	r3, [r3, #8]
 80119fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011a00:	697b      	ldr	r3, [r7, #20]
 8011a02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011a06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011a08:	683b      	ldr	r3, [r7, #0]
 8011a0a:	021a      	lsls	r2, r3, #8
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	431a      	orrs	r2, r3
 8011a10:	68bb      	ldr	r3, [r7, #8]
 8011a12:	4313      	orrs	r3, r2
 8011a14:	697a      	ldr	r2, [r7, #20]
 8011a16:	4313      	orrs	r3, r2
 8011a18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	697a      	ldr	r2, [r7, #20]
 8011a1e:	609a      	str	r2, [r3, #8]
}
 8011a20:	bf00      	nop
 8011a22:	371c      	adds	r7, #28
 8011a24:	46bd      	mov	sp, r7
 8011a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2a:	4770      	bx	lr

08011a2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011a2c:	b480      	push	{r7}
 8011a2e:	b087      	sub	sp, #28
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	60f8      	str	r0, [r7, #12]
 8011a34:	60b9      	str	r1, [r7, #8]
 8011a36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011a38:	68bb      	ldr	r3, [r7, #8]
 8011a3a:	f003 031f 	and.w	r3, r3, #31
 8011a3e:	2201      	movs	r2, #1
 8011a40:	fa02 f303 	lsl.w	r3, r2, r3
 8011a44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	6a1a      	ldr	r2, [r3, #32]
 8011a4a:	697b      	ldr	r3, [r7, #20]
 8011a4c:	43db      	mvns	r3, r3
 8011a4e:	401a      	ands	r2, r3
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	6a1a      	ldr	r2, [r3, #32]
 8011a58:	68bb      	ldr	r3, [r7, #8]
 8011a5a:	f003 031f 	and.w	r3, r3, #31
 8011a5e:	6879      	ldr	r1, [r7, #4]
 8011a60:	fa01 f303 	lsl.w	r3, r1, r3
 8011a64:	431a      	orrs	r2, r3
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	621a      	str	r2, [r3, #32]
}
 8011a6a:	bf00      	nop
 8011a6c:	371c      	adds	r7, #28
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a74:	4770      	bx	lr
	...

08011a78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011a78:	b480      	push	{r7}
 8011a7a:	b085      	sub	sp, #20
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	6078      	str	r0, [r7, #4]
 8011a80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011a88:	2b01      	cmp	r3, #1
 8011a8a:	d101      	bne.n	8011a90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011a8c:	2302      	movs	r3, #2
 8011a8e:	e06d      	b.n	8011b6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	2201      	movs	r2, #1
 8011a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	2202      	movs	r2, #2
 8011a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	685b      	ldr	r3, [r3, #4]
 8011aa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	689b      	ldr	r3, [r3, #8]
 8011aae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	4a30      	ldr	r2, [pc, #192]	; (8011b78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8011ab6:	4293      	cmp	r3, r2
 8011ab8:	d004      	beq.n	8011ac4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	4a2f      	ldr	r2, [pc, #188]	; (8011b7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011ac0:	4293      	cmp	r3, r2
 8011ac2:	d108      	bne.n	8011ad6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8011aca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011acc:	683b      	ldr	r3, [r7, #0]
 8011ace:	685b      	ldr	r3, [r3, #4]
 8011ad0:	68fa      	ldr	r2, [r7, #12]
 8011ad2:	4313      	orrs	r3, r2
 8011ad4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011adc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011ade:	683b      	ldr	r3, [r7, #0]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	68fa      	ldr	r2, [r7, #12]
 8011ae4:	4313      	orrs	r3, r2
 8011ae6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	68fa      	ldr	r2, [r7, #12]
 8011aee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	4a20      	ldr	r2, [pc, #128]	; (8011b78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8011af6:	4293      	cmp	r3, r2
 8011af8:	d022      	beq.n	8011b40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011b02:	d01d      	beq.n	8011b40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	4a1d      	ldr	r2, [pc, #116]	; (8011b80 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8011b0a:	4293      	cmp	r3, r2
 8011b0c:	d018      	beq.n	8011b40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	4a1c      	ldr	r2, [pc, #112]	; (8011b84 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8011b14:	4293      	cmp	r3, r2
 8011b16:	d013      	beq.n	8011b40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	4a1a      	ldr	r2, [pc, #104]	; (8011b88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8011b1e:	4293      	cmp	r3, r2
 8011b20:	d00e      	beq.n	8011b40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	4a15      	ldr	r2, [pc, #84]	; (8011b7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011b28:	4293      	cmp	r3, r2
 8011b2a:	d009      	beq.n	8011b40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	4a16      	ldr	r2, [pc, #88]	; (8011b8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011b32:	4293      	cmp	r3, r2
 8011b34:	d004      	beq.n	8011b40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	4a15      	ldr	r2, [pc, #84]	; (8011b90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011b3c:	4293      	cmp	r3, r2
 8011b3e:	d10c      	bne.n	8011b5a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011b40:	68bb      	ldr	r3, [r7, #8]
 8011b42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011b46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011b48:	683b      	ldr	r3, [r7, #0]
 8011b4a:	689b      	ldr	r3, [r3, #8]
 8011b4c:	68ba      	ldr	r2, [r7, #8]
 8011b4e:	4313      	orrs	r3, r2
 8011b50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	68ba      	ldr	r2, [r7, #8]
 8011b58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	2201      	movs	r2, #1
 8011b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	2200      	movs	r2, #0
 8011b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011b6a:	2300      	movs	r3, #0
}
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	3714      	adds	r7, #20
 8011b70:	46bd      	mov	sp, r7
 8011b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b76:	4770      	bx	lr
 8011b78:	40010000 	.word	0x40010000
 8011b7c:	40010400 	.word	0x40010400
 8011b80:	40000400 	.word	0x40000400
 8011b84:	40000800 	.word	0x40000800
 8011b88:	40000c00 	.word	0x40000c00
 8011b8c:	40014000 	.word	0x40014000
 8011b90:	40001800 	.word	0x40001800

08011b94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011b94:	b480      	push	{r7}
 8011b96:	b083      	sub	sp, #12
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011b9c:	bf00      	nop
 8011b9e:	370c      	adds	r7, #12
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba6:	4770      	bx	lr

08011ba8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011ba8:	b480      	push	{r7}
 8011baa:	b083      	sub	sp, #12
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011bb0:	bf00      	nop
 8011bb2:	370c      	adds	r7, #12
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bba:	4770      	bx	lr

08011bbc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011bbc:	b480      	push	{r7}
 8011bbe:	b083      	sub	sp, #12
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011bc4:	bf00      	nop
 8011bc6:	370c      	adds	r7, #12
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bce:	4770      	bx	lr

08011bd0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8011bd0:	b480      	push	{r7}
 8011bd2:	b085      	sub	sp, #20
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
 8011bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8011bda:	2300      	movs	r3, #0
 8011bdc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8011bde:	2300      	movs	r3, #0
 8011be0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8011be2:	683b      	ldr	r3, [r7, #0]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	2b01      	cmp	r3, #1
 8011be8:	d027      	beq.n	8011c3a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8011bf0:	68fa      	ldr	r2, [r7, #12]
 8011bf2:	4b2f      	ldr	r3, [pc, #188]	; (8011cb0 <FMC_SDRAM_Init+0xe0>)
 8011bf4:	4013      	ands	r3, r2
 8011bf6:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011bf8:	683b      	ldr	r3, [r7, #0]
 8011bfa:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8011bfc:	683b      	ldr	r3, [r7, #0]
 8011bfe:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011c00:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8011c02:	683b      	ldr	r3, [r7, #0]
 8011c04:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8011c06:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8011c08:	683b      	ldr	r3, [r7, #0]
 8011c0a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8011c0c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8011c0e:	683b      	ldr	r3, [r7, #0]
 8011c10:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8011c12:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8011c14:	683b      	ldr	r3, [r7, #0]
 8011c16:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8011c18:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8011c1a:	683b      	ldr	r3, [r7, #0]
 8011c1c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8011c1e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8011c20:	683b      	ldr	r3, [r7, #0]
 8011c22:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8011c24:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8011c26:	683b      	ldr	r3, [r7, #0]
 8011c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8011c2a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011c2c:	68fa      	ldr	r2, [r7, #12]
 8011c2e:	4313      	orrs	r3, r2
 8011c30:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	68fa      	ldr	r2, [r7, #12]
 8011c36:	601a      	str	r2, [r3, #0]
 8011c38:	e032      	b.n	8011ca0 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011c46:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8011c48:	683b      	ldr	r3, [r7, #0]
 8011c4a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8011c4c:	683b      	ldr	r3, [r7, #0]
 8011c4e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8011c50:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8011c52:	683b      	ldr	r3, [r7, #0]
 8011c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8011c56:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8011c58:	68fa      	ldr	r2, [r7, #12]
 8011c5a:	4313      	orrs	r3, r2
 8011c5c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	685b      	ldr	r3, [r3, #4]
 8011c62:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8011c64:	68ba      	ldr	r2, [r7, #8]
 8011c66:	4b12      	ldr	r3, [pc, #72]	; (8011cb0 <FMC_SDRAM_Init+0xe0>)
 8011c68:	4013      	ands	r3, r2
 8011c6a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011c6c:	683b      	ldr	r3, [r7, #0]
 8011c6e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8011c70:	683b      	ldr	r3, [r7, #0]
 8011c72:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011c74:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8011c76:	683b      	ldr	r3, [r7, #0]
 8011c78:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8011c7a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8011c7c:	683b      	ldr	r3, [r7, #0]
 8011c7e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8011c80:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8011c82:	683b      	ldr	r3, [r7, #0]
 8011c84:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8011c86:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8011c88:	683b      	ldr	r3, [r7, #0]
 8011c8a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8011c8c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011c8e:	68ba      	ldr	r2, [r7, #8]
 8011c90:	4313      	orrs	r3, r2
 8011c92:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	68fa      	ldr	r2, [r7, #12]
 8011c98:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	68ba      	ldr	r2, [r7, #8]
 8011c9e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8011ca0:	2300      	movs	r3, #0
}
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	3714      	adds	r7, #20
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cac:	4770      	bx	lr
 8011cae:	bf00      	nop
 8011cb0:	ffff8000 	.word	0xffff8000

08011cb4 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8011cb4:	b480      	push	{r7}
 8011cb6:	b087      	sub	sp, #28
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	60f8      	str	r0, [r7, #12]
 8011cbc:	60b9      	str	r1, [r7, #8]
 8011cbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	2b01      	cmp	r3, #1
 8011ccc:	d02e      	beq.n	8011d2c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	689b      	ldr	r3, [r3, #8]
 8011cd2:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8011cd4:	697b      	ldr	r3, [r7, #20]
 8011cd6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011cda:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8011cdc:	68bb      	ldr	r3, [r7, #8]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8011ce2:	68bb      	ldr	r3, [r7, #8]
 8011ce4:	685b      	ldr	r3, [r3, #4]
 8011ce6:	3b01      	subs	r3, #1
 8011ce8:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8011cea:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8011cec:	68bb      	ldr	r3, [r7, #8]
 8011cee:	689b      	ldr	r3, [r3, #8]
 8011cf0:	3b01      	subs	r3, #1
 8011cf2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8011cf4:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8011cf6:	68bb      	ldr	r3, [r7, #8]
 8011cf8:	68db      	ldr	r3, [r3, #12]
 8011cfa:	3b01      	subs	r3, #1
 8011cfc:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8011cfe:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8011d00:	68bb      	ldr	r3, [r7, #8]
 8011d02:	691b      	ldr	r3, [r3, #16]
 8011d04:	3b01      	subs	r3, #1
 8011d06:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8011d08:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8011d0a:	68bb      	ldr	r3, [r7, #8]
 8011d0c:	695b      	ldr	r3, [r3, #20]
 8011d0e:	3b01      	subs	r3, #1
 8011d10:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8011d12:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8011d14:	68bb      	ldr	r3, [r7, #8]
 8011d16:	699b      	ldr	r3, [r3, #24]
 8011d18:	3b01      	subs	r3, #1
 8011d1a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8011d1c:	4313      	orrs	r3, r2
 8011d1e:	697a      	ldr	r2, [r7, #20]
 8011d20:	4313      	orrs	r3, r2
 8011d22:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	697a      	ldr	r2, [r7, #20]
 8011d28:	609a      	str	r2, [r3, #8]
 8011d2a:	e039      	b.n	8011da0 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	689b      	ldr	r3, [r3, #8]
 8011d30:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8011d32:	697a      	ldr	r2, [r7, #20]
 8011d34:	4b1e      	ldr	r3, [pc, #120]	; (8011db0 <FMC_SDRAM_Timing_Init+0xfc>)
 8011d36:	4013      	ands	r3, r2
 8011d38:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8011d3a:	68bb      	ldr	r3, [r7, #8]
 8011d3c:	68db      	ldr	r3, [r3, #12]
 8011d3e:	3b01      	subs	r3, #1
 8011d40:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8011d42:	68bb      	ldr	r3, [r7, #8]
 8011d44:	695b      	ldr	r3, [r3, #20]
 8011d46:	3b01      	subs	r3, #1
 8011d48:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8011d4a:	4313      	orrs	r3, r2
 8011d4c:	697a      	ldr	r2, [r7, #20]
 8011d4e:	4313      	orrs	r3, r2
 8011d50:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	68db      	ldr	r3, [r3, #12]
 8011d56:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8011d58:	693b      	ldr	r3, [r7, #16]
 8011d5a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011d5e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8011d60:	68bb      	ldr	r3, [r7, #8]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8011d66:	68bb      	ldr	r3, [r7, #8]
 8011d68:	685b      	ldr	r3, [r3, #4]
 8011d6a:	3b01      	subs	r3, #1
 8011d6c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8011d6e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8011d70:	68bb      	ldr	r3, [r7, #8]
 8011d72:	689b      	ldr	r3, [r3, #8]
 8011d74:	3b01      	subs	r3, #1
 8011d76:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8011d78:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8011d7a:	68bb      	ldr	r3, [r7, #8]
 8011d7c:	691b      	ldr	r3, [r3, #16]
 8011d7e:	3b01      	subs	r3, #1
 8011d80:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8011d82:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8011d84:	68bb      	ldr	r3, [r7, #8]
 8011d86:	699b      	ldr	r3, [r3, #24]
 8011d88:	3b01      	subs	r3, #1
 8011d8a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8011d8c:	4313      	orrs	r3, r2
 8011d8e:	693a      	ldr	r2, [r7, #16]
 8011d90:	4313      	orrs	r3, r2
 8011d92:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	697a      	ldr	r2, [r7, #20]
 8011d98:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	693a      	ldr	r2, [r7, #16]
 8011d9e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8011da0:	2300      	movs	r3, #0
}
 8011da2:	4618      	mov	r0, r3
 8011da4:	371c      	adds	r7, #28
 8011da6:	46bd      	mov	sp, r7
 8011da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dac:	4770      	bx	lr
 8011dae:	bf00      	nop
 8011db0:	ff0f0fff 	.word	0xff0f0fff

08011db4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 8011db4:	b480      	push	{r7}
 8011db6:	b085      	sub	sp, #20
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	60f8      	str	r0, [r7, #12]
 8011dbc:	60b9      	str	r1, [r7, #8]
 8011dbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	691a      	ldr	r2, [r3, #16]
 8011dc4:	4b0c      	ldr	r3, [pc, #48]	; (8011df8 <FMC_SDRAM_SendCommand+0x44>)
 8011dc6:	4013      	ands	r3, r2
 8011dc8:	68ba      	ldr	r2, [r7, #8]
 8011dca:	6811      	ldr	r1, [r2, #0]
 8011dcc:	68ba      	ldr	r2, [r7, #8]
 8011dce:	6852      	ldr	r2, [r2, #4]
 8011dd0:	4311      	orrs	r1, r2
 8011dd2:	68ba      	ldr	r2, [r7, #8]
 8011dd4:	6892      	ldr	r2, [r2, #8]
 8011dd6:	3a01      	subs	r2, #1
 8011dd8:	0152      	lsls	r2, r2, #5
 8011dda:	4311      	orrs	r1, r2
 8011ddc:	68ba      	ldr	r2, [r7, #8]
 8011dde:	68d2      	ldr	r2, [r2, #12]
 8011de0:	0252      	lsls	r2, r2, #9
 8011de2:	430a      	orrs	r2, r1
 8011de4:	431a      	orrs	r2, r3
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 8011dea:	2300      	movs	r3, #0
}
 8011dec:	4618      	mov	r0, r3
 8011dee:	3714      	adds	r7, #20
 8011df0:	46bd      	mov	sp, r7
 8011df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df6:	4770      	bx	lr
 8011df8:	ffc00000 	.word	0xffc00000

08011dfc <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8011dfc:	b480      	push	{r7}
 8011dfe:	b083      	sub	sp, #12
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	6078      	str	r0, [r7, #4]
 8011e04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	695a      	ldr	r2, [r3, #20]
 8011e0a:	683b      	ldr	r3, [r7, #0]
 8011e0c:	005b      	lsls	r3, r3, #1
 8011e0e:	431a      	orrs	r2, r3
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8011e14:	2300      	movs	r3, #0
}
 8011e16:	4618      	mov	r0, r3
 8011e18:	370c      	adds	r7, #12
 8011e1a:	46bd      	mov	sp, r7
 8011e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e20:	4770      	bx	lr

08011e22 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8011e22:	b480      	push	{r7}
 8011e24:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8011e26:	bf00      	nop
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2e:	4770      	bx	lr

08011e30 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011e30:	b480      	push	{r7}
 8011e32:	b085      	sub	sp, #20
 8011e34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011e36:	f3ef 8305 	mrs	r3, IPSR
 8011e3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8011e3c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d10f      	bne.n	8011e62 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011e42:	f3ef 8310 	mrs	r3, PRIMASK
 8011e46:	607b      	str	r3, [r7, #4]
  return(result);
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d105      	bne.n	8011e5a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011e4e:	f3ef 8311 	mrs	r3, BASEPRI
 8011e52:	603b      	str	r3, [r7, #0]
  return(result);
 8011e54:	683b      	ldr	r3, [r7, #0]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d007      	beq.n	8011e6a <osKernelInitialize+0x3a>
 8011e5a:	4b0e      	ldr	r3, [pc, #56]	; (8011e94 <osKernelInitialize+0x64>)
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	2b02      	cmp	r3, #2
 8011e60:	d103      	bne.n	8011e6a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8011e62:	f06f 0305 	mvn.w	r3, #5
 8011e66:	60fb      	str	r3, [r7, #12]
 8011e68:	e00c      	b.n	8011e84 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8011e6a:	4b0a      	ldr	r3, [pc, #40]	; (8011e94 <osKernelInitialize+0x64>)
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d105      	bne.n	8011e7e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8011e72:	4b08      	ldr	r3, [pc, #32]	; (8011e94 <osKernelInitialize+0x64>)
 8011e74:	2201      	movs	r2, #1
 8011e76:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011e78:	2300      	movs	r3, #0
 8011e7a:	60fb      	str	r3, [r7, #12]
 8011e7c:	e002      	b.n	8011e84 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8011e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8011e82:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8011e84:	68fb      	ldr	r3, [r7, #12]
}
 8011e86:	4618      	mov	r0, r3
 8011e88:	3714      	adds	r7, #20
 8011e8a:	46bd      	mov	sp, r7
 8011e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e90:	4770      	bx	lr
 8011e92:	bf00      	nop
 8011e94:	20023a6c 	.word	0x20023a6c

08011e98 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8011e98:	b580      	push	{r7, lr}
 8011e9a:	b084      	sub	sp, #16
 8011e9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011e9e:	f3ef 8305 	mrs	r3, IPSR
 8011ea2:	60bb      	str	r3, [r7, #8]
  return(result);
 8011ea4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d10f      	bne.n	8011eca <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011eaa:	f3ef 8310 	mrs	r3, PRIMASK
 8011eae:	607b      	str	r3, [r7, #4]
  return(result);
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d105      	bne.n	8011ec2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011eb6:	f3ef 8311 	mrs	r3, BASEPRI
 8011eba:	603b      	str	r3, [r7, #0]
  return(result);
 8011ebc:	683b      	ldr	r3, [r7, #0]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d007      	beq.n	8011ed2 <osKernelStart+0x3a>
 8011ec2:	4b0f      	ldr	r3, [pc, #60]	; (8011f00 <osKernelStart+0x68>)
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	2b02      	cmp	r3, #2
 8011ec8:	d103      	bne.n	8011ed2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8011eca:	f06f 0305 	mvn.w	r3, #5
 8011ece:	60fb      	str	r3, [r7, #12]
 8011ed0:	e010      	b.n	8011ef4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8011ed2:	4b0b      	ldr	r3, [pc, #44]	; (8011f00 <osKernelStart+0x68>)
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	2b01      	cmp	r3, #1
 8011ed8:	d109      	bne.n	8011eee <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8011eda:	f7ff ffa2 	bl	8011e22 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8011ede:	4b08      	ldr	r3, [pc, #32]	; (8011f00 <osKernelStart+0x68>)
 8011ee0:	2202      	movs	r2, #2
 8011ee2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8011ee4:	f002 fb14 	bl	8014510 <vTaskStartScheduler>
      stat = osOK;
 8011ee8:	2300      	movs	r3, #0
 8011eea:	60fb      	str	r3, [r7, #12]
 8011eec:	e002      	b.n	8011ef4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8011eee:	f04f 33ff 	mov.w	r3, #4294967295
 8011ef2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8011ef4:	68fb      	ldr	r3, [r7, #12]
}
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	3710      	adds	r7, #16
 8011efa:	46bd      	mov	sp, r7
 8011efc:	bd80      	pop	{r7, pc}
 8011efe:	bf00      	nop
 8011f00:	20023a6c 	.word	0x20023a6c

08011f04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b090      	sub	sp, #64	; 0x40
 8011f08:	af04      	add	r7, sp, #16
 8011f0a:	60f8      	str	r0, [r7, #12]
 8011f0c:	60b9      	str	r1, [r7, #8]
 8011f0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8011f10:	2300      	movs	r3, #0
 8011f12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011f14:	f3ef 8305 	mrs	r3, IPSR
 8011f18:	61fb      	str	r3, [r7, #28]
  return(result);
 8011f1a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	f040 808f 	bne.w	8012040 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f22:	f3ef 8310 	mrs	r3, PRIMASK
 8011f26:	61bb      	str	r3, [r7, #24]
  return(result);
 8011f28:	69bb      	ldr	r3, [r7, #24]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d105      	bne.n	8011f3a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011f2e:	f3ef 8311 	mrs	r3, BASEPRI
 8011f32:	617b      	str	r3, [r7, #20]
  return(result);
 8011f34:	697b      	ldr	r3, [r7, #20]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d003      	beq.n	8011f42 <osThreadNew+0x3e>
 8011f3a:	4b44      	ldr	r3, [pc, #272]	; (801204c <osThreadNew+0x148>)
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	2b02      	cmp	r3, #2
 8011f40:	d07e      	beq.n	8012040 <osThreadNew+0x13c>
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d07b      	beq.n	8012040 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8011f48:	2380      	movs	r3, #128	; 0x80
 8011f4a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8011f4c:	2318      	movs	r3, #24
 8011f4e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8011f50:	2300      	movs	r3, #0
 8011f52:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8011f54:	f04f 33ff 	mov.w	r3, #4294967295
 8011f58:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d045      	beq.n	8011fec <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d002      	beq.n	8011f6e <osThreadNew+0x6a>
        name = attr->name;
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	699b      	ldr	r3, [r3, #24]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d002      	beq.n	8011f7c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	699b      	ldr	r3, [r3, #24]
 8011f7a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d008      	beq.n	8011f94 <osThreadNew+0x90>
 8011f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f84:	2b38      	cmp	r3, #56	; 0x38
 8011f86:	d805      	bhi.n	8011f94 <osThreadNew+0x90>
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	685b      	ldr	r3, [r3, #4]
 8011f8c:	f003 0301 	and.w	r3, r3, #1
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d001      	beq.n	8011f98 <osThreadNew+0x94>
        return (NULL);
 8011f94:	2300      	movs	r3, #0
 8011f96:	e054      	b.n	8012042 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	695b      	ldr	r3, [r3, #20]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d003      	beq.n	8011fa8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	695b      	ldr	r3, [r3, #20]
 8011fa4:	089b      	lsrs	r3, r3, #2
 8011fa6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	689b      	ldr	r3, [r3, #8]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d00e      	beq.n	8011fce <osThreadNew+0xca>
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	68db      	ldr	r3, [r3, #12]
 8011fb4:	2b5b      	cmp	r3, #91	; 0x5b
 8011fb6:	d90a      	bls.n	8011fce <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d006      	beq.n	8011fce <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	695b      	ldr	r3, [r3, #20]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d002      	beq.n	8011fce <osThreadNew+0xca>
        mem = 1;
 8011fc8:	2301      	movs	r3, #1
 8011fca:	623b      	str	r3, [r7, #32]
 8011fcc:	e010      	b.n	8011ff0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	689b      	ldr	r3, [r3, #8]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d10c      	bne.n	8011ff0 <osThreadNew+0xec>
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	68db      	ldr	r3, [r3, #12]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d108      	bne.n	8011ff0 <osThreadNew+0xec>
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	691b      	ldr	r3, [r3, #16]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d104      	bne.n	8011ff0 <osThreadNew+0xec>
          mem = 0;
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	623b      	str	r3, [r7, #32]
 8011fea:	e001      	b.n	8011ff0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8011fec:	2300      	movs	r3, #0
 8011fee:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8011ff0:	6a3b      	ldr	r3, [r7, #32]
 8011ff2:	2b01      	cmp	r3, #1
 8011ff4:	d110      	bne.n	8012018 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8011ffa:	687a      	ldr	r2, [r7, #4]
 8011ffc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011ffe:	9202      	str	r2, [sp, #8]
 8012000:	9301      	str	r3, [sp, #4]
 8012002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012004:	9300      	str	r3, [sp, #0]
 8012006:	68bb      	ldr	r3, [r7, #8]
 8012008:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801200a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801200c:	68f8      	ldr	r0, [r7, #12]
 801200e:	f002 f89f 	bl	8014150 <xTaskCreateStatic>
 8012012:	4603      	mov	r3, r0
 8012014:	613b      	str	r3, [r7, #16]
 8012016:	e013      	b.n	8012040 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8012018:	6a3b      	ldr	r3, [r7, #32]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d110      	bne.n	8012040 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801201e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012020:	b29a      	uxth	r2, r3
 8012022:	f107 0310 	add.w	r3, r7, #16
 8012026:	9301      	str	r3, [sp, #4]
 8012028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801202a:	9300      	str	r3, [sp, #0]
 801202c:	68bb      	ldr	r3, [r7, #8]
 801202e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012030:	68f8      	ldr	r0, [r7, #12]
 8012032:	f002 f8f0 	bl	8014216 <xTaskCreate>
 8012036:	4603      	mov	r3, r0
 8012038:	2b01      	cmp	r3, #1
 801203a:	d001      	beq.n	8012040 <osThreadNew+0x13c>
          hTask = NULL;
 801203c:	2300      	movs	r3, #0
 801203e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012040:	693b      	ldr	r3, [r7, #16]
}
 8012042:	4618      	mov	r0, r3
 8012044:	3730      	adds	r7, #48	; 0x30
 8012046:	46bd      	mov	sp, r7
 8012048:	bd80      	pop	{r7, pc}
 801204a:	bf00      	nop
 801204c:	20023a6c 	.word	0x20023a6c

08012050 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8012050:	b480      	push	{r7}
 8012052:	b085      	sub	sp, #20
 8012054:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012056:	f3ef 8305 	mrs	r3, IPSR
 801205a:	60bb      	str	r3, [r7, #8]
  return(result);
 801205c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801205e:	2b00      	cmp	r3, #0
 8012060:	d10f      	bne.n	8012082 <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012062:	f3ef 8310 	mrs	r3, PRIMASK
 8012066:	607b      	str	r3, [r7, #4]
  return(result);
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d105      	bne.n	801207a <osThreadYield+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801206e:	f3ef 8311 	mrs	r3, BASEPRI
 8012072:	603b      	str	r3, [r7, #0]
  return(result);
 8012074:	683b      	ldr	r3, [r7, #0]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d007      	beq.n	801208a <osThreadYield+0x3a>
 801207a:	4b0c      	ldr	r3, [pc, #48]	; (80120ac <osThreadYield+0x5c>)
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	2b02      	cmp	r3, #2
 8012080:	d103      	bne.n	801208a <osThreadYield+0x3a>
    stat = osErrorISR;
 8012082:	f06f 0305 	mvn.w	r3, #5
 8012086:	60fb      	str	r3, [r7, #12]
 8012088:	e009      	b.n	801209e <osThreadYield+0x4e>
  } else {
    stat = osOK;
 801208a:	2300      	movs	r3, #0
 801208c:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 801208e:	4b08      	ldr	r3, [pc, #32]	; (80120b0 <osThreadYield+0x60>)
 8012090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012094:	601a      	str	r2, [r3, #0]
 8012096:	f3bf 8f4f 	dsb	sy
 801209a:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 801209e:	68fb      	ldr	r3, [r7, #12]
}
 80120a0:	4618      	mov	r0, r3
 80120a2:	3714      	adds	r7, #20
 80120a4:	46bd      	mov	sp, r7
 80120a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120aa:	4770      	bx	lr
 80120ac:	20023a6c 	.word	0x20023a6c
 80120b0:	e000ed04 	.word	0xe000ed04

080120b4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b086      	sub	sp, #24
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80120bc:	f3ef 8305 	mrs	r3, IPSR
 80120c0:	613b      	str	r3, [r7, #16]
  return(result);
 80120c2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d10f      	bne.n	80120e8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80120c8:	f3ef 8310 	mrs	r3, PRIMASK
 80120cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d105      	bne.n	80120e0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80120d4:	f3ef 8311 	mrs	r3, BASEPRI
 80120d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80120da:	68bb      	ldr	r3, [r7, #8]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d007      	beq.n	80120f0 <osDelay+0x3c>
 80120e0:	4b0a      	ldr	r3, [pc, #40]	; (801210c <osDelay+0x58>)
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	2b02      	cmp	r3, #2
 80120e6:	d103      	bne.n	80120f0 <osDelay+0x3c>
    stat = osErrorISR;
 80120e8:	f06f 0305 	mvn.w	r3, #5
 80120ec:	617b      	str	r3, [r7, #20]
 80120ee:	e007      	b.n	8012100 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80120f0:	2300      	movs	r3, #0
 80120f2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d002      	beq.n	8012100 <osDelay+0x4c>
      vTaskDelay(ticks);
 80120fa:	6878      	ldr	r0, [r7, #4]
 80120fc:	f002 f9d2 	bl	80144a4 <vTaskDelay>
    }
  }

  return (stat);
 8012100:	697b      	ldr	r3, [r7, #20]
}
 8012102:	4618      	mov	r0, r3
 8012104:	3718      	adds	r7, #24
 8012106:	46bd      	mov	sp, r7
 8012108:	bd80      	pop	{r7, pc}
 801210a:	bf00      	nop
 801210c:	20023a6c 	.word	0x20023a6c

08012110 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8012110:	b580      	push	{r7, lr}
 8012112:	b08c      	sub	sp, #48	; 0x30
 8012114:	af02      	add	r7, sp, #8
 8012116:	60f8      	str	r0, [r7, #12]
 8012118:	60b9      	str	r1, [r7, #8]
 801211a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 801211c:	2300      	movs	r3, #0
 801211e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012120:	f3ef 8305 	mrs	r3, IPSR
 8012124:	61bb      	str	r3, [r7, #24]
  return(result);
 8012126:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8012128:	2b00      	cmp	r3, #0
 801212a:	f040 8086 	bne.w	801223a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801212e:	f3ef 8310 	mrs	r3, PRIMASK
 8012132:	617b      	str	r3, [r7, #20]
  return(result);
 8012134:	697b      	ldr	r3, [r7, #20]
 8012136:	2b00      	cmp	r3, #0
 8012138:	d105      	bne.n	8012146 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801213a:	f3ef 8311 	mrs	r3, BASEPRI
 801213e:	613b      	str	r3, [r7, #16]
  return(result);
 8012140:	693b      	ldr	r3, [r7, #16]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d003      	beq.n	801214e <osSemaphoreNew+0x3e>
 8012146:	4b3f      	ldr	r3, [pc, #252]	; (8012244 <osSemaphoreNew+0x134>)
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	2b02      	cmp	r3, #2
 801214c:	d075      	beq.n	801223a <osSemaphoreNew+0x12a>
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d072      	beq.n	801223a <osSemaphoreNew+0x12a>
 8012154:	68ba      	ldr	r2, [r7, #8]
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	429a      	cmp	r2, r3
 801215a:	d86e      	bhi.n	801223a <osSemaphoreNew+0x12a>
    mem = -1;
 801215c:	f04f 33ff 	mov.w	r3, #4294967295
 8012160:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d015      	beq.n	8012194 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	689b      	ldr	r3, [r3, #8]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d006      	beq.n	801217e <osSemaphoreNew+0x6e>
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	68db      	ldr	r3, [r3, #12]
 8012174:	2b4f      	cmp	r3, #79	; 0x4f
 8012176:	d902      	bls.n	801217e <osSemaphoreNew+0x6e>
        mem = 1;
 8012178:	2301      	movs	r3, #1
 801217a:	623b      	str	r3, [r7, #32]
 801217c:	e00c      	b.n	8012198 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	689b      	ldr	r3, [r3, #8]
 8012182:	2b00      	cmp	r3, #0
 8012184:	d108      	bne.n	8012198 <osSemaphoreNew+0x88>
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	68db      	ldr	r3, [r3, #12]
 801218a:	2b00      	cmp	r3, #0
 801218c:	d104      	bne.n	8012198 <osSemaphoreNew+0x88>
          mem = 0;
 801218e:	2300      	movs	r3, #0
 8012190:	623b      	str	r3, [r7, #32]
 8012192:	e001      	b.n	8012198 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8012194:	2300      	movs	r3, #0
 8012196:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8012198:	6a3b      	ldr	r3, [r7, #32]
 801219a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801219e:	d04c      	beq.n	801223a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	2b01      	cmp	r3, #1
 80121a4:	d128      	bne.n	80121f8 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80121a6:	6a3b      	ldr	r3, [r7, #32]
 80121a8:	2b01      	cmp	r3, #1
 80121aa:	d10a      	bne.n	80121c2 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	689b      	ldr	r3, [r3, #8]
 80121b0:	2203      	movs	r2, #3
 80121b2:	9200      	str	r2, [sp, #0]
 80121b4:	2200      	movs	r2, #0
 80121b6:	2100      	movs	r1, #0
 80121b8:	2001      	movs	r0, #1
 80121ba:	f000 ffdd 	bl	8013178 <xQueueGenericCreateStatic>
 80121be:	6278      	str	r0, [r7, #36]	; 0x24
 80121c0:	e005      	b.n	80121ce <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80121c2:	2203      	movs	r2, #3
 80121c4:	2100      	movs	r1, #0
 80121c6:	2001      	movs	r0, #1
 80121c8:	f001 f858 	bl	801327c <xQueueGenericCreate>
 80121cc:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80121ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d022      	beq.n	801221a <osSemaphoreNew+0x10a>
 80121d4:	68bb      	ldr	r3, [r7, #8]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d01f      	beq.n	801221a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80121da:	2300      	movs	r3, #0
 80121dc:	2200      	movs	r2, #0
 80121de:	2100      	movs	r1, #0
 80121e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80121e2:	f001 f923 	bl	801342c <xQueueGenericSend>
 80121e6:	4603      	mov	r3, r0
 80121e8:	2b01      	cmp	r3, #1
 80121ea:	d016      	beq.n	801221a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80121ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80121ee:	f001 fdd9 	bl	8013da4 <vQueueDelete>
            hSemaphore = NULL;
 80121f2:	2300      	movs	r3, #0
 80121f4:	627b      	str	r3, [r7, #36]	; 0x24
 80121f6:	e010      	b.n	801221a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80121f8:	6a3b      	ldr	r3, [r7, #32]
 80121fa:	2b01      	cmp	r3, #1
 80121fc:	d108      	bne.n	8012210 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	689b      	ldr	r3, [r3, #8]
 8012202:	461a      	mov	r2, r3
 8012204:	68b9      	ldr	r1, [r7, #8]
 8012206:	68f8      	ldr	r0, [r7, #12]
 8012208:	f001 f89d 	bl	8013346 <xQueueCreateCountingSemaphoreStatic>
 801220c:	6278      	str	r0, [r7, #36]	; 0x24
 801220e:	e004      	b.n	801221a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8012210:	68b9      	ldr	r1, [r7, #8]
 8012212:	68f8      	ldr	r0, [r7, #12]
 8012214:	f001 f8d2 	bl	80133bc <xQueueCreateCountingSemaphore>
 8012218:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 801221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801221c:	2b00      	cmp	r3, #0
 801221e:	d00c      	beq.n	801223a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d003      	beq.n	801222e <osSemaphoreNew+0x11e>
          name = attr->name;
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	61fb      	str	r3, [r7, #28]
 801222c:	e001      	b.n	8012232 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 801222e:	2300      	movs	r3, #0
 8012230:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8012232:	69f9      	ldr	r1, [r7, #28]
 8012234:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012236:	f001 ff03 	bl	8014040 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 801223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801223c:	4618      	mov	r0, r3
 801223e:	3728      	adds	r7, #40	; 0x28
 8012240:	46bd      	mov	sp, r7
 8012242:	bd80      	pop	{r7, pc}
 8012244:	20023a6c 	.word	0x20023a6c

08012248 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8012248:	b580      	push	{r7, lr}
 801224a:	b088      	sub	sp, #32
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
 8012250:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8012256:	2300      	movs	r3, #0
 8012258:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 801225a:	69bb      	ldr	r3, [r7, #24]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d103      	bne.n	8012268 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8012260:	f06f 0303 	mvn.w	r3, #3
 8012264:	61fb      	str	r3, [r7, #28]
 8012266:	e04b      	b.n	8012300 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012268:	f3ef 8305 	mrs	r3, IPSR
 801226c:	617b      	str	r3, [r7, #20]
  return(result);
 801226e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8012270:	2b00      	cmp	r3, #0
 8012272:	d10f      	bne.n	8012294 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012274:	f3ef 8310 	mrs	r3, PRIMASK
 8012278:	613b      	str	r3, [r7, #16]
  return(result);
 801227a:	693b      	ldr	r3, [r7, #16]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d105      	bne.n	801228c <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012280:	f3ef 8311 	mrs	r3, BASEPRI
 8012284:	60fb      	str	r3, [r7, #12]
  return(result);
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d026      	beq.n	80122da <osSemaphoreAcquire+0x92>
 801228c:	4b1f      	ldr	r3, [pc, #124]	; (801230c <osSemaphoreAcquire+0xc4>)
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	2b02      	cmp	r3, #2
 8012292:	d122      	bne.n	80122da <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8012294:	683b      	ldr	r3, [r7, #0]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d003      	beq.n	80122a2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 801229a:	f06f 0303 	mvn.w	r3, #3
 801229e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80122a0:	e02d      	b.n	80122fe <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80122a2:	2300      	movs	r3, #0
 80122a4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80122a6:	f107 0308 	add.w	r3, r7, #8
 80122aa:	461a      	mov	r2, r3
 80122ac:	2100      	movs	r1, #0
 80122ae:	69b8      	ldr	r0, [r7, #24]
 80122b0:	f001 fcf2 	bl	8013c98 <xQueueReceiveFromISR>
 80122b4:	4603      	mov	r3, r0
 80122b6:	2b01      	cmp	r3, #1
 80122b8:	d003      	beq.n	80122c2 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80122ba:	f06f 0302 	mvn.w	r3, #2
 80122be:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80122c0:	e01d      	b.n	80122fe <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80122c2:	68bb      	ldr	r3, [r7, #8]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d01a      	beq.n	80122fe <osSemaphoreAcquire+0xb6>
 80122c8:	4b11      	ldr	r3, [pc, #68]	; (8012310 <osSemaphoreAcquire+0xc8>)
 80122ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122ce:	601a      	str	r2, [r3, #0]
 80122d0:	f3bf 8f4f 	dsb	sy
 80122d4:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80122d8:	e011      	b.n	80122fe <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80122da:	6839      	ldr	r1, [r7, #0]
 80122dc:	69b8      	ldr	r0, [r7, #24]
 80122de:	f001 fbc7 	bl	8013a70 <xQueueSemaphoreTake>
 80122e2:	4603      	mov	r3, r0
 80122e4:	2b01      	cmp	r3, #1
 80122e6:	d00b      	beq.n	8012300 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80122e8:	683b      	ldr	r3, [r7, #0]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d003      	beq.n	80122f6 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80122ee:	f06f 0301 	mvn.w	r3, #1
 80122f2:	61fb      	str	r3, [r7, #28]
 80122f4:	e004      	b.n	8012300 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80122f6:	f06f 0302 	mvn.w	r3, #2
 80122fa:	61fb      	str	r3, [r7, #28]
 80122fc:	e000      	b.n	8012300 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80122fe:	bf00      	nop
      }
    }
  }

  return (stat);
 8012300:	69fb      	ldr	r3, [r7, #28]
}
 8012302:	4618      	mov	r0, r3
 8012304:	3720      	adds	r7, #32
 8012306:	46bd      	mov	sp, r7
 8012308:	bd80      	pop	{r7, pc}
 801230a:	bf00      	nop
 801230c:	20023a6c 	.word	0x20023a6c
 8012310:	e000ed04 	.word	0xe000ed04

08012314 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8012314:	b580      	push	{r7, lr}
 8012316:	b088      	sub	sp, #32
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8012320:	2300      	movs	r3, #0
 8012322:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8012324:	69bb      	ldr	r3, [r7, #24]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d103      	bne.n	8012332 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801232a:	f06f 0303 	mvn.w	r3, #3
 801232e:	61fb      	str	r3, [r7, #28]
 8012330:	e03e      	b.n	80123b0 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012332:	f3ef 8305 	mrs	r3, IPSR
 8012336:	617b      	str	r3, [r7, #20]
  return(result);
 8012338:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 801233a:	2b00      	cmp	r3, #0
 801233c:	d10f      	bne.n	801235e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801233e:	f3ef 8310 	mrs	r3, PRIMASK
 8012342:	613b      	str	r3, [r7, #16]
  return(result);
 8012344:	693b      	ldr	r3, [r7, #16]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d105      	bne.n	8012356 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801234a:	f3ef 8311 	mrs	r3, BASEPRI
 801234e:	60fb      	str	r3, [r7, #12]
  return(result);
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	2b00      	cmp	r3, #0
 8012354:	d01e      	beq.n	8012394 <osSemaphoreRelease+0x80>
 8012356:	4b19      	ldr	r3, [pc, #100]	; (80123bc <osSemaphoreRelease+0xa8>)
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	2b02      	cmp	r3, #2
 801235c:	d11a      	bne.n	8012394 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 801235e:	2300      	movs	r3, #0
 8012360:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8012362:	f107 0308 	add.w	r3, r7, #8
 8012366:	4619      	mov	r1, r3
 8012368:	69b8      	ldr	r0, [r7, #24]
 801236a:	f001 fa05 	bl	8013778 <xQueueGiveFromISR>
 801236e:	4603      	mov	r3, r0
 8012370:	2b01      	cmp	r3, #1
 8012372:	d003      	beq.n	801237c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8012374:	f06f 0302 	mvn.w	r3, #2
 8012378:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801237a:	e018      	b.n	80123ae <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 801237c:	68bb      	ldr	r3, [r7, #8]
 801237e:	2b00      	cmp	r3, #0
 8012380:	d015      	beq.n	80123ae <osSemaphoreRelease+0x9a>
 8012382:	4b0f      	ldr	r3, [pc, #60]	; (80123c0 <osSemaphoreRelease+0xac>)
 8012384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012388:	601a      	str	r2, [r3, #0]
 801238a:	f3bf 8f4f 	dsb	sy
 801238e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8012392:	e00c      	b.n	80123ae <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8012394:	2300      	movs	r3, #0
 8012396:	2200      	movs	r2, #0
 8012398:	2100      	movs	r1, #0
 801239a:	69b8      	ldr	r0, [r7, #24]
 801239c:	f001 f846 	bl	801342c <xQueueGenericSend>
 80123a0:	4603      	mov	r3, r0
 80123a2:	2b01      	cmp	r3, #1
 80123a4:	d004      	beq.n	80123b0 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80123a6:	f06f 0302 	mvn.w	r3, #2
 80123aa:	61fb      	str	r3, [r7, #28]
 80123ac:	e000      	b.n	80123b0 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80123ae:	bf00      	nop
    }
  }

  return (stat);
 80123b0:	69fb      	ldr	r3, [r7, #28]
}
 80123b2:	4618      	mov	r0, r3
 80123b4:	3720      	adds	r7, #32
 80123b6:	46bd      	mov	sp, r7
 80123b8:	bd80      	pop	{r7, pc}
 80123ba:	bf00      	nop
 80123bc:	20023a6c 	.word	0x20023a6c
 80123c0:	e000ed04 	.word	0xe000ed04

080123c4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80123c4:	b580      	push	{r7, lr}
 80123c6:	b08c      	sub	sp, #48	; 0x30
 80123c8:	af02      	add	r7, sp, #8
 80123ca:	60f8      	str	r0, [r7, #12]
 80123cc:	60b9      	str	r1, [r7, #8]
 80123ce:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80123d0:	2300      	movs	r3, #0
 80123d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80123d4:	f3ef 8305 	mrs	r3, IPSR
 80123d8:	61bb      	str	r3, [r7, #24]
  return(result);
 80123da:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d16f      	bne.n	80124c0 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80123e0:	f3ef 8310 	mrs	r3, PRIMASK
 80123e4:	617b      	str	r3, [r7, #20]
  return(result);
 80123e6:	697b      	ldr	r3, [r7, #20]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d105      	bne.n	80123f8 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80123ec:	f3ef 8311 	mrs	r3, BASEPRI
 80123f0:	613b      	str	r3, [r7, #16]
  return(result);
 80123f2:	693b      	ldr	r3, [r7, #16]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d003      	beq.n	8012400 <osMessageQueueNew+0x3c>
 80123f8:	4b34      	ldr	r3, [pc, #208]	; (80124cc <osMessageQueueNew+0x108>)
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	2b02      	cmp	r3, #2
 80123fe:	d05f      	beq.n	80124c0 <osMessageQueueNew+0xfc>
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d05c      	beq.n	80124c0 <osMessageQueueNew+0xfc>
 8012406:	68bb      	ldr	r3, [r7, #8]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d059      	beq.n	80124c0 <osMessageQueueNew+0xfc>
    mem = -1;
 801240c:	f04f 33ff 	mov.w	r3, #4294967295
 8012410:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d029      	beq.n	801246c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	689b      	ldr	r3, [r3, #8]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d012      	beq.n	8012446 <osMessageQueueNew+0x82>
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	68db      	ldr	r3, [r3, #12]
 8012424:	2b4f      	cmp	r3, #79	; 0x4f
 8012426:	d90e      	bls.n	8012446 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801242c:	2b00      	cmp	r3, #0
 801242e:	d00a      	beq.n	8012446 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	695a      	ldr	r2, [r3, #20]
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	68b9      	ldr	r1, [r7, #8]
 8012438:	fb01 f303 	mul.w	r3, r1, r3
 801243c:	429a      	cmp	r2, r3
 801243e:	d302      	bcc.n	8012446 <osMessageQueueNew+0x82>
        mem = 1;
 8012440:	2301      	movs	r3, #1
 8012442:	623b      	str	r3, [r7, #32]
 8012444:	e014      	b.n	8012470 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	689b      	ldr	r3, [r3, #8]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d110      	bne.n	8012470 <osMessageQueueNew+0xac>
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	68db      	ldr	r3, [r3, #12]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d10c      	bne.n	8012470 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801245a:	2b00      	cmp	r3, #0
 801245c:	d108      	bne.n	8012470 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	695b      	ldr	r3, [r3, #20]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d104      	bne.n	8012470 <osMessageQueueNew+0xac>
          mem = 0;
 8012466:	2300      	movs	r3, #0
 8012468:	623b      	str	r3, [r7, #32]
 801246a:	e001      	b.n	8012470 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 801246c:	2300      	movs	r3, #0
 801246e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8012470:	6a3b      	ldr	r3, [r7, #32]
 8012472:	2b01      	cmp	r3, #1
 8012474:	d10b      	bne.n	801248e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	691a      	ldr	r2, [r3, #16]
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	689b      	ldr	r3, [r3, #8]
 801247e:	2100      	movs	r1, #0
 8012480:	9100      	str	r1, [sp, #0]
 8012482:	68b9      	ldr	r1, [r7, #8]
 8012484:	68f8      	ldr	r0, [r7, #12]
 8012486:	f000 fe77 	bl	8013178 <xQueueGenericCreateStatic>
 801248a:	6278      	str	r0, [r7, #36]	; 0x24
 801248c:	e008      	b.n	80124a0 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 801248e:	6a3b      	ldr	r3, [r7, #32]
 8012490:	2b00      	cmp	r3, #0
 8012492:	d105      	bne.n	80124a0 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8012494:	2200      	movs	r2, #0
 8012496:	68b9      	ldr	r1, [r7, #8]
 8012498:	68f8      	ldr	r0, [r7, #12]
 801249a:	f000 feef 	bl	801327c <xQueueGenericCreate>
 801249e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80124a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d00c      	beq.n	80124c0 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d003      	beq.n	80124b4 <osMessageQueueNew+0xf0>
        name = attr->name;
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	61fb      	str	r3, [r7, #28]
 80124b2:	e001      	b.n	80124b8 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80124b4:	2300      	movs	r3, #0
 80124b6:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80124b8:	69f9      	ldr	r1, [r7, #28]
 80124ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80124bc:	f001 fdc0 	bl	8014040 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80124c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80124c2:	4618      	mov	r0, r3
 80124c4:	3728      	adds	r7, #40	; 0x28
 80124c6:	46bd      	mov	sp, r7
 80124c8:	bd80      	pop	{r7, pc}
 80124ca:	bf00      	nop
 80124cc:	20023a6c 	.word	0x20023a6c

080124d0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b08a      	sub	sp, #40	; 0x28
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	60f8      	str	r0, [r7, #12]
 80124d8:	60b9      	str	r1, [r7, #8]
 80124da:	603b      	str	r3, [r7, #0]
 80124dc:	4613      	mov	r3, r2
 80124de:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80124e4:	2300      	movs	r3, #0
 80124e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80124e8:	f3ef 8305 	mrs	r3, IPSR
 80124ec:	61fb      	str	r3, [r7, #28]
  return(result);
 80124ee:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d10f      	bne.n	8012514 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80124f4:	f3ef 8310 	mrs	r3, PRIMASK
 80124f8:	61bb      	str	r3, [r7, #24]
  return(result);
 80124fa:	69bb      	ldr	r3, [r7, #24]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d105      	bne.n	801250c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012500:	f3ef 8311 	mrs	r3, BASEPRI
 8012504:	617b      	str	r3, [r7, #20]
  return(result);
 8012506:	697b      	ldr	r3, [r7, #20]
 8012508:	2b00      	cmp	r3, #0
 801250a:	d02c      	beq.n	8012566 <osMessageQueuePut+0x96>
 801250c:	4b28      	ldr	r3, [pc, #160]	; (80125b0 <osMessageQueuePut+0xe0>)
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	2b02      	cmp	r3, #2
 8012512:	d128      	bne.n	8012566 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012514:	6a3b      	ldr	r3, [r7, #32]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d005      	beq.n	8012526 <osMessageQueuePut+0x56>
 801251a:	68bb      	ldr	r3, [r7, #8]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d002      	beq.n	8012526 <osMessageQueuePut+0x56>
 8012520:	683b      	ldr	r3, [r7, #0]
 8012522:	2b00      	cmp	r3, #0
 8012524:	d003      	beq.n	801252e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8012526:	f06f 0303 	mvn.w	r3, #3
 801252a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801252c:	e039      	b.n	80125a2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 801252e:	2300      	movs	r3, #0
 8012530:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8012532:	f107 0210 	add.w	r2, r7, #16
 8012536:	2300      	movs	r3, #0
 8012538:	68b9      	ldr	r1, [r7, #8]
 801253a:	6a38      	ldr	r0, [r7, #32]
 801253c:	f001 f87c 	bl	8013638 <xQueueGenericSendFromISR>
 8012540:	4603      	mov	r3, r0
 8012542:	2b01      	cmp	r3, #1
 8012544:	d003      	beq.n	801254e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8012546:	f06f 0302 	mvn.w	r3, #2
 801254a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801254c:	e029      	b.n	80125a2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 801254e:	693b      	ldr	r3, [r7, #16]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d026      	beq.n	80125a2 <osMessageQueuePut+0xd2>
 8012554:	4b17      	ldr	r3, [pc, #92]	; (80125b4 <osMessageQueuePut+0xe4>)
 8012556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801255a:	601a      	str	r2, [r3, #0]
 801255c:	f3bf 8f4f 	dsb	sy
 8012560:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012564:	e01d      	b.n	80125a2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012566:	6a3b      	ldr	r3, [r7, #32]
 8012568:	2b00      	cmp	r3, #0
 801256a:	d002      	beq.n	8012572 <osMessageQueuePut+0xa2>
 801256c:	68bb      	ldr	r3, [r7, #8]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d103      	bne.n	801257a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8012572:	f06f 0303 	mvn.w	r3, #3
 8012576:	627b      	str	r3, [r7, #36]	; 0x24
 8012578:	e014      	b.n	80125a4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801257a:	2300      	movs	r3, #0
 801257c:	683a      	ldr	r2, [r7, #0]
 801257e:	68b9      	ldr	r1, [r7, #8]
 8012580:	6a38      	ldr	r0, [r7, #32]
 8012582:	f000 ff53 	bl	801342c <xQueueGenericSend>
 8012586:	4603      	mov	r3, r0
 8012588:	2b01      	cmp	r3, #1
 801258a:	d00b      	beq.n	80125a4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 801258c:	683b      	ldr	r3, [r7, #0]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d003      	beq.n	801259a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8012592:	f06f 0301 	mvn.w	r3, #1
 8012596:	627b      	str	r3, [r7, #36]	; 0x24
 8012598:	e004      	b.n	80125a4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 801259a:	f06f 0302 	mvn.w	r3, #2
 801259e:	627b      	str	r3, [r7, #36]	; 0x24
 80125a0:	e000      	b.n	80125a4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80125a2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80125a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80125a6:	4618      	mov	r0, r3
 80125a8:	3728      	adds	r7, #40	; 0x28
 80125aa:	46bd      	mov	sp, r7
 80125ac:	bd80      	pop	{r7, pc}
 80125ae:	bf00      	nop
 80125b0:	20023a6c 	.word	0x20023a6c
 80125b4:	e000ed04 	.word	0xe000ed04

080125b8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b08a      	sub	sp, #40	; 0x28
 80125bc:	af00      	add	r7, sp, #0
 80125be:	60f8      	str	r0, [r7, #12]
 80125c0:	60b9      	str	r1, [r7, #8]
 80125c2:	607a      	str	r2, [r7, #4]
 80125c4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80125ca:	2300      	movs	r3, #0
 80125cc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80125ce:	f3ef 8305 	mrs	r3, IPSR
 80125d2:	61fb      	str	r3, [r7, #28]
  return(result);
 80125d4:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d10f      	bne.n	80125fa <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80125da:	f3ef 8310 	mrs	r3, PRIMASK
 80125de:	61bb      	str	r3, [r7, #24]
  return(result);
 80125e0:	69bb      	ldr	r3, [r7, #24]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d105      	bne.n	80125f2 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80125e6:	f3ef 8311 	mrs	r3, BASEPRI
 80125ea:	617b      	str	r3, [r7, #20]
  return(result);
 80125ec:	697b      	ldr	r3, [r7, #20]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d02c      	beq.n	801264c <osMessageQueueGet+0x94>
 80125f2:	4b28      	ldr	r3, [pc, #160]	; (8012694 <osMessageQueueGet+0xdc>)
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	2b02      	cmp	r3, #2
 80125f8:	d128      	bne.n	801264c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80125fa:	6a3b      	ldr	r3, [r7, #32]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d005      	beq.n	801260c <osMessageQueueGet+0x54>
 8012600:	68bb      	ldr	r3, [r7, #8]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d002      	beq.n	801260c <osMessageQueueGet+0x54>
 8012606:	683b      	ldr	r3, [r7, #0]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d003      	beq.n	8012614 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 801260c:	f06f 0303 	mvn.w	r3, #3
 8012610:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012612:	e038      	b.n	8012686 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8012614:	2300      	movs	r3, #0
 8012616:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8012618:	f107 0310 	add.w	r3, r7, #16
 801261c:	461a      	mov	r2, r3
 801261e:	68b9      	ldr	r1, [r7, #8]
 8012620:	6a38      	ldr	r0, [r7, #32]
 8012622:	f001 fb39 	bl	8013c98 <xQueueReceiveFromISR>
 8012626:	4603      	mov	r3, r0
 8012628:	2b01      	cmp	r3, #1
 801262a:	d003      	beq.n	8012634 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 801262c:	f06f 0302 	mvn.w	r3, #2
 8012630:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012632:	e028      	b.n	8012686 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8012634:	693b      	ldr	r3, [r7, #16]
 8012636:	2b00      	cmp	r3, #0
 8012638:	d025      	beq.n	8012686 <osMessageQueueGet+0xce>
 801263a:	4b17      	ldr	r3, [pc, #92]	; (8012698 <osMessageQueueGet+0xe0>)
 801263c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012640:	601a      	str	r2, [r3, #0]
 8012642:	f3bf 8f4f 	dsb	sy
 8012646:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801264a:	e01c      	b.n	8012686 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801264c:	6a3b      	ldr	r3, [r7, #32]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d002      	beq.n	8012658 <osMessageQueueGet+0xa0>
 8012652:	68bb      	ldr	r3, [r7, #8]
 8012654:	2b00      	cmp	r3, #0
 8012656:	d103      	bne.n	8012660 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8012658:	f06f 0303 	mvn.w	r3, #3
 801265c:	627b      	str	r3, [r7, #36]	; 0x24
 801265e:	e013      	b.n	8012688 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012660:	683a      	ldr	r2, [r7, #0]
 8012662:	68b9      	ldr	r1, [r7, #8]
 8012664:	6a38      	ldr	r0, [r7, #32]
 8012666:	f001 f91d 	bl	80138a4 <xQueueReceive>
 801266a:	4603      	mov	r3, r0
 801266c:	2b01      	cmp	r3, #1
 801266e:	d00b      	beq.n	8012688 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8012670:	683b      	ldr	r3, [r7, #0]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d003      	beq.n	801267e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8012676:	f06f 0301 	mvn.w	r3, #1
 801267a:	627b      	str	r3, [r7, #36]	; 0x24
 801267c:	e004      	b.n	8012688 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 801267e:	f06f 0302 	mvn.w	r3, #2
 8012682:	627b      	str	r3, [r7, #36]	; 0x24
 8012684:	e000      	b.n	8012688 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012686:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8012688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801268a:	4618      	mov	r0, r3
 801268c:	3728      	adds	r7, #40	; 0x28
 801268e:	46bd      	mov	sp, r7
 8012690:	bd80      	pop	{r7, pc}
 8012692:	bf00      	nop
 8012694:	20023a6c 	.word	0x20023a6c
 8012698:	e000ed04 	.word	0xe000ed04

0801269c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801269c:	b480      	push	{r7}
 801269e:	b085      	sub	sp, #20
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	60f8      	str	r0, [r7, #12]
 80126a4:	60b9      	str	r1, [r7, #8]
 80126a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	4a07      	ldr	r2, [pc, #28]	; (80126c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80126ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80126ae:	68bb      	ldr	r3, [r7, #8]
 80126b0:	4a06      	ldr	r2, [pc, #24]	; (80126cc <vApplicationGetIdleTaskMemory+0x30>)
 80126b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	2280      	movs	r2, #128	; 0x80
 80126b8:	601a      	str	r2, [r3, #0]
}
 80126ba:	bf00      	nop
 80126bc:	3714      	adds	r7, #20
 80126be:	46bd      	mov	sp, r7
 80126c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c4:	4770      	bx	lr
 80126c6:	bf00      	nop
 80126c8:	20023a70 	.word	0x20023a70
 80126cc:	20023acc 	.word	0x20023acc

080126d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80126d0:	b480      	push	{r7}
 80126d2:	b085      	sub	sp, #20
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	60f8      	str	r0, [r7, #12]
 80126d8:	60b9      	str	r1, [r7, #8]
 80126da:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	4a07      	ldr	r2, [pc, #28]	; (80126fc <vApplicationGetTimerTaskMemory+0x2c>)
 80126e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80126e2:	68bb      	ldr	r3, [r7, #8]
 80126e4:	4a06      	ldr	r2, [pc, #24]	; (8012700 <vApplicationGetTimerTaskMemory+0x30>)
 80126e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80126ee:	601a      	str	r2, [r3, #0]
}
 80126f0:	bf00      	nop
 80126f2:	3714      	adds	r7, #20
 80126f4:	46bd      	mov	sp, r7
 80126f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126fa:	4770      	bx	lr
 80126fc:	20023ccc 	.word	0x20023ccc
 8012700:	20023d28 	.word	0x20023d28

08012704 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012704:	b580      	push	{r7, lr}
 8012706:	b08a      	sub	sp, #40	; 0x28
 8012708:	af00      	add	r7, sp, #0
 801270a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801270c:	2300      	movs	r3, #0
 801270e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012710:	f001 ff68 	bl	80145e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012714:	4b5b      	ldr	r3, [pc, #364]	; (8012884 <pvPortMalloc+0x180>)
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	2b00      	cmp	r3, #0
 801271a:	d101      	bne.n	8012720 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801271c:	f000 f91a 	bl	8012954 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012720:	4b59      	ldr	r3, [pc, #356]	; (8012888 <pvPortMalloc+0x184>)
 8012722:	681a      	ldr	r2, [r3, #0]
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	4013      	ands	r3, r2
 8012728:	2b00      	cmp	r3, #0
 801272a:	f040 8092 	bne.w	8012852 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d01f      	beq.n	8012774 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8012734:	2208      	movs	r2, #8
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	4413      	add	r3, r2
 801273a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	f003 0307 	and.w	r3, r3, #7
 8012742:	2b00      	cmp	r3, #0
 8012744:	d016      	beq.n	8012774 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	f023 0307 	bic.w	r3, r3, #7
 801274c:	3308      	adds	r3, #8
 801274e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	f003 0307 	and.w	r3, r3, #7
 8012756:	2b00      	cmp	r3, #0
 8012758:	d00c      	beq.n	8012774 <pvPortMalloc+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801275a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801275e:	b672      	cpsid	i
 8012760:	f383 8811 	msr	BASEPRI, r3
 8012764:	f3bf 8f6f 	isb	sy
 8012768:	f3bf 8f4f 	dsb	sy
 801276c:	b662      	cpsie	i
 801276e:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012770:	bf00      	nop
 8012772:	e7fe      	b.n	8012772 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d06b      	beq.n	8012852 <pvPortMalloc+0x14e>
 801277a:	4b44      	ldr	r3, [pc, #272]	; (801288c <pvPortMalloc+0x188>)
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	687a      	ldr	r2, [r7, #4]
 8012780:	429a      	cmp	r2, r3
 8012782:	d866      	bhi.n	8012852 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012784:	4b42      	ldr	r3, [pc, #264]	; (8012890 <pvPortMalloc+0x18c>)
 8012786:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012788:	4b41      	ldr	r3, [pc, #260]	; (8012890 <pvPortMalloc+0x18c>)
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801278e:	e004      	b.n	801279a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8012790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012792:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801279c:	685b      	ldr	r3, [r3, #4]
 801279e:	687a      	ldr	r2, [r7, #4]
 80127a0:	429a      	cmp	r2, r3
 80127a2:	d903      	bls.n	80127ac <pvPortMalloc+0xa8>
 80127a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d1f1      	bne.n	8012790 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80127ac:	4b35      	ldr	r3, [pc, #212]	; (8012884 <pvPortMalloc+0x180>)
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80127b2:	429a      	cmp	r2, r3
 80127b4:	d04d      	beq.n	8012852 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80127b6:	6a3b      	ldr	r3, [r7, #32]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	2208      	movs	r2, #8
 80127bc:	4413      	add	r3, r2
 80127be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80127c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c2:	681a      	ldr	r2, [r3, #0]
 80127c4:	6a3b      	ldr	r3, [r7, #32]
 80127c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80127c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ca:	685a      	ldr	r2, [r3, #4]
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	1ad2      	subs	r2, r2, r3
 80127d0:	2308      	movs	r3, #8
 80127d2:	005b      	lsls	r3, r3, #1
 80127d4:	429a      	cmp	r2, r3
 80127d6:	d921      	bls.n	801281c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80127d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	4413      	add	r3, r2
 80127de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80127e0:	69bb      	ldr	r3, [r7, #24]
 80127e2:	f003 0307 	and.w	r3, r3, #7
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d00c      	beq.n	8012804 <pvPortMalloc+0x100>
	__asm volatile
 80127ea:	f04f 0330 	mov.w	r3, #48	; 0x30
 80127ee:	b672      	cpsid	i
 80127f0:	f383 8811 	msr	BASEPRI, r3
 80127f4:	f3bf 8f6f 	isb	sy
 80127f8:	f3bf 8f4f 	dsb	sy
 80127fc:	b662      	cpsie	i
 80127fe:	613b      	str	r3, [r7, #16]
}
 8012800:	bf00      	nop
 8012802:	e7fe      	b.n	8012802 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012806:	685a      	ldr	r2, [r3, #4]
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	1ad2      	subs	r2, r2, r3
 801280c:	69bb      	ldr	r3, [r7, #24]
 801280e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012812:	687a      	ldr	r2, [r7, #4]
 8012814:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012816:	69b8      	ldr	r0, [r7, #24]
 8012818:	f000 f8fe 	bl	8012a18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801281c:	4b1b      	ldr	r3, [pc, #108]	; (801288c <pvPortMalloc+0x188>)
 801281e:	681a      	ldr	r2, [r3, #0]
 8012820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012822:	685b      	ldr	r3, [r3, #4]
 8012824:	1ad3      	subs	r3, r2, r3
 8012826:	4a19      	ldr	r2, [pc, #100]	; (801288c <pvPortMalloc+0x188>)
 8012828:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801282a:	4b18      	ldr	r3, [pc, #96]	; (801288c <pvPortMalloc+0x188>)
 801282c:	681a      	ldr	r2, [r3, #0]
 801282e:	4b19      	ldr	r3, [pc, #100]	; (8012894 <pvPortMalloc+0x190>)
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	429a      	cmp	r2, r3
 8012834:	d203      	bcs.n	801283e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012836:	4b15      	ldr	r3, [pc, #84]	; (801288c <pvPortMalloc+0x188>)
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	4a16      	ldr	r2, [pc, #88]	; (8012894 <pvPortMalloc+0x190>)
 801283c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012840:	685a      	ldr	r2, [r3, #4]
 8012842:	4b11      	ldr	r3, [pc, #68]	; (8012888 <pvPortMalloc+0x184>)
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	431a      	orrs	r2, r3
 8012848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801284a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801284e:	2200      	movs	r2, #0
 8012850:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012852:	f001 fed5 	bl	8014600 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012856:	69fb      	ldr	r3, [r7, #28]
 8012858:	f003 0307 	and.w	r3, r3, #7
 801285c:	2b00      	cmp	r3, #0
 801285e:	d00c      	beq.n	801287a <pvPortMalloc+0x176>
	__asm volatile
 8012860:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012864:	b672      	cpsid	i
 8012866:	f383 8811 	msr	BASEPRI, r3
 801286a:	f3bf 8f6f 	isb	sy
 801286e:	f3bf 8f4f 	dsb	sy
 8012872:	b662      	cpsie	i
 8012874:	60fb      	str	r3, [r7, #12]
}
 8012876:	bf00      	nop
 8012878:	e7fe      	b.n	8012878 <pvPortMalloc+0x174>
	return pvReturn;
 801287a:	69fb      	ldr	r3, [r7, #28]
}
 801287c:	4618      	mov	r0, r3
 801287e:	3728      	adds	r7, #40	; 0x28
 8012880:	46bd      	mov	sp, r7
 8012882:	bd80      	pop	{r7, pc}
 8012884:	20056130 	.word	0x20056130
 8012888:	2005613c 	.word	0x2005613c
 801288c:	20056134 	.word	0x20056134
 8012890:	20056128 	.word	0x20056128
 8012894:	20056138 	.word	0x20056138

08012898 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012898:	b580      	push	{r7, lr}
 801289a:	b086      	sub	sp, #24
 801289c:	af00      	add	r7, sp, #0
 801289e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d04c      	beq.n	8012944 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80128aa:	2308      	movs	r3, #8
 80128ac:	425b      	negs	r3, r3
 80128ae:	697a      	ldr	r2, [r7, #20]
 80128b0:	4413      	add	r3, r2
 80128b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80128b4:	697b      	ldr	r3, [r7, #20]
 80128b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80128b8:	693b      	ldr	r3, [r7, #16]
 80128ba:	685a      	ldr	r2, [r3, #4]
 80128bc:	4b23      	ldr	r3, [pc, #140]	; (801294c <vPortFree+0xb4>)
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	4013      	ands	r3, r2
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d10c      	bne.n	80128e0 <vPortFree+0x48>
	__asm volatile
 80128c6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80128ca:	b672      	cpsid	i
 80128cc:	f383 8811 	msr	BASEPRI, r3
 80128d0:	f3bf 8f6f 	isb	sy
 80128d4:	f3bf 8f4f 	dsb	sy
 80128d8:	b662      	cpsie	i
 80128da:	60fb      	str	r3, [r7, #12]
}
 80128dc:	bf00      	nop
 80128de:	e7fe      	b.n	80128de <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80128e0:	693b      	ldr	r3, [r7, #16]
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d00c      	beq.n	8012902 <vPortFree+0x6a>
	__asm volatile
 80128e8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80128ec:	b672      	cpsid	i
 80128ee:	f383 8811 	msr	BASEPRI, r3
 80128f2:	f3bf 8f6f 	isb	sy
 80128f6:	f3bf 8f4f 	dsb	sy
 80128fa:	b662      	cpsie	i
 80128fc:	60bb      	str	r3, [r7, #8]
}
 80128fe:	bf00      	nop
 8012900:	e7fe      	b.n	8012900 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012902:	693b      	ldr	r3, [r7, #16]
 8012904:	685a      	ldr	r2, [r3, #4]
 8012906:	4b11      	ldr	r3, [pc, #68]	; (801294c <vPortFree+0xb4>)
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	4013      	ands	r3, r2
 801290c:	2b00      	cmp	r3, #0
 801290e:	d019      	beq.n	8012944 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012910:	693b      	ldr	r3, [r7, #16]
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d115      	bne.n	8012944 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012918:	693b      	ldr	r3, [r7, #16]
 801291a:	685a      	ldr	r2, [r3, #4]
 801291c:	4b0b      	ldr	r3, [pc, #44]	; (801294c <vPortFree+0xb4>)
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	43db      	mvns	r3, r3
 8012922:	401a      	ands	r2, r3
 8012924:	693b      	ldr	r3, [r7, #16]
 8012926:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012928:	f001 fe5c 	bl	80145e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801292c:	693b      	ldr	r3, [r7, #16]
 801292e:	685a      	ldr	r2, [r3, #4]
 8012930:	4b07      	ldr	r3, [pc, #28]	; (8012950 <vPortFree+0xb8>)
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	4413      	add	r3, r2
 8012936:	4a06      	ldr	r2, [pc, #24]	; (8012950 <vPortFree+0xb8>)
 8012938:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801293a:	6938      	ldr	r0, [r7, #16]
 801293c:	f000 f86c 	bl	8012a18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8012940:	f001 fe5e 	bl	8014600 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012944:	bf00      	nop
 8012946:	3718      	adds	r7, #24
 8012948:	46bd      	mov	sp, r7
 801294a:	bd80      	pop	{r7, pc}
 801294c:	2005613c 	.word	0x2005613c
 8012950:	20056134 	.word	0x20056134

08012954 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012954:	b480      	push	{r7}
 8012956:	b085      	sub	sp, #20
 8012958:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801295a:	f44f 3348 	mov.w	r3, #204800	; 0x32000
 801295e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012960:	4b27      	ldr	r3, [pc, #156]	; (8012a00 <prvHeapInit+0xac>)
 8012962:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	f003 0307 	and.w	r3, r3, #7
 801296a:	2b00      	cmp	r3, #0
 801296c:	d00c      	beq.n	8012988 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	3307      	adds	r3, #7
 8012972:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	f023 0307 	bic.w	r3, r3, #7
 801297a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801297c:	68ba      	ldr	r2, [r7, #8]
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	1ad3      	subs	r3, r2, r3
 8012982:	4a1f      	ldr	r2, [pc, #124]	; (8012a00 <prvHeapInit+0xac>)
 8012984:	4413      	add	r3, r2
 8012986:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801298c:	4a1d      	ldr	r2, [pc, #116]	; (8012a04 <prvHeapInit+0xb0>)
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012992:	4b1c      	ldr	r3, [pc, #112]	; (8012a04 <prvHeapInit+0xb0>)
 8012994:	2200      	movs	r2, #0
 8012996:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	68ba      	ldr	r2, [r7, #8]
 801299c:	4413      	add	r3, r2
 801299e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80129a0:	2208      	movs	r2, #8
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	1a9b      	subs	r3, r3, r2
 80129a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	f023 0307 	bic.w	r3, r3, #7
 80129ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	4a15      	ldr	r2, [pc, #84]	; (8012a08 <prvHeapInit+0xb4>)
 80129b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80129b6:	4b14      	ldr	r3, [pc, #80]	; (8012a08 <prvHeapInit+0xb4>)
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	2200      	movs	r2, #0
 80129bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80129be:	4b12      	ldr	r3, [pc, #72]	; (8012a08 <prvHeapInit+0xb4>)
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	2200      	movs	r2, #0
 80129c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80129ca:	683b      	ldr	r3, [r7, #0]
 80129cc:	68fa      	ldr	r2, [r7, #12]
 80129ce:	1ad2      	subs	r2, r2, r3
 80129d0:	683b      	ldr	r3, [r7, #0]
 80129d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80129d4:	4b0c      	ldr	r3, [pc, #48]	; (8012a08 <prvHeapInit+0xb4>)
 80129d6:	681a      	ldr	r2, [r3, #0]
 80129d8:	683b      	ldr	r3, [r7, #0]
 80129da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80129dc:	683b      	ldr	r3, [r7, #0]
 80129de:	685b      	ldr	r3, [r3, #4]
 80129e0:	4a0a      	ldr	r2, [pc, #40]	; (8012a0c <prvHeapInit+0xb8>)
 80129e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80129e4:	683b      	ldr	r3, [r7, #0]
 80129e6:	685b      	ldr	r3, [r3, #4]
 80129e8:	4a09      	ldr	r2, [pc, #36]	; (8012a10 <prvHeapInit+0xbc>)
 80129ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80129ec:	4b09      	ldr	r3, [pc, #36]	; (8012a14 <prvHeapInit+0xc0>)
 80129ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80129f2:	601a      	str	r2, [r3, #0]
}
 80129f4:	bf00      	nop
 80129f6:	3714      	adds	r7, #20
 80129f8:	46bd      	mov	sp, r7
 80129fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fe:	4770      	bx	lr
 8012a00:	20024128 	.word	0x20024128
 8012a04:	20056128 	.word	0x20056128
 8012a08:	20056130 	.word	0x20056130
 8012a0c:	20056138 	.word	0x20056138
 8012a10:	20056134 	.word	0x20056134
 8012a14:	2005613c 	.word	0x2005613c

08012a18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012a18:	b480      	push	{r7}
 8012a1a:	b085      	sub	sp, #20
 8012a1c:	af00      	add	r7, sp, #0
 8012a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012a20:	4b28      	ldr	r3, [pc, #160]	; (8012ac4 <prvInsertBlockIntoFreeList+0xac>)
 8012a22:	60fb      	str	r3, [r7, #12]
 8012a24:	e002      	b.n	8012a2c <prvInsertBlockIntoFreeList+0x14>
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	60fb      	str	r3, [r7, #12]
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	687a      	ldr	r2, [r7, #4]
 8012a32:	429a      	cmp	r2, r3
 8012a34:	d8f7      	bhi.n	8012a26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	685b      	ldr	r3, [r3, #4]
 8012a3e:	68ba      	ldr	r2, [r7, #8]
 8012a40:	4413      	add	r3, r2
 8012a42:	687a      	ldr	r2, [r7, #4]
 8012a44:	429a      	cmp	r2, r3
 8012a46:	d108      	bne.n	8012a5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	685a      	ldr	r2, [r3, #4]
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	685b      	ldr	r3, [r3, #4]
 8012a50:	441a      	add	r2, r3
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	685b      	ldr	r3, [r3, #4]
 8012a62:	68ba      	ldr	r2, [r7, #8]
 8012a64:	441a      	add	r2, r3
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	429a      	cmp	r2, r3
 8012a6c:	d118      	bne.n	8012aa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	681a      	ldr	r2, [r3, #0]
 8012a72:	4b15      	ldr	r3, [pc, #84]	; (8012ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	429a      	cmp	r2, r3
 8012a78:	d00d      	beq.n	8012a96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	685a      	ldr	r2, [r3, #4]
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	685b      	ldr	r3, [r3, #4]
 8012a84:	441a      	add	r2, r3
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	681a      	ldr	r2, [r3, #0]
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	601a      	str	r2, [r3, #0]
 8012a94:	e008      	b.n	8012aa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012a96:	4b0c      	ldr	r3, [pc, #48]	; (8012ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8012a98:	681a      	ldr	r2, [r3, #0]
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	601a      	str	r2, [r3, #0]
 8012a9e:	e003      	b.n	8012aa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	681a      	ldr	r2, [r3, #0]
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012aa8:	68fa      	ldr	r2, [r7, #12]
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	429a      	cmp	r2, r3
 8012aae:	d002      	beq.n	8012ab6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	687a      	ldr	r2, [r7, #4]
 8012ab4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012ab6:	bf00      	nop
 8012ab8:	3714      	adds	r7, #20
 8012aba:	46bd      	mov	sp, r7
 8012abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac0:	4770      	bx	lr
 8012ac2:	bf00      	nop
 8012ac4:	20056128 	.word	0x20056128
 8012ac8:	20056130 	.word	0x20056130

08012acc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012acc:	b480      	push	{r7}
 8012ace:	b083      	sub	sp, #12
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	f103 0208 	add.w	r2, r3, #8
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8012ae4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	f103 0208 	add.w	r2, r3, #8
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	f103 0208 	add.w	r2, r3, #8
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	2200      	movs	r2, #0
 8012afe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012b00:	bf00      	nop
 8012b02:	370c      	adds	r7, #12
 8012b04:	46bd      	mov	sp, r7
 8012b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b0a:	4770      	bx	lr

08012b0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012b0c:	b480      	push	{r7}
 8012b0e:	b083      	sub	sp, #12
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	2200      	movs	r2, #0
 8012b18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012b1a:	bf00      	nop
 8012b1c:	370c      	adds	r7, #12
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b24:	4770      	bx	lr

08012b26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012b26:	b480      	push	{r7}
 8012b28:	b085      	sub	sp, #20
 8012b2a:	af00      	add	r7, sp, #0
 8012b2c:	6078      	str	r0, [r7, #4]
 8012b2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	685b      	ldr	r3, [r3, #4]
 8012b34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012b36:	683b      	ldr	r3, [r7, #0]
 8012b38:	68fa      	ldr	r2, [r7, #12]
 8012b3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	689a      	ldr	r2, [r3, #8]
 8012b40:	683b      	ldr	r3, [r7, #0]
 8012b42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	689b      	ldr	r3, [r3, #8]
 8012b48:	683a      	ldr	r2, [r7, #0]
 8012b4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	683a      	ldr	r2, [r7, #0]
 8012b50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012b52:	683b      	ldr	r3, [r7, #0]
 8012b54:	687a      	ldr	r2, [r7, #4]
 8012b56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	1c5a      	adds	r2, r3, #1
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	601a      	str	r2, [r3, #0]
}
 8012b62:	bf00      	nop
 8012b64:	3714      	adds	r7, #20
 8012b66:	46bd      	mov	sp, r7
 8012b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b6c:	4770      	bx	lr

08012b6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012b6e:	b480      	push	{r7}
 8012b70:	b085      	sub	sp, #20
 8012b72:	af00      	add	r7, sp, #0
 8012b74:	6078      	str	r0, [r7, #4]
 8012b76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012b78:	683b      	ldr	r3, [r7, #0]
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012b7e:	68bb      	ldr	r3, [r7, #8]
 8012b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b84:	d103      	bne.n	8012b8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	691b      	ldr	r3, [r3, #16]
 8012b8a:	60fb      	str	r3, [r7, #12]
 8012b8c:	e00c      	b.n	8012ba8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	3308      	adds	r3, #8
 8012b92:	60fb      	str	r3, [r7, #12]
 8012b94:	e002      	b.n	8012b9c <vListInsert+0x2e>
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	685b      	ldr	r3, [r3, #4]
 8012b9a:	60fb      	str	r3, [r7, #12]
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	685b      	ldr	r3, [r3, #4]
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	68ba      	ldr	r2, [r7, #8]
 8012ba4:	429a      	cmp	r2, r3
 8012ba6:	d2f6      	bcs.n	8012b96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	685a      	ldr	r2, [r3, #4]
 8012bac:	683b      	ldr	r3, [r7, #0]
 8012bae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012bb0:	683b      	ldr	r3, [r7, #0]
 8012bb2:	685b      	ldr	r3, [r3, #4]
 8012bb4:	683a      	ldr	r2, [r7, #0]
 8012bb6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012bb8:	683b      	ldr	r3, [r7, #0]
 8012bba:	68fa      	ldr	r2, [r7, #12]
 8012bbc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	683a      	ldr	r2, [r7, #0]
 8012bc2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012bc4:	683b      	ldr	r3, [r7, #0]
 8012bc6:	687a      	ldr	r2, [r7, #4]
 8012bc8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	1c5a      	adds	r2, r3, #1
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	601a      	str	r2, [r3, #0]
}
 8012bd4:	bf00      	nop
 8012bd6:	3714      	adds	r7, #20
 8012bd8:	46bd      	mov	sp, r7
 8012bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bde:	4770      	bx	lr

08012be0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012be0:	b480      	push	{r7}
 8012be2:	b085      	sub	sp, #20
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	691b      	ldr	r3, [r3, #16]
 8012bec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	685b      	ldr	r3, [r3, #4]
 8012bf2:	687a      	ldr	r2, [r7, #4]
 8012bf4:	6892      	ldr	r2, [r2, #8]
 8012bf6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	689b      	ldr	r3, [r3, #8]
 8012bfc:	687a      	ldr	r2, [r7, #4]
 8012bfe:	6852      	ldr	r2, [r2, #4]
 8012c00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	685b      	ldr	r3, [r3, #4]
 8012c06:	687a      	ldr	r2, [r7, #4]
 8012c08:	429a      	cmp	r2, r3
 8012c0a:	d103      	bne.n	8012c14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	689a      	ldr	r2, [r3, #8]
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	2200      	movs	r2, #0
 8012c18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	1e5a      	subs	r2, r3, #1
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	681b      	ldr	r3, [r3, #0]
}
 8012c28:	4618      	mov	r0, r3
 8012c2a:	3714      	adds	r7, #20
 8012c2c:	46bd      	mov	sp, r7
 8012c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c32:	4770      	bx	lr

08012c34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012c34:	b480      	push	{r7}
 8012c36:	b085      	sub	sp, #20
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	60f8      	str	r0, [r7, #12]
 8012c3c:	60b9      	str	r1, [r7, #8]
 8012c3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	3b04      	subs	r3, #4
 8012c44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012c4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	3b04      	subs	r3, #4
 8012c52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012c54:	68bb      	ldr	r3, [r7, #8]
 8012c56:	f023 0201 	bic.w	r2, r3, #1
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	3b04      	subs	r3, #4
 8012c62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012c64:	4a0c      	ldr	r2, [pc, #48]	; (8012c98 <pxPortInitialiseStack+0x64>)
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	3b14      	subs	r3, #20
 8012c6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012c70:	687a      	ldr	r2, [r7, #4]
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	3b04      	subs	r3, #4
 8012c7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	f06f 0202 	mvn.w	r2, #2
 8012c82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	3b20      	subs	r3, #32
 8012c88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012c8a:	68fb      	ldr	r3, [r7, #12]
}
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	3714      	adds	r7, #20
 8012c90:	46bd      	mov	sp, r7
 8012c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c96:	4770      	bx	lr
 8012c98:	08012c9d 	.word	0x08012c9d

08012c9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012c9c:	b480      	push	{r7}
 8012c9e:	b085      	sub	sp, #20
 8012ca0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012ca6:	4b14      	ldr	r3, [pc, #80]	; (8012cf8 <prvTaskExitError+0x5c>)
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cae:	d00c      	beq.n	8012cca <prvTaskExitError+0x2e>
	__asm volatile
 8012cb0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012cb4:	b672      	cpsid	i
 8012cb6:	f383 8811 	msr	BASEPRI, r3
 8012cba:	f3bf 8f6f 	isb	sy
 8012cbe:	f3bf 8f4f 	dsb	sy
 8012cc2:	b662      	cpsie	i
 8012cc4:	60fb      	str	r3, [r7, #12]
}
 8012cc6:	bf00      	nop
 8012cc8:	e7fe      	b.n	8012cc8 <prvTaskExitError+0x2c>
	__asm volatile
 8012cca:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012cce:	b672      	cpsid	i
 8012cd0:	f383 8811 	msr	BASEPRI, r3
 8012cd4:	f3bf 8f6f 	isb	sy
 8012cd8:	f3bf 8f4f 	dsb	sy
 8012cdc:	b662      	cpsie	i
 8012cde:	60bb      	str	r3, [r7, #8]
}
 8012ce0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012ce2:	bf00      	nop
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d0fc      	beq.n	8012ce4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012cea:	bf00      	nop
 8012cec:	bf00      	nop
 8012cee:	3714      	adds	r7, #20
 8012cf0:	46bd      	mov	sp, r7
 8012cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf6:	4770      	bx	lr
 8012cf8:	20000020 	.word	0x20000020
 8012cfc:	00000000 	.word	0x00000000

08012d00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012d00:	4b07      	ldr	r3, [pc, #28]	; (8012d20 <pxCurrentTCBConst2>)
 8012d02:	6819      	ldr	r1, [r3, #0]
 8012d04:	6808      	ldr	r0, [r1, #0]
 8012d06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d0a:	f380 8809 	msr	PSP, r0
 8012d0e:	f3bf 8f6f 	isb	sy
 8012d12:	f04f 0000 	mov.w	r0, #0
 8012d16:	f380 8811 	msr	BASEPRI, r0
 8012d1a:	4770      	bx	lr
 8012d1c:	f3af 8000 	nop.w

08012d20 <pxCurrentTCBConst2>:
 8012d20:	20056148 	.word	0x20056148
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012d24:	bf00      	nop
 8012d26:	bf00      	nop

08012d28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012d28:	4808      	ldr	r0, [pc, #32]	; (8012d4c <prvPortStartFirstTask+0x24>)
 8012d2a:	6800      	ldr	r0, [r0, #0]
 8012d2c:	6800      	ldr	r0, [r0, #0]
 8012d2e:	f380 8808 	msr	MSP, r0
 8012d32:	f04f 0000 	mov.w	r0, #0
 8012d36:	f380 8814 	msr	CONTROL, r0
 8012d3a:	b662      	cpsie	i
 8012d3c:	b661      	cpsie	f
 8012d3e:	f3bf 8f4f 	dsb	sy
 8012d42:	f3bf 8f6f 	isb	sy
 8012d46:	df00      	svc	0
 8012d48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012d4a:	bf00      	nop
 8012d4c:	e000ed08 	.word	0xe000ed08

08012d50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012d50:	b580      	push	{r7, lr}
 8012d52:	b084      	sub	sp, #16
 8012d54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012d56:	4b37      	ldr	r3, [pc, #220]	; (8012e34 <xPortStartScheduler+0xe4>)
 8012d58:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	781b      	ldrb	r3, [r3, #0]
 8012d5e:	b2db      	uxtb	r3, r3
 8012d60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	22ff      	movs	r2, #255	; 0xff
 8012d66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	781b      	ldrb	r3, [r3, #0]
 8012d6c:	b2db      	uxtb	r3, r3
 8012d6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012d70:	78fb      	ldrb	r3, [r7, #3]
 8012d72:	b2db      	uxtb	r3, r3
 8012d74:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8012d78:	b2da      	uxtb	r2, r3
 8012d7a:	4b2f      	ldr	r3, [pc, #188]	; (8012e38 <xPortStartScheduler+0xe8>)
 8012d7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012d7e:	4b2f      	ldr	r3, [pc, #188]	; (8012e3c <xPortStartScheduler+0xec>)
 8012d80:	2207      	movs	r2, #7
 8012d82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012d84:	e009      	b.n	8012d9a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8012d86:	4b2d      	ldr	r3, [pc, #180]	; (8012e3c <xPortStartScheduler+0xec>)
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	3b01      	subs	r3, #1
 8012d8c:	4a2b      	ldr	r2, [pc, #172]	; (8012e3c <xPortStartScheduler+0xec>)
 8012d8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012d90:	78fb      	ldrb	r3, [r7, #3]
 8012d92:	b2db      	uxtb	r3, r3
 8012d94:	005b      	lsls	r3, r3, #1
 8012d96:	b2db      	uxtb	r3, r3
 8012d98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012d9a:	78fb      	ldrb	r3, [r7, #3]
 8012d9c:	b2db      	uxtb	r3, r3
 8012d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012da2:	2b80      	cmp	r3, #128	; 0x80
 8012da4:	d0ef      	beq.n	8012d86 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012da6:	4b25      	ldr	r3, [pc, #148]	; (8012e3c <xPortStartScheduler+0xec>)
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	f1c3 0307 	rsb	r3, r3, #7
 8012dae:	2b04      	cmp	r3, #4
 8012db0:	d00c      	beq.n	8012dcc <xPortStartScheduler+0x7c>
	__asm volatile
 8012db2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012db6:	b672      	cpsid	i
 8012db8:	f383 8811 	msr	BASEPRI, r3
 8012dbc:	f3bf 8f6f 	isb	sy
 8012dc0:	f3bf 8f4f 	dsb	sy
 8012dc4:	b662      	cpsie	i
 8012dc6:	60bb      	str	r3, [r7, #8]
}
 8012dc8:	bf00      	nop
 8012dca:	e7fe      	b.n	8012dca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012dcc:	4b1b      	ldr	r3, [pc, #108]	; (8012e3c <xPortStartScheduler+0xec>)
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	021b      	lsls	r3, r3, #8
 8012dd2:	4a1a      	ldr	r2, [pc, #104]	; (8012e3c <xPortStartScheduler+0xec>)
 8012dd4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012dd6:	4b19      	ldr	r3, [pc, #100]	; (8012e3c <xPortStartScheduler+0xec>)
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012dde:	4a17      	ldr	r2, [pc, #92]	; (8012e3c <xPortStartScheduler+0xec>)
 8012de0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	b2da      	uxtb	r2, r3
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012dea:	4b15      	ldr	r3, [pc, #84]	; (8012e40 <xPortStartScheduler+0xf0>)
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	4a14      	ldr	r2, [pc, #80]	; (8012e40 <xPortStartScheduler+0xf0>)
 8012df0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012df4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012df6:	4b12      	ldr	r3, [pc, #72]	; (8012e40 <xPortStartScheduler+0xf0>)
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	4a11      	ldr	r2, [pc, #68]	; (8012e40 <xPortStartScheduler+0xf0>)
 8012dfc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012e00:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012e02:	f000 f8dd 	bl	8012fc0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012e06:	4b0f      	ldr	r3, [pc, #60]	; (8012e44 <xPortStartScheduler+0xf4>)
 8012e08:	2200      	movs	r2, #0
 8012e0a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012e0c:	f000 f8fc 	bl	8013008 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012e10:	4b0d      	ldr	r3, [pc, #52]	; (8012e48 <xPortStartScheduler+0xf8>)
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	4a0c      	ldr	r2, [pc, #48]	; (8012e48 <xPortStartScheduler+0xf8>)
 8012e16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012e1a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012e1c:	f7ff ff84 	bl	8012d28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012e20:	f001 fd5a 	bl	80148d8 <vTaskSwitchContext>
	prvTaskExitError();
 8012e24:	f7ff ff3a 	bl	8012c9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012e28:	2300      	movs	r3, #0
}
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	3710      	adds	r7, #16
 8012e2e:	46bd      	mov	sp, r7
 8012e30:	bd80      	pop	{r7, pc}
 8012e32:	bf00      	nop
 8012e34:	e000e400 	.word	0xe000e400
 8012e38:	20056140 	.word	0x20056140
 8012e3c:	20056144 	.word	0x20056144
 8012e40:	e000ed20 	.word	0xe000ed20
 8012e44:	20000020 	.word	0x20000020
 8012e48:	e000ef34 	.word	0xe000ef34

08012e4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012e4c:	b480      	push	{r7}
 8012e4e:	b083      	sub	sp, #12
 8012e50:	af00      	add	r7, sp, #0
	__asm volatile
 8012e52:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012e56:	b672      	cpsid	i
 8012e58:	f383 8811 	msr	BASEPRI, r3
 8012e5c:	f3bf 8f6f 	isb	sy
 8012e60:	f3bf 8f4f 	dsb	sy
 8012e64:	b662      	cpsie	i
 8012e66:	607b      	str	r3, [r7, #4]
}
 8012e68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012e6a:	4b10      	ldr	r3, [pc, #64]	; (8012eac <vPortEnterCritical+0x60>)
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	3301      	adds	r3, #1
 8012e70:	4a0e      	ldr	r2, [pc, #56]	; (8012eac <vPortEnterCritical+0x60>)
 8012e72:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012e74:	4b0d      	ldr	r3, [pc, #52]	; (8012eac <vPortEnterCritical+0x60>)
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	2b01      	cmp	r3, #1
 8012e7a:	d111      	bne.n	8012ea0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012e7c:	4b0c      	ldr	r3, [pc, #48]	; (8012eb0 <vPortEnterCritical+0x64>)
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	b2db      	uxtb	r3, r3
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d00c      	beq.n	8012ea0 <vPortEnterCritical+0x54>
	__asm volatile
 8012e86:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012e8a:	b672      	cpsid	i
 8012e8c:	f383 8811 	msr	BASEPRI, r3
 8012e90:	f3bf 8f6f 	isb	sy
 8012e94:	f3bf 8f4f 	dsb	sy
 8012e98:	b662      	cpsie	i
 8012e9a:	603b      	str	r3, [r7, #0]
}
 8012e9c:	bf00      	nop
 8012e9e:	e7fe      	b.n	8012e9e <vPortEnterCritical+0x52>
	}
}
 8012ea0:	bf00      	nop
 8012ea2:	370c      	adds	r7, #12
 8012ea4:	46bd      	mov	sp, r7
 8012ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eaa:	4770      	bx	lr
 8012eac:	20000020 	.word	0x20000020
 8012eb0:	e000ed04 	.word	0xe000ed04

08012eb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012eb4:	b480      	push	{r7}
 8012eb6:	b083      	sub	sp, #12
 8012eb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012eba:	4b13      	ldr	r3, [pc, #76]	; (8012f08 <vPortExitCritical+0x54>)
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d10c      	bne.n	8012edc <vPortExitCritical+0x28>
	__asm volatile
 8012ec2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012ec6:	b672      	cpsid	i
 8012ec8:	f383 8811 	msr	BASEPRI, r3
 8012ecc:	f3bf 8f6f 	isb	sy
 8012ed0:	f3bf 8f4f 	dsb	sy
 8012ed4:	b662      	cpsie	i
 8012ed6:	607b      	str	r3, [r7, #4]
}
 8012ed8:	bf00      	nop
 8012eda:	e7fe      	b.n	8012eda <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8012edc:	4b0a      	ldr	r3, [pc, #40]	; (8012f08 <vPortExitCritical+0x54>)
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	3b01      	subs	r3, #1
 8012ee2:	4a09      	ldr	r2, [pc, #36]	; (8012f08 <vPortExitCritical+0x54>)
 8012ee4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012ee6:	4b08      	ldr	r3, [pc, #32]	; (8012f08 <vPortExitCritical+0x54>)
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d105      	bne.n	8012efa <vPortExitCritical+0x46>
 8012eee:	2300      	movs	r3, #0
 8012ef0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012ef2:	683b      	ldr	r3, [r7, #0]
 8012ef4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012ef8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012efa:	bf00      	nop
 8012efc:	370c      	adds	r7, #12
 8012efe:	46bd      	mov	sp, r7
 8012f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f04:	4770      	bx	lr
 8012f06:	bf00      	nop
 8012f08:	20000020 	.word	0x20000020
 8012f0c:	00000000 	.word	0x00000000

08012f10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012f10:	f3ef 8009 	mrs	r0, PSP
 8012f14:	f3bf 8f6f 	isb	sy
 8012f18:	4b15      	ldr	r3, [pc, #84]	; (8012f70 <pxCurrentTCBConst>)
 8012f1a:	681a      	ldr	r2, [r3, #0]
 8012f1c:	f01e 0f10 	tst.w	lr, #16
 8012f20:	bf08      	it	eq
 8012f22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012f26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f2a:	6010      	str	r0, [r2, #0]
 8012f2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012f30:	f04f 0030 	mov.w	r0, #48	; 0x30
 8012f34:	b672      	cpsid	i
 8012f36:	f380 8811 	msr	BASEPRI, r0
 8012f3a:	f3bf 8f4f 	dsb	sy
 8012f3e:	f3bf 8f6f 	isb	sy
 8012f42:	b662      	cpsie	i
 8012f44:	f001 fcc8 	bl	80148d8 <vTaskSwitchContext>
 8012f48:	f04f 0000 	mov.w	r0, #0
 8012f4c:	f380 8811 	msr	BASEPRI, r0
 8012f50:	bc09      	pop	{r0, r3}
 8012f52:	6819      	ldr	r1, [r3, #0]
 8012f54:	6808      	ldr	r0, [r1, #0]
 8012f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f5a:	f01e 0f10 	tst.w	lr, #16
 8012f5e:	bf08      	it	eq
 8012f60:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012f64:	f380 8809 	msr	PSP, r0
 8012f68:	f3bf 8f6f 	isb	sy
 8012f6c:	4770      	bx	lr
 8012f6e:	bf00      	nop

08012f70 <pxCurrentTCBConst>:
 8012f70:	20056148 	.word	0x20056148
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012f74:	bf00      	nop
 8012f76:	bf00      	nop

08012f78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b082      	sub	sp, #8
 8012f7c:	af00      	add	r7, sp, #0
	__asm volatile
 8012f7e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012f82:	b672      	cpsid	i
 8012f84:	f383 8811 	msr	BASEPRI, r3
 8012f88:	f3bf 8f6f 	isb	sy
 8012f8c:	f3bf 8f4f 	dsb	sy
 8012f90:	b662      	cpsie	i
 8012f92:	607b      	str	r3, [r7, #4]
}
 8012f94:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012f96:	f001 fbe3 	bl	8014760 <xTaskIncrementTick>
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d003      	beq.n	8012fa8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012fa0:	4b06      	ldr	r3, [pc, #24]	; (8012fbc <SysTick_Handler+0x44>)
 8012fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012fa6:	601a      	str	r2, [r3, #0]
 8012fa8:	2300      	movs	r3, #0
 8012faa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012fac:	683b      	ldr	r3, [r7, #0]
 8012fae:	f383 8811 	msr	BASEPRI, r3
}
 8012fb2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012fb4:	bf00      	nop
 8012fb6:	3708      	adds	r7, #8
 8012fb8:	46bd      	mov	sp, r7
 8012fba:	bd80      	pop	{r7, pc}
 8012fbc:	e000ed04 	.word	0xe000ed04

08012fc0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012fc0:	b480      	push	{r7}
 8012fc2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012fc4:	4b0b      	ldr	r3, [pc, #44]	; (8012ff4 <vPortSetupTimerInterrupt+0x34>)
 8012fc6:	2200      	movs	r2, #0
 8012fc8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012fca:	4b0b      	ldr	r3, [pc, #44]	; (8012ff8 <vPortSetupTimerInterrupt+0x38>)
 8012fcc:	2200      	movs	r2, #0
 8012fce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012fd0:	4b0a      	ldr	r3, [pc, #40]	; (8012ffc <vPortSetupTimerInterrupt+0x3c>)
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	4a0a      	ldr	r2, [pc, #40]	; (8013000 <vPortSetupTimerInterrupt+0x40>)
 8012fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8012fda:	099b      	lsrs	r3, r3, #6
 8012fdc:	4a09      	ldr	r2, [pc, #36]	; (8013004 <vPortSetupTimerInterrupt+0x44>)
 8012fde:	3b01      	subs	r3, #1
 8012fe0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012fe2:	4b04      	ldr	r3, [pc, #16]	; (8012ff4 <vPortSetupTimerInterrupt+0x34>)
 8012fe4:	2207      	movs	r2, #7
 8012fe6:	601a      	str	r2, [r3, #0]
}
 8012fe8:	bf00      	nop
 8012fea:	46bd      	mov	sp, r7
 8012fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff0:	4770      	bx	lr
 8012ff2:	bf00      	nop
 8012ff4:	e000e010 	.word	0xe000e010
 8012ff8:	e000e018 	.word	0xe000e018
 8012ffc:	20000014 	.word	0x20000014
 8013000:	10624dd3 	.word	0x10624dd3
 8013004:	e000e014 	.word	0xe000e014

08013008 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013008:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013018 <vPortEnableVFP+0x10>
 801300c:	6801      	ldr	r1, [r0, #0]
 801300e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8013012:	6001      	str	r1, [r0, #0]
 8013014:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013016:	bf00      	nop
 8013018:	e000ed88 	.word	0xe000ed88

0801301c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801301c:	b480      	push	{r7}
 801301e:	b085      	sub	sp, #20
 8013020:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013022:	f3ef 8305 	mrs	r3, IPSR
 8013026:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	2b0f      	cmp	r3, #15
 801302c:	d916      	bls.n	801305c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801302e:	4a19      	ldr	r2, [pc, #100]	; (8013094 <vPortValidateInterruptPriority+0x78>)
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	4413      	add	r3, r2
 8013034:	781b      	ldrb	r3, [r3, #0]
 8013036:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013038:	4b17      	ldr	r3, [pc, #92]	; (8013098 <vPortValidateInterruptPriority+0x7c>)
 801303a:	781b      	ldrb	r3, [r3, #0]
 801303c:	7afa      	ldrb	r2, [r7, #11]
 801303e:	429a      	cmp	r2, r3
 8013040:	d20c      	bcs.n	801305c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8013042:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013046:	b672      	cpsid	i
 8013048:	f383 8811 	msr	BASEPRI, r3
 801304c:	f3bf 8f6f 	isb	sy
 8013050:	f3bf 8f4f 	dsb	sy
 8013054:	b662      	cpsie	i
 8013056:	607b      	str	r3, [r7, #4]
}
 8013058:	bf00      	nop
 801305a:	e7fe      	b.n	801305a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801305c:	4b0f      	ldr	r3, [pc, #60]	; (801309c <vPortValidateInterruptPriority+0x80>)
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013064:	4b0e      	ldr	r3, [pc, #56]	; (80130a0 <vPortValidateInterruptPriority+0x84>)
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	429a      	cmp	r2, r3
 801306a:	d90c      	bls.n	8013086 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801306c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013070:	b672      	cpsid	i
 8013072:	f383 8811 	msr	BASEPRI, r3
 8013076:	f3bf 8f6f 	isb	sy
 801307a:	f3bf 8f4f 	dsb	sy
 801307e:	b662      	cpsie	i
 8013080:	603b      	str	r3, [r7, #0]
}
 8013082:	bf00      	nop
 8013084:	e7fe      	b.n	8013084 <vPortValidateInterruptPriority+0x68>
	}
 8013086:	bf00      	nop
 8013088:	3714      	adds	r7, #20
 801308a:	46bd      	mov	sp, r7
 801308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013090:	4770      	bx	lr
 8013092:	bf00      	nop
 8013094:	e000e3f0 	.word	0xe000e3f0
 8013098:	20056140 	.word	0x20056140
 801309c:	e000ed0c 	.word	0xe000ed0c
 80130a0:	20056144 	.word	0x20056144

080130a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80130a4:	b580      	push	{r7, lr}
 80130a6:	b084      	sub	sp, #16
 80130a8:	af00      	add	r7, sp, #0
 80130aa:	6078      	str	r0, [r7, #4]
 80130ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d10c      	bne.n	80130d2 <xQueueGenericReset+0x2e>
	__asm volatile
 80130b8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80130bc:	b672      	cpsid	i
 80130be:	f383 8811 	msr	BASEPRI, r3
 80130c2:	f3bf 8f6f 	isb	sy
 80130c6:	f3bf 8f4f 	dsb	sy
 80130ca:	b662      	cpsie	i
 80130cc:	60bb      	str	r3, [r7, #8]
}
 80130ce:	bf00      	nop
 80130d0:	e7fe      	b.n	80130d0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80130d2:	f7ff febb 	bl	8012e4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	681a      	ldr	r2, [r3, #0]
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80130de:	68f9      	ldr	r1, [r7, #12]
 80130e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80130e2:	fb01 f303 	mul.w	r3, r1, r3
 80130e6:	441a      	add	r2, r3
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	2200      	movs	r2, #0
 80130f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	681a      	ldr	r2, [r3, #0]
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	681a      	ldr	r2, [r3, #0]
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013102:	3b01      	subs	r3, #1
 8013104:	68f9      	ldr	r1, [r7, #12]
 8013106:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013108:	fb01 f303 	mul.w	r3, r1, r3
 801310c:	441a      	add	r2, r3
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	22ff      	movs	r2, #255	; 0xff
 8013116:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	22ff      	movs	r2, #255	; 0xff
 801311e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8013122:	683b      	ldr	r3, [r7, #0]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d114      	bne.n	8013152 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	691b      	ldr	r3, [r3, #16]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d01a      	beq.n	8013166 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	3310      	adds	r3, #16
 8013134:	4618      	mov	r0, r3
 8013136:	f001 fc83 	bl	8014a40 <xTaskRemoveFromEventList>
 801313a:	4603      	mov	r3, r0
 801313c:	2b00      	cmp	r3, #0
 801313e:	d012      	beq.n	8013166 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013140:	4b0c      	ldr	r3, [pc, #48]	; (8013174 <xQueueGenericReset+0xd0>)
 8013142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013146:	601a      	str	r2, [r3, #0]
 8013148:	f3bf 8f4f 	dsb	sy
 801314c:	f3bf 8f6f 	isb	sy
 8013150:	e009      	b.n	8013166 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	3310      	adds	r3, #16
 8013156:	4618      	mov	r0, r3
 8013158:	f7ff fcb8 	bl	8012acc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	3324      	adds	r3, #36	; 0x24
 8013160:	4618      	mov	r0, r3
 8013162:	f7ff fcb3 	bl	8012acc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013166:	f7ff fea5 	bl	8012eb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801316a:	2301      	movs	r3, #1
}
 801316c:	4618      	mov	r0, r3
 801316e:	3710      	adds	r7, #16
 8013170:	46bd      	mov	sp, r7
 8013172:	bd80      	pop	{r7, pc}
 8013174:	e000ed04 	.word	0xe000ed04

08013178 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013178:	b580      	push	{r7, lr}
 801317a:	b08e      	sub	sp, #56	; 0x38
 801317c:	af02      	add	r7, sp, #8
 801317e:	60f8      	str	r0, [r7, #12]
 8013180:	60b9      	str	r1, [r7, #8]
 8013182:	607a      	str	r2, [r7, #4]
 8013184:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d10c      	bne.n	80131a6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 801318c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013190:	b672      	cpsid	i
 8013192:	f383 8811 	msr	BASEPRI, r3
 8013196:	f3bf 8f6f 	isb	sy
 801319a:	f3bf 8f4f 	dsb	sy
 801319e:	b662      	cpsie	i
 80131a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80131a2:	bf00      	nop
 80131a4:	e7fe      	b.n	80131a4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80131a6:	683b      	ldr	r3, [r7, #0]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d10c      	bne.n	80131c6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80131ac:	f04f 0330 	mov.w	r3, #48	; 0x30
 80131b0:	b672      	cpsid	i
 80131b2:	f383 8811 	msr	BASEPRI, r3
 80131b6:	f3bf 8f6f 	isb	sy
 80131ba:	f3bf 8f4f 	dsb	sy
 80131be:	b662      	cpsie	i
 80131c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80131c2:	bf00      	nop
 80131c4:	e7fe      	b.n	80131c4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d002      	beq.n	80131d2 <xQueueGenericCreateStatic+0x5a>
 80131cc:	68bb      	ldr	r3, [r7, #8]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d001      	beq.n	80131d6 <xQueueGenericCreateStatic+0x5e>
 80131d2:	2301      	movs	r3, #1
 80131d4:	e000      	b.n	80131d8 <xQueueGenericCreateStatic+0x60>
 80131d6:	2300      	movs	r3, #0
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d10c      	bne.n	80131f6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80131dc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80131e0:	b672      	cpsid	i
 80131e2:	f383 8811 	msr	BASEPRI, r3
 80131e6:	f3bf 8f6f 	isb	sy
 80131ea:	f3bf 8f4f 	dsb	sy
 80131ee:	b662      	cpsie	i
 80131f0:	623b      	str	r3, [r7, #32]
}
 80131f2:	bf00      	nop
 80131f4:	e7fe      	b.n	80131f4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d102      	bne.n	8013202 <xQueueGenericCreateStatic+0x8a>
 80131fc:	68bb      	ldr	r3, [r7, #8]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d101      	bne.n	8013206 <xQueueGenericCreateStatic+0x8e>
 8013202:	2301      	movs	r3, #1
 8013204:	e000      	b.n	8013208 <xQueueGenericCreateStatic+0x90>
 8013206:	2300      	movs	r3, #0
 8013208:	2b00      	cmp	r3, #0
 801320a:	d10c      	bne.n	8013226 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 801320c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013210:	b672      	cpsid	i
 8013212:	f383 8811 	msr	BASEPRI, r3
 8013216:	f3bf 8f6f 	isb	sy
 801321a:	f3bf 8f4f 	dsb	sy
 801321e:	b662      	cpsie	i
 8013220:	61fb      	str	r3, [r7, #28]
}
 8013222:	bf00      	nop
 8013224:	e7fe      	b.n	8013224 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013226:	2350      	movs	r3, #80	; 0x50
 8013228:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801322a:	697b      	ldr	r3, [r7, #20]
 801322c:	2b50      	cmp	r3, #80	; 0x50
 801322e:	d00c      	beq.n	801324a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8013230:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013234:	b672      	cpsid	i
 8013236:	f383 8811 	msr	BASEPRI, r3
 801323a:	f3bf 8f6f 	isb	sy
 801323e:	f3bf 8f4f 	dsb	sy
 8013242:	b662      	cpsie	i
 8013244:	61bb      	str	r3, [r7, #24]
}
 8013246:	bf00      	nop
 8013248:	e7fe      	b.n	8013248 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801324a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801324c:	683b      	ldr	r3, [r7, #0]
 801324e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013252:	2b00      	cmp	r3, #0
 8013254:	d00d      	beq.n	8013272 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013258:	2201      	movs	r2, #1
 801325a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801325e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013264:	9300      	str	r3, [sp, #0]
 8013266:	4613      	mov	r3, r2
 8013268:	687a      	ldr	r2, [r7, #4]
 801326a:	68b9      	ldr	r1, [r7, #8]
 801326c:	68f8      	ldr	r0, [r7, #12]
 801326e:	f000 f847 	bl	8013300 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8013274:	4618      	mov	r0, r3
 8013276:	3730      	adds	r7, #48	; 0x30
 8013278:	46bd      	mov	sp, r7
 801327a:	bd80      	pop	{r7, pc}

0801327c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801327c:	b580      	push	{r7, lr}
 801327e:	b08a      	sub	sp, #40	; 0x28
 8013280:	af02      	add	r7, sp, #8
 8013282:	60f8      	str	r0, [r7, #12]
 8013284:	60b9      	str	r1, [r7, #8]
 8013286:	4613      	mov	r3, r2
 8013288:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d10c      	bne.n	80132aa <xQueueGenericCreate+0x2e>
	__asm volatile
 8013290:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013294:	b672      	cpsid	i
 8013296:	f383 8811 	msr	BASEPRI, r3
 801329a:	f3bf 8f6f 	isb	sy
 801329e:	f3bf 8f4f 	dsb	sy
 80132a2:	b662      	cpsie	i
 80132a4:	613b      	str	r3, [r7, #16]
}
 80132a6:	bf00      	nop
 80132a8:	e7fe      	b.n	80132a8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80132aa:	68bb      	ldr	r3, [r7, #8]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d102      	bne.n	80132b6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80132b0:	2300      	movs	r3, #0
 80132b2:	61fb      	str	r3, [r7, #28]
 80132b4:	e004      	b.n	80132c0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	68ba      	ldr	r2, [r7, #8]
 80132ba:	fb02 f303 	mul.w	r3, r2, r3
 80132be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80132c0:	69fb      	ldr	r3, [r7, #28]
 80132c2:	3350      	adds	r3, #80	; 0x50
 80132c4:	4618      	mov	r0, r3
 80132c6:	f7ff fa1d 	bl	8012704 <pvPortMalloc>
 80132ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80132cc:	69bb      	ldr	r3, [r7, #24]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d011      	beq.n	80132f6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80132d2:	69bb      	ldr	r3, [r7, #24]
 80132d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80132d6:	697b      	ldr	r3, [r7, #20]
 80132d8:	3350      	adds	r3, #80	; 0x50
 80132da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80132dc:	69bb      	ldr	r3, [r7, #24]
 80132de:	2200      	movs	r2, #0
 80132e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80132e4:	79fa      	ldrb	r2, [r7, #7]
 80132e6:	69bb      	ldr	r3, [r7, #24]
 80132e8:	9300      	str	r3, [sp, #0]
 80132ea:	4613      	mov	r3, r2
 80132ec:	697a      	ldr	r2, [r7, #20]
 80132ee:	68b9      	ldr	r1, [r7, #8]
 80132f0:	68f8      	ldr	r0, [r7, #12]
 80132f2:	f000 f805 	bl	8013300 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80132f6:	69bb      	ldr	r3, [r7, #24]
	}
 80132f8:	4618      	mov	r0, r3
 80132fa:	3720      	adds	r7, #32
 80132fc:	46bd      	mov	sp, r7
 80132fe:	bd80      	pop	{r7, pc}

08013300 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013300:	b580      	push	{r7, lr}
 8013302:	b084      	sub	sp, #16
 8013304:	af00      	add	r7, sp, #0
 8013306:	60f8      	str	r0, [r7, #12]
 8013308:	60b9      	str	r1, [r7, #8]
 801330a:	607a      	str	r2, [r7, #4]
 801330c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801330e:	68bb      	ldr	r3, [r7, #8]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d103      	bne.n	801331c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013314:	69bb      	ldr	r3, [r7, #24]
 8013316:	69ba      	ldr	r2, [r7, #24]
 8013318:	601a      	str	r2, [r3, #0]
 801331a:	e002      	b.n	8013322 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801331c:	69bb      	ldr	r3, [r7, #24]
 801331e:	687a      	ldr	r2, [r7, #4]
 8013320:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013322:	69bb      	ldr	r3, [r7, #24]
 8013324:	68fa      	ldr	r2, [r7, #12]
 8013326:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013328:	69bb      	ldr	r3, [r7, #24]
 801332a:	68ba      	ldr	r2, [r7, #8]
 801332c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801332e:	2101      	movs	r1, #1
 8013330:	69b8      	ldr	r0, [r7, #24]
 8013332:	f7ff feb7 	bl	80130a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8013336:	69bb      	ldr	r3, [r7, #24]
 8013338:	78fa      	ldrb	r2, [r7, #3]
 801333a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801333e:	bf00      	nop
 8013340:	3710      	adds	r7, #16
 8013342:	46bd      	mov	sp, r7
 8013344:	bd80      	pop	{r7, pc}

08013346 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8013346:	b580      	push	{r7, lr}
 8013348:	b08a      	sub	sp, #40	; 0x28
 801334a:	af02      	add	r7, sp, #8
 801334c:	60f8      	str	r0, [r7, #12]
 801334e:	60b9      	str	r1, [r7, #8]
 8013350:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	2b00      	cmp	r3, #0
 8013356:	d10c      	bne.n	8013372 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8013358:	f04f 0330 	mov.w	r3, #48	; 0x30
 801335c:	b672      	cpsid	i
 801335e:	f383 8811 	msr	BASEPRI, r3
 8013362:	f3bf 8f6f 	isb	sy
 8013366:	f3bf 8f4f 	dsb	sy
 801336a:	b662      	cpsie	i
 801336c:	61bb      	str	r3, [r7, #24]
}
 801336e:	bf00      	nop
 8013370:	e7fe      	b.n	8013370 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8013372:	68ba      	ldr	r2, [r7, #8]
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	429a      	cmp	r2, r3
 8013378:	d90c      	bls.n	8013394 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 801337a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801337e:	b672      	cpsid	i
 8013380:	f383 8811 	msr	BASEPRI, r3
 8013384:	f3bf 8f6f 	isb	sy
 8013388:	f3bf 8f4f 	dsb	sy
 801338c:	b662      	cpsie	i
 801338e:	617b      	str	r3, [r7, #20]
}
 8013390:	bf00      	nop
 8013392:	e7fe      	b.n	8013392 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8013394:	2302      	movs	r3, #2
 8013396:	9300      	str	r3, [sp, #0]
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	2200      	movs	r2, #0
 801339c:	2100      	movs	r1, #0
 801339e:	68f8      	ldr	r0, [r7, #12]
 80133a0:	f7ff feea 	bl	8013178 <xQueueGenericCreateStatic>
 80133a4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80133a6:	69fb      	ldr	r3, [r7, #28]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d002      	beq.n	80133b2 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80133ac:	69fb      	ldr	r3, [r7, #28]
 80133ae:	68ba      	ldr	r2, [r7, #8]
 80133b0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80133b2:	69fb      	ldr	r3, [r7, #28]
	}
 80133b4:	4618      	mov	r0, r3
 80133b6:	3720      	adds	r7, #32
 80133b8:	46bd      	mov	sp, r7
 80133ba:	bd80      	pop	{r7, pc}

080133bc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80133bc:	b580      	push	{r7, lr}
 80133be:	b086      	sub	sp, #24
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	6078      	str	r0, [r7, #4]
 80133c4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d10c      	bne.n	80133e6 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 80133cc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80133d0:	b672      	cpsid	i
 80133d2:	f383 8811 	msr	BASEPRI, r3
 80133d6:	f3bf 8f6f 	isb	sy
 80133da:	f3bf 8f4f 	dsb	sy
 80133de:	b662      	cpsie	i
 80133e0:	613b      	str	r3, [r7, #16]
}
 80133e2:	bf00      	nop
 80133e4:	e7fe      	b.n	80133e4 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80133e6:	683a      	ldr	r2, [r7, #0]
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	429a      	cmp	r2, r3
 80133ec:	d90c      	bls.n	8013408 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 80133ee:	f04f 0330 	mov.w	r3, #48	; 0x30
 80133f2:	b672      	cpsid	i
 80133f4:	f383 8811 	msr	BASEPRI, r3
 80133f8:	f3bf 8f6f 	isb	sy
 80133fc:	f3bf 8f4f 	dsb	sy
 8013400:	b662      	cpsie	i
 8013402:	60fb      	str	r3, [r7, #12]
}
 8013404:	bf00      	nop
 8013406:	e7fe      	b.n	8013406 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8013408:	2202      	movs	r2, #2
 801340a:	2100      	movs	r1, #0
 801340c:	6878      	ldr	r0, [r7, #4]
 801340e:	f7ff ff35 	bl	801327c <xQueueGenericCreate>
 8013412:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8013414:	697b      	ldr	r3, [r7, #20]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d002      	beq.n	8013420 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801341a:	697b      	ldr	r3, [r7, #20]
 801341c:	683a      	ldr	r2, [r7, #0]
 801341e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8013420:	697b      	ldr	r3, [r7, #20]
	}
 8013422:	4618      	mov	r0, r3
 8013424:	3718      	adds	r7, #24
 8013426:	46bd      	mov	sp, r7
 8013428:	bd80      	pop	{r7, pc}
	...

0801342c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801342c:	b580      	push	{r7, lr}
 801342e:	b08e      	sub	sp, #56	; 0x38
 8013430:	af00      	add	r7, sp, #0
 8013432:	60f8      	str	r0, [r7, #12]
 8013434:	60b9      	str	r1, [r7, #8]
 8013436:	607a      	str	r2, [r7, #4]
 8013438:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801343a:	2300      	movs	r3, #0
 801343c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013444:	2b00      	cmp	r3, #0
 8013446:	d10c      	bne.n	8013462 <xQueueGenericSend+0x36>
	__asm volatile
 8013448:	f04f 0330 	mov.w	r3, #48	; 0x30
 801344c:	b672      	cpsid	i
 801344e:	f383 8811 	msr	BASEPRI, r3
 8013452:	f3bf 8f6f 	isb	sy
 8013456:	f3bf 8f4f 	dsb	sy
 801345a:	b662      	cpsie	i
 801345c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801345e:	bf00      	nop
 8013460:	e7fe      	b.n	8013460 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013462:	68bb      	ldr	r3, [r7, #8]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d103      	bne.n	8013470 <xQueueGenericSend+0x44>
 8013468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801346c:	2b00      	cmp	r3, #0
 801346e:	d101      	bne.n	8013474 <xQueueGenericSend+0x48>
 8013470:	2301      	movs	r3, #1
 8013472:	e000      	b.n	8013476 <xQueueGenericSend+0x4a>
 8013474:	2300      	movs	r3, #0
 8013476:	2b00      	cmp	r3, #0
 8013478:	d10c      	bne.n	8013494 <xQueueGenericSend+0x68>
	__asm volatile
 801347a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801347e:	b672      	cpsid	i
 8013480:	f383 8811 	msr	BASEPRI, r3
 8013484:	f3bf 8f6f 	isb	sy
 8013488:	f3bf 8f4f 	dsb	sy
 801348c:	b662      	cpsie	i
 801348e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013490:	bf00      	nop
 8013492:	e7fe      	b.n	8013492 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013494:	683b      	ldr	r3, [r7, #0]
 8013496:	2b02      	cmp	r3, #2
 8013498:	d103      	bne.n	80134a2 <xQueueGenericSend+0x76>
 801349a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801349c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801349e:	2b01      	cmp	r3, #1
 80134a0:	d101      	bne.n	80134a6 <xQueueGenericSend+0x7a>
 80134a2:	2301      	movs	r3, #1
 80134a4:	e000      	b.n	80134a8 <xQueueGenericSend+0x7c>
 80134a6:	2300      	movs	r3, #0
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d10c      	bne.n	80134c6 <xQueueGenericSend+0x9a>
	__asm volatile
 80134ac:	f04f 0330 	mov.w	r3, #48	; 0x30
 80134b0:	b672      	cpsid	i
 80134b2:	f383 8811 	msr	BASEPRI, r3
 80134b6:	f3bf 8f6f 	isb	sy
 80134ba:	f3bf 8f4f 	dsb	sy
 80134be:	b662      	cpsie	i
 80134c0:	623b      	str	r3, [r7, #32]
}
 80134c2:	bf00      	nop
 80134c4:	e7fe      	b.n	80134c4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80134c6:	f001 fc81 	bl	8014dcc <xTaskGetSchedulerState>
 80134ca:	4603      	mov	r3, r0
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d102      	bne.n	80134d6 <xQueueGenericSend+0xaa>
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d101      	bne.n	80134da <xQueueGenericSend+0xae>
 80134d6:	2301      	movs	r3, #1
 80134d8:	e000      	b.n	80134dc <xQueueGenericSend+0xb0>
 80134da:	2300      	movs	r3, #0
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d10c      	bne.n	80134fa <xQueueGenericSend+0xce>
	__asm volatile
 80134e0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80134e4:	b672      	cpsid	i
 80134e6:	f383 8811 	msr	BASEPRI, r3
 80134ea:	f3bf 8f6f 	isb	sy
 80134ee:	f3bf 8f4f 	dsb	sy
 80134f2:	b662      	cpsie	i
 80134f4:	61fb      	str	r3, [r7, #28]
}
 80134f6:	bf00      	nop
 80134f8:	e7fe      	b.n	80134f8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80134fa:	f7ff fca7 	bl	8012e4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80134fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013506:	429a      	cmp	r2, r3
 8013508:	d302      	bcc.n	8013510 <xQueueGenericSend+0xe4>
 801350a:	683b      	ldr	r3, [r7, #0]
 801350c:	2b02      	cmp	r3, #2
 801350e:	d129      	bne.n	8013564 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013510:	683a      	ldr	r2, [r7, #0]
 8013512:	68b9      	ldr	r1, [r7, #8]
 8013514:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013516:	f000 fc82 	bl	8013e1e <prvCopyDataToQueue>
 801351a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801351c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013520:	2b00      	cmp	r3, #0
 8013522:	d010      	beq.n	8013546 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013526:	3324      	adds	r3, #36	; 0x24
 8013528:	4618      	mov	r0, r3
 801352a:	f001 fa89 	bl	8014a40 <xTaskRemoveFromEventList>
 801352e:	4603      	mov	r3, r0
 8013530:	2b00      	cmp	r3, #0
 8013532:	d013      	beq.n	801355c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013534:	4b3f      	ldr	r3, [pc, #252]	; (8013634 <xQueueGenericSend+0x208>)
 8013536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801353a:	601a      	str	r2, [r3, #0]
 801353c:	f3bf 8f4f 	dsb	sy
 8013540:	f3bf 8f6f 	isb	sy
 8013544:	e00a      	b.n	801355c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013548:	2b00      	cmp	r3, #0
 801354a:	d007      	beq.n	801355c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801354c:	4b39      	ldr	r3, [pc, #228]	; (8013634 <xQueueGenericSend+0x208>)
 801354e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013552:	601a      	str	r2, [r3, #0]
 8013554:	f3bf 8f4f 	dsb	sy
 8013558:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801355c:	f7ff fcaa 	bl	8012eb4 <vPortExitCritical>
				return pdPASS;
 8013560:	2301      	movs	r3, #1
 8013562:	e063      	b.n	801362c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d103      	bne.n	8013572 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801356a:	f7ff fca3 	bl	8012eb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801356e:	2300      	movs	r3, #0
 8013570:	e05c      	b.n	801362c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013574:	2b00      	cmp	r3, #0
 8013576:	d106      	bne.n	8013586 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013578:	f107 0314 	add.w	r3, r7, #20
 801357c:	4618      	mov	r0, r3
 801357e:	f001 fac5 	bl	8014b0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013582:	2301      	movs	r3, #1
 8013584:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013586:	f7ff fc95 	bl	8012eb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801358a:	f001 f82b 	bl	80145e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801358e:	f7ff fc5d 	bl	8012e4c <vPortEnterCritical>
 8013592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013594:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013598:	b25b      	sxtb	r3, r3
 801359a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801359e:	d103      	bne.n	80135a8 <xQueueGenericSend+0x17c>
 80135a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135a2:	2200      	movs	r2, #0
 80135a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80135a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80135ae:	b25b      	sxtb	r3, r3
 80135b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135b4:	d103      	bne.n	80135be <xQueueGenericSend+0x192>
 80135b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135b8:	2200      	movs	r2, #0
 80135ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80135be:	f7ff fc79 	bl	8012eb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80135c2:	1d3a      	adds	r2, r7, #4
 80135c4:	f107 0314 	add.w	r3, r7, #20
 80135c8:	4611      	mov	r1, r2
 80135ca:	4618      	mov	r0, r3
 80135cc:	f001 fab4 	bl	8014b38 <xTaskCheckForTimeOut>
 80135d0:	4603      	mov	r3, r0
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d124      	bne.n	8013620 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80135d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80135d8:	f000 fd19 	bl	801400e <prvIsQueueFull>
 80135dc:	4603      	mov	r3, r0
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d018      	beq.n	8013614 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80135e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135e4:	3310      	adds	r3, #16
 80135e6:	687a      	ldr	r2, [r7, #4]
 80135e8:	4611      	mov	r1, r2
 80135ea:	4618      	mov	r0, r3
 80135ec:	f001 f9d4 	bl	8014998 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80135f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80135f2:	f000 fca4 	bl	8013f3e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80135f6:	f001 f803 	bl	8014600 <xTaskResumeAll>
 80135fa:	4603      	mov	r3, r0
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	f47f af7c 	bne.w	80134fa <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8013602:	4b0c      	ldr	r3, [pc, #48]	; (8013634 <xQueueGenericSend+0x208>)
 8013604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013608:	601a      	str	r2, [r3, #0]
 801360a:	f3bf 8f4f 	dsb	sy
 801360e:	f3bf 8f6f 	isb	sy
 8013612:	e772      	b.n	80134fa <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013614:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013616:	f000 fc92 	bl	8013f3e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801361a:	f000 fff1 	bl	8014600 <xTaskResumeAll>
 801361e:	e76c      	b.n	80134fa <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013622:	f000 fc8c 	bl	8013f3e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013626:	f000 ffeb 	bl	8014600 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801362a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801362c:	4618      	mov	r0, r3
 801362e:	3738      	adds	r7, #56	; 0x38
 8013630:	46bd      	mov	sp, r7
 8013632:	bd80      	pop	{r7, pc}
 8013634:	e000ed04 	.word	0xe000ed04

08013638 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013638:	b580      	push	{r7, lr}
 801363a:	b08e      	sub	sp, #56	; 0x38
 801363c:	af00      	add	r7, sp, #0
 801363e:	60f8      	str	r0, [r7, #12]
 8013640:	60b9      	str	r1, [r7, #8]
 8013642:	607a      	str	r2, [r7, #4]
 8013644:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801364a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801364c:	2b00      	cmp	r3, #0
 801364e:	d10c      	bne.n	801366a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8013650:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013654:	b672      	cpsid	i
 8013656:	f383 8811 	msr	BASEPRI, r3
 801365a:	f3bf 8f6f 	isb	sy
 801365e:	f3bf 8f4f 	dsb	sy
 8013662:	b662      	cpsie	i
 8013664:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013666:	bf00      	nop
 8013668:	e7fe      	b.n	8013668 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801366a:	68bb      	ldr	r3, [r7, #8]
 801366c:	2b00      	cmp	r3, #0
 801366e:	d103      	bne.n	8013678 <xQueueGenericSendFromISR+0x40>
 8013670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013674:	2b00      	cmp	r3, #0
 8013676:	d101      	bne.n	801367c <xQueueGenericSendFromISR+0x44>
 8013678:	2301      	movs	r3, #1
 801367a:	e000      	b.n	801367e <xQueueGenericSendFromISR+0x46>
 801367c:	2300      	movs	r3, #0
 801367e:	2b00      	cmp	r3, #0
 8013680:	d10c      	bne.n	801369c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8013682:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013686:	b672      	cpsid	i
 8013688:	f383 8811 	msr	BASEPRI, r3
 801368c:	f3bf 8f6f 	isb	sy
 8013690:	f3bf 8f4f 	dsb	sy
 8013694:	b662      	cpsie	i
 8013696:	623b      	str	r3, [r7, #32]
}
 8013698:	bf00      	nop
 801369a:	e7fe      	b.n	801369a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801369c:	683b      	ldr	r3, [r7, #0]
 801369e:	2b02      	cmp	r3, #2
 80136a0:	d103      	bne.n	80136aa <xQueueGenericSendFromISR+0x72>
 80136a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136a6:	2b01      	cmp	r3, #1
 80136a8:	d101      	bne.n	80136ae <xQueueGenericSendFromISR+0x76>
 80136aa:	2301      	movs	r3, #1
 80136ac:	e000      	b.n	80136b0 <xQueueGenericSendFromISR+0x78>
 80136ae:	2300      	movs	r3, #0
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d10c      	bne.n	80136ce <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80136b4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80136b8:	b672      	cpsid	i
 80136ba:	f383 8811 	msr	BASEPRI, r3
 80136be:	f3bf 8f6f 	isb	sy
 80136c2:	f3bf 8f4f 	dsb	sy
 80136c6:	b662      	cpsie	i
 80136c8:	61fb      	str	r3, [r7, #28]
}
 80136ca:	bf00      	nop
 80136cc:	e7fe      	b.n	80136cc <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80136ce:	f7ff fca5 	bl	801301c <vPortValidateInterruptPriority>
	__asm volatile
 80136d2:	f3ef 8211 	mrs	r2, BASEPRI
 80136d6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80136da:	b672      	cpsid	i
 80136dc:	f383 8811 	msr	BASEPRI, r3
 80136e0:	f3bf 8f6f 	isb	sy
 80136e4:	f3bf 8f4f 	dsb	sy
 80136e8:	b662      	cpsie	i
 80136ea:	61ba      	str	r2, [r7, #24]
 80136ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80136ee:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80136f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80136f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80136f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136fa:	429a      	cmp	r2, r3
 80136fc:	d302      	bcc.n	8013704 <xQueueGenericSendFromISR+0xcc>
 80136fe:	683b      	ldr	r3, [r7, #0]
 8013700:	2b02      	cmp	r3, #2
 8013702:	d12c      	bne.n	801375e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013706:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801370a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801370e:	683a      	ldr	r2, [r7, #0]
 8013710:	68b9      	ldr	r1, [r7, #8]
 8013712:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013714:	f000 fb83 	bl	8013e1e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013718:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801371c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013720:	d112      	bne.n	8013748 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013726:	2b00      	cmp	r3, #0
 8013728:	d016      	beq.n	8013758 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801372a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801372c:	3324      	adds	r3, #36	; 0x24
 801372e:	4618      	mov	r0, r3
 8013730:	f001 f986 	bl	8014a40 <xTaskRemoveFromEventList>
 8013734:	4603      	mov	r3, r0
 8013736:	2b00      	cmp	r3, #0
 8013738:	d00e      	beq.n	8013758 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d00b      	beq.n	8013758 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	2201      	movs	r2, #1
 8013744:	601a      	str	r2, [r3, #0]
 8013746:	e007      	b.n	8013758 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013748:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801374c:	3301      	adds	r3, #1
 801374e:	b2db      	uxtb	r3, r3
 8013750:	b25a      	sxtb	r2, r3
 8013752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013758:	2301      	movs	r3, #1
 801375a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801375c:	e001      	b.n	8013762 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801375e:	2300      	movs	r3, #0
 8013760:	637b      	str	r3, [r7, #52]	; 0x34
 8013762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013764:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013766:	693b      	ldr	r3, [r7, #16]
 8013768:	f383 8811 	msr	BASEPRI, r3
}
 801376c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801376e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013770:	4618      	mov	r0, r3
 8013772:	3738      	adds	r7, #56	; 0x38
 8013774:	46bd      	mov	sp, r7
 8013776:	bd80      	pop	{r7, pc}

08013778 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013778:	b580      	push	{r7, lr}
 801377a:	b08e      	sub	sp, #56	; 0x38
 801377c:	af00      	add	r7, sp, #0
 801377e:	6078      	str	r0, [r7, #4]
 8013780:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8013786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013788:	2b00      	cmp	r3, #0
 801378a:	d10c      	bne.n	80137a6 <xQueueGiveFromISR+0x2e>
	__asm volatile
 801378c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013790:	b672      	cpsid	i
 8013792:	f383 8811 	msr	BASEPRI, r3
 8013796:	f3bf 8f6f 	isb	sy
 801379a:	f3bf 8f4f 	dsb	sy
 801379e:	b662      	cpsie	i
 80137a0:	623b      	str	r3, [r7, #32]
}
 80137a2:	bf00      	nop
 80137a4:	e7fe      	b.n	80137a4 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80137a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d00c      	beq.n	80137c8 <xQueueGiveFromISR+0x50>
	__asm volatile
 80137ae:	f04f 0330 	mov.w	r3, #48	; 0x30
 80137b2:	b672      	cpsid	i
 80137b4:	f383 8811 	msr	BASEPRI, r3
 80137b8:	f3bf 8f6f 	isb	sy
 80137bc:	f3bf 8f4f 	dsb	sy
 80137c0:	b662      	cpsie	i
 80137c2:	61fb      	str	r3, [r7, #28]
}
 80137c4:	bf00      	nop
 80137c6:	e7fe      	b.n	80137c6 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80137c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d103      	bne.n	80137d8 <xQueueGiveFromISR+0x60>
 80137d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137d2:	689b      	ldr	r3, [r3, #8]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d101      	bne.n	80137dc <xQueueGiveFromISR+0x64>
 80137d8:	2301      	movs	r3, #1
 80137da:	e000      	b.n	80137de <xQueueGiveFromISR+0x66>
 80137dc:	2300      	movs	r3, #0
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d10c      	bne.n	80137fc <xQueueGiveFromISR+0x84>
	__asm volatile
 80137e2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80137e6:	b672      	cpsid	i
 80137e8:	f383 8811 	msr	BASEPRI, r3
 80137ec:	f3bf 8f6f 	isb	sy
 80137f0:	f3bf 8f4f 	dsb	sy
 80137f4:	b662      	cpsie	i
 80137f6:	61bb      	str	r3, [r7, #24]
}
 80137f8:	bf00      	nop
 80137fa:	e7fe      	b.n	80137fa <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80137fc:	f7ff fc0e 	bl	801301c <vPortValidateInterruptPriority>
	__asm volatile
 8013800:	f3ef 8211 	mrs	r2, BASEPRI
 8013804:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013808:	b672      	cpsid	i
 801380a:	f383 8811 	msr	BASEPRI, r3
 801380e:	f3bf 8f6f 	isb	sy
 8013812:	f3bf 8f4f 	dsb	sy
 8013816:	b662      	cpsie	i
 8013818:	617a      	str	r2, [r7, #20]
 801381a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801381c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801381e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013824:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801382a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801382c:	429a      	cmp	r2, r3
 801382e:	d22b      	bcs.n	8013888 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013832:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801383a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801383c:	1c5a      	adds	r2, r3, #1
 801383e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013840:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013842:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013846:	f1b3 3fff 	cmp.w	r3, #4294967295
 801384a:	d112      	bne.n	8013872 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801384c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013850:	2b00      	cmp	r3, #0
 8013852:	d016      	beq.n	8013882 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013856:	3324      	adds	r3, #36	; 0x24
 8013858:	4618      	mov	r0, r3
 801385a:	f001 f8f1 	bl	8014a40 <xTaskRemoveFromEventList>
 801385e:	4603      	mov	r3, r0
 8013860:	2b00      	cmp	r3, #0
 8013862:	d00e      	beq.n	8013882 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013864:	683b      	ldr	r3, [r7, #0]
 8013866:	2b00      	cmp	r3, #0
 8013868:	d00b      	beq.n	8013882 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801386a:	683b      	ldr	r3, [r7, #0]
 801386c:	2201      	movs	r2, #1
 801386e:	601a      	str	r2, [r3, #0]
 8013870:	e007      	b.n	8013882 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013872:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013876:	3301      	adds	r3, #1
 8013878:	b2db      	uxtb	r3, r3
 801387a:	b25a      	sxtb	r2, r3
 801387c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801387e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013882:	2301      	movs	r3, #1
 8013884:	637b      	str	r3, [r7, #52]	; 0x34
 8013886:	e001      	b.n	801388c <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013888:	2300      	movs	r3, #0
 801388a:	637b      	str	r3, [r7, #52]	; 0x34
 801388c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801388e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	f383 8811 	msr	BASEPRI, r3
}
 8013896:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801389a:	4618      	mov	r0, r3
 801389c:	3738      	adds	r7, #56	; 0x38
 801389e:	46bd      	mov	sp, r7
 80138a0:	bd80      	pop	{r7, pc}
	...

080138a4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80138a4:	b580      	push	{r7, lr}
 80138a6:	b08c      	sub	sp, #48	; 0x30
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	60f8      	str	r0, [r7, #12]
 80138ac:	60b9      	str	r1, [r7, #8]
 80138ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80138b0:	2300      	movs	r3, #0
 80138b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80138b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d10c      	bne.n	80138d8 <xQueueReceive+0x34>
	__asm volatile
 80138be:	f04f 0330 	mov.w	r3, #48	; 0x30
 80138c2:	b672      	cpsid	i
 80138c4:	f383 8811 	msr	BASEPRI, r3
 80138c8:	f3bf 8f6f 	isb	sy
 80138cc:	f3bf 8f4f 	dsb	sy
 80138d0:	b662      	cpsie	i
 80138d2:	623b      	str	r3, [r7, #32]
}
 80138d4:	bf00      	nop
 80138d6:	e7fe      	b.n	80138d6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80138d8:	68bb      	ldr	r3, [r7, #8]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d103      	bne.n	80138e6 <xQueueReceive+0x42>
 80138de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d101      	bne.n	80138ea <xQueueReceive+0x46>
 80138e6:	2301      	movs	r3, #1
 80138e8:	e000      	b.n	80138ec <xQueueReceive+0x48>
 80138ea:	2300      	movs	r3, #0
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d10c      	bne.n	801390a <xQueueReceive+0x66>
	__asm volatile
 80138f0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80138f4:	b672      	cpsid	i
 80138f6:	f383 8811 	msr	BASEPRI, r3
 80138fa:	f3bf 8f6f 	isb	sy
 80138fe:	f3bf 8f4f 	dsb	sy
 8013902:	b662      	cpsie	i
 8013904:	61fb      	str	r3, [r7, #28]
}
 8013906:	bf00      	nop
 8013908:	e7fe      	b.n	8013908 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801390a:	f001 fa5f 	bl	8014dcc <xTaskGetSchedulerState>
 801390e:	4603      	mov	r3, r0
 8013910:	2b00      	cmp	r3, #0
 8013912:	d102      	bne.n	801391a <xQueueReceive+0x76>
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	2b00      	cmp	r3, #0
 8013918:	d101      	bne.n	801391e <xQueueReceive+0x7a>
 801391a:	2301      	movs	r3, #1
 801391c:	e000      	b.n	8013920 <xQueueReceive+0x7c>
 801391e:	2300      	movs	r3, #0
 8013920:	2b00      	cmp	r3, #0
 8013922:	d10c      	bne.n	801393e <xQueueReceive+0x9a>
	__asm volatile
 8013924:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013928:	b672      	cpsid	i
 801392a:	f383 8811 	msr	BASEPRI, r3
 801392e:	f3bf 8f6f 	isb	sy
 8013932:	f3bf 8f4f 	dsb	sy
 8013936:	b662      	cpsie	i
 8013938:	61bb      	str	r3, [r7, #24]
}
 801393a:	bf00      	nop
 801393c:	e7fe      	b.n	801393c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801393e:	f7ff fa85 	bl	8012e4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013946:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801394a:	2b00      	cmp	r3, #0
 801394c:	d01f      	beq.n	801398e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801394e:	68b9      	ldr	r1, [r7, #8]
 8013950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013952:	f000 face 	bl	8013ef2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013958:	1e5a      	subs	r2, r3, #1
 801395a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801395c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801395e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013960:	691b      	ldr	r3, [r3, #16]
 8013962:	2b00      	cmp	r3, #0
 8013964:	d00f      	beq.n	8013986 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013968:	3310      	adds	r3, #16
 801396a:	4618      	mov	r0, r3
 801396c:	f001 f868 	bl	8014a40 <xTaskRemoveFromEventList>
 8013970:	4603      	mov	r3, r0
 8013972:	2b00      	cmp	r3, #0
 8013974:	d007      	beq.n	8013986 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013976:	4b3d      	ldr	r3, [pc, #244]	; (8013a6c <xQueueReceive+0x1c8>)
 8013978:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801397c:	601a      	str	r2, [r3, #0]
 801397e:	f3bf 8f4f 	dsb	sy
 8013982:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013986:	f7ff fa95 	bl	8012eb4 <vPortExitCritical>
				return pdPASS;
 801398a:	2301      	movs	r3, #1
 801398c:	e069      	b.n	8013a62 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	2b00      	cmp	r3, #0
 8013992:	d103      	bne.n	801399c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013994:	f7ff fa8e 	bl	8012eb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013998:	2300      	movs	r3, #0
 801399a:	e062      	b.n	8013a62 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 801399c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d106      	bne.n	80139b0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80139a2:	f107 0310 	add.w	r3, r7, #16
 80139a6:	4618      	mov	r0, r3
 80139a8:	f001 f8b0 	bl	8014b0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80139ac:	2301      	movs	r3, #1
 80139ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80139b0:	f7ff fa80 	bl	8012eb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80139b4:	f000 fe16 	bl	80145e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80139b8:	f7ff fa48 	bl	8012e4c <vPortEnterCritical>
 80139bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80139c2:	b25b      	sxtb	r3, r3
 80139c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139c8:	d103      	bne.n	80139d2 <xQueueReceive+0x12e>
 80139ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139cc:	2200      	movs	r2, #0
 80139ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80139d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80139d8:	b25b      	sxtb	r3, r3
 80139da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139de:	d103      	bne.n	80139e8 <xQueueReceive+0x144>
 80139e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139e2:	2200      	movs	r2, #0
 80139e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80139e8:	f7ff fa64 	bl	8012eb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80139ec:	1d3a      	adds	r2, r7, #4
 80139ee:	f107 0310 	add.w	r3, r7, #16
 80139f2:	4611      	mov	r1, r2
 80139f4:	4618      	mov	r0, r3
 80139f6:	f001 f89f 	bl	8014b38 <xTaskCheckForTimeOut>
 80139fa:	4603      	mov	r3, r0
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d123      	bne.n	8013a48 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013a00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a02:	f000 faee 	bl	8013fe2 <prvIsQueueEmpty>
 8013a06:	4603      	mov	r3, r0
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d017      	beq.n	8013a3c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a0e:	3324      	adds	r3, #36	; 0x24
 8013a10:	687a      	ldr	r2, [r7, #4]
 8013a12:	4611      	mov	r1, r2
 8013a14:	4618      	mov	r0, r3
 8013a16:	f000 ffbf 	bl	8014998 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013a1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a1c:	f000 fa8f 	bl	8013f3e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013a20:	f000 fdee 	bl	8014600 <xTaskResumeAll>
 8013a24:	4603      	mov	r3, r0
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d189      	bne.n	801393e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8013a2a:	4b10      	ldr	r3, [pc, #64]	; (8013a6c <xQueueReceive+0x1c8>)
 8013a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a30:	601a      	str	r2, [r3, #0]
 8013a32:	f3bf 8f4f 	dsb	sy
 8013a36:	f3bf 8f6f 	isb	sy
 8013a3a:	e780      	b.n	801393e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013a3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a3e:	f000 fa7e 	bl	8013f3e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013a42:	f000 fddd 	bl	8014600 <xTaskResumeAll>
 8013a46:	e77a      	b.n	801393e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013a48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a4a:	f000 fa78 	bl	8013f3e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013a4e:	f000 fdd7 	bl	8014600 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013a52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a54:	f000 fac5 	bl	8013fe2 <prvIsQueueEmpty>
 8013a58:	4603      	mov	r3, r0
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	f43f af6f 	beq.w	801393e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013a60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013a62:	4618      	mov	r0, r3
 8013a64:	3730      	adds	r7, #48	; 0x30
 8013a66:	46bd      	mov	sp, r7
 8013a68:	bd80      	pop	{r7, pc}
 8013a6a:	bf00      	nop
 8013a6c:	e000ed04 	.word	0xe000ed04

08013a70 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013a70:	b580      	push	{r7, lr}
 8013a72:	b08e      	sub	sp, #56	; 0x38
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	6078      	str	r0, [r7, #4]
 8013a78:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8013a82:	2300      	movs	r3, #0
 8013a84:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d10c      	bne.n	8013aa6 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8013a8c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013a90:	b672      	cpsid	i
 8013a92:	f383 8811 	msr	BASEPRI, r3
 8013a96:	f3bf 8f6f 	isb	sy
 8013a9a:	f3bf 8f4f 	dsb	sy
 8013a9e:	b662      	cpsie	i
 8013aa0:	623b      	str	r3, [r7, #32]
}
 8013aa2:	bf00      	nop
 8013aa4:	e7fe      	b.n	8013aa4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d00c      	beq.n	8013ac8 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8013aae:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013ab2:	b672      	cpsid	i
 8013ab4:	f383 8811 	msr	BASEPRI, r3
 8013ab8:	f3bf 8f6f 	isb	sy
 8013abc:	f3bf 8f4f 	dsb	sy
 8013ac0:	b662      	cpsie	i
 8013ac2:	61fb      	str	r3, [r7, #28]
}
 8013ac4:	bf00      	nop
 8013ac6:	e7fe      	b.n	8013ac6 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013ac8:	f001 f980 	bl	8014dcc <xTaskGetSchedulerState>
 8013acc:	4603      	mov	r3, r0
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d102      	bne.n	8013ad8 <xQueueSemaphoreTake+0x68>
 8013ad2:	683b      	ldr	r3, [r7, #0]
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d101      	bne.n	8013adc <xQueueSemaphoreTake+0x6c>
 8013ad8:	2301      	movs	r3, #1
 8013ada:	e000      	b.n	8013ade <xQueueSemaphoreTake+0x6e>
 8013adc:	2300      	movs	r3, #0
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d10c      	bne.n	8013afc <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8013ae2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013ae6:	b672      	cpsid	i
 8013ae8:	f383 8811 	msr	BASEPRI, r3
 8013aec:	f3bf 8f6f 	isb	sy
 8013af0:	f3bf 8f4f 	dsb	sy
 8013af4:	b662      	cpsie	i
 8013af6:	61bb      	str	r3, [r7, #24]
}
 8013af8:	bf00      	nop
 8013afa:	e7fe      	b.n	8013afa <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013afc:	f7ff f9a6 	bl	8012e4c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b04:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d024      	beq.n	8013b56 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8013b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b0e:	1e5a      	subs	r2, r3, #1
 8013b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b12:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d104      	bne.n	8013b26 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8013b1c:	f001 fad4 	bl	80150c8 <pvTaskIncrementMutexHeldCount>
 8013b20:	4602      	mov	r2, r0
 8013b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b24:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b28:	691b      	ldr	r3, [r3, #16]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d00f      	beq.n	8013b4e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b30:	3310      	adds	r3, #16
 8013b32:	4618      	mov	r0, r3
 8013b34:	f000 ff84 	bl	8014a40 <xTaskRemoveFromEventList>
 8013b38:	4603      	mov	r3, r0
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d007      	beq.n	8013b4e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013b3e:	4b55      	ldr	r3, [pc, #340]	; (8013c94 <xQueueSemaphoreTake+0x224>)
 8013b40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b44:	601a      	str	r2, [r3, #0]
 8013b46:	f3bf 8f4f 	dsb	sy
 8013b4a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013b4e:	f7ff f9b1 	bl	8012eb4 <vPortExitCritical>
				return pdPASS;
 8013b52:	2301      	movs	r3, #1
 8013b54:	e099      	b.n	8013c8a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013b56:	683b      	ldr	r3, [r7, #0]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d113      	bne.n	8013b84 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d00c      	beq.n	8013b7c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8013b62:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013b66:	b672      	cpsid	i
 8013b68:	f383 8811 	msr	BASEPRI, r3
 8013b6c:	f3bf 8f6f 	isb	sy
 8013b70:	f3bf 8f4f 	dsb	sy
 8013b74:	b662      	cpsie	i
 8013b76:	617b      	str	r3, [r7, #20]
}
 8013b78:	bf00      	nop
 8013b7a:	e7fe      	b.n	8013b7a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013b7c:	f7ff f99a 	bl	8012eb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013b80:	2300      	movs	r3, #0
 8013b82:	e082      	b.n	8013c8a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d106      	bne.n	8013b98 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013b8a:	f107 030c 	add.w	r3, r7, #12
 8013b8e:	4618      	mov	r0, r3
 8013b90:	f000 ffbc 	bl	8014b0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013b94:	2301      	movs	r3, #1
 8013b96:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013b98:	f7ff f98c 	bl	8012eb4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013b9c:	f000 fd22 	bl	80145e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013ba0:	f7ff f954 	bl	8012e4c <vPortEnterCritical>
 8013ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ba6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013baa:	b25b      	sxtb	r3, r3
 8013bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bb0:	d103      	bne.n	8013bba <xQueueSemaphoreTake+0x14a>
 8013bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bb4:	2200      	movs	r2, #0
 8013bb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013bc0:	b25b      	sxtb	r3, r3
 8013bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bc6:	d103      	bne.n	8013bd0 <xQueueSemaphoreTake+0x160>
 8013bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bca:	2200      	movs	r2, #0
 8013bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013bd0:	f7ff f970 	bl	8012eb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013bd4:	463a      	mov	r2, r7
 8013bd6:	f107 030c 	add.w	r3, r7, #12
 8013bda:	4611      	mov	r1, r2
 8013bdc:	4618      	mov	r0, r3
 8013bde:	f000 ffab 	bl	8014b38 <xTaskCheckForTimeOut>
 8013be2:	4603      	mov	r3, r0
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d132      	bne.n	8013c4e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013be8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013bea:	f000 f9fa 	bl	8013fe2 <prvIsQueueEmpty>
 8013bee:	4603      	mov	r3, r0
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d026      	beq.n	8013c42 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d109      	bne.n	8013c10 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8013bfc:	f7ff f926 	bl	8012e4c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c02:	689b      	ldr	r3, [r3, #8]
 8013c04:	4618      	mov	r0, r3
 8013c06:	f001 f8ff 	bl	8014e08 <xTaskPriorityInherit>
 8013c0a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8013c0c:	f7ff f952 	bl	8012eb4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c12:	3324      	adds	r3, #36	; 0x24
 8013c14:	683a      	ldr	r2, [r7, #0]
 8013c16:	4611      	mov	r1, r2
 8013c18:	4618      	mov	r0, r3
 8013c1a:	f000 febd 	bl	8014998 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013c1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013c20:	f000 f98d 	bl	8013f3e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013c24:	f000 fcec 	bl	8014600 <xTaskResumeAll>
 8013c28:	4603      	mov	r3, r0
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	f47f af66 	bne.w	8013afc <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8013c30:	4b18      	ldr	r3, [pc, #96]	; (8013c94 <xQueueSemaphoreTake+0x224>)
 8013c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c36:	601a      	str	r2, [r3, #0]
 8013c38:	f3bf 8f4f 	dsb	sy
 8013c3c:	f3bf 8f6f 	isb	sy
 8013c40:	e75c      	b.n	8013afc <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013c42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013c44:	f000 f97b 	bl	8013f3e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013c48:	f000 fcda 	bl	8014600 <xTaskResumeAll>
 8013c4c:	e756      	b.n	8013afc <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8013c4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013c50:	f000 f975 	bl	8013f3e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013c54:	f000 fcd4 	bl	8014600 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013c58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013c5a:	f000 f9c2 	bl	8013fe2 <prvIsQueueEmpty>
 8013c5e:	4603      	mov	r3, r0
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	f43f af4b 	beq.w	8013afc <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8013c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d00d      	beq.n	8013c88 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8013c6c:	f7ff f8ee 	bl	8012e4c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013c70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013c72:	f000 f8bc 	bl	8013dee <prvGetDisinheritPriorityAfterTimeout>
 8013c76:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c7a:	689b      	ldr	r3, [r3, #8]
 8013c7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013c7e:	4618      	mov	r0, r3
 8013c80:	f001 f99c 	bl	8014fbc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013c84:	f7ff f916 	bl	8012eb4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013c88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	3738      	adds	r7, #56	; 0x38
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	bd80      	pop	{r7, pc}
 8013c92:	bf00      	nop
 8013c94:	e000ed04 	.word	0xe000ed04

08013c98 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013c98:	b580      	push	{r7, lr}
 8013c9a:	b08e      	sub	sp, #56	; 0x38
 8013c9c:	af00      	add	r7, sp, #0
 8013c9e:	60f8      	str	r0, [r7, #12]
 8013ca0:	60b9      	str	r1, [r7, #8]
 8013ca2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d10c      	bne.n	8013cc8 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8013cae:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013cb2:	b672      	cpsid	i
 8013cb4:	f383 8811 	msr	BASEPRI, r3
 8013cb8:	f3bf 8f6f 	isb	sy
 8013cbc:	f3bf 8f4f 	dsb	sy
 8013cc0:	b662      	cpsie	i
 8013cc2:	623b      	str	r3, [r7, #32]
}
 8013cc4:	bf00      	nop
 8013cc6:	e7fe      	b.n	8013cc6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013cc8:	68bb      	ldr	r3, [r7, #8]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d103      	bne.n	8013cd6 <xQueueReceiveFromISR+0x3e>
 8013cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d101      	bne.n	8013cda <xQueueReceiveFromISR+0x42>
 8013cd6:	2301      	movs	r3, #1
 8013cd8:	e000      	b.n	8013cdc <xQueueReceiveFromISR+0x44>
 8013cda:	2300      	movs	r3, #0
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d10c      	bne.n	8013cfa <xQueueReceiveFromISR+0x62>
	__asm volatile
 8013ce0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013ce4:	b672      	cpsid	i
 8013ce6:	f383 8811 	msr	BASEPRI, r3
 8013cea:	f3bf 8f6f 	isb	sy
 8013cee:	f3bf 8f4f 	dsb	sy
 8013cf2:	b662      	cpsie	i
 8013cf4:	61fb      	str	r3, [r7, #28]
}
 8013cf6:	bf00      	nop
 8013cf8:	e7fe      	b.n	8013cf8 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013cfa:	f7ff f98f 	bl	801301c <vPortValidateInterruptPriority>
	__asm volatile
 8013cfe:	f3ef 8211 	mrs	r2, BASEPRI
 8013d02:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013d06:	b672      	cpsid	i
 8013d08:	f383 8811 	msr	BASEPRI, r3
 8013d0c:	f3bf 8f6f 	isb	sy
 8013d10:	f3bf 8f4f 	dsb	sy
 8013d14:	b662      	cpsie	i
 8013d16:	61ba      	str	r2, [r7, #24]
 8013d18:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013d1a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d22:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d02f      	beq.n	8013d8a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013d30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013d34:	68b9      	ldr	r1, [r7, #8]
 8013d36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013d38:	f000 f8db 	bl	8013ef2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d3e:	1e5a      	subs	r2, r3, #1
 8013d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d42:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013d44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d4c:	d112      	bne.n	8013d74 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d50:	691b      	ldr	r3, [r3, #16]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d016      	beq.n	8013d84 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d58:	3310      	adds	r3, #16
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	f000 fe70 	bl	8014a40 <xTaskRemoveFromEventList>
 8013d60:	4603      	mov	r3, r0
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d00e      	beq.n	8013d84 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d00b      	beq.n	8013d84 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	2201      	movs	r2, #1
 8013d70:	601a      	str	r2, [r3, #0]
 8013d72:	e007      	b.n	8013d84 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013d74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d78:	3301      	adds	r3, #1
 8013d7a:	b2db      	uxtb	r3, r3
 8013d7c:	b25a      	sxtb	r2, r3
 8013d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013d84:	2301      	movs	r3, #1
 8013d86:	637b      	str	r3, [r7, #52]	; 0x34
 8013d88:	e001      	b.n	8013d8e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8013d8a:	2300      	movs	r3, #0
 8013d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8013d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d90:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013d92:	693b      	ldr	r3, [r7, #16]
 8013d94:	f383 8811 	msr	BASEPRI, r3
}
 8013d98:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	3738      	adds	r7, #56	; 0x38
 8013da0:	46bd      	mov	sp, r7
 8013da2:	bd80      	pop	{r7, pc}

08013da4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8013da4:	b580      	push	{r7, lr}
 8013da6:	b084      	sub	sp, #16
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d10c      	bne.n	8013dd0 <vQueueDelete+0x2c>
	__asm volatile
 8013db6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013dba:	b672      	cpsid	i
 8013dbc:	f383 8811 	msr	BASEPRI, r3
 8013dc0:	f3bf 8f6f 	isb	sy
 8013dc4:	f3bf 8f4f 	dsb	sy
 8013dc8:	b662      	cpsie	i
 8013dca:	60bb      	str	r3, [r7, #8]
}
 8013dcc:	bf00      	nop
 8013dce:	e7fe      	b.n	8013dce <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8013dd0:	68f8      	ldr	r0, [r7, #12]
 8013dd2:	f000 f95f 	bl	8014094 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d102      	bne.n	8013de6 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8013de0:	68f8      	ldr	r0, [r7, #12]
 8013de2:	f7fe fd59 	bl	8012898 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8013de6:	bf00      	nop
 8013de8:	3710      	adds	r7, #16
 8013dea:	46bd      	mov	sp, r7
 8013dec:	bd80      	pop	{r7, pc}

08013dee <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013dee:	b480      	push	{r7}
 8013df0:	b085      	sub	sp, #20
 8013df2:	af00      	add	r7, sp, #0
 8013df4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d006      	beq.n	8013e0c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8013e08:	60fb      	str	r3, [r7, #12]
 8013e0a:	e001      	b.n	8013e10 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8013e0c:	2300      	movs	r3, #0
 8013e0e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8013e10:	68fb      	ldr	r3, [r7, #12]
	}
 8013e12:	4618      	mov	r0, r3
 8013e14:	3714      	adds	r7, #20
 8013e16:	46bd      	mov	sp, r7
 8013e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e1c:	4770      	bx	lr

08013e1e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013e1e:	b580      	push	{r7, lr}
 8013e20:	b086      	sub	sp, #24
 8013e22:	af00      	add	r7, sp, #0
 8013e24:	60f8      	str	r0, [r7, #12]
 8013e26:	60b9      	str	r1, [r7, #8]
 8013e28:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013e2a:	2300      	movs	r3, #0
 8013e2c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e32:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d10d      	bne.n	8013e58 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d14d      	bne.n	8013ee0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	689b      	ldr	r3, [r3, #8]
 8013e48:	4618      	mov	r0, r3
 8013e4a:	f001 f845 	bl	8014ed8 <xTaskPriorityDisinherit>
 8013e4e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	2200      	movs	r2, #0
 8013e54:	609a      	str	r2, [r3, #8]
 8013e56:	e043      	b.n	8013ee0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d119      	bne.n	8013e92 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	6858      	ldr	r0, [r3, #4]
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e66:	461a      	mov	r2, r3
 8013e68:	68b9      	ldr	r1, [r7, #8]
 8013e6a:	f012 fe27 	bl	8026abc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	685a      	ldr	r2, [r3, #4]
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e76:	441a      	add	r2, r3
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	685a      	ldr	r2, [r3, #4]
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	689b      	ldr	r3, [r3, #8]
 8013e84:	429a      	cmp	r2, r3
 8013e86:	d32b      	bcc.n	8013ee0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	681a      	ldr	r2, [r3, #0]
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	605a      	str	r2, [r3, #4]
 8013e90:	e026      	b.n	8013ee0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	68d8      	ldr	r0, [r3, #12]
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e9a:	461a      	mov	r2, r3
 8013e9c:	68b9      	ldr	r1, [r7, #8]
 8013e9e:	f012 fe0d 	bl	8026abc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	68da      	ldr	r2, [r3, #12]
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013eaa:	425b      	negs	r3, r3
 8013eac:	441a      	add	r2, r3
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	68da      	ldr	r2, [r3, #12]
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	429a      	cmp	r2, r3
 8013ebc:	d207      	bcs.n	8013ece <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	689a      	ldr	r2, [r3, #8]
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ec6:	425b      	negs	r3, r3
 8013ec8:	441a      	add	r2, r3
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	2b02      	cmp	r3, #2
 8013ed2:	d105      	bne.n	8013ee0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013ed4:	693b      	ldr	r3, [r7, #16]
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d002      	beq.n	8013ee0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013eda:	693b      	ldr	r3, [r7, #16]
 8013edc:	3b01      	subs	r3, #1
 8013ede:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013ee0:	693b      	ldr	r3, [r7, #16]
 8013ee2:	1c5a      	adds	r2, r3, #1
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013ee8:	697b      	ldr	r3, [r7, #20]
}
 8013eea:	4618      	mov	r0, r3
 8013eec:	3718      	adds	r7, #24
 8013eee:	46bd      	mov	sp, r7
 8013ef0:	bd80      	pop	{r7, pc}

08013ef2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013ef2:	b580      	push	{r7, lr}
 8013ef4:	b082      	sub	sp, #8
 8013ef6:	af00      	add	r7, sp, #0
 8013ef8:	6078      	str	r0, [r7, #4]
 8013efa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d018      	beq.n	8013f36 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	68da      	ldr	r2, [r3, #12]
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f0c:	441a      	add	r2, r3
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	68da      	ldr	r2, [r3, #12]
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	689b      	ldr	r3, [r3, #8]
 8013f1a:	429a      	cmp	r2, r3
 8013f1c:	d303      	bcc.n	8013f26 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	681a      	ldr	r2, [r3, #0]
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	68d9      	ldr	r1, [r3, #12]
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f2e:	461a      	mov	r2, r3
 8013f30:	6838      	ldr	r0, [r7, #0]
 8013f32:	f012 fdc3 	bl	8026abc <memcpy>
	}
}
 8013f36:	bf00      	nop
 8013f38:	3708      	adds	r7, #8
 8013f3a:	46bd      	mov	sp, r7
 8013f3c:	bd80      	pop	{r7, pc}

08013f3e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013f3e:	b580      	push	{r7, lr}
 8013f40:	b084      	sub	sp, #16
 8013f42:	af00      	add	r7, sp, #0
 8013f44:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013f46:	f7fe ff81 	bl	8012e4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013f50:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013f52:	e011      	b.n	8013f78 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d012      	beq.n	8013f82 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	3324      	adds	r3, #36	; 0x24
 8013f60:	4618      	mov	r0, r3
 8013f62:	f000 fd6d 	bl	8014a40 <xTaskRemoveFromEventList>
 8013f66:	4603      	mov	r3, r0
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d001      	beq.n	8013f70 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013f6c:	f000 fe4a 	bl	8014c04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013f70:	7bfb      	ldrb	r3, [r7, #15]
 8013f72:	3b01      	subs	r3, #1
 8013f74:	b2db      	uxtb	r3, r3
 8013f76:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	dce9      	bgt.n	8013f54 <prvUnlockQueue+0x16>
 8013f80:	e000      	b.n	8013f84 <prvUnlockQueue+0x46>
					break;
 8013f82:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	22ff      	movs	r2, #255	; 0xff
 8013f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013f8c:	f7fe ff92 	bl	8012eb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013f90:	f7fe ff5c 	bl	8012e4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013f9a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013f9c:	e011      	b.n	8013fc2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	691b      	ldr	r3, [r3, #16]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d012      	beq.n	8013fcc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	3310      	adds	r3, #16
 8013faa:	4618      	mov	r0, r3
 8013fac:	f000 fd48 	bl	8014a40 <xTaskRemoveFromEventList>
 8013fb0:	4603      	mov	r3, r0
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d001      	beq.n	8013fba <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013fb6:	f000 fe25 	bl	8014c04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013fba:	7bbb      	ldrb	r3, [r7, #14]
 8013fbc:	3b01      	subs	r3, #1
 8013fbe:	b2db      	uxtb	r3, r3
 8013fc0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013fc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	dce9      	bgt.n	8013f9e <prvUnlockQueue+0x60>
 8013fca:	e000      	b.n	8013fce <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013fcc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	22ff      	movs	r2, #255	; 0xff
 8013fd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013fd6:	f7fe ff6d 	bl	8012eb4 <vPortExitCritical>
}
 8013fda:	bf00      	nop
 8013fdc:	3710      	adds	r7, #16
 8013fde:	46bd      	mov	sp, r7
 8013fe0:	bd80      	pop	{r7, pc}

08013fe2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013fe2:	b580      	push	{r7, lr}
 8013fe4:	b084      	sub	sp, #16
 8013fe6:	af00      	add	r7, sp, #0
 8013fe8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013fea:	f7fe ff2f 	bl	8012e4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d102      	bne.n	8013ffc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013ff6:	2301      	movs	r3, #1
 8013ff8:	60fb      	str	r3, [r7, #12]
 8013ffa:	e001      	b.n	8014000 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013ffc:	2300      	movs	r3, #0
 8013ffe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014000:	f7fe ff58 	bl	8012eb4 <vPortExitCritical>

	return xReturn;
 8014004:	68fb      	ldr	r3, [r7, #12]
}
 8014006:	4618      	mov	r0, r3
 8014008:	3710      	adds	r7, #16
 801400a:	46bd      	mov	sp, r7
 801400c:	bd80      	pop	{r7, pc}

0801400e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801400e:	b580      	push	{r7, lr}
 8014010:	b084      	sub	sp, #16
 8014012:	af00      	add	r7, sp, #0
 8014014:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014016:	f7fe ff19 	bl	8012e4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014022:	429a      	cmp	r2, r3
 8014024:	d102      	bne.n	801402c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014026:	2301      	movs	r3, #1
 8014028:	60fb      	str	r3, [r7, #12]
 801402a:	e001      	b.n	8014030 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801402c:	2300      	movs	r3, #0
 801402e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014030:	f7fe ff40 	bl	8012eb4 <vPortExitCritical>

	return xReturn;
 8014034:	68fb      	ldr	r3, [r7, #12]
}
 8014036:	4618      	mov	r0, r3
 8014038:	3710      	adds	r7, #16
 801403a:	46bd      	mov	sp, r7
 801403c:	bd80      	pop	{r7, pc}
	...

08014040 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014040:	b480      	push	{r7}
 8014042:	b085      	sub	sp, #20
 8014044:	af00      	add	r7, sp, #0
 8014046:	6078      	str	r0, [r7, #4]
 8014048:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801404a:	2300      	movs	r3, #0
 801404c:	60fb      	str	r3, [r7, #12]
 801404e:	e014      	b.n	801407a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014050:	4a0f      	ldr	r2, [pc, #60]	; (8014090 <vQueueAddToRegistry+0x50>)
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d10b      	bne.n	8014074 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801405c:	490c      	ldr	r1, [pc, #48]	; (8014090 <vQueueAddToRegistry+0x50>)
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	683a      	ldr	r2, [r7, #0]
 8014062:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8014066:	4a0a      	ldr	r2, [pc, #40]	; (8014090 <vQueueAddToRegistry+0x50>)
 8014068:	68fb      	ldr	r3, [r7, #12]
 801406a:	00db      	lsls	r3, r3, #3
 801406c:	4413      	add	r3, r2
 801406e:	687a      	ldr	r2, [r7, #4]
 8014070:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8014072:	e006      	b.n	8014082 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	3301      	adds	r3, #1
 8014078:	60fb      	str	r3, [r7, #12]
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	2b07      	cmp	r3, #7
 801407e:	d9e7      	bls.n	8014050 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014080:	bf00      	nop
 8014082:	bf00      	nop
 8014084:	3714      	adds	r7, #20
 8014086:	46bd      	mov	sp, r7
 8014088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801408c:	4770      	bx	lr
 801408e:	bf00      	nop
 8014090:	20057194 	.word	0x20057194

08014094 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8014094:	b480      	push	{r7}
 8014096:	b085      	sub	sp, #20
 8014098:	af00      	add	r7, sp, #0
 801409a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801409c:	2300      	movs	r3, #0
 801409e:	60fb      	str	r3, [r7, #12]
 80140a0:	e016      	b.n	80140d0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80140a2:	4a10      	ldr	r2, [pc, #64]	; (80140e4 <vQueueUnregisterQueue+0x50>)
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	00db      	lsls	r3, r3, #3
 80140a8:	4413      	add	r3, r2
 80140aa:	685b      	ldr	r3, [r3, #4]
 80140ac:	687a      	ldr	r2, [r7, #4]
 80140ae:	429a      	cmp	r2, r3
 80140b0:	d10b      	bne.n	80140ca <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80140b2:	4a0c      	ldr	r2, [pc, #48]	; (80140e4 <vQueueUnregisterQueue+0x50>)
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	2100      	movs	r1, #0
 80140b8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80140bc:	4a09      	ldr	r2, [pc, #36]	; (80140e4 <vQueueUnregisterQueue+0x50>)
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	00db      	lsls	r3, r3, #3
 80140c2:	4413      	add	r3, r2
 80140c4:	2200      	movs	r2, #0
 80140c6:	605a      	str	r2, [r3, #4]
				break;
 80140c8:	e006      	b.n	80140d8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	3301      	adds	r3, #1
 80140ce:	60fb      	str	r3, [r7, #12]
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	2b07      	cmp	r3, #7
 80140d4:	d9e5      	bls.n	80140a2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80140d6:	bf00      	nop
 80140d8:	bf00      	nop
 80140da:	3714      	adds	r7, #20
 80140dc:	46bd      	mov	sp, r7
 80140de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e2:	4770      	bx	lr
 80140e4:	20057194 	.word	0x20057194

080140e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80140e8:	b580      	push	{r7, lr}
 80140ea:	b086      	sub	sp, #24
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	60f8      	str	r0, [r7, #12]
 80140f0:	60b9      	str	r1, [r7, #8]
 80140f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80140f8:	f7fe fea8 	bl	8012e4c <vPortEnterCritical>
 80140fc:	697b      	ldr	r3, [r7, #20]
 80140fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014102:	b25b      	sxtb	r3, r3
 8014104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014108:	d103      	bne.n	8014112 <vQueueWaitForMessageRestricted+0x2a>
 801410a:	697b      	ldr	r3, [r7, #20]
 801410c:	2200      	movs	r2, #0
 801410e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014112:	697b      	ldr	r3, [r7, #20]
 8014114:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014118:	b25b      	sxtb	r3, r3
 801411a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801411e:	d103      	bne.n	8014128 <vQueueWaitForMessageRestricted+0x40>
 8014120:	697b      	ldr	r3, [r7, #20]
 8014122:	2200      	movs	r2, #0
 8014124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014128:	f7fe fec4 	bl	8012eb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801412c:	697b      	ldr	r3, [r7, #20]
 801412e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014130:	2b00      	cmp	r3, #0
 8014132:	d106      	bne.n	8014142 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014134:	697b      	ldr	r3, [r7, #20]
 8014136:	3324      	adds	r3, #36	; 0x24
 8014138:	687a      	ldr	r2, [r7, #4]
 801413a:	68b9      	ldr	r1, [r7, #8]
 801413c:	4618      	mov	r0, r3
 801413e:	f000 fc51 	bl	80149e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014142:	6978      	ldr	r0, [r7, #20]
 8014144:	f7ff fefb 	bl	8013f3e <prvUnlockQueue>
	}
 8014148:	bf00      	nop
 801414a:	3718      	adds	r7, #24
 801414c:	46bd      	mov	sp, r7
 801414e:	bd80      	pop	{r7, pc}

08014150 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014150:	b580      	push	{r7, lr}
 8014152:	b08e      	sub	sp, #56	; 0x38
 8014154:	af04      	add	r7, sp, #16
 8014156:	60f8      	str	r0, [r7, #12]
 8014158:	60b9      	str	r1, [r7, #8]
 801415a:	607a      	str	r2, [r7, #4]
 801415c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801415e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014160:	2b00      	cmp	r3, #0
 8014162:	d10c      	bne.n	801417e <xTaskCreateStatic+0x2e>
	__asm volatile
 8014164:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014168:	b672      	cpsid	i
 801416a:	f383 8811 	msr	BASEPRI, r3
 801416e:	f3bf 8f6f 	isb	sy
 8014172:	f3bf 8f4f 	dsb	sy
 8014176:	b662      	cpsie	i
 8014178:	623b      	str	r3, [r7, #32]
}
 801417a:	bf00      	nop
 801417c:	e7fe      	b.n	801417c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 801417e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014180:	2b00      	cmp	r3, #0
 8014182:	d10c      	bne.n	801419e <xTaskCreateStatic+0x4e>
	__asm volatile
 8014184:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014188:	b672      	cpsid	i
 801418a:	f383 8811 	msr	BASEPRI, r3
 801418e:	f3bf 8f6f 	isb	sy
 8014192:	f3bf 8f4f 	dsb	sy
 8014196:	b662      	cpsie	i
 8014198:	61fb      	str	r3, [r7, #28]
}
 801419a:	bf00      	nop
 801419c:	e7fe      	b.n	801419c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801419e:	235c      	movs	r3, #92	; 0x5c
 80141a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80141a2:	693b      	ldr	r3, [r7, #16]
 80141a4:	2b5c      	cmp	r3, #92	; 0x5c
 80141a6:	d00c      	beq.n	80141c2 <xTaskCreateStatic+0x72>
	__asm volatile
 80141a8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80141ac:	b672      	cpsid	i
 80141ae:	f383 8811 	msr	BASEPRI, r3
 80141b2:	f3bf 8f6f 	isb	sy
 80141b6:	f3bf 8f4f 	dsb	sy
 80141ba:	b662      	cpsie	i
 80141bc:	61bb      	str	r3, [r7, #24]
}
 80141be:	bf00      	nop
 80141c0:	e7fe      	b.n	80141c0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80141c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80141c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d01e      	beq.n	8014208 <xTaskCreateStatic+0xb8>
 80141ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d01b      	beq.n	8014208 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80141d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80141d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80141d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80141da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141dc:	2202      	movs	r2, #2
 80141de:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80141e2:	2300      	movs	r3, #0
 80141e4:	9303      	str	r3, [sp, #12]
 80141e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141e8:	9302      	str	r3, [sp, #8]
 80141ea:	f107 0314 	add.w	r3, r7, #20
 80141ee:	9301      	str	r3, [sp, #4]
 80141f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141f2:	9300      	str	r3, [sp, #0]
 80141f4:	683b      	ldr	r3, [r7, #0]
 80141f6:	687a      	ldr	r2, [r7, #4]
 80141f8:	68b9      	ldr	r1, [r7, #8]
 80141fa:	68f8      	ldr	r0, [r7, #12]
 80141fc:	f000 f850 	bl	80142a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014200:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014202:	f000 f8df 	bl	80143c4 <prvAddNewTaskToReadyList>
 8014206:	e001      	b.n	801420c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8014208:	2300      	movs	r3, #0
 801420a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801420c:	697b      	ldr	r3, [r7, #20]
	}
 801420e:	4618      	mov	r0, r3
 8014210:	3728      	adds	r7, #40	; 0x28
 8014212:	46bd      	mov	sp, r7
 8014214:	bd80      	pop	{r7, pc}

08014216 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014216:	b580      	push	{r7, lr}
 8014218:	b08c      	sub	sp, #48	; 0x30
 801421a:	af04      	add	r7, sp, #16
 801421c:	60f8      	str	r0, [r7, #12]
 801421e:	60b9      	str	r1, [r7, #8]
 8014220:	603b      	str	r3, [r7, #0]
 8014222:	4613      	mov	r3, r2
 8014224:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014226:	88fb      	ldrh	r3, [r7, #6]
 8014228:	009b      	lsls	r3, r3, #2
 801422a:	4618      	mov	r0, r3
 801422c:	f7fe fa6a 	bl	8012704 <pvPortMalloc>
 8014230:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014232:	697b      	ldr	r3, [r7, #20]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d00e      	beq.n	8014256 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014238:	205c      	movs	r0, #92	; 0x5c
 801423a:	f7fe fa63 	bl	8012704 <pvPortMalloc>
 801423e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014240:	69fb      	ldr	r3, [r7, #28]
 8014242:	2b00      	cmp	r3, #0
 8014244:	d003      	beq.n	801424e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014246:	69fb      	ldr	r3, [r7, #28]
 8014248:	697a      	ldr	r2, [r7, #20]
 801424a:	631a      	str	r2, [r3, #48]	; 0x30
 801424c:	e005      	b.n	801425a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801424e:	6978      	ldr	r0, [r7, #20]
 8014250:	f7fe fb22 	bl	8012898 <vPortFree>
 8014254:	e001      	b.n	801425a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014256:	2300      	movs	r3, #0
 8014258:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801425a:	69fb      	ldr	r3, [r7, #28]
 801425c:	2b00      	cmp	r3, #0
 801425e:	d017      	beq.n	8014290 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014260:	69fb      	ldr	r3, [r7, #28]
 8014262:	2200      	movs	r2, #0
 8014264:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014268:	88fa      	ldrh	r2, [r7, #6]
 801426a:	2300      	movs	r3, #0
 801426c:	9303      	str	r3, [sp, #12]
 801426e:	69fb      	ldr	r3, [r7, #28]
 8014270:	9302      	str	r3, [sp, #8]
 8014272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014274:	9301      	str	r3, [sp, #4]
 8014276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014278:	9300      	str	r3, [sp, #0]
 801427a:	683b      	ldr	r3, [r7, #0]
 801427c:	68b9      	ldr	r1, [r7, #8]
 801427e:	68f8      	ldr	r0, [r7, #12]
 8014280:	f000 f80e 	bl	80142a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014284:	69f8      	ldr	r0, [r7, #28]
 8014286:	f000 f89d 	bl	80143c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801428a:	2301      	movs	r3, #1
 801428c:	61bb      	str	r3, [r7, #24]
 801428e:	e002      	b.n	8014296 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014290:	f04f 33ff 	mov.w	r3, #4294967295
 8014294:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014296:	69bb      	ldr	r3, [r7, #24]
	}
 8014298:	4618      	mov	r0, r3
 801429a:	3720      	adds	r7, #32
 801429c:	46bd      	mov	sp, r7
 801429e:	bd80      	pop	{r7, pc}

080142a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80142a0:	b580      	push	{r7, lr}
 80142a2:	b088      	sub	sp, #32
 80142a4:	af00      	add	r7, sp, #0
 80142a6:	60f8      	str	r0, [r7, #12]
 80142a8:	60b9      	str	r1, [r7, #8]
 80142aa:	607a      	str	r2, [r7, #4]
 80142ac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80142ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	009b      	lsls	r3, r3, #2
 80142b6:	461a      	mov	r2, r3
 80142b8:	21a5      	movs	r1, #165	; 0xa5
 80142ba:	f012 fc0d 	bl	8026ad8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80142be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80142c2:	6879      	ldr	r1, [r7, #4]
 80142c4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80142c8:	440b      	add	r3, r1
 80142ca:	009b      	lsls	r3, r3, #2
 80142cc:	4413      	add	r3, r2
 80142ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80142d0:	69bb      	ldr	r3, [r7, #24]
 80142d2:	f023 0307 	bic.w	r3, r3, #7
 80142d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80142d8:	69bb      	ldr	r3, [r7, #24]
 80142da:	f003 0307 	and.w	r3, r3, #7
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d00c      	beq.n	80142fc <prvInitialiseNewTask+0x5c>
	__asm volatile
 80142e2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80142e6:	b672      	cpsid	i
 80142e8:	f383 8811 	msr	BASEPRI, r3
 80142ec:	f3bf 8f6f 	isb	sy
 80142f0:	f3bf 8f4f 	dsb	sy
 80142f4:	b662      	cpsie	i
 80142f6:	617b      	str	r3, [r7, #20]
}
 80142f8:	bf00      	nop
 80142fa:	e7fe      	b.n	80142fa <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80142fc:	68bb      	ldr	r3, [r7, #8]
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d01f      	beq.n	8014342 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014302:	2300      	movs	r3, #0
 8014304:	61fb      	str	r3, [r7, #28]
 8014306:	e012      	b.n	801432e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014308:	68ba      	ldr	r2, [r7, #8]
 801430a:	69fb      	ldr	r3, [r7, #28]
 801430c:	4413      	add	r3, r2
 801430e:	7819      	ldrb	r1, [r3, #0]
 8014310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014312:	69fb      	ldr	r3, [r7, #28]
 8014314:	4413      	add	r3, r2
 8014316:	3334      	adds	r3, #52	; 0x34
 8014318:	460a      	mov	r2, r1
 801431a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801431c:	68ba      	ldr	r2, [r7, #8]
 801431e:	69fb      	ldr	r3, [r7, #28]
 8014320:	4413      	add	r3, r2
 8014322:	781b      	ldrb	r3, [r3, #0]
 8014324:	2b00      	cmp	r3, #0
 8014326:	d006      	beq.n	8014336 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014328:	69fb      	ldr	r3, [r7, #28]
 801432a:	3301      	adds	r3, #1
 801432c:	61fb      	str	r3, [r7, #28]
 801432e:	69fb      	ldr	r3, [r7, #28]
 8014330:	2b0f      	cmp	r3, #15
 8014332:	d9e9      	bls.n	8014308 <prvInitialiseNewTask+0x68>
 8014334:	e000      	b.n	8014338 <prvInitialiseNewTask+0x98>
			{
				break;
 8014336:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801433a:	2200      	movs	r2, #0
 801433c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014340:	e003      	b.n	801434a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014344:	2200      	movs	r2, #0
 8014346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801434a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801434c:	2b37      	cmp	r3, #55	; 0x37
 801434e:	d901      	bls.n	8014354 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014350:	2337      	movs	r3, #55	; 0x37
 8014352:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014356:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014358:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801435a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801435c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801435e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014362:	2200      	movs	r2, #0
 8014364:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014368:	3304      	adds	r3, #4
 801436a:	4618      	mov	r0, r3
 801436c:	f7fe fbce 	bl	8012b0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014372:	3318      	adds	r3, #24
 8014374:	4618      	mov	r0, r3
 8014376:	f7fe fbc9 	bl	8012b0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801437a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801437c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801437e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014382:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014388:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801438a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801438c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801438e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014392:	2200      	movs	r2, #0
 8014394:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014398:	2200      	movs	r2, #0
 801439a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801439e:	683a      	ldr	r2, [r7, #0]
 80143a0:	68f9      	ldr	r1, [r7, #12]
 80143a2:	69b8      	ldr	r0, [r7, #24]
 80143a4:	f7fe fc46 	bl	8012c34 <pxPortInitialiseStack>
 80143a8:	4602      	mov	r2, r0
 80143aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80143ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d002      	beq.n	80143ba <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80143b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80143b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80143ba:	bf00      	nop
 80143bc:	3720      	adds	r7, #32
 80143be:	46bd      	mov	sp, r7
 80143c0:	bd80      	pop	{r7, pc}
	...

080143c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80143c4:	b580      	push	{r7, lr}
 80143c6:	b082      	sub	sp, #8
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80143cc:	f7fe fd3e 	bl	8012e4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80143d0:	4b2d      	ldr	r3, [pc, #180]	; (8014488 <prvAddNewTaskToReadyList+0xc4>)
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	3301      	adds	r3, #1
 80143d6:	4a2c      	ldr	r2, [pc, #176]	; (8014488 <prvAddNewTaskToReadyList+0xc4>)
 80143d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80143da:	4b2c      	ldr	r3, [pc, #176]	; (801448c <prvAddNewTaskToReadyList+0xc8>)
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d109      	bne.n	80143f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80143e2:	4a2a      	ldr	r2, [pc, #168]	; (801448c <prvAddNewTaskToReadyList+0xc8>)
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80143e8:	4b27      	ldr	r3, [pc, #156]	; (8014488 <prvAddNewTaskToReadyList+0xc4>)
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	2b01      	cmp	r3, #1
 80143ee:	d110      	bne.n	8014412 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80143f0:	f000 fc2c 	bl	8014c4c <prvInitialiseTaskLists>
 80143f4:	e00d      	b.n	8014412 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80143f6:	4b26      	ldr	r3, [pc, #152]	; (8014490 <prvAddNewTaskToReadyList+0xcc>)
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d109      	bne.n	8014412 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80143fe:	4b23      	ldr	r3, [pc, #140]	; (801448c <prvAddNewTaskToReadyList+0xc8>)
 8014400:	681b      	ldr	r3, [r3, #0]
 8014402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014408:	429a      	cmp	r2, r3
 801440a:	d802      	bhi.n	8014412 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801440c:	4a1f      	ldr	r2, [pc, #124]	; (801448c <prvAddNewTaskToReadyList+0xc8>)
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014412:	4b20      	ldr	r3, [pc, #128]	; (8014494 <prvAddNewTaskToReadyList+0xd0>)
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	3301      	adds	r3, #1
 8014418:	4a1e      	ldr	r2, [pc, #120]	; (8014494 <prvAddNewTaskToReadyList+0xd0>)
 801441a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801441c:	4b1d      	ldr	r3, [pc, #116]	; (8014494 <prvAddNewTaskToReadyList+0xd0>)
 801441e:	681a      	ldr	r2, [r3, #0]
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014428:	4b1b      	ldr	r3, [pc, #108]	; (8014498 <prvAddNewTaskToReadyList+0xd4>)
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	429a      	cmp	r2, r3
 801442e:	d903      	bls.n	8014438 <prvAddNewTaskToReadyList+0x74>
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014434:	4a18      	ldr	r2, [pc, #96]	; (8014498 <prvAddNewTaskToReadyList+0xd4>)
 8014436:	6013      	str	r3, [r2, #0]
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801443c:	4613      	mov	r3, r2
 801443e:	009b      	lsls	r3, r3, #2
 8014440:	4413      	add	r3, r2
 8014442:	009b      	lsls	r3, r3, #2
 8014444:	4a15      	ldr	r2, [pc, #84]	; (801449c <prvAddNewTaskToReadyList+0xd8>)
 8014446:	441a      	add	r2, r3
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	3304      	adds	r3, #4
 801444c:	4619      	mov	r1, r3
 801444e:	4610      	mov	r0, r2
 8014450:	f7fe fb69 	bl	8012b26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014454:	f7fe fd2e 	bl	8012eb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014458:	4b0d      	ldr	r3, [pc, #52]	; (8014490 <prvAddNewTaskToReadyList+0xcc>)
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d00e      	beq.n	801447e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014460:	4b0a      	ldr	r3, [pc, #40]	; (801448c <prvAddNewTaskToReadyList+0xc8>)
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801446a:	429a      	cmp	r2, r3
 801446c:	d207      	bcs.n	801447e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801446e:	4b0c      	ldr	r3, [pc, #48]	; (80144a0 <prvAddNewTaskToReadyList+0xdc>)
 8014470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014474:	601a      	str	r2, [r3, #0]
 8014476:	f3bf 8f4f 	dsb	sy
 801447a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801447e:	bf00      	nop
 8014480:	3708      	adds	r7, #8
 8014482:	46bd      	mov	sp, r7
 8014484:	bd80      	pop	{r7, pc}
 8014486:	bf00      	nop
 8014488:	2005661c 	.word	0x2005661c
 801448c:	20056148 	.word	0x20056148
 8014490:	20056628 	.word	0x20056628
 8014494:	20056638 	.word	0x20056638
 8014498:	20056624 	.word	0x20056624
 801449c:	2005614c 	.word	0x2005614c
 80144a0:	e000ed04 	.word	0xe000ed04

080144a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80144a4:	b580      	push	{r7, lr}
 80144a6:	b084      	sub	sp, #16
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80144ac:	2300      	movs	r3, #0
 80144ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d019      	beq.n	80144ea <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80144b6:	4b14      	ldr	r3, [pc, #80]	; (8014508 <vTaskDelay+0x64>)
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d00c      	beq.n	80144d8 <vTaskDelay+0x34>
	__asm volatile
 80144be:	f04f 0330 	mov.w	r3, #48	; 0x30
 80144c2:	b672      	cpsid	i
 80144c4:	f383 8811 	msr	BASEPRI, r3
 80144c8:	f3bf 8f6f 	isb	sy
 80144cc:	f3bf 8f4f 	dsb	sy
 80144d0:	b662      	cpsie	i
 80144d2:	60bb      	str	r3, [r7, #8]
}
 80144d4:	bf00      	nop
 80144d6:	e7fe      	b.n	80144d6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80144d8:	f000 f884 	bl	80145e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80144dc:	2100      	movs	r1, #0
 80144de:	6878      	ldr	r0, [r7, #4]
 80144e0:	f000 fe06 	bl	80150f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80144e4:	f000 f88c 	bl	8014600 <xTaskResumeAll>
 80144e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d107      	bne.n	8014500 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80144f0:	4b06      	ldr	r3, [pc, #24]	; (801450c <vTaskDelay+0x68>)
 80144f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144f6:	601a      	str	r2, [r3, #0]
 80144f8:	f3bf 8f4f 	dsb	sy
 80144fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014500:	bf00      	nop
 8014502:	3710      	adds	r7, #16
 8014504:	46bd      	mov	sp, r7
 8014506:	bd80      	pop	{r7, pc}
 8014508:	20056644 	.word	0x20056644
 801450c:	e000ed04 	.word	0xe000ed04

08014510 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014510:	b580      	push	{r7, lr}
 8014512:	b08a      	sub	sp, #40	; 0x28
 8014514:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014516:	2300      	movs	r3, #0
 8014518:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801451a:	2300      	movs	r3, #0
 801451c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801451e:	463a      	mov	r2, r7
 8014520:	1d39      	adds	r1, r7, #4
 8014522:	f107 0308 	add.w	r3, r7, #8
 8014526:	4618      	mov	r0, r3
 8014528:	f7fe f8b8 	bl	801269c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801452c:	6839      	ldr	r1, [r7, #0]
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	68ba      	ldr	r2, [r7, #8]
 8014532:	9202      	str	r2, [sp, #8]
 8014534:	9301      	str	r3, [sp, #4]
 8014536:	2300      	movs	r3, #0
 8014538:	9300      	str	r3, [sp, #0]
 801453a:	2300      	movs	r3, #0
 801453c:	460a      	mov	r2, r1
 801453e:	4923      	ldr	r1, [pc, #140]	; (80145cc <vTaskStartScheduler+0xbc>)
 8014540:	4823      	ldr	r0, [pc, #140]	; (80145d0 <vTaskStartScheduler+0xc0>)
 8014542:	f7ff fe05 	bl	8014150 <xTaskCreateStatic>
 8014546:	4603      	mov	r3, r0
 8014548:	4a22      	ldr	r2, [pc, #136]	; (80145d4 <vTaskStartScheduler+0xc4>)
 801454a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801454c:	4b21      	ldr	r3, [pc, #132]	; (80145d4 <vTaskStartScheduler+0xc4>)
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	2b00      	cmp	r3, #0
 8014552:	d002      	beq.n	801455a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014554:	2301      	movs	r3, #1
 8014556:	617b      	str	r3, [r7, #20]
 8014558:	e001      	b.n	801455e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801455a:	2300      	movs	r3, #0
 801455c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801455e:	697b      	ldr	r3, [r7, #20]
 8014560:	2b01      	cmp	r3, #1
 8014562:	d102      	bne.n	801456a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014564:	f000 fe18 	bl	8015198 <xTimerCreateTimerTask>
 8014568:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801456a:	697b      	ldr	r3, [r7, #20]
 801456c:	2b01      	cmp	r3, #1
 801456e:	d118      	bne.n	80145a2 <vTaskStartScheduler+0x92>
	__asm volatile
 8014570:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014574:	b672      	cpsid	i
 8014576:	f383 8811 	msr	BASEPRI, r3
 801457a:	f3bf 8f6f 	isb	sy
 801457e:	f3bf 8f4f 	dsb	sy
 8014582:	b662      	cpsie	i
 8014584:	613b      	str	r3, [r7, #16]
}
 8014586:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014588:	4b13      	ldr	r3, [pc, #76]	; (80145d8 <vTaskStartScheduler+0xc8>)
 801458a:	f04f 32ff 	mov.w	r2, #4294967295
 801458e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014590:	4b12      	ldr	r3, [pc, #72]	; (80145dc <vTaskStartScheduler+0xcc>)
 8014592:	2201      	movs	r2, #1
 8014594:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014596:	4b12      	ldr	r3, [pc, #72]	; (80145e0 <vTaskStartScheduler+0xd0>)
 8014598:	2200      	movs	r2, #0
 801459a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801459c:	f7fe fbd8 	bl	8012d50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80145a0:	e010      	b.n	80145c4 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80145a2:	697b      	ldr	r3, [r7, #20]
 80145a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145a8:	d10c      	bne.n	80145c4 <vTaskStartScheduler+0xb4>
	__asm volatile
 80145aa:	f04f 0330 	mov.w	r3, #48	; 0x30
 80145ae:	b672      	cpsid	i
 80145b0:	f383 8811 	msr	BASEPRI, r3
 80145b4:	f3bf 8f6f 	isb	sy
 80145b8:	f3bf 8f4f 	dsb	sy
 80145bc:	b662      	cpsie	i
 80145be:	60fb      	str	r3, [r7, #12]
}
 80145c0:	bf00      	nop
 80145c2:	e7fe      	b.n	80145c2 <vTaskStartScheduler+0xb2>
}
 80145c4:	bf00      	nop
 80145c6:	3718      	adds	r7, #24
 80145c8:	46bd      	mov	sp, r7
 80145ca:	bd80      	pop	{r7, pc}
 80145cc:	0802be14 	.word	0x0802be14
 80145d0:	08014c1d 	.word	0x08014c1d
 80145d4:	20056640 	.word	0x20056640
 80145d8:	2005663c 	.word	0x2005663c
 80145dc:	20056628 	.word	0x20056628
 80145e0:	20056620 	.word	0x20056620

080145e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80145e4:	b480      	push	{r7}
 80145e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80145e8:	4b04      	ldr	r3, [pc, #16]	; (80145fc <vTaskSuspendAll+0x18>)
 80145ea:	681b      	ldr	r3, [r3, #0]
 80145ec:	3301      	adds	r3, #1
 80145ee:	4a03      	ldr	r2, [pc, #12]	; (80145fc <vTaskSuspendAll+0x18>)
 80145f0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80145f2:	bf00      	nop
 80145f4:	46bd      	mov	sp, r7
 80145f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145fa:	4770      	bx	lr
 80145fc:	20056644 	.word	0x20056644

08014600 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014600:	b580      	push	{r7, lr}
 8014602:	b084      	sub	sp, #16
 8014604:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014606:	2300      	movs	r3, #0
 8014608:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801460a:	2300      	movs	r3, #0
 801460c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801460e:	4b43      	ldr	r3, [pc, #268]	; (801471c <xTaskResumeAll+0x11c>)
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	2b00      	cmp	r3, #0
 8014614:	d10c      	bne.n	8014630 <xTaskResumeAll+0x30>
	__asm volatile
 8014616:	f04f 0330 	mov.w	r3, #48	; 0x30
 801461a:	b672      	cpsid	i
 801461c:	f383 8811 	msr	BASEPRI, r3
 8014620:	f3bf 8f6f 	isb	sy
 8014624:	f3bf 8f4f 	dsb	sy
 8014628:	b662      	cpsie	i
 801462a:	603b      	str	r3, [r7, #0]
}
 801462c:	bf00      	nop
 801462e:	e7fe      	b.n	801462e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014630:	f7fe fc0c 	bl	8012e4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014634:	4b39      	ldr	r3, [pc, #228]	; (801471c <xTaskResumeAll+0x11c>)
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	3b01      	subs	r3, #1
 801463a:	4a38      	ldr	r2, [pc, #224]	; (801471c <xTaskResumeAll+0x11c>)
 801463c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801463e:	4b37      	ldr	r3, [pc, #220]	; (801471c <xTaskResumeAll+0x11c>)
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d162      	bne.n	801470c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014646:	4b36      	ldr	r3, [pc, #216]	; (8014720 <xTaskResumeAll+0x120>)
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	2b00      	cmp	r3, #0
 801464c:	d05e      	beq.n	801470c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801464e:	e02f      	b.n	80146b0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014650:	4b34      	ldr	r3, [pc, #208]	; (8014724 <xTaskResumeAll+0x124>)
 8014652:	68db      	ldr	r3, [r3, #12]
 8014654:	68db      	ldr	r3, [r3, #12]
 8014656:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	3318      	adds	r3, #24
 801465c:	4618      	mov	r0, r3
 801465e:	f7fe fabf 	bl	8012be0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014662:	68fb      	ldr	r3, [r7, #12]
 8014664:	3304      	adds	r3, #4
 8014666:	4618      	mov	r0, r3
 8014668:	f7fe faba 	bl	8012be0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014670:	4b2d      	ldr	r3, [pc, #180]	; (8014728 <xTaskResumeAll+0x128>)
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	429a      	cmp	r2, r3
 8014676:	d903      	bls.n	8014680 <xTaskResumeAll+0x80>
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801467c:	4a2a      	ldr	r2, [pc, #168]	; (8014728 <xTaskResumeAll+0x128>)
 801467e:	6013      	str	r3, [r2, #0]
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014684:	4613      	mov	r3, r2
 8014686:	009b      	lsls	r3, r3, #2
 8014688:	4413      	add	r3, r2
 801468a:	009b      	lsls	r3, r3, #2
 801468c:	4a27      	ldr	r2, [pc, #156]	; (801472c <xTaskResumeAll+0x12c>)
 801468e:	441a      	add	r2, r3
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	3304      	adds	r3, #4
 8014694:	4619      	mov	r1, r3
 8014696:	4610      	mov	r0, r2
 8014698:	f7fe fa45 	bl	8012b26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146a0:	4b23      	ldr	r3, [pc, #140]	; (8014730 <xTaskResumeAll+0x130>)
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146a6:	429a      	cmp	r2, r3
 80146a8:	d302      	bcc.n	80146b0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80146aa:	4b22      	ldr	r3, [pc, #136]	; (8014734 <xTaskResumeAll+0x134>)
 80146ac:	2201      	movs	r2, #1
 80146ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80146b0:	4b1c      	ldr	r3, [pc, #112]	; (8014724 <xTaskResumeAll+0x124>)
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d1cb      	bne.n	8014650 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d001      	beq.n	80146c2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80146be:	f000 fb65 	bl	8014d8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80146c2:	4b1d      	ldr	r3, [pc, #116]	; (8014738 <xTaskResumeAll+0x138>)
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d010      	beq.n	80146f0 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80146ce:	f000 f847 	bl	8014760 <xTaskIncrementTick>
 80146d2:	4603      	mov	r3, r0
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d002      	beq.n	80146de <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80146d8:	4b16      	ldr	r3, [pc, #88]	; (8014734 <xTaskResumeAll+0x134>)
 80146da:	2201      	movs	r2, #1
 80146dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	3b01      	subs	r3, #1
 80146e2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d1f1      	bne.n	80146ce <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80146ea:	4b13      	ldr	r3, [pc, #76]	; (8014738 <xTaskResumeAll+0x138>)
 80146ec:	2200      	movs	r2, #0
 80146ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80146f0:	4b10      	ldr	r3, [pc, #64]	; (8014734 <xTaskResumeAll+0x134>)
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d009      	beq.n	801470c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80146f8:	2301      	movs	r3, #1
 80146fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80146fc:	4b0f      	ldr	r3, [pc, #60]	; (801473c <xTaskResumeAll+0x13c>)
 80146fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014702:	601a      	str	r2, [r3, #0]
 8014704:	f3bf 8f4f 	dsb	sy
 8014708:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801470c:	f7fe fbd2 	bl	8012eb4 <vPortExitCritical>

	return xAlreadyYielded;
 8014710:	68bb      	ldr	r3, [r7, #8]
}
 8014712:	4618      	mov	r0, r3
 8014714:	3710      	adds	r7, #16
 8014716:	46bd      	mov	sp, r7
 8014718:	bd80      	pop	{r7, pc}
 801471a:	bf00      	nop
 801471c:	20056644 	.word	0x20056644
 8014720:	2005661c 	.word	0x2005661c
 8014724:	200565dc 	.word	0x200565dc
 8014728:	20056624 	.word	0x20056624
 801472c:	2005614c 	.word	0x2005614c
 8014730:	20056148 	.word	0x20056148
 8014734:	20056630 	.word	0x20056630
 8014738:	2005662c 	.word	0x2005662c
 801473c:	e000ed04 	.word	0xe000ed04

08014740 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014740:	b480      	push	{r7}
 8014742:	b083      	sub	sp, #12
 8014744:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8014746:	4b05      	ldr	r3, [pc, #20]	; (801475c <xTaskGetTickCount+0x1c>)
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801474c:	687b      	ldr	r3, [r7, #4]
}
 801474e:	4618      	mov	r0, r3
 8014750:	370c      	adds	r7, #12
 8014752:	46bd      	mov	sp, r7
 8014754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014758:	4770      	bx	lr
 801475a:	bf00      	nop
 801475c:	20056620 	.word	0x20056620

08014760 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014760:	b580      	push	{r7, lr}
 8014762:	b086      	sub	sp, #24
 8014764:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014766:	2300      	movs	r3, #0
 8014768:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801476a:	4b50      	ldr	r3, [pc, #320]	; (80148ac <xTaskIncrementTick+0x14c>)
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	2b00      	cmp	r3, #0
 8014770:	f040 808b 	bne.w	801488a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014774:	4b4e      	ldr	r3, [pc, #312]	; (80148b0 <xTaskIncrementTick+0x150>)
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	3301      	adds	r3, #1
 801477a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801477c:	4a4c      	ldr	r2, [pc, #304]	; (80148b0 <xTaskIncrementTick+0x150>)
 801477e:	693b      	ldr	r3, [r7, #16]
 8014780:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014782:	693b      	ldr	r3, [r7, #16]
 8014784:	2b00      	cmp	r3, #0
 8014786:	d122      	bne.n	80147ce <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8014788:	4b4a      	ldr	r3, [pc, #296]	; (80148b4 <xTaskIncrementTick+0x154>)
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	2b00      	cmp	r3, #0
 8014790:	d00c      	beq.n	80147ac <xTaskIncrementTick+0x4c>
	__asm volatile
 8014792:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014796:	b672      	cpsid	i
 8014798:	f383 8811 	msr	BASEPRI, r3
 801479c:	f3bf 8f6f 	isb	sy
 80147a0:	f3bf 8f4f 	dsb	sy
 80147a4:	b662      	cpsie	i
 80147a6:	603b      	str	r3, [r7, #0]
}
 80147a8:	bf00      	nop
 80147aa:	e7fe      	b.n	80147aa <xTaskIncrementTick+0x4a>
 80147ac:	4b41      	ldr	r3, [pc, #260]	; (80148b4 <xTaskIncrementTick+0x154>)
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	60fb      	str	r3, [r7, #12]
 80147b2:	4b41      	ldr	r3, [pc, #260]	; (80148b8 <xTaskIncrementTick+0x158>)
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	4a3f      	ldr	r2, [pc, #252]	; (80148b4 <xTaskIncrementTick+0x154>)
 80147b8:	6013      	str	r3, [r2, #0]
 80147ba:	4a3f      	ldr	r2, [pc, #252]	; (80148b8 <xTaskIncrementTick+0x158>)
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	6013      	str	r3, [r2, #0]
 80147c0:	4b3e      	ldr	r3, [pc, #248]	; (80148bc <xTaskIncrementTick+0x15c>)
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	3301      	adds	r3, #1
 80147c6:	4a3d      	ldr	r2, [pc, #244]	; (80148bc <xTaskIncrementTick+0x15c>)
 80147c8:	6013      	str	r3, [r2, #0]
 80147ca:	f000 fadf 	bl	8014d8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80147ce:	4b3c      	ldr	r3, [pc, #240]	; (80148c0 <xTaskIncrementTick+0x160>)
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	693a      	ldr	r2, [r7, #16]
 80147d4:	429a      	cmp	r2, r3
 80147d6:	d349      	bcc.n	801486c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80147d8:	4b36      	ldr	r3, [pc, #216]	; (80148b4 <xTaskIncrementTick+0x154>)
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d104      	bne.n	80147ec <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80147e2:	4b37      	ldr	r3, [pc, #220]	; (80148c0 <xTaskIncrementTick+0x160>)
 80147e4:	f04f 32ff 	mov.w	r2, #4294967295
 80147e8:	601a      	str	r2, [r3, #0]
					break;
 80147ea:	e03f      	b.n	801486c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80147ec:	4b31      	ldr	r3, [pc, #196]	; (80148b4 <xTaskIncrementTick+0x154>)
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	68db      	ldr	r3, [r3, #12]
 80147f2:	68db      	ldr	r3, [r3, #12]
 80147f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80147f6:	68bb      	ldr	r3, [r7, #8]
 80147f8:	685b      	ldr	r3, [r3, #4]
 80147fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80147fc:	693a      	ldr	r2, [r7, #16]
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	429a      	cmp	r2, r3
 8014802:	d203      	bcs.n	801480c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014804:	4a2e      	ldr	r2, [pc, #184]	; (80148c0 <xTaskIncrementTick+0x160>)
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801480a:	e02f      	b.n	801486c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801480c:	68bb      	ldr	r3, [r7, #8]
 801480e:	3304      	adds	r3, #4
 8014810:	4618      	mov	r0, r3
 8014812:	f7fe f9e5 	bl	8012be0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014816:	68bb      	ldr	r3, [r7, #8]
 8014818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801481a:	2b00      	cmp	r3, #0
 801481c:	d004      	beq.n	8014828 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801481e:	68bb      	ldr	r3, [r7, #8]
 8014820:	3318      	adds	r3, #24
 8014822:	4618      	mov	r0, r3
 8014824:	f7fe f9dc 	bl	8012be0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014828:	68bb      	ldr	r3, [r7, #8]
 801482a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801482c:	4b25      	ldr	r3, [pc, #148]	; (80148c4 <xTaskIncrementTick+0x164>)
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	429a      	cmp	r2, r3
 8014832:	d903      	bls.n	801483c <xTaskIncrementTick+0xdc>
 8014834:	68bb      	ldr	r3, [r7, #8]
 8014836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014838:	4a22      	ldr	r2, [pc, #136]	; (80148c4 <xTaskIncrementTick+0x164>)
 801483a:	6013      	str	r3, [r2, #0]
 801483c:	68bb      	ldr	r3, [r7, #8]
 801483e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014840:	4613      	mov	r3, r2
 8014842:	009b      	lsls	r3, r3, #2
 8014844:	4413      	add	r3, r2
 8014846:	009b      	lsls	r3, r3, #2
 8014848:	4a1f      	ldr	r2, [pc, #124]	; (80148c8 <xTaskIncrementTick+0x168>)
 801484a:	441a      	add	r2, r3
 801484c:	68bb      	ldr	r3, [r7, #8]
 801484e:	3304      	adds	r3, #4
 8014850:	4619      	mov	r1, r3
 8014852:	4610      	mov	r0, r2
 8014854:	f7fe f967 	bl	8012b26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014858:	68bb      	ldr	r3, [r7, #8]
 801485a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801485c:	4b1b      	ldr	r3, [pc, #108]	; (80148cc <xTaskIncrementTick+0x16c>)
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014862:	429a      	cmp	r2, r3
 8014864:	d3b8      	bcc.n	80147d8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8014866:	2301      	movs	r3, #1
 8014868:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801486a:	e7b5      	b.n	80147d8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801486c:	4b17      	ldr	r3, [pc, #92]	; (80148cc <xTaskIncrementTick+0x16c>)
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014872:	4915      	ldr	r1, [pc, #84]	; (80148c8 <xTaskIncrementTick+0x168>)
 8014874:	4613      	mov	r3, r2
 8014876:	009b      	lsls	r3, r3, #2
 8014878:	4413      	add	r3, r2
 801487a:	009b      	lsls	r3, r3, #2
 801487c:	440b      	add	r3, r1
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	2b01      	cmp	r3, #1
 8014882:	d907      	bls.n	8014894 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8014884:	2301      	movs	r3, #1
 8014886:	617b      	str	r3, [r7, #20]
 8014888:	e004      	b.n	8014894 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801488a:	4b11      	ldr	r3, [pc, #68]	; (80148d0 <xTaskIncrementTick+0x170>)
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	3301      	adds	r3, #1
 8014890:	4a0f      	ldr	r2, [pc, #60]	; (80148d0 <xTaskIncrementTick+0x170>)
 8014892:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8014894:	4b0f      	ldr	r3, [pc, #60]	; (80148d4 <xTaskIncrementTick+0x174>)
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	2b00      	cmp	r3, #0
 801489a:	d001      	beq.n	80148a0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 801489c:	2301      	movs	r3, #1
 801489e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80148a0:	697b      	ldr	r3, [r7, #20]
}
 80148a2:	4618      	mov	r0, r3
 80148a4:	3718      	adds	r7, #24
 80148a6:	46bd      	mov	sp, r7
 80148a8:	bd80      	pop	{r7, pc}
 80148aa:	bf00      	nop
 80148ac:	20056644 	.word	0x20056644
 80148b0:	20056620 	.word	0x20056620
 80148b4:	200565d4 	.word	0x200565d4
 80148b8:	200565d8 	.word	0x200565d8
 80148bc:	20056634 	.word	0x20056634
 80148c0:	2005663c 	.word	0x2005663c
 80148c4:	20056624 	.word	0x20056624
 80148c8:	2005614c 	.word	0x2005614c
 80148cc:	20056148 	.word	0x20056148
 80148d0:	2005662c 	.word	0x2005662c
 80148d4:	20056630 	.word	0x20056630

080148d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80148d8:	b480      	push	{r7}
 80148da:	b085      	sub	sp, #20
 80148dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80148de:	4b29      	ldr	r3, [pc, #164]	; (8014984 <vTaskSwitchContext+0xac>)
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d003      	beq.n	80148ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80148e6:	4b28      	ldr	r3, [pc, #160]	; (8014988 <vTaskSwitchContext+0xb0>)
 80148e8:	2201      	movs	r2, #1
 80148ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80148ec:	e043      	b.n	8014976 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 80148ee:	4b26      	ldr	r3, [pc, #152]	; (8014988 <vTaskSwitchContext+0xb0>)
 80148f0:	2200      	movs	r2, #0
 80148f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80148f4:	4b25      	ldr	r3, [pc, #148]	; (801498c <vTaskSwitchContext+0xb4>)
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	60fb      	str	r3, [r7, #12]
 80148fa:	e012      	b.n	8014922 <vTaskSwitchContext+0x4a>
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d10c      	bne.n	801491c <vTaskSwitchContext+0x44>
	__asm volatile
 8014902:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014906:	b672      	cpsid	i
 8014908:	f383 8811 	msr	BASEPRI, r3
 801490c:	f3bf 8f6f 	isb	sy
 8014910:	f3bf 8f4f 	dsb	sy
 8014914:	b662      	cpsie	i
 8014916:	607b      	str	r3, [r7, #4]
}
 8014918:	bf00      	nop
 801491a:	e7fe      	b.n	801491a <vTaskSwitchContext+0x42>
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	3b01      	subs	r3, #1
 8014920:	60fb      	str	r3, [r7, #12]
 8014922:	491b      	ldr	r1, [pc, #108]	; (8014990 <vTaskSwitchContext+0xb8>)
 8014924:	68fa      	ldr	r2, [r7, #12]
 8014926:	4613      	mov	r3, r2
 8014928:	009b      	lsls	r3, r3, #2
 801492a:	4413      	add	r3, r2
 801492c:	009b      	lsls	r3, r3, #2
 801492e:	440b      	add	r3, r1
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d0e2      	beq.n	80148fc <vTaskSwitchContext+0x24>
 8014936:	68fa      	ldr	r2, [r7, #12]
 8014938:	4613      	mov	r3, r2
 801493a:	009b      	lsls	r3, r3, #2
 801493c:	4413      	add	r3, r2
 801493e:	009b      	lsls	r3, r3, #2
 8014940:	4a13      	ldr	r2, [pc, #76]	; (8014990 <vTaskSwitchContext+0xb8>)
 8014942:	4413      	add	r3, r2
 8014944:	60bb      	str	r3, [r7, #8]
 8014946:	68bb      	ldr	r3, [r7, #8]
 8014948:	685b      	ldr	r3, [r3, #4]
 801494a:	685a      	ldr	r2, [r3, #4]
 801494c:	68bb      	ldr	r3, [r7, #8]
 801494e:	605a      	str	r2, [r3, #4]
 8014950:	68bb      	ldr	r3, [r7, #8]
 8014952:	685a      	ldr	r2, [r3, #4]
 8014954:	68bb      	ldr	r3, [r7, #8]
 8014956:	3308      	adds	r3, #8
 8014958:	429a      	cmp	r2, r3
 801495a:	d104      	bne.n	8014966 <vTaskSwitchContext+0x8e>
 801495c:	68bb      	ldr	r3, [r7, #8]
 801495e:	685b      	ldr	r3, [r3, #4]
 8014960:	685a      	ldr	r2, [r3, #4]
 8014962:	68bb      	ldr	r3, [r7, #8]
 8014964:	605a      	str	r2, [r3, #4]
 8014966:	68bb      	ldr	r3, [r7, #8]
 8014968:	685b      	ldr	r3, [r3, #4]
 801496a:	68db      	ldr	r3, [r3, #12]
 801496c:	4a09      	ldr	r2, [pc, #36]	; (8014994 <vTaskSwitchContext+0xbc>)
 801496e:	6013      	str	r3, [r2, #0]
 8014970:	4a06      	ldr	r2, [pc, #24]	; (801498c <vTaskSwitchContext+0xb4>)
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	6013      	str	r3, [r2, #0]
}
 8014976:	bf00      	nop
 8014978:	3714      	adds	r7, #20
 801497a:	46bd      	mov	sp, r7
 801497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014980:	4770      	bx	lr
 8014982:	bf00      	nop
 8014984:	20056644 	.word	0x20056644
 8014988:	20056630 	.word	0x20056630
 801498c:	20056624 	.word	0x20056624
 8014990:	2005614c 	.word	0x2005614c
 8014994:	20056148 	.word	0x20056148

08014998 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014998:	b580      	push	{r7, lr}
 801499a:	b084      	sub	sp, #16
 801499c:	af00      	add	r7, sp, #0
 801499e:	6078      	str	r0, [r7, #4]
 80149a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d10c      	bne.n	80149c2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80149a8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80149ac:	b672      	cpsid	i
 80149ae:	f383 8811 	msr	BASEPRI, r3
 80149b2:	f3bf 8f6f 	isb	sy
 80149b6:	f3bf 8f4f 	dsb	sy
 80149ba:	b662      	cpsie	i
 80149bc:	60fb      	str	r3, [r7, #12]
}
 80149be:	bf00      	nop
 80149c0:	e7fe      	b.n	80149c0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80149c2:	4b07      	ldr	r3, [pc, #28]	; (80149e0 <vTaskPlaceOnEventList+0x48>)
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	3318      	adds	r3, #24
 80149c8:	4619      	mov	r1, r3
 80149ca:	6878      	ldr	r0, [r7, #4]
 80149cc:	f7fe f8cf 	bl	8012b6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80149d0:	2101      	movs	r1, #1
 80149d2:	6838      	ldr	r0, [r7, #0]
 80149d4:	f000 fb8c 	bl	80150f0 <prvAddCurrentTaskToDelayedList>
}
 80149d8:	bf00      	nop
 80149da:	3710      	adds	r7, #16
 80149dc:	46bd      	mov	sp, r7
 80149de:	bd80      	pop	{r7, pc}
 80149e0:	20056148 	.word	0x20056148

080149e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	b086      	sub	sp, #24
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	60f8      	str	r0, [r7, #12]
 80149ec:	60b9      	str	r1, [r7, #8]
 80149ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d10c      	bne.n	8014a10 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80149f6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80149fa:	b672      	cpsid	i
 80149fc:	f383 8811 	msr	BASEPRI, r3
 8014a00:	f3bf 8f6f 	isb	sy
 8014a04:	f3bf 8f4f 	dsb	sy
 8014a08:	b662      	cpsie	i
 8014a0a:	617b      	str	r3, [r7, #20]
}
 8014a0c:	bf00      	nop
 8014a0e:	e7fe      	b.n	8014a0e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014a10:	4b0a      	ldr	r3, [pc, #40]	; (8014a3c <vTaskPlaceOnEventListRestricted+0x58>)
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	3318      	adds	r3, #24
 8014a16:	4619      	mov	r1, r3
 8014a18:	68f8      	ldr	r0, [r7, #12]
 8014a1a:	f7fe f884 	bl	8012b26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d002      	beq.n	8014a2a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8014a24:	f04f 33ff 	mov.w	r3, #4294967295
 8014a28:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014a2a:	6879      	ldr	r1, [r7, #4]
 8014a2c:	68b8      	ldr	r0, [r7, #8]
 8014a2e:	f000 fb5f 	bl	80150f0 <prvAddCurrentTaskToDelayedList>
	}
 8014a32:	bf00      	nop
 8014a34:	3718      	adds	r7, #24
 8014a36:	46bd      	mov	sp, r7
 8014a38:	bd80      	pop	{r7, pc}
 8014a3a:	bf00      	nop
 8014a3c:	20056148 	.word	0x20056148

08014a40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014a40:	b580      	push	{r7, lr}
 8014a42:	b086      	sub	sp, #24
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	68db      	ldr	r3, [r3, #12]
 8014a4c:	68db      	ldr	r3, [r3, #12]
 8014a4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014a50:	693b      	ldr	r3, [r7, #16]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d10c      	bne.n	8014a70 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8014a56:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014a5a:	b672      	cpsid	i
 8014a5c:	f383 8811 	msr	BASEPRI, r3
 8014a60:	f3bf 8f6f 	isb	sy
 8014a64:	f3bf 8f4f 	dsb	sy
 8014a68:	b662      	cpsie	i
 8014a6a:	60fb      	str	r3, [r7, #12]
}
 8014a6c:	bf00      	nop
 8014a6e:	e7fe      	b.n	8014a6e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014a70:	693b      	ldr	r3, [r7, #16]
 8014a72:	3318      	adds	r3, #24
 8014a74:	4618      	mov	r0, r3
 8014a76:	f7fe f8b3 	bl	8012be0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014a7a:	4b1e      	ldr	r3, [pc, #120]	; (8014af4 <xTaskRemoveFromEventList+0xb4>)
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d11d      	bne.n	8014abe <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014a82:	693b      	ldr	r3, [r7, #16]
 8014a84:	3304      	adds	r3, #4
 8014a86:	4618      	mov	r0, r3
 8014a88:	f7fe f8aa 	bl	8012be0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014a8c:	693b      	ldr	r3, [r7, #16]
 8014a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a90:	4b19      	ldr	r3, [pc, #100]	; (8014af8 <xTaskRemoveFromEventList+0xb8>)
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	429a      	cmp	r2, r3
 8014a96:	d903      	bls.n	8014aa0 <xTaskRemoveFromEventList+0x60>
 8014a98:	693b      	ldr	r3, [r7, #16]
 8014a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a9c:	4a16      	ldr	r2, [pc, #88]	; (8014af8 <xTaskRemoveFromEventList+0xb8>)
 8014a9e:	6013      	str	r3, [r2, #0]
 8014aa0:	693b      	ldr	r3, [r7, #16]
 8014aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014aa4:	4613      	mov	r3, r2
 8014aa6:	009b      	lsls	r3, r3, #2
 8014aa8:	4413      	add	r3, r2
 8014aaa:	009b      	lsls	r3, r3, #2
 8014aac:	4a13      	ldr	r2, [pc, #76]	; (8014afc <xTaskRemoveFromEventList+0xbc>)
 8014aae:	441a      	add	r2, r3
 8014ab0:	693b      	ldr	r3, [r7, #16]
 8014ab2:	3304      	adds	r3, #4
 8014ab4:	4619      	mov	r1, r3
 8014ab6:	4610      	mov	r0, r2
 8014ab8:	f7fe f835 	bl	8012b26 <vListInsertEnd>
 8014abc:	e005      	b.n	8014aca <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014abe:	693b      	ldr	r3, [r7, #16]
 8014ac0:	3318      	adds	r3, #24
 8014ac2:	4619      	mov	r1, r3
 8014ac4:	480e      	ldr	r0, [pc, #56]	; (8014b00 <xTaskRemoveFromEventList+0xc0>)
 8014ac6:	f7fe f82e 	bl	8012b26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014aca:	693b      	ldr	r3, [r7, #16]
 8014acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ace:	4b0d      	ldr	r3, [pc, #52]	; (8014b04 <xTaskRemoveFromEventList+0xc4>)
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ad4:	429a      	cmp	r2, r3
 8014ad6:	d905      	bls.n	8014ae4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014ad8:	2301      	movs	r3, #1
 8014ada:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014adc:	4b0a      	ldr	r3, [pc, #40]	; (8014b08 <xTaskRemoveFromEventList+0xc8>)
 8014ade:	2201      	movs	r2, #1
 8014ae0:	601a      	str	r2, [r3, #0]
 8014ae2:	e001      	b.n	8014ae8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8014ae4:	2300      	movs	r3, #0
 8014ae6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014ae8:	697b      	ldr	r3, [r7, #20]
}
 8014aea:	4618      	mov	r0, r3
 8014aec:	3718      	adds	r7, #24
 8014aee:	46bd      	mov	sp, r7
 8014af0:	bd80      	pop	{r7, pc}
 8014af2:	bf00      	nop
 8014af4:	20056644 	.word	0x20056644
 8014af8:	20056624 	.word	0x20056624
 8014afc:	2005614c 	.word	0x2005614c
 8014b00:	200565dc 	.word	0x200565dc
 8014b04:	20056148 	.word	0x20056148
 8014b08:	20056630 	.word	0x20056630

08014b0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014b0c:	b480      	push	{r7}
 8014b0e:	b083      	sub	sp, #12
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014b14:	4b06      	ldr	r3, [pc, #24]	; (8014b30 <vTaskInternalSetTimeOutState+0x24>)
 8014b16:	681a      	ldr	r2, [r3, #0]
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014b1c:	4b05      	ldr	r3, [pc, #20]	; (8014b34 <vTaskInternalSetTimeOutState+0x28>)
 8014b1e:	681a      	ldr	r2, [r3, #0]
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	605a      	str	r2, [r3, #4]
}
 8014b24:	bf00      	nop
 8014b26:	370c      	adds	r7, #12
 8014b28:	46bd      	mov	sp, r7
 8014b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b2e:	4770      	bx	lr
 8014b30:	20056634 	.word	0x20056634
 8014b34:	20056620 	.word	0x20056620

08014b38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014b38:	b580      	push	{r7, lr}
 8014b3a:	b088      	sub	sp, #32
 8014b3c:	af00      	add	r7, sp, #0
 8014b3e:	6078      	str	r0, [r7, #4]
 8014b40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d10c      	bne.n	8014b62 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8014b48:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014b4c:	b672      	cpsid	i
 8014b4e:	f383 8811 	msr	BASEPRI, r3
 8014b52:	f3bf 8f6f 	isb	sy
 8014b56:	f3bf 8f4f 	dsb	sy
 8014b5a:	b662      	cpsie	i
 8014b5c:	613b      	str	r3, [r7, #16]
}
 8014b5e:	bf00      	nop
 8014b60:	e7fe      	b.n	8014b60 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8014b62:	683b      	ldr	r3, [r7, #0]
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d10c      	bne.n	8014b82 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8014b68:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014b6c:	b672      	cpsid	i
 8014b6e:	f383 8811 	msr	BASEPRI, r3
 8014b72:	f3bf 8f6f 	isb	sy
 8014b76:	f3bf 8f4f 	dsb	sy
 8014b7a:	b662      	cpsie	i
 8014b7c:	60fb      	str	r3, [r7, #12]
}
 8014b7e:	bf00      	nop
 8014b80:	e7fe      	b.n	8014b80 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8014b82:	f7fe f963 	bl	8012e4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014b86:	4b1d      	ldr	r3, [pc, #116]	; (8014bfc <xTaskCheckForTimeOut+0xc4>)
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	685b      	ldr	r3, [r3, #4]
 8014b90:	69ba      	ldr	r2, [r7, #24]
 8014b92:	1ad3      	subs	r3, r2, r3
 8014b94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014b96:	683b      	ldr	r3, [r7, #0]
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b9e:	d102      	bne.n	8014ba6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014ba0:	2300      	movs	r3, #0
 8014ba2:	61fb      	str	r3, [r7, #28]
 8014ba4:	e023      	b.n	8014bee <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	681a      	ldr	r2, [r3, #0]
 8014baa:	4b15      	ldr	r3, [pc, #84]	; (8014c00 <xTaskCheckForTimeOut+0xc8>)
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	429a      	cmp	r2, r3
 8014bb0:	d007      	beq.n	8014bc2 <xTaskCheckForTimeOut+0x8a>
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	685b      	ldr	r3, [r3, #4]
 8014bb6:	69ba      	ldr	r2, [r7, #24]
 8014bb8:	429a      	cmp	r2, r3
 8014bba:	d302      	bcc.n	8014bc2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014bbc:	2301      	movs	r3, #1
 8014bbe:	61fb      	str	r3, [r7, #28]
 8014bc0:	e015      	b.n	8014bee <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014bc2:	683b      	ldr	r3, [r7, #0]
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	697a      	ldr	r2, [r7, #20]
 8014bc8:	429a      	cmp	r2, r3
 8014bca:	d20b      	bcs.n	8014be4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014bcc:	683b      	ldr	r3, [r7, #0]
 8014bce:	681a      	ldr	r2, [r3, #0]
 8014bd0:	697b      	ldr	r3, [r7, #20]
 8014bd2:	1ad2      	subs	r2, r2, r3
 8014bd4:	683b      	ldr	r3, [r7, #0]
 8014bd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014bd8:	6878      	ldr	r0, [r7, #4]
 8014bda:	f7ff ff97 	bl	8014b0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014bde:	2300      	movs	r3, #0
 8014be0:	61fb      	str	r3, [r7, #28]
 8014be2:	e004      	b.n	8014bee <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8014be4:	683b      	ldr	r3, [r7, #0]
 8014be6:	2200      	movs	r2, #0
 8014be8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014bea:	2301      	movs	r3, #1
 8014bec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014bee:	f7fe f961 	bl	8012eb4 <vPortExitCritical>

	return xReturn;
 8014bf2:	69fb      	ldr	r3, [r7, #28]
}
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	3720      	adds	r7, #32
 8014bf8:	46bd      	mov	sp, r7
 8014bfa:	bd80      	pop	{r7, pc}
 8014bfc:	20056620 	.word	0x20056620
 8014c00:	20056634 	.word	0x20056634

08014c04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014c04:	b480      	push	{r7}
 8014c06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014c08:	4b03      	ldr	r3, [pc, #12]	; (8014c18 <vTaskMissedYield+0x14>)
 8014c0a:	2201      	movs	r2, #1
 8014c0c:	601a      	str	r2, [r3, #0]
}
 8014c0e:	bf00      	nop
 8014c10:	46bd      	mov	sp, r7
 8014c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c16:	4770      	bx	lr
 8014c18:	20056630 	.word	0x20056630

08014c1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014c1c:	b580      	push	{r7, lr}
 8014c1e:	b082      	sub	sp, #8
 8014c20:	af00      	add	r7, sp, #0
 8014c22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014c24:	f000 f852 	bl	8014ccc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014c28:	4b06      	ldr	r3, [pc, #24]	; (8014c44 <prvIdleTask+0x28>)
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	2b01      	cmp	r3, #1
 8014c2e:	d9f9      	bls.n	8014c24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014c30:	4b05      	ldr	r3, [pc, #20]	; (8014c48 <prvIdleTask+0x2c>)
 8014c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014c36:	601a      	str	r2, [r3, #0]
 8014c38:	f3bf 8f4f 	dsb	sy
 8014c3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014c40:	e7f0      	b.n	8014c24 <prvIdleTask+0x8>
 8014c42:	bf00      	nop
 8014c44:	2005614c 	.word	0x2005614c
 8014c48:	e000ed04 	.word	0xe000ed04

08014c4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014c4c:	b580      	push	{r7, lr}
 8014c4e:	b082      	sub	sp, #8
 8014c50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014c52:	2300      	movs	r3, #0
 8014c54:	607b      	str	r3, [r7, #4]
 8014c56:	e00c      	b.n	8014c72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014c58:	687a      	ldr	r2, [r7, #4]
 8014c5a:	4613      	mov	r3, r2
 8014c5c:	009b      	lsls	r3, r3, #2
 8014c5e:	4413      	add	r3, r2
 8014c60:	009b      	lsls	r3, r3, #2
 8014c62:	4a12      	ldr	r2, [pc, #72]	; (8014cac <prvInitialiseTaskLists+0x60>)
 8014c64:	4413      	add	r3, r2
 8014c66:	4618      	mov	r0, r3
 8014c68:	f7fd ff30 	bl	8012acc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	3301      	adds	r3, #1
 8014c70:	607b      	str	r3, [r7, #4]
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	2b37      	cmp	r3, #55	; 0x37
 8014c76:	d9ef      	bls.n	8014c58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014c78:	480d      	ldr	r0, [pc, #52]	; (8014cb0 <prvInitialiseTaskLists+0x64>)
 8014c7a:	f7fd ff27 	bl	8012acc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014c7e:	480d      	ldr	r0, [pc, #52]	; (8014cb4 <prvInitialiseTaskLists+0x68>)
 8014c80:	f7fd ff24 	bl	8012acc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014c84:	480c      	ldr	r0, [pc, #48]	; (8014cb8 <prvInitialiseTaskLists+0x6c>)
 8014c86:	f7fd ff21 	bl	8012acc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014c8a:	480c      	ldr	r0, [pc, #48]	; (8014cbc <prvInitialiseTaskLists+0x70>)
 8014c8c:	f7fd ff1e 	bl	8012acc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014c90:	480b      	ldr	r0, [pc, #44]	; (8014cc0 <prvInitialiseTaskLists+0x74>)
 8014c92:	f7fd ff1b 	bl	8012acc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014c96:	4b0b      	ldr	r3, [pc, #44]	; (8014cc4 <prvInitialiseTaskLists+0x78>)
 8014c98:	4a05      	ldr	r2, [pc, #20]	; (8014cb0 <prvInitialiseTaskLists+0x64>)
 8014c9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014c9c:	4b0a      	ldr	r3, [pc, #40]	; (8014cc8 <prvInitialiseTaskLists+0x7c>)
 8014c9e:	4a05      	ldr	r2, [pc, #20]	; (8014cb4 <prvInitialiseTaskLists+0x68>)
 8014ca0:	601a      	str	r2, [r3, #0]
}
 8014ca2:	bf00      	nop
 8014ca4:	3708      	adds	r7, #8
 8014ca6:	46bd      	mov	sp, r7
 8014ca8:	bd80      	pop	{r7, pc}
 8014caa:	bf00      	nop
 8014cac:	2005614c 	.word	0x2005614c
 8014cb0:	200565ac 	.word	0x200565ac
 8014cb4:	200565c0 	.word	0x200565c0
 8014cb8:	200565dc 	.word	0x200565dc
 8014cbc:	200565f0 	.word	0x200565f0
 8014cc0:	20056608 	.word	0x20056608
 8014cc4:	200565d4 	.word	0x200565d4
 8014cc8:	200565d8 	.word	0x200565d8

08014ccc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014ccc:	b580      	push	{r7, lr}
 8014cce:	b082      	sub	sp, #8
 8014cd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014cd2:	e019      	b.n	8014d08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014cd4:	f7fe f8ba 	bl	8012e4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014cd8:	4b10      	ldr	r3, [pc, #64]	; (8014d1c <prvCheckTasksWaitingTermination+0x50>)
 8014cda:	68db      	ldr	r3, [r3, #12]
 8014cdc:	68db      	ldr	r3, [r3, #12]
 8014cde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	3304      	adds	r3, #4
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	f7fd ff7b 	bl	8012be0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014cea:	4b0d      	ldr	r3, [pc, #52]	; (8014d20 <prvCheckTasksWaitingTermination+0x54>)
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	3b01      	subs	r3, #1
 8014cf0:	4a0b      	ldr	r2, [pc, #44]	; (8014d20 <prvCheckTasksWaitingTermination+0x54>)
 8014cf2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014cf4:	4b0b      	ldr	r3, [pc, #44]	; (8014d24 <prvCheckTasksWaitingTermination+0x58>)
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	3b01      	subs	r3, #1
 8014cfa:	4a0a      	ldr	r2, [pc, #40]	; (8014d24 <prvCheckTasksWaitingTermination+0x58>)
 8014cfc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014cfe:	f7fe f8d9 	bl	8012eb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014d02:	6878      	ldr	r0, [r7, #4]
 8014d04:	f000 f810 	bl	8014d28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014d08:	4b06      	ldr	r3, [pc, #24]	; (8014d24 <prvCheckTasksWaitingTermination+0x58>)
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d1e1      	bne.n	8014cd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014d10:	bf00      	nop
 8014d12:	bf00      	nop
 8014d14:	3708      	adds	r7, #8
 8014d16:	46bd      	mov	sp, r7
 8014d18:	bd80      	pop	{r7, pc}
 8014d1a:	bf00      	nop
 8014d1c:	200565f0 	.word	0x200565f0
 8014d20:	2005661c 	.word	0x2005661c
 8014d24:	20056604 	.word	0x20056604

08014d28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014d28:	b580      	push	{r7, lr}
 8014d2a:	b084      	sub	sp, #16
 8014d2c:	af00      	add	r7, sp, #0
 8014d2e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d108      	bne.n	8014d4c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d3e:	4618      	mov	r0, r3
 8014d40:	f7fd fdaa 	bl	8012898 <vPortFree>
				vPortFree( pxTCB );
 8014d44:	6878      	ldr	r0, [r7, #4]
 8014d46:	f7fd fda7 	bl	8012898 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014d4a:	e01a      	b.n	8014d82 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014d52:	2b01      	cmp	r3, #1
 8014d54:	d103      	bne.n	8014d5e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014d56:	6878      	ldr	r0, [r7, #4]
 8014d58:	f7fd fd9e 	bl	8012898 <vPortFree>
	}
 8014d5c:	e011      	b.n	8014d82 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014d64:	2b02      	cmp	r3, #2
 8014d66:	d00c      	beq.n	8014d82 <prvDeleteTCB+0x5a>
	__asm volatile
 8014d68:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014d6c:	b672      	cpsid	i
 8014d6e:	f383 8811 	msr	BASEPRI, r3
 8014d72:	f3bf 8f6f 	isb	sy
 8014d76:	f3bf 8f4f 	dsb	sy
 8014d7a:	b662      	cpsie	i
 8014d7c:	60fb      	str	r3, [r7, #12]
}
 8014d7e:	bf00      	nop
 8014d80:	e7fe      	b.n	8014d80 <prvDeleteTCB+0x58>
	}
 8014d82:	bf00      	nop
 8014d84:	3710      	adds	r7, #16
 8014d86:	46bd      	mov	sp, r7
 8014d88:	bd80      	pop	{r7, pc}
	...

08014d8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014d8c:	b480      	push	{r7}
 8014d8e:	b083      	sub	sp, #12
 8014d90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014d92:	4b0c      	ldr	r3, [pc, #48]	; (8014dc4 <prvResetNextTaskUnblockTime+0x38>)
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	681b      	ldr	r3, [r3, #0]
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d104      	bne.n	8014da6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014d9c:	4b0a      	ldr	r3, [pc, #40]	; (8014dc8 <prvResetNextTaskUnblockTime+0x3c>)
 8014d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8014da2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014da4:	e008      	b.n	8014db8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014da6:	4b07      	ldr	r3, [pc, #28]	; (8014dc4 <prvResetNextTaskUnblockTime+0x38>)
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	68db      	ldr	r3, [r3, #12]
 8014dac:	68db      	ldr	r3, [r3, #12]
 8014dae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	685b      	ldr	r3, [r3, #4]
 8014db4:	4a04      	ldr	r2, [pc, #16]	; (8014dc8 <prvResetNextTaskUnblockTime+0x3c>)
 8014db6:	6013      	str	r3, [r2, #0]
}
 8014db8:	bf00      	nop
 8014dba:	370c      	adds	r7, #12
 8014dbc:	46bd      	mov	sp, r7
 8014dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc2:	4770      	bx	lr
 8014dc4:	200565d4 	.word	0x200565d4
 8014dc8:	2005663c 	.word	0x2005663c

08014dcc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014dcc:	b480      	push	{r7}
 8014dce:	b083      	sub	sp, #12
 8014dd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014dd2:	4b0b      	ldr	r3, [pc, #44]	; (8014e00 <xTaskGetSchedulerState+0x34>)
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d102      	bne.n	8014de0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014dda:	2301      	movs	r3, #1
 8014ddc:	607b      	str	r3, [r7, #4]
 8014dde:	e008      	b.n	8014df2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014de0:	4b08      	ldr	r3, [pc, #32]	; (8014e04 <xTaskGetSchedulerState+0x38>)
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d102      	bne.n	8014dee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014de8:	2302      	movs	r3, #2
 8014dea:	607b      	str	r3, [r7, #4]
 8014dec:	e001      	b.n	8014df2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014dee:	2300      	movs	r3, #0
 8014df0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014df2:	687b      	ldr	r3, [r7, #4]
	}
 8014df4:	4618      	mov	r0, r3
 8014df6:	370c      	adds	r7, #12
 8014df8:	46bd      	mov	sp, r7
 8014dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dfe:	4770      	bx	lr
 8014e00:	20056628 	.word	0x20056628
 8014e04:	20056644 	.word	0x20056644

08014e08 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014e08:	b580      	push	{r7, lr}
 8014e0a:	b084      	sub	sp, #16
 8014e0c:	af00      	add	r7, sp, #0
 8014e0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014e14:	2300      	movs	r3, #0
 8014e16:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d051      	beq.n	8014ec2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014e1e:	68bb      	ldr	r3, [r7, #8]
 8014e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e22:	4b2a      	ldr	r3, [pc, #168]	; (8014ecc <xTaskPriorityInherit+0xc4>)
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e28:	429a      	cmp	r2, r3
 8014e2a:	d241      	bcs.n	8014eb0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014e2c:	68bb      	ldr	r3, [r7, #8]
 8014e2e:	699b      	ldr	r3, [r3, #24]
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	db06      	blt.n	8014e42 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014e34:	4b25      	ldr	r3, [pc, #148]	; (8014ecc <xTaskPriorityInherit+0xc4>)
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e3a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014e3e:	68bb      	ldr	r3, [r7, #8]
 8014e40:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014e42:	68bb      	ldr	r3, [r7, #8]
 8014e44:	6959      	ldr	r1, [r3, #20]
 8014e46:	68bb      	ldr	r3, [r7, #8]
 8014e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e4a:	4613      	mov	r3, r2
 8014e4c:	009b      	lsls	r3, r3, #2
 8014e4e:	4413      	add	r3, r2
 8014e50:	009b      	lsls	r3, r3, #2
 8014e52:	4a1f      	ldr	r2, [pc, #124]	; (8014ed0 <xTaskPriorityInherit+0xc8>)
 8014e54:	4413      	add	r3, r2
 8014e56:	4299      	cmp	r1, r3
 8014e58:	d122      	bne.n	8014ea0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014e5a:	68bb      	ldr	r3, [r7, #8]
 8014e5c:	3304      	adds	r3, #4
 8014e5e:	4618      	mov	r0, r3
 8014e60:	f7fd febe 	bl	8012be0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014e64:	4b19      	ldr	r3, [pc, #100]	; (8014ecc <xTaskPriorityInherit+0xc4>)
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e6a:	68bb      	ldr	r3, [r7, #8]
 8014e6c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014e6e:	68bb      	ldr	r3, [r7, #8]
 8014e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e72:	4b18      	ldr	r3, [pc, #96]	; (8014ed4 <xTaskPriorityInherit+0xcc>)
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	429a      	cmp	r2, r3
 8014e78:	d903      	bls.n	8014e82 <xTaskPriorityInherit+0x7a>
 8014e7a:	68bb      	ldr	r3, [r7, #8]
 8014e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e7e:	4a15      	ldr	r2, [pc, #84]	; (8014ed4 <xTaskPriorityInherit+0xcc>)
 8014e80:	6013      	str	r3, [r2, #0]
 8014e82:	68bb      	ldr	r3, [r7, #8]
 8014e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e86:	4613      	mov	r3, r2
 8014e88:	009b      	lsls	r3, r3, #2
 8014e8a:	4413      	add	r3, r2
 8014e8c:	009b      	lsls	r3, r3, #2
 8014e8e:	4a10      	ldr	r2, [pc, #64]	; (8014ed0 <xTaskPriorityInherit+0xc8>)
 8014e90:	441a      	add	r2, r3
 8014e92:	68bb      	ldr	r3, [r7, #8]
 8014e94:	3304      	adds	r3, #4
 8014e96:	4619      	mov	r1, r3
 8014e98:	4610      	mov	r0, r2
 8014e9a:	f7fd fe44 	bl	8012b26 <vListInsertEnd>
 8014e9e:	e004      	b.n	8014eaa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014ea0:	4b0a      	ldr	r3, [pc, #40]	; (8014ecc <xTaskPriorityInherit+0xc4>)
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ea6:	68bb      	ldr	r3, [r7, #8]
 8014ea8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8014eaa:	2301      	movs	r3, #1
 8014eac:	60fb      	str	r3, [r7, #12]
 8014eae:	e008      	b.n	8014ec2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014eb0:	68bb      	ldr	r3, [r7, #8]
 8014eb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014eb4:	4b05      	ldr	r3, [pc, #20]	; (8014ecc <xTaskPriorityInherit+0xc4>)
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014eba:	429a      	cmp	r2, r3
 8014ebc:	d201      	bcs.n	8014ec2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8014ebe:	2301      	movs	r3, #1
 8014ec0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014ec2:	68fb      	ldr	r3, [r7, #12]
	}
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	3710      	adds	r7, #16
 8014ec8:	46bd      	mov	sp, r7
 8014eca:	bd80      	pop	{r7, pc}
 8014ecc:	20056148 	.word	0x20056148
 8014ed0:	2005614c 	.word	0x2005614c
 8014ed4:	20056624 	.word	0x20056624

08014ed8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014ed8:	b580      	push	{r7, lr}
 8014eda:	b086      	sub	sp, #24
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014ee4:	2300      	movs	r3, #0
 8014ee6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d05a      	beq.n	8014fa4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014eee:	4b30      	ldr	r3, [pc, #192]	; (8014fb0 <xTaskPriorityDisinherit+0xd8>)
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	693a      	ldr	r2, [r7, #16]
 8014ef4:	429a      	cmp	r2, r3
 8014ef6:	d00c      	beq.n	8014f12 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8014ef8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014efc:	b672      	cpsid	i
 8014efe:	f383 8811 	msr	BASEPRI, r3
 8014f02:	f3bf 8f6f 	isb	sy
 8014f06:	f3bf 8f4f 	dsb	sy
 8014f0a:	b662      	cpsie	i
 8014f0c:	60fb      	str	r3, [r7, #12]
}
 8014f0e:	bf00      	nop
 8014f10:	e7fe      	b.n	8014f10 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8014f12:	693b      	ldr	r3, [r7, #16]
 8014f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d10c      	bne.n	8014f34 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8014f1a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014f1e:	b672      	cpsid	i
 8014f20:	f383 8811 	msr	BASEPRI, r3
 8014f24:	f3bf 8f6f 	isb	sy
 8014f28:	f3bf 8f4f 	dsb	sy
 8014f2c:	b662      	cpsie	i
 8014f2e:	60bb      	str	r3, [r7, #8]
}
 8014f30:	bf00      	nop
 8014f32:	e7fe      	b.n	8014f32 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8014f34:	693b      	ldr	r3, [r7, #16]
 8014f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f38:	1e5a      	subs	r2, r3, #1
 8014f3a:	693b      	ldr	r3, [r7, #16]
 8014f3c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014f3e:	693b      	ldr	r3, [r7, #16]
 8014f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f42:	693b      	ldr	r3, [r7, #16]
 8014f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014f46:	429a      	cmp	r2, r3
 8014f48:	d02c      	beq.n	8014fa4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014f4a:	693b      	ldr	r3, [r7, #16]
 8014f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d128      	bne.n	8014fa4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014f52:	693b      	ldr	r3, [r7, #16]
 8014f54:	3304      	adds	r3, #4
 8014f56:	4618      	mov	r0, r3
 8014f58:	f7fd fe42 	bl	8012be0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014f5c:	693b      	ldr	r3, [r7, #16]
 8014f5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014f60:	693b      	ldr	r3, [r7, #16]
 8014f62:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014f64:	693b      	ldr	r3, [r7, #16]
 8014f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f68:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014f6c:	693b      	ldr	r3, [r7, #16]
 8014f6e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014f70:	693b      	ldr	r3, [r7, #16]
 8014f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f74:	4b0f      	ldr	r3, [pc, #60]	; (8014fb4 <xTaskPriorityDisinherit+0xdc>)
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	429a      	cmp	r2, r3
 8014f7a:	d903      	bls.n	8014f84 <xTaskPriorityDisinherit+0xac>
 8014f7c:	693b      	ldr	r3, [r7, #16]
 8014f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f80:	4a0c      	ldr	r2, [pc, #48]	; (8014fb4 <xTaskPriorityDisinherit+0xdc>)
 8014f82:	6013      	str	r3, [r2, #0]
 8014f84:	693b      	ldr	r3, [r7, #16]
 8014f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f88:	4613      	mov	r3, r2
 8014f8a:	009b      	lsls	r3, r3, #2
 8014f8c:	4413      	add	r3, r2
 8014f8e:	009b      	lsls	r3, r3, #2
 8014f90:	4a09      	ldr	r2, [pc, #36]	; (8014fb8 <xTaskPriorityDisinherit+0xe0>)
 8014f92:	441a      	add	r2, r3
 8014f94:	693b      	ldr	r3, [r7, #16]
 8014f96:	3304      	adds	r3, #4
 8014f98:	4619      	mov	r1, r3
 8014f9a:	4610      	mov	r0, r2
 8014f9c:	f7fd fdc3 	bl	8012b26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014fa0:	2301      	movs	r3, #1
 8014fa2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014fa4:	697b      	ldr	r3, [r7, #20]
	}
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	3718      	adds	r7, #24
 8014faa:	46bd      	mov	sp, r7
 8014fac:	bd80      	pop	{r7, pc}
 8014fae:	bf00      	nop
 8014fb0:	20056148 	.word	0x20056148
 8014fb4:	20056624 	.word	0x20056624
 8014fb8:	2005614c 	.word	0x2005614c

08014fbc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014fbc:	b580      	push	{r7, lr}
 8014fbe:	b088      	sub	sp, #32
 8014fc0:	af00      	add	r7, sp, #0
 8014fc2:	6078      	str	r0, [r7, #4]
 8014fc4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8014fca:	2301      	movs	r3, #1
 8014fcc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d06e      	beq.n	80150b2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014fd4:	69bb      	ldr	r3, [r7, #24]
 8014fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d10c      	bne.n	8014ff6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8014fdc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014fe0:	b672      	cpsid	i
 8014fe2:	f383 8811 	msr	BASEPRI, r3
 8014fe6:	f3bf 8f6f 	isb	sy
 8014fea:	f3bf 8f4f 	dsb	sy
 8014fee:	b662      	cpsie	i
 8014ff0:	60fb      	str	r3, [r7, #12]
}
 8014ff2:	bf00      	nop
 8014ff4:	e7fe      	b.n	8014ff4 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8014ff6:	69bb      	ldr	r3, [r7, #24]
 8014ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014ffa:	683a      	ldr	r2, [r7, #0]
 8014ffc:	429a      	cmp	r2, r3
 8014ffe:	d902      	bls.n	8015006 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8015000:	683b      	ldr	r3, [r7, #0]
 8015002:	61fb      	str	r3, [r7, #28]
 8015004:	e002      	b.n	801500c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8015006:	69bb      	ldr	r3, [r7, #24]
 8015008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801500a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801500c:	69bb      	ldr	r3, [r7, #24]
 801500e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015010:	69fa      	ldr	r2, [r7, #28]
 8015012:	429a      	cmp	r2, r3
 8015014:	d04d      	beq.n	80150b2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8015016:	69bb      	ldr	r3, [r7, #24]
 8015018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801501a:	697a      	ldr	r2, [r7, #20]
 801501c:	429a      	cmp	r2, r3
 801501e:	d148      	bne.n	80150b2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8015020:	4b26      	ldr	r3, [pc, #152]	; (80150bc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	69ba      	ldr	r2, [r7, #24]
 8015026:	429a      	cmp	r2, r3
 8015028:	d10c      	bne.n	8015044 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 801502a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801502e:	b672      	cpsid	i
 8015030:	f383 8811 	msr	BASEPRI, r3
 8015034:	f3bf 8f6f 	isb	sy
 8015038:	f3bf 8f4f 	dsb	sy
 801503c:	b662      	cpsie	i
 801503e:	60bb      	str	r3, [r7, #8]
}
 8015040:	bf00      	nop
 8015042:	e7fe      	b.n	8015042 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8015044:	69bb      	ldr	r3, [r7, #24]
 8015046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015048:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801504a:	69bb      	ldr	r3, [r7, #24]
 801504c:	69fa      	ldr	r2, [r7, #28]
 801504e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015050:	69bb      	ldr	r3, [r7, #24]
 8015052:	699b      	ldr	r3, [r3, #24]
 8015054:	2b00      	cmp	r3, #0
 8015056:	db04      	blt.n	8015062 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015058:	69fb      	ldr	r3, [r7, #28]
 801505a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801505e:	69bb      	ldr	r3, [r7, #24]
 8015060:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015062:	69bb      	ldr	r3, [r7, #24]
 8015064:	6959      	ldr	r1, [r3, #20]
 8015066:	693a      	ldr	r2, [r7, #16]
 8015068:	4613      	mov	r3, r2
 801506a:	009b      	lsls	r3, r3, #2
 801506c:	4413      	add	r3, r2
 801506e:	009b      	lsls	r3, r3, #2
 8015070:	4a13      	ldr	r2, [pc, #76]	; (80150c0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8015072:	4413      	add	r3, r2
 8015074:	4299      	cmp	r1, r3
 8015076:	d11c      	bne.n	80150b2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015078:	69bb      	ldr	r3, [r7, #24]
 801507a:	3304      	adds	r3, #4
 801507c:	4618      	mov	r0, r3
 801507e:	f7fd fdaf 	bl	8012be0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8015082:	69bb      	ldr	r3, [r7, #24]
 8015084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015086:	4b0f      	ldr	r3, [pc, #60]	; (80150c4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	429a      	cmp	r2, r3
 801508c:	d903      	bls.n	8015096 <vTaskPriorityDisinheritAfterTimeout+0xda>
 801508e:	69bb      	ldr	r3, [r7, #24]
 8015090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015092:	4a0c      	ldr	r2, [pc, #48]	; (80150c4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8015094:	6013      	str	r3, [r2, #0]
 8015096:	69bb      	ldr	r3, [r7, #24]
 8015098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801509a:	4613      	mov	r3, r2
 801509c:	009b      	lsls	r3, r3, #2
 801509e:	4413      	add	r3, r2
 80150a0:	009b      	lsls	r3, r3, #2
 80150a2:	4a07      	ldr	r2, [pc, #28]	; (80150c0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80150a4:	441a      	add	r2, r3
 80150a6:	69bb      	ldr	r3, [r7, #24]
 80150a8:	3304      	adds	r3, #4
 80150aa:	4619      	mov	r1, r3
 80150ac:	4610      	mov	r0, r2
 80150ae:	f7fd fd3a 	bl	8012b26 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80150b2:	bf00      	nop
 80150b4:	3720      	adds	r7, #32
 80150b6:	46bd      	mov	sp, r7
 80150b8:	bd80      	pop	{r7, pc}
 80150ba:	bf00      	nop
 80150bc:	20056148 	.word	0x20056148
 80150c0:	2005614c 	.word	0x2005614c
 80150c4:	20056624 	.word	0x20056624

080150c8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80150c8:	b480      	push	{r7}
 80150ca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80150cc:	4b07      	ldr	r3, [pc, #28]	; (80150ec <pvTaskIncrementMutexHeldCount+0x24>)
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d004      	beq.n	80150de <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80150d4:	4b05      	ldr	r3, [pc, #20]	; (80150ec <pvTaskIncrementMutexHeldCount+0x24>)
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80150da:	3201      	adds	r2, #1
 80150dc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80150de:	4b03      	ldr	r3, [pc, #12]	; (80150ec <pvTaskIncrementMutexHeldCount+0x24>)
 80150e0:	681b      	ldr	r3, [r3, #0]
	}
 80150e2:	4618      	mov	r0, r3
 80150e4:	46bd      	mov	sp, r7
 80150e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ea:	4770      	bx	lr
 80150ec:	20056148 	.word	0x20056148

080150f0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b084      	sub	sp, #16
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	6078      	str	r0, [r7, #4]
 80150f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80150fa:	4b21      	ldr	r3, [pc, #132]	; (8015180 <prvAddCurrentTaskToDelayedList+0x90>)
 80150fc:	681b      	ldr	r3, [r3, #0]
 80150fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015100:	4b20      	ldr	r3, [pc, #128]	; (8015184 <prvAddCurrentTaskToDelayedList+0x94>)
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	3304      	adds	r3, #4
 8015106:	4618      	mov	r0, r3
 8015108:	f7fd fd6a 	bl	8012be0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015112:	d10a      	bne.n	801512a <prvAddCurrentTaskToDelayedList+0x3a>
 8015114:	683b      	ldr	r3, [r7, #0]
 8015116:	2b00      	cmp	r3, #0
 8015118:	d007      	beq.n	801512a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801511a:	4b1a      	ldr	r3, [pc, #104]	; (8015184 <prvAddCurrentTaskToDelayedList+0x94>)
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	3304      	adds	r3, #4
 8015120:	4619      	mov	r1, r3
 8015122:	4819      	ldr	r0, [pc, #100]	; (8015188 <prvAddCurrentTaskToDelayedList+0x98>)
 8015124:	f7fd fcff 	bl	8012b26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015128:	e026      	b.n	8015178 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801512a:	68fa      	ldr	r2, [r7, #12]
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	4413      	add	r3, r2
 8015130:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015132:	4b14      	ldr	r3, [pc, #80]	; (8015184 <prvAddCurrentTaskToDelayedList+0x94>)
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	68ba      	ldr	r2, [r7, #8]
 8015138:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801513a:	68ba      	ldr	r2, [r7, #8]
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	429a      	cmp	r2, r3
 8015140:	d209      	bcs.n	8015156 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015142:	4b12      	ldr	r3, [pc, #72]	; (801518c <prvAddCurrentTaskToDelayedList+0x9c>)
 8015144:	681a      	ldr	r2, [r3, #0]
 8015146:	4b0f      	ldr	r3, [pc, #60]	; (8015184 <prvAddCurrentTaskToDelayedList+0x94>)
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	3304      	adds	r3, #4
 801514c:	4619      	mov	r1, r3
 801514e:	4610      	mov	r0, r2
 8015150:	f7fd fd0d 	bl	8012b6e <vListInsert>
}
 8015154:	e010      	b.n	8015178 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015156:	4b0e      	ldr	r3, [pc, #56]	; (8015190 <prvAddCurrentTaskToDelayedList+0xa0>)
 8015158:	681a      	ldr	r2, [r3, #0]
 801515a:	4b0a      	ldr	r3, [pc, #40]	; (8015184 <prvAddCurrentTaskToDelayedList+0x94>)
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	3304      	adds	r3, #4
 8015160:	4619      	mov	r1, r3
 8015162:	4610      	mov	r0, r2
 8015164:	f7fd fd03 	bl	8012b6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015168:	4b0a      	ldr	r3, [pc, #40]	; (8015194 <prvAddCurrentTaskToDelayedList+0xa4>)
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	68ba      	ldr	r2, [r7, #8]
 801516e:	429a      	cmp	r2, r3
 8015170:	d202      	bcs.n	8015178 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8015172:	4a08      	ldr	r2, [pc, #32]	; (8015194 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015174:	68bb      	ldr	r3, [r7, #8]
 8015176:	6013      	str	r3, [r2, #0]
}
 8015178:	bf00      	nop
 801517a:	3710      	adds	r7, #16
 801517c:	46bd      	mov	sp, r7
 801517e:	bd80      	pop	{r7, pc}
 8015180:	20056620 	.word	0x20056620
 8015184:	20056148 	.word	0x20056148
 8015188:	20056608 	.word	0x20056608
 801518c:	200565d8 	.word	0x200565d8
 8015190:	200565d4 	.word	0x200565d4
 8015194:	2005663c 	.word	0x2005663c

08015198 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015198:	b580      	push	{r7, lr}
 801519a:	b08a      	sub	sp, #40	; 0x28
 801519c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801519e:	2300      	movs	r3, #0
 80151a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80151a2:	f000 fb15 	bl	80157d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80151a6:	4b1d      	ldr	r3, [pc, #116]	; (801521c <xTimerCreateTimerTask+0x84>)
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d021      	beq.n	80151f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80151ae:	2300      	movs	r3, #0
 80151b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80151b2:	2300      	movs	r3, #0
 80151b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80151b6:	1d3a      	adds	r2, r7, #4
 80151b8:	f107 0108 	add.w	r1, r7, #8
 80151bc:	f107 030c 	add.w	r3, r7, #12
 80151c0:	4618      	mov	r0, r3
 80151c2:	f7fd fa85 	bl	80126d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80151c6:	6879      	ldr	r1, [r7, #4]
 80151c8:	68bb      	ldr	r3, [r7, #8]
 80151ca:	68fa      	ldr	r2, [r7, #12]
 80151cc:	9202      	str	r2, [sp, #8]
 80151ce:	9301      	str	r3, [sp, #4]
 80151d0:	2302      	movs	r3, #2
 80151d2:	9300      	str	r3, [sp, #0]
 80151d4:	2300      	movs	r3, #0
 80151d6:	460a      	mov	r2, r1
 80151d8:	4911      	ldr	r1, [pc, #68]	; (8015220 <xTimerCreateTimerTask+0x88>)
 80151da:	4812      	ldr	r0, [pc, #72]	; (8015224 <xTimerCreateTimerTask+0x8c>)
 80151dc:	f7fe ffb8 	bl	8014150 <xTaskCreateStatic>
 80151e0:	4603      	mov	r3, r0
 80151e2:	4a11      	ldr	r2, [pc, #68]	; (8015228 <xTimerCreateTimerTask+0x90>)
 80151e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80151e6:	4b10      	ldr	r3, [pc, #64]	; (8015228 <xTimerCreateTimerTask+0x90>)
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d001      	beq.n	80151f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80151ee:	2301      	movs	r3, #1
 80151f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80151f2:	697b      	ldr	r3, [r7, #20]
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d10c      	bne.n	8015212 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80151f8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80151fc:	b672      	cpsid	i
 80151fe:	f383 8811 	msr	BASEPRI, r3
 8015202:	f3bf 8f6f 	isb	sy
 8015206:	f3bf 8f4f 	dsb	sy
 801520a:	b662      	cpsie	i
 801520c:	613b      	str	r3, [r7, #16]
}
 801520e:	bf00      	nop
 8015210:	e7fe      	b.n	8015210 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8015212:	697b      	ldr	r3, [r7, #20]
}
 8015214:	4618      	mov	r0, r3
 8015216:	3718      	adds	r7, #24
 8015218:	46bd      	mov	sp, r7
 801521a:	bd80      	pop	{r7, pc}
 801521c:	20056678 	.word	0x20056678
 8015220:	0802be1c 	.word	0x0802be1c
 8015224:	08015369 	.word	0x08015369
 8015228:	2005667c 	.word	0x2005667c

0801522c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801522c:	b580      	push	{r7, lr}
 801522e:	b08a      	sub	sp, #40	; 0x28
 8015230:	af00      	add	r7, sp, #0
 8015232:	60f8      	str	r0, [r7, #12]
 8015234:	60b9      	str	r1, [r7, #8]
 8015236:	607a      	str	r2, [r7, #4]
 8015238:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801523a:	2300      	movs	r3, #0
 801523c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	2b00      	cmp	r3, #0
 8015242:	d10c      	bne.n	801525e <xTimerGenericCommand+0x32>
	__asm volatile
 8015244:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015248:	b672      	cpsid	i
 801524a:	f383 8811 	msr	BASEPRI, r3
 801524e:	f3bf 8f6f 	isb	sy
 8015252:	f3bf 8f4f 	dsb	sy
 8015256:	b662      	cpsie	i
 8015258:	623b      	str	r3, [r7, #32]
}
 801525a:	bf00      	nop
 801525c:	e7fe      	b.n	801525c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801525e:	4b1a      	ldr	r3, [pc, #104]	; (80152c8 <xTimerGenericCommand+0x9c>)
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	2b00      	cmp	r3, #0
 8015264:	d02a      	beq.n	80152bc <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015266:	68bb      	ldr	r3, [r7, #8]
 8015268:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015272:	68bb      	ldr	r3, [r7, #8]
 8015274:	2b05      	cmp	r3, #5
 8015276:	dc18      	bgt.n	80152aa <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015278:	f7ff fda8 	bl	8014dcc <xTaskGetSchedulerState>
 801527c:	4603      	mov	r3, r0
 801527e:	2b02      	cmp	r3, #2
 8015280:	d109      	bne.n	8015296 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015282:	4b11      	ldr	r3, [pc, #68]	; (80152c8 <xTimerGenericCommand+0x9c>)
 8015284:	6818      	ldr	r0, [r3, #0]
 8015286:	f107 0110 	add.w	r1, r7, #16
 801528a:	2300      	movs	r3, #0
 801528c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801528e:	f7fe f8cd 	bl	801342c <xQueueGenericSend>
 8015292:	6278      	str	r0, [r7, #36]	; 0x24
 8015294:	e012      	b.n	80152bc <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015296:	4b0c      	ldr	r3, [pc, #48]	; (80152c8 <xTimerGenericCommand+0x9c>)
 8015298:	6818      	ldr	r0, [r3, #0]
 801529a:	f107 0110 	add.w	r1, r7, #16
 801529e:	2300      	movs	r3, #0
 80152a0:	2200      	movs	r2, #0
 80152a2:	f7fe f8c3 	bl	801342c <xQueueGenericSend>
 80152a6:	6278      	str	r0, [r7, #36]	; 0x24
 80152a8:	e008      	b.n	80152bc <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80152aa:	4b07      	ldr	r3, [pc, #28]	; (80152c8 <xTimerGenericCommand+0x9c>)
 80152ac:	6818      	ldr	r0, [r3, #0]
 80152ae:	f107 0110 	add.w	r1, r7, #16
 80152b2:	2300      	movs	r3, #0
 80152b4:	683a      	ldr	r2, [r7, #0]
 80152b6:	f7fe f9bf 	bl	8013638 <xQueueGenericSendFromISR>
 80152ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80152bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80152be:	4618      	mov	r0, r3
 80152c0:	3728      	adds	r7, #40	; 0x28
 80152c2:	46bd      	mov	sp, r7
 80152c4:	bd80      	pop	{r7, pc}
 80152c6:	bf00      	nop
 80152c8:	20056678 	.word	0x20056678

080152cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80152cc:	b580      	push	{r7, lr}
 80152ce:	b088      	sub	sp, #32
 80152d0:	af02      	add	r7, sp, #8
 80152d2:	6078      	str	r0, [r7, #4]
 80152d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80152d6:	4b23      	ldr	r3, [pc, #140]	; (8015364 <prvProcessExpiredTimer+0x98>)
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	68db      	ldr	r3, [r3, #12]
 80152dc:	68db      	ldr	r3, [r3, #12]
 80152de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80152e0:	697b      	ldr	r3, [r7, #20]
 80152e2:	3304      	adds	r3, #4
 80152e4:	4618      	mov	r0, r3
 80152e6:	f7fd fc7b 	bl	8012be0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80152ea:	697b      	ldr	r3, [r7, #20]
 80152ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80152f0:	f003 0304 	and.w	r3, r3, #4
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d024      	beq.n	8015342 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80152f8:	697b      	ldr	r3, [r7, #20]
 80152fa:	699a      	ldr	r2, [r3, #24]
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	18d1      	adds	r1, r2, r3
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	683a      	ldr	r2, [r7, #0]
 8015304:	6978      	ldr	r0, [r7, #20]
 8015306:	f000 f8d3 	bl	80154b0 <prvInsertTimerInActiveList>
 801530a:	4603      	mov	r3, r0
 801530c:	2b00      	cmp	r3, #0
 801530e:	d021      	beq.n	8015354 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015310:	2300      	movs	r3, #0
 8015312:	9300      	str	r3, [sp, #0]
 8015314:	2300      	movs	r3, #0
 8015316:	687a      	ldr	r2, [r7, #4]
 8015318:	2100      	movs	r1, #0
 801531a:	6978      	ldr	r0, [r7, #20]
 801531c:	f7ff ff86 	bl	801522c <xTimerGenericCommand>
 8015320:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015322:	693b      	ldr	r3, [r7, #16]
 8015324:	2b00      	cmp	r3, #0
 8015326:	d115      	bne.n	8015354 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8015328:	f04f 0330 	mov.w	r3, #48	; 0x30
 801532c:	b672      	cpsid	i
 801532e:	f383 8811 	msr	BASEPRI, r3
 8015332:	f3bf 8f6f 	isb	sy
 8015336:	f3bf 8f4f 	dsb	sy
 801533a:	b662      	cpsie	i
 801533c:	60fb      	str	r3, [r7, #12]
}
 801533e:	bf00      	nop
 8015340:	e7fe      	b.n	8015340 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015342:	697b      	ldr	r3, [r7, #20]
 8015344:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015348:	f023 0301 	bic.w	r3, r3, #1
 801534c:	b2da      	uxtb	r2, r3
 801534e:	697b      	ldr	r3, [r7, #20]
 8015350:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015354:	697b      	ldr	r3, [r7, #20]
 8015356:	6a1b      	ldr	r3, [r3, #32]
 8015358:	6978      	ldr	r0, [r7, #20]
 801535a:	4798      	blx	r3
}
 801535c:	bf00      	nop
 801535e:	3718      	adds	r7, #24
 8015360:	46bd      	mov	sp, r7
 8015362:	bd80      	pop	{r7, pc}
 8015364:	20056670 	.word	0x20056670

08015368 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015368:	b580      	push	{r7, lr}
 801536a:	b084      	sub	sp, #16
 801536c:	af00      	add	r7, sp, #0
 801536e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015370:	f107 0308 	add.w	r3, r7, #8
 8015374:	4618      	mov	r0, r3
 8015376:	f000 f857 	bl	8015428 <prvGetNextExpireTime>
 801537a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801537c:	68bb      	ldr	r3, [r7, #8]
 801537e:	4619      	mov	r1, r3
 8015380:	68f8      	ldr	r0, [r7, #12]
 8015382:	f000 f803 	bl	801538c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8015386:	f000 f8d5 	bl	8015534 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801538a:	e7f1      	b.n	8015370 <prvTimerTask+0x8>

0801538c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801538c:	b580      	push	{r7, lr}
 801538e:	b084      	sub	sp, #16
 8015390:	af00      	add	r7, sp, #0
 8015392:	6078      	str	r0, [r7, #4]
 8015394:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8015396:	f7ff f925 	bl	80145e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801539a:	f107 0308 	add.w	r3, r7, #8
 801539e:	4618      	mov	r0, r3
 80153a0:	f000 f866 	bl	8015470 <prvSampleTimeNow>
 80153a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80153a6:	68bb      	ldr	r3, [r7, #8]
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d130      	bne.n	801540e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80153ac:	683b      	ldr	r3, [r7, #0]
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d10a      	bne.n	80153c8 <prvProcessTimerOrBlockTask+0x3c>
 80153b2:	687a      	ldr	r2, [r7, #4]
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	429a      	cmp	r2, r3
 80153b8:	d806      	bhi.n	80153c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80153ba:	f7ff f921 	bl	8014600 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80153be:	68f9      	ldr	r1, [r7, #12]
 80153c0:	6878      	ldr	r0, [r7, #4]
 80153c2:	f7ff ff83 	bl	80152cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80153c6:	e024      	b.n	8015412 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80153c8:	683b      	ldr	r3, [r7, #0]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d008      	beq.n	80153e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80153ce:	4b13      	ldr	r3, [pc, #76]	; (801541c <prvProcessTimerOrBlockTask+0x90>)
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d101      	bne.n	80153dc <prvProcessTimerOrBlockTask+0x50>
 80153d8:	2301      	movs	r3, #1
 80153da:	e000      	b.n	80153de <prvProcessTimerOrBlockTask+0x52>
 80153dc:	2300      	movs	r3, #0
 80153de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80153e0:	4b0f      	ldr	r3, [pc, #60]	; (8015420 <prvProcessTimerOrBlockTask+0x94>)
 80153e2:	6818      	ldr	r0, [r3, #0]
 80153e4:	687a      	ldr	r2, [r7, #4]
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	1ad3      	subs	r3, r2, r3
 80153ea:	683a      	ldr	r2, [r7, #0]
 80153ec:	4619      	mov	r1, r3
 80153ee:	f7fe fe7b 	bl	80140e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80153f2:	f7ff f905 	bl	8014600 <xTaskResumeAll>
 80153f6:	4603      	mov	r3, r0
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d10a      	bne.n	8015412 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80153fc:	4b09      	ldr	r3, [pc, #36]	; (8015424 <prvProcessTimerOrBlockTask+0x98>)
 80153fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015402:	601a      	str	r2, [r3, #0]
 8015404:	f3bf 8f4f 	dsb	sy
 8015408:	f3bf 8f6f 	isb	sy
}
 801540c:	e001      	b.n	8015412 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801540e:	f7ff f8f7 	bl	8014600 <xTaskResumeAll>
}
 8015412:	bf00      	nop
 8015414:	3710      	adds	r7, #16
 8015416:	46bd      	mov	sp, r7
 8015418:	bd80      	pop	{r7, pc}
 801541a:	bf00      	nop
 801541c:	20056674 	.word	0x20056674
 8015420:	20056678 	.word	0x20056678
 8015424:	e000ed04 	.word	0xe000ed04

08015428 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015428:	b480      	push	{r7}
 801542a:	b085      	sub	sp, #20
 801542c:	af00      	add	r7, sp, #0
 801542e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015430:	4b0e      	ldr	r3, [pc, #56]	; (801546c <prvGetNextExpireTime+0x44>)
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	2b00      	cmp	r3, #0
 8015438:	d101      	bne.n	801543e <prvGetNextExpireTime+0x16>
 801543a:	2201      	movs	r2, #1
 801543c:	e000      	b.n	8015440 <prvGetNextExpireTime+0x18>
 801543e:	2200      	movs	r2, #0
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	2b00      	cmp	r3, #0
 801544a:	d105      	bne.n	8015458 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801544c:	4b07      	ldr	r3, [pc, #28]	; (801546c <prvGetNextExpireTime+0x44>)
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	68db      	ldr	r3, [r3, #12]
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	60fb      	str	r3, [r7, #12]
 8015456:	e001      	b.n	801545c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015458:	2300      	movs	r3, #0
 801545a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801545c:	68fb      	ldr	r3, [r7, #12]
}
 801545e:	4618      	mov	r0, r3
 8015460:	3714      	adds	r7, #20
 8015462:	46bd      	mov	sp, r7
 8015464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015468:	4770      	bx	lr
 801546a:	bf00      	nop
 801546c:	20056670 	.word	0x20056670

08015470 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015470:	b580      	push	{r7, lr}
 8015472:	b084      	sub	sp, #16
 8015474:	af00      	add	r7, sp, #0
 8015476:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015478:	f7ff f962 	bl	8014740 <xTaskGetTickCount>
 801547c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801547e:	4b0b      	ldr	r3, [pc, #44]	; (80154ac <prvSampleTimeNow+0x3c>)
 8015480:	681b      	ldr	r3, [r3, #0]
 8015482:	68fa      	ldr	r2, [r7, #12]
 8015484:	429a      	cmp	r2, r3
 8015486:	d205      	bcs.n	8015494 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015488:	f000 f93c 	bl	8015704 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	2201      	movs	r2, #1
 8015490:	601a      	str	r2, [r3, #0]
 8015492:	e002      	b.n	801549a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	2200      	movs	r2, #0
 8015498:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801549a:	4a04      	ldr	r2, [pc, #16]	; (80154ac <prvSampleTimeNow+0x3c>)
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80154a0:	68fb      	ldr	r3, [r7, #12]
}
 80154a2:	4618      	mov	r0, r3
 80154a4:	3710      	adds	r7, #16
 80154a6:	46bd      	mov	sp, r7
 80154a8:	bd80      	pop	{r7, pc}
 80154aa:	bf00      	nop
 80154ac:	20056680 	.word	0x20056680

080154b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80154b0:	b580      	push	{r7, lr}
 80154b2:	b086      	sub	sp, #24
 80154b4:	af00      	add	r7, sp, #0
 80154b6:	60f8      	str	r0, [r7, #12]
 80154b8:	60b9      	str	r1, [r7, #8]
 80154ba:	607a      	str	r2, [r7, #4]
 80154bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80154be:	2300      	movs	r3, #0
 80154c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80154c2:	68fb      	ldr	r3, [r7, #12]
 80154c4:	68ba      	ldr	r2, [r7, #8]
 80154c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80154c8:	68fb      	ldr	r3, [r7, #12]
 80154ca:	68fa      	ldr	r2, [r7, #12]
 80154cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80154ce:	68ba      	ldr	r2, [r7, #8]
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	429a      	cmp	r2, r3
 80154d4:	d812      	bhi.n	80154fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80154d6:	687a      	ldr	r2, [r7, #4]
 80154d8:	683b      	ldr	r3, [r7, #0]
 80154da:	1ad2      	subs	r2, r2, r3
 80154dc:	68fb      	ldr	r3, [r7, #12]
 80154de:	699b      	ldr	r3, [r3, #24]
 80154e0:	429a      	cmp	r2, r3
 80154e2:	d302      	bcc.n	80154ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80154e4:	2301      	movs	r3, #1
 80154e6:	617b      	str	r3, [r7, #20]
 80154e8:	e01b      	b.n	8015522 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80154ea:	4b10      	ldr	r3, [pc, #64]	; (801552c <prvInsertTimerInActiveList+0x7c>)
 80154ec:	681a      	ldr	r2, [r3, #0]
 80154ee:	68fb      	ldr	r3, [r7, #12]
 80154f0:	3304      	adds	r3, #4
 80154f2:	4619      	mov	r1, r3
 80154f4:	4610      	mov	r0, r2
 80154f6:	f7fd fb3a 	bl	8012b6e <vListInsert>
 80154fa:	e012      	b.n	8015522 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80154fc:	687a      	ldr	r2, [r7, #4]
 80154fe:	683b      	ldr	r3, [r7, #0]
 8015500:	429a      	cmp	r2, r3
 8015502:	d206      	bcs.n	8015512 <prvInsertTimerInActiveList+0x62>
 8015504:	68ba      	ldr	r2, [r7, #8]
 8015506:	683b      	ldr	r3, [r7, #0]
 8015508:	429a      	cmp	r2, r3
 801550a:	d302      	bcc.n	8015512 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801550c:	2301      	movs	r3, #1
 801550e:	617b      	str	r3, [r7, #20]
 8015510:	e007      	b.n	8015522 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015512:	4b07      	ldr	r3, [pc, #28]	; (8015530 <prvInsertTimerInActiveList+0x80>)
 8015514:	681a      	ldr	r2, [r3, #0]
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	3304      	adds	r3, #4
 801551a:	4619      	mov	r1, r3
 801551c:	4610      	mov	r0, r2
 801551e:	f7fd fb26 	bl	8012b6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015522:	697b      	ldr	r3, [r7, #20]
}
 8015524:	4618      	mov	r0, r3
 8015526:	3718      	adds	r7, #24
 8015528:	46bd      	mov	sp, r7
 801552a:	bd80      	pop	{r7, pc}
 801552c:	20056674 	.word	0x20056674
 8015530:	20056670 	.word	0x20056670

08015534 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015534:	b580      	push	{r7, lr}
 8015536:	b08e      	sub	sp, #56	; 0x38
 8015538:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801553a:	e0d0      	b.n	80156de <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	2b00      	cmp	r3, #0
 8015540:	da1a      	bge.n	8015578 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015542:	1d3b      	adds	r3, r7, #4
 8015544:	3304      	adds	r3, #4
 8015546:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801554a:	2b00      	cmp	r3, #0
 801554c:	d10c      	bne.n	8015568 <prvProcessReceivedCommands+0x34>
	__asm volatile
 801554e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015552:	b672      	cpsid	i
 8015554:	f383 8811 	msr	BASEPRI, r3
 8015558:	f3bf 8f6f 	isb	sy
 801555c:	f3bf 8f4f 	dsb	sy
 8015560:	b662      	cpsie	i
 8015562:	61fb      	str	r3, [r7, #28]
}
 8015564:	bf00      	nop
 8015566:	e7fe      	b.n	8015566 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801556e:	6850      	ldr	r0, [r2, #4]
 8015570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015572:	6892      	ldr	r2, [r2, #8]
 8015574:	4611      	mov	r1, r2
 8015576:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	2b00      	cmp	r3, #0
 801557c:	f2c0 80ae 	blt.w	80156dc <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015586:	695b      	ldr	r3, [r3, #20]
 8015588:	2b00      	cmp	r3, #0
 801558a:	d004      	beq.n	8015596 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801558c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801558e:	3304      	adds	r3, #4
 8015590:	4618      	mov	r0, r3
 8015592:	f7fd fb25 	bl	8012be0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015596:	463b      	mov	r3, r7
 8015598:	4618      	mov	r0, r3
 801559a:	f7ff ff69 	bl	8015470 <prvSampleTimeNow>
 801559e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	2b09      	cmp	r3, #9
 80155a4:	f200 809b 	bhi.w	80156de <prvProcessReceivedCommands+0x1aa>
 80155a8:	a201      	add	r2, pc, #4	; (adr r2, 80155b0 <prvProcessReceivedCommands+0x7c>)
 80155aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155ae:	bf00      	nop
 80155b0:	080155d9 	.word	0x080155d9
 80155b4:	080155d9 	.word	0x080155d9
 80155b8:	080155d9 	.word	0x080155d9
 80155bc:	08015651 	.word	0x08015651
 80155c0:	08015665 	.word	0x08015665
 80155c4:	080156b3 	.word	0x080156b3
 80155c8:	080155d9 	.word	0x080155d9
 80155cc:	080155d9 	.word	0x080155d9
 80155d0:	08015651 	.word	0x08015651
 80155d4:	08015665 	.word	0x08015665
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80155d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80155de:	f043 0301 	orr.w	r3, r3, #1
 80155e2:	b2da      	uxtb	r2, r3
 80155e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80155ea:	68ba      	ldr	r2, [r7, #8]
 80155ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155ee:	699b      	ldr	r3, [r3, #24]
 80155f0:	18d1      	adds	r1, r2, r3
 80155f2:	68bb      	ldr	r3, [r7, #8]
 80155f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80155f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80155f8:	f7ff ff5a 	bl	80154b0 <prvInsertTimerInActiveList>
 80155fc:	4603      	mov	r3, r0
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d06d      	beq.n	80156de <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015604:	6a1b      	ldr	r3, [r3, #32]
 8015606:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015608:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801560a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801560c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015610:	f003 0304 	and.w	r3, r3, #4
 8015614:	2b00      	cmp	r3, #0
 8015616:	d062      	beq.n	80156de <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015618:	68ba      	ldr	r2, [r7, #8]
 801561a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801561c:	699b      	ldr	r3, [r3, #24]
 801561e:	441a      	add	r2, r3
 8015620:	2300      	movs	r3, #0
 8015622:	9300      	str	r3, [sp, #0]
 8015624:	2300      	movs	r3, #0
 8015626:	2100      	movs	r1, #0
 8015628:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801562a:	f7ff fdff 	bl	801522c <xTimerGenericCommand>
 801562e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015630:	6a3b      	ldr	r3, [r7, #32]
 8015632:	2b00      	cmp	r3, #0
 8015634:	d153      	bne.n	80156de <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8015636:	f04f 0330 	mov.w	r3, #48	; 0x30
 801563a:	b672      	cpsid	i
 801563c:	f383 8811 	msr	BASEPRI, r3
 8015640:	f3bf 8f6f 	isb	sy
 8015644:	f3bf 8f4f 	dsb	sy
 8015648:	b662      	cpsie	i
 801564a:	61bb      	str	r3, [r7, #24]
}
 801564c:	bf00      	nop
 801564e:	e7fe      	b.n	801564e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015652:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015656:	f023 0301 	bic.w	r3, r3, #1
 801565a:	b2da      	uxtb	r2, r3
 801565c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801565e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8015662:	e03c      	b.n	80156de <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015666:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801566a:	f043 0301 	orr.w	r3, r3, #1
 801566e:	b2da      	uxtb	r2, r3
 8015670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015672:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015676:	68ba      	ldr	r2, [r7, #8]
 8015678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801567a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801567c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801567e:	699b      	ldr	r3, [r3, #24]
 8015680:	2b00      	cmp	r3, #0
 8015682:	d10c      	bne.n	801569e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8015684:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015688:	b672      	cpsid	i
 801568a:	f383 8811 	msr	BASEPRI, r3
 801568e:	f3bf 8f6f 	isb	sy
 8015692:	f3bf 8f4f 	dsb	sy
 8015696:	b662      	cpsie	i
 8015698:	617b      	str	r3, [r7, #20]
}
 801569a:	bf00      	nop
 801569c:	e7fe      	b.n	801569c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801569e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156a0:	699a      	ldr	r2, [r3, #24]
 80156a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156a4:	18d1      	adds	r1, r2, r3
 80156a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80156aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80156ac:	f7ff ff00 	bl	80154b0 <prvInsertTimerInActiveList>
					break;
 80156b0:	e015      	b.n	80156de <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80156b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80156b8:	f003 0302 	and.w	r3, r3, #2
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d103      	bne.n	80156c8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80156c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80156c2:	f7fd f8e9 	bl	8012898 <vPortFree>
 80156c6:	e00a      	b.n	80156de <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80156c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80156ce:	f023 0301 	bic.w	r3, r3, #1
 80156d2:	b2da      	uxtb	r2, r3
 80156d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80156da:	e000      	b.n	80156de <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80156dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80156de:	4b08      	ldr	r3, [pc, #32]	; (8015700 <prvProcessReceivedCommands+0x1cc>)
 80156e0:	681b      	ldr	r3, [r3, #0]
 80156e2:	1d39      	adds	r1, r7, #4
 80156e4:	2200      	movs	r2, #0
 80156e6:	4618      	mov	r0, r3
 80156e8:	f7fe f8dc 	bl	80138a4 <xQueueReceive>
 80156ec:	4603      	mov	r3, r0
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	f47f af24 	bne.w	801553c <prvProcessReceivedCommands+0x8>
	}
}
 80156f4:	bf00      	nop
 80156f6:	bf00      	nop
 80156f8:	3730      	adds	r7, #48	; 0x30
 80156fa:	46bd      	mov	sp, r7
 80156fc:	bd80      	pop	{r7, pc}
 80156fe:	bf00      	nop
 8015700:	20056678 	.word	0x20056678

08015704 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015704:	b580      	push	{r7, lr}
 8015706:	b088      	sub	sp, #32
 8015708:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801570a:	e04a      	b.n	80157a2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801570c:	4b2e      	ldr	r3, [pc, #184]	; (80157c8 <prvSwitchTimerLists+0xc4>)
 801570e:	681b      	ldr	r3, [r3, #0]
 8015710:	68db      	ldr	r3, [r3, #12]
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015716:	4b2c      	ldr	r3, [pc, #176]	; (80157c8 <prvSwitchTimerLists+0xc4>)
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	68db      	ldr	r3, [r3, #12]
 801571c:	68db      	ldr	r3, [r3, #12]
 801571e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015720:	68fb      	ldr	r3, [r7, #12]
 8015722:	3304      	adds	r3, #4
 8015724:	4618      	mov	r0, r3
 8015726:	f7fd fa5b 	bl	8012be0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	6a1b      	ldr	r3, [r3, #32]
 801572e:	68f8      	ldr	r0, [r7, #12]
 8015730:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015738:	f003 0304 	and.w	r3, r3, #4
 801573c:	2b00      	cmp	r3, #0
 801573e:	d030      	beq.n	80157a2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	699b      	ldr	r3, [r3, #24]
 8015744:	693a      	ldr	r2, [r7, #16]
 8015746:	4413      	add	r3, r2
 8015748:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801574a:	68ba      	ldr	r2, [r7, #8]
 801574c:	693b      	ldr	r3, [r7, #16]
 801574e:	429a      	cmp	r2, r3
 8015750:	d90e      	bls.n	8015770 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	68ba      	ldr	r2, [r7, #8]
 8015756:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	68fa      	ldr	r2, [r7, #12]
 801575c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801575e:	4b1a      	ldr	r3, [pc, #104]	; (80157c8 <prvSwitchTimerLists+0xc4>)
 8015760:	681a      	ldr	r2, [r3, #0]
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	3304      	adds	r3, #4
 8015766:	4619      	mov	r1, r3
 8015768:	4610      	mov	r0, r2
 801576a:	f7fd fa00 	bl	8012b6e <vListInsert>
 801576e:	e018      	b.n	80157a2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015770:	2300      	movs	r3, #0
 8015772:	9300      	str	r3, [sp, #0]
 8015774:	2300      	movs	r3, #0
 8015776:	693a      	ldr	r2, [r7, #16]
 8015778:	2100      	movs	r1, #0
 801577a:	68f8      	ldr	r0, [r7, #12]
 801577c:	f7ff fd56 	bl	801522c <xTimerGenericCommand>
 8015780:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	2b00      	cmp	r3, #0
 8015786:	d10c      	bne.n	80157a2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8015788:	f04f 0330 	mov.w	r3, #48	; 0x30
 801578c:	b672      	cpsid	i
 801578e:	f383 8811 	msr	BASEPRI, r3
 8015792:	f3bf 8f6f 	isb	sy
 8015796:	f3bf 8f4f 	dsb	sy
 801579a:	b662      	cpsie	i
 801579c:	603b      	str	r3, [r7, #0]
}
 801579e:	bf00      	nop
 80157a0:	e7fe      	b.n	80157a0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80157a2:	4b09      	ldr	r3, [pc, #36]	; (80157c8 <prvSwitchTimerLists+0xc4>)
 80157a4:	681b      	ldr	r3, [r3, #0]
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d1af      	bne.n	801570c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80157ac:	4b06      	ldr	r3, [pc, #24]	; (80157c8 <prvSwitchTimerLists+0xc4>)
 80157ae:	681b      	ldr	r3, [r3, #0]
 80157b0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80157b2:	4b06      	ldr	r3, [pc, #24]	; (80157cc <prvSwitchTimerLists+0xc8>)
 80157b4:	681b      	ldr	r3, [r3, #0]
 80157b6:	4a04      	ldr	r2, [pc, #16]	; (80157c8 <prvSwitchTimerLists+0xc4>)
 80157b8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80157ba:	4a04      	ldr	r2, [pc, #16]	; (80157cc <prvSwitchTimerLists+0xc8>)
 80157bc:	697b      	ldr	r3, [r7, #20]
 80157be:	6013      	str	r3, [r2, #0]
}
 80157c0:	bf00      	nop
 80157c2:	3718      	adds	r7, #24
 80157c4:	46bd      	mov	sp, r7
 80157c6:	bd80      	pop	{r7, pc}
 80157c8:	20056670 	.word	0x20056670
 80157cc:	20056674 	.word	0x20056674

080157d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80157d0:	b580      	push	{r7, lr}
 80157d2:	b082      	sub	sp, #8
 80157d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80157d6:	f7fd fb39 	bl	8012e4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80157da:	4b15      	ldr	r3, [pc, #84]	; (8015830 <prvCheckForValidListAndQueue+0x60>)
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d120      	bne.n	8015824 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80157e2:	4814      	ldr	r0, [pc, #80]	; (8015834 <prvCheckForValidListAndQueue+0x64>)
 80157e4:	f7fd f972 	bl	8012acc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80157e8:	4813      	ldr	r0, [pc, #76]	; (8015838 <prvCheckForValidListAndQueue+0x68>)
 80157ea:	f7fd f96f 	bl	8012acc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80157ee:	4b13      	ldr	r3, [pc, #76]	; (801583c <prvCheckForValidListAndQueue+0x6c>)
 80157f0:	4a10      	ldr	r2, [pc, #64]	; (8015834 <prvCheckForValidListAndQueue+0x64>)
 80157f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80157f4:	4b12      	ldr	r3, [pc, #72]	; (8015840 <prvCheckForValidListAndQueue+0x70>)
 80157f6:	4a10      	ldr	r2, [pc, #64]	; (8015838 <prvCheckForValidListAndQueue+0x68>)
 80157f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80157fa:	2300      	movs	r3, #0
 80157fc:	9300      	str	r3, [sp, #0]
 80157fe:	4b11      	ldr	r3, [pc, #68]	; (8015844 <prvCheckForValidListAndQueue+0x74>)
 8015800:	4a11      	ldr	r2, [pc, #68]	; (8015848 <prvCheckForValidListAndQueue+0x78>)
 8015802:	2110      	movs	r1, #16
 8015804:	200a      	movs	r0, #10
 8015806:	f7fd fcb7 	bl	8013178 <xQueueGenericCreateStatic>
 801580a:	4603      	mov	r3, r0
 801580c:	4a08      	ldr	r2, [pc, #32]	; (8015830 <prvCheckForValidListAndQueue+0x60>)
 801580e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015810:	4b07      	ldr	r3, [pc, #28]	; (8015830 <prvCheckForValidListAndQueue+0x60>)
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	2b00      	cmp	r3, #0
 8015816:	d005      	beq.n	8015824 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015818:	4b05      	ldr	r3, [pc, #20]	; (8015830 <prvCheckForValidListAndQueue+0x60>)
 801581a:	681b      	ldr	r3, [r3, #0]
 801581c:	490b      	ldr	r1, [pc, #44]	; (801584c <prvCheckForValidListAndQueue+0x7c>)
 801581e:	4618      	mov	r0, r3
 8015820:	f7fe fc0e 	bl	8014040 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015824:	f7fd fb46 	bl	8012eb4 <vPortExitCritical>
}
 8015828:	bf00      	nop
 801582a:	46bd      	mov	sp, r7
 801582c:	bd80      	pop	{r7, pc}
 801582e:	bf00      	nop
 8015830:	20056678 	.word	0x20056678
 8015834:	20056648 	.word	0x20056648
 8015838:	2005665c 	.word	0x2005665c
 801583c:	20056670 	.word	0x20056670
 8015840:	20056674 	.word	0x20056674
 8015844:	20056724 	.word	0x20056724
 8015848:	20056684 	.word	0x20056684
 801584c:	0802be24 	.word	0x0802be24

08015850 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8015850:	8880      	ldrh	r0, [r0, #4]
 8015852:	4770      	bx	lr

08015854 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8015854:	2300      	movs	r3, #0
 8015856:	8083      	strh	r3, [r0, #4]
 8015858:	4770      	bx	lr
	...

0801585c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801585c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801585e:	6803      	ldr	r3, [r0, #0]
 8015860:	460e      	mov	r6, r1
 8015862:	2100      	movs	r1, #0
 8015864:	4605      	mov	r5, r0
 8015866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015868:	4798      	blx	r3
 801586a:	4604      	mov	r4, r0
 801586c:	682b      	ldr	r3, [r5, #0]
 801586e:	4628      	mov	r0, r5
 8015870:	1b34      	subs	r4, r6, r4
 8015872:	6a1b      	ldr	r3, [r3, #32]
 8015874:	b2a4      	uxth	r4, r4
 8015876:	4798      	blx	r3
 8015878:	88ab      	ldrh	r3, [r5, #4]
 801587a:	fbb4 f4f0 	udiv	r4, r4, r0
 801587e:	42a3      	cmp	r3, r4
 8015880:	d805      	bhi.n	801588e <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8015882:	4b0e      	ldr	r3, [pc, #56]	; (80158bc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8015884:	211e      	movs	r1, #30
 8015886:	4a0e      	ldr	r2, [pc, #56]	; (80158c0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8015888:	480e      	ldr	r0, [pc, #56]	; (80158c4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 801588a:	f011 f899 	bl	80269c0 <__assert_func>
 801588e:	682b      	ldr	r3, [r5, #0]
 8015890:	2100      	movs	r1, #0
 8015892:	4628      	mov	r0, r5
 8015894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015896:	4798      	blx	r3
 8015898:	682b      	ldr	r3, [r5, #0]
 801589a:	4607      	mov	r7, r0
 801589c:	4628      	mov	r0, r5
 801589e:	6a1b      	ldr	r3, [r3, #32]
 80158a0:	4798      	blx	r3
 80158a2:	1bf3      	subs	r3, r6, r7
 80158a4:	b29b      	uxth	r3, r3
 80158a6:	fbb3 f2f0 	udiv	r2, r3, r0
 80158aa:	fb02 3010 	mls	r0, r2, r0, r3
 80158ae:	b118      	cbz	r0, 80158b8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 80158b0:	4b05      	ldr	r3, [pc, #20]	; (80158c8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 80158b2:	211f      	movs	r1, #31
 80158b4:	4a02      	ldr	r2, [pc, #8]	; (80158c0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80158b6:	e7e7      	b.n	8015888 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 80158b8:	4620      	mov	r0, r4
 80158ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80158bc:	0802c894 	.word	0x0802c894
 80158c0:	0802ca02 	.word	0x0802ca02
 80158c4:	0802c8a9 	.word	0x0802c8a9
 80158c8:	0802c8d7 	.word	0x0802c8d7

080158cc <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80158cc:	b538      	push	{r3, r4, r5, lr}
 80158ce:	6803      	ldr	r3, [r0, #0]
 80158d0:	460d      	mov	r5, r1
 80158d2:	4604      	mov	r4, r0
 80158d4:	6a1b      	ldr	r3, [r3, #32]
 80158d6:	4798      	blx	r3
 80158d8:	4285      	cmp	r5, r0
 80158da:	d905      	bls.n	80158e8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 80158dc:	4b0c      	ldr	r3, [pc, #48]	; (8015910 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 80158de:	2130      	movs	r1, #48	; 0x30
 80158e0:	4a0c      	ldr	r2, [pc, #48]	; (8015914 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 80158e2:	480d      	ldr	r0, [pc, #52]	; (8015918 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 80158e4:	f011 f86c 	bl	80269c0 <__assert_func>
 80158e8:	6823      	ldr	r3, [r4, #0]
 80158ea:	4620      	mov	r0, r4
 80158ec:	88a5      	ldrh	r5, [r4, #4]
 80158ee:	69db      	ldr	r3, [r3, #28]
 80158f0:	4798      	blx	r3
 80158f2:	4285      	cmp	r5, r0
 80158f4:	d303      	bcc.n	80158fe <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 80158f6:	4b09      	ldr	r3, [pc, #36]	; (801591c <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 80158f8:	2131      	movs	r1, #49	; 0x31
 80158fa:	4a06      	ldr	r2, [pc, #24]	; (8015914 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 80158fc:	e7f1      	b.n	80158e2 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 80158fe:	6823      	ldr	r3, [r4, #0]
 8015900:	4620      	mov	r0, r4
 8015902:	88a1      	ldrh	r1, [r4, #4]
 8015904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015906:	4798      	blx	r3
 8015908:	88a3      	ldrh	r3, [r4, #4]
 801590a:	3301      	adds	r3, #1
 801590c:	80a3      	strh	r3, [r4, #4]
 801590e:	bd38      	pop	{r3, r4, r5, pc}
 8015910:	0802c951 	.word	0x0802c951
 8015914:	0802ca45 	.word	0x0802ca45
 8015918:	0802c8a9 	.word	0x0802c8a9
 801591c:	0802c968 	.word	0x0802c968

08015920 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8015920:	b570      	push	{r4, r5, r6, lr}
 8015922:	6803      	ldr	r3, [r0, #0]
 8015924:	4616      	mov	r6, r2
 8015926:	4604      	mov	r4, r0
 8015928:	460d      	mov	r5, r1
 801592a:	6a1b      	ldr	r3, [r3, #32]
 801592c:	4798      	blx	r3
 801592e:	4286      	cmp	r6, r0
 8015930:	d905      	bls.n	801593e <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8015932:	4b06      	ldr	r3, [pc, #24]	; (801594c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8015934:	213a      	movs	r1, #58	; 0x3a
 8015936:	4a06      	ldr	r2, [pc, #24]	; (8015950 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8015938:	4806      	ldr	r0, [pc, #24]	; (8015954 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 801593a:	f011 f841 	bl	80269c0 <__assert_func>
 801593e:	6823      	ldr	r3, [r4, #0]
 8015940:	4629      	mov	r1, r5
 8015942:	4620      	mov	r0, r4
 8015944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015946:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801594a:	4718      	bx	r3
 801594c:	0802c951 	.word	0x0802c951
 8015950:	0802c9b8 	.word	0x0802c9b8
 8015954:	0802c8a9 	.word	0x0802c8a9

08015958 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8015958:	4770      	bx	lr
	...

0801595c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 801595c:	4a02      	ldr	r2, [pc, #8]	; (8015968 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801595e:	6002      	str	r2, [r0, #0]
 8015960:	2200      	movs	r2, #0
 8015962:	8082      	strh	r2, [r0, #4]
 8015964:	4770      	bx	lr
 8015966:	bf00      	nop
 8015968:	0802c98c 	.word	0x0802c98c

0801596c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 801596c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801596e:	2000      	movs	r0, #0
 8015970:	b12b      	cbz	r3, 801597e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8015972:	b920      	cbnz	r0, 801597e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8015974:	1a5a      	subs	r2, r3, r1
 8015976:	699b      	ldr	r3, [r3, #24]
 8015978:	4250      	negs	r0, r2
 801597a:	4150      	adcs	r0, r2
 801597c:	e7f8      	b.n	8015970 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801597e:	4770      	bx	lr

08015980 <_ZN8touchgfx9Container9removeAllEv>:
 8015980:	2200      	movs	r2, #0
 8015982:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015984:	b123      	cbz	r3, 8015990 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8015986:	6999      	ldr	r1, [r3, #24]
 8015988:	6281      	str	r1, [r0, #40]	; 0x28
 801598a:	e9c3 2205 	strd	r2, r2, [r3, #20]
 801598e:	e7f8      	b.n	8015982 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8015990:	4770      	bx	lr

08015992 <_ZN8touchgfx9Container6unlinkEv>:
 8015992:	2300      	movs	r3, #0
 8015994:	6283      	str	r3, [r0, #40]	; 0x28
 8015996:	4770      	bx	lr

08015998 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8015998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801599c:	461f      	mov	r7, r3
 801599e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80159a2:	460d      	mov	r5, r1
 80159a4:	4616      	mov	r6, r2
 80159a6:	b103      	cbz	r3, 80159aa <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80159a8:	6038      	str	r0, [r7, #0]
 80159aa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80159ac:	b314      	cbz	r4, 80159f4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80159ae:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80159b2:	b1eb      	cbz	r3, 80159f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80159b4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80159b8:	428d      	cmp	r5, r1
 80159ba:	db19      	blt.n	80159f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80159bc:	b289      	uxth	r1, r1
 80159be:	8923      	ldrh	r3, [r4, #8]
 80159c0:	440b      	add	r3, r1
 80159c2:	b21b      	sxth	r3, r3
 80159c4:	429d      	cmp	r5, r3
 80159c6:	da13      	bge.n	80159f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80159c8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80159cc:	4296      	cmp	r6, r2
 80159ce:	db0f      	blt.n	80159f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80159d0:	b292      	uxth	r2, r2
 80159d2:	8963      	ldrh	r3, [r4, #10]
 80159d4:	4413      	add	r3, r2
 80159d6:	b21b      	sxth	r3, r3
 80159d8:	429e      	cmp	r6, r3
 80159da:	da09      	bge.n	80159f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80159dc:	6823      	ldr	r3, [r4, #0]
 80159de:	1ab2      	subs	r2, r6, r2
 80159e0:	1a69      	subs	r1, r5, r1
 80159e2:	4620      	mov	r0, r4
 80159e4:	f8d3 8020 	ldr.w	r8, [r3, #32]
 80159e8:	b212      	sxth	r2, r2
 80159ea:	463b      	mov	r3, r7
 80159ec:	b209      	sxth	r1, r1
 80159ee:	47c0      	blx	r8
 80159f0:	69a4      	ldr	r4, [r4, #24]
 80159f2:	e7db      	b.n	80159ac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80159f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080159f8 <_ZNK8touchgfx9Container12getSolidRectEv>:
 80159f8:	2200      	movs	r2, #0
 80159fa:	8002      	strh	r2, [r0, #0]
 80159fc:	8042      	strh	r2, [r0, #2]
 80159fe:	8082      	strh	r2, [r0, #4]
 8015a00:	80c2      	strh	r2, [r0, #6]
 8015a02:	4770      	bx	lr

08015a04 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8015a04:	b570      	push	{r4, r5, r6, lr}
 8015a06:	460d      	mov	r5, r1
 8015a08:	4616      	mov	r6, r2
 8015a0a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015a0c:	b13c      	cbz	r4, 8015a1e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8015a0e:	6823      	ldr	r3, [r4, #0]
 8015a10:	4620      	mov	r0, r4
 8015a12:	4632      	mov	r2, r6
 8015a14:	4629      	mov	r1, r5
 8015a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015a18:	4798      	blx	r3
 8015a1a:	69a4      	ldr	r4, [r4, #24]
 8015a1c:	e7f6      	b.n	8015a0c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8015a1e:	bd70      	pop	{r4, r5, r6, pc}

08015a20 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8015a20:	b538      	push	{r3, r4, r5, lr}
 8015a22:	460d      	mov	r5, r1
 8015a24:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015a26:	b134      	cbz	r4, 8015a36 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8015a28:	682b      	ldr	r3, [r5, #0]
 8015a2a:	4621      	mov	r1, r4
 8015a2c:	4628      	mov	r0, r5
 8015a2e:	689b      	ldr	r3, [r3, #8]
 8015a30:	4798      	blx	r3
 8015a32:	69a4      	ldr	r4, [r4, #24]
 8015a34:	e7f7      	b.n	8015a26 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8015a36:	bd38      	pop	{r3, r4, r5, pc}

08015a38 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8015a38:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015a3a:	b19b      	cbz	r3, 8015a64 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015a3c:	428b      	cmp	r3, r1
 8015a3e:	d109      	bne.n	8015a54 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8015a40:	699a      	ldr	r2, [r3, #24]
 8015a42:	2100      	movs	r1, #0
 8015a44:	6159      	str	r1, [r3, #20]
 8015a46:	6282      	str	r2, [r0, #40]	; 0x28
 8015a48:	b902      	cbnz	r2, 8015a4c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8015a4a:	4770      	bx	lr
 8015a4c:	6199      	str	r1, [r3, #24]
 8015a4e:	4770      	bx	lr
 8015a50:	4613      	mov	r3, r2
 8015a52:	b13a      	cbz	r2, 8015a64 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015a54:	699a      	ldr	r2, [r3, #24]
 8015a56:	428a      	cmp	r2, r1
 8015a58:	d1fa      	bne.n	8015a50 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8015a5a:	698a      	ldr	r2, [r1, #24]
 8015a5c:	619a      	str	r2, [r3, #24]
 8015a5e:	2300      	movs	r3, #0
 8015a60:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8015a64:	4770      	bx	lr

08015a66 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8015a66:	b410      	push	{r4}
 8015a68:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015a6a:	4604      	mov	r4, r0
 8015a6c:	b92b      	cbnz	r3, 8015a7a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8015a6e:	6803      	ldr	r3, [r0, #0]
 8015a70:	4611      	mov	r1, r2
 8015a72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015a78:	4718      	bx	r3
 8015a7a:	b941      	cbnz	r1, 8015a8e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8015a7c:	6193      	str	r3, [r2, #24]
 8015a7e:	6282      	str	r2, [r0, #40]	; 0x28
 8015a80:	6154      	str	r4, [r2, #20]
 8015a82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015a86:	4770      	bx	lr
 8015a88:	4603      	mov	r3, r0
 8015a8a:	2800      	cmp	r0, #0
 8015a8c:	d0f9      	beq.n	8015a82 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8015a8e:	4299      	cmp	r1, r3
 8015a90:	6998      	ldr	r0, [r3, #24]
 8015a92:	d1f9      	bne.n	8015a88 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8015a94:	6190      	str	r0, [r2, #24]
 8015a96:	618a      	str	r2, [r1, #24]
 8015a98:	e7f2      	b.n	8015a80 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08015a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8015a9c:	4288      	cmp	r0, r1
 8015a9e:	b508      	push	{r3, lr}
 8015aa0:	d105      	bne.n	8015aae <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8015aa2:	4b11      	ldr	r3, [pc, #68]	; (8015ae8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8015aa4:	2121      	movs	r1, #33	; 0x21
 8015aa6:	4a11      	ldr	r2, [pc, #68]	; (8015aec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015aa8:	4811      	ldr	r0, [pc, #68]	; (8015af0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8015aaa:	f010 ff89 	bl	80269c0 <__assert_func>
 8015aae:	694b      	ldr	r3, [r1, #20]
 8015ab0:	b11b      	cbz	r3, 8015aba <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8015ab2:	4b10      	ldr	r3, [pc, #64]	; (8015af4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8015ab4:	2122      	movs	r1, #34	; 0x22
 8015ab6:	4a0d      	ldr	r2, [pc, #52]	; (8015aec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015ab8:	e7f6      	b.n	8015aa8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015aba:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8015abe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015ac0:	b913      	cbnz	r3, 8015ac8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8015ac2:	6281      	str	r1, [r0, #40]	; 0x28
 8015ac4:	bd08      	pop	{r3, pc}
 8015ac6:	4613      	mov	r3, r2
 8015ac8:	699a      	ldr	r2, [r3, #24]
 8015aca:	b12a      	cbz	r2, 8015ad8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8015acc:	428b      	cmp	r3, r1
 8015ace:	d1fa      	bne.n	8015ac6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8015ad0:	4b09      	ldr	r3, [pc, #36]	; (8015af8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8015ad2:	2133      	movs	r1, #51	; 0x33
 8015ad4:	4a05      	ldr	r2, [pc, #20]	; (8015aec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015ad6:	e7e7      	b.n	8015aa8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015ad8:	428b      	cmp	r3, r1
 8015ada:	d103      	bne.n	8015ae4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8015adc:	4b06      	ldr	r3, [pc, #24]	; (8015af8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8015ade:	2136      	movs	r1, #54	; 0x36
 8015ae0:	4a02      	ldr	r2, [pc, #8]	; (8015aec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8015ae2:	e7e1      	b.n	8015aa8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8015ae4:	6199      	str	r1, [r3, #24]
 8015ae6:	e7ed      	b.n	8015ac4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8015ae8:	0802ca83 	.word	0x0802ca83
 8015aec:	0802cbd4 	.word	0x0802cbd4
 8015af0:	0802caaf 	.word	0x0802caaf
 8015af4:	0802cae2 	.word	0x0802cae2
 8015af8:	0802cb18 	.word	0x0802cb18

08015afc <_ZN8touchgfx4RectaNERKS0_>:
 8015afc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b00:	f9b1 7000 	ldrsh.w	r7, [r1]
 8015b04:	888c      	ldrh	r4, [r1, #4]
 8015b06:	f9b0 9000 	ldrsh.w	r9, [r0]
 8015b0a:	443c      	add	r4, r7
 8015b0c:	b2a4      	uxth	r4, r4
 8015b0e:	fa0f f884 	sxth.w	r8, r4
 8015b12:	45c1      	cmp	r9, r8
 8015b14:	da2f      	bge.n	8015b76 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015b16:	8882      	ldrh	r2, [r0, #4]
 8015b18:	444a      	add	r2, r9
 8015b1a:	b292      	uxth	r2, r2
 8015b1c:	fa0f fe82 	sxth.w	lr, r2
 8015b20:	4577      	cmp	r7, lr
 8015b22:	da28      	bge.n	8015b76 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015b24:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8015b28:	88cb      	ldrh	r3, [r1, #6]
 8015b2a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8015b2e:	442b      	add	r3, r5
 8015b30:	b21b      	sxth	r3, r3
 8015b32:	429e      	cmp	r6, r3
 8015b34:	da1f      	bge.n	8015b76 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015b36:	88c3      	ldrh	r3, [r0, #6]
 8015b38:	4433      	add	r3, r6
 8015b3a:	b29b      	uxth	r3, r3
 8015b3c:	fa0f fc83 	sxth.w	ip, r3
 8015b40:	4565      	cmp	r5, ip
 8015b42:	da18      	bge.n	8015b76 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8015b44:	454f      	cmp	r7, r9
 8015b46:	bfb8      	it	lt
 8015b48:	464f      	movlt	r7, r9
 8015b4a:	42b5      	cmp	r5, r6
 8015b4c:	bfb8      	it	lt
 8015b4e:	4635      	movlt	r5, r6
 8015b50:	45f0      	cmp	r8, lr
 8015b52:	bfd8      	it	le
 8015b54:	4622      	movle	r2, r4
 8015b56:	1bd2      	subs	r2, r2, r7
 8015b58:	8082      	strh	r2, [r0, #4]
 8015b5a:	884a      	ldrh	r2, [r1, #2]
 8015b5c:	88c9      	ldrh	r1, [r1, #6]
 8015b5e:	8007      	strh	r7, [r0, #0]
 8015b60:	440a      	add	r2, r1
 8015b62:	8045      	strh	r5, [r0, #2]
 8015b64:	b292      	uxth	r2, r2
 8015b66:	b211      	sxth	r1, r2
 8015b68:	458c      	cmp	ip, r1
 8015b6a:	bfa8      	it	ge
 8015b6c:	4613      	movge	r3, r2
 8015b6e:	1b5b      	subs	r3, r3, r5
 8015b70:	80c3      	strh	r3, [r0, #6]
 8015b72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b76:	2300      	movs	r3, #0
 8015b78:	8003      	strh	r3, [r0, #0]
 8015b7a:	8043      	strh	r3, [r0, #2]
 8015b7c:	8083      	strh	r3, [r0, #4]
 8015b7e:	80c3      	strh	r3, [r0, #6]
 8015b80:	e7f7      	b.n	8015b72 <_ZN8touchgfx4RectaNERKS0_+0x76>

08015b82 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8015b82:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	dd06      	ble.n	8015b98 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8015b8a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8015b8e:	2800      	cmp	r0, #0
 8015b90:	bfcc      	ite	gt
 8015b92:	2000      	movgt	r0, #0
 8015b94:	2001      	movle	r0, #1
 8015b96:	4770      	bx	lr
 8015b98:	2001      	movs	r0, #1
 8015b9a:	4770      	bx	lr

08015b9c <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8015b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ba0:	2300      	movs	r3, #0
 8015ba2:	4604      	mov	r4, r0
 8015ba4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8015ba6:	8003      	strh	r3, [r0, #0]
 8015ba8:	8043      	strh	r3, [r0, #2]
 8015baa:	8083      	strh	r3, [r0, #4]
 8015bac:	80c3      	strh	r3, [r0, #6]
 8015bae:	2d00      	cmp	r5, #0
 8015bb0:	d040      	beq.n	8015c34 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8015bb2:	1d28      	adds	r0, r5, #4
 8015bb4:	f7ff ffe5 	bl	8015b82 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015bb8:	b988      	cbnz	r0, 8015bde <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015bba:	4620      	mov	r0, r4
 8015bbc:	f7ff ffe1 	bl	8015b82 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015bc0:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8015bc4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8015bc8:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8015bcc:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8015bd0:	b138      	cbz	r0, 8015be2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8015bd2:	8022      	strh	r2, [r4, #0]
 8015bd4:	8063      	strh	r3, [r4, #2]
 8015bd6:	f8a4 e004 	strh.w	lr, [r4, #4]
 8015bda:	f8a4 c006 	strh.w	ip, [r4, #6]
 8015bde:	69ad      	ldr	r5, [r5, #24]
 8015be0:	e7e5      	b.n	8015bae <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8015be2:	f9b4 0000 	ldrsh.w	r0, [r4]
 8015be6:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8015bea:	4290      	cmp	r0, r2
 8015bec:	4607      	mov	r7, r0
 8015bee:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8015bf2:	460e      	mov	r6, r1
 8015bf4:	bfa8      	it	ge
 8015bf6:	4617      	movge	r7, r2
 8015bf8:	4299      	cmp	r1, r3
 8015bfa:	4472      	add	r2, lr
 8015bfc:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8015c00:	bfa8      	it	ge
 8015c02:	461e      	movge	r6, r3
 8015c04:	4440      	add	r0, r8
 8015c06:	4471      	add	r1, lr
 8015c08:	4463      	add	r3, ip
 8015c0a:	b200      	sxth	r0, r0
 8015c0c:	8027      	strh	r7, [r4, #0]
 8015c0e:	b212      	sxth	r2, r2
 8015c10:	8066      	strh	r6, [r4, #2]
 8015c12:	b209      	sxth	r1, r1
 8015c14:	b21b      	sxth	r3, r3
 8015c16:	4290      	cmp	r0, r2
 8015c18:	bfac      	ite	ge
 8015c1a:	ebc7 0200 	rsbge	r2, r7, r0
 8015c1e:	ebc7 0202 	rsblt	r2, r7, r2
 8015c22:	4299      	cmp	r1, r3
 8015c24:	bfac      	ite	ge
 8015c26:	ebc6 0301 	rsbge	r3, r6, r1
 8015c2a:	ebc6 0303 	rsblt	r3, r6, r3
 8015c2e:	80a2      	strh	r2, [r4, #4]
 8015c30:	80e3      	strh	r3, [r4, #6]
 8015c32:	e7d4      	b.n	8015bde <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015c34:	4620      	mov	r0, r4
 8015c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015c3a <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8015c3a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015c3e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015c42:	b383      	cbz	r3, 8015ca6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015c44:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015c46:	b374      	cbz	r4, 8015ca6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015c48:	f9b1 5000 	ldrsh.w	r5, [r1]
 8015c4c:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8015c50:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8015c54:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8015c58:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015c5c:	b303      	cbz	r3, 8015ca0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015c5e:	4668      	mov	r0, sp
 8015c60:	1d21      	adds	r1, r4, #4
 8015c62:	f8ad 5000 	strh.w	r5, [sp]
 8015c66:	f8ad 6002 	strh.w	r6, [sp, #2]
 8015c6a:	f8ad 7004 	strh.w	r7, [sp, #4]
 8015c6e:	f8ad 8006 	strh.w	r8, [sp, #6]
 8015c72:	f7ff ff43 	bl	8015afc <_ZN8touchgfx4RectaNERKS0_>
 8015c76:	4668      	mov	r0, sp
 8015c78:	f7ff ff83 	bl	8015b82 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015c7c:	b980      	cbnz	r0, 8015ca0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015c7e:	f8bd 3000 	ldrh.w	r3, [sp]
 8015c82:	4669      	mov	r1, sp
 8015c84:	88a2      	ldrh	r2, [r4, #4]
 8015c86:	4620      	mov	r0, r4
 8015c88:	1a9b      	subs	r3, r3, r2
 8015c8a:	88e2      	ldrh	r2, [r4, #6]
 8015c8c:	f8ad 3000 	strh.w	r3, [sp]
 8015c90:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015c94:	1a9b      	subs	r3, r3, r2
 8015c96:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015c9a:	6823      	ldr	r3, [r4, #0]
 8015c9c:	689b      	ldr	r3, [r3, #8]
 8015c9e:	4798      	blx	r3
 8015ca0:	69a4      	ldr	r4, [r4, #24]
 8015ca2:	2c00      	cmp	r4, #0
 8015ca4:	d1d8      	bne.n	8015c58 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8015ca6:	b002      	add	sp, #8
 8015ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015cac <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8015cac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015cae:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015cb2:	460d      	mov	r5, r1
 8015cb4:	4616      	mov	r6, r2
 8015cb6:	b323      	cbz	r3, 8015d02 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015cb8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015cba:	b314      	cbz	r4, 8015d02 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015cbc:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015cc0:	b1eb      	cbz	r3, 8015cfe <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015cc2:	6828      	ldr	r0, [r5, #0]
 8015cc4:	466b      	mov	r3, sp
 8015cc6:	6869      	ldr	r1, [r5, #4]
 8015cc8:	c303      	stmia	r3!, {r0, r1}
 8015cca:	4668      	mov	r0, sp
 8015ccc:	1d21      	adds	r1, r4, #4
 8015cce:	f7ff ff15 	bl	8015afc <_ZN8touchgfx4RectaNERKS0_>
 8015cd2:	4668      	mov	r0, sp
 8015cd4:	f7ff ff55 	bl	8015b82 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015cd8:	b988      	cbnz	r0, 8015cfe <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015cda:	f8bd 3000 	ldrh.w	r3, [sp]
 8015cde:	4669      	mov	r1, sp
 8015ce0:	88a2      	ldrh	r2, [r4, #4]
 8015ce2:	4620      	mov	r0, r4
 8015ce4:	1a9b      	subs	r3, r3, r2
 8015ce6:	88e2      	ldrh	r2, [r4, #6]
 8015ce8:	f8ad 3000 	strh.w	r3, [sp]
 8015cec:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015cf0:	1a9b      	subs	r3, r3, r2
 8015cf2:	4632      	mov	r2, r6
 8015cf4:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015cf8:	6823      	ldr	r3, [r4, #0]
 8015cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015cfc:	4798      	blx	r3
 8015cfe:	69a4      	ldr	r4, [r4, #24]
 8015d00:	e7db      	b.n	8015cba <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8015d02:	b002      	add	sp, #8
 8015d04:	bd70      	pop	{r4, r5, r6, pc}

08015d06 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8015d06:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015d0a:	4770      	bx	lr

08015d0c <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 8015d0c:	4770      	bx	lr

08015d0e <_ZN8touchgfx3HAL10FlushCacheEv>:
 8015d0e:	4770      	bx	lr

08015d10 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8015d10:	6803      	ldr	r3, [r0, #0]
 8015d12:	b513      	push	{r0, r1, r4, lr}
 8015d14:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 8015d18:	2300      	movs	r3, #0
 8015d1a:	e9cd 3300 	strd	r3, r3, [sp]
 8015d1e:	466b      	mov	r3, sp
 8015d20:	47a0      	blx	r4
 8015d22:	b002      	add	sp, #8
 8015d24:	bd10      	pop	{r4, pc}

08015d26 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8015d26:	2301      	movs	r3, #1
 8015d28:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015d2c:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015d30:	4770      	bx	lr

08015d32 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8015d32:	2301      	movs	r3, #1
 8015d34:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015d38:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015d3c:	4770      	bx	lr

08015d3e <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8015d3e:	6843      	ldr	r3, [r0, #4]
 8015d40:	2201      	movs	r2, #1
 8015d42:	725a      	strb	r2, [r3, #9]
 8015d44:	6840      	ldr	r0, [r0, #4]
 8015d46:	6803      	ldr	r3, [r0, #0]
 8015d48:	691b      	ldr	r3, [r3, #16]
 8015d4a:	4718      	bx	r3

08015d4c <_ZN8touchgfx3HAL8flushDMAEv>:
 8015d4c:	6840      	ldr	r0, [r0, #4]
 8015d4e:	6803      	ldr	r3, [r0, #0]
 8015d50:	689b      	ldr	r3, [r3, #8]
 8015d52:	4718      	bx	r3

08015d54 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8015d54:	b530      	push	{r4, r5, lr}
 8015d56:	b08b      	sub	sp, #44	; 0x2c
 8015d58:	6804      	ldr	r4, [r0, #0]
 8015d5a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8015d5e:	9508      	str	r5, [sp, #32]
 8015d60:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8015d64:	9507      	str	r5, [sp, #28]
 8015d66:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8015d6a:	9506      	str	r5, [sp, #24]
 8015d6c:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8015d70:	9505      	str	r5, [sp, #20]
 8015d72:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8015d76:	9504      	str	r5, [sp, #16]
 8015d78:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8015d7c:	9503      	str	r5, [sp, #12]
 8015d7e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8015d82:	9502      	str	r5, [sp, #8]
 8015d84:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8015d88:	e9cd 3500 	strd	r3, r5, [sp]
 8015d8c:	4613      	mov	r3, r2
 8015d8e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8015d90:	2200      	movs	r2, #0
 8015d92:	47a0      	blx	r4
 8015d94:	b00b      	add	sp, #44	; 0x2c
 8015d96:	bd30      	pop	{r4, r5, pc}

08015d98 <_ZN8touchgfx3HAL10beginFrameEv>:
 8015d98:	4b04      	ldr	r3, [pc, #16]	; (8015dac <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8015d9a:	781b      	ldrb	r3, [r3, #0]
 8015d9c:	b123      	cbz	r3, 8015da8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8015d9e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8015da2:	f080 0001 	eor.w	r0, r0, #1
 8015da6:	4770      	bx	lr
 8015da8:	2001      	movs	r0, #1
 8015daa:	4770      	bx	lr
 8015dac:	2005677e 	.word	0x2005677e

08015db0 <_ZN8touchgfx3HAL8endFrameEv>:
 8015db0:	b510      	push	{r4, lr}
 8015db2:	4604      	mov	r4, r0
 8015db4:	6840      	ldr	r0, [r0, #4]
 8015db6:	6803      	ldr	r3, [r0, #0]
 8015db8:	689b      	ldr	r3, [r3, #8]
 8015dba:	4798      	blx	r3
 8015dbc:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8015dc0:	b113      	cbz	r3, 8015dc8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8015dc2:	2301      	movs	r3, #1
 8015dc4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8015dc8:	bd10      	pop	{r4, pc}

08015dca <_ZN8touchgfx3HAL10initializeEv>:
 8015dca:	b510      	push	{r4, lr}
 8015dcc:	4604      	mov	r4, r0
 8015dce:	f7ed fdb3 	bl	8003938 <_ZN8touchgfx10OSWrappers10initializeEv>
 8015dd2:	6860      	ldr	r0, [r4, #4]
 8015dd4:	6803      	ldr	r3, [r0, #0]
 8015dd6:	68db      	ldr	r3, [r3, #12]
 8015dd8:	4798      	blx	r3
 8015dda:	68e0      	ldr	r0, [r4, #12]
 8015ddc:	6803      	ldr	r3, [r0, #0]
 8015dde:	689b      	ldr	r3, [r3, #8]
 8015de0:	4798      	blx	r3
 8015de2:	6823      	ldr	r3, [r4, #0]
 8015de4:	4620      	mov	r0, r4
 8015de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015dec:	4718      	bx	r3

08015dee <_ZN8touchgfx3HAL9taskEntryEv>:
 8015dee:	b508      	push	{r3, lr}
 8015df0:	6803      	ldr	r3, [r0, #0]
 8015df2:	4604      	mov	r4, r0
 8015df4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015df6:	4798      	blx	r3
 8015df8:	6823      	ldr	r3, [r4, #0]
 8015dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015dfc:	4620      	mov	r0, r4
 8015dfe:	4798      	blx	r3
 8015e00:	f7ed fe10 	bl	8003a24 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8015e04:	6823      	ldr	r3, [r4, #0]
 8015e06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015e08:	e7f8      	b.n	8015dfc <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08015e0c <_ZN8touchgfx3HAL4tickEv>:
 8015e0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015e0e:	6803      	ldr	r3, [r0, #0]
 8015e10:	4604      	mov	r4, r0
 8015e12:	4d5c      	ldr	r5, [pc, #368]	; (8015f84 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8015e14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015e18:	4798      	blx	r3
 8015e1a:	2800      	cmp	r0, #0
 8015e1c:	f000 8097 	beq.w	8015f4e <_ZN8touchgfx3HAL4tickEv+0x142>
 8015e20:	2001      	movs	r0, #1
 8015e22:	2600      	movs	r6, #0
 8015e24:	f7ed fb5a 	bl	80034dc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8015e28:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8015e2c:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8015e30:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015e34:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8015e38:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8015e3c:	b133      	cbz	r3, 8015e4c <_ZN8touchgfx3HAL4tickEv+0x40>
 8015e3e:	6823      	ldr	r3, [r4, #0]
 8015e40:	4620      	mov	r0, r4
 8015e42:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8015e46:	4798      	blx	r3
 8015e48:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8015e4c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8015e50:	2601      	movs	r6, #1
 8015e52:	6862      	ldr	r2, [r4, #4]
 8015e54:	f083 0301 	eor.w	r3, r3, #1
 8015e58:	702e      	strb	r6, [r5, #0]
 8015e5a:	7253      	strb	r3, [r2, #9]
 8015e5c:	f003 fcac 	bl	80197b8 <_ZN8touchgfx11Application11getInstanceEv>
 8015e60:	6803      	ldr	r3, [r0, #0]
 8015e62:	4631      	mov	r1, r6
 8015e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e66:	4798      	blx	r3
 8015e68:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015e6c:	b90b      	cbnz	r3, 8015e72 <_ZN8touchgfx3HAL4tickEv+0x66>
 8015e6e:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8015e72:	f003 fca1 	bl	80197b8 <_ZN8touchgfx11Application11getInstanceEv>
 8015e76:	6803      	ldr	r3, [r0, #0]
 8015e78:	695b      	ldr	r3, [r3, #20]
 8015e7a:	4798      	blx	r3
 8015e7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015e7e:	6803      	ldr	r3, [r0, #0]
 8015e80:	691b      	ldr	r3, [r3, #16]
 8015e82:	4798      	blx	r3
 8015e84:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015e88:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8015e8c:	3b01      	subs	r3, #1
 8015e8e:	b2db      	uxtb	r3, r3
 8015e90:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015e94:	b10a      	cbz	r2, 8015e9a <_ZN8touchgfx3HAL4tickEv+0x8e>
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d1eb      	bne.n	8015e72 <_ZN8touchgfx3HAL4tickEv+0x66>
 8015e9a:	4a3b      	ldr	r2, [pc, #236]	; (8015f88 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8015e9c:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8015ea0:	7813      	ldrb	r3, [r2, #0]
 8015ea2:	3301      	adds	r3, #1
 8015ea4:	b25b      	sxtb	r3, r3
 8015ea6:	4299      	cmp	r1, r3
 8015ea8:	7013      	strb	r3, [r2, #0]
 8015eaa:	dc10      	bgt.n	8015ece <_ZN8touchgfx3HAL4tickEv+0xc2>
 8015eac:	2300      	movs	r3, #0
 8015eae:	68e0      	ldr	r0, [r4, #12]
 8015eb0:	a902      	add	r1, sp, #8
 8015eb2:	7013      	strb	r3, [r2, #0]
 8015eb4:	aa03      	add	r2, sp, #12
 8015eb6:	6803      	ldr	r3, [r0, #0]
 8015eb8:	68db      	ldr	r3, [r3, #12]
 8015eba:	4798      	blx	r3
 8015ebc:	6823      	ldr	r3, [r4, #0]
 8015ebe:	2800      	cmp	r0, #0
 8015ec0:	d051      	beq.n	8015f66 <_ZN8touchgfx3HAL4tickEv+0x15a>
 8015ec2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015ec6:	4620      	mov	r0, r4
 8015ec8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8015ecc:	4798      	blx	r3
 8015ece:	2300      	movs	r3, #0
 8015ed0:	6960      	ldr	r0, [r4, #20]
 8015ed2:	f88d 3007 	strb.w	r3, [sp, #7]
 8015ed6:	b158      	cbz	r0, 8015ef0 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8015ed8:	6803      	ldr	r3, [r0, #0]
 8015eda:	f10d 0107 	add.w	r1, sp, #7
 8015ede:	68db      	ldr	r3, [r3, #12]
 8015ee0:	4798      	blx	r3
 8015ee2:	b128      	cbz	r0, 8015ef0 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8015ee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015ee6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8015eea:	6803      	ldr	r3, [r0, #0]
 8015eec:	68db      	ldr	r3, [r3, #12]
 8015eee:	4798      	blx	r3
 8015ef0:	f104 001c 	add.w	r0, r4, #28
 8015ef4:	f00e ff5e 	bl	8024db4 <_ZN8touchgfx8Gestures4tickEv>
 8015ef8:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8015efc:	b30b      	cbz	r3, 8015f42 <_ZN8touchgfx3HAL4tickEv+0x136>
 8015efe:	6920      	ldr	r0, [r4, #16]
 8015f00:	6803      	ldr	r3, [r0, #0]
 8015f02:	691b      	ldr	r3, [r3, #16]
 8015f04:	4798      	blx	r3
 8015f06:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015f08:	4606      	mov	r6, r0
 8015f0a:	b903      	cbnz	r3, 8015f0e <_ZN8touchgfx3HAL4tickEv+0x102>
 8015f0c:	6720      	str	r0, [r4, #112]	; 0x70
 8015f0e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015f10:	4a1e      	ldr	r2, [pc, #120]	; (8015f8c <_ZN8touchgfx3HAL4tickEv+0x180>)
 8015f12:	1af3      	subs	r3, r6, r3
 8015f14:	4293      	cmp	r3, r2
 8015f16:	d914      	bls.n	8015f42 <_ZN8touchgfx3HAL4tickEv+0x136>
 8015f18:	6920      	ldr	r0, [r4, #16]
 8015f1a:	6803      	ldr	r3, [r0, #0]
 8015f1c:	699b      	ldr	r3, [r3, #24]
 8015f1e:	4798      	blx	r3
 8015f20:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015f22:	2264      	movs	r2, #100	; 0x64
 8015f24:	1af3      	subs	r3, r6, r3
 8015f26:	fbb3 f3f2 	udiv	r3, r3, r2
 8015f2a:	fbb0 f0f3 	udiv	r0, r0, r3
 8015f2e:	2800      	cmp	r0, #0
 8015f30:	dc1e      	bgt.n	8015f70 <_ZN8touchgfx3HAL4tickEv+0x164>
 8015f32:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8015f36:	6920      	ldr	r0, [r4, #16]
 8015f38:	2100      	movs	r1, #0
 8015f3a:	6803      	ldr	r3, [r0, #0]
 8015f3c:	69db      	ldr	r3, [r3, #28]
 8015f3e:	4798      	blx	r3
 8015f40:	6726      	str	r6, [r4, #112]	; 0x70
 8015f42:	f003 fc39 	bl	80197b8 <_ZN8touchgfx11Application11getInstanceEv>
 8015f46:	6803      	ldr	r3, [r0, #0]
 8015f48:	2100      	movs	r1, #0
 8015f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f4c:	4798      	blx	r3
 8015f4e:	6823      	ldr	r3, [r4, #0]
 8015f50:	4620      	mov	r0, r4
 8015f52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015f56:	4798      	blx	r3
 8015f58:	2001      	movs	r0, #1
 8015f5a:	f7ed faca 	bl	80034f2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8015f5e:	2300      	movs	r3, #0
 8015f60:	702b      	strb	r3, [r5, #0]
 8015f62:	b004      	add	sp, #16
 8015f64:	bd70      	pop	{r4, r5, r6, pc}
 8015f66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015f6a:	4620      	mov	r0, r4
 8015f6c:	4798      	blx	r3
 8015f6e:	e7ae      	b.n	8015ece <_ZN8touchgfx3HAL4tickEv+0xc2>
 8015f70:	2863      	cmp	r0, #99	; 0x63
 8015f72:	bfcb      	itete	gt
 8015f74:	2300      	movgt	r3, #0
 8015f76:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8015f7a:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8015f7e:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8015f82:	e7d8      	b.n	8015f36 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8015f84:	20056784 	.word	0x20056784
 8015f88:	20056785 	.word	0x20056785
 8015f8c:	05f5e100 	.word	0x05f5e100

08015f90 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8015f90:	f7ed bd14 	b.w	80039bc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015f94 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8015f94:	6581      	str	r1, [r0, #88]	; 0x58
 8015f96:	301c      	adds	r0, #28
 8015f98:	f00e bf0a 	b.w	8024db0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08015f9c <_ZN8touchgfx3HAL5touchEll>:
 8015f9c:	b530      	push	{r4, r5, lr}
 8015f9e:	b087      	sub	sp, #28
 8015fa0:	4604      	mov	r4, r0
 8015fa2:	a804      	add	r0, sp, #16
 8015fa4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8015fa8:	f003 f9f2 	bl	8019390 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8015fac:	9b04      	ldr	r3, [sp, #16]
 8015fae:	a906      	add	r1, sp, #24
 8015fb0:	a803      	add	r0, sp, #12
 8015fb2:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015fb6:	9b05      	ldr	r3, [sp, #20]
 8015fb8:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8015fbc:	f003 fa26 	bl	801940c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8015fc0:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8015fc4:	f104 001c 	add.w	r0, r4, #28
 8015fc8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8015fcc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8015fd0:	b189      	cbz	r1, 8015ff6 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8015fd2:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8015fd6:	9300      	str	r3, [sp, #0]
 8015fd8:	4613      	mov	r3, r2
 8015fda:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8015fde:	462a      	mov	r2, r5
 8015fe0:	f00e fef6 	bl	8024dd0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8015fe4:	b128      	cbz	r0, 8015ff2 <_ZN8touchgfx3HAL5touchEll+0x56>
 8015fe6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8015fea:	65e3      	str	r3, [r4, #92]	; 0x5c
 8015fec:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015ff0:	6623      	str	r3, [r4, #96]	; 0x60
 8015ff2:	b007      	add	sp, #28
 8015ff4:	bd30      	pop	{r4, r5, pc}
 8015ff6:	f00e ff2f 	bl	8024e58 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015ffa:	2301      	movs	r3, #1
 8015ffc:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8016000:	e7f1      	b.n	8015fe6 <_ZN8touchgfx3HAL5touchEll+0x4a>

08016002 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8016002:	b570      	push	{r4, r5, r6, lr}
 8016004:	2b00      	cmp	r3, #0
 8016006:	d050      	beq.n	80160aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8016008:	ea81 0002 	eor.w	r0, r1, r2
 801600c:	07c6      	lsls	r6, r0, #31
 801600e:	d508      	bpl.n	8016022 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8016010:	3a01      	subs	r2, #1
 8016012:	18cc      	adds	r4, r1, r3
 8016014:	42a1      	cmp	r1, r4
 8016016:	d048      	beq.n	80160aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8016018:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801601c:	f801 0b01 	strb.w	r0, [r1], #1
 8016020:	e7f8      	b.n	8016014 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8016022:	07d5      	lsls	r5, r2, #31
 8016024:	bf42      	ittt	mi
 8016026:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801602a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801602e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8016032:	2b01      	cmp	r3, #1
 8016034:	d915      	bls.n	8016062 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8016036:	ea82 0001 	eor.w	r0, r2, r1
 801603a:	0784      	lsls	r4, r0, #30
 801603c:	d02d      	beq.n	801609a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 801603e:	1e94      	subs	r4, r2, #2
 8016040:	4608      	mov	r0, r1
 8016042:	18ce      	adds	r6, r1, r3
 8016044:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8016048:	f820 5b02 	strh.w	r5, [r0], #2
 801604c:	1a35      	subs	r5, r6, r0
 801604e:	2d01      	cmp	r5, #1
 8016050:	d8f8      	bhi.n	8016044 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8016052:	1e98      	subs	r0, r3, #2
 8016054:	f003 0301 	and.w	r3, r3, #1
 8016058:	f020 0001 	bic.w	r0, r0, #1
 801605c:	3002      	adds	r0, #2
 801605e:	4401      	add	r1, r0
 8016060:	4402      	add	r2, r0
 8016062:	1f14      	subs	r4, r2, #4
 8016064:	4608      	mov	r0, r1
 8016066:	18ce      	adds	r6, r1, r3
 8016068:	1a35      	subs	r5, r6, r0
 801606a:	2d03      	cmp	r5, #3
 801606c:	d810      	bhi.n	8016090 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801606e:	089c      	lsrs	r4, r3, #2
 8016070:	00a0      	lsls	r0, r4, #2
 8016072:	4401      	add	r1, r0
 8016074:	3801      	subs	r0, #1
 8016076:	4402      	add	r2, r0
 8016078:	f06f 0003 	mvn.w	r0, #3
 801607c:	fb00 3404 	mla	r4, r0, r4, r3
 8016080:	440c      	add	r4, r1
 8016082:	42a1      	cmp	r1, r4
 8016084:	d011      	beq.n	80160aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8016086:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801608a:	f801 3b01 	strb.w	r3, [r1], #1
 801608e:	e7f8      	b.n	8016082 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8016090:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8016094:	f840 5b04 	str.w	r5, [r0], #4
 8016098:	e7e6      	b.n	8016068 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 801609a:	0790      	lsls	r0, r2, #30
 801609c:	d0e1      	beq.n	8016062 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801609e:	f832 0b02 	ldrh.w	r0, [r2], #2
 80160a2:	3b02      	subs	r3, #2
 80160a4:	f821 0b02 	strh.w	r0, [r1], #2
 80160a8:	e7db      	b.n	8016062 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80160aa:	2001      	movs	r0, #1
 80160ac:	bd70      	pop	{r4, r5, r6, pc}

080160ae <_ZN8touchgfx3HAL7noTouchEv>:
 80160ae:	b510      	push	{r4, lr}
 80160b0:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80160b4:	4604      	mov	r4, r0
 80160b6:	b153      	cbz	r3, 80160ce <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80160b8:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80160bc:	2101      	movs	r1, #1
 80160be:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80160c2:	301c      	adds	r0, #28
 80160c4:	f00e fec8 	bl	8024e58 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80160c8:	2300      	movs	r3, #0
 80160ca:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80160ce:	bd10      	pop	{r4, pc}

080160d0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80160d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80160d4:	4604      	mov	r4, r0
 80160d6:	6980      	ldr	r0, [r0, #24]
 80160d8:	b085      	sub	sp, #20
 80160da:	460f      	mov	r7, r1
 80160dc:	4690      	mov	r8, r2
 80160de:	4699      	mov	r9, r3
 80160e0:	b930      	cbnz	r0, 80160f0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 80160e2:	4b1c      	ldr	r3, [pc, #112]	; (8016154 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 80160e4:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80160e8:	4a1b      	ldr	r2, [pc, #108]	; (8016158 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 80160ea:	481c      	ldr	r0, [pc, #112]	; (801615c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 80160ec:	f010 fc68 	bl	80269c0 <__assert_func>
 80160f0:	ad04      	add	r5, sp, #16
 80160f2:	2600      	movs	r6, #0
 80160f4:	f845 6d04 	str.w	r6, [r5, #-4]!
 80160f8:	6806      	ldr	r6, [r0, #0]
 80160fa:	9501      	str	r5, [sp, #4]
 80160fc:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8016100:	9500      	str	r5, [sp, #0]
 8016102:	6835      	ldr	r5, [r6, #0]
 8016104:	47a8      	blx	r5
 8016106:	4d16      	ldr	r5, [pc, #88]	; (8016160 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8016108:	4606      	mov	r6, r0
 801610a:	f8a5 9000 	strh.w	r9, [r5]
 801610e:	f7f0 fa73 	bl	80065f8 <_ZN8touchgfx3HAL3lcdEv>
 8016112:	6803      	ldr	r3, [r0, #0]
 8016114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016116:	4798      	blx	r3
 8016118:	2801      	cmp	r0, #1
 801611a:	d012      	beq.n	8016142 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 801611c:	d306      	bcc.n	801612c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 801611e:	280d      	cmp	r0, #13
 8016120:	d80b      	bhi.n	801613a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8016122:	4b10      	ldr	r3, [pc, #64]	; (8016164 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8016124:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8016128:	4a0b      	ldr	r2, [pc, #44]	; (8016158 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 801612a:	e7de      	b.n	80160ea <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 801612c:	882b      	ldrh	r3, [r5, #0]
 801612e:	fb08 7203 	mla	r2, r8, r3, r7
 8016132:	9b03      	ldr	r3, [sp, #12]
 8016134:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8016138:	63e3      	str	r3, [r4, #60]	; 0x3c
 801613a:	4630      	mov	r0, r6
 801613c:	b005      	add	sp, #20
 801613e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016142:	882a      	ldrh	r2, [r5, #0]
 8016144:	9b03      	ldr	r3, [sp, #12]
 8016146:	fb08 7202 	mla	r2, r8, r2, r7
 801614a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801614e:	1a9a      	subs	r2, r3, r2
 8016150:	63e2      	str	r2, [r4, #60]	; 0x3c
 8016152:	e7f2      	b.n	801613a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8016154:	0802cd7c 	.word	0x0802cd7c
 8016158:	0802d101 	.word	0x0802d101
 801615c:	0802cdc1 	.word	0x0802cdc1
 8016160:	2005677a 	.word	0x2005677a
 8016164:	0802cde7 	.word	0x0802cde7

08016168 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8016168:	b5f0      	push	{r4, r5, r6, r7, lr}
 801616a:	b08b      	sub	sp, #44	; 0x2c
 801616c:	4617      	mov	r7, r2
 801616e:	4604      	mov	r4, r0
 8016170:	460e      	mov	r6, r1
 8016172:	461d      	mov	r5, r3
 8016174:	f7f0 fa40 	bl	80065f8 <_ZN8touchgfx3HAL3lcdEv>
 8016178:	6803      	ldr	r3, [r0, #0]
 801617a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801617c:	4798      	blx	r3
 801617e:	4b0f      	ldr	r3, [pc, #60]	; (80161bc <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x54>)
 8016180:	6822      	ldr	r2, [r4, #0]
 8016182:	4631      	mov	r1, r6
 8016184:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8016188:	881b      	ldrh	r3, [r3, #0]
 801618a:	4620      	mov	r0, r4
 801618c:	9306      	str	r3, [sp, #24]
 801618e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8016192:	9305      	str	r3, [sp, #20]
 8016194:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8016198:	9304      	str	r3, [sp, #16]
 801619a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801619e:	9303      	str	r3, [sp, #12]
 80161a0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80161a4:	9302      	str	r3, [sp, #8]
 80161a6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80161aa:	e9cd 5300 	strd	r5, r3, [sp]
 80161ae:	463b      	mov	r3, r7
 80161b0:	6b95      	ldr	r5, [r2, #56]	; 0x38
 80161b2:	2200      	movs	r2, #0
 80161b4:	47a8      	blx	r5
 80161b6:	b00b      	add	sp, #44	; 0x2c
 80161b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80161ba:	bf00      	nop
 80161bc:	2005677a 	.word	0x2005677a

080161c0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 80161c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80161c4:	4698      	mov	r8, r3
 80161c6:	6803      	ldr	r3, [r0, #0]
 80161c8:	b08b      	sub	sp, #44	; 0x2c
 80161ca:	4617      	mov	r7, r2
 80161cc:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80161ce:	460e      	mov	r6, r1
 80161d0:	4b11      	ldr	r3, [pc, #68]	; (8016218 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 80161d2:	4604      	mov	r4, r0
 80161d4:	f8b3 9000 	ldrh.w	r9, [r3]
 80161d8:	f7f0 fa0e 	bl	80065f8 <_ZN8touchgfx3HAL3lcdEv>
 80161dc:	6803      	ldr	r3, [r0, #0]
 80161de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161e0:	4798      	blx	r3
 80161e2:	2302      	movs	r3, #2
 80161e4:	9008      	str	r0, [sp, #32]
 80161e6:	2200      	movs	r2, #0
 80161e8:	4631      	mov	r1, r6
 80161ea:	4620      	mov	r0, r4
 80161ec:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80161f0:	2301      	movs	r3, #1
 80161f2:	9305      	str	r3, [sp, #20]
 80161f4:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80161f8:	9304      	str	r3, [sp, #16]
 80161fa:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80161fe:	9303      	str	r3, [sp, #12]
 8016200:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8016204:	9302      	str	r3, [sp, #8]
 8016206:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801620a:	e9cd 8300 	strd	r8, r3, [sp]
 801620e:	463b      	mov	r3, r7
 8016210:	47a8      	blx	r5
 8016212:	b00b      	add	sp, #44	; 0x2c
 8016214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016218:	2005677a 	.word	0x2005677a

0801621c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 801621c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016220:	4698      	mov	r8, r3
 8016222:	6803      	ldr	r3, [r0, #0]
 8016224:	b087      	sub	sp, #28
 8016226:	460e      	mov	r6, r1
 8016228:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801622a:	4617      	mov	r7, r2
 801622c:	4b0d      	ldr	r3, [pc, #52]	; (8016264 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 801622e:	4604      	mov	r4, r0
 8016230:	f8b3 9000 	ldrh.w	r9, [r3]
 8016234:	f7f0 f9e0 	bl	80065f8 <_ZN8touchgfx3HAL3lcdEv>
 8016238:	6803      	ldr	r3, [r0, #0]
 801623a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801623c:	4798      	blx	r3
 801623e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8016242:	463a      	mov	r2, r7
 8016244:	4631      	mov	r1, r6
 8016246:	9302      	str	r3, [sp, #8]
 8016248:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801624c:	9301      	str	r3, [sp, #4]
 801624e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8016252:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8016256:	9300      	str	r3, [sp, #0]
 8016258:	4620      	mov	r0, r4
 801625a:	4643      	mov	r3, r8
 801625c:	47a8      	blx	r5
 801625e:	b007      	add	sp, #28
 8016260:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016264:	2005677a 	.word	0x2005677a

08016268 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8016268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801626c:	4604      	mov	r4, r0
 801626e:	b08f      	sub	sp, #60	; 0x3c
 8016270:	4610      	mov	r0, r2
 8016272:	460d      	mov	r5, r1
 8016274:	4691      	mov	r9, r2
 8016276:	461e      	mov	r6, r3
 8016278:	f006 fabc 	bl	801c7f4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801627c:	2800      	cmp	r0, #0
 801627e:	f000 80b3 	beq.w	80163e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x180>
 8016282:	6823      	ldr	r3, [r4, #0]
 8016284:	4620      	mov	r0, r4
 8016286:	f8df b190 	ldr.w	fp, [pc, #400]	; 8016418 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>
 801628a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801628e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016290:	4798      	blx	r3
 8016292:	6823      	ldr	r3, [r4, #0]
 8016294:	4620      	mov	r0, r4
 8016296:	f8df a184 	ldr.w	sl, [pc, #388]	; 801641c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 801629a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801629c:	4798      	blx	r3
 801629e:	f8bb 3000 	ldrh.w	r3, [fp]
 80162a2:	4f5a      	ldr	r7, [pc, #360]	; (801640c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 80162a4:	9300      	str	r3, [sp, #0]
 80162a6:	f8ba 3000 	ldrh.w	r3, [sl]
 80162aa:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80162ae:	4640      	mov	r0, r8
 80162b0:	9301      	str	r3, [sp, #4]
 80162b2:	883b      	ldrh	r3, [r7, #0]
 80162b4:	9302      	str	r3, [sp, #8]
 80162b6:	4b56      	ldr	r3, [pc, #344]	; (8016410 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 80162b8:	881a      	ldrh	r2, [r3, #0]
 80162ba:	9304      	str	r3, [sp, #16]
 80162bc:	9203      	str	r2, [sp, #12]
 80162be:	f006 fb53 	bl	801c968 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80162c2:	8038      	strh	r0, [r7, #0]
 80162c4:	4640      	mov	r0, r8
 80162c6:	f006 fb89 	bl	801c9dc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80162ca:	9b04      	ldr	r3, [sp, #16]
 80162cc:	8018      	strh	r0, [r3, #0]
 80162ce:	4b51      	ldr	r3, [pc, #324]	; (8016414 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80162d0:	781b      	ldrb	r3, [r3, #0]
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	f040 808b 	bne.w	80163ee <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x186>
 80162d8:	883b      	ldrh	r3, [r7, #0]
 80162da:	f8aa 0000 	strh.w	r0, [sl]
 80162de:	f8ab 3000 	strh.w	r3, [fp]
 80162e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80162e4:	4648      	mov	r0, r9
 80162e6:	6c27      	ldr	r7, [r4, #64]	; 0x40
 80162e8:	9304      	str	r3, [sp, #16]
 80162ea:	f006 fa83 	bl	801c7f4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80162ee:	2200      	movs	r2, #0
 80162f0:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 80162f4:	4611      	mov	r1, r2
 80162f6:	4628      	mov	r0, r5
 80162f8:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80162fc:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8016300:	f7ef fdf2 	bl	8005ee8 <_ZN8touchgfx8Drawable5setXYEss>
 8016304:	2301      	movs	r3, #1
 8016306:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 801630a:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 801630e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8016312:	2b00      	cmp	r3, #0
 8016314:	dd71      	ble.n	80163fa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x192>
 8016316:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801631a:	2b00      	cmp	r3, #0
 801631c:	dd6d      	ble.n	80163fa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x192>
 801631e:	462a      	mov	r2, r5
 8016320:	ab0a      	add	r3, sp, #40	; 0x28
 8016322:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8016326:	6851      	ldr	r1, [r2, #4]
 8016328:	c303      	stmia	r3!, {r0, r1}
 801632a:	4631      	mov	r1, r6
 801632c:	a80a      	add	r0, sp, #40	; 0x28
 801632e:	f7ff fbe5 	bl	8015afc <_ZN8touchgfx4RectaNERKS0_>
 8016332:	4b36      	ldr	r3, [pc, #216]	; (801640c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 8016334:	2600      	movs	r6, #0
 8016336:	f9b3 2000 	ldrsh.w	r2, [r3]
 801633a:	4b35      	ldr	r3, [pc, #212]	; (8016410 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 801633c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8016340:	aa0a      	add	r2, sp, #40	; 0x28
 8016342:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016346:	960c      	str	r6, [sp, #48]	; 0x30
 8016348:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801634c:	ab08      	add	r3, sp, #32
 801634e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016352:	e883 0003 	stmia.w	r3, {r0, r1}
 8016356:	4618      	mov	r0, r3
 8016358:	a90c      	add	r1, sp, #48	; 0x30
 801635a:	f7ff fbcf 	bl	8015afc <_ZN8touchgfx4RectaNERKS0_>
 801635e:	a807      	add	r0, sp, #28
 8016360:	f006 fc00 	bl	801cb64 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016364:	4680      	mov	r8, r0
 8016366:	f7f0 f947 	bl	80065f8 <_ZN8touchgfx3HAL3lcdEv>
 801636a:	6802      	ldr	r2, [r0, #0]
 801636c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801636e:	4790      	blx	r2
 8016370:	4580      	cmp	r8, r0
 8016372:	d049      	beq.n	8016408 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a0>
 8016374:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8016376:	b150      	cbz	r0, 801638e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x126>
 8016378:	a807      	add	r0, sp, #28
 801637a:	f006 fbf3 	bl	801cb64 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801637e:	4606      	mov	r6, r0
 8016380:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8016382:	6803      	ldr	r3, [r0, #0]
 8016384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016386:	4798      	blx	r3
 8016388:	1a33      	subs	r3, r6, r0
 801638a:	4258      	negs	r0, r3
 801638c:	4158      	adcs	r0, r3
 801638e:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8016392:	2600      	movs	r6, #0
 8016394:	696b      	ldr	r3, [r5, #20]
 8016396:	a908      	add	r1, sp, #32
 8016398:	682a      	ldr	r2, [r5, #0]
 801639a:	4628      	mov	r0, r5
 801639c:	9305      	str	r3, [sp, #20]
 801639e:	616e      	str	r6, [r5, #20]
 80163a0:	6892      	ldr	r2, [r2, #8]
 80163a2:	4790      	blx	r2
 80163a4:	9b05      	ldr	r3, [sp, #20]
 80163a6:	4652      	mov	r2, sl
 80163a8:	4649      	mov	r1, r9
 80163aa:	616b      	str	r3, [r5, #20]
 80163ac:	4628      	mov	r0, r5
 80163ae:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 80163b2:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 80163b6:	f7ef fd97 	bl	8005ee8 <_ZN8touchgfx8Drawable5setXYEss>
 80163ba:	9b04      	ldr	r3, [sp, #16]
 80163bc:	9a00      	ldr	r2, [sp, #0]
 80163be:	4620      	mov	r0, r4
 80163c0:	e9c4 370f 	strd	r3, r7, [r4, #60]	; 0x3c
 80163c4:	4b14      	ldr	r3, [pc, #80]	; (8016418 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80163c6:	801a      	strh	r2, [r3, #0]
 80163c8:	9a01      	ldr	r2, [sp, #4]
 80163ca:	4b14      	ldr	r3, [pc, #80]	; (801641c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80163cc:	801a      	strh	r2, [r3, #0]
 80163ce:	9a02      	ldr	r2, [sp, #8]
 80163d0:	4b0e      	ldr	r3, [pc, #56]	; (801640c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a4>)
 80163d2:	801a      	strh	r2, [r3, #0]
 80163d4:	4b0e      	ldr	r3, [pc, #56]	; (8016410 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 80163d6:	9a03      	ldr	r2, [sp, #12]
 80163d8:	801a      	strh	r2, [r3, #0]
 80163da:	6823      	ldr	r3, [r4, #0]
 80163dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163de:	4798      	blx	r3
 80163e0:	6823      	ldr	r3, [r4, #0]
 80163e2:	4620      	mov	r0, r4
 80163e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80163e6:	4798      	blx	r3
 80163e8:	b00f      	add	sp, #60	; 0x3c
 80163ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163ee:	883b      	ldrh	r3, [r7, #0]
 80163f0:	f8ab 0000 	strh.w	r0, [fp]
 80163f4:	f8aa 3000 	strh.w	r3, [sl]
 80163f8:	e773      	b.n	80162e2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 80163fa:	462a      	mov	r2, r5
 80163fc:	ab0a      	add	r3, sp, #40	; 0x28
 80163fe:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8016402:	6851      	ldr	r1, [r2, #4]
 8016404:	c303      	stmia	r3!, {r0, r1}
 8016406:	e794      	b.n	8016332 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xca>
 8016408:	4630      	mov	r0, r6
 801640a:	e7c0      	b.n	801638e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x126>
 801640c:	20056774 	.word	0x20056774
 8016410:	20056776 	.word	0x20056776
 8016414:	20056778 	.word	0x20056778
 8016418:	2005677a 	.word	0x2005677a
 801641c:	2005677c 	.word	0x2005677c

08016420 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8016420:	4b07      	ldr	r3, [pc, #28]	; (8016440 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8016422:	b510      	push	{r4, lr}
 8016424:	781b      	ldrb	r3, [r3, #0]
 8016426:	4604      	mov	r4, r0
 8016428:	b13b      	cbz	r3, 801643a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801642a:	6803      	ldr	r3, [r0, #0]
 801642c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801642e:	4798      	blx	r3
 8016430:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016432:	4283      	cmp	r3, r0
 8016434:	d101      	bne.n	801643a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8016436:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8016438:	bd10      	pop	{r4, pc}
 801643a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801643c:	e7fc      	b.n	8016438 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801643e:	bf00      	nop
 8016440:	2005677e 	.word	0x2005677e

08016444 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8016444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016448:	b088      	sub	sp, #32
 801644a:	4692      	mov	sl, r2
 801644c:	461c      	mov	r4, r3
 801644e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016452:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 8016456:	2500      	movs	r5, #0
 8016458:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 801645c:	4606      	mov	r6, r0
 801645e:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 8016462:	fb09 a404 	mla	r4, r9, r4, sl
 8016466:	9503      	str	r5, [sp, #12]
 8016468:	f8ad 8014 	strh.w	r8, [sp, #20]
 801646c:	f8ad 7016 	strh.w	r7, [sp, #22]
 8016470:	f88d 501c 	strb.w	r5, [sp, #28]
 8016474:	e9cd 3100 	strd	r3, r1, [sp]
 8016478:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801647c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016480:	f7ff ffce 	bl	8016420 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016484:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8016488:	f8ad 901a 	strh.w	r9, [sp, #26]
 801648c:	f88d 501e 	strb.w	r5, [sp, #30]
 8016490:	9404      	str	r4, [sp, #16]
 8016492:	f88d 501d 	strb.w	r5, [sp, #29]
 8016496:	f1b8 0f00 	cmp.w	r8, #0
 801649a:	d000      	beq.n	801649e <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5a>
 801649c:	b937      	cbnz	r7, 80164ac <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x68>
 801649e:	4b0d      	ldr	r3, [pc, #52]	; (80164d4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x90>)
 80164a0:	f44f 7101 	mov.w	r1, #516	; 0x204
 80164a4:	4a0c      	ldr	r2, [pc, #48]	; (80164d8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 80164a6:	480d      	ldr	r0, [pc, #52]	; (80164dc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 80164a8:	f010 fa8a 	bl	80269c0 <__assert_func>
 80164ac:	6833      	ldr	r3, [r6, #0]
 80164ae:	4630      	mov	r0, r6
 80164b0:	9c00      	ldr	r4, [sp, #0]
 80164b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80164b4:	4798      	blx	r3
 80164b6:	4220      	tst	r0, r4
 80164b8:	d104      	bne.n	80164c4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x80>
 80164ba:	4b09      	ldr	r3, [pc, #36]	; (80164e0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 80164bc:	f240 2105 	movw	r1, #517	; 0x205
 80164c0:	4a05      	ldr	r2, [pc, #20]	; (80164d8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 80164c2:	e7f0      	b.n	80164a6 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x62>
 80164c4:	6870      	ldr	r0, [r6, #4]
 80164c6:	4669      	mov	r1, sp
 80164c8:	6803      	ldr	r3, [r0, #0]
 80164ca:	685b      	ldr	r3, [r3, #4]
 80164cc:	4798      	blx	r3
 80164ce:	b008      	add	sp, #32
 80164d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164d4:	0802cc0f 	.word	0x0802cc0f
 80164d8:	0802cf3c 	.word	0x0802cf3c
 80164dc:	0802cdc1 	.word	0x0802cdc1
 80164e0:	0802cc47 	.word	0x0802cc47

080164e4 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 80164e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164e8:	b089      	sub	sp, #36	; 0x24
 80164ea:	4693      	mov	fp, r2
 80164ec:	461d      	mov	r5, r3
 80164ee:	2400      	movs	r4, #0
 80164f0:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 80164f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80164f8:	468a      	mov	sl, r1
 80164fa:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 80164fe:	fb09 b505 	mla	r5, r9, r5, fp
 8016502:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8016506:	4606      	mov	r6, r0
 8016508:	9403      	str	r4, [sp, #12]
 801650a:	e9cd 3400 	strd	r3, r4, [sp]
 801650e:	f7ff ff87 	bl	8016420 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016512:	f8ad 8014 	strh.w	r8, [sp, #20]
 8016516:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801651a:	f8ad 7016 	strh.w	r7, [sp, #22]
 801651e:	f8ad 4018 	strh.w	r4, [sp, #24]
 8016522:	9504      	str	r5, [sp, #16]
 8016524:	f8ad 901a 	strh.w	r9, [sp, #26]
 8016528:	f8cd a00c 	str.w	sl, [sp, #12]
 801652c:	f8ad 401c 	strh.w	r4, [sp, #28]
 8016530:	f88d 401e 	strb.w	r4, [sp, #30]
 8016534:	f1b8 0f00 	cmp.w	r8, #0
 8016538:	d000      	beq.n	801653c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x58>
 801653a:	b937      	cbnz	r7, 801654a <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x66>
 801653c:	4b0d      	ldr	r3, [pc, #52]	; (8016574 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x90>)
 801653e:	f240 2119 	movw	r1, #537	; 0x219
 8016542:	4a0d      	ldr	r2, [pc, #52]	; (8016578 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 8016544:	480d      	ldr	r0, [pc, #52]	; (801657c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8016546:	f010 fa3b 	bl	80269c0 <__assert_func>
 801654a:	6833      	ldr	r3, [r6, #0]
 801654c:	4630      	mov	r0, r6
 801654e:	9c00      	ldr	r4, [sp, #0]
 8016550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016552:	4798      	blx	r3
 8016554:	4220      	tst	r0, r4
 8016556:	d104      	bne.n	8016562 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x7e>
 8016558:	4b09      	ldr	r3, [pc, #36]	; (8016580 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 801655a:	f240 211a 	movw	r1, #538	; 0x21a
 801655e:	4a06      	ldr	r2, [pc, #24]	; (8016578 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 8016560:	e7f0      	b.n	8016544 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x60>
 8016562:	6870      	ldr	r0, [r6, #4]
 8016564:	4669      	mov	r1, sp
 8016566:	6803      	ldr	r3, [r0, #0]
 8016568:	685b      	ldr	r3, [r3, #4]
 801656a:	4798      	blx	r3
 801656c:	b009      	add	sp, #36	; 0x24
 801656e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016572:	bf00      	nop
 8016574:	0802cc8c 	.word	0x0802cc8c
 8016578:	0802cfb2 	.word	0x0802cfb2
 801657c:	0802cdc1 	.word	0x0802cdc1
 8016580:	0802ccc4 	.word	0x0802ccc4

08016584 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8016584:	b508      	push	{r3, lr}
 8016586:	290d      	cmp	r1, #13
 8016588:	d817      	bhi.n	80165ba <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 801658a:	e8df f001 	tbb	[pc, r1]
 801658e:	090b      	.short	0x090b
 8016590:	0d0d0d07 	.word	0x0d0d0d07
 8016594:	1414140d 	.word	0x1414140d
 8016598:	0d0d1414 	.word	0x0d0d1414
 801659c:	2020      	movs	r0, #32
 801659e:	bd08      	pop	{r3, pc}
 80165a0:	2018      	movs	r0, #24
 80165a2:	e7fc      	b.n	801659e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80165a4:	2010      	movs	r0, #16
 80165a6:	e7fa      	b.n	801659e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80165a8:	4b05      	ldr	r3, [pc, #20]	; (80165c0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 80165aa:	f240 2177 	movw	r1, #631	; 0x277
 80165ae:	4a05      	ldr	r2, [pc, #20]	; (80165c4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 80165b0:	4805      	ldr	r0, [pc, #20]	; (80165c8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 80165b2:	f010 fa05 	bl	80269c0 <__assert_func>
 80165b6:	2008      	movs	r0, #8
 80165b8:	e7f1      	b.n	801659e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80165ba:	2000      	movs	r0, #0
 80165bc:	e7ef      	b.n	801659e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80165be:	bf00      	nop
 80165c0:	0802ce3d 	.word	0x0802ce3d
 80165c4:	0802d2cb 	.word	0x0802d2cb
 80165c8:	0802cdc1 	.word	0x0802cdc1

080165cc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 80165cc:	b570      	push	{r4, r5, r6, lr}
 80165ce:	460d      	mov	r5, r1
 80165d0:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80165d4:	4616      	mov	r6, r2
 80165d6:	461c      	mov	r4, r3
 80165d8:	f7ff ffd4 	bl	8016584 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 80165dc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80165e0:	10c0      	asrs	r0, r0, #3
 80165e2:	fb06 5101 	mla	r1, r6, r1, r5
 80165e6:	fb00 4001 	mla	r0, r0, r1, r4
 80165ea:	bd70      	pop	{r4, r5, r6, pc}

080165ec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 80165ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165f0:	b08a      	sub	sp, #40	; 0x28
 80165f2:	f04f 0c00 	mov.w	ip, #0
 80165f6:	4604      	mov	r4, r0
 80165f8:	469a      	mov	sl, r3
 80165fa:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 80165fe:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8016602:	2d0b      	cmp	r5, #11
 8016604:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8016608:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801660c:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8016610:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8016614:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 8016618:	f8cd c014 	str.w	ip, [sp, #20]
 801661c:	d129      	bne.n	8016672 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x86>
 801661e:	2080      	movs	r0, #128	; 0x80
 8016620:	9204      	str	r2, [sp, #16]
 8016622:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8016626:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801662a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801662e:	f8ad 701c 	strh.w	r7, [sp, #28]
 8016632:	f8ad 601e 	strh.w	r6, [sp, #30]
 8016636:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801663a:	4620      	mov	r0, r4
 801663c:	f7ff fef0 	bl	8016420 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016640:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8016644:	4603      	mov	r3, r0
 8016646:	4651      	mov	r1, sl
 8016648:	4620      	mov	r0, r4
 801664a:	e9cd 9800 	strd	r9, r8, [sp]
 801664e:	f7ff ffbd 	bl	80165cc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8016652:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 8016656:	9006      	str	r0, [sp, #24]
 8016658:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 801665c:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 8016660:	b107      	cbz	r7, 8016664 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x78>
 8016662:	b9d6      	cbnz	r6, 801669a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xae>
 8016664:	4b17      	ldr	r3, [pc, #92]	; (80166c4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8016666:	f240 11cf 	movw	r1, #463	; 0x1cf
 801666a:	4a17      	ldr	r2, [pc, #92]	; (80166c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 801666c:	4817      	ldr	r0, [pc, #92]	; (80166cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xe0>)
 801666e:	f010 f9a7 	bl	80269c0 <__assert_func>
 8016672:	2d02      	cmp	r5, #2
 8016674:	d108      	bne.n	8016688 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x9c>
 8016676:	2bff      	cmp	r3, #255	; 0xff
 8016678:	d104      	bne.n	8016684 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x98>
 801667a:	2800      	cmp	r0, #0
 801667c:	bf14      	ite	ne
 801667e:	2040      	movne	r0, #64	; 0x40
 8016680:	2020      	moveq	r0, #32
 8016682:	e7cd      	b.n	8016620 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 8016684:	2040      	movs	r0, #64	; 0x40
 8016686:	e7cb      	b.n	8016620 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 8016688:	2bff      	cmp	r3, #255	; 0xff
 801668a:	d104      	bne.n	8016696 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xaa>
 801668c:	2800      	cmp	r0, #0
 801668e:	bf14      	ite	ne
 8016690:	2004      	movne	r0, #4
 8016692:	2001      	moveq	r0, #1
 8016694:	e7c4      	b.n	8016620 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 8016696:	2004      	movs	r0, #4
 8016698:	e7c2      	b.n	8016620 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x34>
 801669a:	6823      	ldr	r3, [r4, #0]
 801669c:	4620      	mov	r0, r4
 801669e:	9d02      	ldr	r5, [sp, #8]
 80166a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80166a2:	4798      	blx	r3
 80166a4:	4228      	tst	r0, r5
 80166a6:	d104      	bne.n	80166b2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc6>
 80166a8:	4b09      	ldr	r3, [pc, #36]	; (80166d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xe4>)
 80166aa:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80166ae:	4a06      	ldr	r2, [pc, #24]	; (80166c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 80166b0:	e7dc      	b.n	801666c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x80>
 80166b2:	6860      	ldr	r0, [r4, #4]
 80166b4:	a902      	add	r1, sp, #8
 80166b6:	6803      	ldr	r3, [r0, #0]
 80166b8:	685b      	ldr	r3, [r3, #4]
 80166ba:	4798      	blx	r3
 80166bc:	b00a      	add	sp, #40	; 0x28
 80166be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166c2:	bf00      	nop
 80166c4:	0802cc0f 	.word	0x0802cc0f
 80166c8:	0802d165 	.word	0x0802d165
 80166cc:	0802cdc1 	.word	0x0802cdc1
 80166d0:	0802cc47 	.word	0x0802cc47

080166d4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 80166d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166d8:	b08b      	sub	sp, #44	; 0x2c
 80166da:	469b      	mov	fp, r3
 80166dc:	4604      	mov	r4, r0
 80166de:	4692      	mov	sl, r2
 80166e0:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80166e4:	2600      	movs	r6, #0
 80166e6:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 80166ea:	4689      	mov	r9, r1
 80166ec:	2fff      	cmp	r7, #255	; 0xff
 80166ee:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 80166f2:	9605      	str	r6, [sp, #20]
 80166f4:	bf14      	ite	ne
 80166f6:	2308      	movne	r3, #8
 80166f8:	2302      	moveq	r3, #2
 80166fa:	e9cd 3602 	strd	r3, r6, [sp, #8]
 80166fe:	f7ff fe8f 	bl	8016420 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016702:	465a      	mov	r2, fp
 8016704:	4603      	mov	r3, r0
 8016706:	4651      	mov	r1, sl
 8016708:	4620      	mov	r0, r4
 801670a:	e9cd 8500 	strd	r8, r5, [sp]
 801670e:	f7ff ff5d 	bl	80165cc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8016712:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8016716:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 801671a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801671e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8016722:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8016726:	f8ad 301e 	strh.w	r3, [sp, #30]
 801672a:	6823      	ldr	r3, [r4, #0]
 801672c:	9d02      	ldr	r5, [sp, #8]
 801672e:	9006      	str	r0, [sp, #24]
 8016730:	4620      	mov	r0, r4
 8016732:	f8ad 6020 	strh.w	r6, [sp, #32]
 8016736:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 801673a:	f8cd 9014 	str.w	r9, [sp, #20]
 801673e:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8016742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016744:	4798      	blx	r3
 8016746:	4228      	tst	r0, r5
 8016748:	d106      	bne.n	8016758 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 801674a:	4b07      	ldr	r3, [pc, #28]	; (8016768 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 801674c:	f240 212e 	movw	r1, #558	; 0x22e
 8016750:	4a06      	ldr	r2, [pc, #24]	; (801676c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8016752:	4807      	ldr	r0, [pc, #28]	; (8016770 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8016754:	f010 f934 	bl	80269c0 <__assert_func>
 8016758:	6860      	ldr	r0, [r4, #4]
 801675a:	a902      	add	r1, sp, #8
 801675c:	6803      	ldr	r3, [r0, #0]
 801675e:	685b      	ldr	r3, [r3, #4]
 8016760:	4798      	blx	r3
 8016762:	b00b      	add	sp, #44	; 0x2c
 8016764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016768:	0802cc47 	.word	0x0802cc47
 801676c:	0802d236 	.word	0x0802d236
 8016770:	0802cdc1 	.word	0x0802cdc1

08016774 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8016774:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016778:	461f      	mov	r7, r3
 801677a:	4b0b      	ldr	r3, [pc, #44]	; (80167a8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801677c:	460d      	mov	r5, r1
 801677e:	4616      	mov	r6, r2
 8016780:	f8b3 8000 	ldrh.w	r8, [r3]
 8016784:	4604      	mov	r4, r0
 8016786:	f7ef ff37 	bl	80065f8 <_ZN8touchgfx3HAL3lcdEv>
 801678a:	6803      	ldr	r3, [r0, #0]
 801678c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801678e:	4798      	blx	r3
 8016790:	463b      	mov	r3, r7
 8016792:	4632      	mov	r2, r6
 8016794:	4629      	mov	r1, r5
 8016796:	e9cd 8000 	strd	r8, r0, [sp]
 801679a:	4620      	mov	r0, r4
 801679c:	f7ff ff16 	bl	80165cc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80167a0:	b002      	add	sp, #8
 80167a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167a6:	bf00      	nop
 80167a8:	2005677a 	.word	0x2005677a

080167ac <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 80167ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167b0:	4698      	mov	r8, r3
 80167b2:	b088      	sub	sp, #32
 80167b4:	2300      	movs	r3, #0
 80167b6:	4617      	mov	r7, r2
 80167b8:	4604      	mov	r4, r0
 80167ba:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 80167be:	9303      	str	r3, [sp, #12]
 80167c0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80167c4:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80167c8:	f8ad 6014 	strh.w	r6, [sp, #20]
 80167cc:	f8ad 5016 	strh.w	r5, [sp, #22]
 80167d0:	e9cd 3100 	strd	r3, r1, [sp]
 80167d4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80167d8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80167dc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80167e0:	f88d 301c 	strb.w	r3, [sp, #28]
 80167e4:	f7ff fe1c 	bl	8016420 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80167e8:	4642      	mov	r2, r8
 80167ea:	4603      	mov	r3, r0
 80167ec:	4639      	mov	r1, r7
 80167ee:	4620      	mov	r0, r4
 80167f0:	f7ff ffc0 	bl	8016774 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80167f4:	4b16      	ldr	r3, [pc, #88]	; (8016850 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 80167f6:	9004      	str	r0, [sp, #16]
 80167f8:	881b      	ldrh	r3, [r3, #0]
 80167fa:	f8ad 301a 	strh.w	r3, [sp, #26]
 80167fe:	f7ef fefb 	bl	80065f8 <_ZN8touchgfx3HAL3lcdEv>
 8016802:	6803      	ldr	r3, [r0, #0]
 8016804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016806:	4798      	blx	r3
 8016808:	f88d 001e 	strb.w	r0, [sp, #30]
 801680c:	f88d 001d 	strb.w	r0, [sp, #29]
 8016810:	b106      	cbz	r6, 8016814 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8016812:	b935      	cbnz	r5, 8016822 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8016814:	4b0f      	ldr	r3, [pc, #60]	; (8016854 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8016816:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 801681a:	4a0f      	ldr	r2, [pc, #60]	; (8016858 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 801681c:	480f      	ldr	r0, [pc, #60]	; (801685c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 801681e:	f010 f8cf 	bl	80269c0 <__assert_func>
 8016822:	6823      	ldr	r3, [r4, #0]
 8016824:	4620      	mov	r0, r4
 8016826:	9d00      	ldr	r5, [sp, #0]
 8016828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801682a:	4798      	blx	r3
 801682c:	4228      	tst	r0, r5
 801682e:	d104      	bne.n	801683a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8016830:	4b0b      	ldr	r3, [pc, #44]	; (8016860 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8016832:	f240 11ed 	movw	r1, #493	; 0x1ed
 8016836:	4a08      	ldr	r2, [pc, #32]	; (8016858 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8016838:	e7f0      	b.n	801681c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 801683a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801683c:	4669      	mov	r1, sp
 801683e:	6860      	ldr	r0, [r4, #4]
 8016840:	9303      	str	r3, [sp, #12]
 8016842:	6803      	ldr	r3, [r0, #0]
 8016844:	685b      	ldr	r3, [r3, #4]
 8016846:	4798      	blx	r3
 8016848:	b008      	add	sp, #32
 801684a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801684e:	bf00      	nop
 8016850:	2005677a 	.word	0x2005677a
 8016854:	0802cc0f 	.word	0x0802cc0f
 8016858:	0802d017 	.word	0x0802d017
 801685c:	0802cdc1 	.word	0x0802cdc1
 8016860:	0802cc47 	.word	0x0802cc47

08016864 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8016864:	b570      	push	{r4, r5, r6, lr}
 8016866:	b08a      	sub	sp, #40	; 0x28
 8016868:	4604      	mov	r4, r0
 801686a:	466b      	mov	r3, sp
 801686c:	e883 0006 	stmia.w	r3, {r1, r2}
 8016870:	4b1f      	ldr	r3, [pc, #124]	; (80168f0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8016872:	781b      	ldrb	r3, [r3, #0]
 8016874:	b933      	cbnz	r3, 8016884 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8016876:	4b1f      	ldr	r3, [pc, #124]	; (80168f4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8016878:	f240 213f 	movw	r1, #575	; 0x23f
 801687c:	4a1e      	ldr	r2, [pc, #120]	; (80168f8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 801687e:	481f      	ldr	r0, [pc, #124]	; (80168fc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8016880:	f010 f89e 	bl	80269c0 <__assert_func>
 8016884:	2300      	movs	r3, #0
 8016886:	f8bd 5000 	ldrh.w	r5, [sp]
 801688a:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 801688e:	9305      	str	r3, [sp, #20]
 8016890:	2301      	movs	r3, #1
 8016892:	9302      	str	r3, [sp, #8]
 8016894:	6803      	ldr	r3, [r0, #0]
 8016896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016898:	4798      	blx	r3
 801689a:	4632      	mov	r2, r6
 801689c:	4629      	mov	r1, r5
 801689e:	4603      	mov	r3, r0
 80168a0:	4620      	mov	r0, r4
 80168a2:	f7ff ff67 	bl	8016774 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80168a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80168a8:	9003      	str	r0, [sp, #12]
 80168aa:	9306      	str	r3, [sp, #24]
 80168ac:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80168b0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80168b4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80168b8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80168bc:	4b10      	ldr	r3, [pc, #64]	; (8016900 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 80168be:	881b      	ldrh	r3, [r3, #0]
 80168c0:	f8ad 3020 	strh.w	r3, [sp, #32]
 80168c4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80168c8:	f7ef fe96 	bl	80065f8 <_ZN8touchgfx3HAL3lcdEv>
 80168cc:	6803      	ldr	r3, [r0, #0]
 80168ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168d0:	4798      	blx	r3
 80168d2:	23ff      	movs	r3, #255	; 0xff
 80168d4:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80168d8:	a902      	add	r1, sp, #8
 80168da:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80168de:	6860      	ldr	r0, [r4, #4]
 80168e0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80168e4:	6803      	ldr	r3, [r0, #0]
 80168e6:	685b      	ldr	r3, [r3, #4]
 80168e8:	4798      	blx	r3
 80168ea:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80168ec:	b00a      	add	sp, #40	; 0x28
 80168ee:	bd70      	pop	{r4, r5, r6, pc}
 80168f0:	2005677f 	.word	0x2005677f
 80168f4:	0802cd0e 	.word	0x0802cd0e
 80168f8:	0802d0bb 	.word	0x0802d0bb
 80168fc:	0802cdc1 	.word	0x0802cdc1
 8016900:	2005677a 	.word	0x2005677a

08016904 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8016904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016906:	b08b      	sub	sp, #44	; 0x2c
 8016908:	4604      	mov	r4, r0
 801690a:	466d      	mov	r5, sp
 801690c:	e885 0006 	stmia.w	r5, {r1, r2}
 8016910:	461d      	mov	r5, r3
 8016912:	2300      	movs	r3, #0
 8016914:	f8bd 6000 	ldrh.w	r6, [sp]
 8016918:	9305      	str	r3, [sp, #20]
 801691a:	2301      	movs	r3, #1
 801691c:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8016920:	9302      	str	r3, [sp, #8]
 8016922:	6803      	ldr	r3, [r0, #0]
 8016924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016926:	4798      	blx	r3
 8016928:	463a      	mov	r2, r7
 801692a:	4631      	mov	r1, r6
 801692c:	4603      	mov	r3, r0
 801692e:	4620      	mov	r0, r4
 8016930:	f7ff ff20 	bl	8016774 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016934:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016938:	9003      	str	r0, [sp, #12]
 801693a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801693e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016942:	9506      	str	r5, [sp, #24]
 8016944:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016948:	4b0d      	ldr	r3, [pc, #52]	; (8016980 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 801694a:	881b      	ldrh	r3, [r3, #0]
 801694c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016950:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016952:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8016956:	f7ef fe4f 	bl	80065f8 <_ZN8touchgfx3HAL3lcdEv>
 801695a:	6803      	ldr	r3, [r0, #0]
 801695c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801695e:	4798      	blx	r3
 8016960:	23ff      	movs	r3, #255	; 0xff
 8016962:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8016966:	a902      	add	r1, sp, #8
 8016968:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801696c:	6860      	ldr	r0, [r4, #4]
 801696e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016972:	6803      	ldr	r3, [r0, #0]
 8016974:	685b      	ldr	r3, [r3, #4]
 8016976:	4798      	blx	r3
 8016978:	4628      	mov	r0, r5
 801697a:	b00b      	add	sp, #44	; 0x2c
 801697c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801697e:	bf00      	nop
 8016980:	2005677a 	.word	0x2005677a

08016984 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8016984:	b570      	push	{r4, r5, r6, lr}
 8016986:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801698a:	4604      	mov	r4, r0
 801698c:	b19b      	cbz	r3, 80169b6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801698e:	2002      	movs	r0, #2
 8016990:	f7ec fdba 	bl	8003508 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8016994:	2300      	movs	r3, #0
 8016996:	4620      	mov	r0, r4
 8016998:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801699c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80169a0:	6823      	ldr	r3, [r4, #0]
 80169a2:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 80169a6:	f7ff fd3b 	bl	8016420 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80169aa:	4601      	mov	r1, r0
 80169ac:	4620      	mov	r0, r4
 80169ae:	462b      	mov	r3, r5
 80169b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80169b4:	4718      	bx	r3
 80169b6:	bd70      	pop	{r4, r5, r6, pc}

080169b8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 80169b8:	b538      	push	{r3, r4, r5, lr}
 80169ba:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 80169be:	4604      	mov	r4, r0
 80169c0:	460d      	mov	r5, r1
 80169c2:	428a      	cmp	r2, r1
 80169c4:	d008      	beq.n	80169d8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 80169c6:	2a01      	cmp	r2, #1
 80169c8:	6803      	ldr	r3, [r0, #0]
 80169ca:	d106      	bne.n	80169da <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 80169cc:	b929      	cbnz	r1, 80169da <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 80169ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80169d2:	4798      	blx	r3
 80169d4:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 80169d8:	bd38      	pop	{r3, r4, r5, pc}
 80169da:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80169de:	4620      	mov	r0, r4
 80169e0:	e7f7      	b.n	80169d2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

080169e4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80169e4:	4b0d      	ldr	r3, [pc, #52]	; (8016a1c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 80169e6:	b510      	push	{r4, lr}
 80169e8:	781b      	ldrb	r3, [r3, #0]
 80169ea:	4604      	mov	r4, r0
 80169ec:	b95b      	cbnz	r3, 8016a06 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80169ee:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80169f2:	2b02      	cmp	r3, #2
 80169f4:	d007      	beq.n	8016a06 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80169f6:	6840      	ldr	r0, [r0, #4]
 80169f8:	f000 f93a 	bl	8016c70 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80169fc:	b118      	cbz	r0, 8016a06 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80169fe:	6862      	ldr	r2, [r4, #4]
 8016a00:	7a53      	ldrb	r3, [r2, #9]
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d0fc      	beq.n	8016a00 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8016a06:	f7ec ffcb 	bl	80039a0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8016a0a:	4620      	mov	r0, r4
 8016a0c:	2100      	movs	r1, #0
 8016a0e:	f7ff ffd3 	bl	80169b8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8016a12:	4620      	mov	r0, r4
 8016a14:	f7ff fd04 	bl	8016420 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016a18:	bd10      	pop	{r4, pc}
 8016a1a:	bf00      	nop
 8016a1c:	2005677e 	.word	0x2005677e

08016a20 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8016a20:	4770      	bx	lr

08016a22 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8016a22:	2000      	movs	r0, #0
 8016a24:	4770      	bx	lr

08016a26 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8016a26:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8016a2a:	1a13      	subs	r3, r2, r0
 8016a2c:	4258      	negs	r0, r3
 8016a2e:	4158      	adcs	r0, r3
 8016a30:	4770      	bx	lr

08016a32 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8016a32:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8016a36:	1a9b      	subs	r3, r3, r2
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	bfdc      	itt	le
 8016a3c:	6882      	ldrle	r2, [r0, #8]
 8016a3e:	189b      	addle	r3, r3, r2
 8016a40:	2b01      	cmp	r3, #1
 8016a42:	bfcc      	ite	gt
 8016a44:	2000      	movgt	r0, #0
 8016a46:	2001      	movle	r0, #1
 8016a48:	4770      	bx	lr

08016a4a <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8016a4a:	6902      	ldr	r2, [r0, #16]
 8016a4c:	6840      	ldr	r0, [r0, #4]
 8016a4e:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8016a52:	4770      	bx	lr

08016a54 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8016a54:	6803      	ldr	r3, [r0, #0]
 8016a56:	691b      	ldr	r3, [r3, #16]
 8016a58:	4718      	bx	r3

08016a5a <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8016a5a:	4770      	bx	lr

08016a5c <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8016a5c:	4770      	bx	lr
	...

08016a60 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8016a60:	2301      	movs	r3, #1
 8016a62:	b570      	push	{r4, r5, r6, lr}
 8016a64:	7203      	strb	r3, [r0, #8]
 8016a66:	4604      	mov	r4, r0
 8016a68:	6840      	ldr	r0, [r0, #4]
 8016a6a:	6803      	ldr	r3, [r0, #0]
 8016a6c:	699b      	ldr	r3, [r3, #24]
 8016a6e:	4798      	blx	r3
 8016a70:	6803      	ldr	r3, [r0, #0]
 8016a72:	4605      	mov	r5, r0
 8016a74:	2b40      	cmp	r3, #64	; 0x40
 8016a76:	d039      	beq.n	8016aec <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016a78:	d815      	bhi.n	8016aa6 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8016a7a:	2b04      	cmp	r3, #4
 8016a7c:	d022      	beq.n	8016ac4 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8016a7e:	d808      	bhi.n	8016a92 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016a80:	2b01      	cmp	r3, #1
 8016a82:	d033      	beq.n	8016aec <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016a84:	2b02      	cmp	r3, #2
 8016a86:	d108      	bne.n	8016a9a <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 8016a88:	6823      	ldr	r3, [r4, #0]
 8016a8a:	4620      	mov	r0, r4
 8016a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016a8e:	4798      	blx	r3
 8016a90:	e025      	b.n	8016ade <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 8016a92:	2b08      	cmp	r3, #8
 8016a94:	d01e      	beq.n	8016ad4 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 8016a96:	2b20      	cmp	r3, #32
 8016a98:	d028      	beq.n	8016aec <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016a9a:	4b17      	ldr	r3, [pc, #92]	; (8016af8 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 8016a9c:	218b      	movs	r1, #139	; 0x8b
 8016a9e:	4a17      	ldr	r2, [pc, #92]	; (8016afc <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 8016aa0:	4817      	ldr	r0, [pc, #92]	; (8016b00 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 8016aa2:	f00f ff8d 	bl	80269c0 <__assert_func>
 8016aa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016aaa:	d01f      	beq.n	8016aec <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016aac:	d804      	bhi.n	8016ab8 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 8016aae:	2b80      	cmp	r3, #128	; 0x80
 8016ab0:	d01c      	beq.n	8016aec <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016ab6:	e7ef      	b.n	8016a98 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 8016ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016abc:	d016      	beq.n	8016aec <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8016abe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016ac2:	e7e0      	b.n	8016a86 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8016ac4:	6823      	ldr	r3, [r4, #0]
 8016ac6:	7f01      	ldrb	r1, [r0, #28]
 8016ac8:	4620      	mov	r0, r4
 8016aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016acc:	4798      	blx	r3
 8016ace:	6823      	ldr	r3, [r4, #0]
 8016ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016ad2:	e006      	b.n	8016ae2 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8016ad4:	6823      	ldr	r3, [r4, #0]
 8016ad6:	7f01      	ldrb	r1, [r0, #28]
 8016ad8:	4620      	mov	r0, r4
 8016ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016adc:	4798      	blx	r3
 8016ade:	6823      	ldr	r3, [r4, #0]
 8016ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016ae2:	4629      	mov	r1, r5
 8016ae4:	4620      	mov	r0, r4
 8016ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016aea:	4718      	bx	r3
 8016aec:	6823      	ldr	r3, [r4, #0]
 8016aee:	4620      	mov	r0, r4
 8016af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016af2:	4798      	blx	r3
 8016af4:	e7eb      	b.n	8016ace <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8016af6:	bf00      	nop
 8016af8:	0802d314 	.word	0x0802d314
 8016afc:	0802d424 	.word	0x0802d424
 8016b00:	0802d339 	.word	0x0802d339

08016b04 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8016b04:	b570      	push	{r4, r5, r6, lr}
 8016b06:	4604      	mov	r4, r0
 8016b08:	460e      	mov	r6, r1
 8016b0a:	6860      	ldr	r0, [r4, #4]
 8016b0c:	6803      	ldr	r3, [r0, #0]
 8016b0e:	685b      	ldr	r3, [r3, #4]
 8016b10:	4798      	blx	r3
 8016b12:	2800      	cmp	r0, #0
 8016b14:	d1f9      	bne.n	8016b0a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8016b16:	4d0d      	ldr	r5, [pc, #52]	; (8016b4c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8016b18:	6828      	ldr	r0, [r5, #0]
 8016b1a:	6803      	ldr	r3, [r0, #0]
 8016b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016b1e:	4798      	blx	r3
 8016b20:	f7ec ff58 	bl	80039d4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8016b24:	6828      	ldr	r0, [r5, #0]
 8016b26:	2101      	movs	r1, #1
 8016b28:	f7ff ff46 	bl	80169b8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8016b2c:	6860      	ldr	r0, [r4, #4]
 8016b2e:	4631      	mov	r1, r6
 8016b30:	6803      	ldr	r3, [r0, #0]
 8016b32:	689b      	ldr	r3, [r3, #8]
 8016b34:	4798      	blx	r3
 8016b36:	6823      	ldr	r3, [r4, #0]
 8016b38:	4620      	mov	r0, r4
 8016b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b3c:	4798      	blx	r3
 8016b3e:	6828      	ldr	r0, [r5, #0]
 8016b40:	6803      	ldr	r3, [r0, #0]
 8016b42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016b48:	4718      	bx	r3
 8016b4a:	bf00      	nop
 8016b4c:	20056780 	.word	0x20056780

08016b50 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8016b50:	b508      	push	{r3, lr}
 8016b52:	f7ec ff25 	bl	80039a0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8016b56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016b5a:	f7ec bf2f 	b.w	80039bc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08016b5e <_ZN8touchgfx13DMA_Interface5startEv>:
 8016b5e:	b510      	push	{r4, lr}
 8016b60:	4604      	mov	r4, r0
 8016b62:	6840      	ldr	r0, [r0, #4]
 8016b64:	6803      	ldr	r3, [r0, #0]
 8016b66:	681b      	ldr	r3, [r3, #0]
 8016b68:	4798      	blx	r3
 8016b6a:	b948      	cbnz	r0, 8016b80 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016b6c:	7a63      	ldrb	r3, [r4, #9]
 8016b6e:	b13b      	cbz	r3, 8016b80 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016b70:	7a23      	ldrb	r3, [r4, #8]
 8016b72:	b92b      	cbnz	r3, 8016b80 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016b74:	6823      	ldr	r3, [r4, #0]
 8016b76:	4620      	mov	r0, r4
 8016b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b7e:	4718      	bx	r3
 8016b80:	bd10      	pop	{r4, pc}
	...

08016b84 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8016b84:	b510      	push	{r4, lr}
 8016b86:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 8016b8a:	1b12      	subs	r2, r2, r4
 8016b8c:	2a00      	cmp	r2, #0
 8016b8e:	bfdc      	itt	le
 8016b90:	6883      	ldrle	r3, [r0, #8]
 8016b92:	18d2      	addle	r2, r2, r3
 8016b94:	2a01      	cmp	r2, #1
 8016b96:	dd18      	ble.n	8016bca <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8016b98:	6843      	ldr	r3, [r0, #4]
 8016b9a:	f101 021c 	add.w	r2, r1, #28
 8016b9e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8016ba2:	f851 4b04 	ldr.w	r4, [r1], #4
 8016ba6:	4291      	cmp	r1, r2
 8016ba8:	f843 4b04 	str.w	r4, [r3], #4
 8016bac:	d1f9      	bne.n	8016ba2 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8016bae:	880a      	ldrh	r2, [r1, #0]
 8016bb0:	801a      	strh	r2, [r3, #0]
 8016bb2:	788a      	ldrb	r2, [r1, #2]
 8016bb4:	709a      	strb	r2, [r3, #2]
 8016bb6:	68c3      	ldr	r3, [r0, #12]
 8016bb8:	6882      	ldr	r2, [r0, #8]
 8016bba:	f3bf 8f5b 	dmb	ish
 8016bbe:	3301      	adds	r3, #1
 8016bc0:	429a      	cmp	r2, r3
 8016bc2:	bfd8      	it	le
 8016bc4:	1a9b      	suble	r3, r3, r2
 8016bc6:	60c3      	str	r3, [r0, #12]
 8016bc8:	bd10      	pop	{r4, pc}
 8016bca:	4b03      	ldr	r3, [pc, #12]	; (8016bd8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8016bcc:	2139      	movs	r1, #57	; 0x39
 8016bce:	4a03      	ldr	r2, [pc, #12]	; (8016bdc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8016bd0:	4803      	ldr	r0, [pc, #12]	; (8016be0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8016bd2:	f00f fef5 	bl	80269c0 <__assert_func>
 8016bd6:	bf00      	nop
 8016bd8:	0802d35f 	.word	0x0802d35f
 8016bdc:	0802d454 	.word	0x0802d454
 8016be0:	0802d339 	.word	0x0802d339

08016be4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8016be4:	b510      	push	{r4, lr}
 8016be6:	6803      	ldr	r3, [r0, #0]
 8016be8:	4604      	mov	r4, r0
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	4798      	blx	r3
 8016bee:	b128      	cbz	r0, 8016bfc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8016bf0:	4b07      	ldr	r3, [pc, #28]	; (8016c10 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8016bf2:	213f      	movs	r1, #63	; 0x3f
 8016bf4:	4a07      	ldr	r2, [pc, #28]	; (8016c14 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8016bf6:	4808      	ldr	r0, [pc, #32]	; (8016c18 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8016bf8:	f00f fee2 	bl	80269c0 <__assert_func>
 8016bfc:	6923      	ldr	r3, [r4, #16]
 8016bfe:	68a2      	ldr	r2, [r4, #8]
 8016c00:	f3bf 8f5b 	dmb	ish
 8016c04:	3301      	adds	r3, #1
 8016c06:	429a      	cmp	r2, r3
 8016c08:	bfd8      	it	le
 8016c0a:	1a9b      	suble	r3, r3, r2
 8016c0c:	6123      	str	r3, [r4, #16]
 8016c0e:	bd10      	pop	{r4, pc}
 8016c10:	0802d382 	.word	0x0802d382
 8016c14:	0802d4a2 	.word	0x0802d4a2
 8016c18:	0802d339 	.word	0x0802d339

08016c1c <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8016c1c:	b570      	push	{r4, r5, r6, lr}
 8016c1e:	4604      	mov	r4, r0
 8016c20:	6840      	ldr	r0, [r0, #4]
 8016c22:	6803      	ldr	r3, [r0, #0]
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	4798      	blx	r3
 8016c28:	4605      	mov	r5, r0
 8016c2a:	b930      	cbnz	r0, 8016c3a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016c2c:	7a23      	ldrb	r3, [r4, #8]
 8016c2e:	b123      	cbz	r3, 8016c3a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016c30:	6860      	ldr	r0, [r4, #4]
 8016c32:	6803      	ldr	r3, [r0, #0]
 8016c34:	695b      	ldr	r3, [r3, #20]
 8016c36:	4798      	blx	r3
 8016c38:	7225      	strb	r5, [r4, #8]
 8016c3a:	6860      	ldr	r0, [r4, #4]
 8016c3c:	6803      	ldr	r3, [r0, #0]
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	4798      	blx	r3
 8016c42:	b928      	cbnz	r0, 8016c50 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8016c44:	6823      	ldr	r3, [r4, #0]
 8016c46:	4620      	mov	r0, r4
 8016c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c4e:	4718      	bx	r3
 8016c50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c54:	f7ec beca 	b.w	80039ec <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08016c58 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8016c58:	b510      	push	{r4, lr}
 8016c5a:	6082      	str	r2, [r0, #8]
 8016c5c:	2200      	movs	r2, #0
 8016c5e:	4c03      	ldr	r4, [pc, #12]	; (8016c6c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8016c60:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8016c64:	e9c0 4100 	strd	r4, r1, [r0]
 8016c68:	bd10      	pop	{r4, pc}
 8016c6a:	bf00      	nop
 8016c6c:	0802d408 	.word	0x0802d408

08016c70 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8016c70:	6840      	ldr	r0, [r0, #4]
 8016c72:	6803      	ldr	r3, [r0, #0]
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	4718      	bx	r3

08016c78 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 8016c78:	2001      	movs	r0, #1
 8016c7a:	4770      	bx	lr

08016c7c <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 8016c7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016c80:	460d      	mov	r5, r1
 8016c82:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8016c86:	b085      	sub	sp, #20
 8016c88:	4690      	mov	r8, r2
 8016c8a:	4411      	add	r1, r2
 8016c8c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8016c90:	4699      	mov	r9, r3
 8016c92:	6803      	ldr	r3, [r0, #0]
 8016c94:	60c1      	str	r1, [r0, #12]
 8016c96:	4604      	mov	r4, r0
 8016c98:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016c9a:	440a      	add	r2, r1
 8016c9c:	6102      	str	r2, [r0, #16]
 8016c9e:	68db      	ldr	r3, [r3, #12]
 8016ca0:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 8016ca4:	4798      	blx	r3
 8016ca6:	2800      	cmp	r0, #0
 8016ca8:	d03a      	beq.n	8016d20 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa4>
 8016caa:	44c8      	add	r8, r9
 8016cac:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8016cb0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8016cb4:	4445      	add	r5, r8
 8016cb6:	442e      	add	r6, r5
 8016cb8:	6823      	ldr	r3, [r4, #0]
 8016cba:	f10d 020f 	add.w	r2, sp, #15
 8016cbe:	a903      	add	r1, sp, #12
 8016cc0:	4620      	mov	r0, r4
 8016cc2:	9200      	str	r2, [sp, #0]
 8016cc4:	f10d 020d 	add.w	r2, sp, #13
 8016cc8:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8016ccc:	f10d 030e 	add.w	r3, sp, #14
 8016cd0:	47c0      	blx	r8
 8016cd2:	b1f0      	cbz	r0, 8016d12 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x96>
 8016cd4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8016cd8:	7a20      	ldrb	r0, [r4, #8]
 8016cda:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8016cde:	4358      	muls	r0, r3
 8016ce0:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8016ce4:	1c43      	adds	r3, r0, #1
 8016ce6:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8016cea:	7838      	ldrb	r0, [r7, #0]
 8016cec:	121b      	asrs	r3, r3, #8
 8016cee:	fb10 f003 	smulbb	r0, r0, r3
 8016cf2:	b283      	uxth	r3, r0
 8016cf4:	1c58      	adds	r0, r3, #1
 8016cf6:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8016cfa:	6823      	ldr	r3, [r4, #0]
 8016cfc:	1200      	asrs	r0, r0, #8
 8016cfe:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8016d02:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8016d06:	28ff      	cmp	r0, #255	; 0xff
 8016d08:	d10d      	bne.n	8016d26 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xaa>
 8016d0a:	9100      	str	r1, [sp, #0]
 8016d0c:	4629      	mov	r1, r5
 8016d0e:	4620      	mov	r0, r4
 8016d10:	47c0      	blx	r8
 8016d12:	68e3      	ldr	r3, [r4, #12]
 8016d14:	3503      	adds	r5, #3
 8016d16:	3701      	adds	r7, #1
 8016d18:	3301      	adds	r3, #1
 8016d1a:	42ae      	cmp	r6, r5
 8016d1c:	60e3      	str	r3, [r4, #12]
 8016d1e:	d8cb      	bhi.n	8016cb8 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x3c>
 8016d20:	b005      	add	sp, #20
 8016d22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d26:	fa1f fc80 	uxth.w	ip, r0
 8016d2a:	43c0      	mvns	r0, r0
 8016d2c:	f895 e002 	ldrb.w	lr, [r5, #2]
 8016d30:	fb12 f20c 	smulbb	r2, r2, ip
 8016d34:	b2c0      	uxtb	r0, r0
 8016d36:	fb13 f30c 	smulbb	r3, r3, ip
 8016d3a:	fb0e 2200 	mla	r2, lr, r0, r2
 8016d3e:	f895 e001 	ldrb.w	lr, [r5, #1]
 8016d42:	fb11 f10c 	smulbb	r1, r1, ip
 8016d46:	fb0e 3300 	mla	r3, lr, r0, r3
 8016d4a:	f895 e000 	ldrb.w	lr, [r5]
 8016d4e:	b292      	uxth	r2, r2
 8016d50:	b29b      	uxth	r3, r3
 8016d52:	fb0e 1000 	mla	r0, lr, r0, r1
 8016d56:	1c59      	adds	r1, r3, #1
 8016d58:	b280      	uxth	r0, r0
 8016d5a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8016d5e:	1c51      	adds	r1, r2, #1
 8016d60:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8016d64:	1c41      	adds	r1, r0, #1
 8016d66:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8016d6a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8016d6e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8016d72:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8016d76:	9000      	str	r0, [sp, #0]
 8016d78:	e7c8      	b.n	8016d0c <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x90>

08016d7a <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 8016d7a:	f89d 0000 	ldrb.w	r0, [sp]
 8016d7e:	704b      	strb	r3, [r1, #1]
 8016d80:	7008      	strb	r0, [r1, #0]
 8016d82:	708a      	strb	r2, [r1, #2]
 8016d84:	4770      	bx	lr

08016d86 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 8016d86:	4413      	add	r3, r2
 8016d88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d8e:	4419      	add	r1, r3
 8016d90:	7a03      	ldrb	r3, [r0, #8]
 8016d92:	e9dd 6406 	ldrd	r6, r4, [sp, #24]
 8016d96:	2bff      	cmp	r3, #255	; 0xff
 8016d98:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8016d9c:	440e      	add	r6, r1
 8016d9e:	d13d      	bne.n	8016e1c <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x96>
 8016da0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016da4:	3103      	adds	r1, #3
 8016da6:	7d87      	ldrb	r7, [r0, #22]
 8016da8:	2bff      	cmp	r3, #255	; 0xff
 8016daa:	d10a      	bne.n	8016dc2 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3c>
 8016dac:	f801 7c03 	strb.w	r7, [r1, #-3]
 8016db0:	7d43      	ldrb	r3, [r0, #21]
 8016db2:	f801 3c02 	strb.w	r3, [r1, #-2]
 8016db6:	7d03      	ldrb	r3, [r0, #20]
 8016db8:	f801 3c01 	strb.w	r3, [r1, #-1]
 8016dbc:	428e      	cmp	r6, r1
 8016dbe:	d8ef      	bhi.n	8016da0 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x1a>
 8016dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016dc2:	b29a      	uxth	r2, r3
 8016dc4:	43db      	mvns	r3, r3
 8016dc6:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 8016dca:	fb17 f702 	smulbb	r7, r7, r2
 8016dce:	b2db      	uxtb	r3, r3
 8016dd0:	fb05 7503 	mla	r5, r5, r3, r7
 8016dd4:	b2ad      	uxth	r5, r5
 8016dd6:	1c6f      	adds	r7, r5, #1
 8016dd8:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8016ddc:	f811 7c02 	ldrb.w	r7, [r1, #-2]
 8016de0:	fb17 f703 	smulbb	r7, r7, r3
 8016de4:	122d      	asrs	r5, r5, #8
 8016de6:	f801 5c03 	strb.w	r5, [r1, #-3]
 8016dea:	7d45      	ldrb	r5, [r0, #21]
 8016dec:	fb05 7502 	mla	r5, r5, r2, r7
 8016df0:	b2ad      	uxth	r5, r5
 8016df2:	1c6f      	adds	r7, r5, #1
 8016df4:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8016df8:	122d      	asrs	r5, r5, #8
 8016dfa:	f801 5c02 	strb.w	r5, [r1, #-2]
 8016dfe:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8016e02:	7d07      	ldrb	r7, [r0, #20]
 8016e04:	fb15 f303 	smulbb	r3, r5, r3
 8016e08:	fb07 3202 	mla	r2, r7, r2, r3
 8016e0c:	b292      	uxth	r2, r2
 8016e0e:	1c53      	adds	r3, r2, #1
 8016e10:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8016e14:	1212      	asrs	r2, r2, #8
 8016e16:	f801 2c01 	strb.w	r2, [r1, #-1]
 8016e1a:	e7cf      	b.n	8016dbc <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x36>
 8016e1c:	3103      	adds	r1, #3
 8016e1e:	f814 2b01 	ldrb.w	r2, [r4], #1
 8016e22:	428e      	cmp	r6, r1
 8016e24:	7a03      	ldrb	r3, [r0, #8]
 8016e26:	f101 0103 	add.w	r1, r1, #3
 8016e2a:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 8016e2e:	fb02 f303 	mul.w	r3, r2, r3
 8016e32:	f103 0201 	add.w	r2, r3, #1
 8016e36:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8016e3a:	ea4f 2222 	mov.w	r2, r2, asr #8
 8016e3e:	b295      	uxth	r5, r2
 8016e40:	ea6f 0202 	mvn.w	r2, r2
 8016e44:	b2d3      	uxtb	r3, r2
 8016e46:	7d82      	ldrb	r2, [r0, #22]
 8016e48:	fb1c fc03 	smulbb	ip, ip, r3
 8016e4c:	fb02 c205 	mla	r2, r2, r5, ip
 8016e50:	b292      	uxth	r2, r2
 8016e52:	f102 0c01 	add.w	ip, r2, #1
 8016e56:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8016e5a:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 8016e5e:	fb1c fc03 	smulbb	ip, ip, r3
 8016e62:	ea4f 2222 	mov.w	r2, r2, asr #8
 8016e66:	f801 2c06 	strb.w	r2, [r1, #-6]
 8016e6a:	7d42      	ldrb	r2, [r0, #21]
 8016e6c:	fb02 c205 	mla	r2, r2, r5, ip
 8016e70:	b292      	uxth	r2, r2
 8016e72:	f102 0c01 	add.w	ip, r2, #1
 8016e76:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8016e7a:	ea4f 2222 	mov.w	r2, r2, asr #8
 8016e7e:	f801 2c05 	strb.w	r2, [r1, #-5]
 8016e82:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 8016e86:	f890 c014 	ldrb.w	ip, [r0, #20]
 8016e8a:	fb12 f303 	smulbb	r3, r2, r3
 8016e8e:	fb0c 3305 	mla	r3, ip, r5, r3
 8016e92:	b29b      	uxth	r3, r3
 8016e94:	f103 0201 	add.w	r2, r3, #1
 8016e98:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8016e9c:	ea4f 2323 	mov.w	r3, r3, asr #8
 8016ea0:	f801 3c04 	strb.w	r3, [r1, #-4]
 8016ea4:	d8bb      	bhi.n	8016e1e <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x98>
 8016ea6:	e78b      	b.n	8016dc0 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3a>

08016ea8 <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 8016ea8:	b510      	push	{r4, lr}
 8016eaa:	7d04      	ldrb	r4, [r0, #20]
 8016eac:	700c      	strb	r4, [r1, #0]
 8016eae:	7d41      	ldrb	r1, [r0, #21]
 8016eb0:	7011      	strb	r1, [r2, #0]
 8016eb2:	7d82      	ldrb	r2, [r0, #22]
 8016eb4:	2001      	movs	r0, #1
 8016eb6:	701a      	strb	r2, [r3, #0]
 8016eb8:	22ff      	movs	r2, #255	; 0xff
 8016eba:	9b02      	ldr	r3, [sp, #8]
 8016ebc:	701a      	strb	r2, [r3, #0]
 8016ebe:	bd10      	pop	{r4, pc}

08016ec0 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 8016ec0:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 8016ec4:	4770      	bx	lr

08016ec6 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 8016ec6:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 8016eca:	4770      	bx	lr

08016ecc <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 8016ecc:	6281      	str	r1, [r0, #40]	; 0x28
 8016ece:	4770      	bx	lr

08016ed0 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8016ed0:	b510      	push	{r4, lr}
 8016ed2:	2200      	movs	r2, #0
 8016ed4:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8016ed8:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8016edc:	8002      	strh	r2, [r0, #0]
 8016ede:	8042      	strh	r2, [r0, #2]
 8016ee0:	8084      	strh	r4, [r0, #4]
 8016ee2:	80c1      	strh	r1, [r0, #6]
 8016ee4:	bd10      	pop	{r4, pc}

08016ee6 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 8016ee6:	2200      	movs	r2, #0
 8016ee8:	8002      	strh	r2, [r0, #0]
 8016eea:	8042      	strh	r2, [r0, #2]
 8016eec:	8082      	strh	r2, [r0, #4]
 8016eee:	80c2      	strh	r2, [r0, #6]
 8016ef0:	4770      	bx	lr
	...

08016ef4 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 8016ef4:	b508      	push	{r3, lr}
 8016ef6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016ef8:	b928      	cbnz	r0, 8016f06 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 8016efa:	4b03      	ldr	r3, [pc, #12]	; (8016f08 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 8016efc:	2126      	movs	r1, #38	; 0x26
 8016efe:	4a03      	ldr	r2, [pc, #12]	; (8016f0c <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 8016f00:	4803      	ldr	r0, [pc, #12]	; (8016f10 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 8016f02:	f00f fd5d 	bl	80269c0 <__assert_func>
 8016f06:	bd08      	pop	{r3, pc}
 8016f08:	0802d514 	.word	0x0802d514
 8016f0c:	0802d5f4 	.word	0x0802d5f4
 8016f10:	0802d53b 	.word	0x0802d53b

08016f14 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8016f14:	b510      	push	{r4, lr}
 8016f16:	f9b1 4000 	ldrsh.w	r4, [r1]
 8016f1a:	888a      	ldrh	r2, [r1, #4]
 8016f1c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016f20:	4422      	add	r2, r4
 8016f22:	b212      	sxth	r2, r2
 8016f24:	4293      	cmp	r3, r2
 8016f26:	da15      	bge.n	8016f54 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016f28:	8882      	ldrh	r2, [r0, #4]
 8016f2a:	4413      	add	r3, r2
 8016f2c:	b21b      	sxth	r3, r3
 8016f2e:	429c      	cmp	r4, r3
 8016f30:	da10      	bge.n	8016f54 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016f32:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8016f36:	88c9      	ldrh	r1, [r1, #6]
 8016f38:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8016f3c:	4419      	add	r1, r3
 8016f3e:	b209      	sxth	r1, r1
 8016f40:	428a      	cmp	r2, r1
 8016f42:	da07      	bge.n	8016f54 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016f44:	88c0      	ldrh	r0, [r0, #6]
 8016f46:	4410      	add	r0, r2
 8016f48:	b200      	sxth	r0, r0
 8016f4a:	4283      	cmp	r3, r0
 8016f4c:	bfac      	ite	ge
 8016f4e:	2000      	movge	r0, #0
 8016f50:	2001      	movlt	r0, #1
 8016f52:	bd10      	pop	{r4, pc}
 8016f54:	2000      	movs	r0, #0
 8016f56:	e7fc      	b.n	8016f52 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08016f58 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8016f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f5c:	b08b      	sub	sp, #44	; 0x2c
 8016f5e:	4604      	mov	r4, r0
 8016f60:	6808      	ldr	r0, [r1, #0]
 8016f62:	f04f 0a00 	mov.w	sl, #0
 8016f66:	6849      	ldr	r1, [r1, #4]
 8016f68:	ab04      	add	r3, sp, #16
 8016f6a:	f647 7bff 	movw	fp, #32767	; 0x7fff
 8016f6e:	c303      	stmia	r3!, {r0, r1}
 8016f70:	4b35      	ldr	r3, [pc, #212]	; (8017048 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf0>)
 8016f72:	4621      	mov	r1, r4
 8016f74:	a806      	add	r0, sp, #24
 8016f76:	781b      	ldrb	r3, [r3, #0]
 8016f78:	2b01      	cmp	r3, #1
 8016f7a:	6823      	ldr	r3, [r4, #0]
 8016f7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016f7e:	bf1f      	itttt	ne
 8016f80:	f10d 090e 	addne.w	r9, sp, #14
 8016f84:	ae05      	addne	r6, sp, #20
 8016f86:	f10d 0516 	addne.w	r5, sp, #22
 8016f8a:	f10d 0812 	addne.w	r8, sp, #18
 8016f8e:	bf01      	itttt	eq
 8016f90:	f10d 0916 	addeq.w	r9, sp, #22
 8016f94:	f10d 060e 	addeq.w	r6, sp, #14
 8016f98:	ad05      	addeq	r5, sp, #20
 8016f9a:	f10d 0810 	addeq.w	r8, sp, #16
 8016f9e:	4798      	blx	r3
 8016fa0:	f9b5 3000 	ldrsh.w	r3, [r5]
 8016fa4:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d042      	beq.n	8017032 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xda>
 8016fac:	4293      	cmp	r3, r2
 8016fae:	bfa8      	it	ge
 8016fb0:	4613      	movge	r3, r2
 8016fb2:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016fb6:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8016fba:	2f00      	cmp	r7, #0
 8016fbc:	dd21      	ble.n	8017002 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xaa>
 8016fbe:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8016fc2:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8016fc6:	f9b6 2000 	ldrsh.w	r2, [r6]
 8016fca:	f9b9 3000 	ldrsh.w	r3, [r9]
 8016fce:	f8ad 0020 	strh.w	r0, [sp, #32]
 8016fd2:	a808      	add	r0, sp, #32
 8016fd4:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 8016fd8:	a906      	add	r1, sp, #24
 8016fda:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8016fde:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8016fe2:	f7ff ff97 	bl	8016f14 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016fe6:	9001      	str	r0, [sp, #4]
 8016fe8:	b1d0      	cbz	r0, 8017020 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 8016fea:	6822      	ldr	r2, [r4, #0]
 8016fec:	a908      	add	r1, sp, #32
 8016fee:	4620      	mov	r0, r4
 8016ff0:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8016ff2:	4790      	blx	r2
 8016ff4:	b9a0      	cbnz	r0, 8017020 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 8016ff6:	107f      	asrs	r7, r7, #1
 8016ff8:	9b01      	ldr	r3, [sp, #4]
 8016ffa:	f8ad 700e 	strh.w	r7, [sp, #14]
 8016ffe:	469a      	mov	sl, r3
 8017000:	e7d9      	b.n	8016fb6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8017002:	d10d      	bne.n	8017020 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 8017004:	2301      	movs	r3, #1
 8017006:	f8ad 300e 	strh.w	r3, [sp, #14]
 801700a:	f8b8 2000 	ldrh.w	r2, [r8]
 801700e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8017012:	440a      	add	r2, r1
 8017014:	f8a8 2000 	strh.w	r2, [r8]
 8017018:	882b      	ldrh	r3, [r5, #0]
 801701a:	1a5b      	subs	r3, r3, r1
 801701c:	802b      	strh	r3, [r5, #0]
 801701e:	e7bf      	b.n	8016fa0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8017020:	f1ba 0f00 	cmp.w	sl, #0
 8017024:	d0f1      	beq.n	801700a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 8017026:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 801702a:	455b      	cmp	r3, fp
 801702c:	bf08      	it	eq
 801702e:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 8017030:	e7eb      	b.n	801700a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 8017032:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8017036:	429a      	cmp	r2, r3
 8017038:	bf04      	itt	eq
 801703a:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 801703e:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8017040:	b00b      	add	sp, #44	; 0x2c
 8017042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017046:	bf00      	nop
 8017048:	20056778 	.word	0x20056778

0801704c <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801704c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801704e:	b085      	sub	sp, #20
 8017050:	6803      	ldr	r3, [r0, #0]
 8017052:	4604      	mov	r4, r0
 8017054:	4601      	mov	r1, r0
 8017056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017058:	4668      	mov	r0, sp
 801705a:	4798      	blx	r3
 801705c:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
 8017060:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 8017064:	2300      	movs	r3, #0
 8017066:	a902      	add	r1, sp, #8
 8017068:	4668      	mov	r0, sp
 801706a:	9302      	str	r3, [sp, #8]
 801706c:	f8ad 600c 	strh.w	r6, [sp, #12]
 8017070:	f8ad 500e 	strh.w	r5, [sp, #14]
 8017074:	f7ff ff4e 	bl	8016f14 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017078:	b340      	cbz	r0, 80170cc <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x80>
 801707a:	f9bd 2000 	ldrsh.w	r2, [sp]
 801707e:	f8bd 7004 	ldrh.w	r7, [sp, #4]
 8017082:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8017086:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801708a:	443a      	add	r2, r7
 801708c:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
 8017090:	f8ad 0000 	strh.w	r0, [sp]
 8017094:	b292      	uxth	r2, r2
 8017096:	f8ad 1002 	strh.w	r1, [sp, #2]
 801709a:	b217      	sxth	r7, r2
 801709c:	42be      	cmp	r6, r7
 801709e:	bfd8      	it	le
 80170a0:	b2b2      	uxthle	r2, r6
 80170a2:	1a12      	subs	r2, r2, r0
 80170a4:	f8ad 2004 	strh.w	r2, [sp, #4]
 80170a8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80170ac:	4413      	add	r3, r2
 80170ae:	b29b      	uxth	r3, r3
 80170b0:	b21a      	sxth	r2, r3
 80170b2:	4295      	cmp	r5, r2
 80170b4:	bfd8      	it	le
 80170b6:	b2ab      	uxthle	r3, r5
 80170b8:	1a5b      	subs	r3, r3, r1
 80170ba:	f8ad 3006 	strh.w	r3, [sp, #6]
 80170be:	6823      	ldr	r3, [r4, #0]
 80170c0:	4669      	mov	r1, sp
 80170c2:	4620      	mov	r0, r4
 80170c4:	691b      	ldr	r3, [r3, #16]
 80170c6:	4798      	blx	r3
 80170c8:	b005      	add	sp, #20
 80170ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80170cc:	e9cd 0000 	strd	r0, r0, [sp]
 80170d0:	e7f5      	b.n	80170be <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x72>
	...

080170d4 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 80170d4:	2200      	movs	r2, #0
 80170d6:	2101      	movs	r1, #1
 80170d8:	8082      	strh	r2, [r0, #4]
 80170da:	80c2      	strh	r2, [r0, #6]
 80170dc:	8102      	strh	r2, [r0, #8]
 80170de:	8142      	strh	r2, [r0, #10]
 80170e0:	8182      	strh	r2, [r0, #12]
 80170e2:	81c2      	strh	r2, [r0, #14]
 80170e4:	8202      	strh	r2, [r0, #16]
 80170e6:	8242      	strh	r2, [r0, #18]
 80170e8:	61c2      	str	r2, [r0, #28]
 80170ea:	8402      	strh	r2, [r0, #32]
 80170ec:	8442      	strh	r2, [r0, #34]	; 0x22
 80170ee:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 80170f2:	6282      	str	r2, [r0, #40]	; 0x28
 80170f4:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 80170f8:	4905      	ldr	r1, [pc, #20]	; (8017110 <_ZN8touchgfx12CanvasWidgetC1Ev+0x3c>)
 80170fa:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80170fe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017102:	6001      	str	r1, [r0, #0]
 8017104:	8582      	strh	r2, [r0, #44]	; 0x2c
 8017106:	22ff      	movs	r2, #255	; 0xff
 8017108:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 801710c:	4770      	bx	lr
 801710e:	bf00      	nop
 8017110:	0802d580 	.word	0x0802d580

08017114 <_ZNK8touchgfx4Line14getMinimalRectEv>:
 8017114:	f101 0368 	add.w	r3, r1, #104	; 0x68
 8017118:	4602      	mov	r2, r0
 801711a:	cb03      	ldmia	r3!, {r0, r1}
 801711c:	6010      	str	r0, [r2, #0]
 801711e:	4610      	mov	r0, r2
 8017120:	6051      	str	r1, [r2, #4]
 8017122:	4770      	bx	lr

08017124 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8017124:	b507      	push	{r0, r1, r2, lr}
 8017126:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801712a:	ab01      	add	r3, sp, #4
 801712c:	6809      	ldr	r1, [r1, #0]
 801712e:	6800      	ldr	r0, [r0, #0]
 8017130:	f003 fc74 	bl	801aa1c <_ZN8touchgfx6muldivElllRl>
 8017134:	b003      	add	sp, #12
 8017136:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801713c <_ZN8touchgfx7CWRUtil4sineEi>:
 801713c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8017140:	fb90 f3f2 	sdiv	r3, r0, r2
 8017144:	fb03 0312 	mls	r3, r3, r2, r0
 8017148:	4413      	add	r3, r2
 801714a:	fb93 f0f2 	sdiv	r0, r3, r2
 801714e:	fb02 3010 	mls	r0, r2, r0, r3
 8017152:	4b0a      	ldr	r3, [pc, #40]	; (801717c <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 8017154:	285a      	cmp	r0, #90	; 0x5a
 8017156:	dc02      	bgt.n	801715e <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 8017158:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801715c:	4770      	bx	lr
 801715e:	28b4      	cmp	r0, #180	; 0xb4
 8017160:	dc02      	bgt.n	8017168 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 8017162:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8017166:	e7f7      	b.n	8017158 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 8017168:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 801716c:	bfd4      	ite	le
 801716e:	38b4      	suble	r0, #180	; 0xb4
 8017170:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8017174:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8017178:	4240      	negs	r0, r0
 801717a:	4770      	bx	lr
 801717c:	0802d69e 	.word	0x0802d69e

08017180 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 8017180:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8017184:	f04f 0300 	mov.w	r3, #0
 8017188:	bf2c      	ite	cs
 801718a:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 801718e:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 8017192:	1899      	adds	r1, r3, r2
 8017194:	4288      	cmp	r0, r1
 8017196:	bf24      	itt	cs
 8017198:	1853      	addcs	r3, r2, r1
 801719a:	1a40      	subcs	r0, r0, r1
 801719c:	0892      	lsrs	r2, r2, #2
 801719e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80171a2:	d1f6      	bne.n	8017192 <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 80171a4:	4618      	mov	r0, r3
 80171a6:	4770      	bx	lr

080171a8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 80171a8:	b510      	push	{r4, lr}
 80171aa:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 80171ae:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 80171b2:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 80171b6:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 80171ba:	139b      	asrs	r3, r3, #14
 80171bc:	13a4      	asrs	r4, r4, #14
 80171be:	429c      	cmp	r4, r3
 80171c0:	bfb8      	it	lt
 80171c2:	461c      	movlt	r4, r3
 80171c4:	2c01      	cmp	r4, #1
 80171c6:	dd07      	ble.n	80171d8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 80171c8:	fb91 f1f4 	sdiv	r1, r1, r4
 80171cc:	fb90 f0f4 	sdiv	r0, r0, r4
 80171d0:	f7ff ffea 	bl	80171a8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 80171d4:	4360      	muls	r0, r4
 80171d6:	bd10      	pop	{r4, pc}
 80171d8:	4340      	muls	r0, r0
 80171da:	fb01 0001 	mla	r0, r1, r1, r0
 80171de:	f7ff ffcf 	bl	8017180 <_ZN8touchgfx7CWRUtil5isqrtEm>
 80171e2:	e7f8      	b.n	80171d6 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

080171e4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 80171e4:	2800      	cmp	r0, #0
 80171e6:	b508      	push	{r3, lr}
 80171e8:	da05      	bge.n	80171f6 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 80171ea:	4240      	negs	r0, r0
 80171ec:	f7ff fffa 	bl	80171e4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 80171f0:	4240      	negs	r0, r0
 80171f2:	b240      	sxtb	r0, r0
 80171f4:	bd08      	pop	{r3, pc}
 80171f6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80171fa:	dc11      	bgt.n	8017220 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 80171fc:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 8017200:	dd09      	ble.n	8017216 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 8017202:	4340      	muls	r0, r0
 8017204:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 8017208:	f7ff ffba 	bl	8017180 <_ZN8touchgfx7CWRUtil5isqrtEm>
 801720c:	f7ff ffea 	bl	80171e4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8017210:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8017214:	e7ed      	b.n	80171f2 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 8017216:	3003      	adds	r0, #3
 8017218:	4b02      	ldr	r3, [pc, #8]	; (8017224 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 801721a:	10c0      	asrs	r0, r0, #3
 801721c:	5618      	ldrsb	r0, [r3, r0]
 801721e:	e7e9      	b.n	80171f4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8017220:	2000      	movs	r0, #0
 8017222:	e7e7      	b.n	80171f4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8017224:	0802d642 	.word	0x0802d642

08017228 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 8017228:	1e03      	subs	r3, r0, #0
 801722a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801722c:	460c      	mov	r4, r1
 801722e:	4615      	mov	r5, r2
 8017230:	db01      	blt.n	8017236 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 8017232:	2900      	cmp	r1, #0
 8017234:	da06      	bge.n	8017244 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 8017236:	4b10      	ldr	r3, [pc, #64]	; (8017278 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x50>)
 8017238:	f44f 714b 	mov.w	r1, #812	; 0x32c
 801723c:	4a0f      	ldr	r2, [pc, #60]	; (801727c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 801723e:	4810      	ldr	r0, [pc, #64]	; (8017280 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 8017240:	f00f fbbe 	bl	80269c0 <__assert_func>
 8017244:	4299      	cmp	r1, r3
 8017246:	dd07      	ble.n	8017258 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x30>
 8017248:	4619      	mov	r1, r3
 801724a:	4620      	mov	r0, r4
 801724c:	f7ff ffec 	bl	8017228 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8017250:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8017254:	b003      	add	sp, #12
 8017256:	bd30      	pop	{r4, r5, pc}
 8017258:	f7ff ffa6 	bl	80171a8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 801725c:	6028      	str	r0, [r5, #0]
 801725e:	2800      	cmp	r0, #0
 8017260:	d0f8      	beq.n	8017254 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2c>
 8017262:	4602      	mov	r2, r0
 8017264:	ab01      	add	r3, sp, #4
 8017266:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801726a:	4620      	mov	r0, r4
 801726c:	f003 fbd6 	bl	801aa1c <_ZN8touchgfx6muldivElllRl>
 8017270:	f7ff ffb8 	bl	80171e4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8017274:	e7ee      	b.n	8017254 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2c>
 8017276:	bf00      	nop
 8017278:	0802d754 	.word	0x0802d754
 801727c:	0802d818 	.word	0x0802d818
 8017280:	0802d765 	.word	0x0802d765

08017284 <_ZN8touchgfx4LineC1Ev>:
 8017284:	b510      	push	{r4, lr}
 8017286:	4604      	mov	r4, r0
 8017288:	f7ff ff24 	bl	80170d4 <_ZN8touchgfx12CanvasWidgetC1Ev>
 801728c:	4b0c      	ldr	r3, [pc, #48]	; (80172c0 <_ZN8touchgfx4LineC1Ev+0x3c>)
 801728e:	2220      	movs	r2, #32
 8017290:	4620      	mov	r0, r4
 8017292:	6023      	str	r3, [r4, #0]
 8017294:	2300      	movs	r3, #0
 8017296:	6422      	str	r2, [r4, #64]	; 0x40
 8017298:	2212      	movs	r2, #18
 801729a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801729e:	6722      	str	r2, [r4, #112]	; 0x70
 80172a0:	60a3      	str	r3, [r4, #8]
 80172a2:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 80172a6:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 80172aa:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80172ae:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 80172b2:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 80172b6:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 80172ba:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 80172be:	bd10      	pop	{r4, pc}
 80172c0:	0802d7a4 	.word	0x0802d7a4

080172c4 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 80172c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172c8:	6b86      	ldr	r6, [r0, #56]	; 0x38
 80172ca:	4604      	mov	r4, r0
 80172cc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80172ce:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80172d0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80172d2:	1af6      	subs	r6, r6, r3
 80172d4:	eba5 0502 	sub.w	r5, r5, r2
 80172d8:	f040 808e 	bne.w	80173f8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x134>
 80172dc:	b955      	cbnz	r5, 80172f4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x30>
 80172de:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 80172e2:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80172e6:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 80172ea:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 80172ee:	b003      	add	sp, #12
 80172f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172f4:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 80172f8:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 80172fc:	f04f 0802 	mov.w	r8, #2
 8017300:	463a      	mov	r2, r7
 8017302:	4629      	mov	r1, r5
 8017304:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8017306:	f003 fba8 	bl	801aa5a <_ZN8touchgfx6muldivElll>
 801730a:	4631      	mov	r1, r6
 801730c:	463a      	mov	r2, r7
 801730e:	fb90 f5f8 	sdiv	r5, r0, r8
 8017312:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8017314:	f003 fba1 	bl	801aa5a <_ZN8touchgfx6muldivElll>
 8017318:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 801731c:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 801731e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8017320:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017322:	fb90 f0f8 	sdiv	r0, r0, r8
 8017326:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 801732a:	eba8 0305 	sub.w	r3, r8, r5
 801732e:	f1ba 0f00 	cmp.w	sl, #0
 8017332:	f040 80b8 	bne.w	80174a6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e2>
 8017336:	64a3      	str	r3, [r4, #72]	; 0x48
 8017338:	1843      	adds	r3, r0, r1
 801733a:	65a3      	str	r3, [r4, #88]	; 0x58
 801733c:	1b7b      	subs	r3, r7, r5
 801733e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8017340:	1983      	adds	r3, r0, r6
 8017342:	65e3      	str	r3, [r4, #92]	; 0x5c
 8017344:	19eb      	adds	r3, r5, r7
 8017346:	6523      	str	r3, [r4, #80]	; 0x50
 8017348:	1a33      	subs	r3, r6, r0
 801734a:	6623      	str	r3, [r4, #96]	; 0x60
 801734c:	eb05 0308 	add.w	r3, r5, r8
 8017350:	6563      	str	r3, [r4, #84]	; 0x54
 8017352:	1a0b      	subs	r3, r1, r0
 8017354:	f8d4 e048 	ldr.w	lr, [r4, #72]	; 0x48
 8017358:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 801735c:	6663      	str	r3, [r4, #100]	; 0x64
 801735e:	f104 0358 	add.w	r3, r4, #88	; 0x58
 8017362:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
 8017366:	4672      	mov	r2, lr
 8017368:	9301      	str	r3, [sp, #4]
 801736a:	f8cd c000 	str.w	ip, [sp]
 801736e:	f859 bb04 	ldr.w	fp, [r9], #4
 8017372:	9b00      	ldr	r3, [sp, #0]
 8017374:	45de      	cmp	lr, fp
 8017376:	bfa8      	it	ge
 8017378:	46de      	movge	lr, fp
 801737a:	455a      	cmp	r2, fp
 801737c:	bfb8      	it	lt
 801737e:	465a      	movlt	r2, fp
 8017380:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8017384:	45dc      	cmp	ip, fp
 8017386:	bfa8      	it	ge
 8017388:	46dc      	movge	ip, fp
 801738a:	455b      	cmp	r3, fp
 801738c:	bfb8      	it	lt
 801738e:	465b      	movlt	r3, fp
 8017390:	9300      	str	r3, [sp, #0]
 8017392:	9b01      	ldr	r3, [sp, #4]
 8017394:	454b      	cmp	r3, r9
 8017396:	d1ea      	bne.n	801736e <_ZN8touchgfx4Line17updateCachedShapeEv+0xaa>
 8017398:	f04f 0920 	mov.w	r9, #32
 801739c:	9b00      	ldr	r3, [sp, #0]
 801739e:	f1ba 0f01 	cmp.w	sl, #1
 80173a2:	fb92 f2f9 	sdiv	r2, r2, r9
 80173a6:	fb93 f3f9 	sdiv	r3, r3, r9
 80173aa:	fb9e fef9 	sdiv	lr, lr, r9
 80173ae:	fb9c fcf9 	sdiv	ip, ip, r9
 80173b2:	f102 0201 	add.w	r2, r2, #1
 80173b6:	f103 0301 	add.w	r3, r3, #1
 80173ba:	f8a4 e068 	strh.w	lr, [r4, #104]	; 0x68
 80173be:	f8a4 c06a 	strh.w	ip, [r4, #106]	; 0x6a
 80173c2:	eba2 0e0e 	sub.w	lr, r2, lr
 80173c6:	eba3 0c0c 	sub.w	ip, r3, ip
 80173ca:	f8a4 e06c 	strh.w	lr, [r4, #108]	; 0x6c
 80173ce:	f8a4 c06e 	strh.w	ip, [r4, #110]	; 0x6e
 80173d2:	d18c      	bne.n	80172ee <_ZN8touchgfx4Line17updateCachedShapeEv+0x2a>
 80173d4:	eba8 0305 	sub.w	r3, r8, r5
 80173d8:	64a3      	str	r3, [r4, #72]	; 0x48
 80173da:	1843      	adds	r3, r0, r1
 80173dc:	65a3      	str	r3, [r4, #88]	; 0x58
 80173de:	1b7b      	subs	r3, r7, r5
 80173e0:	442f      	add	r7, r5
 80173e2:	4445      	add	r5, r8
 80173e4:	64e3      	str	r3, [r4, #76]	; 0x4c
 80173e6:	1983      	adds	r3, r0, r6
 80173e8:	1a36      	subs	r6, r6, r0
 80173ea:	1a08      	subs	r0, r1, r0
 80173ec:	65e3      	str	r3, [r4, #92]	; 0x5c
 80173ee:	6527      	str	r7, [r4, #80]	; 0x50
 80173f0:	6626      	str	r6, [r4, #96]	; 0x60
 80173f2:	6565      	str	r5, [r4, #84]	; 0x54
 80173f4:	6660      	str	r0, [r4, #100]	; 0x64
 80173f6:	e77a      	b.n	80172ee <_ZN8touchgfx4Line17updateCachedShapeEv+0x2a>
 80173f8:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 80173fc:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 8017400:	2d00      	cmp	r5, #0
 8017402:	f43f af7b 	beq.w	80172fc <_ZN8touchgfx4Line17updateCachedShapeEv+0x38>
 8017406:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 801740a:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 801740e:	fb93 f2f7 	sdiv	r2, r3, r7
 8017412:	fb07 3312 	mls	r3, r7, r2, r3
 8017416:	b34b      	cbz	r3, 801746c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a8>
 8017418:	fb97 f2f3 	sdiv	r2, r7, r3
 801741c:	fb03 7712 	mls	r7, r3, r2, r7
 8017420:	2f00      	cmp	r7, #0
 8017422:	d1f4      	bne.n	801740e <_ZN8touchgfx4Line17updateCachedShapeEv+0x14a>
 8017424:	2b01      	cmp	r3, #1
 8017426:	f24b 5204 	movw	r2, #46340	; 0xb504
 801742a:	bf18      	it	ne
 801742c:	fb96 f6f3 	sdivne	r6, r6, r3
 8017430:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 8017434:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 8017438:	bf18      	it	ne
 801743a:	fb95 f5f3 	sdivne	r5, r5, r3
 801743e:	4291      	cmp	r1, r2
 8017440:	dd16      	ble.n	8017470 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1ac>
 8017442:	2d00      	cmp	r5, #0
 8017444:	da47      	bge.n	80174d6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x212>
 8017446:	4b26      	ldr	r3, [pc, #152]	; (80174e0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x21c>)
 8017448:	429d      	cmp	r5, r3
 801744a:	da25      	bge.n	8017498 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d4>
 801744c:	426a      	negs	r2, r5
 801744e:	f24b 5304 	movw	r3, #46340	; 0xb504
 8017452:	fb91 f1f3 	sdiv	r1, r1, r3
 8017456:	fb92 f3f3 	sdiv	r3, r2, r3
 801745a:	4299      	cmp	r1, r3
 801745c:	bfcc      	ite	gt
 801745e:	1c4b      	addgt	r3, r1, #1
 8017460:	3301      	addle	r3, #1
 8017462:	fb96 f6f3 	sdiv	r6, r6, r3
 8017466:	fb95 f5f3 	sdiv	r5, r5, r3
 801746a:	e00f      	b.n	801748c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 801746c:	463b      	mov	r3, r7
 801746e:	e7d9      	b.n	8017424 <_ZN8touchgfx4Line17updateCachedShapeEv+0x160>
 8017470:	2d00      	cmp	r5, #0
 8017472:	fb92 f2f1 	sdiv	r2, r2, r1
 8017476:	da11      	bge.n	801749c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d8>
 8017478:	4269      	negs	r1, r5
 801747a:	f24b 5304 	movw	r3, #46340	; 0xb504
 801747e:	fb93 f3f1 	sdiv	r3, r3, r1
 8017482:	429a      	cmp	r2, r3
 8017484:	bfa8      	it	ge
 8017486:	461a      	movge	r2, r3
 8017488:	4356      	muls	r6, r2
 801748a:	4355      	muls	r5, r2
 801748c:	4629      	mov	r1, r5
 801748e:	4630      	mov	r0, r6
 8017490:	f7ff fe8a 	bl	80171a8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8017494:	4607      	mov	r7, r0
 8017496:	e731      	b.n	80172fc <_ZN8touchgfx4Line17updateCachedShapeEv+0x38>
 8017498:	2200      	movs	r2, #0
 801749a:	e7ed      	b.n	8017478 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1b4>
 801749c:	4629      	mov	r1, r5
 801749e:	e7ec      	b.n	801747a <_ZN8touchgfx4Line17updateCachedShapeEv+0x1b6>
 80174a0:	4629      	mov	r1, r5
 80174a2:	2200      	movs	r2, #0
 80174a4:	e7e9      	b.n	801747a <_ZN8touchgfx4Line17updateCachedShapeEv+0x1b6>
 80174a6:	1a1b      	subs	r3, r3, r0
 80174a8:	64a3      	str	r3, [r4, #72]	; 0x48
 80174aa:	1843      	adds	r3, r0, r1
 80174ac:	1b5b      	subs	r3, r3, r5
 80174ae:	65a3      	str	r3, [r4, #88]	; 0x58
 80174b0:	1b7b      	subs	r3, r7, r5
 80174b2:	4403      	add	r3, r0
 80174b4:	64e3      	str	r3, [r4, #76]	; 0x4c
 80174b6:	1983      	adds	r3, r0, r6
 80174b8:	442b      	add	r3, r5
 80174ba:	65e3      	str	r3, [r4, #92]	; 0x5c
 80174bc:	19eb      	adds	r3, r5, r7
 80174be:	4403      	add	r3, r0
 80174c0:	6523      	str	r3, [r4, #80]	; 0x50
 80174c2:	1a33      	subs	r3, r6, r0
 80174c4:	442b      	add	r3, r5
 80174c6:	6623      	str	r3, [r4, #96]	; 0x60
 80174c8:	eb05 0308 	add.w	r3, r5, r8
 80174cc:	1a1b      	subs	r3, r3, r0
 80174ce:	6563      	str	r3, [r4, #84]	; 0x54
 80174d0:	1a0b      	subs	r3, r1, r0
 80174d2:	1b5b      	subs	r3, r3, r5
 80174d4:	e73e      	b.n	8017354 <_ZN8touchgfx4Line17updateCachedShapeEv+0x90>
 80174d6:	4295      	cmp	r5, r2
 80174d8:	dde2      	ble.n	80174a0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1dc>
 80174da:	462a      	mov	r2, r5
 80174dc:	e7b7      	b.n	801744e <_ZN8touchgfx4Line17updateCachedShapeEv+0x18a>
 80174de:	bf00      	nop
 80174e0:	ffff4afc 	.word	0xffff4afc

080174e4 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 80174e4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80174e6:	428b      	cmp	r3, r1
 80174e8:	d102      	bne.n	80174f0 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 80174ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80174ec:	4293      	cmp	r3, r2
 80174ee:	d003      	beq.n	80174f8 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 80174f0:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 80174f4:	f7ff bee6 	b.w	80172c4 <_ZN8touchgfx4Line17updateCachedShapeEv>
 80174f8:	4770      	bx	lr

080174fa <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 80174fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80174fc:	428b      	cmp	r3, r1
 80174fe:	d102      	bne.n	8017506 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 8017500:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8017502:	4293      	cmp	r3, r2
 8017504:	d003      	beq.n	801750e <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 8017506:	e9c0 120e 	strd	r1, r2, [r0, #56]	; 0x38
 801750a:	f7ff bedb 	b.w	80172c4 <_ZN8touchgfx4Line17updateCachedShapeEv>
 801750e:	4770      	bx	lr

08017510 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 8017510:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 8017514:	f7ff bed6 	b.w	80172c4 <_ZN8touchgfx4Line17updateCachedShapeEv>

08017518 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 8017518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801751c:	b0b3      	sub	sp, #204	; 0xcc
 801751e:	4604      	mov	r4, r0
 8017520:	460a      	mov	r2, r1
 8017522:	4601      	mov	r1, r0
 8017524:	a803      	add	r0, sp, #12
 8017526:	ad32      	add	r5, sp, #200	; 0xc8
 8017528:	f00d fd48 	bl	8024fbc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 801752c:	2300      	movs	r3, #0
 801752e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8017530:	f845 3dc8 	str.w	r3, [r5, #-200]!
 8017534:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017536:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8017538:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801753a:	1ac0      	subs	r0, r0, r3
 801753c:	eba1 0102 	sub.w	r1, r1, r2
 8017540:	d43c      	bmi.n	80175bc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 8017542:	2900      	cmp	r1, #0
 8017544:	462a      	mov	r2, r5
 8017546:	db33      	blt.n	80175b0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 8017548:	f7ff fe6e 	bl	8017228 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801754c:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 8017550:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8017552:	a803      	add	r0, sp, #12
 8017554:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8017556:	f00d fefc 	bl	8025352 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801755a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801755c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 801755e:	a803      	add	r0, sp, #12
 8017560:	f00d fe86 	bl	8025270 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017564:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017568:	2b01      	cmp	r3, #1
 801756a:	d137      	bne.n	80175dc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 801756c:	6f26      	ldr	r6, [r4, #112]	; 0x70
 801756e:	2eb3      	cmp	r6, #179	; 0xb3
 8017570:	dc34      	bgt.n	80175dc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8017572:	eba7 0906 	sub.w	r9, r7, r6
 8017576:	4648      	mov	r0, r9
 8017578:	f7ff fde0 	bl	801713c <_ZN8touchgfx7CWRUtil4sineEi>
 801757c:	a901      	add	r1, sp, #4
 801757e:	9001      	str	r0, [sp, #4]
 8017580:	4628      	mov	r0, r5
 8017582:	f7ff fdcf 	bl	8017124 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017586:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017588:	eb00 0801 	add.w	r8, r0, r1
 801758c:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8017590:	f7ff fdd4 	bl	801713c <_ZN8touchgfx7CWRUtil4sineEi>
 8017594:	a902      	add	r1, sp, #8
 8017596:	9002      	str	r0, [sp, #8]
 8017598:	4628      	mov	r0, r5
 801759a:	f7ff fdc3 	bl	8017124 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801759e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80175a0:	4641      	mov	r1, r8
 80175a2:	1a12      	subs	r2, r2, r0
 80175a4:	a803      	add	r0, sp, #12
 80175a6:	f00d fe63 	bl	8025270 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80175aa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80175ac:	441e      	add	r6, r3
 80175ae:	e7de      	b.n	801756e <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 80175b0:	4249      	negs	r1, r1
 80175b2:	f7ff fe39 	bl	8017228 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 80175b6:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 80175ba:	e7c9      	b.n	8017550 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 80175bc:	2900      	cmp	r1, #0
 80175be:	f1c0 0000 	rsb	r0, r0, #0
 80175c2:	462a      	mov	r2, r5
 80175c4:	db04      	blt.n	80175d0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 80175c6:	f7ff fe2f 	bl	8017228 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 80175ca:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 80175ce:	e7bf      	b.n	8017550 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 80175d0:	4249      	negs	r1, r1
 80175d2:	f7ff fe29 	bl	8017228 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 80175d6:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 80175da:	e7b9      	b.n	8017550 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 80175dc:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80175de:	a803      	add	r0, sp, #12
 80175e0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80175e2:	f00d fe45 	bl	8025270 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80175e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80175e8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80175ea:	a803      	add	r0, sp, #12
 80175ec:	f00d fe40 	bl	8025270 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80175f0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80175f4:	2b01      	cmp	r3, #1
 80175f6:	d123      	bne.n	8017640 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 80175f8:	6f26      	ldr	r6, [r4, #112]	; 0x70
 80175fa:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 80175fe:	2e00      	cmp	r6, #0
 8017600:	dd1e      	ble.n	8017640 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8017602:	eb06 0907 	add.w	r9, r6, r7
 8017606:	4648      	mov	r0, r9
 8017608:	f7ff fd98 	bl	801713c <_ZN8touchgfx7CWRUtil4sineEi>
 801760c:	a901      	add	r1, sp, #4
 801760e:	9001      	str	r0, [sp, #4]
 8017610:	4628      	mov	r0, r5
 8017612:	f7ff fd87 	bl	8017124 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017616:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017618:	eb00 0801 	add.w	r8, r0, r1
 801761c:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8017620:	f7ff fd8c 	bl	801713c <_ZN8touchgfx7CWRUtil4sineEi>
 8017624:	a902      	add	r1, sp, #8
 8017626:	9002      	str	r0, [sp, #8]
 8017628:	4628      	mov	r0, r5
 801762a:	f7ff fd7b 	bl	8017124 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801762e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8017630:	4641      	mov	r1, r8
 8017632:	1a12      	subs	r2, r2, r0
 8017634:	a803      	add	r0, sp, #12
 8017636:	f00d fe1b 	bl	8025270 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801763a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801763c:	1af6      	subs	r6, r6, r3
 801763e:	e7de      	b.n	80175fe <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 8017640:	21ff      	movs	r1, #255	; 0xff
 8017642:	a803      	add	r0, sp, #12
 8017644:	f00d ff89 	bl	802555a <_ZN8touchgfx6Canvas6renderEh>
 8017648:	4604      	mov	r4, r0
 801764a:	a803      	add	r0, sp, #12
 801764c:	f00d ffc4 	bl	80255d8 <_ZN8touchgfx6CanvasD1Ev>
 8017650:	4620      	mov	r0, r4
 8017652:	b033      	add	sp, #204	; 0xcc
 8017654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08017658 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8017658:	2200      	movs	r2, #0
 801765a:	8002      	strh	r2, [r0, #0]
 801765c:	8042      	strh	r2, [r0, #2]
 801765e:	8082      	strh	r2, [r0, #4]
 8017660:	80c2      	strh	r2, [r0, #6]
 8017662:	4770      	bx	lr

08017664 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8017664:	b570      	push	{r4, r5, r6, lr}
 8017666:	6803      	ldr	r3, [r0, #0]
 8017668:	4604      	mov	r4, r0
 801766a:	4615      	mov	r5, r2
 801766c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801766e:	4798      	blx	r3
 8017670:	6823      	ldr	r3, [r4, #0]
 8017672:	4629      	mov	r1, r5
 8017674:	4620      	mov	r0, r4
 8017676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017678:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801767c:	4718      	bx	r3
	...

08017680 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8017680:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017682:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017686:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017688:	4299      	cmp	r1, r3
 801768a:	d029      	beq.n	80176e0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 801768c:	4b15      	ldr	r3, [pc, #84]	; (80176e4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 801768e:	681b      	ldr	r3, [r3, #0]
 8017690:	b92b      	cbnz	r3, 801769e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 8017692:	4b15      	ldr	r3, [pc, #84]	; (80176e8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8017694:	21ae      	movs	r1, #174	; 0xae
 8017696:	4a15      	ldr	r2, [pc, #84]	; (80176ec <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8017698:	4815      	ldr	r0, [pc, #84]	; (80176f0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 801769a:	f00f f991 	bl	80269c0 <__assert_func>
 801769e:	4a15      	ldr	r2, [pc, #84]	; (80176f4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 80176a0:	8812      	ldrh	r2, [r2, #0]
 80176a2:	428a      	cmp	r2, r1
 80176a4:	d803      	bhi.n	80176ae <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 80176a6:	4b14      	ldr	r3, [pc, #80]	; (80176f8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 80176a8:	21af      	movs	r1, #175	; 0xaf
 80176aa:	4a10      	ldr	r2, [pc, #64]	; (80176ec <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80176ac:	e7f4      	b.n	8017698 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 80176ae:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80176b2:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 80176b6:	4b11      	ldr	r3, [pc, #68]	; (80176fc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 80176b8:	7854      	ldrb	r4, [r2, #1]
 80176ba:	681b      	ldr	r3, [r3, #0]
 80176bc:	f3c4 0481 	ubfx	r4, r4, #2, #2
 80176c0:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 80176c4:	682b      	ldr	r3, [r5, #0]
 80176c6:	69de      	ldr	r6, [r3, #28]
 80176c8:	4b0d      	ldr	r3, [pc, #52]	; (8017700 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 80176ca:	6818      	ldr	r0, [r3, #0]
 80176cc:	f7f1 fc94 	bl	8008ff8 <_ZNK8touchgfx5Texts7getTextEt>
 80176d0:	2300      	movs	r3, #0
 80176d2:	4602      	mov	r2, r0
 80176d4:	4621      	mov	r1, r4
 80176d6:	9300      	str	r3, [sp, #0]
 80176d8:	4628      	mov	r0, r5
 80176da:	47b0      	blx	r6
 80176dc:	b002      	add	sp, #8
 80176de:	bd70      	pop	{r4, r5, r6, pc}
 80176e0:	2000      	movs	r0, #0
 80176e2:	e7fb      	b.n	80176dc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 80176e4:	200567f0 	.word	0x200567f0
 80176e8:	0802d883 	.word	0x0802d883
 80176ec:	0802d9b8 	.word	0x0802d9b8
 80176f0:	0802d8c5 	.word	0x0802d8c5
 80176f4:	200567f4 	.word	0x200567f4
 80176f8:	0802d8ee 	.word	0x0802d8ee
 80176fc:	200567f8 	.word	0x200567f8
 8017700:	200567fc 	.word	0x200567fc

08017704 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8017704:	b570      	push	{r4, r5, r6, lr}
 8017706:	6803      	ldr	r3, [r0, #0]
 8017708:	4604      	mov	r4, r0
 801770a:	b28d      	uxth	r5, r1
 801770c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801770e:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8017710:	4b10      	ldr	r3, [pc, #64]	; (8017754 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8017712:	681b      	ldr	r3, [r3, #0]
 8017714:	b92b      	cbnz	r3, 8017722 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 8017716:	4b10      	ldr	r3, [pc, #64]	; (8017758 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8017718:	21ae      	movs	r1, #174	; 0xae
 801771a:	4a10      	ldr	r2, [pc, #64]	; (801775c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 801771c:	4810      	ldr	r0, [pc, #64]	; (8017760 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 801771e:	f00f f94f 	bl	80269c0 <__assert_func>
 8017722:	4910      	ldr	r1, [pc, #64]	; (8017764 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8017724:	8809      	ldrh	r1, [r1, #0]
 8017726:	4291      	cmp	r1, r2
 8017728:	d803      	bhi.n	8017732 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 801772a:	4b0f      	ldr	r3, [pc, #60]	; (8017768 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 801772c:	21af      	movs	r1, #175	; 0xaf
 801772e:	4a0b      	ldr	r2, [pc, #44]	; (801775c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8017730:	e7f4      	b.n	801771c <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 8017732:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8017736:	4b0d      	ldr	r3, [pc, #52]	; (801776c <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8017738:	681b      	ldr	r3, [r3, #0]
 801773a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801773e:	6803      	ldr	r3, [r0, #0]
 8017740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017742:	4798      	blx	r3
 8017744:	1a29      	subs	r1, r5, r0
 8017746:	4633      	mov	r3, r6
 8017748:	4620      	mov	r0, r4
 801774a:	b209      	sxth	r1, r1
 801774c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017750:	4718      	bx	r3
 8017752:	bf00      	nop
 8017754:	200567f0 	.word	0x200567f0
 8017758:	0802d883 	.word	0x0802d883
 801775c:	0802d9b8 	.word	0x0802d9b8
 8017760:	0802d8c5 	.word	0x0802d8c5
 8017764:	200567f4 	.word	0x200567f4
 8017768:	0802d8ee 	.word	0x0802d8ee
 801776c:	200567f8 	.word	0x200567f8

08017770 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8017770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017774:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017778:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801777a:	b08c      	sub	sp, #48	; 0x30
 801777c:	4604      	mov	r4, r0
 801777e:	4293      	cmp	r3, r2
 8017780:	4688      	mov	r8, r1
 8017782:	d05f      	beq.n	8017844 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8017784:	4e31      	ldr	r6, [pc, #196]	; (801784c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 8017786:	6832      	ldr	r2, [r6, #0]
 8017788:	b92a      	cbnz	r2, 8017796 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 801778a:	4b31      	ldr	r3, [pc, #196]	; (8017850 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 801778c:	21ae      	movs	r1, #174	; 0xae
 801778e:	4a31      	ldr	r2, [pc, #196]	; (8017854 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8017790:	4831      	ldr	r0, [pc, #196]	; (8017858 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 8017792:	f00f f915 	bl	80269c0 <__assert_func>
 8017796:	4d31      	ldr	r5, [pc, #196]	; (801785c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 8017798:	8829      	ldrh	r1, [r5, #0]
 801779a:	4299      	cmp	r1, r3
 801779c:	d803      	bhi.n	80177a6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 801779e:	4b30      	ldr	r3, [pc, #192]	; (8017860 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 80177a0:	21af      	movs	r1, #175	; 0xaf
 80177a2:	4a2c      	ldr	r2, [pc, #176]	; (8017854 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 80177a4:	e7f4      	b.n	8017790 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 80177a6:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 80177aa:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80177ae:	4b2d      	ldr	r3, [pc, #180]	; (8017864 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 80177b0:	681b      	ldr	r3, [r3, #0]
 80177b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80177b6:	2a00      	cmp	r2, #0
 80177b8:	d044      	beq.n	8017844 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 80177ba:	784b      	ldrb	r3, [r1, #1]
 80177bc:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 80177c0:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 80177c4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80177c8:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 80177cc:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80177d0:	4b25      	ldr	r3, [pc, #148]	; (8017868 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 80177d2:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 80177d6:	681b      	ldr	r3, [r3, #0]
 80177d8:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 80177dc:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 80177e0:	9207      	str	r2, [sp, #28]
 80177e2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80177e4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80177e8:	f88d a020 	strb.w	sl, [sp, #32]
 80177ec:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 80177f0:	9009      	str	r0, [sp, #36]	; 0x24
 80177f2:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 80177f6:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 80177fa:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 80177fe:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8017802:	b10a      	cbz	r2, 8017808 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 8017804:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8017806:	b907      	cbnz	r7, 801780a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 8017808:	689f      	ldr	r7, [r3, #8]
 801780a:	f10d 0914 	add.w	r9, sp, #20
 801780e:	4621      	mov	r1, r4
 8017810:	4648      	mov	r0, r9
 8017812:	f002 fff5 	bl	801a800 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017816:	6833      	ldr	r3, [r6, #0]
 8017818:	2b00      	cmp	r3, #0
 801781a:	d0b6      	beq.n	801778a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 801781c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801781e:	882b      	ldrh	r3, [r5, #0]
 8017820:	428b      	cmp	r3, r1
 8017822:	d9bc      	bls.n	801779e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 8017824:	4b11      	ldr	r3, [pc, #68]	; (801786c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 8017826:	6818      	ldr	r0, [r3, #0]
 8017828:	f7f1 fbe6 	bl	8008ff8 <_ZNK8touchgfx5Texts7getTextEt>
 801782c:	2300      	movs	r3, #0
 801782e:	9001      	str	r0, [sp, #4]
 8017830:	4638      	mov	r0, r7
 8017832:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8017836:	ab07      	add	r3, sp, #28
 8017838:	9300      	str	r3, [sp, #0]
 801783a:	4643      	mov	r3, r8
 801783c:	e899 0006 	ldmia.w	r9, {r1, r2}
 8017840:	f7f1 fb6b 	bl	8008f1a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8017844:	b00c      	add	sp, #48	; 0x30
 8017846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801784a:	bf00      	nop
 801784c:	200567f0 	.word	0x200567f0
 8017850:	0802d883 	.word	0x0802d883
 8017854:	0802d9b8 	.word	0x0802d9b8
 8017858:	0802d8c5 	.word	0x0802d8c5
 801785c:	200567f4 	.word	0x200567f4
 8017860:	0802d8ee 	.word	0x0802d8ee
 8017864:	200567f8 	.word	0x200567f8
 8017868:	20056780 	.word	0x20056780
 801786c:	200567fc 	.word	0x200567fc

08017870 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8017870:	b40e      	push	{r1, r2, r3}
 8017872:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017876:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801787a:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801787c:	b09a      	sub	sp, #104	; 0x68
 801787e:	4605      	mov	r5, r0
 8017880:	4293      	cmp	r3, r2
 8017882:	d067      	beq.n	8017954 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>
 8017884:	aa24      	add	r2, sp, #144	; 0x90
 8017886:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8017968 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>
 801788a:	9202      	str	r2, [sp, #8]
 801788c:	f8da 2000 	ldr.w	r2, [sl]
 8017890:	b92a      	cbnz	r2, 801789e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 8017892:	4b31      	ldr	r3, [pc, #196]	; (8017958 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 8017894:	21ae      	movs	r1, #174	; 0xae
 8017896:	4a31      	ldr	r2, [pc, #196]	; (801795c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>)
 8017898:	4831      	ldr	r0, [pc, #196]	; (8017960 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 801789a:	f00f f891 	bl	80269c0 <__assert_func>
 801789e:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 801796c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>
 80178a2:	f8b8 1000 	ldrh.w	r1, [r8]
 80178a6:	4299      	cmp	r1, r3
 80178a8:	d803      	bhi.n	80178b2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 80178aa:	4b2e      	ldr	r3, [pc, #184]	; (8017964 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 80178ac:	21af      	movs	r1, #175	; 0xaf
 80178ae:	4a2b      	ldr	r2, [pc, #172]	; (801795c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>)
 80178b0:	e7f2      	b.n	8017898 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 80178b2:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8017970 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 80178b6:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80178ba:	f8d9 3000 	ldr.w	r3, [r9]
 80178be:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80178c2:	6823      	ldr	r3, [r4, #0]
 80178c4:	4620      	mov	r0, r4
 80178c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80178c8:	4798      	blx	r3
 80178ca:	4607      	mov	r7, r0
 80178cc:	b206      	sxth	r6, r0
 80178ce:	a803      	add	r0, sp, #12
 80178d0:	f003 fc55 	bl	801b17e <_ZN8touchgfx12TextProviderC1Ev>
 80178d4:	6823      	ldr	r3, [r4, #0]
 80178d6:	4620      	mov	r0, r4
 80178d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80178da:	4798      	blx	r3
 80178dc:	6823      	ldr	r3, [r4, #0]
 80178de:	4683      	mov	fp, r0
 80178e0:	4620      	mov	r0, r4
 80178e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80178e4:	4798      	blx	r3
 80178e6:	465b      	mov	r3, fp
 80178e8:	9000      	str	r0, [sp, #0]
 80178ea:	a803      	add	r0, sp, #12
 80178ec:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80178ee:	9a02      	ldr	r2, [sp, #8]
 80178f0:	f003 fc92 	bl	801b218 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80178f4:	f8da 3000 	ldr.w	r3, [sl]
 80178f8:	f895 1039 	ldrb.w	r1, [r5, #57]	; 0x39
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	d0c8      	beq.n	8017892 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 8017900:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8017902:	f8b8 0000 	ldrh.w	r0, [r8]
 8017906:	4290      	cmp	r0, r2
 8017908:	d9cf      	bls.n	80178aa <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 801790a:	eb03 0442 	add.w	r4, r3, r2, lsl #1
 801790e:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8017912:	f8d9 3000 	ldr.w	r3, [r9]
 8017916:	7862      	ldrb	r2, [r4, #1]
 8017918:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
 801791c:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8017920:	9400      	str	r4, [sp, #0]
 8017922:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8017926:	a803      	add	r0, sp, #12
 8017928:	f001 fad1 	bl	8018ece <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801792c:	f9b5 2034 	ldrsh.w	r2, [r5, #52]	; 0x34
 8017930:	b203      	sxth	r3, r0
 8017932:	18b1      	adds	r1, r6, r2
 8017934:	2900      	cmp	r1, #0
 8017936:	dd0b      	ble.n	8017950 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>
 8017938:	3b01      	subs	r3, #1
 801793a:	fb13 f302 	smulbb	r3, r3, r2
 801793e:	fb17 3300 	smlabb	r3, r7, r0, r3
 8017942:	b21e      	sxth	r6, r3
 8017944:	4630      	mov	r0, r6
 8017946:	b01a      	add	sp, #104	; 0x68
 8017948:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801794c:	b003      	add	sp, #12
 801794e:	4770      	bx	lr
 8017950:	2b00      	cmp	r3, #0
 8017952:	dcf7      	bgt.n	8017944 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 8017954:	2600      	movs	r6, #0
 8017956:	e7f5      	b.n	8017944 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 8017958:	0802d883 	.word	0x0802d883
 801795c:	0802d9b8 	.word	0x0802d9b8
 8017960:	0802d8c5 	.word	0x0802d8c5
 8017964:	0802d8ee 	.word	0x0802d8ee
 8017968:	200567f0 	.word	0x200567f0
 801796c:	200567f4 	.word	0x200567f4
 8017970:	200567f8 	.word	0x200567f8

08017974 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8017974:	b570      	push	{r4, r5, r6, lr}
 8017976:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801797a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801797c:	4604      	mov	r4, r0
 801797e:	4299      	cmp	r1, r3
 8017980:	d01e      	beq.n	80179c0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 8017982:	6803      	ldr	r3, [r0, #0]
 8017984:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8017986:	4b0f      	ldr	r3, [pc, #60]	; (80179c4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 8017988:	681b      	ldr	r3, [r3, #0]
 801798a:	b92b      	cbnz	r3, 8017998 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 801798c:	4b0e      	ldr	r3, [pc, #56]	; (80179c8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 801798e:	21ae      	movs	r1, #174	; 0xae
 8017990:	4a0e      	ldr	r2, [pc, #56]	; (80179cc <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8017992:	480f      	ldr	r0, [pc, #60]	; (80179d0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 8017994:	f00f f814 	bl	80269c0 <__assert_func>
 8017998:	4b0e      	ldr	r3, [pc, #56]	; (80179d4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 801799a:	881b      	ldrh	r3, [r3, #0]
 801799c:	428b      	cmp	r3, r1
 801799e:	d803      	bhi.n	80179a8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 80179a0:	4b0d      	ldr	r3, [pc, #52]	; (80179d8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 80179a2:	21af      	movs	r1, #175	; 0xaf
 80179a4:	4a09      	ldr	r2, [pc, #36]	; (80179cc <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 80179a6:	e7f4      	b.n	8017992 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 80179a8:	4b0c      	ldr	r3, [pc, #48]	; (80179dc <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 80179aa:	6818      	ldr	r0, [r3, #0]
 80179ac:	f7f1 fb24 	bl	8008ff8 <_ZNK8touchgfx5Texts7getTextEt>
 80179b0:	2300      	movs	r3, #0
 80179b2:	4601      	mov	r1, r0
 80179b4:	46ac      	mov	ip, r5
 80179b6:	4620      	mov	r0, r4
 80179b8:	461a      	mov	r2, r3
 80179ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80179be:	4760      	bx	ip
 80179c0:	2000      	movs	r0, #0
 80179c2:	bd70      	pop	{r4, r5, r6, pc}
 80179c4:	200567f0 	.word	0x200567f0
 80179c8:	0802d883 	.word	0x0802d883
 80179cc:	0802d9b8 	.word	0x0802d9b8
 80179d0:	0802d8c5 	.word	0x0802d8c5
 80179d4:	200567f4 	.word	0x200567f4
 80179d8:	0802d8ee 	.word	0x0802d8ee
 80179dc:	200567fc 	.word	0x200567fc

080179e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 80179e0:	b538      	push	{r3, r4, r5, lr}
 80179e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80179e6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80179e8:	4604      	mov	r4, r0
 80179ea:	429a      	cmp	r2, r3
 80179ec:	d014      	beq.n	8017a18 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 80179ee:	6803      	ldr	r3, [r0, #0]
 80179f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80179f2:	4798      	blx	r3
 80179f4:	6823      	ldr	r3, [r4, #0]
 80179f6:	4605      	mov	r5, r0
 80179f8:	4620      	mov	r0, r4
 80179fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80179fc:	4798      	blx	r3
 80179fe:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8017a02:	b22d      	sxth	r5, r5
 8017a04:	4601      	mov	r1, r0
 8017a06:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8017a0a:	bf06      	itte	eq
 8017a0c:	4602      	moveq	r2, r0
 8017a0e:	4629      	moveq	r1, r5
 8017a10:	462a      	movne	r2, r5
 8017a12:	4620      	mov	r0, r4
 8017a14:	f7ee fac4 	bl	8005fa0 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017a18:	bd38      	pop	{r3, r4, r5, pc}

08017a1a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8017a1a:	888a      	ldrh	r2, [r1, #4]
 8017a1c:	8582      	strh	r2, [r0, #44]	; 0x2c
 8017a1e:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8017a22:	b922      	cbnz	r2, 8017a2e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8017a24:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017a28:	b90b      	cbnz	r3, 8017a2e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8017a2a:	f7ff bfd9 	b.w	80179e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8017a2e:	4770      	bx	lr

08017a30 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8017a30:	2300      	movs	r3, #0
 8017a32:	8083      	strh	r3, [r0, #4]
 8017a34:	80c3      	strh	r3, [r0, #6]
 8017a36:	8003      	strh	r3, [r0, #0]
 8017a38:	8043      	strh	r3, [r0, #2]
 8017a3a:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8017a3e:	2bff      	cmp	r3, #255	; 0xff
 8017a40:	bf01      	itttt	eq
 8017a42:	890b      	ldrheq	r3, [r1, #8]
 8017a44:	8083      	strheq	r3, [r0, #4]
 8017a46:	894b      	ldrheq	r3, [r1, #10]
 8017a48:	80c3      	strheq	r3, [r0, #6]
 8017a4a:	4770      	bx	lr

08017a4c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8017a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017a4e:	4604      	mov	r4, r0
 8017a50:	466b      	mov	r3, sp
 8017a52:	6808      	ldr	r0, [r1, #0]
 8017a54:	6849      	ldr	r1, [r1, #4]
 8017a56:	c303      	stmia	r3!, {r0, r1}
 8017a58:	6823      	ldr	r3, [r4, #0]
 8017a5a:	4669      	mov	r1, sp
 8017a5c:	4620      	mov	r0, r4
 8017a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017a60:	4798      	blx	r3
 8017a62:	4b08      	ldr	r3, [pc, #32]	; (8017a84 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8017a64:	681b      	ldr	r3, [r3, #0]
 8017a66:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017a6a:	b10a      	cbz	r2, 8017a70 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8017a6c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8017a6e:	b900      	cbnz	r0, 8017a72 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8017a70:	6898      	ldr	r0, [r3, #8]
 8017a72:	6803      	ldr	r3, [r0, #0]
 8017a74:	4669      	mov	r1, sp
 8017a76:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8017a78:	699d      	ldr	r5, [r3, #24]
 8017a7a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8017a7e:	47a8      	blx	r5
 8017a80:	b003      	add	sp, #12
 8017a82:	bd30      	pop	{r4, r5, pc}
 8017a84:	20056780 	.word	0x20056780

08017a88 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8017a88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017a8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017a8e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017a90:	4606      	mov	r6, r0
 8017a92:	4299      	cmp	r1, r3
 8017a94:	d02a      	beq.n	8017aec <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 8017a96:	4b16      	ldr	r3, [pc, #88]	; (8017af0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 8017a98:	681b      	ldr	r3, [r3, #0]
 8017a9a:	b92b      	cbnz	r3, 8017aa8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 8017a9c:	4b15      	ldr	r3, [pc, #84]	; (8017af4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 8017a9e:	21ae      	movs	r1, #174	; 0xae
 8017aa0:	4a15      	ldr	r2, [pc, #84]	; (8017af8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8017aa2:	4816      	ldr	r0, [pc, #88]	; (8017afc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 8017aa4:	f00e ff8c 	bl	80269c0 <__assert_func>
 8017aa8:	4a15      	ldr	r2, [pc, #84]	; (8017b00 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 8017aaa:	8812      	ldrh	r2, [r2, #0]
 8017aac:	428a      	cmp	r2, r1
 8017aae:	d803      	bhi.n	8017ab8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 8017ab0:	4b14      	ldr	r3, [pc, #80]	; (8017b04 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 8017ab2:	21af      	movs	r1, #175	; 0xaf
 8017ab4:	4a10      	ldr	r2, [pc, #64]	; (8017af8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8017ab6:	e7f4      	b.n	8017aa2 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 8017ab8:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8017abc:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8017ac0:	4b11      	ldr	r3, [pc, #68]	; (8017b08 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 8017ac2:	7854      	ldrb	r4, [r2, #1]
 8017ac4:	681b      	ldr	r3, [r3, #0]
 8017ac6:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8017aca:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8017ace:	682b      	ldr	r3, [r5, #0]
 8017ad0:	69df      	ldr	r7, [r3, #28]
 8017ad2:	4b0e      	ldr	r3, [pc, #56]	; (8017b0c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 8017ad4:	6818      	ldr	r0, [r3, #0]
 8017ad6:	f7f1 fa8f 	bl	8008ff8 <_ZNK8touchgfx5Texts7getTextEt>
 8017ada:	2300      	movs	r3, #0
 8017adc:	4602      	mov	r2, r0
 8017ade:	4621      	mov	r1, r4
 8017ae0:	9300      	str	r3, [sp, #0]
 8017ae2:	4628      	mov	r0, r5
 8017ae4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8017ae6:	47b8      	blx	r7
 8017ae8:	b003      	add	sp, #12
 8017aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017aec:	2000      	movs	r0, #0
 8017aee:	e7fb      	b.n	8017ae8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 8017af0:	200567f0 	.word	0x200567f0
 8017af4:	0802d883 	.word	0x0802d883
 8017af8:	0802dac4 	.word	0x0802dac4
 8017afc:	0802d8c5 	.word	0x0802d8c5
 8017b00:	200567f4 	.word	0x200567f4
 8017b04:	0802d8ee 	.word	0x0802d8ee
 8017b08:	200567f8 	.word	0x200567f8
 8017b0c:	200567fc 	.word	0x200567fc

08017b10 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 8017b10:	b570      	push	{r4, r5, r6, lr}
 8017b12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017b16:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017b18:	4604      	mov	r4, r0
 8017b1a:	4299      	cmp	r1, r3
 8017b1c:	d01e      	beq.n	8017b5c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 8017b1e:	6803      	ldr	r3, [r0, #0]
 8017b20:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8017b22:	4b0f      	ldr	r3, [pc, #60]	; (8017b60 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 8017b24:	681b      	ldr	r3, [r3, #0]
 8017b26:	b92b      	cbnz	r3, 8017b34 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 8017b28:	4b0e      	ldr	r3, [pc, #56]	; (8017b64 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 8017b2a:	21ae      	movs	r1, #174	; 0xae
 8017b2c:	4a0e      	ldr	r2, [pc, #56]	; (8017b68 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8017b2e:	480f      	ldr	r0, [pc, #60]	; (8017b6c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 8017b30:	f00e ff46 	bl	80269c0 <__assert_func>
 8017b34:	4b0e      	ldr	r3, [pc, #56]	; (8017b70 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 8017b36:	881b      	ldrh	r3, [r3, #0]
 8017b38:	428b      	cmp	r3, r1
 8017b3a:	d803      	bhi.n	8017b44 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 8017b3c:	4b0d      	ldr	r3, [pc, #52]	; (8017b74 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 8017b3e:	21af      	movs	r1, #175	; 0xaf
 8017b40:	4a09      	ldr	r2, [pc, #36]	; (8017b68 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8017b42:	e7f4      	b.n	8017b2e <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 8017b44:	4b0c      	ldr	r3, [pc, #48]	; (8017b78 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 8017b46:	6818      	ldr	r0, [r3, #0]
 8017b48:	f7f1 fa56 	bl	8008ff8 <_ZNK8touchgfx5Texts7getTextEt>
 8017b4c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8017b4e:	4601      	mov	r1, r0
 8017b50:	46ac      	mov	ip, r5
 8017b52:	4620      	mov	r0, r4
 8017b54:	2300      	movs	r3, #0
 8017b56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017b5a:	4760      	bx	ip
 8017b5c:	2000      	movs	r0, #0
 8017b5e:	bd70      	pop	{r4, r5, r6, pc}
 8017b60:	200567f0 	.word	0x200567f0
 8017b64:	0802d883 	.word	0x0802d883
 8017b68:	0802dac4 	.word	0x0802dac4
 8017b6c:	0802d8c5 	.word	0x0802d8c5
 8017b70:	200567f4 	.word	0x200567f4
 8017b74:	0802d8ee 	.word	0x0802d8ee
 8017b78:	200567fc 	.word	0x200567fc

08017b7c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8017b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017b84:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8017b86:	b08c      	sub	sp, #48	; 0x30
 8017b88:	4604      	mov	r4, r0
 8017b8a:	4293      	cmp	r3, r2
 8017b8c:	460e      	mov	r6, r1
 8017b8e:	d05d      	beq.n	8017c4c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8017b90:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8017c70 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 8017b94:	f8d8 2000 	ldr.w	r2, [r8]
 8017b98:	b92a      	cbnz	r2, 8017ba6 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 8017b9a:	4b2e      	ldr	r3, [pc, #184]	; (8017c54 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 8017b9c:	21ae      	movs	r1, #174	; 0xae
 8017b9e:	4a2e      	ldr	r2, [pc, #184]	; (8017c58 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8017ba0:	482e      	ldr	r0, [pc, #184]	; (8017c5c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 8017ba2:	f00e ff0d 	bl	80269c0 <__assert_func>
 8017ba6:	4f2e      	ldr	r7, [pc, #184]	; (8017c60 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 8017ba8:	8839      	ldrh	r1, [r7, #0]
 8017baa:	4299      	cmp	r1, r3
 8017bac:	d803      	bhi.n	8017bb6 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 8017bae:	4b2d      	ldr	r3, [pc, #180]	; (8017c64 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 8017bb0:	21af      	movs	r1, #175	; 0xaf
 8017bb2:	4a29      	ldr	r2, [pc, #164]	; (8017c58 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8017bb4:	e7f4      	b.n	8017ba0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 8017bb6:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8017bba:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8017bbe:	4b2a      	ldr	r3, [pc, #168]	; (8017c68 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 8017bc0:	681b      	ldr	r3, [r3, #0]
 8017bc2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8017bc6:	2a00      	cmp	r2, #0
 8017bc8:	d040      	beq.n	8017c4c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8017bca:	784b      	ldrb	r3, [r1, #1]
 8017bcc:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 8017bd0:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8017bd4:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 8017bd8:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 8017bdc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8017be0:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 8017be4:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 8017be8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8017bec:	ad05      	add	r5, sp, #20
 8017bee:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8017bf0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8017bf4:	9207      	str	r2, [sp, #28]
 8017bf6:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 8017bfa:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 8017bfe:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 8017c02:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8017c06:	f88d a020 	strb.w	sl, [sp, #32]
 8017c0a:	9009      	str	r0, [sp, #36]	; 0x24
 8017c0c:	f7ee fcf4 	bl	80065f8 <_ZN8touchgfx3HAL3lcdEv>
 8017c10:	4621      	mov	r1, r4
 8017c12:	4681      	mov	r9, r0
 8017c14:	4628      	mov	r0, r5
 8017c16:	f002 fdf3 	bl	801a800 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017c1a:	f8d8 3000 	ldr.w	r3, [r8]
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d0bb      	beq.n	8017b9a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 8017c22:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8017c24:	883b      	ldrh	r3, [r7, #0]
 8017c26:	428b      	cmp	r3, r1
 8017c28:	d9c1      	bls.n	8017bae <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 8017c2a:	4b10      	ldr	r3, [pc, #64]	; (8017c6c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 8017c2c:	6818      	ldr	r0, [r3, #0]
 8017c2e:	f7f1 f9e3 	bl	8008ff8 <_ZNK8touchgfx5Texts7getTextEt>
 8017c32:	2300      	movs	r3, #0
 8017c34:	9303      	str	r3, [sp, #12]
 8017c36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017c38:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8017c3c:	ab07      	add	r3, sp, #28
 8017c3e:	4648      	mov	r0, r9
 8017c40:	9300      	str	r3, [sp, #0]
 8017c42:	4633      	mov	r3, r6
 8017c44:	e895 0006 	ldmia.w	r5, {r1, r2}
 8017c48:	f7f1 f967 	bl	8008f1a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8017c4c:	b00c      	add	sp, #48	; 0x30
 8017c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c52:	bf00      	nop
 8017c54:	0802d883 	.word	0x0802d883
 8017c58:	0802dac4 	.word	0x0802dac4
 8017c5c:	0802d8c5 	.word	0x0802d8c5
 8017c60:	200567f4 	.word	0x200567f4
 8017c64:	0802d8ee 	.word	0x0802d8ee
 8017c68:	200567f8 	.word	0x200567f8
 8017c6c:	200567fc 	.word	0x200567fc
 8017c70:	200567f0 	.word	0x200567f0

08017c74 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 8017c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c78:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8017c7a:	4604      	mov	r4, r0
 8017c7c:	460e      	mov	r6, r1
 8017c7e:	b08e      	sub	sp, #56	; 0x38
 8017c80:	b218      	sxth	r0, r3
 8017c82:	8921      	ldrh	r1, [r4, #8]
 8017c84:	005b      	lsls	r3, r3, #1
 8017c86:	8962      	ldrh	r2, [r4, #10]
 8017c88:	f8ad 0000 	strh.w	r0, [sp]
 8017c8c:	b29b      	uxth	r3, r3
 8017c8e:	f8ad 0002 	strh.w	r0, [sp, #2]
 8017c92:	1ac9      	subs	r1, r1, r3
 8017c94:	1ad3      	subs	r3, r2, r3
 8017c96:	b209      	sxth	r1, r1
 8017c98:	b21b      	sxth	r3, r3
 8017c9a:	2900      	cmp	r1, #0
 8017c9c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8017ca0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017ca4:	dd5e      	ble.n	8017d64 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	dd5c      	ble.n	8017d64 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8017caa:	6830      	ldr	r0, [r6, #0]
 8017cac:	ab02      	add	r3, sp, #8
 8017cae:	6871      	ldr	r1, [r6, #4]
 8017cb0:	c303      	stmia	r3!, {r0, r1}
 8017cb2:	4669      	mov	r1, sp
 8017cb4:	a802      	add	r0, sp, #8
 8017cb6:	f7fd ff21 	bl	8015afc <_ZN8touchgfx4RectaNERKS0_>
 8017cba:	4620      	mov	r0, r4
 8017cbc:	a902      	add	r1, sp, #8
 8017cbe:	f7ff fec5 	bl	8017a4c <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 8017cc2:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8017cc4:	2800      	cmp	r0, #0
 8017cc6:	d05f      	beq.n	8017d88 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8017cc8:	8963      	ldrh	r3, [r4, #10]
 8017cca:	b202      	sxth	r2, r0
 8017ccc:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8017cd0:	2500      	movs	r5, #0
 8017cd2:	1a1f      	subs	r7, r3, r0
 8017cd4:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8017cd8:	f8ad 101c 	strh.w	r1, [sp, #28]
 8017cdc:	b21b      	sxth	r3, r3
 8017cde:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8017ce2:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8017ce6:	af04      	add	r7, sp, #16
 8017ce8:	1a09      	subs	r1, r1, r0
 8017cea:	9506      	str	r5, [sp, #24]
 8017cec:	f8ad 201e 	strh.w	r2, [sp, #30]
 8017cf0:	f8ad 5020 	strh.w	r5, [sp, #32]
 8017cf4:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8017cf8:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 8017cfc:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8017d00:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8017d04:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8017d08:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 8017d0c:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8017d10:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8017d14:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8017d18:	ab06      	add	r3, sp, #24
 8017d1a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8017d1e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017d22:	e887 0003 	stmia.w	r7, {r0, r1}
 8017d26:	4631      	mov	r1, r6
 8017d28:	4638      	mov	r0, r7
 8017d2a:	f7fd fee7 	bl	8015afc <_ZN8touchgfx4RectaNERKS0_>
 8017d2e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	dd12      	ble.n	8017d5c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8017d36:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	dd0e      	ble.n	8017d5c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8017d3e:	6823      	ldr	r3, [r4, #0]
 8017d40:	4639      	mov	r1, r7
 8017d42:	4620      	mov	r0, r4
 8017d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d46:	4798      	blx	r3
 8017d48:	f7ee fc56 	bl	80065f8 <_ZN8touchgfx3HAL3lcdEv>
 8017d4c:	6803      	ldr	r3, [r0, #0]
 8017d4e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8017d50:	4639      	mov	r1, r7
 8017d52:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8017d56:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8017d5a:	47c0      	blx	r8
 8017d5c:	3501      	adds	r5, #1
 8017d5e:	2d04      	cmp	r5, #4
 8017d60:	d1da      	bne.n	8017d18 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 8017d62:	e011      	b.n	8017d88 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8017d64:	6830      	ldr	r0, [r6, #0]
 8017d66:	ab06      	add	r3, sp, #24
 8017d68:	6871      	ldr	r1, [r6, #4]
 8017d6a:	c303      	stmia	r3!, {r0, r1}
 8017d6c:	6823      	ldr	r3, [r4, #0]
 8017d6e:	a906      	add	r1, sp, #24
 8017d70:	4620      	mov	r0, r4
 8017d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d74:	4798      	blx	r3
 8017d76:	f7ee fc3f 	bl	80065f8 <_ZN8touchgfx3HAL3lcdEv>
 8017d7a:	6803      	ldr	r3, [r0, #0]
 8017d7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8017d7e:	a906      	add	r1, sp, #24
 8017d80:	699d      	ldr	r5, [r3, #24]
 8017d82:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8017d86:	47a8      	blx	r5
 8017d88:	b00e      	add	sp, #56	; 0x38
 8017d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08017d90 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8017d90:	4b02      	ldr	r3, [pc, #8]	; (8017d9c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8017d92:	6018      	str	r0, [r3, #0]
 8017d94:	4b02      	ldr	r3, [pc, #8]	; (8017da0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8017d96:	6019      	str	r1, [r3, #0]
 8017d98:	4770      	bx	lr
 8017d9a:	bf00      	nop
 8017d9c:	20056788 	.word	0x20056788
 8017da0:	2005679c 	.word	0x2005679c

08017da4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 8017da4:	b538      	push	{r3, r4, r5, lr}
 8017da6:	4c2b      	ldr	r4, [pc, #172]	; (8017e54 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 8017da8:	4b2b      	ldr	r3, [pc, #172]	; (8017e58 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 8017daa:	6821      	ldr	r1, [r4, #0]
 8017dac:	681a      	ldr	r2, [r3, #0]
 8017dae:	4281      	cmp	r1, r0
 8017db0:	4d2a      	ldr	r5, [pc, #168]	; (8017e5c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 8017db2:	492b      	ldr	r1, [pc, #172]	; (8017e60 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 8017db4:	d108      	bne.n	8017dc8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8017db6:	682b      	ldr	r3, [r5, #0]
 8017db8:	4293      	cmp	r3, r2
 8017dba:	d105      	bne.n	8017dc8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8017dbc:	6808      	ldr	r0, [r1, #0]
 8017dbe:	280f      	cmp	r0, #15
 8017dc0:	bf94      	ite	ls
 8017dc2:	2000      	movls	r0, #0
 8017dc4:	2001      	movhi	r0, #1
 8017dc6:	bd38      	pop	{r3, r4, r5, pc}
 8017dc8:	4b26      	ldr	r3, [pc, #152]	; (8017e64 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 8017dca:	6020      	str	r0, [r4, #0]
 8017dcc:	681b      	ldr	r3, [r3, #0]
 8017dce:	602a      	str	r2, [r5, #0]
 8017dd0:	4298      	cmp	r0, r3
 8017dd2:	d905      	bls.n	8017de0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 8017dd4:	4b24      	ldr	r3, [pc, #144]	; (8017e68 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8017dd6:	2137      	movs	r1, #55	; 0x37
 8017dd8:	4a24      	ldr	r2, [pc, #144]	; (8017e6c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017dda:	4825      	ldr	r0, [pc, #148]	; (8017e70 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 8017ddc:	f00e fdf0 	bl	80269c0 <__assert_func>
 8017de0:	f010 0403 	ands.w	r4, r0, #3
 8017de4:	bf1f      	itttt	ne
 8017de6:	f1c4 0504 	rsbne	r5, r4, #4
 8017dea:	3b04      	subne	r3, #4
 8017dec:	1952      	addne	r2, r2, r5
 8017dee:	191b      	addne	r3, r3, r4
 8017df0:	4d20      	ldr	r5, [pc, #128]	; (8017e74 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 8017df2:	4402      	add	r2, r0
 8017df4:	1a1b      	subs	r3, r3, r0
 8017df6:	3001      	adds	r0, #1
 8017df8:	602a      	str	r2, [r5, #0]
 8017dfa:	f020 0401 	bic.w	r4, r0, #1
 8017dfe:	42a3      	cmp	r3, r4
 8017e00:	d203      	bcs.n	8017e0a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 8017e02:	4b19      	ldr	r3, [pc, #100]	; (8017e68 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8017e04:	214a      	movs	r1, #74	; 0x4a
 8017e06:	4a19      	ldr	r2, [pc, #100]	; (8017e6c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017e08:	e7e7      	b.n	8017dda <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8017e0a:	f010 0002 	ands.w	r0, r0, #2
 8017e0e:	bf1f      	itttt	ne
 8017e10:	f1c0 0504 	rsbne	r5, r0, #4
 8017e14:	1952      	addne	r2, r2, r5
 8017e16:	1f05      	subne	r5, r0, #4
 8017e18:	195b      	addne	r3, r3, r5
 8017e1a:	4422      	add	r2, r4
 8017e1c:	4d16      	ldr	r5, [pc, #88]	; (8017e78 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 8017e1e:	1b1b      	subs	r3, r3, r4
 8017e20:	602a      	str	r2, [r5, #0]
 8017e22:	429c      	cmp	r4, r3
 8017e24:	d903      	bls.n	8017e2e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 8017e26:	4b10      	ldr	r3, [pc, #64]	; (8017e68 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8017e28:	215d      	movs	r1, #93	; 0x5d
 8017e2a:	4a10      	ldr	r2, [pc, #64]	; (8017e6c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017e2c:	e7d5      	b.n	8017dda <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8017e2e:	b120      	cbz	r0, 8017e3a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 8017e30:	f1c0 0504 	rsb	r5, r0, #4
 8017e34:	3804      	subs	r0, #4
 8017e36:	442a      	add	r2, r5
 8017e38:	4403      	add	r3, r0
 8017e3a:	1b1b      	subs	r3, r3, r4
 8017e3c:	4422      	add	r2, r4
 8017e3e:	480f      	ldr	r0, [pc, #60]	; (8017e7c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 8017e40:	2b0f      	cmp	r3, #15
 8017e42:	600b      	str	r3, [r1, #0]
 8017e44:	6002      	str	r2, [r0, #0]
 8017e46:	d803      	bhi.n	8017e50 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 8017e48:	4b0d      	ldr	r3, [pc, #52]	; (8017e80 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 8017e4a:	2170      	movs	r1, #112	; 0x70
 8017e4c:	4a07      	ldr	r2, [pc, #28]	; (8017e6c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017e4e:	e7c4      	b.n	8017dda <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8017e50:	2001      	movs	r0, #1
 8017e52:	e7b8      	b.n	8017dc6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 8017e54:	20056790 	.word	0x20056790
 8017e58:	20056788 	.word	0x20056788
 8017e5c:	20056798 	.word	0x20056798
 8017e60:	200567a0 	.word	0x200567a0
 8017e64:	2005679c 	.word	0x2005679c
 8017e68:	0802db58 	.word	0x0802db58
 8017e6c:	0802dc20 	.word	0x0802dc20
 8017e70:	0802db91 	.word	0x0802db91
 8017e74:	200567a4 	.word	0x200567a4
 8017e78:	20056794 	.word	0x20056794
 8017e7c:	2005678c 	.word	0x2005678c
 8017e80:	0802dbdb 	.word	0x0802dbdb

08017e84 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 8017e84:	4b04      	ldr	r3, [pc, #16]	; (8017e98 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 8017e86:	6818      	ldr	r0, [r3, #0]
 8017e88:	b120      	cbz	r0, 8017e94 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 8017e8a:	4b04      	ldr	r3, [pc, #16]	; (8017e9c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 8017e8c:	6818      	ldr	r0, [r3, #0]
 8017e8e:	3000      	adds	r0, #0
 8017e90:	bf18      	it	ne
 8017e92:	2001      	movne	r0, #1
 8017e94:	4770      	bx	lr
 8017e96:	bf00      	nop
 8017e98:	20056788 	.word	0x20056788
 8017e9c:	2005679c 	.word	0x2005679c

08017ea0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 8017ea0:	4b01      	ldr	r3, [pc, #4]	; (8017ea8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 8017ea2:	6818      	ldr	r0, [r3, #0]
 8017ea4:	4770      	bx	lr
 8017ea6:	bf00      	nop
 8017ea8:	20056790 	.word	0x20056790

08017eac <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 8017eac:	4b01      	ldr	r3, [pc, #4]	; (8017eb4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 8017eae:	6818      	ldr	r0, [r3, #0]
 8017eb0:	4770      	bx	lr
 8017eb2:	bf00      	nop
 8017eb4:	20056798 	.word	0x20056798

08017eb8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 8017eb8:	4b01      	ldr	r3, [pc, #4]	; (8017ec0 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 8017eba:	6818      	ldr	r0, [r3, #0]
 8017ebc:	4770      	bx	lr
 8017ebe:	bf00      	nop
 8017ec0:	200567a4 	.word	0x200567a4

08017ec4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 8017ec4:	4b01      	ldr	r3, [pc, #4]	; (8017ecc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 8017ec6:	6818      	ldr	r0, [r3, #0]
 8017ec8:	4770      	bx	lr
 8017eca:	bf00      	nop
 8017ecc:	20056794 	.word	0x20056794

08017ed0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8017ed0:	4b01      	ldr	r3, [pc, #4]	; (8017ed8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8017ed2:	6818      	ldr	r0, [r3, #0]
 8017ed4:	4770      	bx	lr
 8017ed6:	bf00      	nop
 8017ed8:	2005678c 	.word	0x2005678c

08017edc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8017edc:	4b01      	ldr	r3, [pc, #4]	; (8017ee4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8017ede:	6818      	ldr	r0, [r3, #0]
 8017ee0:	4770      	bx	lr
 8017ee2:	bf00      	nop
 8017ee4:	200567a0 	.word	0x200567a0

08017ee8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8017ee8:	4b01      	ldr	r3, [pc, #4]	; (8017ef0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8017eea:	6019      	str	r1, [r3, #0]
 8017eec:	4770      	bx	lr
 8017eee:	bf00      	nop
 8017ef0:	200567a8 	.word	0x200567a8

08017ef4 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8017ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ef8:	4696      	mov	lr, r2
 8017efa:	b097      	sub	sp, #92	; 0x5c
 8017efc:	4605      	mov	r5, r0
 8017efe:	4614      	mov	r4, r2
 8017f00:	460e      	mov	r6, r1
 8017f02:	461f      	mov	r7, r3
 8017f04:	f10d 0c1c 	add.w	ip, sp, #28
 8017f08:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8017f0c:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8017f10:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8017f14:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017f18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017f1c:	f8de 3000 	ldr.w	r3, [lr]
 8017f20:	f104 0e14 	add.w	lr, r4, #20
 8017f24:	f8cc 3000 	str.w	r3, [ip]
 8017f28:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8017f2c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017f30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017f34:	f8de 3000 	ldr.w	r3, [lr]
 8017f38:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8017f3c:	f8cc 3000 	str.w	r3, [ip]
 8017f40:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8017f44:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017f48:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017f4c:	f8de 3000 	ldr.w	r3, [lr]
 8017f50:	4631      	mov	r1, r6
 8017f52:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017f54:	4628      	mov	r0, r5
 8017f56:	f8cc 3000 	str.w	r3, [ip]
 8017f5a:	682b      	ldr	r3, [r5, #0]
 8017f5c:	9201      	str	r2, [sp, #4]
 8017f5e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017f60:	f8cd 8008 	str.w	r8, [sp, #8]
 8017f64:	9200      	str	r2, [sp, #0]
 8017f66:	aa07      	add	r2, sp, #28
 8017f68:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8017f6c:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
 8017f70:	463b      	mov	r3, r7
 8017f72:	47d8      	blx	fp
 8017f74:	46a6      	mov	lr, r4
 8017f76:	f10d 0c1c 	add.w	ip, sp, #28
 8017f7a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017f7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017f82:	f8de 3000 	ldr.w	r3, [lr]
 8017f86:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8017f8a:	343c      	adds	r4, #60	; 0x3c
 8017f8c:	f8cc 3000 	str.w	r3, [ip]
 8017f90:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8017f94:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017f98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017f9c:	f8de 3000 	ldr.w	r3, [lr]
 8017fa0:	f8cc 3000 	str.w	r3, [ip]
 8017fa4:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8017fa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017faa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017fae:	6823      	ldr	r3, [r4, #0]
 8017fb0:	4631      	mov	r1, r6
 8017fb2:	4628      	mov	r0, r5
 8017fb4:	f8cc 3000 	str.w	r3, [ip]
 8017fb8:	682b      	ldr	r3, [r5, #0]
 8017fba:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8017fbe:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017fc0:	f8cd 8008 	str.w	r8, [sp, #8]
 8017fc4:	9201      	str	r2, [sp, #4]
 8017fc6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017fc8:	9200      	str	r2, [sp, #0]
 8017fca:	aa07      	add	r2, sp, #28
 8017fcc:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8017fce:	463b      	mov	r3, r7
 8017fd0:	47a0      	blx	r4
 8017fd2:	b017      	add	sp, #92	; 0x5c
 8017fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017fd8 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8017fd8:	2000      	movs	r0, #0
 8017fda:	4770      	bx	lr

08017fdc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8017fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fe0:	b08d      	sub	sp, #52	; 0x34
 8017fe2:	4688      	mov	r8, r1
 8017fe4:	f8d3 c000 	ldr.w	ip, [r3]
 8017fe8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8017fea:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8017fee:	680f      	ldr	r7, [r1, #0]
 8017ff0:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8017ff4:	eba7 070c 	sub.w	r7, r7, ip
 8017ff8:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8017ffc:	edd3 6a07 	vldr	s13, [r3, #28]
 8018000:	42bc      	cmp	r4, r7
 8018002:	9918      	ldr	r1, [sp, #96]	; 0x60
 8018004:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8018008:	bfa8      	it	ge
 801800a:	463c      	movge	r4, r7
 801800c:	f9b1 9000 	ldrsh.w	r9, [r1]
 8018010:	f9ba 1000 	ldrsh.w	r1, [sl]
 8018014:	ee07 4a90 	vmov	s15, r4
 8018018:	eb09 0e0c 	add.w	lr, r9, ip
 801801c:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8018020:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8018024:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8018028:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801802c:	4571      	cmp	r1, lr
 801802e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8018032:	ee65 4a24 	vmul.f32	s9, s10, s9
 8018036:	ee25 5a27 	vmul.f32	s10, s10, s15
 801803a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801803e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8018042:	ee32 1a05 	vadd.f32	s2, s4, s10
 8018046:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801804a:	ee36 0a84 	vadd.f32	s0, s13, s8
 801804e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8018052:	ee22 2a07 	vmul.f32	s4, s4, s14
 8018056:	f340 808c 	ble.w	8018172 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801805a:	eba1 060e 	sub.w	r6, r1, lr
 801805e:	fb96 f5f4 	sdiv	r5, r6, r4
 8018062:	ee07 5a10 	vmov	s14, r5
 8018066:	2d00      	cmp	r5, #0
 8018068:	fb04 6615 	mls	r6, r4, r5, r6
 801806c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018070:	eea7 0a04 	vfma.f32	s0, s14, s8
 8018074:	eee7 0a24 	vfma.f32	s1, s14, s9
 8018078:	eea7 1a05 	vfma.f32	s2, s14, s10
 801807c:	dd12      	ble.n	80180a4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801807e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8018082:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8018086:	ee31 2a45 	vsub.f32	s4, s2, s10
 801808a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801808e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018092:	bf14      	ite	ne
 8018094:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8018098:	eeb0 7a67 	vmoveq.f32	s14, s15
 801809c:	ee61 1a87 	vmul.f32	s3, s3, s14
 80180a0:	ee22 2a07 	vmul.f32	s4, s4, s14
 80180a4:	fb05 f204 	mul.w	r2, r5, r4
 80180a8:	1abf      	subs	r7, r7, r2
 80180aa:	4494      	add	ip, r2
 80180ac:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80180b0:	4411      	add	r1, r2
 80180b2:	eb09 020c 	add.w	r2, r9, ip
 80180b6:	b209      	sxth	r1, r1
 80180b8:	443a      	add	r2, r7
 80180ba:	428a      	cmp	r2, r1
 80180bc:	bfc4      	itt	gt
 80180be:	eba1 0209 	subgt.w	r2, r1, r9
 80180c2:	eba2 070c 	subgt.w	r7, r2, ip
 80180c6:	2f00      	cmp	r7, #0
 80180c8:	dd50      	ble.n	801816c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80180ca:	fb97 f1f4 	sdiv	r1, r7, r4
 80180ce:	fb04 7211 	mls	r2, r4, r1, r7
 80180d2:	b90a      	cbnz	r2, 80180d8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80180d4:	3901      	subs	r1, #1
 80180d6:	4622      	mov	r2, r4
 80180d8:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80180dc:	6840      	ldr	r0, [r0, #4]
 80180de:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 80180e2:	44b6      	add	lr, r6
 80180e4:	f8d0 a000 	ldr.w	sl, [r0]
 80180e8:	2900      	cmp	r1, #0
 80180ea:	bfcc      	ite	gt
 80180ec:	46a1      	movgt	r9, r4
 80180ee:	4691      	movle	r9, r2
 80180f0:	900b      	str	r0, [sp, #44]	; 0x2c
 80180f2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80180f4:	fb04 e505 	mla	r5, r4, r5, lr
 80180f8:	eef0 6a42 	vmov.f32	s13, s4
 80180fc:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8018100:	9008      	str	r0, [sp, #32]
 8018102:	eeb0 7a61 	vmov.f32	s14, s3
 8018106:	9818      	ldr	r0, [sp, #96]	; 0x60
 8018108:	695b      	ldr	r3, [r3, #20]
 801810a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801810e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8018112:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8018116:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018118:	445b      	add	r3, fp
 801811a:	9307      	str	r3, [sp, #28]
 801811c:	ee16 3a90 	vmov	r3, s13
 8018120:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8018124:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8018128:	ee21 3a23 	vmul.f32	s6, s2, s7
 801812c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8018130:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018134:	ee17 7a90 	vmov	r7, s15
 8018138:	ee73 7a42 	vsub.f32	s15, s6, s4
 801813c:	fb97 f7f4 	sdiv	r7, r7, r4
 8018140:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018144:	ee17 ca90 	vmov	ip, s15
 8018148:	fb9c fcf4 	sdiv	ip, ip, r4
 801814c:	fb0c 3306 	mla	r3, ip, r6, r3
 8018150:	9302      	str	r3, [sp, #8]
 8018152:	ee17 3a10 	vmov	r3, s14
 8018156:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801815a:	fb07 3706 	mla	r7, r7, r6, r3
 801815e:	eba9 0306 	sub.w	r3, r9, r6
 8018162:	e9cd 4700 	strd	r4, r7, [sp]
 8018166:	f8da 4008 	ldr.w	r4, [sl, #8]
 801816a:	47a0      	blx	r4
 801816c:	b00d      	add	sp, #52	; 0x34
 801816e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018172:	2500      	movs	r5, #0
 8018174:	462e      	mov	r6, r5
 8018176:	e799      	b.n	80180ac <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08018178 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8018178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801817c:	b0db      	sub	sp, #364	; 0x16c
 801817e:	461d      	mov	r5, r3
 8018180:	4614      	mov	r4, r2
 8018182:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8018186:	910f      	str	r1, [sp, #60]	; 0x3c
 8018188:	4629      	mov	r1, r5
 801818a:	930a      	str	r3, [sp, #40]	; 0x28
 801818c:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8018190:	9009      	str	r0, [sp, #36]	; 0x24
 8018192:	930b      	str	r3, [sp, #44]	; 0x2c
 8018194:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8018198:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801819c:	9310      	str	r3, [sp, #64]	; 0x40
 801819e:	6803      	ldr	r3, [r0, #0]
 80181a0:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80181a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80181a6:	47b8      	blx	r7
 80181a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181aa:	6058      	str	r0, [r3, #4]
 80181ac:	2800      	cmp	r0, #0
 80181ae:	f000 83a1 	beq.w	80188f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80181b2:	682b      	ldr	r3, [r5, #0]
 80181b4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80181b8:	ed94 7a02 	vldr	s14, [r4, #8]
 80181bc:	9314      	str	r3, [sp, #80]	; 0x50
 80181be:	686b      	ldr	r3, [r5, #4]
 80181c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80181c4:	9315      	str	r3, [sp, #84]	; 0x54
 80181c6:	4bc1      	ldr	r3, [pc, #772]	; (80184cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80181c8:	7819      	ldrb	r1, [r3, #0]
 80181ca:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80181ce:	2900      	cmp	r1, #0
 80181d0:	bf16      	itet	ne
 80181d2:	4619      	movne	r1, r3
 80181d4:	4611      	moveq	r1, r2
 80181d6:	4613      	movne	r3, r2
 80181d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181dc:	9116      	str	r1, [sp, #88]	; 0x58
 80181de:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 80181e2:	f240 8387 	bls.w	80188f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80181e6:	ed94 7a07 	vldr	s14, [r4, #28]
 80181ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80181ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181f2:	f240 837f 	bls.w	80188f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80181f6:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 80181fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80181fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018202:	f240 8377 	bls.w	80188f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018206:	6822      	ldr	r2, [r4, #0]
 8018208:	4bb1      	ldr	r3, [pc, #708]	; (80184d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801820a:	429a      	cmp	r2, r3
 801820c:	f2c0 8372 	blt.w	80188f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018210:	49b0      	ldr	r1, [pc, #704]	; (80184d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8018212:	6963      	ldr	r3, [r4, #20]
 8018214:	428a      	cmp	r2, r1
 8018216:	f300 836d 	bgt.w	80188f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801821a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801821e:	48ae      	ldr	r0, [pc, #696]	; (80184d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8018220:	33ff      	adds	r3, #255	; 0xff
 8018222:	4283      	cmp	r3, r0
 8018224:	f200 8366 	bhi.w	80188f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018228:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801822a:	4dac      	ldr	r5, [pc, #688]	; (80184dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801822c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8018230:	33ff      	adds	r3, #255	; 0xff
 8018232:	42ab      	cmp	r3, r5
 8018234:	f200 835e 	bhi.w	80188f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018238:	6862      	ldr	r2, [r4, #4]
 801823a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801823e:	33ff      	adds	r3, #255	; 0xff
 8018240:	4283      	cmp	r3, r0
 8018242:	f200 8357 	bhi.w	80188f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018246:	69a1      	ldr	r1, [r4, #24]
 8018248:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801824c:	33ff      	adds	r3, #255	; 0xff
 801824e:	4283      	cmp	r3, r0
 8018250:	f200 8350 	bhi.w	80188f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018254:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8018256:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801825a:	30ff      	adds	r0, #255	; 0xff
 801825c:	42a8      	cmp	r0, r5
 801825e:	f200 8349 	bhi.w	80188f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018262:	428a      	cmp	r2, r1
 8018264:	f280 8110 	bge.w	8018488 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8018268:	429a      	cmp	r2, r3
 801826a:	f300 8119 	bgt.w	80184a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801826e:	4299      	cmp	r1, r3
 8018270:	f280 811d 	bge.w	80184ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8018274:	2502      	movs	r5, #2
 8018276:	2701      	movs	r7, #1
 8018278:	46a9      	mov	r9, r5
 801827a:	46b8      	mov	r8, r7
 801827c:	f04f 0a00 	mov.w	sl, #0
 8018280:	4621      	mov	r1, r4
 8018282:	a849      	add	r0, sp, #292	; 0x124
 8018284:	f003 fd3e 	bl	801bd04 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8018288:	4622      	mov	r2, r4
 801828a:	4653      	mov	r3, sl
 801828c:	a949      	add	r1, sp, #292	; 0x124
 801828e:	f8cd 9000 	str.w	r9, [sp]
 8018292:	a819      	add	r0, sp, #100	; 0x64
 8018294:	f003 fe66 	bl	801bf64 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8018298:	4622      	mov	r2, r4
 801829a:	4653      	mov	r3, sl
 801829c:	a949      	add	r1, sp, #292	; 0x124
 801829e:	f8cd 8000 	str.w	r8, [sp]
 80182a2:	a829      	add	r0, sp, #164	; 0xa4
 80182a4:	f003 fe5e 	bl	801bf64 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80182a8:	4643      	mov	r3, r8
 80182aa:	4622      	mov	r2, r4
 80182ac:	a949      	add	r1, sp, #292	; 0x124
 80182ae:	f8cd 9000 	str.w	r9, [sp]
 80182b2:	a839      	add	r0, sp, #228	; 0xe4
 80182b4:	f003 fe56 	bl	801bf64 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80182b8:	42af      	cmp	r7, r5
 80182ba:	af12      	add	r7, sp, #72	; 0x48
 80182bc:	bfb7      	itett	lt
 80182be:	2300      	movlt	r3, #0
 80182c0:	2301      	movge	r3, #1
 80182c2:	ad29      	addlt	r5, sp, #164	; 0xa4
 80182c4:	ac19      	addlt	r4, sp, #100	; 0x64
 80182c6:	bfb1      	iteee	lt
 80182c8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80182ca:	ad19      	addge	r5, sp, #100	; 0x64
 80182cc:	930e      	strge	r3, [sp, #56]	; 0x38
 80182ce:	ac29      	addge	r4, sp, #164	; 0xa4
 80182d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80182d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80182d6:	e887 0003 	stmia.w	r7, {r0, r1}
 80182da:	b928      	cbnz	r0, 80182e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80182dc:	4b80      	ldr	r3, [pc, #512]	; (80184e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80182de:	6818      	ldr	r0, [r3, #0]
 80182e0:	6803      	ldr	r3, [r0, #0]
 80182e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182e4:	4798      	blx	r3
 80182e6:	6038      	str	r0, [r7, #0]
 80182e8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80182ea:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80182ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80182f2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80182f4:	930c      	str	r3, [sp, #48]	; 0x30
 80182f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80182f8:	6963      	ldr	r3, [r4, #20]
 80182fa:	440b      	add	r3, r1
 80182fc:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8018300:	4408      	add	r0, r1
 8018302:	b200      	sxth	r0, r0
 8018304:	4283      	cmp	r3, r0
 8018306:	900d      	str	r0, [sp, #52]	; 0x34
 8018308:	f280 80dd 	bge.w	80184c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801830c:	428b      	cmp	r3, r1
 801830e:	da08      	bge.n	8018322 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018310:	2a00      	cmp	r2, #0
 8018312:	dd06      	ble.n	8018322 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018314:	1acb      	subs	r3, r1, r3
 8018316:	429a      	cmp	r2, r3
 8018318:	f2c0 80e4 	blt.w	80184e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801831c:	2b00      	cmp	r3, #0
 801831e:	f300 80e2 	bgt.w	80184e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8018322:	6967      	ldr	r7, [r4, #20]
 8018324:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8018328:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801832a:	443b      	add	r3, r7
 801832c:	461f      	mov	r7, r3
 801832e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018330:	1bdf      	subs	r7, r3, r7
 8018332:	4297      	cmp	r7, r2
 8018334:	bfa8      	it	ge
 8018336:	4617      	movge	r7, r2
 8018338:	2f00      	cmp	r7, #0
 801833a:	f340 8166 	ble.w	801860a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801833e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8018340:	6829      	ldr	r1, [r5, #0]
 8018342:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018346:	f9bb 3000 	ldrsh.w	r3, [fp]
 801834a:	4411      	add	r1, r2
 801834c:	6820      	ldr	r0, [r4, #0]
 801834e:	4299      	cmp	r1, r3
 8018350:	dd1a      	ble.n	8018388 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8018352:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8018356:	4402      	add	r2, r0
 8018358:	440b      	add	r3, r1
 801835a:	b21b      	sxth	r3, r3
 801835c:	429a      	cmp	r2, r3
 801835e:	dc13      	bgt.n	8018388 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8018360:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018362:	a912      	add	r1, sp, #72	; 0x48
 8018364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018366:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018368:	681b      	ldr	r3, [r3, #0]
 801836a:	9206      	str	r2, [sp, #24]
 801836c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801836e:	9500      	str	r5, [sp, #0]
 8018370:	9205      	str	r2, [sp, #20]
 8018372:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018374:	e9cd b203 	strd	fp, r2, [sp, #12]
 8018378:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801837a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801837e:	aa49      	add	r2, sp, #292	; 0x124
 8018380:	f8d3 903c 	ldr.w	r9, [r3, #60]	; 0x3c
 8018384:	4623      	mov	r3, r4
 8018386:	47c8      	blx	r9
 8018388:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801838c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8018390:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8018394:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018398:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801839c:	68a1      	ldr	r1, [r4, #8]
 801839e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80183a2:	ed94 6a08 	vldr	s12, [r4, #32]
 80183a6:	edd4 6a07 	vldr	s13, [r4, #28]
 80183aa:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80183ae:	ee76 6a86 	vadd.f32	s13, s13, s12
 80183b2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80183b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80183ba:	edc4 6a07 	vstr	s13, [r4, #28]
 80183be:	441a      	add	r2, r3
 80183c0:	6963      	ldr	r3, [r4, #20]
 80183c2:	3301      	adds	r3, #1
 80183c4:	6022      	str	r2, [r4, #0]
 80183c6:	6163      	str	r3, [r4, #20]
 80183c8:	69a3      	ldr	r3, [r4, #24]
 80183ca:	3b01      	subs	r3, #1
 80183cc:	61a3      	str	r3, [r4, #24]
 80183ce:	6923      	ldr	r3, [r4, #16]
 80183d0:	440b      	add	r3, r1
 80183d2:	68e1      	ldr	r1, [r4, #12]
 80183d4:	428b      	cmp	r3, r1
 80183d6:	6123      	str	r3, [r4, #16]
 80183d8:	db15      	blt.n	8018406 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80183da:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80183de:	3201      	adds	r2, #1
 80183e0:	1a5b      	subs	r3, r3, r1
 80183e2:	ee76 6a26 	vadd.f32	s13, s12, s13
 80183e6:	6022      	str	r2, [r4, #0]
 80183e8:	6123      	str	r3, [r4, #16]
 80183ea:	edc4 6a07 	vstr	s13, [r4, #28]
 80183ee:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80183f2:	ee36 7a87 	vadd.f32	s14, s13, s14
 80183f6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80183fa:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80183fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018402:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018406:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801840a:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801840e:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8018412:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018416:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801841a:	68a9      	ldr	r1, [r5, #8]
 801841c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018420:	ed95 6a08 	vldr	s12, [r5, #32]
 8018424:	edd5 6a07 	vldr	s13, [r5, #28]
 8018428:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801842c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018430:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018434:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018438:	edc5 6a07 	vstr	s13, [r5, #28]
 801843c:	441a      	add	r2, r3
 801843e:	696b      	ldr	r3, [r5, #20]
 8018440:	3301      	adds	r3, #1
 8018442:	602a      	str	r2, [r5, #0]
 8018444:	616b      	str	r3, [r5, #20]
 8018446:	69ab      	ldr	r3, [r5, #24]
 8018448:	3b01      	subs	r3, #1
 801844a:	61ab      	str	r3, [r5, #24]
 801844c:	692b      	ldr	r3, [r5, #16]
 801844e:	440b      	add	r3, r1
 8018450:	68e9      	ldr	r1, [r5, #12]
 8018452:	428b      	cmp	r3, r1
 8018454:	612b      	str	r3, [r5, #16]
 8018456:	db15      	blt.n	8018484 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8018458:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801845c:	3201      	adds	r2, #1
 801845e:	1a5b      	subs	r3, r3, r1
 8018460:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018464:	602a      	str	r2, [r5, #0]
 8018466:	612b      	str	r3, [r5, #16]
 8018468:	edc5 6a07 	vstr	s13, [r5, #28]
 801846c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8018470:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018474:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8018478:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801847c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018480:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018484:	3f01      	subs	r7, #1
 8018486:	e757      	b.n	8018338 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8018488:	4299      	cmp	r1, r3
 801848a:	dc13      	bgt.n	80184b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801848c:	429a      	cmp	r2, r3
 801848e:	da14      	bge.n	80184ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8018490:	2502      	movs	r5, #2
 8018492:	2703      	movs	r7, #3
 8018494:	f04f 0800 	mov.w	r8, #0
 8018498:	46a9      	mov	r9, r5
 801849a:	f04f 0a01 	mov.w	sl, #1
 801849e:	e6ef      	b.n	8018280 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80184a0:	2501      	movs	r5, #1
 80184a2:	2700      	movs	r7, #0
 80184a4:	46a9      	mov	r9, r5
 80184a6:	46b8      	mov	r8, r7
 80184a8:	f04f 0a02 	mov.w	sl, #2
 80184ac:	e6e8      	b.n	8018280 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80184ae:	2501      	movs	r5, #1
 80184b0:	2702      	movs	r7, #2
 80184b2:	e6e1      	b.n	8018278 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80184b4:	2500      	movs	r5, #0
 80184b6:	2701      	movs	r7, #1
 80184b8:	e7f4      	b.n	80184a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80184ba:	2702      	movs	r7, #2
 80184bc:	2503      	movs	r5, #3
 80184be:	f04f 0900 	mov.w	r9, #0
 80184c2:	46b8      	mov	r8, r7
 80184c4:	e7e9      	b.n	801849a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80184c6:	4613      	mov	r3, r2
 80184c8:	e728      	b.n	801831c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80184ca:	bf00      	nop
 80184cc:	20056778 	.word	0x20056778
 80184d0:	fffd8f01 	.word	0xfffd8f01
 80184d4:	00027100 	.word	0x00027100
 80184d8:	0004e1ff 	.word	0x0004e1ff
 80184dc:	0004e1fe 	.word	0x0004e1fe
 80184e0:	20056780 	.word	0x20056780
 80184e4:	4613      	mov	r3, r2
 80184e6:	992b      	ldr	r1, [sp, #172]	; 0xac
 80184e8:	469e      	mov	lr, r3
 80184ea:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 80184ec:	469c      	mov	ip, r3
 80184ee:	9111      	str	r1, [sp, #68]	; 0x44
 80184f0:	f04f 0900 	mov.w	r9, #0
 80184f4:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 80184f8:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 80184fc:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8018500:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8018504:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8018508:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801850c:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8018510:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8018514:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8018518:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801851c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8018520:	f1bc 0f00 	cmp.w	ip, #0
 8018524:	d147      	bne.n	80185b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8018526:	eb03 0c07 	add.w	ip, r3, r7
 801852a:	1ad7      	subs	r7, r2, r3
 801852c:	f1b9 0f00 	cmp.w	r9, #0
 8018530:	d009      	beq.n	8018546 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8018532:	9029      	str	r0, [sp, #164]	; 0xa4
 8018534:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8018538:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801853c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8018540:	912d      	str	r1, [sp, #180]	; 0xb4
 8018542:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8018546:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8018548:	f04f 0800 	mov.w	r8, #0
 801854c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8018550:	9111      	str	r1, [sp, #68]	; 0x44
 8018552:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8018556:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801855a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801855e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8018562:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8018566:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801856a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801856e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8018572:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8018576:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801857a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801857e:	f1be 0f00 	cmp.w	lr, #0
 8018582:	d031      	beq.n	80185e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8018584:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8018586:	4450      	add	r0, sl
 8018588:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801858c:	4431      	add	r1, r6
 801858e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8018592:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8018596:	4549      	cmp	r1, r9
 8018598:	db08      	blt.n	80185ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801859a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801859e:	3001      	adds	r0, #1
 80185a0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80185a4:	eba1 0109 	sub.w	r1, r1, r9
 80185a8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80185ac:	f10e 3eff 	add.w	lr, lr, #4294967295
 80185b0:	f04f 0801 	mov.w	r8, #1
 80185b4:	e7e3      	b.n	801857e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80185b6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80185b8:	4450      	add	r0, sl
 80185ba:	ee37 7a24 	vadd.f32	s14, s14, s9
 80185be:	4431      	add	r1, r6
 80185c0:	ee77 7a84 	vadd.f32	s15, s15, s8
 80185c4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80185c8:	4541      	cmp	r1, r8
 80185ca:	db08      	blt.n	80185de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80185cc:	ee76 6a85 	vadd.f32	s13, s13, s10
 80185d0:	3001      	adds	r0, #1
 80185d2:	ee37 7a25 	vadd.f32	s14, s14, s11
 80185d6:	eba1 0108 	sub.w	r1, r1, r8
 80185da:	ee77 7a86 	vadd.f32	s15, s15, s12
 80185de:	f10c 3cff 	add.w	ip, ip, #4294967295
 80185e2:	f04f 0901 	mov.w	r9, #1
 80185e6:	e79b      	b.n	8018520 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 80185e8:	449c      	add	ip, r3
 80185ea:	1aff      	subs	r7, r7, r3
 80185ec:	f1b8 0f00 	cmp.w	r8, #0
 80185f0:	d009      	beq.n	8018606 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 80185f2:	9019      	str	r0, [sp, #100]	; 0x64
 80185f4:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80185f8:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80185fc:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8018600:	911d      	str	r1, [sp, #116]	; 0x74
 8018602:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8018606:	1ad2      	subs	r2, r2, r3
 8018608:	e68b      	b.n	8018322 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801860a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801860c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801860e:	2b00      	cmp	r3, #0
 8018610:	f000 80d1 	beq.w	80187b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8018614:	ad19      	add	r5, sp, #100	; 0x64
 8018616:	ac39      	add	r4, sp, #228	; 0xe4
 8018618:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801861a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801861e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018622:	930c      	str	r3, [sp, #48]	; 0x30
 8018624:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018626:	6963      	ldr	r3, [r4, #20]
 8018628:	440b      	add	r3, r1
 801862a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801862e:	4408      	add	r0, r1
 8018630:	b200      	sxth	r0, r0
 8018632:	4283      	cmp	r3, r0
 8018634:	900d      	str	r0, [sp, #52]	; 0x34
 8018636:	f280 80c1 	bge.w	80187bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801863a:	428b      	cmp	r3, r1
 801863c:	da08      	bge.n	8018650 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801863e:	2a00      	cmp	r2, #0
 8018640:	dd06      	ble.n	8018650 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018642:	1acb      	subs	r3, r1, r3
 8018644:	429a      	cmp	r2, r3
 8018646:	f2c0 80bb 	blt.w	80187c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801864a:	2b00      	cmp	r3, #0
 801864c:	f300 80b9 	bgt.w	80187c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8018650:	6967      	ldr	r7, [r4, #20]
 8018652:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8018656:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018658:	443b      	add	r3, r7
 801865a:	461f      	mov	r7, r3
 801865c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801865e:	1bdf      	subs	r7, r3, r7
 8018660:	4297      	cmp	r7, r2
 8018662:	bfa8      	it	ge
 8018664:	4617      	movge	r7, r2
 8018666:	2f00      	cmp	r7, #0
 8018668:	f340 813c 	ble.w	80188e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801866c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801866e:	6829      	ldr	r1, [r5, #0]
 8018670:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018674:	f9bb 3000 	ldrsh.w	r3, [fp]
 8018678:	4411      	add	r1, r2
 801867a:	6820      	ldr	r0, [r4, #0]
 801867c:	4299      	cmp	r1, r3
 801867e:	dd1a      	ble.n	80186b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8018680:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8018684:	4402      	add	r2, r0
 8018686:	440b      	add	r3, r1
 8018688:	b21b      	sxth	r3, r3
 801868a:	429a      	cmp	r2, r3
 801868c:	dc13      	bgt.n	80186b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801868e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018690:	a912      	add	r1, sp, #72	; 0x48
 8018692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018694:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018696:	681b      	ldr	r3, [r3, #0]
 8018698:	9206      	str	r2, [sp, #24]
 801869a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801869c:	9500      	str	r5, [sp, #0]
 801869e:	9205      	str	r2, [sp, #20]
 80186a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80186a2:	e9cd b203 	strd	fp, r2, [sp, #12]
 80186a6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80186a8:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80186ac:	aa49      	add	r2, sp, #292	; 0x124
 80186ae:	f8d3 903c 	ldr.w	r9, [r3, #60]	; 0x3c
 80186b2:	4623      	mov	r3, r4
 80186b4:	47c8      	blx	r9
 80186b6:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80186ba:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80186be:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80186c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80186c6:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80186ca:	68a1      	ldr	r1, [r4, #8]
 80186cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80186d0:	ed94 6a08 	vldr	s12, [r4, #32]
 80186d4:	edd4 6a07 	vldr	s13, [r4, #28]
 80186d8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80186dc:	ee76 6a86 	vadd.f32	s13, s13, s12
 80186e0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80186e4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80186e8:	edc4 6a07 	vstr	s13, [r4, #28]
 80186ec:	441a      	add	r2, r3
 80186ee:	6963      	ldr	r3, [r4, #20]
 80186f0:	3301      	adds	r3, #1
 80186f2:	6022      	str	r2, [r4, #0]
 80186f4:	6163      	str	r3, [r4, #20]
 80186f6:	69a3      	ldr	r3, [r4, #24]
 80186f8:	3b01      	subs	r3, #1
 80186fa:	61a3      	str	r3, [r4, #24]
 80186fc:	6923      	ldr	r3, [r4, #16]
 80186fe:	440b      	add	r3, r1
 8018700:	68e1      	ldr	r1, [r4, #12]
 8018702:	428b      	cmp	r3, r1
 8018704:	6123      	str	r3, [r4, #16]
 8018706:	db15      	blt.n	8018734 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8018708:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801870c:	3201      	adds	r2, #1
 801870e:	1a5b      	subs	r3, r3, r1
 8018710:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018714:	6022      	str	r2, [r4, #0]
 8018716:	6123      	str	r3, [r4, #16]
 8018718:	edc4 6a07 	vstr	s13, [r4, #28]
 801871c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8018720:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018724:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018728:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801872c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018730:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018734:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8018738:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801873c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8018740:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018744:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8018748:	68a9      	ldr	r1, [r5, #8]
 801874a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801874e:	ed95 6a08 	vldr	s12, [r5, #32]
 8018752:	edd5 6a07 	vldr	s13, [r5, #28]
 8018756:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801875a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801875e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018762:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018766:	edc5 6a07 	vstr	s13, [r5, #28]
 801876a:	441a      	add	r2, r3
 801876c:	696b      	ldr	r3, [r5, #20]
 801876e:	3301      	adds	r3, #1
 8018770:	602a      	str	r2, [r5, #0]
 8018772:	616b      	str	r3, [r5, #20]
 8018774:	69ab      	ldr	r3, [r5, #24]
 8018776:	3b01      	subs	r3, #1
 8018778:	61ab      	str	r3, [r5, #24]
 801877a:	692b      	ldr	r3, [r5, #16]
 801877c:	440b      	add	r3, r1
 801877e:	68e9      	ldr	r1, [r5, #12]
 8018780:	428b      	cmp	r3, r1
 8018782:	612b      	str	r3, [r5, #16]
 8018784:	db15      	blt.n	80187b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8018786:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801878a:	3201      	adds	r2, #1
 801878c:	1a5b      	subs	r3, r3, r1
 801878e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018792:	602a      	str	r2, [r5, #0]
 8018794:	612b      	str	r3, [r5, #16]
 8018796:	edc5 6a07 	vstr	s13, [r5, #28]
 801879a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801879e:	ee36 7a87 	vadd.f32	s14, s13, s14
 80187a2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80187a6:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80187aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80187ae:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80187b2:	3f01      	subs	r7, #1
 80187b4:	e757      	b.n	8018666 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80187b6:	ad39      	add	r5, sp, #228	; 0xe4
 80187b8:	ac19      	add	r4, sp, #100	; 0x64
 80187ba:	e72d      	b.n	8018618 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80187bc:	4613      	mov	r3, r2
 80187be:	e744      	b.n	801864a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80187c0:	4613      	mov	r3, r2
 80187c2:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 80187c4:	469e      	mov	lr, r3
 80187c6:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 80187ca:	461f      	mov	r7, r3
 80187cc:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 80187d0:	f04f 0900 	mov.w	r9, #0
 80187d4:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 80187d8:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 80187dc:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 80187e0:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 80187e4:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 80187e8:	993d      	ldr	r1, [sp, #244]	; 0xf4
 80187ea:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 80187ee:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 80187f2:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 80187f6:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 80187fa:	960e      	str	r6, [sp, #56]	; 0x38
 80187fc:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8018800:	2f00      	cmp	r7, #0
 8018802:	d146      	bne.n	8018892 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8018804:	449c      	add	ip, r3
 8018806:	1ad7      	subs	r7, r2, r3
 8018808:	f1b9 0f00 	cmp.w	r9, #0
 801880c:	d009      	beq.n	8018822 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801880e:	9039      	str	r0, [sp, #228]	; 0xe4
 8018810:	913d      	str	r1, [sp, #244]	; 0xf4
 8018812:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8018816:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801881a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801881e:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8018822:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8018824:	f04f 0800 	mov.w	r8, #0
 8018828:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801882c:	910e      	str	r1, [sp, #56]	; 0x38
 801882e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8018832:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8018836:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801883a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801883e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8018842:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8018846:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801884a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801884e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8018852:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8018856:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801885a:	f1be 0f00 	cmp.w	lr, #0
 801885e:	d030      	beq.n	80188c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8018860:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8018862:	4450      	add	r0, sl
 8018864:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8018868:	4431      	add	r1, r6
 801886a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801886e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8018872:	4549      	cmp	r1, r9
 8018874:	db08      	blt.n	8018888 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8018876:	ee77 7a85 	vadd.f32	s15, s15, s10
 801887a:	3001      	adds	r0, #1
 801887c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8018880:	eba1 0109 	sub.w	r1, r1, r9
 8018884:	ee37 7a06 	vadd.f32	s14, s14, s12
 8018888:	f10e 3eff 	add.w	lr, lr, #4294967295
 801888c:	f04f 0801 	mov.w	r8, #1
 8018890:	e7e3      	b.n	801885a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8018892:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8018894:	4450      	add	r0, sl
 8018896:	ee37 7a24 	vadd.f32	s14, s14, s9
 801889a:	4431      	add	r1, r6
 801889c:	ee77 7a84 	vadd.f32	s15, s15, s8
 80188a0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80188a4:	4541      	cmp	r1, r8
 80188a6:	db08      	blt.n	80188ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80188a8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80188ac:	3001      	adds	r0, #1
 80188ae:	ee37 7a25 	vadd.f32	s14, s14, s11
 80188b2:	eba1 0108 	sub.w	r1, r1, r8
 80188b6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80188ba:	3f01      	subs	r7, #1
 80188bc:	f04f 0901 	mov.w	r9, #1
 80188c0:	e79e      	b.n	8018800 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80188c2:	449c      	add	ip, r3
 80188c4:	1aff      	subs	r7, r7, r3
 80188c6:	f1b8 0f00 	cmp.w	r8, #0
 80188ca:	d009      	beq.n	80188e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80188cc:	9019      	str	r0, [sp, #100]	; 0x64
 80188ce:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80188d2:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80188d6:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80188da:	911d      	str	r1, [sp, #116]	; 0x74
 80188dc:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80188e0:	1ad2      	subs	r2, r2, r3
 80188e2:	e6b5      	b.n	8018650 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80188e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80188e6:	681b      	ldr	r3, [r3, #0]
 80188e8:	b923      	cbnz	r3, 80188f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80188ea:	4b04      	ldr	r3, [pc, #16]	; (80188fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80188ec:	6818      	ldr	r0, [r3, #0]
 80188ee:	6803      	ldr	r3, [r0, #0]
 80188f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80188f2:	4798      	blx	r3
 80188f4:	b05b      	add	sp, #364	; 0x16c
 80188f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188fa:	bf00      	nop
 80188fc:	20056780 	.word	0x20056780

08018900 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8018900:	b570      	push	{r4, r5, r6, lr}
 8018902:	4604      	mov	r4, r0
 8018904:	2500      	movs	r5, #0
 8018906:	9804      	ldr	r0, [sp, #16]
 8018908:	7223      	strb	r3, [r4, #8]
 801890a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801890e:	8025      	strh	r5, [r4, #0]
 8018910:	6061      	str	r1, [r4, #4]
 8018912:	7263      	strb	r3, [r4, #9]
 8018914:	60e0      	str	r0, [r4, #12]
 8018916:	8222      	strh	r2, [r4, #16]
 8018918:	8265      	strh	r5, [r4, #18]
 801891a:	82a5      	strh	r5, [r4, #20]
 801891c:	82e5      	strh	r5, [r4, #22]
 801891e:	8325      	strh	r5, [r4, #24]
 8018920:	8365      	strh	r5, [r4, #26]
 8018922:	83a5      	strh	r5, [r4, #28]
 8018924:	77a5      	strb	r5, [r4, #30]
 8018926:	6803      	ldr	r3, [r0, #0]
 8018928:	695b      	ldr	r3, [r3, #20]
 801892a:	4798      	blx	r3
 801892c:	4606      	mov	r6, r0
 801892e:	b1f8      	cbz	r0, 8018970 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8018930:	68e0      	ldr	r0, [r4, #12]
 8018932:	4631      	mov	r1, r6
 8018934:	6803      	ldr	r3, [r0, #0]
 8018936:	68db      	ldr	r3, [r3, #12]
 8018938:	4798      	blx	r3
 801893a:	7b43      	ldrb	r3, [r0, #13]
 801893c:	7a82      	ldrb	r2, [r0, #10]
 801893e:	4605      	mov	r5, r0
 8018940:	005b      	lsls	r3, r3, #1
 8018942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018946:	4313      	orrs	r3, r2
 8018948:	83a3      	strh	r3, [r4, #28]
 801894a:	7a63      	ldrb	r3, [r4, #9]
 801894c:	2b04      	cmp	r3, #4
 801894e:	d10f      	bne.n	8018970 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8018950:	68e0      	ldr	r0, [r4, #12]
 8018952:	462a      	mov	r2, r5
 8018954:	4631      	mov	r1, r6
 8018956:	6803      	ldr	r3, [r0, #0]
 8018958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801895a:	4798      	blx	r3
 801895c:	7b6b      	ldrb	r3, [r5, #13]
 801895e:	005b      	lsls	r3, r3, #1
 8018960:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018964:	7aab      	ldrb	r3, [r5, #10]
 8018966:	4313      	orrs	r3, r2
 8018968:	4418      	add	r0, r3
 801896a:	8ba3      	ldrh	r3, [r4, #28]
 801896c:	4418      	add	r0, r3
 801896e:	83a0      	strh	r0, [r4, #28]
 8018970:	4620      	mov	r0, r4
 8018972:	bd70      	pop	{r4, r5, r6, pc}

08018974 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8018974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018978:	2400      	movs	r4, #0
 801897a:	b085      	sub	sp, #20
 801897c:	4681      	mov	r9, r0
 801897e:	4688      	mov	r8, r1
 8018980:	4692      	mov	sl, r2
 8018982:	469b      	mov	fp, r3
 8018984:	4627      	mov	r7, r4
 8018986:	4625      	mov	r5, r4
 8018988:	4626      	mov	r6, r4
 801898a:	4554      	cmp	r4, sl
 801898c:	da2a      	bge.n	80189e4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801898e:	2300      	movs	r3, #0
 8018990:	9303      	str	r3, [sp, #12]
 8018992:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018996:	429d      	cmp	r5, r3
 8018998:	d004      	beq.n	80189a4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801899a:	f242 030b 	movw	r3, #8203	; 0x200b
 801899e:	429d      	cmp	r5, r3
 80189a0:	bf18      	it	ne
 80189a2:	462f      	movne	r7, r5
 80189a4:	ab03      	add	r3, sp, #12
 80189a6:	4642      	mov	r2, r8
 80189a8:	4659      	mov	r1, fp
 80189aa:	4648      	mov	r0, r9
 80189ac:	f002 ff30 	bl	801b810 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80189b0:	4605      	mov	r5, r0
 80189b2:	b1b8      	cbz	r0, 80189e4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80189b4:	280a      	cmp	r0, #10
 80189b6:	d015      	beq.n	80189e4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80189b8:	9a03      	ldr	r2, [sp, #12]
 80189ba:	b18a      	cbz	r2, 80189e0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 80189bc:	7b50      	ldrb	r0, [r2, #13]
 80189be:	4639      	mov	r1, r7
 80189c0:	7a93      	ldrb	r3, [r2, #10]
 80189c2:	0040      	lsls	r0, r0, #1
 80189c4:	8895      	ldrh	r5, [r2, #4]
 80189c6:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80189ca:	4303      	orrs	r3, r0
 80189cc:	4640      	mov	r0, r8
 80189ce:	9301      	str	r3, [sp, #4]
 80189d0:	f8d8 3000 	ldr.w	r3, [r8]
 80189d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80189d6:	4798      	blx	r3
 80189d8:	9b01      	ldr	r3, [sp, #4]
 80189da:	4418      	add	r0, r3
 80189dc:	4406      	add	r6, r0
 80189de:	b2b6      	uxth	r6, r6
 80189e0:	3401      	adds	r4, #1
 80189e2:	e7d2      	b.n	801898a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 80189e4:	4630      	mov	r0, r6
 80189e6:	b005      	add	sp, #20
 80189e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080189ec <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80189ec:	2a02      	cmp	r2, #2
 80189ee:	b530      	push	{r4, r5, lr}
 80189f0:	d011      	beq.n	8018a16 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80189f2:	2a03      	cmp	r2, #3
 80189f4:	d01c      	beq.n	8018a30 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80189f6:	2a01      	cmp	r2, #1
 80189f8:	d10c      	bne.n	8018a14 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80189fa:	888b      	ldrh	r3, [r1, #4]
 80189fc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8018a00:	8801      	ldrh	r1, [r0, #0]
 8018a02:	1a9b      	subs	r3, r3, r2
 8018a04:	8844      	ldrh	r4, [r0, #2]
 8018a06:	1a5b      	subs	r3, r3, r1
 8018a08:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8018a0c:	8004      	strh	r4, [r0, #0]
 8018a0e:	8043      	strh	r3, [r0, #2]
 8018a10:	8081      	strh	r1, [r0, #4]
 8018a12:	80c2      	strh	r2, [r0, #6]
 8018a14:	bd30      	pop	{r4, r5, pc}
 8018a16:	88cb      	ldrh	r3, [r1, #6]
 8018a18:	88c2      	ldrh	r2, [r0, #6]
 8018a1a:	1a9b      	subs	r3, r3, r2
 8018a1c:	8842      	ldrh	r2, [r0, #2]
 8018a1e:	1a9b      	subs	r3, r3, r2
 8018a20:	888a      	ldrh	r2, [r1, #4]
 8018a22:	8881      	ldrh	r1, [r0, #4]
 8018a24:	8043      	strh	r3, [r0, #2]
 8018a26:	1a52      	subs	r2, r2, r1
 8018a28:	8801      	ldrh	r1, [r0, #0]
 8018a2a:	1a52      	subs	r2, r2, r1
 8018a2c:	8002      	strh	r2, [r0, #0]
 8018a2e:	e7f1      	b.n	8018a14 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8018a30:	88cb      	ldrh	r3, [r1, #6]
 8018a32:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8018a36:	8841      	ldrh	r1, [r0, #2]
 8018a38:	1a9b      	subs	r3, r3, r2
 8018a3a:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018a3e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8018a42:	1a5b      	subs	r3, r3, r1
 8018a44:	8045      	strh	r5, [r0, #2]
 8018a46:	8082      	strh	r2, [r0, #4]
 8018a48:	8003      	strh	r3, [r0, #0]
 8018a4a:	80c4      	strh	r4, [r0, #6]
 8018a4c:	e7e2      	b.n	8018a14 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08018a4e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8018a4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a52:	b09f      	sub	sp, #124	; 0x7c
 8018a54:	9116      	str	r1, [sp, #88]	; 0x58
 8018a56:	9317      	str	r3, [sp, #92]	; 0x5c
 8018a58:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8018a5a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018a5c:	8809      	ldrh	r1, [r1, #0]
 8018a5e:	889b      	ldrh	r3, [r3, #4]
 8018a60:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8018a64:	440b      	add	r3, r1
 8018a66:	9212      	str	r2, [sp, #72]	; 0x48
 8018a68:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8018a6c:	b21b      	sxth	r3, r3
 8018a6e:	9011      	str	r0, [sp, #68]	; 0x44
 8018a70:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8018a74:	9310      	str	r3, [sp, #64]	; 0x40
 8018a76:	f8d8 3000 	ldr.w	r3, [r8]
 8018a7a:	7a59      	ldrb	r1, [r3, #9]
 8018a7c:	7a1b      	ldrb	r3, [r3, #8]
 8018a7e:	9114      	str	r1, [sp, #80]	; 0x50
 8018a80:	9315      	str	r3, [sp, #84]	; 0x54
 8018a82:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018a84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018a88:	2a00      	cmp	r2, #0
 8018a8a:	d067      	beq.n	8018b5c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 8018a8c:	f898 3010 	ldrb.w	r3, [r8, #16]
 8018a90:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8018a92:	2b04      	cmp	r3, #4
 8018a94:	bf14      	ite	ne
 8018a96:	2301      	movne	r3, #1
 8018a98:	2302      	moveq	r3, #2
 8018a9a:	4413      	add	r3, r2
 8018a9c:	f04f 0900 	mov.w	r9, #0
 8018aa0:	930f      	str	r3, [sp, #60]	; 0x3c
 8018aa2:	464c      	mov	r4, r9
 8018aa4:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8018aa8:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8018aac:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8018ab0:	4293      	cmp	r3, r2
 8018ab2:	f280 808c 	bge.w	8018bce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8018ab6:	2300      	movs	r3, #0
 8018ab8:	931c      	str	r3, [sp, #112]	; 0x70
 8018aba:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018abe:	429c      	cmp	r4, r3
 8018ac0:	d006      	beq.n	8018ad0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 8018ac2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018ac4:	f242 020b 	movw	r2, #8203	; 0x200b
 8018ac8:	4294      	cmp	r4, r2
 8018aca:	bf18      	it	ne
 8018acc:	4623      	movne	r3, r4
 8018ace:	930d      	str	r3, [sp, #52]	; 0x34
 8018ad0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018ad2:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8018ad4:	f8d8 2000 	ldr.w	r2, [r8]
 8018ad8:	428b      	cmp	r3, r1
 8018ada:	db41      	blt.n	8018b60 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8018adc:	6813      	ldr	r3, [r2, #0]
 8018ade:	4610      	mov	r0, r2
 8018ae0:	695b      	ldr	r3, [r3, #20]
 8018ae2:	4798      	blx	r3
 8018ae4:	4604      	mov	r4, r0
 8018ae6:	f8d8 0000 	ldr.w	r0, [r8]
 8018aea:	aa1d      	add	r2, sp, #116	; 0x74
 8018aec:	4621      	mov	r1, r4
 8018aee:	6803      	ldr	r3, [r0, #0]
 8018af0:	689e      	ldr	r6, [r3, #8]
 8018af2:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8018af6:	47b0      	blx	r6
 8018af8:	901c      	str	r0, [sp, #112]	; 0x70
 8018afa:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018afe:	429c      	cmp	r4, r3
 8018b00:	f000 80ea 	beq.w	8018cd8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018b04:	f242 030b 	movw	r3, #8203	; 0x200b
 8018b08:	429c      	cmp	r4, r3
 8018b0a:	f000 80e5 	beq.w	8018cd8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018b0e:	2c00      	cmp	r4, #0
 8018b10:	f000 80f7 	beq.w	8018d02 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8018b14:	2c0a      	cmp	r4, #10
 8018b16:	d060      	beq.n	8018bda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8018b18:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018b1a:	b36a      	cbz	r2, 8018b78 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 8018b1c:	8894      	ldrh	r4, [r2, #4]
 8018b1e:	f1bb 0f00 	cmp.w	fp, #0
 8018b22:	d03b      	beq.n	8018b9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 8018b24:	f892 900d 	ldrb.w	r9, [r2, #13]
 8018b28:	f1bb 0f01 	cmp.w	fp, #1
 8018b2c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8018b30:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8018b34:	f892 900a 	ldrb.w	r9, [r2, #10]
 8018b38:	ea49 0903 	orr.w	r9, r9, r3
 8018b3c:	d134      	bne.n	8018ba8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 8018b3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018b40:	eba5 0509 	sub.w	r5, r5, r9
 8018b44:	2b00      	cmp	r3, #0
 8018b46:	d14f      	bne.n	8018be8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8018b48:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018b4a:	eb09 0305 	add.w	r3, r9, r5
 8018b4e:	4413      	add	r3, r2
 8018b50:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018b52:	f9b2 2000 	ldrsh.w	r2, [r2]
 8018b56:	4293      	cmp	r3, r2
 8018b58:	da51      	bge.n	8018bfe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8018b5a:	e038      	b.n	8018bce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8018b5c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8018b5e:	e79d      	b.n	8018a9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 8018b60:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8018b64:	4659      	mov	r1, fp
 8018b66:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8018b68:	9301      	str	r3, [sp, #4]
 8018b6a:	ab1d      	add	r3, sp, #116	; 0x74
 8018b6c:	9300      	str	r3, [sp, #0]
 8018b6e:	ab1c      	add	r3, sp, #112	; 0x70
 8018b70:	f002 fea6 	bl	801b8c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8018b74:	4604      	mov	r4, r0
 8018b76:	e7c0      	b.n	8018afa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8018b78:	f8d8 0000 	ldr.w	r0, [r8]
 8018b7c:	6803      	ldr	r3, [r0, #0]
 8018b7e:	691b      	ldr	r3, [r3, #16]
 8018b80:	4798      	blx	r3
 8018b82:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018b86:	4298      	cmp	r0, r3
 8018b88:	f000 80a6 	beq.w	8018cd8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018b8c:	f242 030b 	movw	r3, #8203	; 0x200b
 8018b90:	4298      	cmp	r0, r3
 8018b92:	f000 80a1 	beq.w	8018cd8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018b96:	f1bb 0f00 	cmp.w	fp, #0
 8018b9a:	d100      	bne.n	8018b9e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8018b9c:	444d      	add	r5, r9
 8018b9e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018ba0:	2a00      	cmp	r2, #0
 8018ba2:	d1bf      	bne.n	8018b24 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 8018ba4:	4691      	mov	r9, r2
 8018ba6:	e097      	b.n	8018cd8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018ba8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	f000 80ab 	beq.w	8018d06 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8018bb0:	f1bb 0f00 	cmp.w	fp, #0
 8018bb4:	d118      	bne.n	8018be8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8018bb6:	f8d8 0000 	ldr.w	r0, [r8]
 8018bba:	990d      	ldr	r1, [sp, #52]	; 0x34
 8018bbc:	6803      	ldr	r3, [r0, #0]
 8018bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018bc0:	4798      	blx	r3
 8018bc2:	4405      	add	r5, r0
 8018bc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018bc6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018bc8:	1aeb      	subs	r3, r5, r3
 8018bca:	4293      	cmp	r3, r2
 8018bcc:	dd17      	ble.n	8018bfe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8018bce:	2c00      	cmp	r4, #0
 8018bd0:	f000 8097 	beq.w	8018d02 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8018bd4:	2c0a      	cmp	r4, #10
 8018bd6:	f040 8085 	bne.w	8018ce4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 8018bda:	240a      	movs	r4, #10
 8018bdc:	fab4 f084 	clz	r0, r4
 8018be0:	0940      	lsrs	r0, r0, #5
 8018be2:	b01f      	add	sp, #124	; 0x7c
 8018be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018be8:	f8d8 0000 	ldr.w	r0, [r8]
 8018bec:	990d      	ldr	r1, [sp, #52]	; 0x34
 8018bee:	6803      	ldr	r3, [r0, #0]
 8018bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018bf2:	4798      	blx	r3
 8018bf4:	f1bb 0f01 	cmp.w	fp, #1
 8018bf8:	eba5 0500 	sub.w	r5, r5, r0
 8018bfc:	d0a4      	beq.n	8018b48 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 8018bfe:	981c      	ldr	r0, [sp, #112]	; 0x70
 8018c00:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018c02:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8018c06:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018c0a:	7b43      	ldrb	r3, [r0, #13]
 8018c0c:	4429      	add	r1, r5
 8018c0e:	015b      	lsls	r3, r3, #5
 8018c10:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018c14:	7983      	ldrb	r3, [r0, #6]
 8018c16:	4313      	orrs	r3, r2
 8018c18:	440b      	add	r3, r1
 8018c1a:	42b3      	cmp	r3, r6
 8018c1c:	db5c      	blt.n	8018cd8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018c1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018c20:	4299      	cmp	r1, r3
 8018c22:	da59      	bge.n	8018cd8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018c24:	f8d8 0000 	ldr.w	r0, [r8]
 8018c28:	42ae      	cmp	r6, r5
 8018c2a:	6803      	ldr	r3, [r0, #0]
 8018c2c:	bfcc      	ite	gt
 8018c2e:	1b76      	subgt	r6, r6, r5
 8018c30:	2600      	movle	r6, #0
 8018c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c34:	bfc8      	it	gt
 8018c36:	b2b6      	uxthgt	r6, r6
 8018c38:	4798      	blx	r3
 8018c3a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018c3c:	7b5a      	ldrb	r2, [r3, #13]
 8018c3e:	00d1      	lsls	r1, r2, #3
 8018c40:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8018c44:	7a19      	ldrb	r1, [r3, #8]
 8018c46:	4339      	orrs	r1, r7
 8018c48:	0657      	lsls	r7, r2, #25
 8018c4a:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8018c4c:	bf48      	it	mi
 8018c4e:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8018c52:	4407      	add	r7, r0
 8018c54:	bf48      	it	mi
 8018c56:	b209      	sxthmi	r1, r1
 8018c58:	1a7f      	subs	r7, r7, r1
 8018c5a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8018c5c:	b2bf      	uxth	r7, r7
 8018c5e:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8018c62:	fa0f fa87 	sxth.w	sl, r7
 8018c66:	4551      	cmp	r1, sl
 8018c68:	dd3a      	ble.n	8018ce0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8018c6a:	0112      	lsls	r2, r2, #4
 8018c6c:	79d8      	ldrb	r0, [r3, #7]
 8018c6e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018c72:	4302      	orrs	r2, r0
 8018c74:	4492      	add	sl, r2
 8018c76:	4551      	cmp	r1, sl
 8018c78:	dc2e      	bgt.n	8018cd8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018c7a:	1bcf      	subs	r7, r1, r7
 8018c7c:	468a      	mov	sl, r1
 8018c7e:	b2bf      	uxth	r7, r7
 8018c80:	9319      	str	r3, [sp, #100]	; 0x64
 8018c82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018c84:	f8d8 0000 	ldr.w	r0, [r8]
 8018c88:	681a      	ldr	r2, [r3, #0]
 8018c8a:	6801      	ldr	r1, [r0, #0]
 8018c8c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8018c8e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8018c90:	9313      	str	r3, [sp, #76]	; 0x4c
 8018c92:	9218      	str	r2, [sp, #96]	; 0x60
 8018c94:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8018c96:	4788      	blx	r1
 8018c98:	f898 1006 	ldrb.w	r1, [r8, #6]
 8018c9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018c9e:	910b      	str	r1, [sp, #44]	; 0x2c
 8018ca0:	f898 100e 	ldrb.w	r1, [r8, #14]
 8018ca4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018ca6:	910a      	str	r1, [sp, #40]	; 0x28
 8018ca8:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8018cac:	9109      	str	r1, [sp, #36]	; 0x24
 8018cae:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8018cb2:	9305      	str	r3, [sp, #20]
 8018cb4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018cb6:	9206      	str	r2, [sp, #24]
 8018cb8:	e9cd a601 	strd	sl, r6, [sp, #4]
 8018cbc:	442e      	add	r6, r5
 8018cbe:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8018cc2:	b236      	sxth	r6, r6
 8018cc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018cc6:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8018cca:	9600      	str	r6, [sp, #0]
 8018ccc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018cce:	681a      	ldr	r2, [r3, #0]
 8018cd0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018cd2:	685b      	ldr	r3, [r3, #4]
 8018cd4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8018cd6:	47b0      	blx	r6
 8018cd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018cda:	3301      	adds	r3, #1
 8018cdc:	930e      	str	r3, [sp, #56]	; 0x38
 8018cde:	e6e5      	b.n	8018aac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 8018ce0:	2700      	movs	r7, #0
 8018ce2:	e7cd      	b.n	8018c80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 8018ce4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8018ce6:	3501      	adds	r5, #1
 8018ce8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8018cea:	429d      	cmp	r5, r3
 8018cec:	f6bf af76 	bge.w	8018bdc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8018cf0:	4659      	mov	r1, fp
 8018cf2:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8018cf4:	f7f0 f860 	bl	8008db8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018cf8:	4604      	mov	r4, r0
 8018cfa:	b110      	cbz	r0, 8018d02 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8018cfc:	280a      	cmp	r0, #10
 8018cfe:	d1f2      	bne.n	8018ce6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8018d00:	e76b      	b.n	8018bda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8018d02:	2400      	movs	r4, #0
 8018d04:	e76a      	b.n	8018bdc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8018d06:	f1bb 0f00 	cmp.w	fp, #0
 8018d0a:	f43f af5b 	beq.w	8018bc4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8018d0e:	e776      	b.n	8018bfe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

08018d10 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8018d10:	b530      	push	{r4, r5, lr}
 8018d12:	8a44      	ldrh	r4, [r0, #18]
 8018d14:	8ac5      	ldrh	r5, [r0, #22]
 8018d16:	82c3      	strh	r3, [r0, #22]
 8018d18:	442c      	add	r4, r5
 8018d1a:	1ae4      	subs	r4, r4, r3
 8018d1c:	8b03      	ldrh	r3, [r0, #24]
 8018d1e:	8244      	strh	r4, [r0, #18]
 8018d20:	8a84      	ldrh	r4, [r0, #20]
 8018d22:	4422      	add	r2, r4
 8018d24:	440c      	add	r4, r1
 8018d26:	1a59      	subs	r1, r3, r1
 8018d28:	8342      	strh	r2, [r0, #26]
 8018d2a:	8284      	strh	r4, [r0, #20]
 8018d2c:	8301      	strh	r1, [r0, #24]
 8018d2e:	bd30      	pop	{r4, r5, pc}

08018d30 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8018d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d34:	7a43      	ldrb	r3, [r0, #9]
 8018d36:	b087      	sub	sp, #28
 8018d38:	4604      	mov	r4, r0
 8018d3a:	460f      	mov	r7, r1
 8018d3c:	1eda      	subs	r2, r3, #3
 8018d3e:	b2d2      	uxtb	r2, r2
 8018d40:	2900      	cmp	r1, #0
 8018d42:	d036      	beq.n	8018db2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 8018d44:	2a01      	cmp	r2, #1
 8018d46:	d932      	bls.n	8018dae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8018d48:	1e58      	subs	r0, r3, #1
 8018d4a:	f1d0 0b00 	rsbs	fp, r0, #0
 8018d4e:	eb4b 0b00 	adc.w	fp, fp, r0
 8018d52:	1e99      	subs	r1, r3, #2
 8018d54:	424b      	negs	r3, r1
 8018d56:	414b      	adcs	r3, r1
 8018d58:	9303      	str	r3, [sp, #12]
 8018d5a:	2300      	movs	r3, #0
 8018d5c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8018d60:	2500      	movs	r5, #0
 8018d62:	f242 0a0b 	movw	sl, #8203	; 0x200b
 8018d66:	46a9      	mov	r9, r5
 8018d68:	8265      	strh	r5, [r4, #18]
 8018d6a:	82a5      	strh	r5, [r4, #20]
 8018d6c:	2300      	movs	r3, #0
 8018d6e:	9305      	str	r3, [sp, #20]
 8018d70:	8823      	ldrh	r3, [r4, #0]
 8018d72:	2b20      	cmp	r3, #32
 8018d74:	d02b      	beq.n	8018dce <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 8018d76:	eba3 020a 	sub.w	r2, r3, sl
 8018d7a:	4256      	negs	r6, r2
 8018d7c:	4156      	adcs	r6, r2
 8018d7e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8018d82:	4293      	cmp	r3, r2
 8018d84:	d004      	beq.n	8018d90 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8018d86:	4553      	cmp	r3, sl
 8018d88:	bf16      	itet	ne
 8018d8a:	4699      	movne	r9, r3
 8018d8c:	2601      	moveq	r6, #1
 8018d8e:	2600      	movne	r6, #0
 8018d90:	ab05      	add	r3, sp, #20
 8018d92:	68e2      	ldr	r2, [r4, #12]
 8018d94:	7a21      	ldrb	r1, [r4, #8]
 8018d96:	6860      	ldr	r0, [r4, #4]
 8018d98:	f002 fd3a 	bl	801b810 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018d9c:	8020      	strh	r0, [r4, #0]
 8018d9e:	b9c8      	cbnz	r0, 8018dd4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8018da0:	8b22      	ldrh	r2, [r4, #24]
 8018da2:	2300      	movs	r3, #0
 8018da4:	4611      	mov	r1, r2
 8018da6:	4620      	mov	r0, r4
 8018da8:	f7ff ffb2 	bl	8018d10 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8018dac:	e066      	b.n	8018e7c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8018dae:	468b      	mov	fp, r1
 8018db0:	e7cf      	b.n	8018d52 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 8018db2:	3b01      	subs	r3, #1
 8018db4:	2a01      	cmp	r2, #1
 8018db6:	9103      	str	r1, [sp, #12]
 8018db8:	468b      	mov	fp, r1
 8018dba:	bf8c      	ite	hi
 8018dbc:	2200      	movhi	r2, #0
 8018dbe:	2201      	movls	r2, #1
 8018dc0:	2b01      	cmp	r3, #1
 8018dc2:	9202      	str	r2, [sp, #8]
 8018dc4:	bf8c      	ite	hi
 8018dc6:	2300      	movhi	r3, #0
 8018dc8:	2301      	movls	r3, #1
 8018dca:	9301      	str	r3, [sp, #4]
 8018dcc:	e7c8      	b.n	8018d60 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 8018dce:	4699      	mov	r9, r3
 8018dd0:	2601      	movs	r6, #1
 8018dd2:	e7dd      	b.n	8018d90 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8018dd4:	8ae3      	ldrh	r3, [r4, #22]
 8018dd6:	280a      	cmp	r0, #10
 8018dd8:	f103 0301 	add.w	r3, r3, #1
 8018ddc:	82e3      	strh	r3, [r4, #22]
 8018dde:	d0df      	beq.n	8018da0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 8018de0:	9a05      	ldr	r2, [sp, #20]
 8018de2:	bb42      	cbnz	r2, 8018e36 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 8018de4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018de8:	4298      	cmp	r0, r3
 8018dea:	d001      	beq.n	8018df0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8018dec:	4550      	cmp	r0, sl
 8018dee:	d1bd      	bne.n	8018d6c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018df0:	8823      	ldrh	r3, [r4, #0]
 8018df2:	8b21      	ldrh	r1, [r4, #24]
 8018df4:	2b20      	cmp	r3, #32
 8018df6:	d001      	beq.n	8018dfc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 8018df8:	4553      	cmp	r3, sl
 8018dfa:	d131      	bne.n	8018e60 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 8018dfc:	2e00      	cmp	r6, #0
 8018dfe:	bf0a      	itet	eq
 8018e00:	460d      	moveq	r5, r1
 8018e02:	4630      	movne	r0, r6
 8018e04:	2001      	moveq	r0, #1
 8018e06:	440a      	add	r2, r1
 8018e08:	8aa3      	ldrh	r3, [r4, #20]
 8018e0a:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8018e0e:	b292      	uxth	r2, r2
 8018e10:	8322      	strh	r2, [r4, #24]
 8018e12:	4413      	add	r3, r2
 8018e14:	2f00      	cmp	r7, #0
 8018e16:	d03a      	beq.n	8018e8e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8018e18:	f1bb 0f00 	cmp.w	fp, #0
 8018e1c:	d102      	bne.n	8018e24 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 8018e1e:	9903      	ldr	r1, [sp, #12]
 8018e20:	b301      	cbz	r1, 8018e64 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8018e22:	b1f8      	cbz	r0, 8018e64 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8018e24:	8ba1      	ldrh	r1, [r4, #28]
 8018e26:	4419      	add	r1, r3
 8018e28:	458c      	cmp	ip, r1
 8018e2a:	da2a      	bge.n	8018e82 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8018e2c:	8a61      	ldrh	r1, [r4, #18]
 8018e2e:	b341      	cbz	r1, 8018e82 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8018e30:	4563      	cmp	r3, ip
 8018e32:	dd9b      	ble.n	8018d6c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018e34:	e01c      	b.n	8018e70 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8018e36:	8893      	ldrh	r3, [r2, #4]
 8018e38:	4649      	mov	r1, r9
 8018e3a:	8023      	strh	r3, [r4, #0]
 8018e3c:	f892 800d 	ldrb.w	r8, [r2, #13]
 8018e40:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8018e44:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8018e48:	f892 800a 	ldrb.w	r8, [r2, #10]
 8018e4c:	ea48 0800 	orr.w	r8, r8, r0
 8018e50:	68e0      	ldr	r0, [r4, #12]
 8018e52:	6803      	ldr	r3, [r0, #0]
 8018e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018e56:	4798      	blx	r3
 8018e58:	eb08 0200 	add.w	r2, r8, r0
 8018e5c:	b292      	uxth	r2, r2
 8018e5e:	e7c7      	b.n	8018df0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8018e60:	2000      	movs	r0, #0
 8018e62:	e7d0      	b.n	8018e06 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8018e64:	4563      	cmp	r3, ip
 8018e66:	dd81      	ble.n	8018d6c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018e68:	8a63      	ldrh	r3, [r4, #18]
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	f43f af7e 	beq.w	8018d6c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018e70:	2301      	movs	r3, #1
 8018e72:	8ba2      	ldrh	r2, [r4, #28]
 8018e74:	77a3      	strb	r3, [r4, #30]
 8018e76:	8b63      	ldrh	r3, [r4, #26]
 8018e78:	4413      	add	r3, r2
 8018e7a:	8363      	strh	r3, [r4, #26]
 8018e7c:	b007      	add	sp, #28
 8018e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e82:	2300      	movs	r3, #0
 8018e84:	4611      	mov	r1, r2
 8018e86:	4620      	mov	r0, r4
 8018e88:	f7ff ff42 	bl	8018d10 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8018e8c:	e76e      	b.n	8018d6c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018e8e:	4563      	cmp	r3, ip
 8018e90:	dd14      	ble.n	8018ebc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 8018e92:	9b02      	ldr	r3, [sp, #8]
 8018e94:	b113      	cbz	r3, 8018e9c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 8018e96:	2301      	movs	r3, #1
 8018e98:	460a      	mov	r2, r1
 8018e9a:	e783      	b.n	8018da4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 8018e9c:	9b01      	ldr	r3, [sp, #4]
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	f43f af64 	beq.w	8018d6c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018ea4:	2800      	cmp	r0, #0
 8018ea6:	f47f af61 	bne.w	8018d6c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018eaa:	b116      	cbz	r6, 8018eb2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 8018eac:	2301      	movs	r3, #1
 8018eae:	462a      	mov	r2, r5
 8018eb0:	e779      	b.n	8018da6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 8018eb2:	8a63      	ldrh	r3, [r4, #18]
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	f43f af59 	beq.w	8018d6c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018eba:	e7df      	b.n	8018e7c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8018ebc:	2800      	cmp	r0, #0
 8018ebe:	f47f af55 	bne.w	8018d6c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018ec2:	2e00      	cmp	r6, #0
 8018ec4:	f43f af52 	beq.w	8018d6c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018ec8:	2301      	movs	r3, #1
 8018eca:	462a      	mov	r2, r5
 8018ecc:	e7db      	b.n	8018e86 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

08018ece <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8018ece:	b530      	push	{r4, r5, lr}
 8018ed0:	4605      	mov	r5, r0
 8018ed2:	b08b      	sub	sp, #44	; 0x2c
 8018ed4:	b191      	cbz	r1, 8018efc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 8018ed6:	2401      	movs	r4, #1
 8018ed8:	e9cd 3100 	strd	r3, r1, [sp]
 8018edc:	4613      	mov	r3, r2
 8018ede:	4601      	mov	r1, r0
 8018ee0:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8018ee4:	a802      	add	r0, sp, #8
 8018ee6:	f7ff fd0b 	bl	8018900 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8018eea:	2100      	movs	r1, #0
 8018eec:	a802      	add	r0, sp, #8
 8018eee:	f7ff ff1f 	bl	8018d30 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018ef2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018ef6:	b163      	cbz	r3, 8018f12 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8018ef8:	3401      	adds	r4, #1
 8018efa:	e7f6      	b.n	8018eea <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 8018efc:	2401      	movs	r4, #1
 8018efe:	f002 fd7f 	bl	801ba00 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018f02:	280a      	cmp	r0, #10
 8018f04:	4628      	mov	r0, r5
 8018f06:	bf08      	it	eq
 8018f08:	3401      	addeq	r4, #1
 8018f0a:	f002 fd79 	bl	801ba00 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018f0e:	2800      	cmp	r0, #0
 8018f10:	d1f7      	bne.n	8018f02 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8018f12:	b2a0      	uxth	r0, r4
 8018f14:	b00b      	add	sp, #44	; 0x2c
 8018f16:	bd30      	pop	{r4, r5, pc}

08018f18 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8018f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f1c:	b0df      	sub	sp, #380	; 0x17c
 8018f1e:	4689      	mov	r9, r1
 8018f20:	461c      	mov	r4, r3
 8018f22:	f8dd a1a0 	ldr.w	sl, [sp, #416]	; 0x1a0
 8018f26:	900a      	str	r0, [sp, #40]	; 0x28
 8018f28:	f1ba 0f00 	cmp.w	sl, #0
 8018f2c:	f000 80b1 	beq.w	8019092 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8018f30:	681b      	ldr	r3, [r3, #0]
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	f000 80ad 	beq.w	8019092 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8018f38:	7ba3      	ldrb	r3, [r4, #14]
 8018f3a:	2b00      	cmp	r3, #0
 8018f3c:	f000 80a9 	beq.w	8019092 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8018f40:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 8018f44:	6810      	ldr	r0, [r2, #0]
 8018f46:	6851      	ldr	r1, [r2, #4]
 8018f48:	2500      	movs	r5, #0
 8018f4a:	4643      	mov	r3, r8
 8018f4c:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8018f50:	950f      	str	r5, [sp, #60]	; 0x3c
 8018f52:	af19      	add	r7, sp, #100	; 0x64
 8018f54:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8018f58:	79a2      	ldrb	r2, [r4, #6]
 8018f5a:	c303      	stmia	r3!, {r0, r1}
 8018f5c:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8018f60:	a90f      	add	r1, sp, #60	; 0x3c
 8018f62:	4640      	mov	r0, r8
 8018f64:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8018f68:	f7ff fd40 	bl	80189ec <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8018f6c:	a90f      	add	r1, sp, #60	; 0x3c
 8018f6e:	79a2      	ldrb	r2, [r4, #6]
 8018f70:	4608      	mov	r0, r1
 8018f72:	f7ff fd3b 	bl	80189ec <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8018f76:	4638      	mov	r0, r7
 8018f78:	f002 f901 	bl	801b17e <_ZN8touchgfx12TextProviderC1Ev>
 8018f7c:	6820      	ldr	r0, [r4, #0]
 8018f7e:	6803      	ldr	r3, [r0, #0]
 8018f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f82:	4798      	blx	r3
 8018f84:	4606      	mov	r6, r0
 8018f86:	6820      	ldr	r0, [r4, #0]
 8018f88:	6803      	ldr	r3, [r0, #0]
 8018f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018f8c:	4798      	blx	r3
 8018f8e:	4633      	mov	r3, r6
 8018f90:	9000      	str	r0, [sp, #0]
 8018f92:	4651      	mov	r1, sl
 8018f94:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 8018f96:	4638      	mov	r0, r7
 8018f98:	f002 f93e 	bl	801b218 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018f9c:	7923      	ldrb	r3, [r4, #4]
 8018f9e:	6820      	ldr	r0, [r4, #0]
 8018fa0:	9308      	str	r3, [sp, #32]
 8018fa2:	6803      	ldr	r3, [r0, #0]
 8018fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018fa6:	4798      	blx	r3
 8018fa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018fac:	181e      	adds	r6, r3, r0
 8018fae:	42ae      	cmp	r6, r5
 8018fb0:	dd06      	ble.n	8018fc0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 8018fb2:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8018fb6:	4282      	cmp	r2, r0
 8018fb8:	bfa4      	itt	ge
 8018fba:	189d      	addge	r5, r3, r2
 8018fbc:	fb95 f5f6 	sdivge	r5, r5, r6
 8018fc0:	a830      	add	r0, sp, #192	; 0xc0
 8018fc2:	f002 f8dc 	bl	801b17e <_ZN8touchgfx12TextProviderC1Ev>
 8018fc6:	7c23      	ldrb	r3, [r4, #16]
 8018fc8:	b17b      	cbz	r3, 8018fea <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 8018fca:	6820      	ldr	r0, [r4, #0]
 8018fcc:	6803      	ldr	r3, [r0, #0]
 8018fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018fd0:	4798      	blx	r3
 8018fd2:	4683      	mov	fp, r0
 8018fd4:	6820      	ldr	r0, [r4, #0]
 8018fd6:	6803      	ldr	r3, [r0, #0]
 8018fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018fda:	4798      	blx	r3
 8018fdc:	465b      	mov	r3, fp
 8018fde:	9000      	str	r0, [sp, #0]
 8018fe0:	4651      	mov	r1, sl
 8018fe2:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 8018fe4:	a830      	add	r0, sp, #192	; 0xc0
 8018fe6:	f002 f917 	bl	801b218 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018fea:	7c21      	ldrb	r1, [r4, #16]
 8018fec:	a811      	add	r0, sp, #68	; 0x44
 8018fee:	7963      	ldrb	r3, [r4, #5]
 8018ff0:	9101      	str	r1, [sp, #4]
 8018ff2:	6821      	ldr	r1, [r4, #0]
 8018ff4:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8018ff8:	9100      	str	r1, [sp, #0]
 8018ffa:	a930      	add	r1, sp, #192	; 0xc0
 8018ffc:	f7ff fc80 	bl	8018900 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8019000:	7c23      	ldrb	r3, [r4, #16]
 8019002:	b9bb      	cbnz	r3, 8019034 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x11c>
 8019004:	fa1f fa86 	uxth.w	sl, r6
 8019008:	2d00      	cmp	r5, #0
 801900a:	dd45      	ble.n	8019098 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801900c:	4638      	mov	r0, r7
 801900e:	f002 fcf7 	bl	801ba00 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019012:	2800      	cmp	r0, #0
 8019014:	d03d      	beq.n	8019092 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8019016:	280a      	cmp	r0, #10
 8019018:	d1f6      	bne.n	8019008 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf0>
 801901a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801901e:	3d01      	subs	r5, #1
 8019020:	4453      	add	r3, sl
 8019022:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019026:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801902a:	eba3 030a 	sub.w	r3, r3, sl
 801902e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8019032:	e7e9      	b.n	8019008 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf0>
 8019034:	0073      	lsls	r3, r6, #1
 8019036:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801903a:	fa1f fa86 	uxth.w	sl, r6
 801903e:	9309      	str	r3, [sp, #36]	; 0x24
 8019040:	2d00      	cmp	r5, #0
 8019042:	dd29      	ble.n	8019098 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8019044:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8019048:	a811      	add	r0, sp, #68	; 0x44
 801904a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801904c:	428b      	cmp	r3, r1
 801904e:	bfd4      	ite	le
 8019050:	2100      	movle	r1, #0
 8019052:	2101      	movgt	r1, #1
 8019054:	f7ff fe6c 	bl	8018d30 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8019058:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801905c:	3b01      	subs	r3, #1
 801905e:	b29b      	uxth	r3, r3
 8019060:	455b      	cmp	r3, fp
 8019062:	930b      	str	r3, [sp, #44]	; 0x2c
 8019064:	d005      	beq.n	8019072 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15a>
 8019066:	7961      	ldrb	r1, [r4, #5]
 8019068:	4638      	mov	r0, r7
 801906a:	f7ef fea5 	bl	8008db8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801906e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019070:	e7f4      	b.n	801905c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8019072:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8019076:	3d01      	subs	r5, #1
 8019078:	4453      	add	r3, sl
 801907a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801907e:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8019082:	eba3 030a 	sub.w	r3, r3, sl
 8019086:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801908a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801908e:	2b00      	cmp	r3, #0
 8019090:	d1d6      	bne.n	8019040 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x128>
 8019092:	b05f      	add	sp, #380	; 0x17c
 8019094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019098:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801909c:	ad47      	add	r5, sp, #284	; 0x11c
 801909e:	f04f 0b00 	mov.w	fp, #0
 80190a2:	7c23      	ldrb	r3, [r4, #16]
 80190a4:	2b00      	cmp	r3, #0
 80190a6:	d067      	beq.n	8019178 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 80190a8:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80190ac:	a811      	add	r0, sp, #68	; 0x44
 80190ae:	458a      	cmp	sl, r1
 80190b0:	bfd4      	ite	le
 80190b2:	2100      	movle	r1, #0
 80190b4:	2101      	movgt	r1, #1
 80190b6:	f7ff fe3b 	bl	8018d30 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80190ba:	9b08      	ldr	r3, [sp, #32]
 80190bc:	2b00      	cmp	r3, #0
 80190be:	d056      	beq.n	801916e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 80190c0:	7c23      	ldrb	r3, [r4, #16]
 80190c2:	225c      	movs	r2, #92	; 0x5c
 80190c4:	4639      	mov	r1, r7
 80190c6:	4628      	mov	r0, r5
 80190c8:	9309      	str	r3, [sp, #36]	; 0x24
 80190ca:	f00d fcf7 	bl	8026abc <memcpy>
 80190ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80190d0:	2b00      	cmp	r3, #0
 80190d2:	d059      	beq.n	8019188 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 80190d4:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 80190d8:	7922      	ldrb	r2, [r4, #4]
 80190da:	2a01      	cmp	r2, #1
 80190dc:	d13d      	bne.n	801915a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 80190de:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 80190e2:	1ac0      	subs	r0, r0, r3
 80190e4:	2302      	movs	r3, #2
 80190e6:	fb90 f0f3 	sdiv	r0, r0, r3
 80190ea:	b200      	sxth	r0, r0
 80190ec:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80190f0:	4418      	add	r0, r3
 80190f2:	7c23      	ldrb	r3, [r4, #16]
 80190f4:	f8ad 011c 	strh.w	r0, [sp, #284]	; 0x11c
 80190f8:	2b00      	cmp	r3, #0
 80190fa:	d03a      	beq.n	8019172 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 80190fc:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 8019100:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 8019104:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8019108:	9500      	str	r5, [sp, #0]
 801910a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801910c:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8019110:	e9cd b703 	strd	fp, r7, [sp, #12]
 8019114:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8019118:	464a      	mov	r2, r9
 801911a:	2100      	movs	r1, #0
 801911c:	f7ff fc97 	bl	8018a4e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8019120:	2800      	cmp	r0, #0
 8019122:	d1b6      	bne.n	8019092 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8019124:	b2b2      	uxth	r2, r6
 8019126:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801912a:	4611      	mov	r1, r2
 801912c:	4413      	add	r3, r2
 801912e:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8019132:	b21b      	sxth	r3, r3
 8019134:	1a52      	subs	r2, r2, r1
 8019136:	7c21      	ldrb	r1, [r4, #16]
 8019138:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801913c:	b212      	sxth	r2, r2
 801913e:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8019142:	b109      	cbz	r1, 8019148 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 8019144:	42b2      	cmp	r2, r6
 8019146:	dba4      	blt.n	8019092 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 8019148:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801914c:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8019150:	440a      	add	r2, r1
 8019152:	b212      	sxth	r2, r2
 8019154:	4293      	cmp	r3, r2
 8019156:	dda4      	ble.n	80190a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18a>
 8019158:	e79b      	b.n	8019092 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17a>
 801915a:	2a02      	cmp	r2, #2
 801915c:	d105      	bne.n	801916a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801915e:	7be2      	ldrb	r2, [r4, #15]
 8019160:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 8019164:	1a80      	subs	r0, r0, r2
 8019166:	1ac0      	subs	r0, r0, r3
 8019168:	e7bf      	b.n	80190ea <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d2>
 801916a:	2000      	movs	r0, #0
 801916c:	e7be      	b.n	80190ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 801916e:	7be0      	ldrb	r0, [r4, #15]
 8019170:	e7bc      	b.n	80190ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 8019172:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019176:	e7c3      	b.n	8019100 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 8019178:	9b08      	ldr	r3, [sp, #32]
 801917a:	2b00      	cmp	r3, #0
 801917c:	d0f7      	beq.n	801916e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801917e:	225c      	movs	r2, #92	; 0x5c
 8019180:	4639      	mov	r1, r7
 8019182:	4628      	mov	r0, r5
 8019184:	f00d fc9a 	bl	8026abc <memcpy>
 8019188:	2300      	movs	r3, #0
 801918a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801918e:	6821      	ldr	r1, [r4, #0]
 8019190:	4628      	mov	r0, r5
 8019192:	f7ff fbef 	bl	8018974 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8019196:	b203      	sxth	r3, r0
 8019198:	e79e      	b.n	80190d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c0>

0801919a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801919a:	2b02      	cmp	r3, #2
 801919c:	b510      	push	{r4, lr}
 801919e:	f9b0 4000 	ldrsh.w	r4, [r0]
 80191a2:	d00b      	beq.n	80191bc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 80191a4:	2b03      	cmp	r3, #3
 80191a6:	d00e      	beq.n	80191c6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 80191a8:	2b01      	cmp	r3, #1
 80191aa:	d001      	beq.n	80191b0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 80191ac:	1860      	adds	r0, r4, r1
 80191ae:	bd10      	pop	{r4, pc}
 80191b0:	8880      	ldrh	r0, [r0, #4]
 80191b2:	4420      	add	r0, r4
 80191b4:	b200      	sxth	r0, r0
 80191b6:	1a80      	subs	r0, r0, r2
 80191b8:	3801      	subs	r0, #1
 80191ba:	e7f8      	b.n	80191ae <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 80191bc:	8880      	ldrh	r0, [r0, #4]
 80191be:	4420      	add	r0, r4
 80191c0:	b200      	sxth	r0, r0
 80191c2:	1a40      	subs	r0, r0, r1
 80191c4:	e7f8      	b.n	80191b8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80191c6:	18a0      	adds	r0, r4, r2
 80191c8:	e7f1      	b.n	80191ae <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

080191ca <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80191ca:	2b02      	cmp	r3, #2
 80191cc:	b510      	push	{r4, lr}
 80191ce:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80191d2:	d006      	beq.n	80191e2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 80191d4:	2b03      	cmp	r3, #3
 80191d6:	d00a      	beq.n	80191ee <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80191d8:	2b01      	cmp	r3, #1
 80191da:	bf14      	ite	ne
 80191dc:	18a0      	addne	r0, r4, r2
 80191de:	1860      	addeq	r0, r4, r1
 80191e0:	bd10      	pop	{r4, pc}
 80191e2:	88c0      	ldrh	r0, [r0, #6]
 80191e4:	4420      	add	r0, r4
 80191e6:	b200      	sxth	r0, r0
 80191e8:	1a80      	subs	r0, r0, r2
 80191ea:	3801      	subs	r0, #1
 80191ec:	e7f8      	b.n	80191e0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 80191ee:	88c0      	ldrh	r0, [r0, #6]
 80191f0:	4420      	add	r0, r4
 80191f2:	b200      	sxth	r0, r0
 80191f4:	1a40      	subs	r0, r0, r1
 80191f6:	e7f8      	b.n	80191ea <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>

080191f8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80191f8:	4b01      	ldr	r3, [pc, #4]	; (8019200 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80191fa:	2200      	movs	r2, #0
 80191fc:	601a      	str	r2, [r3, #0]
 80191fe:	4770      	bx	lr
 8019200:	200567a8 	.word	0x200567a8

08019204 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8019204:	4603      	mov	r3, r0
 8019206:	b1c8      	cbz	r0, 801923c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8019208:	0c02      	lsrs	r2, r0, #16
 801920a:	0412      	lsls	r2, r2, #16
 801920c:	b9a2      	cbnz	r2, 8019238 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801920e:	0403      	lsls	r3, r0, #16
 8019210:	2010      	movs	r0, #16
 8019212:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8019216:	bf04      	itt	eq
 8019218:	021b      	lsleq	r3, r3, #8
 801921a:	3008      	addeq	r0, #8
 801921c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8019220:	bf04      	itt	eq
 8019222:	011b      	lsleq	r3, r3, #4
 8019224:	3004      	addeq	r0, #4
 8019226:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801922a:	bf04      	itt	eq
 801922c:	009b      	lsleq	r3, r3, #2
 801922e:	3002      	addeq	r0, #2
 8019230:	2b00      	cmp	r3, #0
 8019232:	db04      	blt.n	801923e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8019234:	3001      	adds	r0, #1
 8019236:	4770      	bx	lr
 8019238:	2000      	movs	r0, #0
 801923a:	e7ea      	b.n	8019212 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801923c:	2020      	movs	r0, #32
 801923e:	4770      	bx	lr

08019240 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8019240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019244:	b087      	sub	sp, #28
 8019246:	4681      	mov	r9, r0
 8019248:	4698      	mov	r8, r3
 801924a:	4610      	mov	r0, r2
 801924c:	460d      	mov	r5, r1
 801924e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8019252:	b981      	cbnz	r1, 8019276 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8019254:	b14b      	cbz	r3, 801926a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8019256:	460b      	mov	r3, r1
 8019258:	464a      	mov	r2, r9
 801925a:	4641      	mov	r1, r8
 801925c:	e9cd 4700 	strd	r4, r7, [sp]
 8019260:	f7ff ffee 	bl	8019240 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8019264:	b007      	add	sp, #28
 8019266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801926a:	f04f 33ff 	mov.w	r3, #4294967295
 801926e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8019272:	603b      	str	r3, [r7, #0]
 8019274:	e7f6      	b.n	8019264 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8019276:	fa32 fa01 	lsrs.w	sl, r2, r1
 801927a:	d107      	bne.n	801928c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801927c:	fb09 f602 	mul.w	r6, r9, r2
 8019280:	fbb6 f0f4 	udiv	r0, r6, r4
 8019284:	fb04 6610 	mls	r6, r4, r0, r6
 8019288:	603e      	str	r6, [r7, #0]
 801928a:	e7eb      	b.n	8019264 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801928c:	2601      	movs	r6, #1
 801928e:	fa09 fb01 	lsl.w	fp, r9, r1
 8019292:	408e      	lsls	r6, r1
 8019294:	fbbb f3f4 	udiv	r3, fp, r4
 8019298:	3e01      	subs	r6, #1
 801929a:	9302      	str	r3, [sp, #8]
 801929c:	fb0a f303 	mul.w	r3, sl, r3
 80192a0:	4016      	ands	r6, r2
 80192a2:	9303      	str	r3, [sp, #12]
 80192a4:	4630      	mov	r0, r6
 80192a6:	f7ff ffad 	bl	8019204 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80192aa:	464a      	mov	r2, r9
 80192ac:	460b      	mov	r3, r1
 80192ae:	4601      	mov	r1, r0
 80192b0:	4630      	mov	r0, r6
 80192b2:	e9cd 4700 	strd	r4, r7, [sp]
 80192b6:	f7ff ffc3 	bl	8019240 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80192ba:	9b02      	ldr	r3, [sp, #8]
 80192bc:	4606      	mov	r6, r0
 80192be:	eb05 0108 	add.w	r1, r5, r8
 80192c2:	fb04 bb13 	mls	fp, r4, r3, fp
 80192c6:	4658      	mov	r0, fp
 80192c8:	f7ff ff9c 	bl	8019204 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80192cc:	ab05      	add	r3, sp, #20
 80192ce:	465a      	mov	r2, fp
 80192d0:	e9cd 4300 	strd	r4, r3, [sp]
 80192d4:	4603      	mov	r3, r0
 80192d6:	4650      	mov	r0, sl
 80192d8:	f7ff ffb2 	bl	8019240 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80192dc:	6839      	ldr	r1, [r7, #0]
 80192de:	9a05      	ldr	r2, [sp, #20]
 80192e0:	9b03      	ldr	r3, [sp, #12]
 80192e2:	4411      	add	r1, r2
 80192e4:	fbb1 f2f4 	udiv	r2, r1, r4
 80192e8:	18d3      	adds	r3, r2, r3
 80192ea:	fb04 1412 	mls	r4, r4, r2, r1
 80192ee:	441e      	add	r6, r3
 80192f0:	603c      	str	r4, [r7, #0]
 80192f2:	4430      	add	r0, r6
 80192f4:	e7b6      	b.n	8019264 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

080192f6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 80192f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80192fa:	b085      	sub	sp, #20
 80192fc:	f1b0 0900 	subs.w	r9, r0, #0
 8019300:	461d      	mov	r5, r3
 8019302:	4617      	mov	r7, r2
 8019304:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019306:	bfbb      	ittet	lt
 8019308:	f1c9 0900 	rsblt	r9, r9, #0
 801930c:	f04f 36ff 	movlt.w	r6, #4294967295
 8019310:	2601      	movge	r6, #1
 8019312:	6823      	ldrlt	r3, [r4, #0]
 8019314:	bfbc      	itt	lt
 8019316:	425b      	neglt	r3, r3
 8019318:	6023      	strlt	r3, [r4, #0]
 801931a:	2a00      	cmp	r2, #0
 801931c:	da04      	bge.n	8019328 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801931e:	6823      	ldr	r3, [r4, #0]
 8019320:	4257      	negs	r7, r2
 8019322:	4276      	negs	r6, r6
 8019324:	425b      	negs	r3, r3
 8019326:	6023      	str	r3, [r4, #0]
 8019328:	2d00      	cmp	r5, #0
 801932a:	4638      	mov	r0, r7
 801932c:	bfba      	itte	lt
 801932e:	426d      	neglt	r5, r5
 8019330:	f04f 38ff 	movlt.w	r8, #4294967295
 8019334:	f04f 0801 	movge.w	r8, #1
 8019338:	f7ff ff64 	bl	8019204 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801933c:	ab03      	add	r3, sp, #12
 801933e:	463a      	mov	r2, r7
 8019340:	e9cd 5300 	strd	r5, r3, [sp]
 8019344:	4603      	mov	r3, r0
 8019346:	4648      	mov	r0, r9
 8019348:	f7ff ff7a 	bl	8019240 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801934c:	6823      	ldr	r3, [r4, #0]
 801934e:	9a03      	ldr	r2, [sp, #12]
 8019350:	4546      	cmp	r6, r8
 8019352:	441a      	add	r2, r3
 8019354:	fb92 f3f5 	sdiv	r3, r2, r5
 8019358:	4418      	add	r0, r3
 801935a:	fb05 2313 	mls	r3, r5, r3, r2
 801935e:	bf18      	it	ne
 8019360:	4240      	negne	r0, r0
 8019362:	1c72      	adds	r2, r6, #1
 8019364:	6023      	str	r3, [r4, #0]
 8019366:	d105      	bne.n	8019374 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8019368:	2b00      	cmp	r3, #0
 801936a:	f1c3 0200 	rsb	r2, r3, #0
 801936e:	db0b      	blt.n	8019388 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8019370:	6022      	str	r2, [r4, #0]
 8019372:	e006      	b.n	8019382 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8019374:	2e01      	cmp	r6, #1
 8019376:	d104      	bne.n	8019382 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8019378:	2b00      	cmp	r3, #0
 801937a:	da02      	bge.n	8019382 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801937c:	442b      	add	r3, r5
 801937e:	3801      	subs	r0, #1
 8019380:	6023      	str	r3, [r4, #0]
 8019382:	b005      	add	sp, #20
 8019384:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019388:	3801      	subs	r0, #1
 801938a:	1b52      	subs	r2, r2, r5
 801938c:	e7f0      	b.n	8019370 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08019390 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8019390:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8019394:	4c1c      	ldr	r4, [pc, #112]	; (8019408 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8019396:	4605      	mov	r5, r0
 8019398:	6807      	ldr	r7, [r0, #0]
 801939a:	69a3      	ldr	r3, [r4, #24]
 801939c:	b92b      	cbnz	r3, 80193aa <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801939e:	6840      	ldr	r0, [r0, #4]
 80193a0:	e9c5 7000 	strd	r7, r0, [r5]
 80193a4:	b004      	add	sp, #16
 80193a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193aa:	f04f 0802 	mov.w	r8, #2
 80193ae:	68a2      	ldr	r2, [r4, #8]
 80193b0:	ae04      	add	r6, sp, #16
 80193b2:	6820      	ldr	r0, [r4, #0]
 80193b4:	fb93 f1f8 	sdiv	r1, r3, r8
 80193b8:	440a      	add	r2, r1
 80193ba:	69e1      	ldr	r1, [r4, #28]
 80193bc:	f846 2d04 	str.w	r2, [r6, #-4]!
 80193c0:	463a      	mov	r2, r7
 80193c2:	9600      	str	r6, [sp, #0]
 80193c4:	f7ff ff97 	bl	80192f6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80193c8:	69a3      	ldr	r3, [r4, #24]
 80193ca:	4607      	mov	r7, r0
 80193cc:	686a      	ldr	r2, [r5, #4]
 80193ce:	6a21      	ldr	r1, [r4, #32]
 80193d0:	9600      	str	r6, [sp, #0]
 80193d2:	6860      	ldr	r0, [r4, #4]
 80193d4:	f7ff ff8f 	bl	80192f6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80193d8:	69a3      	ldr	r3, [r4, #24]
 80193da:	6962      	ldr	r2, [r4, #20]
 80193dc:	4407      	add	r7, r0
 80193de:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80193e0:	9600      	str	r6, [sp, #0]
 80193e2:	68e0      	ldr	r0, [r4, #12]
 80193e4:	fb93 f8f8 	sdiv	r8, r3, r8
 80193e8:	4442      	add	r2, r8
 80193ea:	9203      	str	r2, [sp, #12]
 80193ec:	682a      	ldr	r2, [r5, #0]
 80193ee:	f7ff ff82 	bl	80192f6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80193f2:	4680      	mov	r8, r0
 80193f4:	9600      	str	r6, [sp, #0]
 80193f6:	69a3      	ldr	r3, [r4, #24]
 80193f8:	686a      	ldr	r2, [r5, #4]
 80193fa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80193fc:	6920      	ldr	r0, [r4, #16]
 80193fe:	f7ff ff7a 	bl	80192f6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019402:	4440      	add	r0, r8
 8019404:	e7cc      	b.n	80193a0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8019406:	bf00      	nop
 8019408:	200567ac 	.word	0x200567ac

0801940c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801940c:	4b07      	ldr	r3, [pc, #28]	; (801942c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801940e:	b510      	push	{r4, lr}
 8019410:	781b      	ldrb	r3, [r3, #0]
 8019412:	2b01      	cmp	r3, #1
 8019414:	d108      	bne.n	8019428 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8019416:	4b06      	ldr	r3, [pc, #24]	; (8019430 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8019418:	880c      	ldrh	r4, [r1, #0]
 801941a:	881b      	ldrh	r3, [r3, #0]
 801941c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8019420:	3b01      	subs	r3, #1
 8019422:	1b1b      	subs	r3, r3, r4
 8019424:	8003      	strh	r3, [r0, #0]
 8019426:	800a      	strh	r2, [r1, #0]
 8019428:	bd10      	pop	{r4, pc}
 801942a:	bf00      	nop
 801942c:	20056778 	.word	0x20056778
 8019430:	2005677c 	.word	0x2005677c

08019434 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8019434:	4b0a      	ldr	r3, [pc, #40]	; (8019460 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8019436:	b510      	push	{r4, lr}
 8019438:	781b      	ldrb	r3, [r3, #0]
 801943a:	2b01      	cmp	r3, #1
 801943c:	d10e      	bne.n	801945c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801943e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8019442:	8843      	ldrh	r3, [r0, #2]
 8019444:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019448:	18ca      	adds	r2, r1, r3
 801944a:	4b06      	ldr	r3, [pc, #24]	; (8019464 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801944c:	8044      	strh	r4, [r0, #2]
 801944e:	881b      	ldrh	r3, [r3, #0]
 8019450:	1a9b      	subs	r3, r3, r2
 8019452:	8003      	strh	r3, [r0, #0]
 8019454:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019458:	8081      	strh	r1, [r0, #4]
 801945a:	80c3      	strh	r3, [r0, #6]
 801945c:	bd10      	pop	{r4, pc}
 801945e:	bf00      	nop
 8019460:	20056778 	.word	0x20056778
 8019464:	20056774 	.word	0x20056774

08019468 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8019468:	4b07      	ldr	r3, [pc, #28]	; (8019488 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801946a:	b510      	push	{r4, lr}
 801946c:	781b      	ldrb	r3, [r3, #0]
 801946e:	2b01      	cmp	r3, #1
 8019470:	d108      	bne.n	8019484 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8019472:	f9b1 3000 	ldrsh.w	r3, [r1]
 8019476:	f9b0 4000 	ldrsh.w	r4, [r0]
 801947a:	8003      	strh	r3, [r0, #0]
 801947c:	8893      	ldrh	r3, [r2, #4]
 801947e:	3b01      	subs	r3, #1
 8019480:	1b1b      	subs	r3, r3, r4
 8019482:	800b      	strh	r3, [r1, #0]
 8019484:	bd10      	pop	{r4, pc}
 8019486:	bf00      	nop
 8019488:	20056778 	.word	0x20056778

0801948c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801948c:	4b08      	ldr	r3, [pc, #32]	; (80194b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801948e:	b513      	push	{r0, r1, r4, lr}
 8019490:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019494:	2400      	movs	r4, #0
 8019496:	4b07      	ldr	r3, [pc, #28]	; (80194b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8019498:	f8ad 2004 	strh.w	r2, [sp, #4]
 801949c:	466a      	mov	r2, sp
 801949e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80194a2:	9400      	str	r4, [sp, #0]
 80194a4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80194a8:	f7ff ffde 	bl	8019468 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80194ac:	b002      	add	sp, #8
 80194ae:	bd10      	pop	{r4, pc}
 80194b0:	20056774 	.word	0x20056774
 80194b4:	20056776 	.word	0x20056776

080194b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80194b8:	4b0a      	ldr	r3, [pc, #40]	; (80194e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80194ba:	460a      	mov	r2, r1
 80194bc:	b510      	push	{r4, lr}
 80194be:	781b      	ldrb	r3, [r3, #0]
 80194c0:	2b01      	cmp	r3, #1
 80194c2:	d10d      	bne.n	80194e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80194c4:	8881      	ldrh	r1, [r0, #4]
 80194c6:	8803      	ldrh	r3, [r0, #0]
 80194c8:	440b      	add	r3, r1
 80194ca:	4601      	mov	r1, r0
 80194cc:	3b01      	subs	r3, #1
 80194ce:	f821 3b02 	strh.w	r3, [r1], #2
 80194d2:	f7ff ffc9 	bl	8019468 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80194d6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80194da:	88c2      	ldrh	r2, [r0, #6]
 80194dc:	80c3      	strh	r3, [r0, #6]
 80194de:	8082      	strh	r2, [r0, #4]
 80194e0:	bd10      	pop	{r4, pc}
 80194e2:	bf00      	nop
 80194e4:	20056778 	.word	0x20056778

080194e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80194e8:	4b09      	ldr	r3, [pc, #36]	; (8019510 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80194ea:	b507      	push	{r0, r1, r2, lr}
 80194ec:	2100      	movs	r1, #0
 80194ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 80194f2:	4b08      	ldr	r3, [pc, #32]	; (8019514 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 80194f4:	9100      	str	r1, [sp, #0]
 80194f6:	4669      	mov	r1, sp
 80194f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80194fc:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019500:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019504:	f7ff ffd8 	bl	80194b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019508:	b003      	add	sp, #12
 801950a:	f85d fb04 	ldr.w	pc, [sp], #4
 801950e:	bf00      	nop
 8019510:	20056774 	.word	0x20056774
 8019514:	20056776 	.word	0x20056776

08019518 <_ZN8touchgfx11Application13requestRedrawEv>:
 8019518:	4b06      	ldr	r3, [pc, #24]	; (8019534 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801951a:	2100      	movs	r1, #0
 801951c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019520:	4b05      	ldr	r3, [pc, #20]	; (8019538 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8019522:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8019526:	f9b3 3000 	ldrsh.w	r3, [r3]
 801952a:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801952e:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8019532:	4770      	bx	lr
 8019534:	20056774 	.word	0x20056774
 8019538:	20056776 	.word	0x20056776

0801953c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801953c:	4b03      	ldr	r3, [pc, #12]	; (801954c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801953e:	6818      	ldr	r0, [r3, #0]
 8019540:	b110      	cbz	r0, 8019548 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8019542:	6803      	ldr	r3, [r0, #0]
 8019544:	699b      	ldr	r3, [r3, #24]
 8019546:	4718      	bx	r3
 8019548:	4770      	bx	lr
 801954a:	bf00      	nop
 801954c:	200567dc 	.word	0x200567dc

08019550 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8019550:	4770      	bx	lr
	...

08019554 <_ZN8touchgfx11Application4drawEv>:
 8019554:	4b09      	ldr	r3, [pc, #36]	; (801957c <_ZN8touchgfx11Application4drawEv+0x28>)
 8019556:	b507      	push	{r0, r1, r2, lr}
 8019558:	f9b3 2000 	ldrsh.w	r2, [r3]
 801955c:	2100      	movs	r1, #0
 801955e:	4b08      	ldr	r3, [pc, #32]	; (8019580 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8019560:	9100      	str	r1, [sp, #0]
 8019562:	4669      	mov	r1, sp
 8019564:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019568:	f8ad 2004 	strh.w	r2, [sp, #4]
 801956c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019570:	6803      	ldr	r3, [r0, #0]
 8019572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019574:	4798      	blx	r3
 8019576:	b003      	add	sp, #12
 8019578:	f85d fb04 	ldr.w	pc, [sp], #4
 801957c:	20056774 	.word	0x20056774
 8019580:	20056776 	.word	0x20056776

08019584 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8019584:	4b03      	ldr	r3, [pc, #12]	; (8019594 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8019586:	6818      	ldr	r0, [r3, #0]
 8019588:	b110      	cbz	r0, 8019590 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801958a:	6803      	ldr	r3, [r0, #0]
 801958c:	69db      	ldr	r3, [r3, #28]
 801958e:	4718      	bx	r3
 8019590:	4770      	bx	lr
 8019592:	bf00      	nop
 8019594:	200567dc 	.word	0x200567dc

08019598 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8019598:	4b03      	ldr	r3, [pc, #12]	; (80195a8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801959a:	6818      	ldr	r0, [r3, #0]
 801959c:	b110      	cbz	r0, 80195a4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801959e:	6803      	ldr	r3, [r0, #0]
 80195a0:	6a1b      	ldr	r3, [r3, #32]
 80195a2:	4718      	bx	r3
 80195a4:	4770      	bx	lr
 80195a6:	bf00      	nop
 80195a8:	200567dc 	.word	0x200567dc

080195ac <_ZN8touchgfx11Application14handleKeyEventEh>:
 80195ac:	4b03      	ldr	r3, [pc, #12]	; (80195bc <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80195ae:	6818      	ldr	r0, [r3, #0]
 80195b0:	b110      	cbz	r0, 80195b8 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80195b2:	6803      	ldr	r3, [r0, #0]
 80195b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80195b6:	4718      	bx	r3
 80195b8:	4770      	bx	lr
 80195ba:	bf00      	nop
 80195bc:	200567dc 	.word	0x200567dc

080195c0 <_ZN8touchgfx11Application15handleTickEventEv>:
 80195c0:	b570      	push	{r4, r5, r6, lr}
 80195c2:	4d34      	ldr	r5, [pc, #208]	; (8019694 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 80195c4:	4604      	mov	r4, r0
 80195c6:	6828      	ldr	r0, [r5, #0]
 80195c8:	b140      	cbz	r0, 80195dc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80195ca:	7a03      	ldrb	r3, [r0, #8]
 80195cc:	b933      	cbnz	r3, 80195dc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80195ce:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 80195d2:	6803      	ldr	r3, [r0, #0]
 80195d4:	689b      	ldr	r3, [r3, #8]
 80195d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80195da:	4718      	bx	r3
 80195dc:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 80195e0:	b97b      	cbnz	r3, 8019602 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80195e2:	b170      	cbz	r0, 8019602 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80195e4:	7a03      	ldrb	r3, [r0, #8]
 80195e6:	b163      	cbz	r3, 8019602 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80195e8:	4b2b      	ldr	r3, [pc, #172]	; (8019698 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 80195ea:	6818      	ldr	r0, [r3, #0]
 80195ec:	b110      	cbz	r0, 80195f4 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 80195ee:	6803      	ldr	r3, [r0, #0]
 80195f0:	691b      	ldr	r3, [r3, #16]
 80195f2:	4798      	blx	r3
 80195f4:	6828      	ldr	r0, [r5, #0]
 80195f6:	6803      	ldr	r3, [r0, #0]
 80195f8:	68db      	ldr	r3, [r3, #12]
 80195fa:	4798      	blx	r3
 80195fc:	2301      	movs	r3, #1
 80195fe:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8019602:	2500      	movs	r5, #0
 8019604:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8019608:	42a8      	cmp	r0, r5
 801960a:	dd0c      	ble.n	8019626 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801960c:	1963      	adds	r3, r4, r5
 801960e:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8019612:	b132      	cbz	r2, 8019622 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8019614:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8019618:	4413      	add	r3, r2
 801961a:	6858      	ldr	r0, [r3, #4]
 801961c:	6803      	ldr	r3, [r0, #0]
 801961e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019620:	4798      	blx	r3
 8019622:	3501      	adds	r5, #1
 8019624:	e7ee      	b.n	8019604 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8019626:	2300      	movs	r3, #0
 8019628:	461a      	mov	r2, r3
 801962a:	4298      	cmp	r0, r3
 801962c:	d114      	bne.n	8019658 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 801962e:	1d25      	adds	r5, r4, #4
 8019630:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 8019634:	1e48      	subs	r0, r1, #1
 8019636:	b280      	uxth	r0, r0
 8019638:	4291      	cmp	r1, r2
 801963a:	dd24      	ble.n	8019686 <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 801963c:	4288      	cmp	r0, r1
 801963e:	d2fb      	bcs.n	8019638 <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 8019640:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 8019644:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8019648:	3304      	adds	r3, #4
 801964a:	428b      	cmp	r3, r1
 801964c:	d018      	beq.n	8019680 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801964e:	f853 6f04 	ldr.w	r6, [r3, #4]!
 8019652:	f843 6c04 	str.w	r6, [r3, #-4]
 8019656:	e7f8      	b.n	801964a <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 8019658:	18e1      	adds	r1, r4, r3
 801965a:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801965e:	b16d      	cbz	r5, 801967c <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 8019660:	429a      	cmp	r2, r3
 8019662:	d00a      	beq.n	801967a <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 8019664:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8019668:	4431      	add	r1, r6
 801966a:	684e      	ldr	r6, [r1, #4]
 801966c:	b291      	uxth	r1, r2
 801966e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8019672:	604e      	str	r6, [r1, #4]
 8019674:	18a1      	adds	r1, r4, r2
 8019676:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801967a:	3201      	adds	r2, #1
 801967c:	3301      	adds	r3, #1
 801967e:	e7d4      	b.n	801962a <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8019680:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 8019684:	e7d4      	b.n	8019630 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 8019686:	4b04      	ldr	r3, [pc, #16]	; (8019698 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 8019688:	6818      	ldr	r0, [r3, #0]
 801968a:	b110      	cbz	r0, 8019692 <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 801968c:	6803      	ldr	r3, [r0, #0]
 801968e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019690:	e7a1      	b.n	80195d6 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8019692:	bd70      	pop	{r4, r5, r6, pc}
 8019694:	200567e0 	.word	0x200567e0
 8019698:	200567dc 	.word	0x200567dc

0801969c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801969c:	b570      	push	{r4, r5, r6, lr}
 801969e:	4606      	mov	r6, r0
 80196a0:	460c      	mov	r4, r1
 80196a2:	b929      	cbnz	r1, 80196b0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 80196a4:	4b0c      	ldr	r3, [pc, #48]	; (80196d8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 80196a6:	2167      	movs	r1, #103	; 0x67
 80196a8:	4a0c      	ldr	r2, [pc, #48]	; (80196dc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 80196aa:	480d      	ldr	r0, [pc, #52]	; (80196e0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 80196ac:	f00d f988 	bl	80269c0 <__assert_func>
 80196b0:	2300      	movs	r3, #0
 80196b2:	4d0c      	ldr	r5, [pc, #48]	; (80196e4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 80196b4:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80196b8:	6828      	ldr	r0, [r5, #0]
 80196ba:	b110      	cbz	r0, 80196c2 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 80196bc:	6803      	ldr	r3, [r0, #0]
 80196be:	695b      	ldr	r3, [r3, #20]
 80196c0:	4798      	blx	r3
 80196c2:	602c      	str	r4, [r5, #0]
 80196c4:	4620      	mov	r0, r4
 80196c6:	6823      	ldr	r3, [r4, #0]
 80196c8:	68db      	ldr	r3, [r3, #12]
 80196ca:	4798      	blx	r3
 80196cc:	6833      	ldr	r3, [r6, #0]
 80196ce:	4630      	mov	r0, r6
 80196d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80196d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80196d6:	4718      	bx	r3
 80196d8:	0802dcb8 	.word	0x0802dcb8
 80196dc:	0802dd88 	.word	0x0802dd88
 80196e0:	0802dcc2 	.word	0x0802dcc2
 80196e4:	200567dc 	.word	0x200567dc

080196e8 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80196e8:	b570      	push	{r4, r5, r6, lr}
 80196ea:	f9b1 4000 	ldrsh.w	r4, [r1]
 80196ee:	f9b0 5000 	ldrsh.w	r5, [r0]
 80196f2:	42ac      	cmp	r4, r5
 80196f4:	db18      	blt.n	8019728 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80196f6:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80196fa:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80196fe:	429a      	cmp	r2, r3
 8019700:	db12      	blt.n	8019728 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8019702:	8886      	ldrh	r6, [r0, #4]
 8019704:	4435      	add	r5, r6
 8019706:	888e      	ldrh	r6, [r1, #4]
 8019708:	4434      	add	r4, r6
 801970a:	b22d      	sxth	r5, r5
 801970c:	b224      	sxth	r4, r4
 801970e:	42a5      	cmp	r5, r4
 8019710:	db0a      	blt.n	8019728 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8019712:	88c0      	ldrh	r0, [r0, #6]
 8019714:	4418      	add	r0, r3
 8019716:	88cb      	ldrh	r3, [r1, #6]
 8019718:	441a      	add	r2, r3
 801971a:	b200      	sxth	r0, r0
 801971c:	b212      	sxth	r2, r2
 801971e:	4290      	cmp	r0, r2
 8019720:	bfb4      	ite	lt
 8019722:	2000      	movlt	r0, #0
 8019724:	2001      	movge	r0, #1
 8019726:	bd70      	pop	{r4, r5, r6, pc}
 8019728:	2000      	movs	r0, #0
 801972a:	e7fc      	b.n	8019726 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801972c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801972c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801972e:	4604      	mov	r4, r0
 8019730:	4608      	mov	r0, r1
 8019732:	460d      	mov	r5, r1
 8019734:	f7fc fa25 	bl	8015b82 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019738:	b978      	cbnz	r0, 801975a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801973a:	4620      	mov	r0, r4
 801973c:	f7fc fa21 	bl	8015b82 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019740:	f9b5 6000 	ldrsh.w	r6, [r5]
 8019744:	b150      	cbz	r0, 801975c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8019746:	8026      	strh	r6, [r4, #0]
 8019748:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801974c:	8063      	strh	r3, [r4, #2]
 801974e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8019752:	80a3      	strh	r3, [r4, #4]
 8019754:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8019758:	80e3      	strh	r3, [r4, #6]
 801975a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801975c:	f9b4 1000 	ldrsh.w	r1, [r4]
 8019760:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8019764:	42b1      	cmp	r1, r6
 8019766:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801976a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801976e:	460f      	mov	r7, r1
 8019770:	88ed      	ldrh	r5, [r5, #6]
 8019772:	bfa8      	it	ge
 8019774:	4637      	movge	r7, r6
 8019776:	4293      	cmp	r3, r2
 8019778:	4618      	mov	r0, r3
 801977a:	4466      	add	r6, ip
 801977c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8019780:	bfa8      	it	ge
 8019782:	4610      	movge	r0, r2
 8019784:	442a      	add	r2, r5
 8019786:	88e5      	ldrh	r5, [r4, #6]
 8019788:	4461      	add	r1, ip
 801978a:	b236      	sxth	r6, r6
 801978c:	8027      	strh	r7, [r4, #0]
 801978e:	442b      	add	r3, r5
 8019790:	b209      	sxth	r1, r1
 8019792:	b212      	sxth	r2, r2
 8019794:	8060      	strh	r0, [r4, #2]
 8019796:	b21b      	sxth	r3, r3
 8019798:	428e      	cmp	r6, r1
 801979a:	bfac      	ite	ge
 801979c:	ebc7 0106 	rsbge	r1, r7, r6
 80197a0:	ebc7 0101 	rsblt	r1, r7, r1
 80197a4:	429a      	cmp	r2, r3
 80197a6:	bfac      	ite	ge
 80197a8:	ebc0 0202 	rsbge	r2, r0, r2
 80197ac:	ebc0 0203 	rsblt	r2, r0, r3
 80197b0:	80a1      	strh	r1, [r4, #4]
 80197b2:	80e2      	strh	r2, [r4, #6]
 80197b4:	e7d1      	b.n	801975a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

080197b8 <_ZN8touchgfx11Application11getInstanceEv>:
 80197b8:	4b01      	ldr	r3, [pc, #4]	; (80197c0 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 80197ba:	6818      	ldr	r0, [r3, #0]
 80197bc:	4770      	bx	lr
 80197be:	bf00      	nop
 80197c0:	200567ec 	.word	0x200567ec

080197c4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 80197c4:	2300      	movs	r3, #0
 80197c6:	f100 0288 	add.w	r2, r0, #136	; 0x88
 80197ca:	30a8      	adds	r0, #168	; 0xa8
 80197cc:	f820 3c24 	strh.w	r3, [r0, #-36]
 80197d0:	f802 3b01 	strb.w	r3, [r2], #1
 80197d4:	4282      	cmp	r2, r0
 80197d6:	d1fb      	bne.n	80197d0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 80197d8:	4770      	bx	lr

080197da <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80197da:	4603      	mov	r3, r0
 80197dc:	f100 0140 	add.w	r1, r0, #64	; 0x40
 80197e0:	2200      	movs	r2, #0
 80197e2:	801a      	strh	r2, [r3, #0]
 80197e4:	3308      	adds	r3, #8
 80197e6:	f823 2c06 	strh.w	r2, [r3, #-6]
 80197ea:	f823 2c04 	strh.w	r2, [r3, #-4]
 80197ee:	f823 2c02 	strh.w	r2, [r3, #-2]
 80197f2:	428b      	cmp	r3, r1
 80197f4:	d1f5      	bne.n	80197e2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80197f6:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80197fa:	4770      	bx	lr

080197fc <_ZN8touchgfx11ApplicationC1Ev>:
 80197fc:	b570      	push	{r4, r5, r6, lr}
 80197fe:	4b1a      	ldr	r3, [pc, #104]	; (8019868 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8019800:	2500      	movs	r5, #0
 8019802:	4604      	mov	r4, r0
 8019804:	30a8      	adds	r0, #168	; 0xa8
 8019806:	f840 3ca8 	str.w	r3, [r0, #-168]
 801980a:	f820 5c24 	strh.w	r5, [r0, #-36]
 801980e:	f7ff ffe4 	bl	80197da <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019812:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8019816:	f7ff ffe0 	bl	80197da <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801981a:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801981e:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8019822:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8019826:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801982a:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801982e:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 8019832:	490e      	ldr	r1, [pc, #56]	; (801986c <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8019834:	480e      	ldr	r0, [pc, #56]	; (8019870 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8019836:	f00b fa69 	bl	8024d0c <CRC_Lock>
 801983a:	4e0e      	ldr	r6, [pc, #56]	; (8019874 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801983c:	4b0e      	ldr	r3, [pc, #56]	; (8019878 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801983e:	b158      	cbz	r0, 8019858 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 8019840:	801d      	strh	r5, [r3, #0]
 8019842:	2300      	movs	r3, #0
 8019844:	4a0d      	ldr	r2, [pc, #52]	; (801987c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8019846:	4620      	mov	r0, r4
 8019848:	6013      	str	r3, [r2, #0]
 801984a:	4a0d      	ldr	r2, [pc, #52]	; (8019880 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801984c:	6033      	str	r3, [r6, #0]
 801984e:	6013      	str	r3, [r2, #0]
 8019850:	f7ff ffb8 	bl	80197c4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8019854:	4620      	mov	r0, r4
 8019856:	bd70      	pop	{r4, r5, r6, pc}
 8019858:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801985c:	2002      	movs	r0, #2
 801985e:	801a      	strh	r2, [r3, #0]
 8019860:	6030      	str	r0, [r6, #0]
 8019862:	f001 fb41 	bl	801aee8 <_ZN8touchgfx6Screen4drawEv>
 8019866:	e7ec      	b.n	8019842 <_ZN8touchgfx11ApplicationC1Ev+0x46>
 8019868:	0802dd4c 	.word	0x0802dd4c
 801986c:	b5e8b5cd 	.word	0xb5e8b5cd
 8019870:	f407a5c2 	.word	0xf407a5c2
 8019874:	200567dc 	.word	0x200567dc
 8019878:	20000024 	.word	0x20000024
 801987c:	200567ec 	.word	0x200567ec
 8019880:	200567e0 	.word	0x200567e0

08019884 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8019884:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8019888:	428b      	cmp	r3, r1
 801988a:	b510      	push	{r4, lr}
 801988c:	d90e      	bls.n	80198ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 801988e:	3b01      	subs	r3, #1
 8019890:	b29b      	uxth	r3, r3
 8019892:	428b      	cmp	r3, r1
 8019894:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8019898:	d908      	bls.n	80198ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 801989a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801989e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 80198a2:	681a      	ldr	r2, [r3, #0]
 80198a4:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 80198a8:	685a      	ldr	r2, [r3, #4]
 80198aa:	6062      	str	r2, [r4, #4]
 80198ac:	bd10      	pop	{r4, pc}
	...

080198b0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 80198b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80198b2:	466b      	mov	r3, sp
 80198b4:	4604      	mov	r4, r0
 80198b6:	e883 0006 	stmia.w	r3, {r1, r2}
 80198ba:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 80198be:	2a07      	cmp	r2, #7
 80198c0:	d906      	bls.n	80198d0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 80198c2:	4b09      	ldr	r3, [pc, #36]	; (80198e8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 80198c4:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80198c8:	4a08      	ldr	r2, [pc, #32]	; (80198ec <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 80198ca:	4809      	ldr	r0, [pc, #36]	; (80198f0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 80198cc:	f00d f878 	bl	80269c0 <__assert_func>
 80198d0:	1c51      	adds	r1, r2, #1
 80198d2:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 80198d6:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80198da:	cb03      	ldmia	r3!, {r0, r1}
 80198dc:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 80198e0:	6069      	str	r1, [r5, #4]
 80198e2:	b003      	add	sp, #12
 80198e4:	bd30      	pop	{r4, r5, pc}
 80198e6:	bf00      	nop
 80198e8:	0802dcec 	.word	0x0802dcec
 80198ec:	0802ddcc 	.word	0x0802ddcc
 80198f0:	0802dd1b 	.word	0x0802dd1b

080198f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 80198f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198f8:	b08d      	sub	sp, #52	; 0x34
 80198fa:	4683      	mov	fp, r0
 80198fc:	ac08      	add	r4, sp, #32
 80198fe:	4620      	mov	r0, r4
 8019900:	e884 0006 	stmia.w	r4, {r1, r2}
 8019904:	f7fc f93d 	bl	8015b82 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019908:	2800      	cmp	r0, #0
 801990a:	d16a      	bne.n	80199e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801990c:	9402      	str	r4, [sp, #8]
 801990e:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8019912:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8019916:	2400      	movs	r4, #0
 8019918:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801991c:	9301      	str	r3, [sp, #4]
 801991e:	36a0      	adds	r6, #160	; 0xa0
 8019920:	42a5      	cmp	r5, r4
 8019922:	d00d      	beq.n	8019940 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 8019924:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 8019928:	9802      	ldr	r0, [sp, #8]
 801992a:	f7ff fedd 	bl	80196e8 <_ZNK8touchgfx4Rect8includesERKS0_>
 801992e:	b128      	cbz	r0, 801993c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 8019930:	1e69      	subs	r1, r5, #1
 8019932:	9801      	ldr	r0, [sp, #4]
 8019934:	1b09      	subs	r1, r1, r4
 8019936:	b289      	uxth	r1, r1
 8019938:	f7ff ffa4 	bl	8019884 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801993c:	3401      	adds	r4, #1
 801993e:	e7ef      	b.n	8019920 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019940:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8019944:	1e7b      	subs	r3, r7, #1
 8019946:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801994a:	9703      	str	r7, [sp, #12]
 801994c:	9300      	str	r3, [sp, #0]
 801994e:	2400      	movs	r4, #0
 8019950:	4655      	mov	r5, sl
 8019952:	9704      	str	r7, [sp, #16]
 8019954:	4626      	mov	r6, r4
 8019956:	9b04      	ldr	r3, [sp, #16]
 8019958:	2b00      	cmp	r3, #0
 801995a:	d078      	beq.n	8019a4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 801995c:	9902      	ldr	r1, [sp, #8]
 801995e:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8019962:	f7fd fad7 	bl	8016f14 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019966:	b360      	cbz	r0, 80199c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 8019968:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801996c:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 8019970:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 8019974:	45e6      	cmp	lr, ip
 8019976:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801997a:	db35      	blt.n	80199e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801997c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8019980:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8019984:	4472      	add	r2, lr
 8019986:	4463      	add	r3, ip
 8019988:	b212      	sxth	r2, r2
 801998a:	b21b      	sxth	r3, r3
 801998c:	429a      	cmp	r2, r3
 801998e:	dc2b      	bgt.n	80199e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 8019990:	fa1f f288 	uxth.w	r2, r8
 8019994:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8019998:	45c1      	cmp	r9, r8
 801999a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801999e:	4413      	add	r3, r2
 80199a0:	fa1f fc89 	uxth.w	ip, r9
 80199a4:	b29b      	uxth	r3, r3
 80199a6:	fa0f fe83 	sxth.w	lr, r3
 80199aa:	db0f      	blt.n	80199cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 80199ac:	eba3 030c 	sub.w	r3, r3, ip
 80199b0:	1ac9      	subs	r1, r1, r3
 80199b2:	b209      	sxth	r1, r1
 80199b4:	2900      	cmp	r1, #0
 80199b6:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 80199ba:	dd12      	ble.n	80199e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 80199bc:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 80199c0:	4604      	mov	r4, r0
 80199c2:	9b04      	ldr	r3, [sp, #16]
 80199c4:	3d08      	subs	r5, #8
 80199c6:	3b01      	subs	r3, #1
 80199c8:	9304      	str	r3, [sp, #16]
 80199ca:	e7c4      	b.n	8019956 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 80199cc:	4461      	add	r1, ip
 80199ce:	b209      	sxth	r1, r1
 80199d0:	4571      	cmp	r1, lr
 80199d2:	dc3a      	bgt.n	8019a4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 80199d4:	eba2 020c 	sub.w	r2, r2, ip
 80199d8:	b212      	sxth	r2, r2
 80199da:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 80199de:	2a00      	cmp	r2, #0
 80199e0:	dcee      	bgt.n	80199c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 80199e2:	b00d      	add	sp, #52	; 0x34
 80199e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199e8:	45c1      	cmp	r9, r8
 80199ea:	db2e      	blt.n	8019a4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 80199ec:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80199f0:	4499      	add	r9, r3
 80199f2:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 80199f6:	4498      	add	r8, r3
 80199f8:	fa0f f989 	sxth.w	r9, r9
 80199fc:	fa0f f888 	sxth.w	r8, r8
 8019a00:	45c1      	cmp	r9, r8
 8019a02:	dc22      	bgt.n	8019a4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8019a04:	fa1f f28c 	uxth.w	r2, ip
 8019a08:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8019a0c:	45e6      	cmp	lr, ip
 8019a0e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8019a12:	4413      	add	r3, r2
 8019a14:	fa1f f88e 	uxth.w	r8, lr
 8019a18:	b29b      	uxth	r3, r3
 8019a1a:	fa0f f983 	sxth.w	r9, r3
 8019a1e:	db0a      	blt.n	8019a36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 8019a20:	eba3 0308 	sub.w	r3, r3, r8
 8019a24:	1ac9      	subs	r1, r1, r3
 8019a26:	b209      	sxth	r1, r1
 8019a28:	2900      	cmp	r1, #0
 8019a2a:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8019a2e:	ddd8      	ble.n	80199e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8019a30:	f8ad 9020 	strh.w	r9, [sp, #32]
 8019a34:	e7c4      	b.n	80199c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 8019a36:	4441      	add	r1, r8
 8019a38:	b209      	sxth	r1, r1
 8019a3a:	4549      	cmp	r1, r9
 8019a3c:	dc05      	bgt.n	8019a4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8019a3e:	eba2 0208 	sub.w	r2, r2, r8
 8019a42:	b212      	sxth	r2, r2
 8019a44:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8019a48:	e7c9      	b.n	80199de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8019a4a:	4606      	mov	r6, r0
 8019a4c:	e7b9      	b.n	80199c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 8019a4e:	2c00      	cmp	r4, #0
 8019a50:	f47f af7d 	bne.w	801994e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 8019a54:	2e00      	cmp	r6, #0
 8019a56:	f000 81dc 	beq.w	8019e12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8019a5a:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 8019a5e:	4655      	mov	r5, sl
 8019a60:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8019a64:	b2b9      	uxth	r1, r7
 8019a66:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8019a6a:	b2b3      	uxth	r3, r6
 8019a6c:	9104      	str	r1, [sp, #16]
 8019a6e:	9804      	ldr	r0, [sp, #16]
 8019a70:	441a      	add	r2, r3
 8019a72:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8019a76:	b292      	uxth	r2, r2
 8019a78:	4401      	add	r1, r0
 8019a7a:	fa0f f882 	sxth.w	r8, r2
 8019a7e:	b289      	uxth	r1, r1
 8019a80:	9105      	str	r1, [sp, #20]
 8019a82:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 8019a86:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8019a8a:	9b03      	ldr	r3, [sp, #12]
 8019a8c:	2b00      	cmp	r3, #0
 8019a8e:	d054      	beq.n	8019b3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8019a90:	9902      	ldr	r1, [sp, #8]
 8019a92:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8019a96:	f7fd fa3d 	bl	8016f14 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019a9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019a9e:	b1d8      	cbz	r0, 8019ad8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8019aa0:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 8019aa4:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 8019aa8:	4576      	cmp	r6, lr
 8019aaa:	dc26      	bgt.n	8019afa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8019aac:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 8019ab0:	44f4      	add	ip, lr
 8019ab2:	fa0f fc8c 	sxth.w	ip, ip
 8019ab6:	45e0      	cmp	r8, ip
 8019ab8:	db1f      	blt.n	8019afa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8019aba:	428f      	cmp	r7, r1
 8019abc:	fa1f fc81 	uxth.w	ip, r1
 8019ac0:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8019ac4:	dc0f      	bgt.n	8019ae6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8019ac6:	9805      	ldr	r0, [sp, #20]
 8019ac8:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 8019acc:	eba0 0c0c 	sub.w	ip, r0, ip
 8019ad0:	eba1 010c 	sub.w	r1, r1, ip
 8019ad4:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8019ad8:	4620      	mov	r0, r4
 8019ada:	9903      	ldr	r1, [sp, #12]
 8019adc:	3d08      	subs	r5, #8
 8019ade:	4604      	mov	r4, r0
 8019ae0:	3901      	subs	r1, #1
 8019ae2:	9103      	str	r1, [sp, #12]
 8019ae4:	e7cf      	b.n	8019a86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 8019ae6:	4461      	add	r1, ip
 8019ae8:	b209      	sxth	r1, r1
 8019aea:	4549      	cmp	r1, r9
 8019aec:	dcf5      	bgt.n	8019ada <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8019aee:	9904      	ldr	r1, [sp, #16]
 8019af0:	eba1 0c0c 	sub.w	ip, r1, ip
 8019af4:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8019af8:	e7ee      	b.n	8019ad8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8019afa:	428f      	cmp	r7, r1
 8019afc:	dced      	bgt.n	8019ada <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8019afe:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 8019b02:	4461      	add	r1, ip
 8019b04:	b209      	sxth	r1, r1
 8019b06:	4589      	cmp	r9, r1
 8019b08:	dbe7      	blt.n	8019ada <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8019b0a:	4576      	cmp	r6, lr
 8019b0c:	fa1f fc8e 	uxth.w	ip, lr
 8019b10:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8019b14:	dc08      	bgt.n	8019b28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 8019b16:	eba2 0c0c 	sub.w	ip, r2, ip
 8019b1a:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 8019b1e:	eba1 010c 	sub.w	r1, r1, ip
 8019b22:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8019b26:	e7d7      	b.n	8019ad8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8019b28:	4461      	add	r1, ip
 8019b2a:	b209      	sxth	r1, r1
 8019b2c:	4588      	cmp	r8, r1
 8019b2e:	dbd4      	blt.n	8019ada <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8019b30:	eba3 0c0c 	sub.w	ip, r3, ip
 8019b34:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 8019b38:	e7ce      	b.n	8019ad8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8019b3a:	2c00      	cmp	r4, #0
 8019b3c:	f000 8169 	beq.w	8019e12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8019b40:	9b00      	ldr	r3, [sp, #0]
 8019b42:	3301      	adds	r3, #1
 8019b44:	f000 8165 	beq.w	8019e12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8019b48:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 8019b4c:	9802      	ldr	r0, [sp, #8]
 8019b4e:	4621      	mov	r1, r4
 8019b50:	f7ff fdca 	bl	80196e8 <_ZNK8touchgfx4Rect8includesERKS0_>
 8019b54:	b120      	cbz	r0, 8019b60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 8019b56:	f8bd 1000 	ldrh.w	r1, [sp]
 8019b5a:	9801      	ldr	r0, [sp, #4]
 8019b5c:	f7ff fe92 	bl	8019884 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019b60:	9902      	ldr	r1, [sp, #8]
 8019b62:	4620      	mov	r0, r4
 8019b64:	f7fd f9d6 	bl	8016f14 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019b68:	2800      	cmp	r0, #0
 8019b6a:	f000 809b 	beq.w	8019ca4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 8019b6e:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8019b72:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 8019b76:	fa1f f288 	uxth.w	r2, r8
 8019b7a:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 8019b7e:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 8019b82:	19d5      	adds	r5, r2, r7
 8019b84:	b2a1      	uxth	r1, r4
 8019b86:	45a0      	cmp	r8, r4
 8019b88:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8019b8c:	fa1f f985 	uxth.w	r9, r5
 8019b90:	440b      	add	r3, r1
 8019b92:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 8019b96:	fa0f f589 	sxth.w	r5, r9
 8019b9a:	b29b      	uxth	r3, r3
 8019b9c:	9503      	str	r5, [sp, #12]
 8019b9e:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8019ba2:	9507      	str	r5, [sp, #28]
 8019ba4:	f340 809d 	ble.w	8019ce2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8019ba8:	1a52      	subs	r2, r2, r1
 8019baa:	4584      	cmp	ip, r0
 8019bac:	fa0f fe83 	sxth.w	lr, r3
 8019bb0:	b292      	uxth	r2, r2
 8019bb2:	b215      	sxth	r5, r2
 8019bb4:	dd2f      	ble.n	8019c16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 8019bb6:	9e00      	ldr	r6, [sp, #0]
 8019bb8:	fa1f fc8c 	uxth.w	ip, ip
 8019bbc:	b280      	uxth	r0, r0
 8019bbe:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8019bc2:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 8019bc6:	9e03      	ldr	r6, [sp, #12]
 8019bc8:	ebac 0300 	sub.w	r3, ip, r0
 8019bcc:	448c      	add	ip, r1
 8019bce:	eba6 060e 	sub.w	r6, r6, lr
 8019bd2:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 8019bd6:	b29b      	uxth	r3, r3
 8019bd8:	4470      	add	r0, lr
 8019bda:	fa0f fc8c 	sxth.w	ip, ip
 8019bde:	b21c      	sxth	r4, r3
 8019be0:	b200      	sxth	r0, r0
 8019be2:	4366      	muls	r6, r4
 8019be4:	ebac 0000 	sub.w	r0, ip, r0
 8019be8:	4368      	muls	r0, r5
 8019bea:	4286      	cmp	r6, r0
 8019bec:	db09      	blt.n	8019c02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 8019bee:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 8019bf2:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 8019bf6:	4417      	add	r7, r2
 8019bf8:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019bfc:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8019c00:	e685      	b.n	801990e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8019c02:	440b      	add	r3, r1
 8019c04:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 8019c08:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8019c0c:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 8019c10:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8019c14:	e67b      	b.n	801990e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8019c16:	9e03      	ldr	r6, [sp, #12]
 8019c18:	45b6      	cmp	lr, r6
 8019c1a:	da28      	bge.n	8019c6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 8019c1c:	9b00      	ldr	r3, [sp, #0]
 8019c1e:	eba6 060e 	sub.w	r6, r6, lr
 8019c22:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 8019c26:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 8019c2a:	eb04 030c 	add.w	r3, r4, ip
 8019c2e:	fa1f f883 	uxth.w	r8, r3
 8019c32:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 8019c36:	4403      	add	r3, r0
 8019c38:	fa0f f988 	sxth.w	r9, r8
 8019c3c:	eba0 000c 	sub.w	r0, r0, ip
 8019c40:	eba3 0308 	sub.w	r3, r3, r8
 8019c44:	4368      	muls	r0, r5
 8019c46:	b29b      	uxth	r3, r3
 8019c48:	fa0f f883 	sxth.w	r8, r3
 8019c4c:	fb08 f606 	mul.w	r6, r8, r6
 8019c50:	42b0      	cmp	r0, r6
 8019c52:	dc06      	bgt.n	8019c62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 8019c54:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 8019c58:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 8019c5c:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 8019c60:	e7c9      	b.n	8019bf6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 8019c62:	4423      	add	r3, r4
 8019c64:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 8019c68:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8019c6c:	e64f      	b.n	801990e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8019c6e:	eba3 0309 	sub.w	r3, r3, r9
 8019c72:	9807      	ldr	r0, [sp, #28]
 8019c74:	b29b      	uxth	r3, r3
 8019c76:	2806      	cmp	r0, #6
 8019c78:	fa0f fc83 	sxth.w	ip, r3
 8019c7c:	d818      	bhi.n	8019cb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 8019c7e:	4652      	mov	r2, sl
 8019c80:	ab0a      	add	r3, sp, #40	; 0x28
 8019c82:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 8019c86:	6851      	ldr	r1, [r2, #4]
 8019c88:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 8019c8c:	c303      	stmia	r3!, {r0, r1}
 8019c8e:	9b03      	ldr	r3, [sp, #12]
 8019c90:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 8019c94:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 8019c98:	ab0a      	add	r3, sp, #40	; 0x28
 8019c9a:	9801      	ldr	r0, [sp, #4]
 8019c9c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8019ca0:	f7ff fe06 	bl	80198b0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8019ca4:	9b00      	ldr	r3, [sp, #0]
 8019ca6:	f1aa 0a08 	sub.w	sl, sl, #8
 8019caa:	3b01      	subs	r3, #1
 8019cac:	9300      	str	r3, [sp, #0]
 8019cae:	e747      	b.n	8019b40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8019cb0:	9800      	ldr	r0, [sp, #0]
 8019cb2:	45ac      	cmp	ip, r5
 8019cb4:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8019cb8:	db0c      	blt.n	8019cd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 8019cba:	4417      	add	r7, r2
 8019cbc:	4458      	add	r0, fp
 8019cbe:	f8ad 4020 	strh.w	r4, [sp, #32]
 8019cc2:	b2bf      	uxth	r7, r7
 8019cc4:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 8019cc8:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8019ccc:	440f      	add	r7, r1
 8019cce:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 8019cd2:	e61c      	b.n	801990e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8019cd4:	4458      	add	r0, fp
 8019cd6:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 8019cda:	443b      	add	r3, r7
 8019cdc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8019ce0:	e615      	b.n	801990e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8019ce2:	fa1f f18c 	uxth.w	r1, ip
 8019ce6:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 8019cea:	b282      	uxth	r2, r0
 8019cec:	4584      	cmp	ip, r0
 8019cee:	eb01 0e05 	add.w	lr, r1, r5
 8019cf2:	9204      	str	r2, [sp, #16]
 8019cf4:	fa1f fe8e 	uxth.w	lr, lr
 8019cf8:	9e04      	ldr	r6, [sp, #16]
 8019cfa:	fa0f f28e 	sxth.w	r2, lr
 8019cfe:	9205      	str	r2, [sp, #20]
 8019d00:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 8019d04:	4432      	add	r2, r6
 8019d06:	b292      	uxth	r2, r2
 8019d08:	9206      	str	r2, [sp, #24]
 8019d0a:	da26      	bge.n	8019d5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 8019d0c:	eba3 0309 	sub.w	r3, r3, r9
 8019d10:	eba2 020e 	sub.w	r2, r2, lr
 8019d14:	eba0 000c 	sub.w	r0, r0, ip
 8019d18:	eba4 0408 	sub.w	r4, r4, r8
 8019d1c:	b29b      	uxth	r3, r3
 8019d1e:	b292      	uxth	r2, r2
 8019d20:	fa0f fa83 	sxth.w	sl, r3
 8019d24:	b211      	sxth	r1, r2
 8019d26:	fb0a f000 	mul.w	r0, sl, r0
 8019d2a:	434c      	muls	r4, r1
 8019d2c:	42a0      	cmp	r0, r4
 8019d2e:	9800      	ldr	r0, [sp, #0]
 8019d30:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8019d34:	dc06      	bgt.n	8019d44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 8019d36:	4458      	add	r0, fp
 8019d38:	9a05      	ldr	r2, [sp, #20]
 8019d3a:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 8019d3e:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 8019d42:	e7ca      	b.n	8019cda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 8019d44:	eb0b 0300 	add.w	r3, fp, r0
 8019d48:	9903      	ldr	r1, [sp, #12]
 8019d4a:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 8019d4e:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 8019d52:	442a      	add	r2, r5
 8019d54:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8019d58:	e5d9      	b.n	801990e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8019d5a:	9e04      	ldr	r6, [sp, #16]
 8019d5c:	9a03      	ldr	r2, [sp, #12]
 8019d5e:	1b89      	subs	r1, r1, r6
 8019d60:	b21e      	sxth	r6, r3
 8019d62:	b289      	uxth	r1, r1
 8019d64:	4296      	cmp	r6, r2
 8019d66:	fa0f fc81 	sxth.w	ip, r1
 8019d6a:	dd25      	ble.n	8019db8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 8019d6c:	eba3 0309 	sub.w	r3, r3, r9
 8019d70:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8019d74:	9e05      	ldr	r6, [sp, #20]
 8019d76:	eba4 0408 	sub.w	r4, r4, r8
 8019d7a:	b29b      	uxth	r3, r3
 8019d7c:	eba6 0902 	sub.w	r9, r6, r2
 8019d80:	fb0c f404 	mul.w	r4, ip, r4
 8019d84:	b218      	sxth	r0, r3
 8019d86:	9a00      	ldr	r2, [sp, #0]
 8019d88:	fb00 f909 	mul.w	r9, r0, r9
 8019d8c:	00d2      	lsls	r2, r2, #3
 8019d8e:	454c      	cmp	r4, r9
 8019d90:	db03      	blt.n	8019d9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 8019d92:	445a      	add	r2, fp
 8019d94:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 8019d98:	e79f      	b.n	8019cda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 8019d9a:	eb0b 0302 	add.w	r3, fp, r2
 8019d9e:	9a03      	ldr	r2, [sp, #12]
 8019da0:	4429      	add	r1, r5
 8019da2:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8019da6:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 8019daa:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8019dae:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8019db2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8019db6:	e5aa      	b.n	801990e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8019db8:	9b06      	ldr	r3, [sp, #24]
 8019dba:	9c07      	ldr	r4, [sp, #28]
 8019dbc:	eba3 020e 	sub.w	r2, r3, lr
 8019dc0:	2c06      	cmp	r4, #6
 8019dc2:	b292      	uxth	r2, r2
 8019dc4:	b213      	sxth	r3, r2
 8019dc6:	d80d      	bhi.n	8019de4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 8019dc8:	4651      	mov	r1, sl
 8019dca:	aa0a      	add	r2, sp, #40	; 0x28
 8019dcc:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 8019dd0:	6849      	ldr	r1, [r1, #4]
 8019dd2:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 8019dd6:	9b05      	ldr	r3, [sp, #20]
 8019dd8:	c203      	stmia	r2!, {r0, r1}
 8019dda:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 8019dde:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 8019de2:	e759      	b.n	8019c98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 8019de4:	9c00      	ldr	r4, [sp, #0]
 8019de6:	4563      	cmp	r3, ip
 8019de8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8019dec:	db0d      	blt.n	8019e0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 8019dee:	4429      	add	r1, r5
 8019df0:	9a04      	ldr	r2, [sp, #16]
 8019df2:	445c      	add	r4, fp
 8019df4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8019df8:	b289      	uxth	r1, r1
 8019dfa:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 8019dfe:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8019e02:	4411      	add	r1, r2
 8019e04:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 8019e08:	e581      	b.n	801990e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8019e0a:	445c      	add	r4, fp
 8019e0c:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 8019e10:	e79f      	b.n	8019d52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 8019e12:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8019e16:	2f07      	cmp	r7, #7
 8019e18:	d806      	bhi.n	8019e28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 8019e1a:	ab08      	add	r3, sp, #32
 8019e1c:	9801      	ldr	r0, [sp, #4]
 8019e1e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8019e22:	f7ff fd45 	bl	80198b0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8019e26:	e5dc      	b.n	80199e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8019e28:	f107 39ff 	add.w	r9, r7, #4294967295
 8019e2c:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8019e30:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 8019e34:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8019e38:	f04f 35ff 	mov.w	r5, #4294967295
 8019e3c:	2400      	movs	r4, #0
 8019e3e:	9304      	str	r3, [sp, #16]
 8019e40:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 8019e44:	f109 32ff 	add.w	r2, r9, #4294967295
 8019e48:	9300      	str	r3, [sp, #0]
 8019e4a:	4690      	mov	r8, r2
 8019e4c:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8019e50:	9303      	str	r3, [sp, #12]
 8019e52:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8019e56:	f1b8 3fff 	cmp.w	r8, #4294967295
 8019e5a:	6818      	ldr	r0, [r3, #0]
 8019e5c:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8019e60:	9206      	str	r2, [sp, #24]
 8019e62:	bf16      	itet	ne
 8019e64:	9904      	ldrne	r1, [sp, #16]
 8019e66:	f8dd e008 	ldreq.w	lr, [sp, #8]
 8019e6a:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 8019e6e:	9305      	str	r3, [sp, #20]
 8019e70:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8019e74:	f8be 6004 	ldrh.w	r6, [lr, #4]
 8019e78:	fb16 f601 	smulbb	r6, r6, r1
 8019e7c:	6859      	ldr	r1, [r3, #4]
 8019e7e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8019e82:	4671      	mov	r1, lr
 8019e84:	a80a      	add	r0, sp, #40	; 0x28
 8019e86:	f7ff fc51 	bl	801972c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019e8a:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8019e8e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8019e92:	9b03      	ldr	r3, [sp, #12]
 8019e94:	9a00      	ldr	r2, [sp, #0]
 8019e96:	fb11 f100 	smulbb	r1, r1, r0
 8019e9a:	2008      	movs	r0, #8
 8019e9c:	fb02 6603 	mla	r6, r2, r3, r6
 8019ea0:	1b8e      	subs	r6, r1, r6
 8019ea2:	fb91 f1f0 	sdiv	r1, r1, r0
 8019ea6:	42b1      	cmp	r1, r6
 8019ea8:	dc21      	bgt.n	8019eee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 8019eaa:	4556      	cmp	r6, sl
 8019eac:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8019eb0:	da03      	bge.n	8019eba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 8019eb2:	b1e6      	cbz	r6, 8019eee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 8019eb4:	46b2      	mov	sl, r6
 8019eb6:	4645      	mov	r5, r8
 8019eb8:	464c      	mov	r4, r9
 8019eba:	f108 38ff 	add.w	r8, r8, #4294967295
 8019ebe:	f118 0f02 	cmn.w	r8, #2
 8019ec2:	d1c8      	bne.n	8019e56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 8019ec4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8019ec8:	f1a7 0708 	sub.w	r7, r7, #8
 8019ecc:	4691      	mov	r9, r2
 8019ece:	d1b7      	bne.n	8019e40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 8019ed0:	9b01      	ldr	r3, [sp, #4]
 8019ed2:	b2a6      	uxth	r6, r4
 8019ed4:	00e4      	lsls	r4, r4, #3
 8019ed6:	1918      	adds	r0, r3, r4
 8019ed8:	1c6b      	adds	r3, r5, #1
 8019eda:	d10b      	bne.n	8019ef4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 8019edc:	4601      	mov	r1, r0
 8019ede:	9802      	ldr	r0, [sp, #8]
 8019ee0:	f7ff fc24 	bl	801972c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019ee4:	4631      	mov	r1, r6
 8019ee6:	9801      	ldr	r0, [sp, #4]
 8019ee8:	f7ff fccc 	bl	8019884 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019eec:	e50f      	b.n	801990e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8019eee:	4645      	mov	r5, r8
 8019ef0:	464c      	mov	r4, r9
 8019ef2:	e7ed      	b.n	8019ed0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 8019ef4:	9b01      	ldr	r3, [sp, #4]
 8019ef6:	00ed      	lsls	r5, r5, #3
 8019ef8:	445c      	add	r4, fp
 8019efa:	1959      	adds	r1, r3, r5
 8019efc:	445d      	add	r5, fp
 8019efe:	f7ff fc15 	bl	801972c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019f02:	9b02      	ldr	r3, [sp, #8]
 8019f04:	cb03      	ldmia	r3!, {r0, r1}
 8019f06:	9b02      	ldr	r3, [sp, #8]
 8019f08:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 8019f0c:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 8019f10:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 8019f14:	6861      	ldr	r1, [r4, #4]
 8019f16:	c303      	stmia	r3!, {r0, r1}
 8019f18:	e7e4      	b.n	8019ee4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

08019f1c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8019f1c:	4b1d      	ldr	r3, [pc, #116]	; (8019f94 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 8019f1e:	b530      	push	{r4, r5, lr}
 8019f20:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019f24:	b085      	sub	sp, #20
 8019f26:	4b1c      	ldr	r3, [pc, #112]	; (8019f98 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 8019f28:	460c      	mov	r4, r1
 8019f2a:	2100      	movs	r1, #0
 8019f2c:	4605      	mov	r5, r0
 8019f2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019f32:	6820      	ldr	r0, [r4, #0]
 8019f34:	9100      	str	r1, [sp, #0]
 8019f36:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019f3a:	ab02      	add	r3, sp, #8
 8019f3c:	6861      	ldr	r1, [r4, #4]
 8019f3e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019f42:	c303      	stmia	r3!, {r0, r1}
 8019f44:	4669      	mov	r1, sp
 8019f46:	a802      	add	r0, sp, #8
 8019f48:	f7fb fdd8 	bl	8015afc <_ZN8touchgfx4RectaNERKS0_>
 8019f4c:	ab02      	add	r3, sp, #8
 8019f4e:	cb03      	ldmia	r3!, {r0, r1}
 8019f50:	4b12      	ldr	r3, [pc, #72]	; (8019f9c <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 8019f52:	6020      	str	r0, [r4, #0]
 8019f54:	6818      	ldr	r0, [r3, #0]
 8019f56:	6061      	str	r1, [r4, #4]
 8019f58:	b138      	cbz	r0, 8019f6a <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8019f5a:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 8019f5e:	b133      	cbz	r3, 8019f6e <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 8019f60:	6821      	ldr	r1, [r4, #0]
 8019f62:	4628      	mov	r0, r5
 8019f64:	6862      	ldr	r2, [r4, #4]
 8019f66:	f7ff fcc5 	bl	80198f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019f6a:	b005      	add	sp, #20
 8019f6c:	bd30      	pop	{r4, r5, pc}
 8019f6e:	6803      	ldr	r3, [r0, #0]
 8019f70:	4621      	mov	r1, r4
 8019f72:	689b      	ldr	r3, [r3, #8]
 8019f74:	4798      	blx	r3
 8019f76:	4b0a      	ldr	r3, [pc, #40]	; (8019fa0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 8019f78:	6818      	ldr	r0, [r3, #0]
 8019f7a:	b118      	cbz	r0, 8019f84 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 8019f7c:	6803      	ldr	r3, [r0, #0]
 8019f7e:	4621      	mov	r1, r4
 8019f80:	689b      	ldr	r3, [r3, #8]
 8019f82:	4798      	blx	r3
 8019f84:	4b07      	ldr	r3, [pc, #28]	; (8019fa4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 8019f86:	4621      	mov	r1, r4
 8019f88:	6818      	ldr	r0, [r3, #0]
 8019f8a:	6803      	ldr	r3, [r0, #0]
 8019f8c:	699b      	ldr	r3, [r3, #24]
 8019f8e:	4798      	blx	r3
 8019f90:	e7eb      	b.n	8019f6a <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8019f92:	bf00      	nop
 8019f94:	20056774 	.word	0x20056774
 8019f98:	20056776 	.word	0x20056776
 8019f9c:	200567dc 	.word	0x200567dc
 8019fa0:	200567d8 	.word	0x200567d8
 8019fa4:	20056780 	.word	0x20056780

08019fa8 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 8019fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fac:	4604      	mov	r4, r0
 8019fae:	b09b      	sub	sp, #108	; 0x6c
 8019fb0:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 8019fb4:	b129      	cbz	r1, 8019fc2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 8019fb6:	2300      	movs	r3, #0
 8019fb8:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8019fbc:	b01b      	add	sp, #108	; 0x6c
 8019fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fc2:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8019fc6:	4630      	mov	r0, r6
 8019fc8:	f7fb fddb 	bl	8015b82 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019fcc:	4605      	mov	r5, r0
 8019fce:	b940      	cbnz	r0, 8019fe2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 8019fd0:	4620      	mov	r0, r4
 8019fd2:	e896 0006 	ldmia.w	r6, {r1, r2}
 8019fd6:	f7ff fc8d 	bl	80198f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019fda:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8019fde:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8019fe2:	4ba6      	ldr	r3, [pc, #664]	; (801a27c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 8019fe4:	681b      	ldr	r3, [r3, #0]
 8019fe6:	b33b      	cbz	r3, 801a038 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8019fe8:	4da5      	ldr	r5, [pc, #660]	; (801a280 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 8019fea:	4628      	mov	r0, r5
 8019fec:	f7fb fdc9 	bl	8015b82 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019ff0:	4606      	mov	r6, r0
 8019ff2:	bb08      	cbnz	r0, 801a038 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8019ff4:	4628      	mov	r0, r5
 8019ff6:	f7ff fa1d 	bl	8019434 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8019ffa:	6829      	ldr	r1, [r5, #0]
 8019ffc:	686a      	ldr	r2, [r5, #4]
 8019ffe:	4620      	mov	r0, r4
 801a000:	f7ff fc78 	bl	80198f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801a004:	802e      	strh	r6, [r5, #0]
 801a006:	806e      	strh	r6, [r5, #2]
 801a008:	80ae      	strh	r6, [r5, #4]
 801a00a:	80ee      	strh	r6, [r5, #6]
 801a00c:	4f9d      	ldr	r7, [pc, #628]	; (801a284 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801a00e:	a809      	add	r0, sp, #36	; 0x24
 801a010:	f7ff fbe3 	bl	80197da <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a014:	883d      	ldrh	r5, [r7, #0]
 801a016:	462e      	mov	r6, r5
 801a018:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801a01c:	42b3      	cmp	r3, r6
 801a01e:	d910      	bls.n	801a042 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801a020:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801a024:	3601      	adds	r6, #1
 801a026:	a809      	add	r0, sp, #36	; 0x24
 801a028:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801a02c:	b2b6      	uxth	r6, r6
 801a02e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801a032:	f7ff fc3d 	bl	80198b0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801a036:	e7ef      	b.n	801a018 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801a038:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801a03c:	2b00      	cmp	r3, #0
 801a03e:	d1e5      	bne.n	801a00c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 801a040:	e7bc      	b.n	8019fbc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801a042:	462e      	mov	r6, r5
 801a044:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801a048:	42b3      	cmp	r3, r6
 801a04a:	d90b      	bls.n	801a064 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 801a04c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801a050:	3601      	adds	r6, #1
 801a052:	4620      	mov	r0, r4
 801a054:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801a058:	b2b6      	uxth	r6, r6
 801a05a:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801a05e:	f7ff fc49 	bl	80198f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801a062:	e7ef      	b.n	801a044 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801a064:	4a88      	ldr	r2, [pc, #544]	; (801a288 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801a066:	6813      	ldr	r3, [r2, #0]
 801a068:	4690      	mov	r8, r2
 801a06a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801a06e:	2b01      	cmp	r3, #1
 801a070:	f040 8094 	bne.w	801a19c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 801a074:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801a078:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801a07c:	f04f 0900 	mov.w	r9, #0
 801a080:	33aa      	adds	r3, #170	; 0xaa
 801a082:	42a8      	cmp	r0, r5
 801a084:	f103 0308 	add.w	r3, r3, #8
 801a088:	dd0a      	ble.n	801a0a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 801a08a:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801a08e:	3501      	adds	r5, #1
 801a090:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801a094:	440a      	add	r2, r1
 801a096:	b212      	sxth	r2, r2
 801a098:	4591      	cmp	r9, r2
 801a09a:	bfb8      	it	lt
 801a09c:	4691      	movlt	r9, r2
 801a09e:	e7f0      	b.n	801a082 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 801a0a0:	4b7a      	ldr	r3, [pc, #488]	; (801a28c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801a0a2:	4e7b      	ldr	r6, [pc, #492]	; (801a290 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801a0a4:	881d      	ldrh	r5, [r3, #0]
 801a0a6:	2300      	movs	r3, #0
 801a0a8:	2d0f      	cmp	r5, #15
 801a0aa:	bf8c      	ite	hi
 801a0ac:	08ed      	lsrhi	r5, r5, #3
 801a0ae:	2501      	movls	r5, #1
 801a0b0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801a0b4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801a0b8:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801a0bc:	f8d8 0000 	ldr.w	r0, [r8]
 801a0c0:	440b      	add	r3, r1
 801a0c2:	6802      	ldr	r2, [r0, #0]
 801a0c4:	b21b      	sxth	r3, r3
 801a0c6:	4599      	cmp	r9, r3
 801a0c8:	dd4b      	ble.n	801a162 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 801a0ca:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 801a0ce:	4798      	blx	r3
 801a0d0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801a0d4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801a0d8:	4413      	add	r3, r2
 801a0da:	b21b      	sxth	r3, r3
 801a0dc:	195a      	adds	r2, r3, r5
 801a0de:	4290      	cmp	r0, r2
 801a0e0:	da07      	bge.n	801a0f2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801a0e2:	4581      	cmp	r9, r0
 801a0e4:	dd05      	ble.n	801a0f2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801a0e6:	4298      	cmp	r0, r3
 801a0e8:	da33      	bge.n	801a152 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801a0ea:	2b00      	cmp	r3, #0
 801a0ec:	dd31      	ble.n	801a152 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801a0ee:	4648      	mov	r0, r9
 801a0f0:	e004      	b.n	801a0fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 801a0f2:	4298      	cmp	r0, r3
 801a0f4:	dbfb      	blt.n	801a0ee <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 801a0f6:	4548      	cmp	r0, r9
 801a0f8:	bfa8      	it	ge
 801a0fa:	4648      	movge	r0, r9
 801a0fc:	f9b6 2000 	ldrsh.w	r2, [r6]
 801a100:	2100      	movs	r1, #0
 801a102:	1ac0      	subs	r0, r0, r3
 801a104:	f8b7 a000 	ldrh.w	sl, [r7]
 801a108:	f8ad 1014 	strh.w	r1, [sp, #20]
 801a10c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a110:	f8ad 2018 	strh.w	r2, [sp, #24]
 801a114:	f8ad 001a 	strh.w	r0, [sp, #26]
 801a118:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801a11c:	4553      	cmp	r3, sl
 801a11e:	d9c9      	bls.n	801a0b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801a120:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801a124:	ab07      	add	r3, sp, #28
 801a126:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801a12a:	6851      	ldr	r1, [r2, #4]
 801a12c:	c303      	stmia	r3!, {r0, r1}
 801a12e:	a807      	add	r0, sp, #28
 801a130:	a905      	add	r1, sp, #20
 801a132:	f7fb fce3 	bl	8015afc <_ZN8touchgfx4RectaNERKS0_>
 801a136:	a807      	add	r0, sp, #28
 801a138:	f7fb fd23 	bl	8015b82 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a13c:	b920      	cbnz	r0, 801a148 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 801a13e:	6823      	ldr	r3, [r4, #0]
 801a140:	a907      	add	r1, sp, #28
 801a142:	4620      	mov	r0, r4
 801a144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a146:	4798      	blx	r3
 801a148:	f10a 0a01 	add.w	sl, sl, #1
 801a14c:	fa1f fa8a 	uxth.w	sl, sl
 801a150:	e7e2      	b.n	801a118 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801a152:	f8d8 0000 	ldr.w	r0, [r8]
 801a156:	2101      	movs	r1, #1
 801a158:	6803      	ldr	r3, [r0, #0]
 801a15a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a15e:	4798      	blx	r3
 801a160:	e7a8      	b.n	801a0b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801a162:	6a13      	ldr	r3, [r2, #32]
 801a164:	4798      	blx	r3
 801a166:	4b4b      	ldr	r3, [pc, #300]	; (801a294 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801a168:	781b      	ldrb	r3, [r3, #0]
 801a16a:	2b00      	cmp	r3, #0
 801a16c:	f43f af26 	beq.w	8019fbc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801a170:	2300      	movs	r3, #0
 801a172:	883d      	ldrh	r5, [r7, #0]
 801a174:	34ea      	adds	r4, #234	; 0xea
 801a176:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801a17a:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801a17e:	42ab      	cmp	r3, r5
 801a180:	f67f af1c 	bls.w	8019fbc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801a184:	ab1a      	add	r3, sp, #104	; 0x68
 801a186:	4620      	mov	r0, r4
 801a188:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a18c:	3501      	adds	r5, #1
 801a18e:	3b44      	subs	r3, #68	; 0x44
 801a190:	b2ad      	uxth	r5, r5
 801a192:	e893 0006 	ldmia.w	r3, {r1, r2}
 801a196:	f7ff fb8b 	bl	80198b0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801a19a:	e7ee      	b.n	801a17a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 801a19c:	2b02      	cmp	r3, #2
 801a19e:	f040 813d 	bne.w	801a41c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 801a1a2:	4b3d      	ldr	r3, [pc, #244]	; (801a298 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 801a1a4:	781b      	ldrb	r3, [r3, #0]
 801a1a6:	2b01      	cmp	r3, #1
 801a1a8:	d02c      	beq.n	801a204 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 801a1aa:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 801a1ae:	883a      	ldrh	r2, [r7, #0]
 801a1b0:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 801a1b4:	3201      	adds	r2, #1
 801a1b6:	b292      	uxth	r2, r2
 801a1b8:	2900      	cmp	r1, #0
 801a1ba:	d0d4      	beq.n	801a166 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801a1bc:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801a1c0:	4610      	mov	r0, r2
 801a1c2:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801a1c6:	f04f 0a00 	mov.w	sl, #0
 801a1ca:	441d      	add	r5, r3
 801a1cc:	b22d      	sxth	r5, r5
 801a1ce:	b283      	uxth	r3, r0
 801a1d0:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 801a1d4:	4299      	cmp	r1, r3
 801a1d6:	f240 80c3 	bls.w	801a360 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 801a1da:	4426      	add	r6, r4
 801a1dc:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 801a1e0:	4684      	mov	ip, r0
 801a1e2:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 801a1e6:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 801a1ea:	4573      	cmp	r3, lr
 801a1ec:	f340 80a5 	ble.w	801a33a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 801a1f0:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 801a1f4:	4475      	add	r5, lr
 801a1f6:	b22d      	sxth	r5, r5
 801a1f8:	429d      	cmp	r5, r3
 801a1fa:	bfa8      	it	ge
 801a1fc:	461d      	movge	r5, r3
 801a1fe:	3001      	adds	r0, #1
 801a200:	46e2      	mov	sl, ip
 801a202:	e7e4      	b.n	801a1ce <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 801a204:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801a208:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801a20c:	f1bb 0f00 	cmp.w	fp, #0
 801a210:	d0a9      	beq.n	801a166 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801a212:	883b      	ldrh	r3, [r7, #0]
 801a214:	2600      	movs	r6, #0
 801a216:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801a21a:	3301      	adds	r3, #1
 801a21c:	b29b      	uxth	r3, r3
 801a21e:	b299      	uxth	r1, r3
 801a220:	00f5      	lsls	r5, r6, #3
 801a222:	458b      	cmp	fp, r1
 801a224:	d93a      	bls.n	801a29c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801a226:	4425      	add	r5, r4
 801a228:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801a22c:	469c      	mov	ip, r3
 801a22e:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801a232:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801a236:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801a23a:	4408      	add	r0, r1
 801a23c:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801a240:	4471      	add	r1, lr
 801a242:	b200      	sxth	r0, r0
 801a244:	b209      	sxth	r1, r1
 801a246:	4288      	cmp	r0, r1
 801a248:	da06      	bge.n	801a258 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 801a24a:	4586      	cmp	lr, r0
 801a24c:	4672      	mov	r2, lr
 801a24e:	bfb8      	it	lt
 801a250:	4602      	movlt	r2, r0
 801a252:	3301      	adds	r3, #1
 801a254:	4666      	mov	r6, ip
 801a256:	e7e2      	b.n	801a21e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 801a258:	d10b      	bne.n	801a272 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 801a25a:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801a25e:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801a262:	458c      	cmp	ip, r1
 801a264:	bfb4      	ite	lt
 801a266:	469c      	movlt	ip, r3
 801a268:	46b4      	movge	ip, r6
 801a26a:	4572      	cmp	r2, lr
 801a26c:	bfb8      	it	lt
 801a26e:	4672      	movlt	r2, lr
 801a270:	e7ef      	b.n	801a252 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 801a272:	428a      	cmp	r2, r1
 801a274:	46b4      	mov	ip, r6
 801a276:	bfb8      	it	lt
 801a278:	460a      	movlt	r2, r1
 801a27a:	e7ea      	b.n	801a252 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 801a27c:	200567d8 	.word	0x200567d8
 801a280:	200567e4 	.word	0x200567e4
 801a284:	20000024 	.word	0x20000024
 801a288:	20056780 	.word	0x20056780
 801a28c:	20056776 	.word	0x20056776
 801a290:	20056774 	.word	0x20056774
 801a294:	2005677e 	.word	0x2005677e
 801a298:	20056778 	.word	0x20056778
 801a29c:	1961      	adds	r1, r4, r5
 801a29e:	ab07      	add	r3, sp, #28
 801a2a0:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801a2a4:	6849      	ldr	r1, [r1, #4]
 801a2a6:	c303      	stmia	r3!, {r0, r1}
 801a2a8:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801a2ac:	a807      	add	r0, sp, #28
 801a2ae:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801a2b2:	2b13      	cmp	r3, #19
 801a2b4:	440b      	add	r3, r1
 801a2b6:	bfd8      	it	le
 801a2b8:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801a2bc:	1a9b      	subs	r3, r3, r2
 801a2be:	f8ad 201c 	strh.w	r2, [sp, #28]
 801a2c2:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a2c6:	f7ff f90f 	bl	80194e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a2ca:	a807      	add	r0, sp, #28
 801a2cc:	f7fb fc59 	bl	8015b82 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a2d0:	2800      	cmp	r0, #0
 801a2d2:	d199      	bne.n	801a208 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801a2d4:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801a2d8:	4425      	add	r5, r4
 801a2da:	f8d8 0000 	ldr.w	r0, [r8]
 801a2de:	f1bc 0f14 	cmp.w	ip, #20
 801a2e2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801a2e6:	f8d0 e000 	ldr.w	lr, [r0]
 801a2ea:	bfa8      	it	ge
 801a2ec:	f04f 0c14 	movge.w	ip, #20
 801a2f0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801a2f4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801a2f8:	fa1f fc8c 	uxth.w	ip, ip
 801a2fc:	f8cd c000 	str.w	ip, [sp]
 801a300:	f8de a084 	ldr.w	sl, [lr, #132]	; 0x84
 801a304:	47d0      	blx	sl
 801a306:	4682      	mov	sl, r0
 801a308:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801a30c:	a807      	add	r0, sp, #28
 801a30e:	f7ff f891 	bl	8019434 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801a312:	6823      	ldr	r3, [r4, #0]
 801a314:	4620      	mov	r0, r4
 801a316:	a907      	add	r1, sp, #28
 801a318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a31a:	4798      	blx	r3
 801a31c:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801a320:	eba0 000a 	sub.w	r0, r0, sl
 801a324:	b200      	sxth	r0, r0
 801a326:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801a32a:	2800      	cmp	r0, #0
 801a32c:	f47f af6c 	bne.w	801a208 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801a330:	b2b1      	uxth	r1, r6
 801a332:	4648      	mov	r0, r9
 801a334:	f7ff faa6 	bl	8019884 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a338:	e766      	b.n	801a208 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801a33a:	d10c      	bne.n	801a356 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 801a33c:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 801a340:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 801a344:	45b4      	cmp	ip, r6
 801a346:	bfb4      	ite	lt
 801a348:	4684      	movlt	ip, r0
 801a34a:	46d4      	movge	ip, sl
 801a34c:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 801a350:	4433      	add	r3, r6
 801a352:	b21b      	sxth	r3, r3
 801a354:	e750      	b.n	801a1f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 801a356:	4575      	cmp	r5, lr
 801a358:	46d4      	mov	ip, sl
 801a35a:	bfa8      	it	ge
 801a35c:	4675      	movge	r5, lr
 801a35e:	e74e      	b.n	801a1fe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 801a360:	eb0b 0006 	add.w	r0, fp, r6
 801a364:	4426      	add	r6, r4
 801a366:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 801a36a:	f1b9 0f13 	cmp.w	r9, #19
 801a36e:	bfdc      	itt	le
 801a370:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 801a374:	444d      	addle	r5, r9
 801a376:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801a37a:	bfd8      	it	le
 801a37c:	b22d      	sxthle	r5, r5
 801a37e:	f7fb fc00 	bl	8015b82 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a382:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801a386:	2800      	cmp	r0, #0
 801a388:	f47f af16 	bne.w	801a1b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 801a38c:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 801a390:	fa1f f989 	uxth.w	r9, r9
 801a394:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801a398:	eba5 050c 	sub.w	r5, r5, ip
 801a39c:	fa1f f28c 	uxth.w	r2, ip
 801a3a0:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 801a3a4:	eb02 0009 	add.w	r0, r2, r9
 801a3a8:	2d14      	cmp	r5, #20
 801a3aa:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 801a3ae:	bfa8      	it	ge
 801a3b0:	2514      	movge	r5, #20
 801a3b2:	b200      	sxth	r0, r0
 801a3b4:	f8ad 101c 	strh.w	r1, [sp, #28]
 801a3b8:	b289      	uxth	r1, r1
 801a3ba:	fa1f fe85 	uxth.w	lr, r5
 801a3be:	eba0 000c 	sub.w	r0, r0, ip
 801a3c2:	f8ad c01e 	strh.w	ip, [sp, #30]
 801a3c6:	4586      	cmp	lr, r0
 801a3c8:	f8d8 0000 	ldr.w	r0, [r8]
 801a3cc:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a3d0:	b29b      	uxth	r3, r3
 801a3d2:	bfb8      	it	lt
 801a3d4:	46f1      	movlt	r9, lr
 801a3d6:	6805      	ldr	r5, [r0, #0]
 801a3d8:	f8cd 9000 	str.w	r9, [sp]
 801a3dc:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
 801a3e0:	47a8      	blx	r5
 801a3e2:	6823      	ldr	r3, [r4, #0]
 801a3e4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801a3e8:	a907      	add	r1, sp, #28
 801a3ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a3ec:	4620      	mov	r0, r4
 801a3ee:	4798      	blx	r3
 801a3f0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801a3f4:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 801a3f8:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 801a3fc:	1a5b      	subs	r3, r3, r1
 801a3fe:	440a      	add	r2, r1
 801a400:	b21b      	sxth	r3, r3
 801a402:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 801a406:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 801a40a:	2b00      	cmp	r3, #0
 801a40c:	f47f aecf 	bne.w	801a1ae <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801a410:	fa1f f18a 	uxth.w	r1, sl
 801a414:	4658      	mov	r0, fp
 801a416:	f7ff fa35 	bl	8019884 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a41a:	e6c8      	b.n	801a1ae <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801a41c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801a420:	42ab      	cmp	r3, r5
 801a422:	f67f aea0 	bls.w	801a166 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801a426:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801a42a:	ab07      	add	r3, sp, #28
 801a42c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801a430:	6851      	ldr	r1, [r2, #4]
 801a432:	c303      	stmia	r3!, {r0, r1}
 801a434:	a807      	add	r0, sp, #28
 801a436:	f7fb fba4 	bl	8015b82 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a43a:	b920      	cbnz	r0, 801a446 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 801a43c:	6823      	ldr	r3, [r4, #0]
 801a43e:	a907      	add	r1, sp, #28
 801a440:	4620      	mov	r0, r4
 801a442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a444:	4798      	blx	r3
 801a446:	3501      	adds	r5, #1
 801a448:	b2ad      	uxth	r5, r5
 801a44a:	e7e7      	b.n	801a41c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

0801a44c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801a44c:	4b03      	ldr	r3, [pc, #12]	; (801a45c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801a44e:	2200      	movs	r2, #0
 801a450:	801a      	strh	r2, [r3, #0]
 801a452:	805a      	strh	r2, [r3, #2]
 801a454:	809a      	strh	r2, [r3, #4]
 801a456:	80da      	strh	r2, [r3, #6]
 801a458:	4770      	bx	lr
 801a45a:	bf00      	nop
 801a45c:	200567e4 	.word	0x200567e4

0801a460 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801a460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a464:	b09b      	sub	sp, #108	; 0x6c
 801a466:	4606      	mov	r6, r0
 801a468:	4614      	mov	r4, r2
 801a46a:	468a      	mov	sl, r1
 801a46c:	a803      	add	r0, sp, #12
 801a46e:	461d      	mov	r5, r3
 801a470:	f000 fe85 	bl	801b17e <_ZN8touchgfx12TextProviderC1Ev>
 801a474:	6833      	ldr	r3, [r6, #0]
 801a476:	4630      	mov	r0, r6
 801a478:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801a47c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a47e:	4798      	blx	r3
 801a480:	6833      	ldr	r3, [r6, #0]
 801a482:	4607      	mov	r7, r0
 801a484:	4630      	mov	r0, r6
 801a486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a488:	4798      	blx	r3
 801a48a:	462a      	mov	r2, r5
 801a48c:	2500      	movs	r5, #0
 801a48e:	4621      	mov	r1, r4
 801a490:	9000      	str	r0, [sp, #0]
 801a492:	463b      	mov	r3, r7
 801a494:	462c      	mov	r4, r5
 801a496:	46a9      	mov	r9, r5
 801a498:	46a8      	mov	r8, r5
 801a49a:	a803      	add	r0, sp, #12
 801a49c:	f000 febc 	bl	801b218 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a4a0:	2300      	movs	r3, #0
 801a4a2:	9302      	str	r3, [sp, #8]
 801a4a4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a4a8:	429c      	cmp	r4, r3
 801a4aa:	d002      	beq.n	801a4b2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801a4ac:	455c      	cmp	r4, fp
 801a4ae:	bf18      	it	ne
 801a4b0:	4625      	movne	r5, r4
 801a4b2:	ab02      	add	r3, sp, #8
 801a4b4:	4632      	mov	r2, r6
 801a4b6:	4651      	mov	r1, sl
 801a4b8:	a803      	add	r0, sp, #12
 801a4ba:	f001 f9a9 	bl	801b810 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a4be:	4604      	mov	r4, r0
 801a4c0:	b108      	cbz	r0, 801a4c6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801a4c2:	280a      	cmp	r0, #10
 801a4c4:	d10a      	bne.n	801a4dc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801a4c6:	45c1      	cmp	r9, r8
 801a4c8:	bf38      	it	cc
 801a4ca:	46c1      	movcc	r9, r8
 801a4cc:	f04f 0800 	mov.w	r8, #0
 801a4d0:	2c00      	cmp	r4, #0
 801a4d2:	d1e5      	bne.n	801a4a0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801a4d4:	4648      	mov	r0, r9
 801a4d6:	b01b      	add	sp, #108	; 0x6c
 801a4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4dc:	9a02      	ldr	r2, [sp, #8]
 801a4de:	2a00      	cmp	r2, #0
 801a4e0:	d0de      	beq.n	801a4a0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801a4e2:	7b57      	ldrb	r7, [r2, #13]
 801a4e4:	4629      	mov	r1, r5
 801a4e6:	6833      	ldr	r3, [r6, #0]
 801a4e8:	007f      	lsls	r7, r7, #1
 801a4ea:	8894      	ldrh	r4, [r2, #4]
 801a4ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a4ee:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801a4f2:	7a97      	ldrb	r7, [r2, #10]
 801a4f4:	4307      	orrs	r7, r0
 801a4f6:	4630      	mov	r0, r6
 801a4f8:	4798      	blx	r3
 801a4fa:	4438      	add	r0, r7
 801a4fc:	4480      	add	r8, r0
 801a4fe:	fa1f f888 	uxth.w	r8, r8
 801a502:	e7e5      	b.n	801a4d0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801a504 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801a504:	b508      	push	{r3, lr}
 801a506:	6803      	ldr	r3, [r0, #0]
 801a508:	68db      	ldr	r3, [r3, #12]
 801a50a:	4798      	blx	r3
 801a50c:	b128      	cbz	r0, 801a51a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801a50e:	7b43      	ldrb	r3, [r0, #13]
 801a510:	7a80      	ldrb	r0, [r0, #10]
 801a512:	005b      	lsls	r3, r3, #1
 801a514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a518:	4318      	orrs	r0, r3
 801a51a:	bd08      	pop	{r3, pc}

0801a51c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801a51c:	b40e      	push	{r1, r2, r3}
 801a51e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a520:	b09c      	sub	sp, #112	; 0x70
 801a522:	4605      	mov	r5, r0
 801a524:	ab21      	add	r3, sp, #132	; 0x84
 801a526:	a805      	add	r0, sp, #20
 801a528:	f853 4b04 	ldr.w	r4, [r3], #4
 801a52c:	9303      	str	r3, [sp, #12]
 801a52e:	f000 fe26 	bl	801b17e <_ZN8touchgfx12TextProviderC1Ev>
 801a532:	682b      	ldr	r3, [r5, #0]
 801a534:	4628      	mov	r0, r5
 801a536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a538:	4798      	blx	r3
 801a53a:	682b      	ldr	r3, [r5, #0]
 801a53c:	4606      	mov	r6, r0
 801a53e:	4628      	mov	r0, r5
 801a540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a542:	4798      	blx	r3
 801a544:	4633      	mov	r3, r6
 801a546:	4621      	mov	r1, r4
 801a548:	ae1c      	add	r6, sp, #112	; 0x70
 801a54a:	2400      	movs	r4, #0
 801a54c:	9000      	str	r0, [sp, #0]
 801a54e:	9a03      	ldr	r2, [sp, #12]
 801a550:	a805      	add	r0, sp, #20
 801a552:	f000 fe61 	bl	801b218 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a556:	f846 4d60 	str.w	r4, [r6, #-96]!
 801a55a:	462a      	mov	r2, r5
 801a55c:	4633      	mov	r3, r6
 801a55e:	4621      	mov	r1, r4
 801a560:	a805      	add	r0, sp, #20
 801a562:	f001 f955 	bl	801b810 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a566:	b300      	cbz	r0, 801a5aa <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801a568:	280a      	cmp	r0, #10
 801a56a:	d01a      	beq.n	801a5a2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801a56c:	9f04      	ldr	r7, [sp, #16]
 801a56e:	b1c7      	cbz	r7, 801a5a2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801a570:	7b78      	ldrb	r0, [r7, #13]
 801a572:	7a3b      	ldrb	r3, [r7, #8]
 801a574:	00c1      	lsls	r1, r0, #3
 801a576:	88aa      	ldrh	r2, [r5, #4]
 801a578:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801a57c:	4319      	orrs	r1, r3
 801a57e:	0643      	lsls	r3, r0, #25
 801a580:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801a584:	bf48      	it	mi
 801a586:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801a58a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801a58e:	bf48      	it	mi
 801a590:	b219      	sxthmi	r1, r3
 801a592:	79fb      	ldrb	r3, [r7, #7]
 801a594:	4303      	orrs	r3, r0
 801a596:	4413      	add	r3, r2
 801a598:	1a5b      	subs	r3, r3, r1
 801a59a:	b29b      	uxth	r3, r3
 801a59c:	42a3      	cmp	r3, r4
 801a59e:	bfc8      	it	gt
 801a5a0:	b21c      	sxthgt	r4, r3
 801a5a2:	4633      	mov	r3, r6
 801a5a4:	462a      	mov	r2, r5
 801a5a6:	2100      	movs	r1, #0
 801a5a8:	e7da      	b.n	801a560 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801a5aa:	b2a0      	uxth	r0, r4
 801a5ac:	b01c      	add	sp, #112	; 0x70
 801a5ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a5b2:	b003      	add	sp, #12
 801a5b4:	4770      	bx	lr

0801a5b6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801a5b6:	b40e      	push	{r1, r2, r3}
 801a5b8:	b570      	push	{r4, r5, r6, lr}
 801a5ba:	b09b      	sub	sp, #108	; 0x6c
 801a5bc:	4604      	mov	r4, r0
 801a5be:	ab1f      	add	r3, sp, #124	; 0x7c
 801a5c0:	a803      	add	r0, sp, #12
 801a5c2:	f853 5b04 	ldr.w	r5, [r3], #4
 801a5c6:	9302      	str	r3, [sp, #8]
 801a5c8:	f000 fdd9 	bl	801b17e <_ZN8touchgfx12TextProviderC1Ev>
 801a5cc:	6823      	ldr	r3, [r4, #0]
 801a5ce:	4620      	mov	r0, r4
 801a5d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a5d2:	4798      	blx	r3
 801a5d4:	6823      	ldr	r3, [r4, #0]
 801a5d6:	4606      	mov	r6, r0
 801a5d8:	4620      	mov	r0, r4
 801a5da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a5dc:	2401      	movs	r4, #1
 801a5de:	4798      	blx	r3
 801a5e0:	4633      	mov	r3, r6
 801a5e2:	9000      	str	r0, [sp, #0]
 801a5e4:	4629      	mov	r1, r5
 801a5e6:	9a02      	ldr	r2, [sp, #8]
 801a5e8:	a803      	add	r0, sp, #12
 801a5ea:	f000 fe15 	bl	801b218 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a5ee:	a803      	add	r0, sp, #12
 801a5f0:	f001 fa06 	bl	801ba00 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a5f4:	b2a3      	uxth	r3, r4
 801a5f6:	b138      	cbz	r0, 801a608 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801a5f8:	280a      	cmp	r0, #10
 801a5fa:	a803      	add	r0, sp, #12
 801a5fc:	bf04      	itt	eq
 801a5fe:	3301      	addeq	r3, #1
 801a600:	b21c      	sxtheq	r4, r3
 801a602:	f001 f9fd 	bl	801ba00 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a606:	e7f5      	b.n	801a5f4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801a608:	4618      	mov	r0, r3
 801a60a:	b01b      	add	sp, #108	; 0x6c
 801a60c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a610:	b003      	add	sp, #12
 801a612:	4770      	bx	lr

0801a614 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801a614:	b40e      	push	{r1, r2, r3}
 801a616:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a618:	b09c      	sub	sp, #112	; 0x70
 801a61a:	4604      	mov	r4, r0
 801a61c:	ab21      	add	r3, sp, #132	; 0x84
 801a61e:	a805      	add	r0, sp, #20
 801a620:	f853 5b04 	ldr.w	r5, [r3], #4
 801a624:	9303      	str	r3, [sp, #12]
 801a626:	f000 fdaa 	bl	801b17e <_ZN8touchgfx12TextProviderC1Ev>
 801a62a:	6823      	ldr	r3, [r4, #0]
 801a62c:	4620      	mov	r0, r4
 801a62e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a630:	4798      	blx	r3
 801a632:	6823      	ldr	r3, [r4, #0]
 801a634:	4606      	mov	r6, r0
 801a636:	4620      	mov	r0, r4
 801a638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a63a:	4798      	blx	r3
 801a63c:	4633      	mov	r3, r6
 801a63e:	4629      	mov	r1, r5
 801a640:	9000      	str	r0, [sp, #0]
 801a642:	9a03      	ldr	r2, [sp, #12]
 801a644:	a805      	add	r0, sp, #20
 801a646:	f000 fde7 	bl	801b218 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a64a:	ad1c      	add	r5, sp, #112	; 0x70
 801a64c:	2100      	movs	r1, #0
 801a64e:	26ff      	movs	r6, #255	; 0xff
 801a650:	4622      	mov	r2, r4
 801a652:	a805      	add	r0, sp, #20
 801a654:	f845 1d60 	str.w	r1, [r5, #-96]!
 801a658:	462b      	mov	r3, r5
 801a65a:	f001 f8d9 	bl	801b810 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a65e:	b1d8      	cbz	r0, 801a698 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801a660:	280a      	cmp	r0, #10
 801a662:	d012      	beq.n	801a68a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801a664:	9804      	ldr	r0, [sp, #16]
 801a666:	b180      	cbz	r0, 801a68a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801a668:	7b47      	ldrb	r7, [r0, #13]
 801a66a:	7922      	ldrb	r2, [r4, #4]
 801a66c:	00fb      	lsls	r3, r7, #3
 801a66e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801a672:	7a03      	ldrb	r3, [r0, #8]
 801a674:	430b      	orrs	r3, r1
 801a676:	0679      	lsls	r1, r7, #25
 801a678:	bf44      	itt	mi
 801a67a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a67e:	b21b      	sxthmi	r3, r3
 801a680:	1ad3      	subs	r3, r2, r3
 801a682:	b2db      	uxtb	r3, r3
 801a684:	429e      	cmp	r6, r3
 801a686:	bf28      	it	cs
 801a688:	461e      	movcs	r6, r3
 801a68a:	462b      	mov	r3, r5
 801a68c:	4622      	mov	r2, r4
 801a68e:	2100      	movs	r1, #0
 801a690:	a805      	add	r0, sp, #20
 801a692:	f001 f8bd 	bl	801b810 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a696:	e7e2      	b.n	801a65e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801a698:	4630      	mov	r0, r6
 801a69a:	b01c      	add	sp, #112	; 0x70
 801a69c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a6a0:	b003      	add	sp, #12
 801a6a2:	4770      	bx	lr

0801a6a4 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801a6a4:	b513      	push	{r0, r1, r4, lr}
 801a6a6:	1d01      	adds	r1, r0, #4
 801a6a8:	4603      	mov	r3, r0
 801a6aa:	466a      	mov	r2, sp
 801a6ac:	c903      	ldmia	r1, {r0, r1}
 801a6ae:	e882 0003 	stmia.w	r2, {r0, r1}
 801a6b2:	2100      	movs	r1, #0
 801a6b4:	4618      	mov	r0, r3
 801a6b6:	9100      	str	r1, [sp, #0]
 801a6b8:	6819      	ldr	r1, [r3, #0]
 801a6ba:	690c      	ldr	r4, [r1, #16]
 801a6bc:	4611      	mov	r1, r2
 801a6be:	47a0      	blx	r4
 801a6c0:	b002      	add	sp, #8
 801a6c2:	bd10      	pop	{r4, pc}

0801a6c4 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801a6c4:	b538      	push	{r3, r4, r5, lr}
 801a6c6:	680b      	ldr	r3, [r1, #0]
 801a6c8:	460c      	mov	r4, r1
 801a6ca:	4605      	mov	r5, r0
 801a6cc:	68db      	ldr	r3, [r3, #12]
 801a6ce:	4798      	blx	r3
 801a6d0:	6823      	ldr	r3, [r4, #0]
 801a6d2:	4620      	mov	r0, r4
 801a6d4:	4629      	mov	r1, r5
 801a6d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a6d8:	4798      	blx	r3
 801a6da:	4628      	mov	r0, r5
 801a6dc:	bd38      	pop	{r3, r4, r5, pc}

0801a6de <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801a6de:	b410      	push	{r4}
 801a6e0:	880a      	ldrh	r2, [r1, #0]
 801a6e2:	8884      	ldrh	r4, [r0, #4]
 801a6e4:	4422      	add	r2, r4
 801a6e6:	800a      	strh	r2, [r1, #0]
 801a6e8:	884a      	ldrh	r2, [r1, #2]
 801a6ea:	88c4      	ldrh	r4, [r0, #6]
 801a6ec:	4422      	add	r2, r4
 801a6ee:	804a      	strh	r2, [r1, #2]
 801a6f0:	6940      	ldr	r0, [r0, #20]
 801a6f2:	b120      	cbz	r0, 801a6fe <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801a6f4:	6803      	ldr	r3, [r0, #0]
 801a6f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a6fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a6fc:	4718      	bx	r3
 801a6fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a702:	4770      	bx	lr

0801a704 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801a704:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a706:	460b      	mov	r3, r1
 801a708:	b085      	sub	sp, #20
 801a70a:	4604      	mov	r4, r0
 801a70c:	b901      	cbnz	r1, 801a710 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801a70e:	b322      	cbz	r2, 801a75a <_ZN8touchgfx8Drawable12moveRelativeEss+0x56>
 801a710:	1d27      	adds	r7, r4, #4
 801a712:	466e      	mov	r6, sp
 801a714:	88e5      	ldrh	r5, [r4, #6]
 801a716:	e897 0003 	ldmia.w	r7, {r0, r1}
 801a71a:	442a      	add	r2, r5
 801a71c:	e886 0003 	stmia.w	r6, {r0, r1}
 801a720:	88a1      	ldrh	r1, [r4, #4]
 801a722:	4620      	mov	r0, r4
 801a724:	b215      	sxth	r5, r2
 801a726:	4419      	add	r1, r3
 801a728:	6823      	ldr	r3, [r4, #0]
 801a72a:	b209      	sxth	r1, r1
 801a72c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a72e:	4798      	blx	r3
 801a730:	6823      	ldr	r3, [r4, #0]
 801a732:	4629      	mov	r1, r5
 801a734:	4620      	mov	r0, r4
 801a736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a738:	ad02      	add	r5, sp, #8
 801a73a:	4798      	blx	r3
 801a73c:	e897 0003 	ldmia.w	r7, {r0, r1}
 801a740:	e885 0003 	stmia.w	r5, {r0, r1}
 801a744:	6960      	ldr	r0, [r4, #20]
 801a746:	b150      	cbz	r0, 801a75e <_ZN8touchgfx8Drawable12moveRelativeEss+0x5a>
 801a748:	6803      	ldr	r3, [r0, #0]
 801a74a:	4631      	mov	r1, r6
 801a74c:	691b      	ldr	r3, [r3, #16]
 801a74e:	4798      	blx	r3
 801a750:	6960      	ldr	r0, [r4, #20]
 801a752:	6803      	ldr	r3, [r0, #0]
 801a754:	691b      	ldr	r3, [r3, #16]
 801a756:	4629      	mov	r1, r5
 801a758:	4798      	blx	r3
 801a75a:	b005      	add	sp, #20
 801a75c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a75e:	f7ff f82b 	bl	80197b8 <_ZN8touchgfx11Application11getInstanceEv>
 801a762:	6803      	ldr	r3, [r0, #0]
 801a764:	4631      	mov	r1, r6
 801a766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a768:	4798      	blx	r3
 801a76a:	f7ff f825 	bl	80197b8 <_ZN8touchgfx11Application11getInstanceEv>
 801a76e:	6803      	ldr	r3, [r0, #0]
 801a770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a772:	e7f0      	b.n	801a756 <_ZN8touchgfx8Drawable12moveRelativeEss+0x52>

0801a774 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801a774:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a776:	8882      	ldrh	r2, [r0, #4]
 801a778:	4605      	mov	r5, r0
 801a77a:	880b      	ldrh	r3, [r1, #0]
 801a77c:	460c      	mov	r4, r1
 801a77e:	4413      	add	r3, r2
 801a780:	800b      	strh	r3, [r1, #0]
 801a782:	884b      	ldrh	r3, [r1, #2]
 801a784:	88c2      	ldrh	r2, [r0, #6]
 801a786:	4413      	add	r3, r2
 801a788:	4602      	mov	r2, r0
 801a78a:	804b      	strh	r3, [r1, #2]
 801a78c:	466b      	mov	r3, sp
 801a78e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801a792:	6851      	ldr	r1, [r2, #4]
 801a794:	c303      	stmia	r3!, {r0, r1}
 801a796:	4621      	mov	r1, r4
 801a798:	4668      	mov	r0, sp
 801a79a:	f7fb f9af 	bl	8015afc <_ZN8touchgfx4RectaNERKS0_>
 801a79e:	466b      	mov	r3, sp
 801a7a0:	cb03      	ldmia	r3!, {r0, r1}
 801a7a2:	6020      	str	r0, [r4, #0]
 801a7a4:	6061      	str	r1, [r4, #4]
 801a7a6:	6968      	ldr	r0, [r5, #20]
 801a7a8:	b128      	cbz	r0, 801a7b6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801a7aa:	6803      	ldr	r3, [r0, #0]
 801a7ac:	691b      	ldr	r3, [r3, #16]
 801a7ae:	4621      	mov	r1, r4
 801a7b0:	4798      	blx	r3
 801a7b2:	b003      	add	sp, #12
 801a7b4:	bd30      	pop	{r4, r5, pc}
 801a7b6:	f7fe ffff 	bl	80197b8 <_ZN8touchgfx11Application11getInstanceEv>
 801a7ba:	6803      	ldr	r3, [r0, #0]
 801a7bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a7be:	e7f6      	b.n	801a7ae <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801a7c0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801a7c0:	b570      	push	{r4, r5, r6, lr}
 801a7c2:	8882      	ldrh	r2, [r0, #4]
 801a7c4:	460c      	mov	r4, r1
 801a7c6:	880b      	ldrh	r3, [r1, #0]
 801a7c8:	4605      	mov	r5, r0
 801a7ca:	4413      	add	r3, r2
 801a7cc:	800b      	strh	r3, [r1, #0]
 801a7ce:	884b      	ldrh	r3, [r1, #2]
 801a7d0:	88c2      	ldrh	r2, [r0, #6]
 801a7d2:	4413      	add	r3, r2
 801a7d4:	804b      	strh	r3, [r1, #2]
 801a7d6:	1d01      	adds	r1, r0, #4
 801a7d8:	4620      	mov	r0, r4
 801a7da:	f7fb f98f 	bl	8015afc <_ZN8touchgfx4RectaNERKS0_>
 801a7de:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801a7e2:	2b00      	cmp	r3, #0
 801a7e4:	dd0b      	ble.n	801a7fe <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801a7e6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801a7ea:	2b00      	cmp	r3, #0
 801a7ec:	dd07      	ble.n	801a7fe <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801a7ee:	6968      	ldr	r0, [r5, #20]
 801a7f0:	b128      	cbz	r0, 801a7fe <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801a7f2:	6803      	ldr	r3, [r0, #0]
 801a7f4:	4621      	mov	r1, r4
 801a7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a7f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a7fc:	4718      	bx	r3
 801a7fe:	bd70      	pop	{r4, r5, r6, pc}

0801a800 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801a800:	b510      	push	{r4, lr}
 801a802:	2300      	movs	r3, #0
 801a804:	4604      	mov	r4, r0
 801a806:	4608      	mov	r0, r1
 801a808:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801a80c:	8023      	strh	r3, [r4, #0]
 801a80e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a812:	8063      	strh	r3, [r4, #2]
 801a814:	6803      	ldr	r3, [r0, #0]
 801a816:	80a1      	strh	r1, [r4, #4]
 801a818:	4621      	mov	r1, r4
 801a81a:	80e2      	strh	r2, [r4, #6]
 801a81c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a81e:	4798      	blx	r3
 801a820:	4620      	mov	r0, r4
 801a822:	bd10      	pop	{r4, pc}

0801a824 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801a824:	b530      	push	{r4, r5, lr}
 801a826:	8083      	strh	r3, [r0, #4]
 801a828:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801a82c:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801a830:	7183      	strb	r3, [r0, #6]
 801a832:	79c3      	ldrb	r3, [r0, #7]
 801a834:	6101      	str	r1, [r0, #16]
 801a836:	f365 0306 	bfi	r3, r5, #0, #7
 801a83a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801a83e:	8282      	strh	r2, [r0, #20]
 801a840:	f365 13c7 	bfi	r3, r5, #7, #1
 801a844:	71c3      	strb	r3, [r0, #7]
 801a846:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801a84a:	7203      	strb	r3, [r0, #8]
 801a84c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801a850:	7243      	strb	r3, [r0, #9]
 801a852:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801a856:	8143      	strh	r3, [r0, #10]
 801a858:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801a85c:	8183      	strh	r3, [r0, #12]
 801a85e:	4b01      	ldr	r3, [pc, #4]	; (801a864 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801a860:	6003      	str	r3, [r0, #0]
 801a862:	bd30      	pop	{r4, r5, pc}
 801a864:	0802dea0 	.word	0x0802dea0

0801a868 <_ZNK8touchgfx9ConstFont4findEt>:
 801a868:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a86a:	6904      	ldr	r4, [r0, #16]
 801a86c:	b3bc      	cbz	r4, 801a8de <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a86e:	88a3      	ldrh	r3, [r4, #4]
 801a870:	8a82      	ldrh	r2, [r0, #20]
 801a872:	1acb      	subs	r3, r1, r3
 801a874:	f102 32ff 	add.w	r2, r2, #4294967295
 801a878:	d431      	bmi.n	801a8de <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a87a:	4293      	cmp	r3, r2
 801a87c:	dd0c      	ble.n	801a898 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801a87e:	230e      	movs	r3, #14
 801a880:	fb03 4302 	mla	r3, r3, r2, r4
 801a884:	889b      	ldrh	r3, [r3, #4]
 801a886:	1a5b      	subs	r3, r3, r1
 801a888:	1ad3      	subs	r3, r2, r3
 801a88a:	429a      	cmp	r2, r3
 801a88c:	db27      	blt.n	801a8de <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a88e:	2b00      	cmp	r3, #0
 801a890:	bfbc      	itt	lt
 801a892:	2302      	movlt	r3, #2
 801a894:	fb92 f3f3 	sdivlt	r3, r2, r3
 801a898:	2500      	movs	r5, #0
 801a89a:	260e      	movs	r6, #14
 801a89c:	4295      	cmp	r5, r2
 801a89e:	dc1e      	bgt.n	801a8de <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a8a0:	fb06 4003 	mla	r0, r6, r3, r4
 801a8a4:	8887      	ldrh	r7, [r0, #4]
 801a8a6:	42b9      	cmp	r1, r7
 801a8a8:	d01a      	beq.n	801a8e0 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801a8aa:	d20d      	bcs.n	801a8c8 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801a8ac:	1e5a      	subs	r2, r3, #1
 801a8ae:	4295      	cmp	r5, r2
 801a8b0:	dc15      	bgt.n	801a8de <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a8b2:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801a8b6:	1a5b      	subs	r3, r3, r1
 801a8b8:	1ad3      	subs	r3, r2, r3
 801a8ba:	429a      	cmp	r2, r3
 801a8bc:	db0f      	blt.n	801a8de <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a8be:	429d      	cmp	r5, r3
 801a8c0:	ddec      	ble.n	801a89c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801a8c2:	1953      	adds	r3, r2, r5
 801a8c4:	105b      	asrs	r3, r3, #1
 801a8c6:	e7e9      	b.n	801a89c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801a8c8:	1c5d      	adds	r5, r3, #1
 801a8ca:	42aa      	cmp	r2, r5
 801a8cc:	db07      	blt.n	801a8de <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a8ce:	8a43      	ldrh	r3, [r0, #18]
 801a8d0:	1acb      	subs	r3, r1, r3
 801a8d2:	442b      	add	r3, r5
 801a8d4:	429d      	cmp	r5, r3
 801a8d6:	dc02      	bgt.n	801a8de <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a8d8:	429a      	cmp	r2, r3
 801a8da:	dadf      	bge.n	801a89c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801a8dc:	e7f1      	b.n	801a8c2 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801a8de:	2000      	movs	r0, #0
 801a8e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a8e2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801a8e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a8e4:	4604      	mov	r4, r0
 801a8e6:	4617      	mov	r7, r2
 801a8e8:	461e      	mov	r6, r3
 801a8ea:	b911      	cbnz	r1, 801a8f2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801a8ec:	2500      	movs	r5, #0
 801a8ee:	4628      	mov	r0, r5
 801a8f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a8f2:	290a      	cmp	r1, #10
 801a8f4:	d0fa      	beq.n	801a8ec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a8f6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801a8fa:	4291      	cmp	r1, r2
 801a8fc:	d0f6      	beq.n	801a8ec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a8fe:	f242 020b 	movw	r2, #8203	; 0x200b
 801a902:	4291      	cmp	r1, r2
 801a904:	d0f2      	beq.n	801a8ec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a906:	f7ff ffaf 	bl	801a868 <_ZNK8touchgfx9ConstFont4findEt>
 801a90a:	4605      	mov	r5, r0
 801a90c:	b950      	cbnz	r0, 801a924 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801a90e:	6823      	ldr	r3, [r4, #0]
 801a910:	4620      	mov	r0, r4
 801a912:	691b      	ldr	r3, [r3, #16]
 801a914:	4798      	blx	r3
 801a916:	4601      	mov	r1, r0
 801a918:	4620      	mov	r0, r4
 801a91a:	f7ff ffa5 	bl	801a868 <_ZNK8touchgfx9ConstFont4findEt>
 801a91e:	4605      	mov	r5, r0
 801a920:	2800      	cmp	r0, #0
 801a922:	d0e3      	beq.n	801a8ec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a924:	6823      	ldr	r3, [r4, #0]
 801a926:	4629      	mov	r1, r5
 801a928:	4620      	mov	r0, r4
 801a92a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a92c:	4798      	blx	r3
 801a92e:	6038      	str	r0, [r7, #0]
 801a930:	6823      	ldr	r3, [r4, #0]
 801a932:	4620      	mov	r0, r4
 801a934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a936:	4798      	blx	r3
 801a938:	7030      	strb	r0, [r6, #0]
 801a93a:	e7d8      	b.n	801a8ee <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801a93c <_ZN8touchgfx6memsetEPvhm>:
 801a93c:	4402      	add	r2, r0
 801a93e:	4290      	cmp	r0, r2
 801a940:	d002      	beq.n	801a948 <_ZN8touchgfx6memsetEPvhm+0xc>
 801a942:	f800 1b01 	strb.w	r1, [r0], #1
 801a946:	e7fa      	b.n	801a93e <_ZN8touchgfx6memsetEPvhm+0x2>
 801a948:	4770      	bx	lr

0801a94a <_ZN8touchgfx4clzuEm>:
 801a94a:	4603      	mov	r3, r0
 801a94c:	b1c8      	cbz	r0, 801a982 <_ZN8touchgfx4clzuEm+0x38>
 801a94e:	0c02      	lsrs	r2, r0, #16
 801a950:	0412      	lsls	r2, r2, #16
 801a952:	b9a2      	cbnz	r2, 801a97e <_ZN8touchgfx4clzuEm+0x34>
 801a954:	0403      	lsls	r3, r0, #16
 801a956:	2010      	movs	r0, #16
 801a958:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801a95c:	bf04      	itt	eq
 801a95e:	021b      	lsleq	r3, r3, #8
 801a960:	3008      	addeq	r0, #8
 801a962:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801a966:	bf04      	itt	eq
 801a968:	011b      	lsleq	r3, r3, #4
 801a96a:	3004      	addeq	r0, #4
 801a96c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801a970:	bf04      	itt	eq
 801a972:	009b      	lsleq	r3, r3, #2
 801a974:	3002      	addeq	r0, #2
 801a976:	2b00      	cmp	r3, #0
 801a978:	db04      	blt.n	801a984 <_ZN8touchgfx4clzuEm+0x3a>
 801a97a:	3001      	adds	r0, #1
 801a97c:	4770      	bx	lr
 801a97e:	2000      	movs	r0, #0
 801a980:	e7ea      	b.n	801a958 <_ZN8touchgfx4clzuEm+0xe>
 801a982:	2020      	movs	r0, #32
 801a984:	4770      	bx	lr

0801a986 <_ZN8touchgfx7muldivuEmmmRm>:
 801a986:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a98a:	4680      	mov	r8, r0
 801a98c:	460f      	mov	r7, r1
 801a98e:	4615      	mov	r5, r2
 801a990:	461e      	mov	r6, r3
 801a992:	f7ff ffda 	bl	801a94a <_ZN8touchgfx4clzuEm>
 801a996:	b998      	cbnz	r0, 801a9c0 <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 801a998:	4608      	mov	r0, r1
 801a99a:	f7ff ffd6 	bl	801a94a <_ZN8touchgfx4clzuEm>
 801a99e:	2800      	cmp	r0, #0
 801a9a0:	dd08      	ble.n	801a9b4 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 801a9a2:	4633      	mov	r3, r6
 801a9a4:	462a      	mov	r2, r5
 801a9a6:	4641      	mov	r1, r8
 801a9a8:	4638      	mov	r0, r7
 801a9aa:	f7ff ffec 	bl	801a986 <_ZN8touchgfx7muldivuEmmmRm>
 801a9ae:	b003      	add	sp, #12
 801a9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9b4:	f04f 33ff 	mov.w	r3, #4294967295
 801a9b8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801a9bc:	6033      	str	r3, [r6, #0]
 801a9be:	e7f6      	b.n	801a9ae <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801a9c0:	fa31 f900 	lsrs.w	r9, r1, r0
 801a9c4:	fb01 f308 	mul.w	r3, r1, r8
 801a9c8:	d105      	bne.n	801a9d6 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 801a9ca:	fbb3 f0f5 	udiv	r0, r3, r5
 801a9ce:	fb05 3510 	mls	r5, r5, r0, r3
 801a9d2:	6035      	str	r5, [r6, #0]
 801a9d4:	e7eb      	b.n	801a9ae <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801a9d6:	2301      	movs	r3, #1
 801a9d8:	fa08 fb00 	lsl.w	fp, r8, r0
 801a9dc:	462a      	mov	r2, r5
 801a9de:	4641      	mov	r1, r8
 801a9e0:	fa03 f000 	lsl.w	r0, r3, r0
 801a9e4:	4633      	mov	r3, r6
 801a9e6:	fbbb faf5 	udiv	sl, fp, r5
 801a9ea:	3801      	subs	r0, #1
 801a9ec:	fb09 f40a 	mul.w	r4, r9, sl
 801a9f0:	4038      	ands	r0, r7
 801a9f2:	f7ff ffc8 	bl	801a986 <_ZN8touchgfx7muldivuEmmmRm>
 801a9f6:	462a      	mov	r2, r5
 801a9f8:	4607      	mov	r7, r0
 801a9fa:	ab01      	add	r3, sp, #4
 801a9fc:	fb05 b11a 	mls	r1, r5, sl, fp
 801aa00:	4648      	mov	r0, r9
 801aa02:	f7ff ffc0 	bl	801a986 <_ZN8touchgfx7muldivuEmmmRm>
 801aa06:	9b01      	ldr	r3, [sp, #4]
 801aa08:	6832      	ldr	r2, [r6, #0]
 801aa0a:	441a      	add	r2, r3
 801aa0c:	fbb2 f3f5 	udiv	r3, r2, r5
 801aa10:	441c      	add	r4, r3
 801aa12:	fb05 2513 	mls	r5, r5, r3, r2
 801aa16:	443c      	add	r4, r7
 801aa18:	4420      	add	r0, r4
 801aa1a:	e7da      	b.n	801a9d2 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0801aa1c <_ZN8touchgfx6muldivElllRl>:
 801aa1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801aa1e:	2800      	cmp	r0, #0
 801aa20:	461e      	mov	r6, r3
 801aa22:	bfba      	itte	lt
 801aa24:	4240      	neglt	r0, r0
 801aa26:	f04f 34ff 	movlt.w	r4, #4294967295
 801aa2a:	2401      	movge	r4, #1
 801aa2c:	2900      	cmp	r1, #0
 801aa2e:	bfbc      	itt	lt
 801aa30:	4249      	neglt	r1, r1
 801aa32:	4264      	neglt	r4, r4
 801aa34:	2a00      	cmp	r2, #0
 801aa36:	bfb6      	itet	lt
 801aa38:	4265      	neglt	r5, r4
 801aa3a:	4625      	movge	r5, r4
 801aa3c:	4252      	neglt	r2, r2
 801aa3e:	4288      	cmp	r0, r1
 801aa40:	bfc2      	ittt	gt
 801aa42:	4603      	movgt	r3, r0
 801aa44:	4608      	movgt	r0, r1
 801aa46:	4619      	movgt	r1, r3
 801aa48:	ab01      	add	r3, sp, #4
 801aa4a:	f7ff ff9c 	bl	801a986 <_ZN8touchgfx7muldivuEmmmRm>
 801aa4e:	9b01      	ldr	r3, [sp, #4]
 801aa50:	4368      	muls	r0, r5
 801aa52:	435c      	muls	r4, r3
 801aa54:	6034      	str	r4, [r6, #0]
 801aa56:	b002      	add	sp, #8
 801aa58:	bd70      	pop	{r4, r5, r6, pc}

0801aa5a <_ZN8touchgfx6muldivElll>:
 801aa5a:	b513      	push	{r0, r1, r4, lr}
 801aa5c:	4614      	mov	r4, r2
 801aa5e:	ab01      	add	r3, sp, #4
 801aa60:	f7ff ffdc 	bl	801aa1c <_ZN8touchgfx6muldivElllRl>
 801aa64:	2800      	cmp	r0, #0
 801aa66:	ea84 72e4 	eor.w	r2, r4, r4, asr #31
 801aa6a:	9b01      	ldr	r3, [sp, #4]
 801aa6c:	eba2 72e4 	sub.w	r2, r2, r4, asr #31
 801aa70:	db0a      	blt.n	801aa88 <_ZN8touchgfx6muldivElll+0x2e>
 801aa72:	2b00      	cmp	r3, #0
 801aa74:	f102 0201 	add.w	r2, r2, #1
 801aa78:	bfb8      	it	lt
 801aa7a:	425b      	neglt	r3, r3
 801aa7c:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 801aa80:	db00      	blt.n	801aa84 <_ZN8touchgfx6muldivElll+0x2a>
 801aa82:	3001      	adds	r0, #1
 801aa84:	b002      	add	sp, #8
 801aa86:	bd10      	pop	{r4, pc}
 801aa88:	2b00      	cmp	r3, #0
 801aa8a:	bfb8      	it	lt
 801aa8c:	425b      	neglt	r3, r3
 801aa8e:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 801aa92:	bfc8      	it	gt
 801aa94:	f100 30ff 	addgt.w	r0, r0, #4294967295
 801aa98:	e7f4      	b.n	801aa84 <_ZN8touchgfx6muldivElll+0x2a>

0801aa9a <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801aa9a:	2000      	movs	r0, #0
 801aa9c:	4770      	bx	lr

0801aa9e <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801aa9e:	2001      	movs	r0, #1
 801aaa0:	4770      	bx	lr

0801aaa2 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801aaa2:	2002      	movs	r0, #2
 801aaa4:	4770      	bx	lr

0801aaa6 <_ZN8touchgfx12GestureEventD1Ev>:
 801aaa6:	4770      	bx	lr

0801aaa8 <_ZN8touchgfx9DragEventD1Ev>:
 801aaa8:	4770      	bx	lr

0801aaaa <_ZN8touchgfx10ClickEventD1Ev>:
 801aaaa:	4770      	bx	lr

0801aaac <_ZN8touchgfx10ClickEventD0Ev>:
 801aaac:	b510      	push	{r4, lr}
 801aaae:	4604      	mov	r4, r0
 801aab0:	210c      	movs	r1, #12
 801aab2:	f00b fe50 	bl	8026756 <_ZdlPvj>
 801aab6:	4620      	mov	r0, r4
 801aab8:	bd10      	pop	{r4, pc}

0801aaba <_ZN8touchgfx9DragEventD0Ev>:
 801aaba:	b510      	push	{r4, lr}
 801aabc:	4604      	mov	r4, r0
 801aabe:	2110      	movs	r1, #16
 801aac0:	f00b fe49 	bl	8026756 <_ZdlPvj>
 801aac4:	4620      	mov	r0, r4
 801aac6:	bd10      	pop	{r4, pc}

0801aac8 <_ZN8touchgfx12GestureEventD0Ev>:
 801aac8:	b510      	push	{r4, lr}
 801aaca:	4604      	mov	r4, r0
 801aacc:	210c      	movs	r1, #12
 801aace:	f00b fe42 	bl	8026756 <_ZdlPvj>
 801aad2:	4620      	mov	r0, r4
 801aad4:	bd10      	pop	{r4, pc}
	...

0801aad8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801aad8:	b530      	push	{r4, r5, lr}
 801aada:	460d      	mov	r5, r1
 801aadc:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801aade:	b087      	sub	sp, #28
 801aae0:	4604      	mov	r4, r0
 801aae2:	b301      	cbz	r1, 801ab26 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801aae4:	a801      	add	r0, sp, #4
 801aae6:	f7ff fe8b 	bl	801a800 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801aaea:	892a      	ldrh	r2, [r5, #8]
 801aaec:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801aaf0:	7928      	ldrb	r0, [r5, #4]
 801aaf2:	1ad2      	subs	r2, r2, r3
 801aaf4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801aaf6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801aafa:	441a      	add	r2, r3
 801aafc:	896b      	ldrh	r3, [r5, #10]
 801aafe:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801ab02:	f88d 0010 	strb.w	r0, [sp, #16]
 801ab06:	1b5b      	subs	r3, r3, r5
 801ab08:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801ab0a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801ab0c:	442b      	add	r3, r5
 801ab0e:	4d07      	ldr	r5, [pc, #28]	; (801ab2c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801ab10:	f8ad 1012 	strh.w	r1, [sp, #18]
 801ab14:	a903      	add	r1, sp, #12
 801ab16:	9503      	str	r5, [sp, #12]
 801ab18:	f8ad 2014 	strh.w	r2, [sp, #20]
 801ab1c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ab20:	6803      	ldr	r3, [r0, #0]
 801ab22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ab24:	4798      	blx	r3
 801ab26:	b007      	add	sp, #28
 801ab28:	bd30      	pop	{r4, r5, pc}
 801ab2a:	bf00      	nop
 801ab2c:	0802df20 	.word	0x0802df20

0801ab30 <_ZNK8touchgfx4Rect9intersectEss>:
 801ab30:	b510      	push	{r4, lr}
 801ab32:	f9b0 3000 	ldrsh.w	r3, [r0]
 801ab36:	428b      	cmp	r3, r1
 801ab38:	dc10      	bgt.n	801ab5c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801ab3a:	8884      	ldrh	r4, [r0, #4]
 801ab3c:	4423      	add	r3, r4
 801ab3e:	b21b      	sxth	r3, r3
 801ab40:	4299      	cmp	r1, r3
 801ab42:	da0b      	bge.n	801ab5c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801ab44:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801ab48:	4293      	cmp	r3, r2
 801ab4a:	dc07      	bgt.n	801ab5c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801ab4c:	88c0      	ldrh	r0, [r0, #6]
 801ab4e:	4418      	add	r0, r3
 801ab50:	b200      	sxth	r0, r0
 801ab52:	4282      	cmp	r2, r0
 801ab54:	bfac      	ite	ge
 801ab56:	2000      	movge	r0, #0
 801ab58:	2001      	movlt	r0, #1
 801ab5a:	bd10      	pop	{r4, pc}
 801ab5c:	2000      	movs	r0, #0
 801ab5e:	e7fc      	b.n	801ab5a <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801ab60 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801ab60:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ab62:	460c      	mov	r4, r1
 801ab64:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801ab66:	b089      	sub	sp, #36	; 0x24
 801ab68:	4605      	mov	r5, r0
 801ab6a:	2900      	cmp	r1, #0
 801ab6c:	d054      	beq.n	801ac18 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801ab6e:	4668      	mov	r0, sp
 801ab70:	f7ff fe46 	bl	801a800 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ab74:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801ab76:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801ab78:	4668      	mov	r0, sp
 801ab7a:	8922      	ldrh	r2, [r4, #8]
 801ab7c:	88e1      	ldrh	r1, [r4, #6]
 801ab7e:	443a      	add	r2, r7
 801ab80:	4431      	add	r1, r6
 801ab82:	b212      	sxth	r2, r2
 801ab84:	b209      	sxth	r1, r1
 801ab86:	f7ff ffd3 	bl	801ab30 <_ZNK8touchgfx4Rect9intersectEss>
 801ab8a:	b1d0      	cbz	r0, 801abc2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801ab8c:	89a2      	ldrh	r2, [r4, #12]
 801ab8e:	4668      	mov	r0, sp
 801ab90:	8961      	ldrh	r1, [r4, #10]
 801ab92:	443a      	add	r2, r7
 801ab94:	4431      	add	r1, r6
 801ab96:	b212      	sxth	r2, r2
 801ab98:	b209      	sxth	r1, r1
 801ab9a:	f7ff ffc9 	bl	801ab30 <_ZNK8touchgfx4Rect9intersectEss>
 801ab9e:	4603      	mov	r3, r0
 801aba0:	b978      	cbnz	r0, 801abc2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801aba2:	4a1e      	ldr	r2, [pc, #120]	; (801ac1c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801aba4:	a904      	add	r1, sp, #16
 801aba6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801aba8:	9204      	str	r2, [sp, #16]
 801abaa:	2202      	movs	r2, #2
 801abac:	f8ad 3016 	strh.w	r3, [sp, #22]
 801abb0:	f88d 2014 	strb.w	r2, [sp, #20]
 801abb4:	f8ad 3018 	strh.w	r3, [sp, #24]
 801abb8:	f8ad 301a 	strh.w	r3, [sp, #26]
 801abbc:	6803      	ldr	r3, [r0, #0]
 801abbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801abc0:	4798      	blx	r3
 801abc2:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801abc4:	a802      	add	r0, sp, #8
 801abc6:	f7ff fe1b 	bl	801a800 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801abca:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801abce:	88e0      	ldrh	r0, [r4, #6]
 801abd0:	8961      	ldrh	r1, [r4, #10]
 801abd2:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801abd6:	1a80      	subs	r0, r0, r2
 801abd8:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801abdc:	1a89      	subs	r1, r1, r2
 801abde:	8923      	ldrh	r3, [r4, #8]
 801abe0:	4460      	add	r0, ip
 801abe2:	89a2      	ldrh	r2, [r4, #12]
 801abe4:	4461      	add	r1, ip
 801abe6:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801abe8:	eba3 030e 	sub.w	r3, r3, lr
 801abec:	eba2 020e 	sub.w	r2, r2, lr
 801abf0:	f8ad 0016 	strh.w	r0, [sp, #22]
 801abf4:	7927      	ldrb	r7, [r4, #4]
 801abf6:	4433      	add	r3, r6
 801abf8:	4432      	add	r2, r6
 801abfa:	4c09      	ldr	r4, [pc, #36]	; (801ac20 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801abfc:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801abfe:	f8ad 101a 	strh.w	r1, [sp, #26]
 801ac02:	a904      	add	r1, sp, #16
 801ac04:	9404      	str	r4, [sp, #16]
 801ac06:	f88d 7014 	strb.w	r7, [sp, #20]
 801ac0a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801ac0e:	f8ad 201c 	strh.w	r2, [sp, #28]
 801ac12:	6803      	ldr	r3, [r0, #0]
 801ac14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ac16:	4798      	blx	r3
 801ac18:	b009      	add	sp, #36	; 0x24
 801ac1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ac1c:	0802def8 	.word	0x0802def8
 801ac20:	0802df0c 	.word	0x0802df0c

0801ac24 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801ac24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac28:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801ac2c:	b0a1      	sub	sp, #132	; 0x84
 801ac2e:	4604      	mov	r4, r0
 801ac30:	460d      	mov	r5, r1
 801ac32:	790b      	ldrb	r3, [r1, #4]
 801ac34:	f1b9 0f00 	cmp.w	r9, #0
 801ac38:	d00f      	beq.n	801ac5a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	f040 80a2 	bne.w	801ad84 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801ac40:	b021      	add	sp, #132	; 0x84
 801ac42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac46:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801ac4a:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801ac4e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801ac52:	1d20      	adds	r0, r4, #4
 801ac54:	f7fa fea0 	bl	8015998 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801ac58:	e094      	b.n	801ad84 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801ac5a:	2b00      	cmp	r3, #0
 801ac5c:	d1f0      	bne.n	801ac40 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801ac5e:	4b5f      	ldr	r3, [pc, #380]	; (801addc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801ac60:	681b      	ldr	r3, [r3, #0]
 801ac62:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801ac66:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801ac6a:	f1ba 0f03 	cmp.w	sl, #3
 801ac6e:	ddea      	ble.n	801ac46 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801ac70:	f1ba 0f0c 	cmp.w	sl, #12
 801ac74:	f04f 0303 	mov.w	r3, #3
 801ac78:	f04f 0600 	mov.w	r6, #0
 801ac7c:	4958      	ldr	r1, [pc, #352]	; (801ade0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801ac7e:	bfd8      	it	le
 801ac80:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801ac84:	960a      	str	r6, [sp, #40]	; 0x28
 801ac86:	bfd8      	it	le
 801ac88:	fb92 f3f3 	sdivle	r3, r2, r3
 801ac8c:	9301      	str	r3, [sp, #4]
 801ac8e:	4b55      	ldr	r3, [pc, #340]	; (801ade4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801ac90:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ac94:	4b54      	ldr	r3, [pc, #336]	; (801ade8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801ac96:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801ac9a:	2248      	movs	r2, #72	; 0x48
 801ac9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801aca0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801aca4:	ab0e      	add	r3, sp, #56	; 0x38
 801aca6:	4618      	mov	r0, r3
 801aca8:	f00b ff08 	bl	8026abc <memcpy>
 801acac:	f04f 32ff 	mov.w	r2, #4294967295
 801acb0:	f8cd a008 	str.w	sl, [sp, #8]
 801acb4:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801acb8:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801acbc:	46b3      	mov	fp, r6
 801acbe:	fb93 f3f2 	sdiv	r3, r3, r2
 801acc2:	b29b      	uxth	r3, r3
 801acc4:	9303      	str	r3, [sp, #12]
 801acc6:	2300      	movs	r3, #0
 801acc8:	9a03      	ldr	r2, [sp, #12]
 801acca:	88ef      	ldrh	r7, [r5, #6]
 801accc:	a80a      	add	r0, sp, #40	; 0x28
 801acce:	9309      	str	r3, [sp, #36]	; 0x24
 801acd0:	9b07      	ldr	r3, [sp, #28]
 801acd2:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801acd6:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801acda:	fb13 f302 	smulbb	r3, r3, r2
 801acde:	b29b      	uxth	r3, r3
 801ace0:	9304      	str	r3, [sp, #16]
 801ace2:	9b07      	ldr	r3, [sp, #28]
 801ace4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801ace8:	685b      	ldr	r3, [r3, #4]
 801acea:	fb13 f302 	smulbb	r3, r3, r2
 801acee:	b29b      	uxth	r3, r3
 801acf0:	9305      	str	r3, [sp, #20]
 801acf2:	9b04      	ldr	r3, [sp, #16]
 801acf4:	441f      	add	r7, r3
 801acf6:	9b05      	ldr	r3, [sp, #20]
 801acf8:	4498      	add	r8, r3
 801acfa:	b23f      	sxth	r7, r7
 801acfc:	fa0f f888 	sxth.w	r8, r8
 801ad00:	4639      	mov	r1, r7
 801ad02:	4642      	mov	r2, r8
 801ad04:	f7ff ff14 	bl	801ab30 <_ZNK8touchgfx4Rect9intersectEss>
 801ad08:	b380      	cbz	r0, 801ad6c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801ad0a:	4639      	mov	r1, r7
 801ad0c:	ab09      	add	r3, sp, #36	; 0x24
 801ad0e:	4642      	mov	r2, r8
 801ad10:	1d20      	adds	r0, r4, #4
 801ad12:	f7fa fe41 	bl	8015998 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801ad16:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ad18:	b341      	cbz	r1, 801ad6c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801ad1a:	4549      	cmp	r1, r9
 801ad1c:	d026      	beq.n	801ad6c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801ad1e:	a80c      	add	r0, sp, #48	; 0x30
 801ad20:	f7ff fd6e 	bl	801a800 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ad24:	2002      	movs	r0, #2
 801ad26:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801ad2a:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801ad2e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801ad32:	fb92 f2f0 	sdiv	r2, r2, r0
 801ad36:	440a      	add	r2, r1
 801ad38:	1a99      	subs	r1, r3, r2
 801ad3a:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801ad3e:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801ad42:	fb93 f3f0 	sdiv	r3, r3, r0
 801ad46:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801ad4a:	4403      	add	r3, r0
 801ad4c:	1ad3      	subs	r3, r2, r3
 801ad4e:	9a06      	ldr	r2, [sp, #24]
 801ad50:	435b      	muls	r3, r3
 801ad52:	fb01 3301 	mla	r3, r1, r1, r3
 801ad56:	4293      	cmp	r3, r2
 801ad58:	d208      	bcs.n	801ad6c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801ad5a:	9a04      	ldr	r2, [sp, #16]
 801ad5c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801ad60:	86a2      	strh	r2, [r4, #52]	; 0x34
 801ad62:	9a05      	ldr	r2, [sp, #20]
 801ad64:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801ad68:	86e2      	strh	r2, [r4, #54]	; 0x36
 801ad6a:	9306      	str	r3, [sp, #24]
 801ad6c:	f10b 0b02 	add.w	fp, fp, #2
 801ad70:	f1bb 0f08 	cmp.w	fp, #8
 801ad74:	dda7      	ble.n	801acc6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801ad76:	9b02      	ldr	r3, [sp, #8]
 801ad78:	3601      	adds	r6, #1
 801ad7a:	4453      	add	r3, sl
 801ad7c:	9302      	str	r3, [sp, #8]
 801ad7e:	9b01      	ldr	r3, [sp, #4]
 801ad80:	42b3      	cmp	r3, r6
 801ad82:	d199      	bne.n	801acb8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801ad84:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801ad86:	2900      	cmp	r1, #0
 801ad88:	f43f af5a 	beq.w	801ac40 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801ad8c:	a80c      	add	r0, sp, #48	; 0x30
 801ad8e:	2600      	movs	r6, #0
 801ad90:	f7ff fd36 	bl	801a800 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ad94:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801ad98:	88ea      	ldrh	r2, [r5, #6]
 801ad9a:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801ad9e:	1ad2      	subs	r2, r2, r3
 801ada0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801ada2:	7929      	ldrb	r1, [r5, #4]
 801ada4:	441a      	add	r2, r3
 801ada6:	892b      	ldrh	r3, [r5, #8]
 801ada8:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801adac:	a90e      	add	r1, sp, #56	; 0x38
 801adae:	1a1b      	subs	r3, r3, r0
 801adb0:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801adb2:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801adb6:	4403      	add	r3, r0
 801adb8:	480c      	ldr	r0, [pc, #48]	; (801adec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801adba:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801adbe:	900e      	str	r0, [sp, #56]	; 0x38
 801adc0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801adc2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801adc6:	6803      	ldr	r3, [r0, #0]
 801adc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801adca:	4798      	blx	r3
 801adcc:	792b      	ldrb	r3, [r5, #4]
 801adce:	2b00      	cmp	r3, #0
 801add0:	f43f af36 	beq.w	801ac40 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801add4:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801add8:	e732      	b.n	801ac40 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801adda:	bf00      	nop
 801addc:	20056780 	.word	0x20056780
 801ade0:	0802be2c 	.word	0x0802be2c
 801ade4:	20056774 	.word	0x20056774
 801ade8:	20056776 	.word	0x20056776
 801adec:	0802def8 	.word	0x0802def8

0801adf0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801adf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801adf2:	4604      	mov	r4, r0
 801adf4:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801adf8:	3201      	adds	r2, #1
 801adfa:	d112      	bne.n	801ae22 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801adfc:	2500      	movs	r5, #0
 801adfe:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801ae02:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801ae06:	6803      	ldr	r3, [r0, #0]
 801ae08:	9500      	str	r5, [sp, #0]
 801ae0a:	466d      	mov	r5, sp
 801ae0c:	f8ad 1004 	strh.w	r1, [sp, #4]
 801ae10:	f8ad 2006 	strh.w	r2, [sp, #6]
 801ae14:	4629      	mov	r1, r5
 801ae16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ae18:	4798      	blx	r3
 801ae1a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801ae1e:	e884 0003 	stmia.w	r4, {r0, r1}
 801ae22:	4620      	mov	r0, r4
 801ae24:	b003      	add	sp, #12
 801ae26:	bd30      	pop	{r4, r5, pc}

0801ae28 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801ae28:	b513      	push	{r0, r1, r4, lr}
 801ae2a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801ae2e:	4604      	mov	r4, r0
 801ae30:	3301      	adds	r3, #1
 801ae32:	d109      	bne.n	801ae48 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801ae34:	4601      	mov	r1, r0
 801ae36:	4668      	mov	r0, sp
 801ae38:	f7ff fce2 	bl	801a800 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ae3c:	f8bd 3000 	ldrh.w	r3, [sp]
 801ae40:	8423      	strh	r3, [r4, #32]
 801ae42:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801ae46:	8463      	strh	r3, [r4, #34]	; 0x22
 801ae48:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801ae4c:	b002      	add	sp, #8
 801ae4e:	bd10      	pop	{r4, pc}

0801ae50 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801ae50:	b513      	push	{r0, r1, r4, lr}
 801ae52:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801ae56:	4604      	mov	r4, r0
 801ae58:	3301      	adds	r3, #1
 801ae5a:	d109      	bne.n	801ae70 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801ae5c:	4601      	mov	r1, r0
 801ae5e:	4668      	mov	r0, sp
 801ae60:	f7ff fcce 	bl	801a800 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ae64:	f8bd 3000 	ldrh.w	r3, [sp]
 801ae68:	8423      	strh	r3, [r4, #32]
 801ae6a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801ae6e:	8463      	strh	r3, [r4, #34]	; 0x22
 801ae70:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801ae74:	b002      	add	sp, #8
 801ae76:	bd10      	pop	{r4, pc}

0801ae78 <_ZN8touchgfx6ScreenC1Ev>:
 801ae78:	b570      	push	{r4, r5, r6, lr}
 801ae7a:	4b17      	ldr	r3, [pc, #92]	; (801aed8 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801ae7c:	4605      	mov	r5, r0
 801ae7e:	4a17      	ldr	r2, [pc, #92]	; (801aedc <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801ae80:	2101      	movs	r1, #1
 801ae82:	f845 3b04 	str.w	r3, [r5], #4
 801ae86:	2300      	movs	r3, #0
 801ae88:	6042      	str	r2, [r0, #4]
 801ae8a:	4604      	mov	r4, r0
 801ae8c:	8103      	strh	r3, [r0, #8]
 801ae8e:	8143      	strh	r3, [r0, #10]
 801ae90:	8183      	strh	r3, [r0, #12]
 801ae92:	81c3      	strh	r3, [r0, #14]
 801ae94:	8203      	strh	r3, [r0, #16]
 801ae96:	8243      	strh	r3, [r0, #18]
 801ae98:	8283      	strh	r3, [r0, #20]
 801ae9a:	82c3      	strh	r3, [r0, #22]
 801ae9c:	6203      	str	r3, [r0, #32]
 801ae9e:	8483      	strh	r3, [r0, #36]	; 0x24
 801aea0:	84c3      	strh	r3, [r0, #38]	; 0x26
 801aea2:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801aea6:	6343      	str	r3, [r0, #52]	; 0x34
 801aea8:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801aeac:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801aeb0:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801aeb4:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801aeb8:	4b09      	ldr	r3, [pc, #36]	; (801aee0 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801aeba:	4628      	mov	r0, r5
 801aebc:	f9b3 6000 	ldrsh.w	r6, [r3]
 801aec0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801aec2:	4a08      	ldr	r2, [pc, #32]	; (801aee4 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801aec4:	f9b2 1000 	ldrsh.w	r1, [r2]
 801aec8:	4798      	blx	r3
 801aeca:	6863      	ldr	r3, [r4, #4]
 801aecc:	4628      	mov	r0, r5
 801aece:	4631      	mov	r1, r6
 801aed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aed2:	4798      	blx	r3
 801aed4:	4620      	mov	r0, r4
 801aed6:	bd70      	pop	{r4, r5, r6, pc}
 801aed8:	0802df34 	.word	0x0802df34
 801aedc:	0802cb54 	.word	0x0802cb54
 801aee0:	20056776 	.word	0x20056776
 801aee4:	20056774 	.word	0x20056774

0801aee8 <_ZN8touchgfx6Screen4drawEv>:
 801aee8:	4b09      	ldr	r3, [pc, #36]	; (801af10 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801aeea:	b507      	push	{r0, r1, r2, lr}
 801aeec:	f9b3 2000 	ldrsh.w	r2, [r3]
 801aef0:	2100      	movs	r1, #0
 801aef2:	4b08      	ldr	r3, [pc, #32]	; (801af14 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801aef4:	9100      	str	r1, [sp, #0]
 801aef6:	4669      	mov	r1, sp
 801aef8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801aefc:	f8ad 2004 	strh.w	r2, [sp, #4]
 801af00:	f8ad 3006 	strh.w	r3, [sp, #6]
 801af04:	6803      	ldr	r3, [r0, #0]
 801af06:	689b      	ldr	r3, [r3, #8]
 801af08:	4798      	blx	r3
 801af0a:	b003      	add	sp, #12
 801af0c:	f85d fb04 	ldr.w	pc, [sp], #4
 801af10:	20056774 	.word	0x20056774
 801af14:	20056776 	.word	0x20056776

0801af18 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801af18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af1c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801af20:	b089      	sub	sp, #36	; 0x24
 801af22:	4680      	mov	r8, r0
 801af24:	460c      	mov	r4, r1
 801af26:	2b00      	cmp	r3, #0
 801af28:	4615      	mov	r5, r2
 801af2a:	dd0e      	ble.n	801af4a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801af2c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801af30:	2b00      	cmp	r3, #0
 801af32:	dd0a      	ble.n	801af4a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801af34:	4628      	mov	r0, r5
 801af36:	f7ff ff5b 	bl	801adf0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801af3a:	4621      	mov	r1, r4
 801af3c:	f7fb ffea 	bl	8016f14 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801af40:	69eb      	ldr	r3, [r5, #28]
 801af42:	b928      	cbnz	r0, 801af50 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801af44:	461d      	mov	r5, r3
 801af46:	2b00      	cmp	r3, #0
 801af48:	d1f4      	bne.n	801af34 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801af4a:	b009      	add	sp, #36	; 0x24
 801af4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af50:	ae04      	add	r6, sp, #16
 801af52:	2b00      	cmp	r3, #0
 801af54:	f000 80b5 	beq.w	801b0c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801af58:	682b      	ldr	r3, [r5, #0]
 801af5a:	4629      	mov	r1, r5
 801af5c:	a802      	add	r0, sp, #8
 801af5e:	68db      	ldr	r3, [r3, #12]
 801af60:	4798      	blx	r3
 801af62:	4628      	mov	r0, r5
 801af64:	f7ff ff60 	bl	801ae28 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801af68:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801af6c:	4407      	add	r7, r0
 801af6e:	4628      	mov	r0, r5
 801af70:	f7ff ff6e 	bl	801ae50 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801af74:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801af78:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801af7c:	b23f      	sxth	r7, r7
 801af7e:	4418      	add	r0, r3
 801af80:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801af84:	4621      	mov	r1, r4
 801af86:	f8ad 2014 	strh.w	r2, [sp, #20]
 801af8a:	f8ad 0012 	strh.w	r0, [sp, #18]
 801af8e:	4630      	mov	r0, r6
 801af90:	f8ad 3016 	strh.w	r3, [sp, #22]
 801af94:	f8ad 7010 	strh.w	r7, [sp, #16]
 801af98:	f7fa fdb0 	bl	8015afc <_ZN8touchgfx4RectaNERKS0_>
 801af9c:	4628      	mov	r0, r5
 801af9e:	f7ff ff27 	bl	801adf0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801afa2:	ab06      	add	r3, sp, #24
 801afa4:	4602      	mov	r2, r0
 801afa6:	e896 0003 	ldmia.w	r6, {r0, r1}
 801afaa:	e883 0003 	stmia.w	r3, {r0, r1}
 801afae:	4611      	mov	r1, r2
 801afb0:	4618      	mov	r0, r3
 801afb2:	f7fa fda3 	bl	8015afc <_ZN8touchgfx4RectaNERKS0_>
 801afb6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801afba:	f9b4 1000 	ldrsh.w	r1, [r4]
 801afbe:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801afc2:	4299      	cmp	r1, r3
 801afc4:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801afc8:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801afcc:	d10b      	bne.n	801afe6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801afce:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801afd2:	4552      	cmp	r2, sl
 801afd4:	d107      	bne.n	801afe6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801afd6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801afda:	455a      	cmp	r2, fp
 801afdc:	d103      	bne.n	801afe6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801afde:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801afe2:	454a      	cmp	r2, r9
 801afe4:	d06d      	beq.n	801b0c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801afe6:	f1bb 0f00 	cmp.w	fp, #0
 801afea:	dd65      	ble.n	801b0b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801afec:	f1b9 0f00 	cmp.w	r9, #0
 801aff0:	dd62      	ble.n	801b0b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801aff2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801aff6:	fa1f f08a 	uxth.w	r0, sl
 801affa:	4552      	cmp	r2, sl
 801affc:	9000      	str	r0, [sp, #0]
 801affe:	da12      	bge.n	801b026 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801b000:	9301      	str	r3, [sp, #4]
 801b002:	9b00      	ldr	r3, [sp, #0]
 801b004:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b008:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b00c:	1a9a      	subs	r2, r3, r2
 801b00e:	f8ad 1010 	strh.w	r1, [sp, #16]
 801b012:	4631      	mov	r1, r6
 801b014:	f8ad 0014 	strh.w	r0, [sp, #20]
 801b018:	4640      	mov	r0, r8
 801b01a:	f8ad 2016 	strh.w	r2, [sp, #22]
 801b01e:	69ea      	ldr	r2, [r5, #28]
 801b020:	f7ff ff7a 	bl	801af18 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b024:	9b01      	ldr	r3, [sp, #4]
 801b026:	f9b4 2000 	ldrsh.w	r2, [r4]
 801b02a:	b29f      	uxth	r7, r3
 801b02c:	429a      	cmp	r2, r3
 801b02e:	da0d      	bge.n	801b04c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801b030:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b034:	1aba      	subs	r2, r7, r2
 801b036:	f8ad a012 	strh.w	sl, [sp, #18]
 801b03a:	4631      	mov	r1, r6
 801b03c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b040:	4640      	mov	r0, r8
 801b042:	f8ad 9016 	strh.w	r9, [sp, #22]
 801b046:	69ea      	ldr	r2, [r5, #28]
 801b048:	f7ff ff66 	bl	801af18 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b04c:	8822      	ldrh	r2, [r4, #0]
 801b04e:	445f      	add	r7, fp
 801b050:	88a3      	ldrh	r3, [r4, #4]
 801b052:	b2bf      	uxth	r7, r7
 801b054:	4413      	add	r3, r2
 801b056:	b23a      	sxth	r2, r7
 801b058:	b29b      	uxth	r3, r3
 801b05a:	b219      	sxth	r1, r3
 801b05c:	4291      	cmp	r1, r2
 801b05e:	dd0d      	ble.n	801b07c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801b060:	1bdb      	subs	r3, r3, r7
 801b062:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b066:	f8ad a012 	strh.w	sl, [sp, #18]
 801b06a:	4631      	mov	r1, r6
 801b06c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b070:	4640      	mov	r0, r8
 801b072:	f8ad 9016 	strh.w	r9, [sp, #22]
 801b076:	69ea      	ldr	r2, [r5, #28]
 801b078:	f7ff ff4e 	bl	801af18 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b07c:	88e2      	ldrh	r2, [r4, #6]
 801b07e:	8863      	ldrh	r3, [r4, #2]
 801b080:	4413      	add	r3, r2
 801b082:	9a00      	ldr	r2, [sp, #0]
 801b084:	444a      	add	r2, r9
 801b086:	b29b      	uxth	r3, r3
 801b088:	fa1f f982 	uxth.w	r9, r2
 801b08c:	b219      	sxth	r1, r3
 801b08e:	fa0f f289 	sxth.w	r2, r9
 801b092:	428a      	cmp	r2, r1
 801b094:	da15      	bge.n	801b0c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b096:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b09a:	eba3 0309 	sub.w	r3, r3, r9
 801b09e:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b0a2:	f8ad 1014 	strh.w	r1, [sp, #20]
 801b0a6:	4631      	mov	r1, r6
 801b0a8:	f8ad 0010 	strh.w	r0, [sp, #16]
 801b0ac:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b0b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b0b4:	69ea      	ldr	r2, [r5, #28]
 801b0b6:	e001      	b.n	801b0bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801b0b8:	69ea      	ldr	r2, [r5, #28]
 801b0ba:	4621      	mov	r1, r4
 801b0bc:	4640      	mov	r0, r8
 801b0be:	f7ff ff2b 	bl	801af18 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b0c2:	4628      	mov	r0, r5
 801b0c4:	f7ff fe94 	bl	801adf0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b0c8:	6861      	ldr	r1, [r4, #4]
 801b0ca:	4602      	mov	r2, r0
 801b0cc:	4633      	mov	r3, r6
 801b0ce:	6820      	ldr	r0, [r4, #0]
 801b0d0:	c303      	stmia	r3!, {r0, r1}
 801b0d2:	4611      	mov	r1, r2
 801b0d4:	4630      	mov	r0, r6
 801b0d6:	f7fa fd11 	bl	8015afc <_ZN8touchgfx4RectaNERKS0_>
 801b0da:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801b0de:	2b00      	cmp	r3, #0
 801b0e0:	f77f af33 	ble.w	801af4a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b0e4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801b0e8:	2b00      	cmp	r3, #0
 801b0ea:	f77f af2e 	ble.w	801af4a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b0ee:	4628      	mov	r0, r5
 801b0f0:	f7ff fe9a 	bl	801ae28 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801b0f4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801b0f8:	1a18      	subs	r0, r3, r0
 801b0fa:	f8ad 0010 	strh.w	r0, [sp, #16]
 801b0fe:	4628      	mov	r0, r5
 801b100:	f7ff fea6 	bl	801ae50 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801b104:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801b108:	4631      	mov	r1, r6
 801b10a:	1a18      	subs	r0, r3, r0
 801b10c:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b110:	4628      	mov	r0, r5
 801b112:	682b      	ldr	r3, [r5, #0]
 801b114:	689b      	ldr	r3, [r3, #8]
 801b116:	4798      	blx	r3
 801b118:	e717      	b.n	801af4a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801b11a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801b11a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b11c:	2300      	movs	r3, #0
 801b11e:	aa02      	add	r2, sp, #8
 801b120:	4604      	mov	r4, r0
 801b122:	3004      	adds	r0, #4
 801b124:	f842 3d04 	str.w	r3, [r2, #-4]!
 801b128:	460d      	mov	r5, r1
 801b12a:	f7fa fdbf 	bl	8015cac <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801b12e:	9a01      	ldr	r2, [sp, #4]
 801b130:	b11a      	cbz	r2, 801b13a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801b132:	4629      	mov	r1, r5
 801b134:	4620      	mov	r0, r4
 801b136:	f7ff feef 	bl	801af18 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b13a:	b003      	add	sp, #12
 801b13c:	bd30      	pop	{r4, r5, pc}

0801b13e <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801b13e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b140:	4602      	mov	r2, r0
 801b142:	4604      	mov	r4, r0
 801b144:	460d      	mov	r5, r1
 801b146:	466b      	mov	r3, sp
 801b148:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801b14c:	6851      	ldr	r1, [r2, #4]
 801b14e:	c303      	stmia	r3!, {r0, r1}
 801b150:	4629      	mov	r1, r5
 801b152:	4668      	mov	r0, sp
 801b154:	f7fa fcd2 	bl	8015afc <_ZN8touchgfx4RectaNERKS0_>
 801b158:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801b15c:	4669      	mov	r1, sp
 801b15e:	b123      	cbz	r3, 801b16a <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801b160:	4620      	mov	r0, r4
 801b162:	f7ff ffda 	bl	801b11a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801b166:	b003      	add	sp, #12
 801b168:	bd30      	pop	{r4, r5, pc}
 801b16a:	1d20      	adds	r0, r4, #4
 801b16c:	f7fa fd65 	bl	8015c3a <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801b170:	e7f9      	b.n	801b166 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801b172 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801b172:	460b      	mov	r3, r1
 801b174:	680a      	ldr	r2, [r1, #0]
 801b176:	1d01      	adds	r1, r0, #4
 801b178:	6992      	ldr	r2, [r2, #24]
 801b17a:	4618      	mov	r0, r3
 801b17c:	4710      	bx	r2

0801b17e <_ZN8touchgfx12TextProviderC1Ev>:
 801b17e:	b538      	push	{r3, r4, r5, lr}
 801b180:	2500      	movs	r5, #0
 801b182:	4604      	mov	r4, r0
 801b184:	220e      	movs	r2, #14
 801b186:	7405      	strb	r5, [r0, #16]
 801b188:	4629      	mov	r1, r5
 801b18a:	82c5      	strh	r5, [r0, #22]
 801b18c:	8305      	strh	r5, [r0, #24]
 801b18e:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801b190:	8605      	strh	r5, [r0, #48]	; 0x30
 801b192:	86c5      	strh	r5, [r0, #54]	; 0x36
 801b194:	8705      	strh	r5, [r0, #56]	; 0x38
 801b196:	e9c0 5500 	strd	r5, r5, [r0]
 801b19a:	e9c0 5502 	strd	r5, r5, [r0, #8]
 801b19e:	e9c0 550f 	strd	r5, r5, [r0, #60]	; 0x3c
 801b1a2:	3044      	adds	r0, #68	; 0x44
 801b1a4:	f00b fc98 	bl	8026ad8 <memset>
 801b1a8:	2301      	movs	r3, #1
 801b1aa:	4620      	mov	r0, r4
 801b1ac:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 801b1b0:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 801b1b4:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 801b1b8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 801b1bc:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 801b1c0:	f7ed fea0 	bl	8008f04 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801b1c4:	4620      	mov	r0, r4
 801b1c6:	bd38      	pop	{r3, r4, r5, pc}

0801b1c8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801b1c8:	b530      	push	{r4, r5, lr}
 801b1ca:	2500      	movs	r5, #0
 801b1cc:	2401      	movs	r4, #1
 801b1ce:	6843      	ldr	r3, [r0, #4]
 801b1d0:	b913      	cbnz	r3, 801b1d8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801b1d2:	6803      	ldr	r3, [r0, #0]
 801b1d4:	b1f3      	cbz	r3, 801b214 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801b1d6:	6043      	str	r3, [r0, #4]
 801b1d8:	7c03      	ldrb	r3, [r0, #16]
 801b1da:	b143      	cbz	r3, 801b1ee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801b1dc:	68c3      	ldr	r3, [r0, #12]
 801b1de:	b12b      	cbz	r3, 801b1ec <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801b1e0:	881a      	ldrh	r2, [r3, #0]
 801b1e2:	b11a      	cbz	r2, 801b1ec <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801b1e4:	1c9a      	adds	r2, r3, #2
 801b1e6:	60c2      	str	r2, [r0, #12]
 801b1e8:	8818      	ldrh	r0, [r3, #0]
 801b1ea:	bd30      	pop	{r4, r5, pc}
 801b1ec:	7405      	strb	r5, [r0, #16]
 801b1ee:	6843      	ldr	r3, [r0, #4]
 801b1f0:	8819      	ldrh	r1, [r3, #0]
 801b1f2:	b179      	cbz	r1, 801b214 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801b1f4:	1c9a      	adds	r2, r3, #2
 801b1f6:	2902      	cmp	r1, #2
 801b1f8:	6042      	str	r2, [r0, #4]
 801b1fa:	d1f5      	bne.n	801b1e8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801b1fc:	6883      	ldr	r3, [r0, #8]
 801b1fe:	1d1a      	adds	r2, r3, #4
 801b200:	6082      	str	r2, [r0, #8]
 801b202:	681b      	ldr	r3, [r3, #0]
 801b204:	60c3      	str	r3, [r0, #12]
 801b206:	2b00      	cmp	r3, #0
 801b208:	d0e1      	beq.n	801b1ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b20a:	881b      	ldrh	r3, [r3, #0]
 801b20c:	2b00      	cmp	r3, #0
 801b20e:	d0de      	beq.n	801b1ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b210:	7404      	strb	r4, [r0, #16]
 801b212:	e7dc      	b.n	801b1ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b214:	2000      	movs	r0, #0
 801b216:	e7e8      	b.n	801b1ea <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801b218 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801b218:	b410      	push	{r4}
 801b21a:	63c3      	str	r3, [r0, #60]	; 0x3c
 801b21c:	9b01      	ldr	r3, [sp, #4]
 801b21e:	6082      	str	r2, [r0, #8]
 801b220:	6403      	str	r3, [r0, #64]	; 0x40
 801b222:	2300      	movs	r3, #0
 801b224:	6001      	str	r1, [r0, #0]
 801b226:	6043      	str	r3, [r0, #4]
 801b228:	60c3      	str	r3, [r0, #12]
 801b22a:	7403      	strb	r3, [r0, #16]
 801b22c:	8603      	strh	r3, [r0, #48]	; 0x30
 801b22e:	8303      	strh	r3, [r0, #24]
 801b230:	8703      	strh	r3, [r0, #56]	; 0x38
 801b232:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b236:	f7ed be65 	b.w	8008f04 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801b23a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801b23a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b23c:	4605      	mov	r5, r0
 801b23e:	4608      	mov	r0, r1
 801b240:	b1f1      	cbz	r1, 801b280 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801b242:	f105 0444 	add.w	r4, r5, #68	; 0x44
 801b246:	460b      	mov	r3, r1
 801b248:	f101 0708 	add.w	r7, r1, #8
 801b24c:	4622      	mov	r2, r4
 801b24e:	6818      	ldr	r0, [r3, #0]
 801b250:	3308      	adds	r3, #8
 801b252:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801b256:	4626      	mov	r6, r4
 801b258:	42bb      	cmp	r3, r7
 801b25a:	c603      	stmia	r6!, {r0, r1}
 801b25c:	4634      	mov	r4, r6
 801b25e:	d1f6      	bne.n	801b24e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801b260:	6818      	ldr	r0, [r3, #0]
 801b262:	6030      	str	r0, [r6, #0]
 801b264:	4610      	mov	r0, r2
 801b266:	889b      	ldrh	r3, [r3, #4]
 801b268:	80b3      	strh	r3, [r6, #4]
 801b26a:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
 801b26e:	015b      	lsls	r3, r3, #5
 801b270:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801b274:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
 801b278:	430b      	orrs	r3, r1
 801b27a:	425b      	negs	r3, r3
 801b27c:	f885 304d 	strb.w	r3, [r5, #77]	; 0x4d
 801b280:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b282 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801b282:	b538      	push	{r3, r4, r5, lr}
 801b284:	460c      	mov	r4, r1
 801b286:	6811      	ldr	r1, [r2, #0]
 801b288:	4610      	mov	r0, r2
 801b28a:	68cd      	ldr	r5, [r1, #12]
 801b28c:	4619      	mov	r1, r3
 801b28e:	47a8      	blx	r5
 801b290:	2800      	cmp	r0, #0
 801b292:	bf08      	it	eq
 801b294:	4620      	moveq	r0, r4
 801b296:	bd38      	pop	{r3, r4, r5, pc}

0801b298 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801b298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b29a:	4604      	mov	r4, r0
 801b29c:	4615      	mov	r5, r2
 801b29e:	4608      	mov	r0, r1
 801b2a0:	b93a      	cbnz	r2, 801b2b2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801b2a2:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801b2a6:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
 801b2aa:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
 801b2ae:	4628      	mov	r0, r5
 801b2b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b2b2:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801b2b6:	8893      	ldrh	r3, [r2, #4]
 801b2b8:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801b2bc:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801b2c0:	79ee      	ldrb	r6, [r5, #7]
 801b2c2:	4316      	orrs	r6, r2
 801b2c4:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801b2c8:	189a      	adds	r2, r3, r2
 801b2ca:	b2b7      	uxth	r7, r6
 801b2cc:	b291      	uxth	r1, r2
 801b2ce:	291d      	cmp	r1, #29
 801b2d0:	f200 8084 	bhi.w	801b3dc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801b2d4:	2201      	movs	r2, #1
 801b2d6:	10f6      	asrs	r6, r6, #3
 801b2d8:	408a      	lsls	r2, r1
 801b2da:	4978      	ldr	r1, [pc, #480]	; (801b4bc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801b2dc:	420a      	tst	r2, r1
 801b2de:	d12e      	bne.n	801b33e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801b2e0:	f412 7f60 	tst.w	r2, #896	; 0x380
 801b2e4:	d07a      	beq.n	801b3dc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801b2e6:	f104 0244 	add.w	r2, r4, #68	; 0x44
 801b2ea:	462b      	mov	r3, r5
 801b2ec:	f105 0e08 	add.w	lr, r5, #8
 801b2f0:	4615      	mov	r5, r2
 801b2f2:	6818      	ldr	r0, [r3, #0]
 801b2f4:	3308      	adds	r3, #8
 801b2f6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801b2fa:	4694      	mov	ip, r2
 801b2fc:	4573      	cmp	r3, lr
 801b2fe:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801b302:	4662      	mov	r2, ip
 801b304:	d1f5      	bne.n	801b2f2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801b306:	6818      	ldr	r0, [r3, #0]
 801b308:	f8cc 0000 	str.w	r0, [ip]
 801b30c:	889b      	ldrh	r3, [r3, #4]
 801b30e:	f8ac 3004 	strh.w	r3, [ip, #4]
 801b312:	b2b3      	uxth	r3, r6
 801b314:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
 801b318:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 801b31c:	1aca      	subs	r2, r1, r3
 801b31e:	1bcf      	subs	r7, r1, r7
 801b320:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801b324:	b292      	uxth	r2, r2
 801b326:	1afb      	subs	r3, r7, r3
 801b328:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
 801b32c:	10d2      	asrs	r2, r2, #3
 801b32e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801b332:	4302      	orrs	r2, r0
 801b334:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
 801b338:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 801b33c:	e7b7      	b.n	801b2ae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801b33e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b340:	b92b      	cbnz	r3, 801b34e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801b342:	4b5f      	ldr	r3, [pc, #380]	; (801b4c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801b344:	21bf      	movs	r1, #191	; 0xbf
 801b346:	4a5f      	ldr	r2, [pc, #380]	; (801b4c4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801b348:	485f      	ldr	r0, [pc, #380]	; (801b4c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801b34a:	f00b fb39 	bl	80269c0 <__assert_func>
 801b34e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801b350:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b354:	8b59      	ldrh	r1, [r3, #26]
 801b356:	f640 6333 	movw	r3, #3635	; 0xe33
 801b35a:	4299      	cmp	r1, r3
 801b35c:	d110      	bne.n	801b380 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801b35e:	6803      	ldr	r3, [r0, #0]
 801b360:	68db      	ldr	r3, [r3, #12]
 801b362:	4798      	blx	r3
 801b364:	7b41      	ldrb	r1, [r0, #13]
 801b366:	00cb      	lsls	r3, r1, #3
 801b368:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b36c:	7a03      	ldrb	r3, [r0, #8]
 801b36e:	0648      	lsls	r0, r1, #25
 801b370:	ea43 0302 	orr.w	r3, r3, r2
 801b374:	bf44      	itt	mi
 801b376:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b37a:	b21b      	sxthmi	r3, r3
 801b37c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801b380:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 801b384:	462a      	mov	r2, r5
 801b386:	f105 0c08 	add.w	ip, r5, #8
 801b38a:	443b      	add	r3, r7
 801b38c:	4433      	add	r3, r6
 801b38e:	f104 0644 	add.w	r6, r4, #68	; 0x44
 801b392:	b29b      	uxth	r3, r3
 801b394:	4635      	mov	r5, r6
 801b396:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801b39a:	6810      	ldr	r0, [r2, #0]
 801b39c:	3208      	adds	r2, #8
 801b39e:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801b3a2:	4637      	mov	r7, r6
 801b3a4:	4562      	cmp	r2, ip
 801b3a6:	c703      	stmia	r7!, {r0, r1}
 801b3a8:	463e      	mov	r6, r7
 801b3aa:	d1f6      	bne.n	801b39a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801b3ac:	6810      	ldr	r0, [r2, #0]
 801b3ae:	6038      	str	r0, [r7, #0]
 801b3b0:	8892      	ldrh	r2, [r2, #4]
 801b3b2:	80ba      	strh	r2, [r7, #4]
 801b3b4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 801b3b8:	10db      	asrs	r3, r3, #3
 801b3ba:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 801b3be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b3c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801b3c6:	4313      	orrs	r3, r2
 801b3c8:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
 801b3cc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 801b3d0:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
 801b3d4:	1a9b      	subs	r3, r3, r2
 801b3d6:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801b3da:	e768      	b.n	801b2ae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801b3dc:	f023 0204 	bic.w	r2, r3, #4
 801b3e0:	f640 611b 	movw	r1, #3611	; 0xe1b
 801b3e4:	428a      	cmp	r2, r1
 801b3e6:	d003      	beq.n	801b3f0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 801b3e8:	f640 621d 	movw	r2, #3613	; 0xe1d
 801b3ec:	4293      	cmp	r3, r2
 801b3ee:	d120      	bne.n	801b432 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801b3f0:	3b01      	subs	r3, #1
 801b3f2:	4602      	mov	r2, r0
 801b3f4:	4629      	mov	r1, r5
 801b3f6:	4620      	mov	r0, r4
 801b3f8:	b29b      	uxth	r3, r3
 801b3fa:	f7ff ff42 	bl	801b282 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801b3fe:	7b41      	ldrb	r1, [r0, #13]
 801b400:	00cb      	lsls	r3, r1, #3
 801b402:	0649      	lsls	r1, r1, #25
 801b404:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b408:	7a03      	ldrb	r3, [r0, #8]
 801b40a:	ea43 0302 	orr.w	r3, r3, r2
 801b40e:	bf44      	itt	mi
 801b410:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b414:	b21b      	sxthmi	r3, r3
 801b416:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801b41a:	7b6b      	ldrb	r3, [r5, #13]
 801b41c:	7aaa      	ldrb	r2, [r5, #10]
 801b41e:	005b      	lsls	r3, r3, #1
 801b420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b424:	4313      	orrs	r3, r2
 801b426:	115a      	asrs	r2, r3, #5
 801b428:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801b42c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 801b430:	e035      	b.n	801b49e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801b432:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801b436:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801b43a:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801b43e:	7a2a      	ldrb	r2, [r5, #8]
 801b440:	ea42 0201 	orr.w	r2, r2, r1
 801b444:	f640 6109 	movw	r1, #3593	; 0xe09
 801b448:	bf1c      	itt	ne
 801b44a:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801b44e:	b212      	sxthne	r2, r2
 801b450:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801b454:	f023 0210 	bic.w	r2, r3, #16
 801b458:	428a      	cmp	r2, r1
 801b45a:	d003      	beq.n	801b464 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 801b45c:	f640 6213 	movw	r2, #3603	; 0xe13
 801b460:	4293      	cmp	r3, r2
 801b462:	d129      	bne.n	801b4b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801b464:	7b6e      	ldrb	r6, [r5, #13]
 801b466:	4629      	mov	r1, r5
 801b468:	0076      	lsls	r6, r6, #1
 801b46a:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801b46e:	7aae      	ldrb	r6, [r5, #10]
 801b470:	4316      	orrs	r6, r2
 801b472:	f640 6213 	movw	r2, #3603	; 0xe13
 801b476:	4293      	cmp	r3, r2
 801b478:	4602      	mov	r2, r0
 801b47a:	4620      	mov	r0, r4
 801b47c:	bf16      	itet	ne
 801b47e:	f103 33ff 	addne.w	r3, r3, #4294967295
 801b482:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801b486:	b29b      	uxthne	r3, r3
 801b488:	f7ff fefb 	bl	801b282 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801b48c:	7b43      	ldrb	r3, [r0, #13]
 801b48e:	7a82      	ldrb	r2, [r0, #10]
 801b490:	005b      	lsls	r3, r3, #1
 801b492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b496:	4313      	orrs	r3, r2
 801b498:	1af6      	subs	r6, r6, r3
 801b49a:	f8a4 6056 	strh.w	r6, [r4, #86]	; 0x56
 801b49e:	7b69      	ldrb	r1, [r5, #13]
 801b4a0:	00cb      	lsls	r3, r1, #3
 801b4a2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b4a6:	7a2b      	ldrb	r3, [r5, #8]
 801b4a8:	4313      	orrs	r3, r2
 801b4aa:	064a      	lsls	r2, r1, #25
 801b4ac:	bf44      	itt	mi
 801b4ae:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b4b2:	b21b      	sxthmi	r3, r3
 801b4b4:	1bdb      	subs	r3, r3, r7
 801b4b6:	e73f      	b.n	801b338 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801b4b8:	2300      	movs	r3, #0
 801b4ba:	e7b7      	b.n	801b42c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 801b4bc:	3fc00079 	.word	0x3fc00079
 801b4c0:	0802df60 	.word	0x0802df60
 801b4c4:	0802e1d2 	.word	0x0802e1d2
 801b4c8:	0802df69 	.word	0x0802df69

0801b4cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801b4cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b4d0:	4604      	mov	r4, r0
 801b4d2:	b942      	cbnz	r2, 801b4e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801b4d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b4d8:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801b4dc:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
 801b4e0:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 801b4e4:	e046      	b.n	801b574 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801b4e6:	7b51      	ldrb	r1, [r2, #13]
 801b4e8:	8893      	ldrh	r3, [r2, #4]
 801b4ea:	010f      	lsls	r7, r1, #4
 801b4ec:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801b4f0:	79d7      	ldrb	r7, [r2, #7]
 801b4f2:	4307      	orrs	r7, r0
 801b4f4:	2f04      	cmp	r7, #4
 801b4f6:	b2bd      	uxth	r5, r7
 801b4f8:	bfcc      	ite	gt
 801b4fa:	08bf      	lsrgt	r7, r7, #2
 801b4fc:	2701      	movle	r7, #1
 801b4fe:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801b502:	f200 80ab 	bhi.w	801b65c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801b506:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801b50a:	4283      	cmp	r3, r0
 801b50c:	d216      	bcs.n	801b53c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b50e:	f240 605b 	movw	r0, #1627	; 0x65b
 801b512:	4283      	cmp	r3, r0
 801b514:	d859      	bhi.n	801b5ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801b516:	f240 6057 	movw	r0, #1623	; 0x657
 801b51a:	4283      	cmp	r3, r0
 801b51c:	d20e      	bcs.n	801b53c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b51e:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801b522:	d24a      	bcs.n	801b5ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801b524:	f240 604e 	movw	r0, #1614	; 0x64e
 801b528:	4283      	cmp	r3, r0
 801b52a:	d207      	bcs.n	801b53c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b52c:	f240 601a 	movw	r0, #1562	; 0x61a
 801b530:	4283      	cmp	r3, r0
 801b532:	d02a      	beq.n	801b58a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b534:	d821      	bhi.n	801b57a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801b536:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801b53a:	d35b      	bcc.n	801b5f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801b53c:	f9b4 3052 	ldrsh.w	r3, [r4, #82]	; 0x52
 801b540:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801b544:	f040 80d0 	bne.w	801b6e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801b548:	f9b4 0054 	ldrsh.w	r0, [r4, #84]	; 0x54
 801b54c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801b550:	f040 80ca 	bne.w	801b6e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801b554:	00cb      	lsls	r3, r1, #3
 801b556:	0649      	lsls	r1, r1, #25
 801b558:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801b55c:	7a13      	ldrb	r3, [r2, #8]
 801b55e:	ea43 0300 	orr.w	r3, r3, r0
 801b562:	bf44      	itt	mi
 801b564:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b568:	b21b      	sxthmi	r3, r3
 801b56a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801b56e:	1b5d      	subs	r5, r3, r5
 801b570:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 801b574:	4610      	mov	r0, r2
 801b576:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b57a:	f240 604b 	movw	r0, #1611	; 0x64b
 801b57e:	4283      	cmp	r3, r0
 801b580:	d338      	bcc.n	801b5f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801b582:	f240 604c 	movw	r0, #1612	; 0x64c
 801b586:	4283      	cmp	r3, r0
 801b588:	d9d8      	bls.n	801b53c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b58a:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801b58e:	f9b4 3054 	ldrsh.w	r3, [r4, #84]	; 0x54
 801b592:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801b596:	f040 80f2 	bne.w	801b77e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801b59a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801b59e:	f040 80ee 	bne.w	801b77e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801b5a2:	00cb      	lsls	r3, r1, #3
 801b5a4:	064e      	lsls	r6, r1, #25
 801b5a6:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801b5aa:	7a13      	ldrb	r3, [r2, #8]
 801b5ac:	ea43 0300 	orr.w	r3, r3, r0
 801b5b0:	bf44      	itt	mi
 801b5b2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b5b6:	b21b      	sxthmi	r3, r3
 801b5b8:	e7d9      	b.n	801b56e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801b5ba:	f240 6054 	movw	r0, #1620	; 0x654
 801b5be:	4283      	cmp	r3, r0
 801b5c0:	d8e3      	bhi.n	801b58a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b5c2:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801b5c6:	d9e0      	bls.n	801b58a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b5c8:	e7b8      	b.n	801b53c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b5ca:	f240 6074 	movw	r0, #1652	; 0x674
 801b5ce:	4283      	cmp	r3, r0
 801b5d0:	d0b4      	beq.n	801b53c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b5d2:	d82d      	bhi.n	801b630 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801b5d4:	f240 605e 	movw	r0, #1630	; 0x65e
 801b5d8:	4283      	cmp	r3, r0
 801b5da:	d804      	bhi.n	801b5e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801b5dc:	f240 605d 	movw	r0, #1629	; 0x65d
 801b5e0:	4283      	cmp	r3, r0
 801b5e2:	d3d2      	bcc.n	801b58a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b5e4:	e7aa      	b.n	801b53c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b5e6:	f240 605f 	movw	r0, #1631	; 0x65f
 801b5ea:	4283      	cmp	r3, r0
 801b5ec:	d0cd      	beq.n	801b58a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b5ee:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801b5f2:	d0a3      	beq.n	801b53c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b5f4:	00cb      	lsls	r3, r1, #3
 801b5f6:	0649      	lsls	r1, r1, #25
 801b5f8:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801b5fc:	7a13      	ldrb	r3, [r2, #8]
 801b5fe:	ea43 0300 	orr.w	r3, r3, r0
 801b602:	bf44      	itt	mi
 801b604:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b608:	b21b      	sxthmi	r3, r3
 801b60a:	1b5d      	subs	r5, r3, r5
 801b60c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801b610:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 801b614:	7b53      	ldrb	r3, [r2, #13]
 801b616:	015b      	lsls	r3, r3, #5
 801b618:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801b61c:	7993      	ldrb	r3, [r2, #6]
 801b61e:	430b      	orrs	r3, r1
 801b620:	2105      	movs	r1, #5
 801b622:	005b      	lsls	r3, r3, #1
 801b624:	fb93 f3f1 	sdiv	r3, r3, r1
 801b628:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801b62c:	440b      	add	r3, r1
 801b62e:	e757      	b.n	801b4e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801b630:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801b634:	4283      	cmp	r3, r0
 801b636:	d809      	bhi.n	801b64c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801b638:	f240 60df 	movw	r0, #1759	; 0x6df
 801b63c:	4283      	cmp	r3, r0
 801b63e:	f4bf af7d 	bcs.w	801b53c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b642:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801b646:	2b05      	cmp	r3, #5
 801b648:	d8d4      	bhi.n	801b5f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801b64a:	e777      	b.n	801b53c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b64c:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801b650:	4283      	cmp	r3, r0
 801b652:	d09a      	beq.n	801b58a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b654:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801b658:	4283      	cmp	r3, r0
 801b65a:	e7ca      	b.n	801b5f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801b65c:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801b660:	d22b      	bcs.n	801b6ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801b662:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801b666:	4283      	cmp	r3, r0
 801b668:	d28f      	bcs.n	801b58a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b66a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801b66e:	4283      	cmp	r3, r0
 801b670:	d816      	bhi.n	801b6a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801b672:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801b676:	4283      	cmp	r3, r0
 801b678:	f4bf af60 	bcs.w	801b53c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b67c:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801b680:	4283      	cmp	r3, r0
 801b682:	d80a      	bhi.n	801b69a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801b684:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801b688:	4283      	cmp	r3, r0
 801b68a:	f4bf af57 	bcs.w	801b53c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b68e:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801b692:	4283      	cmp	r3, r0
 801b694:	f43f af79 	beq.w	801b58a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b698:	e7ac      	b.n	801b5f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801b69a:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801b69e:	e7f8      	b.n	801b692 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801b6a0:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801b6a4:	4283      	cmp	r3, r0
 801b6a6:	d802      	bhi.n	801b6ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801b6a8:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801b6ac:	e798      	b.n	801b5e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801b6ae:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801b6b2:	4283      	cmp	r3, r0
 801b6b4:	f47f af42 	bne.w	801b53c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b6b8:	e767      	b.n	801b58a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b6ba:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801b6be:	4283      	cmp	r3, r0
 801b6c0:	f43f af63 	beq.w	801b58a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b6c4:	d802      	bhi.n	801b6cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801b6c6:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801b6ca:	e7f2      	b.n	801b6b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801b6cc:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801b6d0:	4283      	cmp	r3, r0
 801b6d2:	d805      	bhi.n	801b6e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801b6d4:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801b6d8:	4283      	cmp	r3, r0
 801b6da:	f4ff af2f 	bcc.w	801b53c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801b6de:	e754      	b.n	801b58a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801b6e0:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801b6e4:	4283      	cmp	r3, r0
 801b6e6:	e7af      	b.n	801b648 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801b6e8:	f104 0c44 	add.w	ip, r4, #68	; 0x44
 801b6ec:	4617      	mov	r7, r2
 801b6ee:	f102 0808 	add.w	r8, r2, #8
 801b6f2:	4666      	mov	r6, ip
 801b6f4:	6838      	ldr	r0, [r7, #0]
 801b6f6:	3708      	adds	r7, #8
 801b6f8:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801b6fc:	46e6      	mov	lr, ip
 801b6fe:	4547      	cmp	r7, r8
 801b700:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801b704:	46f4      	mov	ip, lr
 801b706:	d1f5      	bne.n	801b6f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801b708:	6838      	ldr	r0, [r7, #0]
 801b70a:	f8ce 0000 	str.w	r0, [lr]
 801b70e:	88b9      	ldrh	r1, [r7, #4]
 801b710:	f8ae 1004 	strh.w	r1, [lr, #4]
 801b714:	f9b4 0056 	ldrsh.w	r0, [r4, #86]	; 0x56
 801b718:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801b71c:	d009      	beq.n	801b732 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801b71e:	7b51      	ldrb	r1, [r2, #13]
 801b720:	7992      	ldrb	r2, [r2, #6]
 801b722:	0149      	lsls	r1, r1, #5
 801b724:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801b728:	4311      	orrs	r1, r2
 801b72a:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801b72e:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
 801b732:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801b736:	d00d      	beq.n	801b754 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 801b738:	442b      	add	r3, r5
 801b73a:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 801b73e:	b29b      	uxth	r3, r3
 801b740:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801b744:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 801b748:	10db      	asrs	r3, r3, #3
 801b74a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b74e:	4313      	orrs	r3, r2
 801b750:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 801b754:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 801b758:	00cb      	lsls	r3, r1, #3
 801b75a:	064f      	lsls	r7, r1, #25
 801b75c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b760:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 801b764:	ea43 0302 	orr.w	r3, r3, r2
 801b768:	bf44      	itt	mi
 801b76a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b76e:	b21b      	sxthmi	r3, r3
 801b770:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801b774:	1b5d      	subs	r5, r3, r5
 801b776:	4632      	mov	r2, r6
 801b778:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 801b77c:	e6fa      	b.n	801b574 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801b77e:	f104 0e44 	add.w	lr, r4, #68	; 0x44
 801b782:	4694      	mov	ip, r2
 801b784:	f102 0908 	add.w	r9, r2, #8
 801b788:	4676      	mov	r6, lr
 801b78a:	f8dc 0000 	ldr.w	r0, [ip]
 801b78e:	f10c 0c08 	add.w	ip, ip, #8
 801b792:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801b796:	46f0      	mov	r8, lr
 801b798:	45cc      	cmp	ip, r9
 801b79a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801b79e:	46c6      	mov	lr, r8
 801b7a0:	d1f3      	bne.n	801b78a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801b7a2:	f8dc 0000 	ldr.w	r0, [ip]
 801b7a6:	f8c8 0000 	str.w	r0, [r8]
 801b7aa:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801b7ae:	f8a8 1004 	strh.w	r1, [r8, #4]
 801b7b2:	f9b4 0056 	ldrsh.w	r0, [r4, #86]	; 0x56
 801b7b6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801b7ba:	d009      	beq.n	801b7d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801b7bc:	7b51      	ldrb	r1, [r2, #13]
 801b7be:	7992      	ldrb	r2, [r2, #6]
 801b7c0:	0149      	lsls	r1, r1, #5
 801b7c2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801b7c6:	4311      	orrs	r1, r2
 801b7c8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801b7cc:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
 801b7d0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801b7d4:	d00d      	beq.n	801b7f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801b7d6:	1bdb      	subs	r3, r3, r7
 801b7d8:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 801b7dc:	b29b      	uxth	r3, r3
 801b7de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801b7e2:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 801b7e6:	10db      	asrs	r3, r3, #3
 801b7e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801b7ec:	4313      	orrs	r3, r2
 801b7ee:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 801b7f2:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 801b7f6:	00cb      	lsls	r3, r1, #3
 801b7f8:	0648      	lsls	r0, r1, #25
 801b7fa:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b7fe:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 801b802:	ea43 0302 	orr.w	r3, r3, r2
 801b806:	bf44      	itt	mi
 801b808:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b80c:	b21b      	sxthmi	r3, r3
 801b80e:	e7b1      	b.n	801b774 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801b810 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801b810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b814:	461e      	mov	r6, r3
 801b816:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801b818:	4604      	mov	r4, r0
 801b81a:	4617      	mov	r7, r2
 801b81c:	b92b      	cbnz	r3, 801b82a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801b81e:	4b25      	ldr	r3, [pc, #148]	; (801b8b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801b820:	21bf      	movs	r1, #191	; 0xbf
 801b822:	4a25      	ldr	r2, [pc, #148]	; (801b8b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801b824:	4825      	ldr	r0, [pc, #148]	; (801b8bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801b826:	f00b f8cb 	bl	80269c0 <__assert_func>
 801b82a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801b82c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801b830:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801b834:	f7ed fac0 	bl	8008db8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b838:	4605      	mov	r5, r0
 801b83a:	b918      	cbnz	r0, 801b844 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 801b83c:	6030      	str	r0, [r6, #0]
 801b83e:	4628      	mov	r0, r5
 801b840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b844:	683b      	ldr	r3, [r7, #0]
 801b846:	4601      	mov	r1, r0
 801b848:	4638      	mov	r0, r7
 801b84a:	68db      	ldr	r3, [r3, #12]
 801b84c:	4798      	blx	r3
 801b84e:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801b852:	4602      	mov	r2, r0
 801b854:	6030      	str	r0, [r6, #0]
 801b856:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801b85a:	d213      	bcs.n	801b884 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801b85c:	4643      	mov	r3, r8
 801b85e:	4639      	mov	r1, r7
 801b860:	4620      	mov	r0, r4
 801b862:	f7ff fe33 	bl	801b4cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801b866:	6030      	str	r0, [r6, #0]
 801b868:	6833      	ldr	r3, [r6, #0]
 801b86a:	b143      	cbz	r3, 801b87e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801b86c:	7b5a      	ldrb	r2, [r3, #13]
 801b86e:	7a9b      	ldrb	r3, [r3, #10]
 801b870:	0052      	lsls	r2, r2, #1
 801b872:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801b876:	4313      	orrs	r3, r2
 801b878:	bf0c      	ite	eq
 801b87a:	2301      	moveq	r3, #1
 801b87c:	2300      	movne	r3, #0
 801b87e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801b882:	e7dc      	b.n	801b83e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801b884:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801b888:	b29b      	uxth	r3, r3
 801b88a:	2b7f      	cmp	r3, #127	; 0x7f
 801b88c:	d804      	bhi.n	801b898 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801b88e:	4639      	mov	r1, r7
 801b890:	4620      	mov	r0, r4
 801b892:	f7ff fd01 	bl	801b298 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801b896:	e7e6      	b.n	801b866 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801b898:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 801b89c:	2b00      	cmp	r3, #0
 801b89e:	d0e3      	beq.n	801b868 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801b8a0:	f640 1302 	movw	r3, #2306	; 0x902
 801b8a4:	429d      	cmp	r5, r3
 801b8a6:	d1df      	bne.n	801b868 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801b8a8:	4601      	mov	r1, r0
 801b8aa:	4620      	mov	r0, r4
 801b8ac:	f7ff fcc5 	bl	801b23a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801b8b0:	e7d9      	b.n	801b866 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801b8b2:	bf00      	nop
 801b8b4:	0802df60 	.word	0x0802df60
 801b8b8:	0802e1d2 	.word	0x0802e1d2
 801b8bc:	0802df69 	.word	0x0802df69

0801b8c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801b8c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b8c4:	461e      	mov	r6, r3
 801b8c6:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801b8c8:	4604      	mov	r4, r0
 801b8ca:	4617      	mov	r7, r2
 801b8cc:	b92b      	cbnz	r3, 801b8da <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801b8ce:	4b26      	ldr	r3, [pc, #152]	; (801b968 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801b8d0:	21bf      	movs	r1, #191	; 0xbf
 801b8d2:	4a26      	ldr	r2, [pc, #152]	; (801b96c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801b8d4:	4826      	ldr	r0, [pc, #152]	; (801b970 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801b8d6:	f00b f873 	bl	80269c0 <__assert_func>
 801b8da:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801b8dc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801b8e0:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801b8e4:	f7ed fa68 	bl	8008db8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b8e8:	4605      	mov	r5, r0
 801b8ea:	b918      	cbnz	r0, 801b8f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 801b8ec:	6030      	str	r0, [r6, #0]
 801b8ee:	4628      	mov	r0, r5
 801b8f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b8f4:	683b      	ldr	r3, [r7, #0]
 801b8f6:	4601      	mov	r1, r0
 801b8f8:	4638      	mov	r0, r7
 801b8fa:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801b8fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801b902:	47c8      	blx	r9
 801b904:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801b908:	4602      	mov	r2, r0
 801b90a:	6030      	str	r0, [r6, #0]
 801b90c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801b910:	d213      	bcs.n	801b93a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 801b912:	4643      	mov	r3, r8
 801b914:	4639      	mov	r1, r7
 801b916:	4620      	mov	r0, r4
 801b918:	f7ff fdd8 	bl	801b4cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801b91c:	6030      	str	r0, [r6, #0]
 801b91e:	6833      	ldr	r3, [r6, #0]
 801b920:	b143      	cbz	r3, 801b934 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801b922:	7b5a      	ldrb	r2, [r3, #13]
 801b924:	7a9b      	ldrb	r3, [r3, #10]
 801b926:	0052      	lsls	r2, r2, #1
 801b928:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801b92c:	4313      	orrs	r3, r2
 801b92e:	bf0c      	ite	eq
 801b930:	2301      	moveq	r3, #1
 801b932:	2300      	movne	r3, #0
 801b934:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801b938:	e7d9      	b.n	801b8ee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 801b93a:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801b93e:	b29b      	uxth	r3, r3
 801b940:	2b7f      	cmp	r3, #127	; 0x7f
 801b942:	d804      	bhi.n	801b94e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 801b944:	4639      	mov	r1, r7
 801b946:	4620      	mov	r0, r4
 801b948:	f7ff fca6 	bl	801b298 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801b94c:	e7e6      	b.n	801b91c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801b94e:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 801b952:	2b00      	cmp	r3, #0
 801b954:	d0e3      	beq.n	801b91e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801b956:	f640 1302 	movw	r3, #2306	; 0x902
 801b95a:	429d      	cmp	r5, r3
 801b95c:	d1df      	bne.n	801b91e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801b95e:	4601      	mov	r1, r0
 801b960:	4620      	mov	r0, r4
 801b962:	f7ff fc6a 	bl	801b23a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801b966:	e7d9      	b.n	801b91c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801b968:	0802df60 	.word	0x0802df60
 801b96c:	0802e1d2 	.word	0x0802e1d2
 801b970:	0802df69 	.word	0x0802df69

0801b974 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801b974:	b510      	push	{r4, lr}
 801b976:	4604      	mov	r4, r0
 801b978:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801b97a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b97c:	b9d9      	cbnz	r1, 801b9b6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 801b97e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b980:	2b0a      	cmp	r3, #10
 801b982:	d036      	beq.n	801b9f2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801b984:	4620      	mov	r0, r4
 801b986:	f7ff fc1f 	bl	801b1c8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801b98a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b98c:	2b09      	cmp	r3, #9
 801b98e:	d906      	bls.n	801b99e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 801b990:	4b18      	ldr	r3, [pc, #96]	; (801b9f4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 801b992:	f240 1103 	movw	r1, #259	; 0x103
 801b996:	4a18      	ldr	r2, [pc, #96]	; (801b9f8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801b998:	4818      	ldr	r0, [pc, #96]	; (801b9fc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801b99a:	f00b f811 	bl	80269c0 <__assert_func>
 801b99e:	1c5a      	adds	r2, r3, #1
 801b9a0:	8622      	strh	r2, [r4, #48]	; 0x30
 801b9a2:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801b9a4:	4413      	add	r3, r2
 801b9a6:	b29b      	uxth	r3, r3
 801b9a8:	2b09      	cmp	r3, #9
 801b9aa:	bf88      	it	hi
 801b9ac:	3b0a      	subhi	r3, #10
 801b9ae:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b9b2:	8358      	strh	r0, [r3, #26]
 801b9b4:	e7e3      	b.n	801b97e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 801b9b6:	2b0a      	cmp	r3, #10
 801b9b8:	d01b      	beq.n	801b9f2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801b9ba:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801b9bc:	3901      	subs	r1, #1
 801b9be:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801b9c2:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 801b9c4:	8721      	strh	r1, [r4, #56]	; 0x38
 801b9c6:	1c51      	adds	r1, r2, #1
 801b9c8:	b289      	uxth	r1, r1
 801b9ca:	2901      	cmp	r1, #1
 801b9cc:	bf8a      	itet	hi
 801b9ce:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801b9d2:	86e1      	strhls	r1, [r4, #54]	; 0x36
 801b9d4:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 801b9d6:	2b09      	cmp	r3, #9
 801b9d8:	d8da      	bhi.n	801b990 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 801b9da:	1c5a      	adds	r2, r3, #1
 801b9dc:	8622      	strh	r2, [r4, #48]	; 0x30
 801b9de:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801b9e0:	4413      	add	r3, r2
 801b9e2:	b29b      	uxth	r3, r3
 801b9e4:	2b09      	cmp	r3, #9
 801b9e6:	bf88      	it	hi
 801b9e8:	3b0a      	subhi	r3, #10
 801b9ea:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b9ee:	8358      	strh	r0, [r3, #26]
 801b9f0:	e7c2      	b.n	801b978 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801b9f2:	bd10      	pop	{r4, pc}
 801b9f4:	0802df95 	.word	0x0802df95
 801b9f8:	0802e328 	.word	0x0802e328
 801b9fc:	0802df69 	.word	0x0802df69

0801ba00 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801ba00:	b538      	push	{r3, r4, r5, lr}
 801ba02:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801ba04:	4604      	mov	r4, r0
 801ba06:	b92a      	cbnz	r2, 801ba14 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801ba08:	4b13      	ldr	r3, [pc, #76]	; (801ba58 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801ba0a:	21d4      	movs	r1, #212	; 0xd4
 801ba0c:	4a13      	ldr	r2, [pc, #76]	; (801ba5c <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801ba0e:	4814      	ldr	r0, [pc, #80]	; (801ba60 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801ba10:	f00a ffd6 	bl	80269c0 <__assert_func>
 801ba14:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801ba16:	3a01      	subs	r2, #1
 801ba18:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801ba1c:	8b4d      	ldrh	r5, [r1, #26]
 801ba1e:	8602      	strh	r2, [r0, #48]	; 0x30
 801ba20:	1c5a      	adds	r2, r3, #1
 801ba22:	b292      	uxth	r2, r2
 801ba24:	2a09      	cmp	r2, #9
 801ba26:	bf8a      	itet	hi
 801ba28:	3b09      	subhi	r3, #9
 801ba2a:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 801ba2c:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 801ba2e:	f7ff ffa1 	bl	801b974 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801ba32:	8b23      	ldrh	r3, [r4, #24]
 801ba34:	2b01      	cmp	r3, #1
 801ba36:	bf9c      	itt	ls
 801ba38:	3301      	addls	r3, #1
 801ba3a:	8323      	strhls	r3, [r4, #24]
 801ba3c:	8ae3      	ldrh	r3, [r4, #22]
 801ba3e:	b90b      	cbnz	r3, 801ba44 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801ba40:	2302      	movs	r3, #2
 801ba42:	82e3      	strh	r3, [r4, #22]
 801ba44:	8ae3      	ldrh	r3, [r4, #22]
 801ba46:	4628      	mov	r0, r5
 801ba48:	3b01      	subs	r3, #1
 801ba4a:	b29b      	uxth	r3, r3
 801ba4c:	82e3      	strh	r3, [r4, #22]
 801ba4e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ba52:	8265      	strh	r5, [r4, #18]
 801ba54:	bd38      	pop	{r3, r4, r5, pc}
 801ba56:	bf00      	nop
 801ba58:	0802df60 	.word	0x0802df60
 801ba5c:	0802e27d 	.word	0x0802e27d
 801ba60:	0802df69 	.word	0x0802df69

0801ba64 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801ba64:	428a      	cmp	r2, r1
 801ba66:	b538      	push	{r3, r4, r5, lr}
 801ba68:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 801ba6a:	d90c      	bls.n	801ba86 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801ba6c:	b92c      	cbnz	r4, 801ba7a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801ba6e:	4b1c      	ldr	r3, [pc, #112]	; (801bae0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801ba70:	21e0      	movs	r1, #224	; 0xe0
 801ba72:	4a1c      	ldr	r2, [pc, #112]	; (801bae4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801ba74:	481c      	ldr	r0, [pc, #112]	; (801bae8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801ba76:	f00a ffa3 	bl	80269c0 <__assert_func>
 801ba7a:	3c01      	subs	r4, #1
 801ba7c:	4b1b      	ldr	r3, [pc, #108]	; (801baec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801ba7e:	4a1c      	ldr	r2, [pc, #112]	; (801baf0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801ba80:	21c4      	movs	r1, #196	; 0xc4
 801ba82:	8604      	strh	r4, [r0, #48]	; 0x30
 801ba84:	e7f6      	b.n	801ba74 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801ba86:	428c      	cmp	r4, r1
 801ba88:	d203      	bcs.n	801ba92 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801ba8a:	4b1a      	ldr	r3, [pc, #104]	; (801baf4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801ba8c:	21ca      	movs	r1, #202	; 0xca
 801ba8e:	4a1a      	ldr	r2, [pc, #104]	; (801baf8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801ba90:	e7f0      	b.n	801ba74 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801ba92:	1a64      	subs	r4, r4, r1
 801ba94:	250a      	movs	r5, #10
 801ba96:	8604      	strh	r4, [r0, #48]	; 0x30
 801ba98:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 801ba9a:	4421      	add	r1, r4
 801ba9c:	b289      	uxth	r1, r1
 801ba9e:	2909      	cmp	r1, #9
 801baa0:	bf88      	it	hi
 801baa2:	390a      	subhi	r1, #10
 801baa4:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801baa6:	b1ba      	cbz	r2, 801bad8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801baa8:	3a01      	subs	r2, #1
 801baaa:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 801baac:	b292      	uxth	r2, r2
 801baae:	2909      	cmp	r1, #9
 801bab0:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801bab4:	d903      	bls.n	801babe <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801bab6:	4b11      	ldr	r3, [pc, #68]	; (801bafc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801bab8:	21e5      	movs	r1, #229	; 0xe5
 801baba:	4a11      	ldr	r2, [pc, #68]	; (801bb00 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801babc:	e7da      	b.n	801ba74 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801babe:	3101      	adds	r1, #1
 801bac0:	8601      	strh	r1, [r0, #48]	; 0x30
 801bac2:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801bac4:	b901      	cbnz	r1, 801bac8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801bac6:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801bac8:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801baca:	3901      	subs	r1, #1
 801bacc:	b289      	uxth	r1, r1
 801bace:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801bad0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801bad4:	834c      	strh	r4, [r1, #26]
 801bad6:	e7e6      	b.n	801baa6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801bad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801badc:	f7ff bf4a 	b.w	801b974 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801bae0:	0802df60 	.word	0x0802df60
 801bae4:	0802e056 	.word	0x0802e056
 801bae8:	0802df69 	.word	0x0802df69
 801baec:	0802dfa1 	.word	0x0802dfa1
 801baf0:	0802e100 	.word	0x0802e100
 801baf4:	0802dfaf 	.word	0x0802dfaf
 801baf8:	0802e3d7 	.word	0x0802e3d7
 801bafc:	0802dfbb 	.word	0x0802dfbb
 801bb00:	0802dfce 	.word	0x0802dfce

0801bb04 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801bb04:	3a01      	subs	r2, #1
 801bb06:	b570      	push	{r4, r5, r6, lr}
 801bb08:	b292      	uxth	r2, r2
 801bb0a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801bb0e:	42b2      	cmp	r2, r6
 801bb10:	d019      	beq.n	801bb46 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801bb12:	8b04      	ldrh	r4, [r0, #24]
 801bb14:	f831 5b02 	ldrh.w	r5, [r1], #2
 801bb18:	4294      	cmp	r4, r2
 801bb1a:	d805      	bhi.n	801bb28 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801bb1c:	4b19      	ldr	r3, [pc, #100]	; (801bb84 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801bb1e:	4a1a      	ldr	r2, [pc, #104]	; (801bb88 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801bb20:	21c4      	movs	r1, #196	; 0xc4
 801bb22:	481a      	ldr	r0, [pc, #104]	; (801bb8c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801bb24:	f00a ff4c 	bl	80269c0 <__assert_func>
 801bb28:	8ac4      	ldrh	r4, [r0, #22]
 801bb2a:	4414      	add	r4, r2
 801bb2c:	3a01      	subs	r2, #1
 801bb2e:	b2a4      	uxth	r4, r4
 801bb30:	b292      	uxth	r2, r2
 801bb32:	2c01      	cmp	r4, #1
 801bb34:	bf88      	it	hi
 801bb36:	3c02      	subhi	r4, #2
 801bb38:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801bb3c:	8a64      	ldrh	r4, [r4, #18]
 801bb3e:	42ac      	cmp	r4, r5
 801bb40:	d0e5      	beq.n	801bb0e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801bb42:	2000      	movs	r0, #0
 801bb44:	bd70      	pop	{r4, r5, r6, pc}
 801bb46:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801bb4a:	2400      	movs	r4, #0
 801bb4c:	4413      	add	r3, r2
 801bb4e:	b2a2      	uxth	r2, r4
 801bb50:	429a      	cmp	r2, r3
 801bb52:	da14      	bge.n	801bb7e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801bb54:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 801bb56:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801bb5a:	4296      	cmp	r6, r2
 801bb5c:	d802      	bhi.n	801bb64 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801bb5e:	4b09      	ldr	r3, [pc, #36]	; (801bb84 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801bb60:	4a0b      	ldr	r2, [pc, #44]	; (801bb90 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801bb62:	e7dd      	b.n	801bb20 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801bb64:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 801bb66:	3401      	adds	r4, #1
 801bb68:	4432      	add	r2, r6
 801bb6a:	b292      	uxth	r2, r2
 801bb6c:	2a09      	cmp	r2, #9
 801bb6e:	bf88      	it	hi
 801bb70:	3a0a      	subhi	r2, #10
 801bb72:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801bb76:	8b52      	ldrh	r2, [r2, #26]
 801bb78:	42aa      	cmp	r2, r5
 801bb7a:	d0e8      	beq.n	801bb4e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801bb7c:	e7e1      	b.n	801bb42 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801bb7e:	2001      	movs	r0, #1
 801bb80:	e7e0      	b.n	801bb44 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801bb82:	bf00      	nop
 801bb84:	0802dfa1 	.word	0x0802dfa1
 801bb88:	0802e45b 	.word	0x0802e45b
 801bb8c:	0802df69 	.word	0x0802df69
 801bb90:	0802e100 	.word	0x0802e100

0801bb94 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801bb94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb98:	4605      	mov	r5, r0
 801bb9a:	4616      	mov	r6, r2
 801bb9c:	1c8c      	adds	r4, r1, #2
 801bb9e:	8809      	ldrh	r1, [r1, #0]
 801bba0:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801bba4:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801bba8:	42b3      	cmp	r3, r6
 801bbaa:	d124      	bne.n	801bbf6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801bbac:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801bbb0:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801bbb4:	f001 070f 	and.w	r7, r1, #15
 801bbb8:	4652      	mov	r2, sl
 801bbba:	f8cd 8000 	str.w	r8, [sp]
 801bbbe:	464b      	mov	r3, r9
 801bbc0:	4621      	mov	r1, r4
 801bbc2:	4628      	mov	r0, r5
 801bbc4:	f7ff ff9e 	bl	801bb04 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801bbc8:	4683      	mov	fp, r0
 801bbca:	b168      	cbz	r0, 801bbe8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801bbcc:	eb0a 0109 	add.w	r1, sl, r9
 801bbd0:	463a      	mov	r2, r7
 801bbd2:	4628      	mov	r0, r5
 801bbd4:	4441      	add	r1, r8
 801bbd6:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801bbda:	4649      	mov	r1, r9
 801bbdc:	f7ff ff42 	bl	801ba64 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801bbe0:	4658      	mov	r0, fp
 801bbe2:	b003      	add	sp, #12
 801bbe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbe8:	eb07 010a 	add.w	r1, r7, sl
 801bbec:	4449      	add	r1, r9
 801bbee:	4441      	add	r1, r8
 801bbf0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801bbf4:	e7d2      	b.n	801bb9c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801bbf6:	f04f 0b00 	mov.w	fp, #0
 801bbfa:	e7f1      	b.n	801bbe0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801bbfc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801bbfc:	b570      	push	{r4, r5, r6, lr}
 801bbfe:	8810      	ldrh	r0, [r2, #0]
 801bc00:	4298      	cmp	r0, r3
 801bc02:	d817      	bhi.n	801bc34 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801bc04:	1e48      	subs	r0, r1, #1
 801bc06:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801bc0a:	4298      	cmp	r0, r3
 801bc0c:	d312      	bcc.n	801bc34 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801bc0e:	2400      	movs	r4, #0
 801bc10:	428c      	cmp	r4, r1
 801bc12:	d20f      	bcs.n	801bc34 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801bc14:	1860      	adds	r0, r4, r1
 801bc16:	1040      	asrs	r0, r0, #1
 801bc18:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801bc1c:	0085      	lsls	r5, r0, #2
 801bc1e:	42b3      	cmp	r3, r6
 801bc20:	d902      	bls.n	801bc28 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801bc22:	3001      	adds	r0, #1
 801bc24:	b284      	uxth	r4, r0
 801bc26:	e7f3      	b.n	801bc10 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801bc28:	d201      	bcs.n	801bc2e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801bc2a:	b281      	uxth	r1, r0
 801bc2c:	e7f0      	b.n	801bc10 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801bc2e:	442a      	add	r2, r5
 801bc30:	8850      	ldrh	r0, [r2, #2]
 801bc32:	bd70      	pop	{r4, r5, r6, pc}
 801bc34:	2000      	movs	r0, #0
 801bc36:	e7fc      	b.n	801bc32 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801bc38 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801bc38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc3c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801bc3e:	4604      	mov	r4, r0
 801bc40:	260b      	movs	r6, #11
 801bc42:	886f      	ldrh	r7, [r5, #2]
 801bc44:	087f      	lsrs	r7, r7, #1
 801bc46:	3e01      	subs	r6, #1
 801bc48:	d01b      	beq.n	801bc82 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801bc4a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801bc4c:	b92b      	cbnz	r3, 801bc5a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801bc4e:	4b0e      	ldr	r3, [pc, #56]	; (801bc88 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801bc50:	21bf      	movs	r1, #191	; 0xbf
 801bc52:	4a0e      	ldr	r2, [pc, #56]	; (801bc8c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801bc54:	480e      	ldr	r0, [pc, #56]	; (801bc90 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801bc56:	f00a feb3 	bl	80269c0 <__assert_func>
 801bc5a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801bc5c:	462a      	mov	r2, r5
 801bc5e:	4639      	mov	r1, r7
 801bc60:	4620      	mov	r0, r4
 801bc62:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801bc66:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801bc6a:	4643      	mov	r3, r8
 801bc6c:	f7ff ffc6 	bl	801bbfc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801bc70:	b138      	cbz	r0, 801bc82 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801bc72:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801bc76:	4642      	mov	r2, r8
 801bc78:	4620      	mov	r0, r4
 801bc7a:	f7ff ff8b 	bl	801bb94 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801bc7e:	2800      	cmp	r0, #0
 801bc80:	d1e1      	bne.n	801bc46 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801bc82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc86:	bf00      	nop
 801bc88:	0802df60 	.word	0x0802df60
 801bc8c:	0802e1d2 	.word	0x0802e1d2
 801bc90:	0802df69 	.word	0x0802df69

0801bc94 <_ZN8touchgfx8ceil28_4El>:
 801bc94:	f110 030f 	adds.w	r3, r0, #15
 801bc98:	d401      	bmi.n	801bc9e <_ZN8touchgfx8ceil28_4El+0xa>
 801bc9a:	1118      	asrs	r0, r3, #4
 801bc9c:	4770      	bx	lr
 801bc9e:	2210      	movs	r2, #16
 801bca0:	f1c0 0001 	rsb	r0, r0, #1
 801bca4:	fb93 f3f2 	sdiv	r3, r3, r2
 801bca8:	f010 000f 	ands.w	r0, r0, #15
 801bcac:	bf18      	it	ne
 801bcae:	2001      	movne	r0, #1
 801bcb0:	1a18      	subs	r0, r3, r0
 801bcb2:	4770      	bx	lr

0801bcb4 <_ZN8touchgfx11floorDivModEllRlS0_>:
 801bcb4:	2900      	cmp	r1, #0
 801bcb6:	b538      	push	{r3, r4, r5, lr}
 801bcb8:	dc05      	bgt.n	801bcc6 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801bcba:	4b0f      	ldr	r3, [pc, #60]	; (801bcf8 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801bcbc:	21f7      	movs	r1, #247	; 0xf7
 801bcbe:	4a0f      	ldr	r2, [pc, #60]	; (801bcfc <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801bcc0:	480f      	ldr	r0, [pc, #60]	; (801bd00 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801bcc2:	f00a fe7d 	bl	80269c0 <__assert_func>
 801bcc6:	2800      	cmp	r0, #0
 801bcc8:	db06      	blt.n	801bcd8 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801bcca:	fb90 f4f1 	sdiv	r4, r0, r1
 801bcce:	fb01 0114 	mls	r1, r1, r4, r0
 801bcd2:	6014      	str	r4, [r2, #0]
 801bcd4:	6019      	str	r1, [r3, #0]
 801bcd6:	bd38      	pop	{r3, r4, r5, pc}
 801bcd8:	4240      	negs	r0, r0
 801bcda:	fb90 f4f1 	sdiv	r4, r0, r1
 801bcde:	4265      	negs	r5, r4
 801bce0:	fb01 0014 	mls	r0, r1, r4, r0
 801bce4:	6015      	str	r5, [r2, #0]
 801bce6:	6018      	str	r0, [r3, #0]
 801bce8:	2800      	cmp	r0, #0
 801bcea:	d0f4      	beq.n	801bcd6 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801bcec:	6810      	ldr	r0, [r2, #0]
 801bcee:	3801      	subs	r0, #1
 801bcf0:	6010      	str	r0, [r2, #0]
 801bcf2:	6818      	ldr	r0, [r3, #0]
 801bcf4:	1a09      	subs	r1, r1, r0
 801bcf6:	e7ed      	b.n	801bcd4 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801bcf8:	0802e52c 	.word	0x0802e52c
 801bcfc:	0802e56b 	.word	0x0802e56b
 801bd00:	0802e53c 	.word	0x0802e53c

0801bd04 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801bd04:	b570      	push	{r4, r5, r6, lr}
 801bd06:	694a      	ldr	r2, [r1, #20]
 801bd08:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801bd0a:	684b      	ldr	r3, [r1, #4]
 801bd0c:	1b54      	subs	r4, r2, r5
 801bd0e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801bd10:	f000 8106 	beq.w	801bf20 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801bd14:	1b9b      	subs	r3, r3, r6
 801bd16:	d003      	beq.n	801bd20 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801bd18:	4363      	muls	r3, r4
 801bd1a:	2210      	movs	r2, #16
 801bd1c:	fb93 f3f2 	sdiv	r3, r3, r2
 801bd20:	680c      	ldr	r4, [r1, #0]
 801bd22:	698a      	ldr	r2, [r1, #24]
 801bd24:	1b65      	subs	r5, r4, r5
 801bd26:	f000 80fd 	beq.w	801bf24 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801bd2a:	1b92      	subs	r2, r2, r6
 801bd2c:	d003      	beq.n	801bd36 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801bd2e:	436a      	muls	r2, r5
 801bd30:	2410      	movs	r4, #16
 801bd32:	fb92 f2f4 	sdiv	r2, r2, r4
 801bd36:	1a9b      	subs	r3, r3, r2
 801bd38:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801bf60 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801bd3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bd40:	460a      	mov	r2, r1
 801bd42:	ee07 3a90 	vmov	s15, r3
 801bd46:	f100 040c 	add.w	r4, r0, #12
 801bd4a:	4603      	mov	r3, r0
 801bd4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bd50:	ee67 7a84 	vmul.f32	s15, s15, s8
 801bd54:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801bd58:	eeb1 6a43 	vneg.f32	s12, s6
 801bd5c:	edd2 7a02 	vldr	s15, [r2, #8]
 801bd60:	3214      	adds	r2, #20
 801bd62:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801bd66:	ece3 6a01 	vstmia	r3!, {s13}
 801bd6a:	429c      	cmp	r4, r3
 801bd6c:	ed52 7a02 	vldr	s15, [r2, #-8]
 801bd70:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801bd74:	edc3 7a02 	vstr	s15, [r3, #8]
 801bd78:	ed52 7a01 	vldr	s15, [r2, #-4]
 801bd7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801bd80:	edc3 7a05 	vstr	s15, [r3, #20]
 801bd84:	d1ea      	bne.n	801bd5c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801bd86:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801bd88:	698b      	ldr	r3, [r1, #24]
 801bd8a:	edd0 4a02 	vldr	s9, [r0, #8]
 801bd8e:	1a9b      	subs	r3, r3, r2
 801bd90:	edd0 3a00 	vldr	s7, [r0]
 801bd94:	edd0 6a01 	vldr	s13, [r0, #4]
 801bd98:	ee07 3a90 	vmov	s15, r3
 801bd9c:	684b      	ldr	r3, [r1, #4]
 801bd9e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801bda2:	ed90 5a05 	vldr	s10, [r0, #20]
 801bda6:	1a9b      	subs	r3, r3, r2
 801bda8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bdac:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801bdb0:	ed90 2a03 	vldr	s4, [r0, #12]
 801bdb4:	ee07 3a10 	vmov	s14, r3
 801bdb8:	edd0 5a04 	vldr	s11, [r0, #16]
 801bdbc:	ee67 7a84 	vmul.f32	s15, s15, s8
 801bdc0:	ed90 1a07 	vldr	s2, [r0, #28]
 801bdc4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bdc8:	edd0 2a06 	vldr	s5, [r0, #24]
 801bdcc:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801bdd0:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801bdd4:	ee27 7a04 	vmul.f32	s14, s14, s8
 801bdd8:	ee32 5a45 	vsub.f32	s10, s4, s10
 801bddc:	eee6 7a87 	vfma.f32	s15, s13, s14
 801bde0:	ee67 7a83 	vmul.f32	s15, s15, s6
 801bde4:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801bde8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801bdea:	694a      	ldr	r2, [r1, #20]
 801bdec:	1b13      	subs	r3, r2, r4
 801bdee:	ee07 3a10 	vmov	s14, r3
 801bdf2:	680b      	ldr	r3, [r1, #0]
 801bdf4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bdf8:	1b1b      	subs	r3, r3, r4
 801bdfa:	ee27 7a04 	vmul.f32	s14, s14, s8
 801bdfe:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801be02:	ee07 3a10 	vmov	s14, r3
 801be06:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801be0a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801be0e:	eee6 4a87 	vfma.f32	s9, s13, s14
 801be12:	ee64 4a86 	vmul.f32	s9, s9, s12
 801be16:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801be1a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801be1c:	698b      	ldr	r3, [r1, #24]
 801be1e:	1a9b      	subs	r3, r3, r2
 801be20:	ee06 3a90 	vmov	s13, r3
 801be24:	684b      	ldr	r3, [r1, #4]
 801be26:	1a9b      	subs	r3, r3, r2
 801be28:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801be2c:	ee07 3a10 	vmov	s14, r3
 801be30:	ee66 6a84 	vmul.f32	s13, s13, s8
 801be34:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801be38:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801be3c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801be40:	eee5 6a87 	vfma.f32	s13, s11, s14
 801be44:	ee66 6a83 	vmul.f32	s13, s13, s6
 801be48:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801be4c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801be4e:	694a      	ldr	r2, [r1, #20]
 801be50:	1b13      	subs	r3, r2, r4
 801be52:	ee07 3a10 	vmov	s14, r3
 801be56:	680b      	ldr	r3, [r1, #0]
 801be58:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801be5c:	1b1b      	subs	r3, r3, r4
 801be5e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801be62:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801be66:	ee07 3a10 	vmov	s14, r3
 801be6a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801be6e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801be72:	eea5 5a87 	vfma.f32	s10, s11, s14
 801be76:	edd0 5a08 	vldr	s11, [r0, #32]
 801be7a:	ee31 1a65 	vsub.f32	s2, s2, s11
 801be7e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801be82:	ee25 5a06 	vmul.f32	s10, s10, s12
 801be86:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801be8a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801be8c:	698b      	ldr	r3, [r1, #24]
 801be8e:	1a9b      	subs	r3, r3, r2
 801be90:	ee07 3a10 	vmov	s14, r3
 801be94:	684b      	ldr	r3, [r1, #4]
 801be96:	1a9b      	subs	r3, r3, r2
 801be98:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801be9c:	ee01 3a90 	vmov	s3, r3
 801bea0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801bea4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801bea8:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801beac:	ee61 1a84 	vmul.f32	s3, s3, s8
 801beb0:	eea1 7a21 	vfma.f32	s14, s2, s3
 801beb4:	ee27 7a03 	vmul.f32	s14, s14, s6
 801beb8:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801bebc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801bebe:	694a      	ldr	r2, [r1, #20]
 801bec0:	1b13      	subs	r3, r2, r4
 801bec2:	ee03 3a10 	vmov	s6, r3
 801bec6:	680b      	ldr	r3, [r1, #0]
 801bec8:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801becc:	1b1b      	subs	r3, r3, r4
 801bece:	ee23 3a04 	vmul.f32	s6, s6, s8
 801bed2:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801bed6:	ee03 3a10 	vmov	s6, r3
 801beda:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801bede:	ee23 4a04 	vmul.f32	s8, s6, s8
 801bee2:	eee1 5a04 	vfma.f32	s11, s2, s8
 801bee6:	ee25 6a86 	vmul.f32	s12, s11, s12
 801beea:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801beee:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801bef2:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801bef6:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801befa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801befe:	dd13      	ble.n	801bf28 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801bf00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801bf04:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801bf08:	63c3      	str	r3, [r0, #60]	; 0x3c
 801bf0a:	eee3 7a87 	vfma.f32	s15, s7, s14
 801bf0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801bf12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf16:	dd15      	ble.n	801bf44 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801bf18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801bf1c:	6403      	str	r3, [r0, #64]	; 0x40
 801bf1e:	bd70      	pop	{r4, r5, r6, pc}
 801bf20:	4623      	mov	r3, r4
 801bf22:	e6fd      	b.n	801bd20 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801bf24:	462a      	mov	r2, r5
 801bf26:	e706      	b.n	801bd36 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801bf28:	d502      	bpl.n	801bf30 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801bf2a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801bf2e:	e7e9      	b.n	801bf04 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801bf30:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801bf34:	eea3 2a85 	vfma.f32	s4, s7, s10
 801bf38:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801bf3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf40:	dade      	bge.n	801bf00 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801bf42:	e7f2      	b.n	801bf2a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801bf44:	d502      	bpl.n	801bf4c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801bf46:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801bf4a:	e7e7      	b.n	801bf1c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801bf4c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801bf50:	eee3 4a86 	vfma.f32	s9, s7, s12
 801bf54:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801bf58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf5c:	dadc      	bge.n	801bf18 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801bf5e:	e7f2      	b.n	801bf46 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801bf60:	3d800000 	.word	0x3d800000

0801bf64 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801bf64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf68:	f04f 0814 	mov.w	r8, #20
 801bf6c:	4604      	mov	r4, r0
 801bf6e:	4617      	mov	r7, r2
 801bf70:	460d      	mov	r5, r1
 801bf72:	fb08 f903 	mul.w	r9, r8, r3
 801bf76:	461e      	mov	r6, r3
 801bf78:	eb02 0a09 	add.w	sl, r2, r9
 801bf7c:	f8da 0004 	ldr.w	r0, [sl, #4]
 801bf80:	f7ff fe88 	bl	801bc94 <_ZN8touchgfx8ceil28_4El>
 801bf84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bf86:	6160      	str	r0, [r4, #20]
 801bf88:	fb08 f803 	mul.w	r8, r8, r3
 801bf8c:	9001      	str	r0, [sp, #4]
 801bf8e:	eb07 0b08 	add.w	fp, r7, r8
 801bf92:	f8db 0004 	ldr.w	r0, [fp, #4]
 801bf96:	f7ff fe7d 	bl	801bc94 <_ZN8touchgfx8ceil28_4El>
 801bf9a:	9a01      	ldr	r2, [sp, #4]
 801bf9c:	1a80      	subs	r0, r0, r2
 801bf9e:	61a0      	str	r0, [r4, #24]
 801bfa0:	2800      	cmp	r0, #0
 801bfa2:	f000 8088 	beq.w	801c0b6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801bfa6:	f857 3009 	ldr.w	r3, [r7, r9]
 801bfaa:	f857 c008 	ldr.w	ip, [r7, r8]
 801bfae:	f8db 0004 	ldr.w	r0, [fp, #4]
 801bfb2:	ebac 0c03 	sub.w	ip, ip, r3
 801bfb6:	f8da 1004 	ldr.w	r1, [sl, #4]
 801bfba:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801bfbe:	1a40      	subs	r0, r0, r1
 801bfc0:	fb0b f202 	mul.w	r2, fp, r2
 801bfc4:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801bfc8:	fb0c 2211 	mls	r2, ip, r1, r2
 801bfcc:	4641      	mov	r1, r8
 801bfce:	fb00 2003 	mla	r0, r0, r3, r2
 801bfd2:	f104 0310 	add.w	r3, r4, #16
 801bfd6:	4622      	mov	r2, r4
 801bfd8:	3801      	subs	r0, #1
 801bfda:	4440      	add	r0, r8
 801bfdc:	f7ff fe6a 	bl	801bcb4 <_ZN8touchgfx11floorDivModEllRlS0_>
 801bfe0:	f104 0308 	add.w	r3, r4, #8
 801bfe4:	1d22      	adds	r2, r4, #4
 801bfe6:	4641      	mov	r1, r8
 801bfe8:	4658      	mov	r0, fp
 801bfea:	f7ff fe63 	bl	801bcb4 <_ZN8touchgfx11floorDivModEllRlS0_>
 801bfee:	f8c4 800c 	str.w	r8, [r4, #12]
 801bff2:	6962      	ldr	r2, [r4, #20]
 801bff4:	f8da 3004 	ldr.w	r3, [sl, #4]
 801bff8:	eddf 6a31 	vldr	s13, [pc, #196]	; 801c0c0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801bffc:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801c000:	6822      	ldr	r2, [r4, #0]
 801c002:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801c006:	ee07 3a10 	vmov	s14, r3
 801c00a:	f857 3009 	ldr.w	r3, [r7, r9]
 801c00e:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801c012:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c016:	ee07 3a90 	vmov	s15, r3
 801c01a:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801c01e:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c026:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c02a:	edd3 6a00 	vldr	s13, [r3]
 801c02e:	eee6 6a07 	vfma.f32	s13, s12, s14
 801c032:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801c036:	eee6 6a27 	vfma.f32	s13, s12, s15
 801c03a:	edc4 6a07 	vstr	s13, [r4, #28]
 801c03e:	edd4 6a01 	vldr	s13, [r4, #4]
 801c042:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801c046:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c04a:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801c04e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c052:	ed84 6a08 	vstr	s12, [r4, #32]
 801c056:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801c058:	6262      	str	r2, [r4, #36]	; 0x24
 801c05a:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801c05e:	ed93 6a03 	vldr	s12, [r3, #12]
 801c062:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c066:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801c06a:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801c06e:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801c072:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801c076:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801c07a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c07e:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801c082:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801c084:	6322      	str	r2, [r4, #48]	; 0x30
 801c086:	ed93 6a06 	vldr	s12, [r3, #24]
 801c08a:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801c08e:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c092:	eeb0 7a46 	vmov.f32	s14, s12
 801c096:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 801c09a:	eea6 7a27 	vfma.f32	s14, s12, s15
 801c09e:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801c0a2:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 801c0a6:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801c0aa:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c0ae:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801c0b2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801c0b4:	63e3      	str	r3, [r4, #60]	; 0x3c
 801c0b6:	4620      	mov	r0, r4
 801c0b8:	b003      	add	sp, #12
 801c0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0be:	bf00      	nop
 801c0c0:	3d800000 	.word	0x3d800000

0801c0c4 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801c0c4:	4602      	mov	r2, r0
 801c0c6:	b148      	cbz	r0, 801c0dc <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801c0c8:	2300      	movs	r3, #0
 801c0ca:	b298      	uxth	r0, r3
 801c0cc:	3301      	adds	r3, #1
 801c0ce:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801c0d2:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801c0d6:	2900      	cmp	r1, #0
 801c0d8:	d1f7      	bne.n	801c0ca <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801c0da:	4770      	bx	lr
 801c0dc:	4770      	bx	lr

0801c0de <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801c0de:	b530      	push	{r4, r5, lr}
 801c0e0:	4604      	mov	r4, r0
 801c0e2:	b159      	cbz	r1, 801c0fc <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801c0e4:	b148      	cbz	r0, 801c0fa <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801c0e6:	2300      	movs	r3, #0
 801c0e8:	b298      	uxth	r0, r3
 801c0ea:	4282      	cmp	r2, r0
 801c0ec:	d905      	bls.n	801c0fa <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801c0ee:	5ccd      	ldrb	r5, [r1, r3]
 801c0f0:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801c0f4:	3301      	adds	r3, #1
 801c0f6:	2d00      	cmp	r5, #0
 801c0f8:	d1f6      	bne.n	801c0e8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801c0fa:	bd30      	pop	{r4, r5, pc}
 801c0fc:	4608      	mov	r0, r1
 801c0fe:	e7fc      	b.n	801c0fa <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801c100 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801c100:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c102:	468c      	mov	ip, r1
 801c104:	b08b      	sub	sp, #44	; 0x2c
 801c106:	2100      	movs	r1, #0
 801c108:	ae01      	add	r6, sp, #4
 801c10a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801c10e:	211f      	movs	r1, #31
 801c110:	fbb0 f7f3 	udiv	r7, r0, r3
 801c114:	fb03 0517 	mls	r5, r3, r7, r0
 801c118:	4638      	mov	r0, r7
 801c11a:	b2ec      	uxtb	r4, r5
 801c11c:	2d09      	cmp	r5, #9
 801c11e:	bfd4      	ite	le
 801c120:	3430      	addle	r4, #48	; 0x30
 801c122:	3457      	addgt	r4, #87	; 0x57
 801c124:	b2e4      	uxtb	r4, r4
 801c126:	558c      	strb	r4, [r1, r6]
 801c128:	1e4c      	subs	r4, r1, #1
 801c12a:	b92f      	cbnz	r7, 801c138 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801c12c:	4431      	add	r1, r6
 801c12e:	4660      	mov	r0, ip
 801c130:	f7ff ffd5 	bl	801c0de <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801c134:	b00b      	add	sp, #44	; 0x2c
 801c136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c138:	4621      	mov	r1, r4
 801c13a:	e7e9      	b.n	801c110 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801c13c <_ZN8touchgfx7Unicode4itoaElPtti>:
 801c13c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c13e:	4607      	mov	r7, r0
 801c140:	b08b      	sub	sp, #44	; 0x2c
 801c142:	4608      	mov	r0, r1
 801c144:	b341      	cbz	r1, 801c198 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801c146:	1e99      	subs	r1, r3, #2
 801c148:	2922      	cmp	r1, #34	; 0x22
 801c14a:	d825      	bhi.n	801c198 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801c14c:	2100      	movs	r1, #0
 801c14e:	463c      	mov	r4, r7
 801c150:	261f      	movs	r6, #31
 801c152:	f10d 0c04 	add.w	ip, sp, #4
 801c156:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801c15a:	1e71      	subs	r1, r6, #1
 801c15c:	fb94 fef3 	sdiv	lr, r4, r3
 801c160:	fb03 441e 	mls	r4, r3, lr, r4
 801c164:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801c168:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801c16c:	b2ec      	uxtb	r4, r5
 801c16e:	2d09      	cmp	r5, #9
 801c170:	bfd4      	ite	le
 801c172:	3430      	addle	r4, #48	; 0x30
 801c174:	3457      	addgt	r4, #87	; 0x57
 801c176:	b2e4      	uxtb	r4, r4
 801c178:	f80c 4006 	strb.w	r4, [ip, r6]
 801c17c:	4674      	mov	r4, lr
 801c17e:	b96c      	cbnz	r4, 801c19c <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801c180:	2f00      	cmp	r7, #0
 801c182:	da05      	bge.n	801c190 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801c184:	ab0a      	add	r3, sp, #40	; 0x28
 801c186:	4419      	add	r1, r3
 801c188:	232d      	movs	r3, #45	; 0x2d
 801c18a:	f801 3c24 	strb.w	r3, [r1, #-36]
 801c18e:	1eb1      	subs	r1, r6, #2
 801c190:	3101      	adds	r1, #1
 801c192:	4461      	add	r1, ip
 801c194:	f7ff ffa3 	bl	801c0de <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801c198:	b00b      	add	sp, #44	; 0x2c
 801c19a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c19c:	460e      	mov	r6, r1
 801c19e:	e7dc      	b.n	801c15a <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801c1a0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801c1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1a4:	b085      	sub	sp, #20
 801c1a6:	4691      	mov	r9, r2
 801c1a8:	6802      	ldr	r2, [r0, #0]
 801c1aa:	4688      	mov	r8, r1
 801c1ac:	461c      	mov	r4, r3
 801c1ae:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801c1b2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801c1b6:	4683      	mov	fp, r0
 801c1b8:	4610      	mov	r0, r2
 801c1ba:	9103      	str	r1, [sp, #12]
 801c1bc:	9302      	str	r3, [sp, #8]
 801c1be:	9201      	str	r2, [sp, #4]
 801c1c0:	f7ff ff80 	bl	801c0c4 <_ZN8touchgfx7Unicode6strlenEPKt>
 801c1c4:	f1b8 0f00 	cmp.w	r8, #0
 801c1c8:	bf0c      	ite	eq
 801c1ca:	4684      	moveq	ip, r0
 801c1cc:	f100 0c01 	addne.w	ip, r0, #1
 801c1d0:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801c1d4:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801c1d8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801c1da:	fa1f fc8c 	uxth.w	ip, ip
 801c1de:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c1e0:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801c1e4:	9903      	ldr	r1, [sp, #12]
 801c1e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801c1ea:	d041      	beq.n	801c270 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801c1ec:	d834      	bhi.n	801c258 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801c1ee:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801c1f2:	d059      	beq.n	801c2a8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801c1f4:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801c1f8:	d03a      	beq.n	801c270 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801c1fa:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801c1fe:	d034      	beq.n	801c26a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801c200:	2400      	movs	r4, #0
 801c202:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801c206:	3a01      	subs	r2, #1
 801c208:	b169      	cbz	r1, 801c226 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801c20a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c20c:	458c      	cmp	ip, r1
 801c20e:	da09      	bge.n	801c224 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801c210:	eba1 010c 	sub.w	r1, r1, ip
 801c214:	b289      	uxth	r1, r1
 801c216:	b933      	cbnz	r3, 801c226 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801c218:	2e00      	cmp	r6, #0
 801c21a:	d051      	beq.n	801c2c0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801c21c:	2800      	cmp	r0, #0
 801c21e:	d04f      	beq.n	801c2c0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801c220:	440c      	add	r4, r1
 801c222:	b2a4      	uxth	r4, r4
 801c224:	2100      	movs	r1, #0
 801c226:	682b      	ldr	r3, [r5, #0]
 801c228:	4293      	cmp	r3, r2
 801c22a:	da07      	bge.n	801c23c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801c22c:	f1b8 0f00 	cmp.w	r8, #0
 801c230:	d004      	beq.n	801c23c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801c232:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801c236:	682b      	ldr	r3, [r5, #0]
 801c238:	3301      	adds	r3, #1
 801c23a:	602b      	str	r3, [r5, #0]
 801c23c:	2730      	movs	r7, #48	; 0x30
 801c23e:	2c00      	cmp	r4, #0
 801c240:	d04e      	beq.n	801c2e0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801c242:	682e      	ldr	r6, [r5, #0]
 801c244:	3c01      	subs	r4, #1
 801c246:	42b2      	cmp	r2, r6
 801c248:	b2a4      	uxth	r4, r4
 801c24a:	dd49      	ble.n	801c2e0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801c24c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801c250:	682b      	ldr	r3, [r5, #0]
 801c252:	3301      	adds	r3, #1
 801c254:	602b      	str	r3, [r5, #0]
 801c256:	e7f2      	b.n	801c23e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801c258:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801c25c:	d01d      	beq.n	801c29a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801c25e:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801c262:	d002      	beq.n	801c26a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801c264:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801c268:	e7c9      	b.n	801c1fe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801c26a:	4684      	mov	ip, r0
 801c26c:	f04f 0800 	mov.w	r8, #0
 801c270:	2c00      	cmp	r4, #0
 801c272:	d0c6      	beq.n	801c202 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801c274:	b947      	cbnz	r7, 801c288 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801c276:	2801      	cmp	r0, #1
 801c278:	d106      	bne.n	801c288 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801c27a:	8814      	ldrh	r4, [r2, #0]
 801c27c:	2c30      	cmp	r4, #48	; 0x30
 801c27e:	bf02      	ittt	eq
 801c280:	3202      	addeq	r2, #2
 801c282:	4638      	moveq	r0, r7
 801c284:	f8cb 2000 	streq.w	r2, [fp]
 801c288:	45bc      	cmp	ip, r7
 801c28a:	da14      	bge.n	801c2b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801c28c:	b2bf      	uxth	r7, r7
 801c28e:	eba7 040c 	sub.w	r4, r7, ip
 801c292:	46bc      	mov	ip, r7
 801c294:	b2a4      	uxth	r4, r4
 801c296:	2600      	movs	r6, #0
 801c298:	e7b3      	b.n	801c202 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801c29a:	4684      	mov	ip, r0
 801c29c:	b16c      	cbz	r4, 801c2ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801c29e:	42b8      	cmp	r0, r7
 801c2a0:	dd00      	ble.n	801c2a4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801c2a2:	b2b8      	uxth	r0, r7
 801c2a4:	2400      	movs	r4, #0
 801c2a6:	e003      	b.n	801c2b0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801c2a8:	f04f 0c01 	mov.w	ip, #1
 801c2ac:	2400      	movs	r4, #0
 801c2ae:	4660      	mov	r0, ip
 801c2b0:	4626      	mov	r6, r4
 801c2b2:	46a0      	mov	r8, r4
 801c2b4:	e7a5      	b.n	801c202 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801c2b6:	2400      	movs	r4, #0
 801c2b8:	e7ed      	b.n	801c296 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801c2ba:	4626      	mov	r6, r4
 801c2bc:	46a0      	mov	r8, r4
 801c2be:	e7a0      	b.n	801c202 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801c2c0:	2900      	cmp	r1, #0
 801c2c2:	d0b0      	beq.n	801c226 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801c2c4:	2720      	movs	r7, #32
 801c2c6:	682e      	ldr	r6, [r5, #0]
 801c2c8:	2900      	cmp	r1, #0
 801c2ca:	d0ac      	beq.n	801c226 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801c2cc:	3901      	subs	r1, #1
 801c2ce:	4296      	cmp	r6, r2
 801c2d0:	b289      	uxth	r1, r1
 801c2d2:	daa7      	bge.n	801c224 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801c2d4:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801c2d8:	682b      	ldr	r3, [r5, #0]
 801c2da:	3301      	adds	r3, #1
 801c2dc:	602b      	str	r3, [r5, #0]
 801c2de:	e7f2      	b.n	801c2c6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801c2e0:	b188      	cbz	r0, 801c306 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801c2e2:	682b      	ldr	r3, [r5, #0]
 801c2e4:	3801      	subs	r0, #1
 801c2e6:	429a      	cmp	r2, r3
 801c2e8:	b280      	uxth	r0, r0
 801c2ea:	dd0c      	ble.n	801c306 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801c2ec:	f8db 3000 	ldr.w	r3, [fp]
 801c2f0:	1c9c      	adds	r4, r3, #2
 801c2f2:	f8cb 4000 	str.w	r4, [fp]
 801c2f6:	881c      	ldrh	r4, [r3, #0]
 801c2f8:	682b      	ldr	r3, [r5, #0]
 801c2fa:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801c2fe:	682b      	ldr	r3, [r5, #0]
 801c300:	3301      	adds	r3, #1
 801c302:	602b      	str	r3, [r5, #0]
 801c304:	e7ec      	b.n	801c2e0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801c306:	2620      	movs	r6, #32
 801c308:	b151      	cbz	r1, 801c320 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801c30a:	6828      	ldr	r0, [r5, #0]
 801c30c:	3901      	subs	r1, #1
 801c30e:	4282      	cmp	r2, r0
 801c310:	b289      	uxth	r1, r1
 801c312:	dd05      	ble.n	801c320 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801c314:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801c318:	682b      	ldr	r3, [r5, #0]
 801c31a:	3301      	adds	r3, #1
 801c31c:	602b      	str	r3, [r5, #0]
 801c31e:	e7f3      	b.n	801c308 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801c320:	b005      	add	sp, #20
 801c322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c326 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801c326:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c32a:	2400      	movs	r4, #0
 801c32c:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801c330:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801c334:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801c338:	8014      	strh	r4, [r2, #0]
 801c33a:	701c      	strb	r4, [r3, #0]
 801c33c:	f888 4000 	strb.w	r4, [r8]
 801c340:	f88c 4000 	strb.w	r4, [ip]
 801c344:	f88e 4000 	strb.w	r4, [lr]
 801c348:	703c      	strb	r4, [r7, #0]
 801c34a:	6804      	ldr	r4, [r0, #0]
 801c34c:	b1a4      	cbz	r4, 801c378 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801c34e:	8824      	ldrh	r4, [r4, #0]
 801c350:	f04f 0901 	mov.w	r9, #1
 801c354:	b314      	cbz	r4, 801c39c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801c356:	2c2b      	cmp	r4, #43	; 0x2b
 801c358:	d001      	beq.n	801c35e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801c35a:	2c20      	cmp	r4, #32
 801c35c:	d110      	bne.n	801c380 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801c35e:	8014      	strh	r4, [r2, #0]
 801c360:	6804      	ldr	r4, [r0, #0]
 801c362:	b10c      	cbz	r4, 801c368 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801c364:	3402      	adds	r4, #2
 801c366:	6004      	str	r4, [r0, #0]
 801c368:	680c      	ldr	r4, [r1, #0]
 801c36a:	b10c      	cbz	r4, 801c370 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801c36c:	3401      	adds	r4, #1
 801c36e:	600c      	str	r4, [r1, #0]
 801c370:	6804      	ldr	r4, [r0, #0]
 801c372:	b17c      	cbz	r4, 801c394 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801c374:	8824      	ldrh	r4, [r4, #0]
 801c376:	e7ed      	b.n	801c354 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801c378:	680c      	ldr	r4, [r1, #0]
 801c37a:	b17c      	cbz	r4, 801c39c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801c37c:	7824      	ldrb	r4, [r4, #0]
 801c37e:	e7e7      	b.n	801c350 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801c380:	2c2d      	cmp	r4, #45	; 0x2d
 801c382:	d102      	bne.n	801c38a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801c384:	f883 9000 	strb.w	r9, [r3]
 801c388:	e7ea      	b.n	801c360 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801c38a:	2c23      	cmp	r4, #35	; 0x23
 801c38c:	d107      	bne.n	801c39e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801c38e:	f888 9000 	strb.w	r9, [r8]
 801c392:	e7e5      	b.n	801c360 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801c394:	680c      	ldr	r4, [r1, #0]
 801c396:	b10c      	cbz	r4, 801c39c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801c398:	7824      	ldrb	r4, [r4, #0]
 801c39a:	e7db      	b.n	801c354 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801c39c:	2400      	movs	r4, #0
 801c39e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801c3a2:	2b09      	cmp	r3, #9
 801c3a4:	d901      	bls.n	801c3aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801c3a6:	2c2a      	cmp	r4, #42	; 0x2a
 801c3a8:	d122      	bne.n	801c3f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801c3aa:	2301      	movs	r3, #1
 801c3ac:	2c30      	cmp	r4, #48	; 0x30
 801c3ae:	f88e 3000 	strb.w	r3, [lr]
 801c3b2:	d10d      	bne.n	801c3d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801c3b4:	f88c 3000 	strb.w	r3, [ip]
 801c3b8:	6803      	ldr	r3, [r0, #0]
 801c3ba:	b10b      	cbz	r3, 801c3c0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801c3bc:	3302      	adds	r3, #2
 801c3be:	6003      	str	r3, [r0, #0]
 801c3c0:	680b      	ldr	r3, [r1, #0]
 801c3c2:	b10b      	cbz	r3, 801c3c8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801c3c4:	3301      	adds	r3, #1
 801c3c6:	600b      	str	r3, [r1, #0]
 801c3c8:	6803      	ldr	r3, [r0, #0]
 801c3ca:	2b00      	cmp	r3, #0
 801c3cc:	d02f      	beq.n	801c42e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801c3ce:	881c      	ldrh	r4, [r3, #0]
 801c3d0:	2c2a      	cmp	r4, #42	; 0x2a
 801c3d2:	d135      	bne.n	801c440 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801c3d4:	f04f 33ff 	mov.w	r3, #4294967295
 801c3d8:	6033      	str	r3, [r6, #0]
 801c3da:	6803      	ldr	r3, [r0, #0]
 801c3dc:	b10b      	cbz	r3, 801c3e2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801c3de:	3302      	adds	r3, #2
 801c3e0:	6003      	str	r3, [r0, #0]
 801c3e2:	680b      	ldr	r3, [r1, #0]
 801c3e4:	b10b      	cbz	r3, 801c3ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801c3e6:	3301      	adds	r3, #1
 801c3e8:	600b      	str	r3, [r1, #0]
 801c3ea:	6803      	ldr	r3, [r0, #0]
 801c3ec:	b31b      	cbz	r3, 801c436 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801c3ee:	881c      	ldrh	r4, [r3, #0]
 801c3f0:	2c2e      	cmp	r4, #46	; 0x2e
 801c3f2:	d11a      	bne.n	801c42a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801c3f4:	2301      	movs	r3, #1
 801c3f6:	703b      	strb	r3, [r7, #0]
 801c3f8:	6803      	ldr	r3, [r0, #0]
 801c3fa:	b10b      	cbz	r3, 801c400 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801c3fc:	3302      	adds	r3, #2
 801c3fe:	6003      	str	r3, [r0, #0]
 801c400:	680b      	ldr	r3, [r1, #0]
 801c402:	b10b      	cbz	r3, 801c408 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801c404:	3301      	adds	r3, #1
 801c406:	600b      	str	r3, [r1, #0]
 801c408:	6803      	ldr	r3, [r0, #0]
 801c40a:	2b00      	cmp	r3, #0
 801c40c:	d036      	beq.n	801c47c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801c40e:	881b      	ldrh	r3, [r3, #0]
 801c410:	2b2a      	cmp	r3, #42	; 0x2a
 801c412:	d137      	bne.n	801c484 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801c414:	f04f 33ff 	mov.w	r3, #4294967295
 801c418:	602b      	str	r3, [r5, #0]
 801c41a:	6803      	ldr	r3, [r0, #0]
 801c41c:	b10b      	cbz	r3, 801c422 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801c41e:	3302      	adds	r3, #2
 801c420:	6003      	str	r3, [r0, #0]
 801c422:	680b      	ldr	r3, [r1, #0]
 801c424:	b10b      	cbz	r3, 801c42a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801c426:	3301      	adds	r3, #1
 801c428:	600b      	str	r3, [r1, #0]
 801c42a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c42e:	680c      	ldr	r4, [r1, #0]
 801c430:	b134      	cbz	r4, 801c440 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801c432:	7824      	ldrb	r4, [r4, #0]
 801c434:	e7cc      	b.n	801c3d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801c436:	680b      	ldr	r3, [r1, #0]
 801c438:	2b00      	cmp	r3, #0
 801c43a:	d0f6      	beq.n	801c42a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801c43c:	781c      	ldrb	r4, [r3, #0]
 801c43e:	e7d7      	b.n	801c3f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801c440:	2300      	movs	r3, #0
 801c442:	220a      	movs	r2, #10
 801c444:	6033      	str	r3, [r6, #0]
 801c446:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801c44a:	fa1f f38c 	uxth.w	r3, ip
 801c44e:	2b09      	cmp	r3, #9
 801c450:	d8ce      	bhi.n	801c3f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801c452:	6833      	ldr	r3, [r6, #0]
 801c454:	fb02 c303 	mla	r3, r2, r3, ip
 801c458:	6033      	str	r3, [r6, #0]
 801c45a:	6803      	ldr	r3, [r0, #0]
 801c45c:	b10b      	cbz	r3, 801c462 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801c45e:	3302      	adds	r3, #2
 801c460:	6003      	str	r3, [r0, #0]
 801c462:	680b      	ldr	r3, [r1, #0]
 801c464:	b10b      	cbz	r3, 801c46a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801c466:	3301      	adds	r3, #1
 801c468:	600b      	str	r3, [r1, #0]
 801c46a:	6803      	ldr	r3, [r0, #0]
 801c46c:	b10b      	cbz	r3, 801c472 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801c46e:	881c      	ldrh	r4, [r3, #0]
 801c470:	e7e9      	b.n	801c446 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801c472:	680c      	ldr	r4, [r1, #0]
 801c474:	2c00      	cmp	r4, #0
 801c476:	d0e6      	beq.n	801c446 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801c478:	7824      	ldrb	r4, [r4, #0]
 801c47a:	e7e4      	b.n	801c446 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801c47c:	680b      	ldr	r3, [r1, #0]
 801c47e:	b10b      	cbz	r3, 801c484 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801c480:	781b      	ldrb	r3, [r3, #0]
 801c482:	e7c5      	b.n	801c410 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801c484:	2200      	movs	r2, #0
 801c486:	240a      	movs	r4, #10
 801c488:	602a      	str	r2, [r5, #0]
 801c48a:	3b30      	subs	r3, #48	; 0x30
 801c48c:	682a      	ldr	r2, [r5, #0]
 801c48e:	b29e      	uxth	r6, r3
 801c490:	2e09      	cmp	r6, #9
 801c492:	d813      	bhi.n	801c4bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801c494:	fb04 3302 	mla	r3, r4, r2, r3
 801c498:	602b      	str	r3, [r5, #0]
 801c49a:	6803      	ldr	r3, [r0, #0]
 801c49c:	b10b      	cbz	r3, 801c4a2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801c49e:	3302      	adds	r3, #2
 801c4a0:	6003      	str	r3, [r0, #0]
 801c4a2:	680b      	ldr	r3, [r1, #0]
 801c4a4:	b10b      	cbz	r3, 801c4aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801c4a6:	3301      	adds	r3, #1
 801c4a8:	600b      	str	r3, [r1, #0]
 801c4aa:	6803      	ldr	r3, [r0, #0]
 801c4ac:	b10b      	cbz	r3, 801c4b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801c4ae:	881b      	ldrh	r3, [r3, #0]
 801c4b0:	e7eb      	b.n	801c48a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801c4b2:	680b      	ldr	r3, [r1, #0]
 801c4b4:	2b00      	cmp	r3, #0
 801c4b6:	d0e8      	beq.n	801c48a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801c4b8:	781b      	ldrb	r3, [r3, #0]
 801c4ba:	e7e6      	b.n	801c48a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801c4bc:	2a06      	cmp	r2, #6
 801c4be:	bfa8      	it	ge
 801c4c0:	2206      	movge	r2, #6
 801c4c2:	602a      	str	r2, [r5, #0]
 801c4c4:	e7b1      	b.n	801c42a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801c4c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801c4c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4ca:	b0a3      	sub	sp, #140	; 0x8c
 801c4cc:	2600      	movs	r6, #0
 801c4ce:	4607      	mov	r7, r0
 801c4d0:	4688      	mov	r8, r1
 801c4d2:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801c4d6:	4631      	mov	r1, r6
 801c4d8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801c4da:	4648      	mov	r0, r9
 801c4dc:	960d      	str	r6, [sp, #52]	; 0x34
 801c4de:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801c4e2:	2242      	movs	r2, #66	; 0x42
 801c4e4:	f00a faf8 	bl	8026ad8 <memset>
 801c4e8:	b15f      	cbz	r7, 801c502 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801c4ea:	f108 3aff 	add.w	sl, r8, #4294967295
 801c4ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c4f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c4f2:	b152      	cbz	r2, 801c50a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801c4f4:	8812      	ldrh	r2, [r2, #0]
 801c4f6:	b10a      	cbz	r2, 801c4fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801c4f8:	459a      	cmp	sl, r3
 801c4fa:	dc2e      	bgt.n	801c55a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801c4fc:	2200      	movs	r2, #0
 801c4fe:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801c502:	4638      	mov	r0, r7
 801c504:	b023      	add	sp, #140	; 0x8c
 801c506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c50a:	9a08      	ldr	r2, [sp, #32]
 801c50c:	2a00      	cmp	r2, #0
 801c50e:	d0f5      	beq.n	801c4fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801c510:	7812      	ldrb	r2, [r2, #0]
 801c512:	e7f0      	b.n	801c4f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801c514:	2d00      	cmp	r5, #0
 801c516:	d0ea      	beq.n	801c4ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801c518:	782a      	ldrb	r2, [r5, #0]
 801c51a:	b142      	cbz	r2, 801c52e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801c51c:	2a25      	cmp	r2, #37	; 0x25
 801c51e:	d001      	beq.n	801c524 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801c520:	459a      	cmp	sl, r3
 801c522:	dc08      	bgt.n	801c536 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801c524:	f1bb 0f00 	cmp.w	fp, #0
 801c528:	d121      	bne.n	801c56e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801c52a:	2d00      	cmp	r5, #0
 801c52c:	d0df      	beq.n	801c4ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801c52e:	782a      	ldrb	r2, [r5, #0]
 801c530:	f04f 0b00 	mov.w	fp, #0
 801c534:	e01d      	b.n	801c572 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801c536:	f1bb 0f00 	cmp.w	fp, #0
 801c53a:	d077      	beq.n	801c62c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801c53c:	f8bb 2000 	ldrh.w	r2, [fp]
 801c540:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801c544:	f1bb 0f00 	cmp.w	fp, #0
 801c548:	d002      	beq.n	801c550 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801c54a:	f10b 0202 	add.w	r2, fp, #2
 801c54e:	9209      	str	r2, [sp, #36]	; 0x24
 801c550:	b10d      	cbz	r5, 801c556 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801c552:	3501      	adds	r5, #1
 801c554:	9508      	str	r5, [sp, #32]
 801c556:	3301      	adds	r3, #1
 801c558:	930d      	str	r3, [sp, #52]	; 0x34
 801c55a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c55c:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801c560:	f1bb 0f00 	cmp.w	fp, #0
 801c564:	d0d6      	beq.n	801c514 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801c566:	f8bb 2000 	ldrh.w	r2, [fp]
 801c56a:	2a00      	cmp	r2, #0
 801c56c:	d1d6      	bne.n	801c51c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801c56e:	f8bb 2000 	ldrh.w	r2, [fp]
 801c572:	2a00      	cmp	r2, #0
 801c574:	d0bb      	beq.n	801c4ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801c576:	459a      	cmp	sl, r3
 801c578:	ddb9      	ble.n	801c4ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801c57a:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801c57e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801c582:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801c586:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801c58a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801c58e:	960e      	str	r6, [sp, #56]	; 0x38
 801c590:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801c594:	960f      	str	r6, [sp, #60]	; 0x3c
 801c596:	f1bb 0f00 	cmp.w	fp, #0
 801c59a:	d002      	beq.n	801c5a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801c59c:	f10b 0302 	add.w	r3, fp, #2
 801c5a0:	9309      	str	r3, [sp, #36]	; 0x24
 801c5a2:	b10d      	cbz	r5, 801c5a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801c5a4:	1c6b      	adds	r3, r5, #1
 801c5a6:	9308      	str	r3, [sp, #32]
 801c5a8:	ab0f      	add	r3, sp, #60	; 0x3c
 801c5aa:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801c5ae:	a908      	add	r1, sp, #32
 801c5b0:	a809      	add	r0, sp, #36	; 0x24
 801c5b2:	9305      	str	r3, [sp, #20]
 801c5b4:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801c5b8:	9304      	str	r3, [sp, #16]
 801c5ba:	ab0e      	add	r3, sp, #56	; 0x38
 801c5bc:	9303      	str	r3, [sp, #12]
 801c5be:	ab0c      	add	r3, sp, #48	; 0x30
 801c5c0:	9302      	str	r3, [sp, #8]
 801c5c2:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801c5c6:	9301      	str	r3, [sp, #4]
 801c5c8:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801c5cc:	9300      	str	r3, [sp, #0]
 801c5ce:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801c5d2:	f7ff fea8 	bl	801c326 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801c5d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c5d8:	2b00      	cmp	r3, #0
 801c5da:	bfbf      	itttt	lt
 801c5dc:	6823      	ldrlt	r3, [r4, #0]
 801c5de:	3404      	addlt	r4, #4
 801c5e0:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801c5e4:	930e      	strlt	r3, [sp, #56]	; 0x38
 801c5e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c5e8:	2b00      	cmp	r3, #0
 801c5ea:	bfbe      	ittt	lt
 801c5ec:	6823      	ldrlt	r3, [r4, #0]
 801c5ee:	3404      	addlt	r4, #4
 801c5f0:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801c5f4:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801c5f8:	bfb8      	it	lt
 801c5fa:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801c5fc:	b1d9      	cbz	r1, 801c636 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801c5fe:	880b      	ldrh	r3, [r1, #0]
 801c600:	2b69      	cmp	r3, #105	; 0x69
 801c602:	d01f      	beq.n	801c644 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801c604:	d82f      	bhi.n	801c666 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801c606:	2b58      	cmp	r3, #88	; 0x58
 801c608:	d01c      	beq.n	801c644 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801c60a:	d818      	bhi.n	801c63e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801c60c:	2b25      	cmp	r3, #37	; 0x25
 801c60e:	d034      	beq.n	801c67a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801c610:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c612:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801c616:	f1bb 0f00 	cmp.w	fp, #0
 801c61a:	f000 80b7 	beq.w	801c78c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801c61e:	f8bb 5000 	ldrh.w	r5, [fp]
 801c622:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801c626:	3301      	adds	r3, #1
 801c628:	930d      	str	r3, [sp, #52]	; 0x34
 801c62a:	e029      	b.n	801c680 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801c62c:	b10d      	cbz	r5, 801c632 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801c62e:	782a      	ldrb	r2, [r5, #0]
 801c630:	e786      	b.n	801c540 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801c632:	462a      	mov	r2, r5
 801c634:	e784      	b.n	801c540 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801c636:	2a00      	cmp	r2, #0
 801c638:	d0ea      	beq.n	801c610 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801c63a:	7813      	ldrb	r3, [r2, #0]
 801c63c:	e7e0      	b.n	801c600 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801c63e:	3b63      	subs	r3, #99	; 0x63
 801c640:	2b01      	cmp	r3, #1
 801c642:	d8e5      	bhi.n	801c610 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801c644:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801c648:	b329      	cbz	r1, 801c696 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801c64a:	880b      	ldrh	r3, [r1, #0]
 801c64c:	2b69      	cmp	r3, #105	; 0x69
 801c64e:	d063      	beq.n	801c718 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801c650:	d825      	bhi.n	801c69e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801c652:	2b63      	cmp	r3, #99	; 0x63
 801c654:	d038      	beq.n	801c6c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801c656:	2b64      	cmp	r3, #100	; 0x64
 801c658:	d05e      	beq.n	801c718 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801c65a:	2b58      	cmp	r3, #88	; 0x58
 801c65c:	d07a      	beq.n	801c754 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801c65e:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801c662:	4625      	mov	r5, r4
 801c664:	e036      	b.n	801c6d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801c666:	2b73      	cmp	r3, #115	; 0x73
 801c668:	d0ec      	beq.n	801c644 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801c66a:	d802      	bhi.n	801c672 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801c66c:	2b6f      	cmp	r3, #111	; 0x6f
 801c66e:	d1cf      	bne.n	801c610 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801c670:	e7e8      	b.n	801c644 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801c672:	2b75      	cmp	r3, #117	; 0x75
 801c674:	d0e6      	beq.n	801c644 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801c676:	2b78      	cmp	r3, #120	; 0x78
 801c678:	e7f9      	b.n	801c66e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801c67a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c67c:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801c680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c682:	b10b      	cbz	r3, 801c688 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801c684:	3302      	adds	r3, #2
 801c686:	9309      	str	r3, [sp, #36]	; 0x24
 801c688:	9b08      	ldr	r3, [sp, #32]
 801c68a:	2b00      	cmp	r3, #0
 801c68c:	f43f af2f 	beq.w	801c4ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801c690:	3301      	adds	r3, #1
 801c692:	9308      	str	r3, [sp, #32]
 801c694:	e72b      	b.n	801c4ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801c696:	2a00      	cmp	r2, #0
 801c698:	d0e1      	beq.n	801c65e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801c69a:	7813      	ldrb	r3, [r2, #0]
 801c69c:	e7d6      	b.n	801c64c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801c69e:	2b73      	cmp	r3, #115	; 0x73
 801c6a0:	d036      	beq.n	801c710 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801c6a2:	d807      	bhi.n	801c6b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801c6a4:	2b6f      	cmp	r3, #111	; 0x6f
 801c6a6:	d1da      	bne.n	801c65e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801c6a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c6aa:	1d25      	adds	r5, r4, #4
 801c6ac:	2308      	movs	r3, #8
 801c6ae:	eba8 0202 	sub.w	r2, r8, r2
 801c6b2:	e049      	b.n	801c748 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801c6b4:	2b75      	cmp	r3, #117	; 0x75
 801c6b6:	d042      	beq.n	801c73e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801c6b8:	2b78      	cmp	r3, #120	; 0x78
 801c6ba:	d1d0      	bne.n	801c65e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801c6bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c6be:	1d25      	adds	r5, r4, #4
 801c6c0:	2310      	movs	r3, #16
 801c6c2:	eba8 0202 	sub.w	r2, r8, r2
 801c6c6:	e03f      	b.n	801c748 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801c6c8:	7823      	ldrb	r3, [r4, #0]
 801c6ca:	1d25      	adds	r5, r4, #4
 801c6cc:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801c6d0:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801c6d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c6d6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801c6da:	2b00      	cmp	r3, #0
 801c6dc:	d051      	beq.n	801c782 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801c6de:	881a      	ldrh	r2, [r3, #0]
 801c6e0:	a80d      	add	r0, sp, #52	; 0x34
 801c6e2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801c6e6:	462c      	mov	r4, r5
 801c6e8:	9005      	str	r0, [sp, #20]
 801c6ea:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801c6ee:	9004      	str	r0, [sp, #16]
 801c6f0:	980e      	ldr	r0, [sp, #56]	; 0x38
 801c6f2:	9003      	str	r0, [sp, #12]
 801c6f4:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801c6f8:	9002      	str	r0, [sp, #8]
 801c6fa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801c6fc:	9001      	str	r0, [sp, #4]
 801c6fe:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801c702:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801c706:	9000      	str	r0, [sp, #0]
 801c708:	a810      	add	r0, sp, #64	; 0x40
 801c70a:	f7ff fd49 	bl	801c1a0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801c70e:	e7b7      	b.n	801c680 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801c710:	1d25      	adds	r5, r4, #4
 801c712:	6823      	ldr	r3, [r4, #0]
 801c714:	9310      	str	r3, [sp, #64]	; 0x40
 801c716:	e7dd      	b.n	801c6d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801c718:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c71a:	230a      	movs	r3, #10
 801c71c:	4649      	mov	r1, r9
 801c71e:	6820      	ldr	r0, [r4, #0]
 801c720:	eba8 0202 	sub.w	r2, r8, r2
 801c724:	1d25      	adds	r5, r4, #4
 801c726:	b292      	uxth	r2, r2
 801c728:	f7ff fd08 	bl	801c13c <_ZN8touchgfx7Unicode4itoaElPtti>
 801c72c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801c730:	2b2d      	cmp	r3, #45	; 0x2d
 801c732:	d1cf      	bne.n	801c6d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801c734:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801c738:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c73a:	3302      	adds	r3, #2
 801c73c:	e7ea      	b.n	801c714 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801c73e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c740:	1d25      	adds	r5, r4, #4
 801c742:	230a      	movs	r3, #10
 801c744:	eba8 0202 	sub.w	r2, r8, r2
 801c748:	b292      	uxth	r2, r2
 801c74a:	4649      	mov	r1, r9
 801c74c:	6820      	ldr	r0, [r4, #0]
 801c74e:	f7ff fcd7 	bl	801c100 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801c752:	e7bf      	b.n	801c6d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801c754:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c756:	2310      	movs	r3, #16
 801c758:	4649      	mov	r1, r9
 801c75a:	6820      	ldr	r0, [r4, #0]
 801c75c:	eba8 0202 	sub.w	r2, r8, r2
 801c760:	1d25      	adds	r5, r4, #4
 801c762:	b292      	uxth	r2, r2
 801c764:	f7ff fccc 	bl	801c100 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801c768:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801c76c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801c770:	2b00      	cmp	r3, #0
 801c772:	d0af      	beq.n	801c6d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801c774:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801c778:	2919      	cmp	r1, #25
 801c77a:	d8f7      	bhi.n	801c76c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801c77c:	3b20      	subs	r3, #32
 801c77e:	8013      	strh	r3, [r2, #0]
 801c780:	e7f4      	b.n	801c76c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801c782:	9a08      	ldr	r2, [sp, #32]
 801c784:	2a00      	cmp	r2, #0
 801c786:	d0ab      	beq.n	801c6e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801c788:	7812      	ldrb	r2, [r2, #0]
 801c78a:	e7a9      	b.n	801c6e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801c78c:	2d00      	cmp	r5, #0
 801c78e:	f43f af48 	beq.w	801c622 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801c792:	782d      	ldrb	r5, [r5, #0]
 801c794:	e745      	b.n	801c622 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801c796 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801c796:	b507      	push	{r0, r1, r2, lr}
 801c798:	9300      	str	r3, [sp, #0]
 801c79a:	4613      	mov	r3, r2
 801c79c:	2200      	movs	r2, #0
 801c79e:	f7ff fe92 	bl	801c4c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801c7a2:	b003      	add	sp, #12
 801c7a4:	f85d fb04 	ldr.w	pc, [sp], #4

0801c7a8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801c7a8:	b40c      	push	{r2, r3}
 801c7aa:	b507      	push	{r0, r1, r2, lr}
 801c7ac:	ab04      	add	r3, sp, #16
 801c7ae:	f853 2b04 	ldr.w	r2, [r3], #4
 801c7b2:	9301      	str	r3, [sp, #4]
 801c7b4:	f7ff ffef 	bl	801c796 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801c7b8:	b003      	add	sp, #12
 801c7ba:	f85d eb04 	ldr.w	lr, [sp], #4
 801c7be:	b002      	add	sp, #8
 801c7c0:	4770      	bx	lr
	...

0801c7c4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801c7c4:	4b01      	ldr	r3, [pc, #4]	; (801c7cc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801c7c6:	6018      	str	r0, [r3, #0]
 801c7c8:	4770      	bx	lr
 801c7ca:	bf00      	nop
 801c7cc:	20056800 	.word	0x20056800

0801c7d0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801c7d0:	4b06      	ldr	r3, [pc, #24]	; (801c7ec <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801c7d2:	881a      	ldrh	r2, [r3, #0]
 801c7d4:	4282      	cmp	r2, r0
 801c7d6:	d807      	bhi.n	801c7e8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801c7d8:	4b05      	ldr	r3, [pc, #20]	; (801c7f0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801c7da:	881b      	ldrh	r3, [r3, #0]
 801c7dc:	4413      	add	r3, r2
 801c7de:	4298      	cmp	r0, r3
 801c7e0:	bfac      	ite	ge
 801c7e2:	2000      	movge	r0, #0
 801c7e4:	2001      	movlt	r0, #1
 801c7e6:	4770      	bx	lr
 801c7e8:	2000      	movs	r0, #0
 801c7ea:	4770      	bx	lr
 801c7ec:	20056820 	.word	0x20056820
 801c7f0:	20056824 	.word	0x20056824

0801c7f4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801c7f4:	b508      	push	{r3, lr}
 801c7f6:	4601      	mov	r1, r0
 801c7f8:	f7ff ffea 	bl	801c7d0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801c7fc:	b118      	cbz	r0, 801c806 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801c7fe:	4b02      	ldr	r3, [pc, #8]	; (801c808 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801c800:	681b      	ldr	r3, [r3, #0]
 801c802:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801c806:	bd08      	pop	{r3, pc}
 801c808:	20056804 	.word	0x20056804

0801c80c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801c80c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c810:	4d28      	ldr	r5, [pc, #160]	; (801c8b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801c812:	682b      	ldr	r3, [r5, #0]
 801c814:	2b00      	cmp	r3, #0
 801c816:	d04a      	beq.n	801c8ae <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801c818:	4a27      	ldr	r2, [pc, #156]	; (801c8b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801c81a:	4e28      	ldr	r6, [pc, #160]	; (801c8bc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801c81c:	8810      	ldrh	r0, [r2, #0]
 801c81e:	f8b6 8000 	ldrh.w	r8, [r6]
 801c822:	4c27      	ldr	r4, [pc, #156]	; (801c8c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801c824:	4440      	add	r0, r8
 801c826:	4f27      	ldr	r7, [pc, #156]	; (801c8c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801c828:	1c41      	adds	r1, r0, #1
 801c82a:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801c82e:	f021 0101 	bic.w	r1, r1, #1
 801c832:	eb03 020e 	add.w	r2, r3, lr
 801c836:	0409      	lsls	r1, r1, #16
 801c838:	6022      	str	r2, [r4, #0]
 801c83a:	0c09      	lsrs	r1, r1, #16
 801c83c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801c840:	eb0e 010c 	add.w	r1, lr, ip
 801c844:	185a      	adds	r2, r3, r1
 801c846:	603a      	str	r2, [r7, #0]
 801c848:	220e      	movs	r2, #14
 801c84a:	fb02 f208 	mul.w	r2, r2, r8
 801c84e:	3203      	adds	r2, #3
 801c850:	f022 0203 	bic.w	r2, r2, #3
 801c854:	4411      	add	r1, r2
 801c856:	440b      	add	r3, r1
 801c858:	491b      	ldr	r1, [pc, #108]	; (801c8c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801c85a:	600b      	str	r3, [r1, #0]
 801c85c:	2300      	movs	r3, #0
 801c85e:	491b      	ldr	r1, [pc, #108]	; (801c8cc <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801c860:	800b      	strh	r3, [r1, #0]
 801c862:	491b      	ldr	r1, [pc, #108]	; (801c8d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801c864:	6809      	ldr	r1, [r1, #0]
 801c866:	eba1 010e 	sub.w	r1, r1, lr
 801c86a:	eba1 010c 	sub.w	r1, r1, ip
 801c86e:	469c      	mov	ip, r3
 801c870:	1a8a      	subs	r2, r1, r2
 801c872:	4918      	ldr	r1, [pc, #96]	; (801c8d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801c874:	600a      	str	r2, [r1, #0]
 801c876:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801c87a:	4a17      	ldr	r2, [pc, #92]	; (801c8d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801c87c:	8013      	strh	r3, [r2, #0]
 801c87e:	4283      	cmp	r3, r0
 801c880:	d10d      	bne.n	801c89e <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801c882:	8835      	ldrh	r5, [r6, #0]
 801c884:	2300      	movs	r3, #0
 801c886:	6838      	ldr	r0, [r7, #0]
 801c888:	240e      	movs	r4, #14
 801c88a:	429d      	cmp	r5, r3
 801c88c:	d90f      	bls.n	801c8ae <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801c88e:	fb04 0203 	mla	r2, r4, r3, r0
 801c892:	3301      	adds	r3, #1
 801c894:	7b11      	ldrb	r1, [r2, #12]
 801c896:	f36f 1145 	bfc	r1, #5, #1
 801c89a:	7311      	strb	r1, [r2, #12]
 801c89c:	e7f5      	b.n	801c88a <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801c89e:	682a      	ldr	r2, [r5, #0]
 801c8a0:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801c8a4:	6822      	ldr	r2, [r4, #0]
 801c8a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801c8aa:	3301      	adds	r3, #1
 801c8ac:	e7e7      	b.n	801c87e <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801c8ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c8b2:	bf00      	nop
 801c8b4:	20056804 	.word	0x20056804
 801c8b8:	20056820 	.word	0x20056820
 801c8bc:	20056824 	.word	0x20056824
 801c8c0:	20056818 	.word	0x20056818
 801c8c4:	20056808 	.word	0x20056808
 801c8c8:	20056810 	.word	0x20056810
 801c8cc:	20056822 	.word	0x20056822
 801c8d0:	2005680c 	.word	0x2005680c
 801c8d4:	2005681c 	.word	0x2005681c
 801c8d8:	20056814 	.word	0x20056814

0801c8dc <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801c8dc:	4b10      	ldr	r3, [pc, #64]	; (801c920 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801c8de:	b510      	push	{r4, lr}
 801c8e0:	681b      	ldr	r3, [r3, #0]
 801c8e2:	b9db      	cbnz	r3, 801c91c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801c8e4:	b1d1      	cbz	r1, 801c91c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801c8e6:	4b0f      	ldr	r3, [pc, #60]	; (801c924 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801c8e8:	240e      	movs	r4, #14
 801c8ea:	801a      	strh	r2, [r3, #0]
 801c8ec:	b292      	uxth	r2, r2
 801c8ee:	4b0e      	ldr	r3, [pc, #56]	; (801c928 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801c8f0:	881b      	ldrh	r3, [r3, #0]
 801c8f2:	4413      	add	r3, r2
 801c8f4:	4362      	muls	r2, r4
 801c8f6:	2406      	movs	r4, #6
 801c8f8:	fb04 2203 	mla	r2, r4, r3, r2
 801c8fc:	428a      	cmp	r2, r1
 801c8fe:	d305      	bcc.n	801c90c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801c900:	4b0a      	ldr	r3, [pc, #40]	; (801c92c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801c902:	2135      	movs	r1, #53	; 0x35
 801c904:	4a0a      	ldr	r2, [pc, #40]	; (801c930 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801c906:	480b      	ldr	r0, [pc, #44]	; (801c934 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801c908:	f00a f85a 	bl	80269c0 <__assert_func>
 801c90c:	4b0a      	ldr	r3, [pc, #40]	; (801c938 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801c90e:	6019      	str	r1, [r3, #0]
 801c910:	4b0a      	ldr	r3, [pc, #40]	; (801c93c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801c912:	6018      	str	r0, [r3, #0]
 801c914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c918:	f7ff bf78 	b.w	801c80c <_ZN8touchgfx6Bitmap10clearCacheEv>
 801c91c:	bd10      	pop	{r4, pc}
 801c91e:	bf00      	nop
 801c920:	20056810 	.word	0x20056810
 801c924:	20056824 	.word	0x20056824
 801c928:	20056820 	.word	0x20056820
 801c92c:	0802e609 	.word	0x0802e609
 801c930:	0802e69e 	.word	0x0802e69e
 801c934:	0802e5e4 	.word	0x0802e5e4
 801c938:	2005680c 	.word	0x2005680c
 801c93c:	20056804 	.word	0x20056804

0801c940 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801c940:	b470      	push	{r4, r5, r6}
 801c942:	4c07      	ldr	r4, [pc, #28]	; (801c960 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801c944:	4605      	mov	r5, r0
 801c946:	4610      	mov	r0, r2
 801c948:	9a03      	ldr	r2, [sp, #12]
 801c94a:	6826      	ldr	r6, [r4, #0]
 801c94c:	b936      	cbnz	r6, 801c95c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801c94e:	6025      	str	r5, [r4, #0]
 801c950:	4c04      	ldr	r4, [pc, #16]	; (801c964 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801c952:	8021      	strh	r1, [r4, #0]
 801c954:	4619      	mov	r1, r3
 801c956:	bc70      	pop	{r4, r5, r6}
 801c958:	f7ff bfc0 	b.w	801c8dc <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801c95c:	bc70      	pop	{r4, r5, r6}
 801c95e:	4770      	bx	lr
 801c960:	20056828 	.word	0x20056828
 801c964:	20056820 	.word	0x20056820

0801c968 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801c968:	b508      	push	{r3, lr}
 801c96a:	4b14      	ldr	r3, [pc, #80]	; (801c9bc <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801c96c:	6819      	ldr	r1, [r3, #0]
 801c96e:	b931      	cbnz	r1, 801c97e <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801c970:	4b13      	ldr	r3, [pc, #76]	; (801c9c0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801c972:	f240 4186 	movw	r1, #1158	; 0x486
 801c976:	4a13      	ldr	r2, [pc, #76]	; (801c9c4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801c978:	4813      	ldr	r0, [pc, #76]	; (801c9c8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801c97a:	f00a f821 	bl	80269c0 <__assert_func>
 801c97e:	4a13      	ldr	r2, [pc, #76]	; (801c9cc <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801c980:	8803      	ldrh	r3, [r0, #0]
 801c982:	8812      	ldrh	r2, [r2, #0]
 801c984:	4293      	cmp	r3, r2
 801c986:	d204      	bcs.n	801c992 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801c988:	2214      	movs	r2, #20
 801c98a:	fb02 1303 	mla	r3, r2, r3, r1
 801c98e:	8918      	ldrh	r0, [r3, #8]
 801c990:	bd08      	pop	{r3, pc}
 801c992:	490f      	ldr	r1, [pc, #60]	; (801c9d0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801c994:	8809      	ldrh	r1, [r1, #0]
 801c996:	4411      	add	r1, r2
 801c998:	428b      	cmp	r3, r1
 801c99a:	da06      	bge.n	801c9aa <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801c99c:	1a9b      	subs	r3, r3, r2
 801c99e:	4a0d      	ldr	r2, [pc, #52]	; (801c9d4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801c9a0:	210e      	movs	r1, #14
 801c9a2:	6812      	ldr	r2, [r2, #0]
 801c9a4:	fb01 2303 	mla	r3, r1, r3, r2
 801c9a8:	e7f1      	b.n	801c98e <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801c9aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c9ae:	4293      	cmp	r3, r2
 801c9b0:	bf0a      	itet	eq
 801c9b2:	4b09      	ldreq	r3, [pc, #36]	; (801c9d8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801c9b4:	2000      	movne	r0, #0
 801c9b6:	8818      	ldrheq	r0, [r3, #0]
 801c9b8:	e7ea      	b.n	801c990 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801c9ba:	bf00      	nop
 801c9bc:	20056828 	.word	0x20056828
 801c9c0:	0802e662 	.word	0x0802e662
 801c9c4:	0802e715 	.word	0x0802e715
 801c9c8:	0802e5e4 	.word	0x0802e5e4
 801c9cc:	20056820 	.word	0x20056820
 801c9d0:	20056824 	.word	0x20056824
 801c9d4:	20056808 	.word	0x20056808
 801c9d8:	20056774 	.word	0x20056774

0801c9dc <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801c9dc:	b508      	push	{r3, lr}
 801c9de:	4b14      	ldr	r3, [pc, #80]	; (801ca30 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801c9e0:	6819      	ldr	r1, [r3, #0]
 801c9e2:	b931      	cbnz	r1, 801c9f2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801c9e4:	4b13      	ldr	r3, [pc, #76]	; (801ca34 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801c9e6:	f240 419a 	movw	r1, #1178	; 0x49a
 801c9ea:	4a13      	ldr	r2, [pc, #76]	; (801ca38 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801c9ec:	4813      	ldr	r0, [pc, #76]	; (801ca3c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801c9ee:	f009 ffe7 	bl	80269c0 <__assert_func>
 801c9f2:	4a13      	ldr	r2, [pc, #76]	; (801ca40 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801c9f4:	8803      	ldrh	r3, [r0, #0]
 801c9f6:	8812      	ldrh	r2, [r2, #0]
 801c9f8:	4293      	cmp	r3, r2
 801c9fa:	d204      	bcs.n	801ca06 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801c9fc:	2214      	movs	r2, #20
 801c9fe:	fb02 1303 	mla	r3, r2, r3, r1
 801ca02:	8958      	ldrh	r0, [r3, #10]
 801ca04:	bd08      	pop	{r3, pc}
 801ca06:	490f      	ldr	r1, [pc, #60]	; (801ca44 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801ca08:	8809      	ldrh	r1, [r1, #0]
 801ca0a:	4411      	add	r1, r2
 801ca0c:	428b      	cmp	r3, r1
 801ca0e:	da06      	bge.n	801ca1e <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801ca10:	1a9b      	subs	r3, r3, r2
 801ca12:	4a0d      	ldr	r2, [pc, #52]	; (801ca48 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801ca14:	210e      	movs	r1, #14
 801ca16:	6812      	ldr	r2, [r2, #0]
 801ca18:	fb01 2303 	mla	r3, r1, r3, r2
 801ca1c:	e7f1      	b.n	801ca02 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801ca1e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ca22:	4293      	cmp	r3, r2
 801ca24:	bf0a      	itet	eq
 801ca26:	4b09      	ldreq	r3, [pc, #36]	; (801ca4c <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801ca28:	2000      	movne	r0, #0
 801ca2a:	8818      	ldrheq	r0, [r3, #0]
 801ca2c:	e7ea      	b.n	801ca04 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801ca2e:	bf00      	nop
 801ca30:	20056828 	.word	0x20056828
 801ca34:	0802e662 	.word	0x0802e662
 801ca38:	0802e741 	.word	0x0802e741
 801ca3c:	0802e5e4 	.word	0x0802e5e4
 801ca40:	20056820 	.word	0x20056820
 801ca44:	20056824 	.word	0x20056824
 801ca48:	20056808 	.word	0x20056808
 801ca4c:	20056776 	.word	0x20056776

0801ca50 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801ca50:	b508      	push	{r3, lr}
 801ca52:	4b12      	ldr	r3, [pc, #72]	; (801ca9c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801ca54:	6819      	ldr	r1, [r3, #0]
 801ca56:	b931      	cbnz	r1, 801ca66 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801ca58:	4b11      	ldr	r3, [pc, #68]	; (801caa0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801ca5a:	f240 41d2 	movw	r1, #1234	; 0x4d2
 801ca5e:	4a11      	ldr	r2, [pc, #68]	; (801caa4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801ca60:	4811      	ldr	r0, [pc, #68]	; (801caa8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801ca62:	f009 ffad 	bl	80269c0 <__assert_func>
 801ca66:	8803      	ldrh	r3, [r0, #0]
 801ca68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ca6c:	4293      	cmp	r3, r2
 801ca6e:	d012      	beq.n	801ca96 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801ca70:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ca74:	4293      	cmp	r3, r2
 801ca76:	d103      	bne.n	801ca80 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801ca78:	4b0c      	ldr	r3, [pc, #48]	; (801caac <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801ca7a:	681b      	ldr	r3, [r3, #0]
 801ca7c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801ca7e:	bd08      	pop	{r3, pc}
 801ca80:	4a0b      	ldr	r2, [pc, #44]	; (801cab0 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801ca82:	6812      	ldr	r2, [r2, #0]
 801ca84:	b11a      	cbz	r2, 801ca8e <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801ca86:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ca8a:	2800      	cmp	r0, #0
 801ca8c:	d1f7      	bne.n	801ca7e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801ca8e:	2214      	movs	r2, #20
 801ca90:	4353      	muls	r3, r2
 801ca92:	58c8      	ldr	r0, [r1, r3]
 801ca94:	e7f3      	b.n	801ca7e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801ca96:	2000      	movs	r0, #0
 801ca98:	e7f1      	b.n	801ca7e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801ca9a:	bf00      	nop
 801ca9c:	20056828 	.word	0x20056828
 801caa0:	0802e662 	.word	0x0802e662
 801caa4:	0802e6e4 	.word	0x0802e6e4
 801caa8:	0802e5e4 	.word	0x0802e5e4
 801caac:	20056780 	.word	0x20056780
 801cab0:	20056804 	.word	0x20056804

0801cab4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801cab4:	8802      	ldrh	r2, [r0, #0]
 801cab6:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801caba:	429a      	cmp	r2, r3
 801cabc:	d845      	bhi.n	801cb4a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801cabe:	4b24      	ldr	r3, [pc, #144]	; (801cb50 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801cac0:	8818      	ldrh	r0, [r3, #0]
 801cac2:	4282      	cmp	r2, r0
 801cac4:	d221      	bcs.n	801cb0a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801cac6:	4b23      	ldr	r3, [pc, #140]	; (801cb54 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801cac8:	6819      	ldr	r1, [r3, #0]
 801caca:	2314      	movs	r3, #20
 801cacc:	fb03 1302 	mla	r3, r3, r2, r1
 801cad0:	6858      	ldr	r0, [r3, #4]
 801cad2:	2800      	cmp	r0, #0
 801cad4:	d03a      	beq.n	801cb4c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801cad6:	4920      	ldr	r1, [pc, #128]	; (801cb58 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801cad8:	6809      	ldr	r1, [r1, #0]
 801cada:	2900      	cmp	r1, #0
 801cadc:	d036      	beq.n	801cb4c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801cade:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cae2:	2900      	cmp	r1, #0
 801cae4:	d032      	beq.n	801cb4c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801cae6:	891a      	ldrh	r2, [r3, #8]
 801cae8:	8958      	ldrh	r0, [r3, #10]
 801caea:	4350      	muls	r0, r2
 801caec:	7c5a      	ldrb	r2, [r3, #17]
 801caee:	7cdb      	ldrb	r3, [r3, #19]
 801caf0:	0952      	lsrs	r2, r2, #5
 801caf2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801caf6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801cafa:	2b0b      	cmp	r3, #11
 801cafc:	bf18      	it	ne
 801cafe:	0040      	lslne	r0, r0, #1
 801cb00:	3003      	adds	r0, #3
 801cb02:	f020 0003 	bic.w	r0, r0, #3
 801cb06:	4408      	add	r0, r1
 801cb08:	4770      	bx	lr
 801cb0a:	4b14      	ldr	r3, [pc, #80]	; (801cb5c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801cb0c:	881b      	ldrh	r3, [r3, #0]
 801cb0e:	4403      	add	r3, r0
 801cb10:	429a      	cmp	r2, r3
 801cb12:	da1a      	bge.n	801cb4a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801cb14:	4b12      	ldr	r3, [pc, #72]	; (801cb60 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801cb16:	1a10      	subs	r0, r2, r0
 801cb18:	210e      	movs	r1, #14
 801cb1a:	681b      	ldr	r3, [r3, #0]
 801cb1c:	fb01 3000 	mla	r0, r1, r0, r3
 801cb20:	7b03      	ldrb	r3, [r0, #12]
 801cb22:	f003 031f 	and.w	r3, r3, #31
 801cb26:	2b0b      	cmp	r3, #11
 801cb28:	d10b      	bne.n	801cb42 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801cb2a:	8903      	ldrh	r3, [r0, #8]
 801cb2c:	8940      	ldrh	r0, [r0, #10]
 801cb2e:	4358      	muls	r0, r3
 801cb30:	4b09      	ldr	r3, [pc, #36]	; (801cb58 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801cb32:	3003      	adds	r0, #3
 801cb34:	6819      	ldr	r1, [r3, #0]
 801cb36:	f020 0303 	bic.w	r3, r0, #3
 801cb3a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801cb3e:	4418      	add	r0, r3
 801cb40:	4770      	bx	lr
 801cb42:	2b0d      	cmp	r3, #13
 801cb44:	d101      	bne.n	801cb4a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801cb46:	300d      	adds	r0, #13
 801cb48:	4770      	bx	lr
 801cb4a:	2000      	movs	r0, #0
 801cb4c:	4770      	bx	lr
 801cb4e:	bf00      	nop
 801cb50:	20056820 	.word	0x20056820
 801cb54:	20056828 	.word	0x20056828
 801cb58:	20056804 	.word	0x20056804
 801cb5c:	20056824 	.word	0x20056824
 801cb60:	20056808 	.word	0x20056808

0801cb64 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801cb64:	4b17      	ldr	r3, [pc, #92]	; (801cbc4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801cb66:	b510      	push	{r4, lr}
 801cb68:	6819      	ldr	r1, [r3, #0]
 801cb6a:	8803      	ldrh	r3, [r0, #0]
 801cb6c:	b1e9      	cbz	r1, 801cbaa <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801cb6e:	4a16      	ldr	r2, [pc, #88]	; (801cbc8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801cb70:	8812      	ldrh	r2, [r2, #0]
 801cb72:	429a      	cmp	r2, r3
 801cb74:	d90a      	bls.n	801cb8c <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 801cb76:	2214      	movs	r2, #20
 801cb78:	fb02 1303 	mla	r3, r2, r3, r1
 801cb7c:	7c58      	ldrb	r0, [r3, #17]
 801cb7e:	0942      	lsrs	r2, r0, #5
 801cb80:	7cd8      	ldrb	r0, [r3, #19]
 801cb82:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801cb86:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801cb8a:	bd10      	pop	{r4, pc}
 801cb8c:	490f      	ldr	r1, [pc, #60]	; (801cbcc <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801cb8e:	8809      	ldrh	r1, [r1, #0]
 801cb90:	4411      	add	r1, r2
 801cb92:	428b      	cmp	r3, r1
 801cb94:	da09      	bge.n	801cbaa <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801cb96:	1a9b      	subs	r3, r3, r2
 801cb98:	4a0d      	ldr	r2, [pc, #52]	; (801cbd0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801cb9a:	210e      	movs	r1, #14
 801cb9c:	6812      	ldr	r2, [r2, #0]
 801cb9e:	fb01 2303 	mla	r3, r1, r3, r2
 801cba2:	7b18      	ldrb	r0, [r3, #12]
 801cba4:	f000 001f 	and.w	r0, r0, #31
 801cba8:	e7ef      	b.n	801cb8a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801cbaa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801cbae:	4293      	cmp	r3, r2
 801cbb0:	d106      	bne.n	801cbc0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801cbb2:	f7e9 fd21 	bl	80065f8 <_ZN8touchgfx3HAL3lcdEv>
 801cbb6:	6803      	ldr	r3, [r0, #0]
 801cbb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cbbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cbbe:	4718      	bx	r3
 801cbc0:	2000      	movs	r0, #0
 801cbc2:	e7e2      	b.n	801cb8a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801cbc4:	20056828 	.word	0x20056828
 801cbc8:	20056820 	.word	0x20056820
 801cbcc:	20056824 	.word	0x20056824
 801cbd0:	20056808 	.word	0x20056808

0801cbd4 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801cbd4:	2018      	movs	r0, #24
 801cbd6:	4770      	bx	lr

0801cbd8 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801cbd8:	2001      	movs	r0, #1
 801cbda:	4770      	bx	lr

0801cbdc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cbdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbe0:	b085      	sub	sp, #20
 801cbe2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801cbe4:	9203      	str	r2, [sp, #12]
 801cbe6:	6870      	ldr	r0, [r6, #4]
 801cbe8:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801cbec:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801cbf0:	9101      	str	r1, [sp, #4]
 801cbf2:	fa1f f885 	uxth.w	r8, r5
 801cbf6:	43ed      	mvns	r5, r5
 801cbf8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801cbfc:	b2ed      	uxtb	r5, r5
 801cbfe:	fb00 2404 	mla	r4, r0, r4, r2
 801cc02:	6832      	ldr	r2, [r6, #0]
 801cc04:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801cc08:	4414      	add	r4, r2
 801cc0a:	f8dc 2000 	ldr.w	r2, [ip]
 801cc0e:	9202      	str	r2, [sp, #8]
 801cc10:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801cc14:	f102 0e04 	add.w	lr, r2, #4
 801cc18:	9a01      	ldr	r2, [sp, #4]
 801cc1a:	2a00      	cmp	r2, #0
 801cc1c:	dc03      	bgt.n	801cc26 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801cc1e:	9a03      	ldr	r2, [sp, #12]
 801cc20:	2a00      	cmp	r2, #0
 801cc22:	f340 8116 	ble.w	801ce52 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801cc26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cc28:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801cc2c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801cc30:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cc32:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801cc36:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801cc3a:	2b00      	cmp	r3, #0
 801cc3c:	dd0e      	ble.n	801cc5c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801cc3e:	1406      	asrs	r6, r0, #16
 801cc40:	d405      	bmi.n	801cc4e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cc42:	4556      	cmp	r6, sl
 801cc44:	da03      	bge.n	801cc4e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cc46:	1416      	asrs	r6, r2, #16
 801cc48:	d401      	bmi.n	801cc4e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cc4a:	454e      	cmp	r6, r9
 801cc4c:	db07      	blt.n	801cc5e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801cc4e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801cc50:	3b01      	subs	r3, #1
 801cc52:	3403      	adds	r4, #3
 801cc54:	4430      	add	r0, r6
 801cc56:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801cc58:	4432      	add	r2, r6
 801cc5a:	e7ee      	b.n	801cc3a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801cc5c:	d063      	beq.n	801cd26 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801cc5e:	1e5e      	subs	r6, r3, #1
 801cc60:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801cc62:	fb07 0706 	mla	r7, r7, r6, r0
 801cc66:	143f      	asrs	r7, r7, #16
 801cc68:	d454      	bmi.n	801cd14 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801cc6a:	4557      	cmp	r7, sl
 801cc6c:	da52      	bge.n	801cd14 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801cc6e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801cc70:	fb07 2606 	mla	r6, r7, r6, r2
 801cc74:	1436      	asrs	r6, r6, #16
 801cc76:	d44d      	bmi.n	801cd14 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801cc78:	454e      	cmp	r6, r9
 801cc7a:	da4b      	bge.n	801cd14 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801cc7c:	1ce6      	adds	r6, r4, #3
 801cc7e:	4699      	mov	r9, r3
 801cc80:	f1b9 0f00 	cmp.w	r9, #0
 801cc84:	f106 0603 	add.w	r6, r6, #3
 801cc88:	dd48      	ble.n	801cd1c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801cc8a:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801cc8e:	1417      	asrs	r7, r2, #16
 801cc90:	9902      	ldr	r1, [sp, #8]
 801cc92:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801cc96:	f109 39ff 	add.w	r9, r9, #4294967295
 801cc9a:	fb0b 1707 	mla	r7, fp, r7, r1
 801cc9e:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801cca2:	9911      	ldr	r1, [sp, #68]	; 0x44
 801cca4:	f817 700a 	ldrb.w	r7, [r7, sl]
 801cca8:	fb1b fb05 	smulbb	fp, fp, r5
 801ccac:	4408      	add	r0, r1
 801ccae:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ccb0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ccb4:	440a      	add	r2, r1
 801ccb6:	eb0e 0a07 	add.w	sl, lr, r7
 801ccba:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801ccbe:	fb07 b708 	mla	r7, r7, r8, fp
 801ccc2:	b2bf      	uxth	r7, r7
 801ccc4:	f107 0b01 	add.w	fp, r7, #1
 801ccc8:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801cccc:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801ccd0:	fb1b fb05 	smulbb	fp, fp, r5
 801ccd4:	123f      	asrs	r7, r7, #8
 801ccd6:	f806 7c06 	strb.w	r7, [r6, #-6]
 801ccda:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801ccde:	fb07 b708 	mla	r7, r7, r8, fp
 801cce2:	b2bf      	uxth	r7, r7
 801cce4:	f107 0b01 	add.w	fp, r7, #1
 801cce8:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801ccec:	123f      	asrs	r7, r7, #8
 801ccee:	f806 7c05 	strb.w	r7, [r6, #-5]
 801ccf2:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801ccf6:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801ccfa:	fb1a fa05 	smulbb	sl, sl, r5
 801ccfe:	fb07 a708 	mla	r7, r7, r8, sl
 801cd02:	b2bf      	uxth	r7, r7
 801cd04:	f107 0a01 	add.w	sl, r7, #1
 801cd08:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801cd0c:	123f      	asrs	r7, r7, #8
 801cd0e:	f806 7c04 	strb.w	r7, [r6, #-4]
 801cd12:	e7b5      	b.n	801cc80 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801cd14:	2700      	movs	r7, #0
 801cd16:	1bde      	subs	r6, r3, r7
 801cd18:	2e00      	cmp	r6, #0
 801cd1a:	dc42      	bgt.n	801cda2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801cd1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cd20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cd24:	441c      	add	r4, r3
 801cd26:	9b01      	ldr	r3, [sp, #4]
 801cd28:	2b00      	cmp	r3, #0
 801cd2a:	f340 8092 	ble.w	801ce52 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801cd2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cd32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cd34:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cd38:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cd3c:	eef0 6a62 	vmov.f32	s13, s5
 801cd40:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801cd44:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cd48:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cd4c:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801cd50:	eef0 6a43 	vmov.f32	s13, s6
 801cd54:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cd58:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801cd5c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cd60:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cd64:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cd68:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cd6c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cd70:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cd74:	ee12 2a90 	vmov	r2, s5
 801cd78:	eef0 2a47 	vmov.f32	s5, s14
 801cd7c:	fb92 f3f3 	sdiv	r3, r2, r3
 801cd80:	ee13 2a10 	vmov	r2, s6
 801cd84:	9311      	str	r3, [sp, #68]	; 0x44
 801cd86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cd88:	eeb0 3a67 	vmov.f32	s6, s15
 801cd8c:	fb92 f3f3 	sdiv	r3, r2, r3
 801cd90:	9312      	str	r3, [sp, #72]	; 0x48
 801cd92:	9b01      	ldr	r3, [sp, #4]
 801cd94:	9a03      	ldr	r2, [sp, #12]
 801cd96:	3b01      	subs	r3, #1
 801cd98:	9301      	str	r3, [sp, #4]
 801cd9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cd9c:	bf08      	it	eq
 801cd9e:	4613      	moveq	r3, r2
 801cda0:	e73a      	b.n	801cc18 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801cda2:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801cda6:	d44e      	bmi.n	801ce46 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801cda8:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801cdac:	4556      	cmp	r6, sl
 801cdae:	dd4a      	ble.n	801ce46 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801cdb0:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801cdb4:	d447      	bmi.n	801ce46 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801cdb6:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801cdba:	4559      	cmp	r1, fp
 801cdbc:	dd43      	ble.n	801ce46 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801cdbe:	fa0f f986 	sxth.w	r9, r6
 801cdc2:	9902      	ldr	r1, [sp, #8]
 801cdc4:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801cdc8:	fb0b 1909 	mla	r9, fp, r9, r1
 801cdcc:	f814 b006 	ldrb.w	fp, [r4, r6]
 801cdd0:	f819 900a 	ldrb.w	r9, [r9, sl]
 801cdd4:	fb1b fb05 	smulbb	fp, fp, r5
 801cdd8:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801cddc:	eb0e 0a09 	add.w	sl, lr, r9
 801cde0:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801cde4:	fb09 b908 	mla	r9, r9, r8, fp
 801cde8:	fa1f f989 	uxth.w	r9, r9
 801cdec:	f109 0b01 	add.w	fp, r9, #1
 801cdf0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cdf4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cdf8:	f804 9006 	strb.w	r9, [r4, r6]
 801cdfc:	4426      	add	r6, r4
 801cdfe:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801ce02:	f896 b001 	ldrb.w	fp, [r6, #1]
 801ce06:	fb1b fb05 	smulbb	fp, fp, r5
 801ce0a:	fb09 b908 	mla	r9, r9, r8, fp
 801ce0e:	fa1f f989 	uxth.w	r9, r9
 801ce12:	f109 0b01 	add.w	fp, r9, #1
 801ce16:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ce1a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ce1e:	f886 9001 	strb.w	r9, [r6, #1]
 801ce22:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801ce26:	f896 a002 	ldrb.w	sl, [r6, #2]
 801ce2a:	fb1a fa05 	smulbb	sl, sl, r5
 801ce2e:	fb09 a908 	mla	r9, r9, r8, sl
 801ce32:	fa1f f989 	uxth.w	r9, r9
 801ce36:	f109 0a01 	add.w	sl, r9, #1
 801ce3a:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801ce3e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ce42:	f886 9002 	strb.w	r9, [r6, #2]
 801ce46:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ce48:	3701      	adds	r7, #1
 801ce4a:	4408      	add	r0, r1
 801ce4c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ce4e:	440a      	add	r2, r1
 801ce50:	e761      	b.n	801cd16 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801ce52:	b005      	add	sp, #20
 801ce54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ce58 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ce58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce5c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ce5e:	4693      	mov	fp, r2
 801ce60:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801ce62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ce66:	6868      	ldr	r0, [r5, #4]
 801ce68:	6877      	ldr	r7, [r6, #4]
 801ce6a:	9100      	str	r1, [sp, #0]
 801ce6c:	3704      	adds	r7, #4
 801ce6e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801ce72:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 801ce76:	fb00 2404 	mla	r4, r0, r4, r2
 801ce7a:	682a      	ldr	r2, [r5, #0]
 801ce7c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ce80:	4414      	add	r4, r2
 801ce82:	6832      	ldr	r2, [r6, #0]
 801ce84:	9201      	str	r2, [sp, #4]
 801ce86:	9a00      	ldr	r2, [sp, #0]
 801ce88:	2a00      	cmp	r2, #0
 801ce8a:	dc03      	bgt.n	801ce94 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ce8c:	f1bb 0f00 	cmp.w	fp, #0
 801ce90:	f340 80bc 	ble.w	801d00c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801ce94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ce96:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801ce9a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ce9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cea0:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801cea4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801cea8:	2b00      	cmp	r3, #0
 801ceaa:	dd0c      	ble.n	801cec6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ceac:	1405      	asrs	r5, r0, #16
 801ceae:	d405      	bmi.n	801cebc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801ceb0:	4555      	cmp	r5, sl
 801ceb2:	da03      	bge.n	801cebc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801ceb4:	1415      	asrs	r5, r2, #16
 801ceb6:	d401      	bmi.n	801cebc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801ceb8:	454d      	cmp	r5, r9
 801ceba:	db05      	blt.n	801cec8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801cebc:	4440      	add	r0, r8
 801cebe:	4472      	add	r2, lr
 801cec0:	3b01      	subs	r3, #1
 801cec2:	3403      	adds	r4, #3
 801cec4:	e7f0      	b.n	801cea8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801cec6:	d03f      	beq.n	801cf48 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801cec8:	1e5d      	subs	r5, r3, #1
 801ceca:	fb08 0c05 	mla	ip, r8, r5, r0
 801cece:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801ced2:	d42e      	bmi.n	801cf32 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801ced4:	45d4      	cmp	ip, sl
 801ced6:	da2c      	bge.n	801cf32 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801ced8:	fb0e 2505 	mla	r5, lr, r5, r2
 801cedc:	142d      	asrs	r5, r5, #16
 801cede:	d428      	bmi.n	801cf32 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801cee0:	454d      	cmp	r5, r9
 801cee2:	da26      	bge.n	801cf32 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801cee4:	1ce5      	adds	r5, r4, #3
 801cee6:	469c      	mov	ip, r3
 801cee8:	f1bc 0f00 	cmp.w	ip, #0
 801ceec:	f105 0503 	add.w	r5, r5, #3
 801cef0:	dd25      	ble.n	801cf3e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801cef2:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801cef6:	ea4f 4922 	mov.w	r9, r2, asr #16
 801cefa:	f10c 3cff 	add.w	ip, ip, #4294967295
 801cefe:	4472      	add	r2, lr
 801cf00:	468a      	mov	sl, r1
 801cf02:	9901      	ldr	r1, [sp, #4]
 801cf04:	fb0a 1909 	mla	r9, sl, r9, r1
 801cf08:	1401      	asrs	r1, r0, #16
 801cf0a:	4440      	add	r0, r8
 801cf0c:	f819 9001 	ldrb.w	r9, [r9, r1]
 801cf10:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801cf14:	eb07 0a09 	add.w	sl, r7, r9
 801cf18:	f817 9009 	ldrb.w	r9, [r7, r9]
 801cf1c:	f805 9c06 	strb.w	r9, [r5, #-6]
 801cf20:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801cf24:	f805 9c05 	strb.w	r9, [r5, #-5]
 801cf28:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801cf2c:	f805 9c04 	strb.w	r9, [r5, #-4]
 801cf30:	e7da      	b.n	801cee8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801cf32:	2500      	movs	r5, #0
 801cf34:	eba3 0c05 	sub.w	ip, r3, r5
 801cf38:	f1bc 0f00 	cmp.w	ip, #0
 801cf3c:	dc3b      	bgt.n	801cfb6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801cf3e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cf42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cf46:	441c      	add	r4, r3
 801cf48:	9b00      	ldr	r3, [sp, #0]
 801cf4a:	2b00      	cmp	r3, #0
 801cf4c:	dd5e      	ble.n	801d00c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801cf4e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cf52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cf54:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cf58:	eeb0 6a62 	vmov.f32	s12, s5
 801cf5c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cf60:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cf64:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cf68:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801cf6c:	eeb0 6a43 	vmov.f32	s12, s6
 801cf70:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cf74:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801cf78:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cf7c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cf80:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cf84:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cf88:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cf8c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cf90:	ee12 2a90 	vmov	r2, s5
 801cf94:	eef0 2a47 	vmov.f32	s5, s14
 801cf98:	fb92 f8f3 	sdiv	r8, r2, r3
 801cf9c:	ee13 2a10 	vmov	r2, s6
 801cfa0:	eeb0 3a67 	vmov.f32	s6, s15
 801cfa4:	fb92 fef3 	sdiv	lr, r2, r3
 801cfa8:	9b00      	ldr	r3, [sp, #0]
 801cfaa:	3b01      	subs	r3, #1
 801cfac:	9300      	str	r3, [sp, #0]
 801cfae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cfb0:	bf08      	it	eq
 801cfb2:	465b      	moveq	r3, fp
 801cfb4:	e767      	b.n	801ce86 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801cfb6:	ea5f 4920 	movs.w	r9, r0, asr #16
 801cfba:	d423      	bmi.n	801d004 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801cfbc:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801cfc0:	45cc      	cmp	ip, r9
 801cfc2:	dd1f      	ble.n	801d004 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801cfc4:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801cfc8:	d41c      	bmi.n	801d004 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801cfca:	68f1      	ldr	r1, [r6, #12]
 801cfcc:	4551      	cmp	r1, sl
 801cfce:	dd19      	ble.n	801d004 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801cfd0:	fa0f fc8c 	sxth.w	ip, ip
 801cfd4:	9901      	ldr	r1, [sp, #4]
 801cfd6:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801cfda:	f81c c009 	ldrb.w	ip, [ip, r9]
 801cfde:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801cfe2:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801cfe6:	eb07 090c 	add.w	r9, r7, ip
 801cfea:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801cfee:	f804 a00c 	strb.w	sl, [r4, ip]
 801cff2:	44a4      	add	ip, r4
 801cff4:	f899 a001 	ldrb.w	sl, [r9, #1]
 801cff8:	f88c a001 	strb.w	sl, [ip, #1]
 801cffc:	f899 9002 	ldrb.w	r9, [r9, #2]
 801d000:	f88c 9002 	strb.w	r9, [ip, #2]
 801d004:	4440      	add	r0, r8
 801d006:	4472      	add	r2, lr
 801d008:	3501      	adds	r5, #1
 801d00a:	e793      	b.n	801cf34 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801d00c:	b003      	add	sp, #12
 801d00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d012 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d012:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d016:	b085      	sub	sp, #20
 801d018:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d01c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d01e:	9202      	str	r2, [sp, #8]
 801d020:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801d024:	6860      	ldr	r0, [r4, #4]
 801d026:	9203      	str	r2, [sp, #12]
 801d028:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801d02c:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801d030:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801d034:	fb00 2505 	mla	r5, r0, r5, r2
 801d038:	6822      	ldr	r2, [r4, #0]
 801d03a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d03e:	4415      	add	r5, r2
 801d040:	f8dc 2000 	ldr.w	r2, [ip]
 801d044:	9200      	str	r2, [sp, #0]
 801d046:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801d04a:	3204      	adds	r2, #4
 801d04c:	9201      	str	r2, [sp, #4]
 801d04e:	2900      	cmp	r1, #0
 801d050:	dc03      	bgt.n	801d05a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801d052:	9a02      	ldr	r2, [sp, #8]
 801d054:	2a00      	cmp	r2, #0
 801d056:	f340 8127 	ble.w	801d2a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801d05a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d05c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801d060:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d064:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d066:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d06a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d06e:	2b00      	cmp	r3, #0
 801d070:	dd0d      	ble.n	801d08e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d072:	1422      	asrs	r2, r4, #16
 801d074:	d405      	bmi.n	801d082 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d076:	4542      	cmp	r2, r8
 801d078:	da03      	bge.n	801d082 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d07a:	1402      	asrs	r2, r0, #16
 801d07c:	d401      	bmi.n	801d082 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d07e:	42ba      	cmp	r2, r7
 801d080:	db06      	blt.n	801d090 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d082:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d084:	4474      	add	r4, lr
 801d086:	3b01      	subs	r3, #1
 801d088:	3503      	adds	r5, #3
 801d08a:	4410      	add	r0, r2
 801d08c:	e7ef      	b.n	801d06e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d08e:	d075      	beq.n	801d17c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801d090:	1e5a      	subs	r2, r3, #1
 801d092:	fb0e 4602 	mla	r6, lr, r2, r4
 801d096:	1436      	asrs	r6, r6, #16
 801d098:	d465      	bmi.n	801d166 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801d09a:	4546      	cmp	r6, r8
 801d09c:	da63      	bge.n	801d166 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801d09e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801d0a0:	fb06 0202 	mla	r2, r6, r2, r0
 801d0a4:	1412      	asrs	r2, r2, #16
 801d0a6:	d45e      	bmi.n	801d166 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801d0a8:	42ba      	cmp	r2, r7
 801d0aa:	da5c      	bge.n	801d166 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801d0ac:	1cef      	adds	r7, r5, #3
 801d0ae:	4699      	mov	r9, r3
 801d0b0:	f1b9 0f00 	cmp.w	r9, #0
 801d0b4:	dd5d      	ble.n	801d172 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801d0b6:	1402      	asrs	r2, r0, #16
 801d0b8:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801d0bc:	1426      	asrs	r6, r4, #16
 801d0be:	4692      	mov	sl, r2
 801d0c0:	9a00      	ldr	r2, [sp, #0]
 801d0c2:	fb08 220a 	mla	r2, r8, sl, r2
 801d0c6:	5d92      	ldrb	r2, [r2, r6]
 801d0c8:	9e01      	ldr	r6, [sp, #4]
 801d0ca:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801d0ce:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801d0d2:	d041      	beq.n	801d158 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801d0d4:	9a03      	ldr	r2, [sp, #12]
 801d0d6:	fa5f fb86 	uxtb.w	fp, r6
 801d0da:	fb02 f808 	mul.w	r8, r2, r8
 801d0de:	f108 0201 	add.w	r2, r8, #1
 801d0e2:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801d0e6:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801d0ea:	1212      	asrs	r2, r2, #8
 801d0ec:	fa1f fa82 	uxth.w	sl, r2
 801d0f0:	43d2      	mvns	r2, r2
 801d0f2:	fb1b fb0a 	smulbb	fp, fp, sl
 801d0f6:	b2d2      	uxtb	r2, r2
 801d0f8:	fb08 b802 	mla	r8, r8, r2, fp
 801d0fc:	fa1f f888 	uxth.w	r8, r8
 801d100:	f108 0b01 	add.w	fp, r8, #1
 801d104:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801d108:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801d10c:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801d110:	fb1b fb0a 	smulbb	fp, fp, sl
 801d114:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d118:	fb16 fa0a 	smulbb	sl, r6, sl
 801d11c:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801d120:	f807 8c03 	strb.w	r8, [r7, #-3]
 801d124:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801d128:	fb06 aa02 	mla	sl, r6, r2, sl
 801d12c:	fb08 b802 	mla	r8, r8, r2, fp
 801d130:	fa1f fa8a 	uxth.w	sl, sl
 801d134:	fa1f f888 	uxth.w	r8, r8
 801d138:	f10a 0601 	add.w	r6, sl, #1
 801d13c:	f108 0b01 	add.w	fp, r8, #1
 801d140:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801d144:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801d148:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d14c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d150:	f807 ac01 	strb.w	sl, [r7, #-1]
 801d154:	f807 8c02 	strb.w	r8, [r7, #-2]
 801d158:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d15a:	4474      	add	r4, lr
 801d15c:	3703      	adds	r7, #3
 801d15e:	f109 39ff 	add.w	r9, r9, #4294967295
 801d162:	4410      	add	r0, r2
 801d164:	e7a4      	b.n	801d0b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d166:	f04f 0800 	mov.w	r8, #0
 801d16a:	eba3 0208 	sub.w	r2, r3, r8
 801d16e:	2a00      	cmp	r2, #0
 801d170:	dc3b      	bgt.n	801d1ea <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801d172:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d176:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d17a:	441d      	add	r5, r3
 801d17c:	2900      	cmp	r1, #0
 801d17e:	f340 8093 	ble.w	801d2a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801d182:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d186:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d188:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d18c:	3901      	subs	r1, #1
 801d18e:	eeb0 6a62 	vmov.f32	s12, s5
 801d192:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d196:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d19a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d19e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d1a2:	eeb0 6a43 	vmov.f32	s12, s6
 801d1a6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d1aa:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d1ae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d1b2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d1b6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d1ba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d1be:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d1c2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d1c6:	ee12 2a90 	vmov	r2, s5
 801d1ca:	eef0 2a47 	vmov.f32	s5, s14
 801d1ce:	fb92 fef3 	sdiv	lr, r2, r3
 801d1d2:	ee13 2a10 	vmov	r2, s6
 801d1d6:	eeb0 3a67 	vmov.f32	s6, s15
 801d1da:	fb92 f3f3 	sdiv	r3, r2, r3
 801d1de:	9a02      	ldr	r2, [sp, #8]
 801d1e0:	9312      	str	r3, [sp, #72]	; 0x48
 801d1e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d1e4:	bf08      	it	eq
 801d1e6:	4613      	moveq	r3, r2
 801d1e8:	e731      	b.n	801d04e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d1ea:	1427      	asrs	r7, r4, #16
 801d1ec:	d456      	bmi.n	801d29c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801d1ee:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801d1f2:	42be      	cmp	r6, r7
 801d1f4:	dd52      	ble.n	801d29c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801d1f6:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d1fa:	d44f      	bmi.n	801d29c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801d1fc:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801d200:	454a      	cmp	r2, r9
 801d202:	dd4b      	ble.n	801d29c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801d204:	9a00      	ldr	r2, [sp, #0]
 801d206:	b236      	sxth	r6, r6
 801d208:	fb09 2606 	mla	r6, r9, r6, r2
 801d20c:	5df2      	ldrb	r2, [r6, r7]
 801d20e:	9e01      	ldr	r6, [sp, #4]
 801d210:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801d214:	0e3a      	lsrs	r2, r7, #24
 801d216:	d041      	beq.n	801d29c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801d218:	9e03      	ldr	r6, [sp, #12]
 801d21a:	fa5f fb87 	uxtb.w	fp, r7
 801d21e:	4372      	muls	r2, r6
 801d220:	1c56      	adds	r6, r2, #1
 801d222:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801d226:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801d22a:	1212      	asrs	r2, r2, #8
 801d22c:	f815 9006 	ldrb.w	r9, [r5, r6]
 801d230:	fa1f fa82 	uxth.w	sl, r2
 801d234:	43d2      	mvns	r2, r2
 801d236:	fb1b fb0a 	smulbb	fp, fp, sl
 801d23a:	b2d2      	uxtb	r2, r2
 801d23c:	fb09 b902 	mla	r9, r9, r2, fp
 801d240:	fa1f f989 	uxth.w	r9, r9
 801d244:	f109 0b01 	add.w	fp, r9, #1
 801d248:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d24c:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801d250:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d254:	fb1b fb0a 	smulbb	fp, fp, sl
 801d258:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d25c:	fb17 fa0a 	smulbb	sl, r7, sl
 801d260:	f805 9006 	strb.w	r9, [r5, r6]
 801d264:	442e      	add	r6, r5
 801d266:	78b7      	ldrb	r7, [r6, #2]
 801d268:	f896 9001 	ldrb.w	r9, [r6, #1]
 801d26c:	fb07 aa02 	mla	sl, r7, r2, sl
 801d270:	fb09 b902 	mla	r9, r9, r2, fp
 801d274:	fa1f fa8a 	uxth.w	sl, sl
 801d278:	fa1f f989 	uxth.w	r9, r9
 801d27c:	f10a 0701 	add.w	r7, sl, #1
 801d280:	f109 0b01 	add.w	fp, r9, #1
 801d284:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d288:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d28c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d290:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d294:	f886 a002 	strb.w	sl, [r6, #2]
 801d298:	f886 9001 	strb.w	r9, [r6, #1]
 801d29c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d29e:	4474      	add	r4, lr
 801d2a0:	f108 0801 	add.w	r8, r8, #1
 801d2a4:	4410      	add	r0, r2
 801d2a6:	e760      	b.n	801d16a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801d2a8:	b005      	add	sp, #20
 801d2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d2ae <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d2ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2b2:	b085      	sub	sp, #20
 801d2b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d2b8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d2ba:	9203      	str	r2, [sp, #12]
 801d2bc:	6868      	ldr	r0, [r5, #4]
 801d2be:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801d2c2:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801d2c6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801d2ca:	fb00 2404 	mla	r4, r0, r4, r2
 801d2ce:	682a      	ldr	r2, [r5, #0]
 801d2d0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d2d4:	4414      	add	r4, r2
 801d2d6:	f8dc 2000 	ldr.w	r2, [ip]
 801d2da:	9201      	str	r2, [sp, #4]
 801d2dc:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801d2e0:	3204      	adds	r2, #4
 801d2e2:	9202      	str	r2, [sp, #8]
 801d2e4:	2900      	cmp	r1, #0
 801d2e6:	dc03      	bgt.n	801d2f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801d2e8:	9a03      	ldr	r2, [sp, #12]
 801d2ea:	2a00      	cmp	r2, #0
 801d2ec:	f340 8137 	ble.w	801d55e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d2f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d2f2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801d2f6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d2fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d2fc:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d300:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d304:	2b00      	cmp	r3, #0
 801d306:	dd0d      	ble.n	801d324 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d308:	1405      	asrs	r5, r0, #16
 801d30a:	d405      	bmi.n	801d318 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d30c:	4545      	cmp	r5, r8
 801d30e:	da03      	bge.n	801d318 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d310:	1415      	asrs	r5, r2, #16
 801d312:	d401      	bmi.n	801d318 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d314:	42bd      	cmp	r5, r7
 801d316:	db06      	blt.n	801d326 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d318:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d31a:	4470      	add	r0, lr
 801d31c:	3b01      	subs	r3, #1
 801d31e:	3403      	adds	r4, #3
 801d320:	442a      	add	r2, r5
 801d322:	e7ef      	b.n	801d304 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801d324:	d070      	beq.n	801d408 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801d326:	1e5d      	subs	r5, r3, #1
 801d328:	fb0e 0605 	mla	r6, lr, r5, r0
 801d32c:	1436      	asrs	r6, r6, #16
 801d32e:	d462      	bmi.n	801d3f6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801d330:	4546      	cmp	r6, r8
 801d332:	da60      	bge.n	801d3f6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801d334:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801d336:	fb06 2505 	mla	r5, r6, r5, r2
 801d33a:	142d      	asrs	r5, r5, #16
 801d33c:	d45b      	bmi.n	801d3f6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801d33e:	42bd      	cmp	r5, r7
 801d340:	da59      	bge.n	801d3f6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801d342:	1ce5      	adds	r5, r4, #3
 801d344:	469a      	mov	sl, r3
 801d346:	f1ba 0f00 	cmp.w	sl, #0
 801d34a:	dd58      	ble.n	801d3fe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801d34c:	1416      	asrs	r6, r2, #16
 801d34e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801d352:	1407      	asrs	r7, r0, #16
 801d354:	46b1      	mov	r9, r6
 801d356:	9e01      	ldr	r6, [sp, #4]
 801d358:	fb08 6609 	mla	r6, r8, r9, r6
 801d35c:	5df6      	ldrb	r6, [r6, r7]
 801d35e:	9f02      	ldr	r7, [sp, #8]
 801d360:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801d364:	0e37      	lsrs	r7, r6, #24
 801d366:	2fff      	cmp	r7, #255	; 0xff
 801d368:	f000 80f0 	beq.w	801d54c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801d36c:	fa5f f887 	uxtb.w	r8, r7
 801d370:	b3d7      	cbz	r7, 801d3e8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801d372:	fa1f f788 	uxth.w	r7, r8
 801d376:	ea6f 0808 	mvn.w	r8, r8
 801d37a:	fa5f fb86 	uxtb.w	fp, r6
 801d37e:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801d382:	fa5f f888 	uxtb.w	r8, r8
 801d386:	fb1b fb07 	smulbb	fp, fp, r7
 801d38a:	fb09 b908 	mla	r9, r9, r8, fp
 801d38e:	fa1f f989 	uxth.w	r9, r9
 801d392:	f109 0b01 	add.w	fp, r9, #1
 801d396:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d39a:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801d39e:	fb1b fb08 	smulbb	fp, fp, r8
 801d3a2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d3a6:	f805 9c03 	strb.w	r9, [r5, #-3]
 801d3aa:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801d3ae:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801d3b2:	fb09 b907 	mla	r9, r9, r7, fp
 801d3b6:	fa1f f989 	uxth.w	r9, r9
 801d3ba:	f109 0b01 	add.w	fp, r9, #1
 801d3be:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d3c2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d3c6:	f805 9c02 	strb.w	r9, [r5, #-2]
 801d3ca:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801d3ce:	fb19 f808 	smulbb	r8, r9, r8
 801d3d2:	fb06 8607 	mla	r6, r6, r7, r8
 801d3d6:	b2b6      	uxth	r6, r6
 801d3d8:	f106 0801 	add.w	r8, r6, #1
 801d3dc:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801d3e0:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d3e4:	f805 8c01 	strb.w	r8, [r5, #-1]
 801d3e8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801d3ea:	4470      	add	r0, lr
 801d3ec:	3503      	adds	r5, #3
 801d3ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d3f2:	4432      	add	r2, r6
 801d3f4:	e7a7      	b.n	801d346 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d3f6:	2600      	movs	r6, #0
 801d3f8:	1b9d      	subs	r5, r3, r6
 801d3fa:	2d00      	cmp	r5, #0
 801d3fc:	dc3b      	bgt.n	801d476 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801d3fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d402:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d406:	441c      	add	r4, r3
 801d408:	2900      	cmp	r1, #0
 801d40a:	f340 80a8 	ble.w	801d55e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d40e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d412:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d414:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d418:	3901      	subs	r1, #1
 801d41a:	eeb0 6a62 	vmov.f32	s12, s5
 801d41e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d422:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d426:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d42a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d42e:	eeb0 6a43 	vmov.f32	s12, s6
 801d432:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d436:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d43a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d43e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d442:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d446:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d44a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d44e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d452:	ee12 2a90 	vmov	r2, s5
 801d456:	eef0 2a47 	vmov.f32	s5, s14
 801d45a:	fb92 fef3 	sdiv	lr, r2, r3
 801d45e:	ee13 2a10 	vmov	r2, s6
 801d462:	eeb0 3a67 	vmov.f32	s6, s15
 801d466:	fb92 f3f3 	sdiv	r3, r2, r3
 801d46a:	9a03      	ldr	r2, [sp, #12]
 801d46c:	9312      	str	r3, [sp, #72]	; 0x48
 801d46e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d470:	bf08      	it	eq
 801d472:	4613      	moveq	r3, r2
 801d474:	e736      	b.n	801d2e4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801d476:	ea5f 4820 	movs.w	r8, r0, asr #16
 801d47a:	d457      	bmi.n	801d52c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801d47c:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801d480:	4547      	cmp	r7, r8
 801d482:	dd53      	ble.n	801d52c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801d484:	ea5f 4922 	movs.w	r9, r2, asr #16
 801d488:	d450      	bmi.n	801d52c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801d48a:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801d48e:	454d      	cmp	r5, r9
 801d490:	dd4c      	ble.n	801d52c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801d492:	9d01      	ldr	r5, [sp, #4]
 801d494:	b23f      	sxth	r7, r7
 801d496:	fb09 5707 	mla	r7, r9, r7, r5
 801d49a:	f817 5008 	ldrb.w	r5, [r7, r8]
 801d49e:	9f02      	ldr	r7, [sp, #8]
 801d4a0:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801d4a4:	0e2f      	lsrs	r7, r5, #24
 801d4a6:	2fff      	cmp	r7, #255	; 0xff
 801d4a8:	d045      	beq.n	801d536 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801d4aa:	fa5f f987 	uxtb.w	r9, r7
 801d4ae:	b3ef      	cbz	r7, 801d52c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801d4b0:	fa1f f889 	uxth.w	r8, r9
 801d4b4:	ea6f 0909 	mvn.w	r9, r9
 801d4b8:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801d4bc:	fa5f fb85 	uxtb.w	fp, r5
 801d4c0:	f814 a007 	ldrb.w	sl, [r4, r7]
 801d4c4:	fa5f f989 	uxtb.w	r9, r9
 801d4c8:	fb1b fb08 	smulbb	fp, fp, r8
 801d4cc:	fb0a ba09 	mla	sl, sl, r9, fp
 801d4d0:	fa1f fa8a 	uxth.w	sl, sl
 801d4d4:	f10a 0b01 	add.w	fp, sl, #1
 801d4d8:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801d4dc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d4e0:	f804 a007 	strb.w	sl, [r4, r7]
 801d4e4:	4427      	add	r7, r4
 801d4e6:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801d4ea:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801d4ee:	f897 b001 	ldrb.w	fp, [r7, #1]
 801d4f2:	fb1b fb09 	smulbb	fp, fp, r9
 801d4f6:	fb0a ba08 	mla	sl, sl, r8, fp
 801d4fa:	fa1f fa8a 	uxth.w	sl, sl
 801d4fe:	f10a 0b01 	add.w	fp, sl, #1
 801d502:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801d506:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d50a:	f887 a001 	strb.w	sl, [r7, #1]
 801d50e:	f897 a002 	ldrb.w	sl, [r7, #2]
 801d512:	fb1a f909 	smulbb	r9, sl, r9
 801d516:	fb05 9508 	mla	r5, r5, r8, r9
 801d51a:	b2ad      	uxth	r5, r5
 801d51c:	f105 0901 	add.w	r9, r5, #1
 801d520:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801d524:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d528:	f887 9002 	strb.w	r9, [r7, #2]
 801d52c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d52e:	4470      	add	r0, lr
 801d530:	3601      	adds	r6, #1
 801d532:	442a      	add	r2, r5
 801d534:	e760      	b.n	801d3f8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801d536:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801d53a:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801d53e:	55e5      	strb	r5, [r4, r7]
 801d540:	4427      	add	r7, r4
 801d542:	0c2d      	lsrs	r5, r5, #16
 801d544:	f887 8001 	strb.w	r8, [r7, #1]
 801d548:	70bd      	strb	r5, [r7, #2]
 801d54a:	e7ef      	b.n	801d52c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801d54c:	0a37      	lsrs	r7, r6, #8
 801d54e:	f805 6c03 	strb.w	r6, [r5, #-3]
 801d552:	0c36      	lsrs	r6, r6, #16
 801d554:	f805 7c02 	strb.w	r7, [r5, #-2]
 801d558:	f805 6c01 	strb.w	r6, [r5, #-1]
 801d55c:	e744      	b.n	801d3e8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801d55e:	b005      	add	sp, #20
 801d560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d564 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d564:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d568:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801d56a:	9201      	str	r2, [sp, #4]
 801d56c:	6870      	ldr	r0, [r6, #4]
 801d56e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801d572:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801d576:	fa1f fe85 	uxth.w	lr, r5
 801d57a:	43ed      	mvns	r5, r5
 801d57c:	f8dc 8000 	ldr.w	r8, [ip]
 801d580:	b2ed      	uxtb	r5, r5
 801d582:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801d586:	fb00 2404 	mla	r4, r0, r4, r2
 801d58a:	6832      	ldr	r2, [r6, #0]
 801d58c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d590:	4414      	add	r4, r2
 801d592:	2900      	cmp	r1, #0
 801d594:	dc03      	bgt.n	801d59e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801d596:	9a01      	ldr	r2, [sp, #4]
 801d598:	2a00      	cmp	r2, #0
 801d59a:	f340 810d 	ble.w	801d7b8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801d59e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d5a0:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801d5a4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d5a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d5aa:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801d5ae:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d5b2:	2b00      	cmp	r3, #0
 801d5b4:	dd0e      	ble.n	801d5d4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d5b6:	1406      	asrs	r6, r0, #16
 801d5b8:	d405      	bmi.n	801d5c6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801d5ba:	4556      	cmp	r6, sl
 801d5bc:	da03      	bge.n	801d5c6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801d5be:	1416      	asrs	r6, r2, #16
 801d5c0:	d401      	bmi.n	801d5c6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801d5c2:	454e      	cmp	r6, r9
 801d5c4:	db07      	blt.n	801d5d6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d5c6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801d5c8:	3b01      	subs	r3, #1
 801d5ca:	3403      	adds	r4, #3
 801d5cc:	4430      	add	r0, r6
 801d5ce:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801d5d0:	4432      	add	r2, r6
 801d5d2:	e7ee      	b.n	801d5b2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801d5d4:	d060      	beq.n	801d698 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801d5d6:	1e5e      	subs	r6, r3, #1
 801d5d8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d5da:	fb07 0706 	mla	r7, r7, r6, r0
 801d5de:	143f      	asrs	r7, r7, #16
 801d5e0:	d451      	bmi.n	801d686 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801d5e2:	4557      	cmp	r7, sl
 801d5e4:	da4f      	bge.n	801d686 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801d5e6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801d5e8:	fb07 2606 	mla	r6, r7, r6, r2
 801d5ec:	1436      	asrs	r6, r6, #16
 801d5ee:	d44a      	bmi.n	801d686 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801d5f0:	454e      	cmp	r6, r9
 801d5f2:	da48      	bge.n	801d686 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801d5f4:	1ce6      	adds	r6, r4, #3
 801d5f6:	4699      	mov	r9, r3
 801d5f8:	f1b9 0f00 	cmp.w	r9, #0
 801d5fc:	f106 0603 	add.w	r6, r6, #3
 801d600:	dd45      	ble.n	801d68e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801d602:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801d606:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801d60a:	1417      	asrs	r7, r2, #16
 801d60c:	f109 39ff 	add.w	r9, r9, #4294967295
 801d610:	fb0b a707 	mla	r7, fp, r7, sl
 801d614:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801d618:	fb1b fb05 	smulbb	fp, fp, r5
 801d61c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d620:	eb08 0a07 	add.w	sl, r8, r7
 801d624:	f818 7007 	ldrb.w	r7, [r8, r7]
 801d628:	fb07 b70e 	mla	r7, r7, lr, fp
 801d62c:	b2bf      	uxth	r7, r7
 801d62e:	f107 0b01 	add.w	fp, r7, #1
 801d632:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801d636:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801d63a:	fb1b fb05 	smulbb	fp, fp, r5
 801d63e:	123f      	asrs	r7, r7, #8
 801d640:	f806 7c06 	strb.w	r7, [r6, #-6]
 801d644:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801d648:	fb07 b70e 	mla	r7, r7, lr, fp
 801d64c:	b2bf      	uxth	r7, r7
 801d64e:	f107 0b01 	add.w	fp, r7, #1
 801d652:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801d656:	123f      	asrs	r7, r7, #8
 801d658:	f806 7c05 	strb.w	r7, [r6, #-5]
 801d65c:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801d660:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801d664:	fb1a fa05 	smulbb	sl, sl, r5
 801d668:	fb07 a70e 	mla	r7, r7, lr, sl
 801d66c:	b2bf      	uxth	r7, r7
 801d66e:	f107 0a01 	add.w	sl, r7, #1
 801d672:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801d676:	123f      	asrs	r7, r7, #8
 801d678:	f806 7c04 	strb.w	r7, [r6, #-4]
 801d67c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d67e:	4438      	add	r0, r7
 801d680:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801d682:	443a      	add	r2, r7
 801d684:	e7b8      	b.n	801d5f8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d686:	2700      	movs	r7, #0
 801d688:	1bde      	subs	r6, r3, r7
 801d68a:	2e00      	cmp	r6, #0
 801d68c:	dc3f      	bgt.n	801d70e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801d68e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d692:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d696:	441c      	add	r4, r3
 801d698:	2900      	cmp	r1, #0
 801d69a:	f340 808d 	ble.w	801d7b8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801d69e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d6a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d6a4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d6a8:	3901      	subs	r1, #1
 801d6aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d6ae:	eef0 6a62 	vmov.f32	s13, s5
 801d6b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d6b6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d6ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d6be:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801d6c2:	eef0 6a43 	vmov.f32	s13, s6
 801d6c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d6ca:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801d6ce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d6d2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d6d6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d6da:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d6de:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d6e2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d6e6:	ee12 2a90 	vmov	r2, s5
 801d6ea:	eef0 2a47 	vmov.f32	s5, s14
 801d6ee:	fb92 f3f3 	sdiv	r3, r2, r3
 801d6f2:	ee13 2a10 	vmov	r2, s6
 801d6f6:	930f      	str	r3, [sp, #60]	; 0x3c
 801d6f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d6fa:	eeb0 3a67 	vmov.f32	s6, s15
 801d6fe:	fb92 f3f3 	sdiv	r3, r2, r3
 801d702:	9a01      	ldr	r2, [sp, #4]
 801d704:	9310      	str	r3, [sp, #64]	; 0x40
 801d706:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d708:	bf08      	it	eq
 801d70a:	4613      	moveq	r3, r2
 801d70c:	e741      	b.n	801d592 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801d70e:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d712:	d44b      	bmi.n	801d7ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801d714:	f8dc b008 	ldr.w	fp, [ip, #8]
 801d718:	45cb      	cmp	fp, r9
 801d71a:	dd47      	ble.n	801d7ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801d71c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801d720:	d444      	bmi.n	801d7ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801d722:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801d726:	4556      	cmp	r6, sl
 801d728:	dd40      	ble.n	801d7ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801d72a:	fa0f f68b 	sxth.w	r6, fp
 801d72e:	fb0a 9906 	mla	r9, sl, r6, r9
 801d732:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801d736:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801d73a:	f814 b006 	ldrb.w	fp, [r4, r6]
 801d73e:	fb1b fb05 	smulbb	fp, fp, r5
 801d742:	eb08 0a09 	add.w	sl, r8, r9
 801d746:	f818 9009 	ldrb.w	r9, [r8, r9]
 801d74a:	fb09 b90e 	mla	r9, r9, lr, fp
 801d74e:	fa1f f989 	uxth.w	r9, r9
 801d752:	f109 0b01 	add.w	fp, r9, #1
 801d756:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d75a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d75e:	f804 9006 	strb.w	r9, [r4, r6]
 801d762:	4426      	add	r6, r4
 801d764:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801d768:	f896 b001 	ldrb.w	fp, [r6, #1]
 801d76c:	fb1b fb05 	smulbb	fp, fp, r5
 801d770:	fb09 b90e 	mla	r9, r9, lr, fp
 801d774:	fa1f f989 	uxth.w	r9, r9
 801d778:	f109 0b01 	add.w	fp, r9, #1
 801d77c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d780:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d784:	f886 9001 	strb.w	r9, [r6, #1]
 801d788:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801d78c:	f896 a002 	ldrb.w	sl, [r6, #2]
 801d790:	fb1a fa05 	smulbb	sl, sl, r5
 801d794:	fb09 a90e 	mla	r9, r9, lr, sl
 801d798:	fa1f f989 	uxth.w	r9, r9
 801d79c:	f109 0a01 	add.w	sl, r9, #1
 801d7a0:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801d7a4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d7a8:	f886 9002 	strb.w	r9, [r6, #2]
 801d7ac:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801d7ae:	3701      	adds	r7, #1
 801d7b0:	4430      	add	r0, r6
 801d7b2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801d7b4:	4432      	add	r2, r6
 801d7b6:	e767      	b.n	801d688 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801d7b8:	b003      	add	sp, #12
 801d7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d7be <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d7be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7c2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801d7c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d7c8:	9201      	str	r2, [sp, #4]
 801d7ca:	6868      	ldr	r0, [r5, #4]
 801d7cc:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801d7ce:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801d7d2:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 801d7d6:	fb00 2404 	mla	r4, r0, r4, r2
 801d7da:	682a      	ldr	r2, [r5, #0]
 801d7dc:	f8d7 8000 	ldr.w	r8, [r7]
 801d7e0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d7e4:	4414      	add	r4, r2
 801d7e6:	2900      	cmp	r1, #0
 801d7e8:	dc03      	bgt.n	801d7f2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801d7ea:	9a01      	ldr	r2, [sp, #4]
 801d7ec:	2a00      	cmp	r2, #0
 801d7ee:	f340 80af 	ble.w	801d950 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801d7f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d7f4:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801d7f8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d7fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d7fe:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801d802:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d806:	2b00      	cmp	r3, #0
 801d808:	dd0c      	ble.n	801d824 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d80a:	1405      	asrs	r5, r0, #16
 801d80c:	d405      	bmi.n	801d81a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d80e:	4555      	cmp	r5, sl
 801d810:	da03      	bge.n	801d81a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d812:	1415      	asrs	r5, r2, #16
 801d814:	d401      	bmi.n	801d81a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d816:	454d      	cmp	r5, r9
 801d818:	db05      	blt.n	801d826 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d81a:	4470      	add	r0, lr
 801d81c:	4462      	add	r2, ip
 801d81e:	3b01      	subs	r3, #1
 801d820:	3403      	adds	r4, #3
 801d822:	e7f0      	b.n	801d806 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801d824:	d038      	beq.n	801d898 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801d826:	1e5d      	subs	r5, r3, #1
 801d828:	fb0e 0605 	mla	r6, lr, r5, r0
 801d82c:	1436      	asrs	r6, r6, #16
 801d82e:	d42a      	bmi.n	801d886 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801d830:	4556      	cmp	r6, sl
 801d832:	da28      	bge.n	801d886 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801d834:	fb0c 2505 	mla	r5, ip, r5, r2
 801d838:	142d      	asrs	r5, r5, #16
 801d83a:	d424      	bmi.n	801d886 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801d83c:	454d      	cmp	r5, r9
 801d83e:	da22      	bge.n	801d886 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801d840:	1ce6      	adds	r6, r4, #3
 801d842:	4699      	mov	r9, r3
 801d844:	f1b9 0f00 	cmp.w	r9, #0
 801d848:	f106 0603 	add.w	r6, r6, #3
 801d84c:	dd1f      	ble.n	801d88e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801d84e:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801d852:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801d856:	1415      	asrs	r5, r2, #16
 801d858:	4470      	add	r0, lr
 801d85a:	4462      	add	r2, ip
 801d85c:	f109 39ff 	add.w	r9, r9, #4294967295
 801d860:	fb0b a505 	mla	r5, fp, r5, sl
 801d864:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d868:	eb08 0a05 	add.w	sl, r8, r5
 801d86c:	f818 5005 	ldrb.w	r5, [r8, r5]
 801d870:	f806 5c06 	strb.w	r5, [r6, #-6]
 801d874:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801d878:	f806 5c05 	strb.w	r5, [r6, #-5]
 801d87c:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801d880:	f806 5c04 	strb.w	r5, [r6, #-4]
 801d884:	e7de      	b.n	801d844 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d886:	2600      	movs	r6, #0
 801d888:	1b9d      	subs	r5, r3, r6
 801d88a:	2d00      	cmp	r5, #0
 801d88c:	dc38      	bgt.n	801d900 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801d88e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d892:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d896:	441c      	add	r4, r3
 801d898:	2900      	cmp	r1, #0
 801d89a:	dd59      	ble.n	801d950 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801d89c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d8a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d8a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d8a6:	3901      	subs	r1, #1
 801d8a8:	eeb0 6a62 	vmov.f32	s12, s5
 801d8ac:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d8b0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d8b4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d8b8:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801d8bc:	eeb0 6a43 	vmov.f32	s12, s6
 801d8c0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d8c4:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801d8c8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d8cc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d8d0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d8d4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d8d8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d8dc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d8e0:	ee12 2a90 	vmov	r2, s5
 801d8e4:	eef0 2a47 	vmov.f32	s5, s14
 801d8e8:	fb92 fef3 	sdiv	lr, r2, r3
 801d8ec:	ee13 2a10 	vmov	r2, s6
 801d8f0:	eeb0 3a67 	vmov.f32	s6, s15
 801d8f4:	fb92 fcf3 	sdiv	ip, r2, r3
 801d8f8:	9a01      	ldr	r2, [sp, #4]
 801d8fa:	bf08      	it	eq
 801d8fc:	4613      	moveq	r3, r2
 801d8fe:	e772      	b.n	801d7e6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801d900:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d904:	d420      	bmi.n	801d948 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801d906:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801d90a:	45cb      	cmp	fp, r9
 801d90c:	dd1c      	ble.n	801d948 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801d90e:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801d912:	d419      	bmi.n	801d948 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801d914:	68fd      	ldr	r5, [r7, #12]
 801d916:	4555      	cmp	r5, sl
 801d918:	dd16      	ble.n	801d948 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801d91a:	fa0f f58b 	sxth.w	r5, fp
 801d91e:	fb0a 9505 	mla	r5, sl, r5, r9
 801d922:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d926:	f818 9005 	ldrb.w	r9, [r8, r5]
 801d92a:	eb08 0b05 	add.w	fp, r8, r5
 801d92e:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801d932:	f804 9005 	strb.w	r9, [r4, r5]
 801d936:	4425      	add	r5, r4
 801d938:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801d93c:	f885 9001 	strb.w	r9, [r5, #1]
 801d940:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801d944:	f885 9002 	strb.w	r9, [r5, #2]
 801d948:	4470      	add	r0, lr
 801d94a:	4462      	add	r2, ip
 801d94c:	3601      	adds	r6, #1
 801d94e:	e79b      	b.n	801d888 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801d950:	b003      	add	sp, #12
 801d952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d956 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d956:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d95a:	b085      	sub	sp, #20
 801d95c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d960:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d962:	9202      	str	r2, [sp, #8]
 801d964:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801d968:	6860      	ldr	r0, [r4, #4]
 801d96a:	9203      	str	r2, [sp, #12]
 801d96c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801d970:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801d974:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801d978:	fb00 2505 	mla	r5, r0, r5, r2
 801d97c:	6822      	ldr	r2, [r4, #0]
 801d97e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d982:	4415      	add	r5, r2
 801d984:	f8dc 2000 	ldr.w	r2, [ip]
 801d988:	9201      	str	r2, [sp, #4]
 801d98a:	2900      	cmp	r1, #0
 801d98c:	dc03      	bgt.n	801d996 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801d98e:	9a02      	ldr	r2, [sp, #8]
 801d990:	2a00      	cmp	r2, #0
 801d992:	f340 8122 	ble.w	801dbda <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801d996:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d998:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801d99c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d9a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d9a2:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d9a6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d9aa:	2b00      	cmp	r3, #0
 801d9ac:	dd0d      	ble.n	801d9ca <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801d9ae:	1422      	asrs	r2, r4, #16
 801d9b0:	d405      	bmi.n	801d9be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d9b2:	4542      	cmp	r2, r8
 801d9b4:	da03      	bge.n	801d9be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d9b6:	1402      	asrs	r2, r0, #16
 801d9b8:	d401      	bmi.n	801d9be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d9ba:	42ba      	cmp	r2, r7
 801d9bc:	db06      	blt.n	801d9cc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d9be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d9c0:	4474      	add	r4, lr
 801d9c2:	3b01      	subs	r3, #1
 801d9c4:	3503      	adds	r5, #3
 801d9c6:	4410      	add	r0, r2
 801d9c8:	e7ef      	b.n	801d9aa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801d9ca:	d072      	beq.n	801dab2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801d9cc:	1e5a      	subs	r2, r3, #1
 801d9ce:	fb0e 4602 	mla	r6, lr, r2, r4
 801d9d2:	1436      	asrs	r6, r6, #16
 801d9d4:	d462      	bmi.n	801da9c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801d9d6:	4546      	cmp	r6, r8
 801d9d8:	da60      	bge.n	801da9c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801d9da:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801d9dc:	fb06 0202 	mla	r2, r6, r2, r0
 801d9e0:	1412      	asrs	r2, r2, #16
 801d9e2:	d45b      	bmi.n	801da9c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801d9e4:	42ba      	cmp	r2, r7
 801d9e6:	da59      	bge.n	801da9c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801d9e8:	1cef      	adds	r7, r5, #3
 801d9ea:	4699      	mov	r9, r3
 801d9ec:	f1b9 0f00 	cmp.w	r9, #0
 801d9f0:	dd5a      	ble.n	801daa8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d9f2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801d9f6:	1426      	asrs	r6, r4, #16
 801d9f8:	1402      	asrs	r2, r0, #16
 801d9fa:	fb08 6202 	mla	r2, r8, r2, r6
 801d9fe:	9e01      	ldr	r6, [sp, #4]
 801da00:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801da04:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801da08:	d041      	beq.n	801da8e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801da0a:	9a03      	ldr	r2, [sp, #12]
 801da0c:	fa5f fb86 	uxtb.w	fp, r6
 801da10:	fb02 f808 	mul.w	r8, r2, r8
 801da14:	f108 0201 	add.w	r2, r8, #1
 801da18:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801da1c:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801da20:	1212      	asrs	r2, r2, #8
 801da22:	fa1f fa82 	uxth.w	sl, r2
 801da26:	43d2      	mvns	r2, r2
 801da28:	fb1b fb0a 	smulbb	fp, fp, sl
 801da2c:	b2d2      	uxtb	r2, r2
 801da2e:	fb08 b802 	mla	r8, r8, r2, fp
 801da32:	fa1f f888 	uxth.w	r8, r8
 801da36:	f108 0b01 	add.w	fp, r8, #1
 801da3a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801da3e:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801da42:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801da46:	fb1b fb0a 	smulbb	fp, fp, sl
 801da4a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801da4e:	fb16 fa0a 	smulbb	sl, r6, sl
 801da52:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801da56:	f807 8c03 	strb.w	r8, [r7, #-3]
 801da5a:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801da5e:	fb06 aa02 	mla	sl, r6, r2, sl
 801da62:	fb08 b802 	mla	r8, r8, r2, fp
 801da66:	fa1f fa8a 	uxth.w	sl, sl
 801da6a:	fa1f f888 	uxth.w	r8, r8
 801da6e:	f10a 0601 	add.w	r6, sl, #1
 801da72:	f108 0b01 	add.w	fp, r8, #1
 801da76:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801da7a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801da7e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801da82:	ea4f 2828 	mov.w	r8, r8, asr #8
 801da86:	f807 ac01 	strb.w	sl, [r7, #-1]
 801da8a:	f807 8c02 	strb.w	r8, [r7, #-2]
 801da8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801da90:	4474      	add	r4, lr
 801da92:	3703      	adds	r7, #3
 801da94:	f109 39ff 	add.w	r9, r9, #4294967295
 801da98:	4410      	add	r0, r2
 801da9a:	e7a7      	b.n	801d9ec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801da9c:	f04f 0800 	mov.w	r8, #0
 801daa0:	eba3 0208 	sub.w	r2, r3, r8
 801daa4:	2a00      	cmp	r2, #0
 801daa6:	dc3b      	bgt.n	801db20 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801daa8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801daac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dab0:	441d      	add	r5, r3
 801dab2:	2900      	cmp	r1, #0
 801dab4:	f340 8091 	ble.w	801dbda <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801dab8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dabc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dabe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dac2:	3901      	subs	r1, #1
 801dac4:	eeb0 6a62 	vmov.f32	s12, s5
 801dac8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801dacc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dad0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dad4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801dad8:	eeb0 6a43 	vmov.f32	s12, s6
 801dadc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dae0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801dae4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dae8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801daec:	ee77 2a62 	vsub.f32	s5, s14, s5
 801daf0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801daf4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801daf8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dafc:	ee12 2a90 	vmov	r2, s5
 801db00:	eef0 2a47 	vmov.f32	s5, s14
 801db04:	fb92 fef3 	sdiv	lr, r2, r3
 801db08:	ee13 2a10 	vmov	r2, s6
 801db0c:	eeb0 3a67 	vmov.f32	s6, s15
 801db10:	fb92 f3f3 	sdiv	r3, r2, r3
 801db14:	9a02      	ldr	r2, [sp, #8]
 801db16:	9312      	str	r3, [sp, #72]	; 0x48
 801db18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801db1a:	bf08      	it	eq
 801db1c:	4613      	moveq	r3, r2
 801db1e:	e734      	b.n	801d98a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801db20:	1427      	asrs	r7, r4, #16
 801db22:	d454      	bmi.n	801dbce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801db24:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801db28:	42be      	cmp	r6, r7
 801db2a:	dd50      	ble.n	801dbce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801db2c:	ea5f 4920 	movs.w	r9, r0, asr #16
 801db30:	d44d      	bmi.n	801dbce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801db32:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801db36:	454a      	cmp	r2, r9
 801db38:	dd49      	ble.n	801dbce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801db3a:	b236      	sxth	r6, r6
 801db3c:	9a01      	ldr	r2, [sp, #4]
 801db3e:	fb09 7606 	mla	r6, r9, r6, r7
 801db42:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801db46:	0e3a      	lsrs	r2, r7, #24
 801db48:	d041      	beq.n	801dbce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801db4a:	9e03      	ldr	r6, [sp, #12]
 801db4c:	fa5f fb87 	uxtb.w	fp, r7
 801db50:	4372      	muls	r2, r6
 801db52:	1c56      	adds	r6, r2, #1
 801db54:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801db58:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801db5c:	1212      	asrs	r2, r2, #8
 801db5e:	f815 9006 	ldrb.w	r9, [r5, r6]
 801db62:	fa1f fa82 	uxth.w	sl, r2
 801db66:	43d2      	mvns	r2, r2
 801db68:	fb1b fb0a 	smulbb	fp, fp, sl
 801db6c:	b2d2      	uxtb	r2, r2
 801db6e:	fb09 b902 	mla	r9, r9, r2, fp
 801db72:	fa1f f989 	uxth.w	r9, r9
 801db76:	f109 0b01 	add.w	fp, r9, #1
 801db7a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801db7e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801db82:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801db86:	fb1b fb0a 	smulbb	fp, fp, sl
 801db8a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801db8e:	fb17 fa0a 	smulbb	sl, r7, sl
 801db92:	f805 9006 	strb.w	r9, [r5, r6]
 801db96:	442e      	add	r6, r5
 801db98:	78b7      	ldrb	r7, [r6, #2]
 801db9a:	f896 9001 	ldrb.w	r9, [r6, #1]
 801db9e:	fb07 aa02 	mla	sl, r7, r2, sl
 801dba2:	fb09 b902 	mla	r9, r9, r2, fp
 801dba6:	fa1f fa8a 	uxth.w	sl, sl
 801dbaa:	fa1f f989 	uxth.w	r9, r9
 801dbae:	f10a 0701 	add.w	r7, sl, #1
 801dbb2:	f109 0b01 	add.w	fp, r9, #1
 801dbb6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801dbba:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801dbbe:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801dbc2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dbc6:	f886 a002 	strb.w	sl, [r6, #2]
 801dbca:	f886 9001 	strb.w	r9, [r6, #1]
 801dbce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801dbd0:	4474      	add	r4, lr
 801dbd2:	f108 0801 	add.w	r8, r8, #1
 801dbd6:	4410      	add	r0, r2
 801dbd8:	e762      	b.n	801daa0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801dbda:	b005      	add	sp, #20
 801dbdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dbe0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dbe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbe4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801dbe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dbea:	9201      	str	r2, [sp, #4]
 801dbec:	6860      	ldr	r0, [r4, #4]
 801dbee:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801dbf2:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 801dbf6:	fb00 2505 	mla	r5, r0, r5, r2
 801dbfa:	6822      	ldr	r2, [r4, #0]
 801dbfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dc00:	4415      	add	r5, r2
 801dc02:	f8dc 2000 	ldr.w	r2, [ip]
 801dc06:	9200      	str	r2, [sp, #0]
 801dc08:	2900      	cmp	r1, #0
 801dc0a:	dc03      	bgt.n	801dc14 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801dc0c:	9a01      	ldr	r2, [sp, #4]
 801dc0e:	2a00      	cmp	r2, #0
 801dc10:	f340 812b 	ble.w	801de6a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801dc14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dc16:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801dc1a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801dc1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801dc20:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801dc24:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801dc28:	2b00      	cmp	r3, #0
 801dc2a:	dd0e      	ble.n	801dc4a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801dc2c:	1422      	asrs	r2, r4, #16
 801dc2e:	d405      	bmi.n	801dc3c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801dc30:	4572      	cmp	r2, lr
 801dc32:	da03      	bge.n	801dc3c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801dc34:	1402      	asrs	r2, r0, #16
 801dc36:	d401      	bmi.n	801dc3c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801dc38:	42ba      	cmp	r2, r7
 801dc3a:	db07      	blt.n	801dc4c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801dc3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801dc3e:	3b01      	subs	r3, #1
 801dc40:	3503      	adds	r5, #3
 801dc42:	4414      	add	r4, r2
 801dc44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801dc46:	4410      	add	r0, r2
 801dc48:	e7ee      	b.n	801dc28 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801dc4a:	d06f      	beq.n	801dd2c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801dc4c:	1e5a      	subs	r2, r3, #1
 801dc4e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801dc50:	fb06 4602 	mla	r6, r6, r2, r4
 801dc54:	1436      	asrs	r6, r6, #16
 801dc56:	d45e      	bmi.n	801dd16 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801dc58:	4576      	cmp	r6, lr
 801dc5a:	da5c      	bge.n	801dd16 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801dc5c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801dc5e:	fb06 0202 	mla	r2, r6, r2, r0
 801dc62:	1412      	asrs	r2, r2, #16
 801dc64:	d457      	bmi.n	801dd16 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801dc66:	42ba      	cmp	r2, r7
 801dc68:	da55      	bge.n	801dd16 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801dc6a:	1cee      	adds	r6, r5, #3
 801dc6c:	469a      	mov	sl, r3
 801dc6e:	f1ba 0f00 	cmp.w	sl, #0
 801dc72:	dd56      	ble.n	801dd22 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801dc74:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801dc78:	1427      	asrs	r7, r4, #16
 801dc7a:	1402      	asrs	r2, r0, #16
 801dc7c:	fb0e 7202 	mla	r2, lr, r2, r7
 801dc80:	9f00      	ldr	r7, [sp, #0]
 801dc82:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801dc86:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801dc8a:	d03c      	beq.n	801dd06 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801dc8c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801dc90:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801dc94:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801dc98:	fa5f f28e 	uxtb.w	r2, lr
 801dc9c:	b2ff      	uxtb	r7, r7
 801dc9e:	f000 80dd 	beq.w	801de5c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801dca2:	fa1f f882 	uxth.w	r8, r2
 801dca6:	43d2      	mvns	r2, r2
 801dca8:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801dcac:	fb17 f708 	smulbb	r7, r7, r8
 801dcb0:	b2d2      	uxtb	r2, r2
 801dcb2:	fb19 f908 	smulbb	r9, r9, r8
 801dcb6:	fb0e 7702 	mla	r7, lr, r2, r7
 801dcba:	fb1b f808 	smulbb	r8, fp, r8
 801dcbe:	b2bf      	uxth	r7, r7
 801dcc0:	f107 0e01 	add.w	lr, r7, #1
 801dcc4:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801dcc8:	123f      	asrs	r7, r7, #8
 801dcca:	f806 7c03 	strb.w	r7, [r6, #-3]
 801dcce:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801dcd2:	fb07 9902 	mla	r9, r7, r2, r9
 801dcd6:	fa1f f989 	uxth.w	r9, r9
 801dcda:	f109 0701 	add.w	r7, r9, #1
 801dcde:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801dce2:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801dce6:	fb07 8802 	mla	r8, r7, r2, r8
 801dcea:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dcee:	fa1f f888 	uxth.w	r8, r8
 801dcf2:	f806 9c02 	strb.w	r9, [r6, #-2]
 801dcf6:	f108 0201 	add.w	r2, r8, #1
 801dcfa:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801dcfe:	ea4f 2828 	mov.w	r8, r8, asr #8
 801dd02:	f806 8c01 	strb.w	r8, [r6, #-1]
 801dd06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801dd08:	3603      	adds	r6, #3
 801dd0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801dd0e:	4414      	add	r4, r2
 801dd10:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801dd12:	4410      	add	r0, r2
 801dd14:	e7ab      	b.n	801dc6e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801dd16:	f04f 0e00 	mov.w	lr, #0
 801dd1a:	eba3 020e 	sub.w	r2, r3, lr
 801dd1e:	2a00      	cmp	r2, #0
 801dd20:	dc3d      	bgt.n	801dd9e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801dd22:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dd26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dd2a:	441d      	add	r5, r3
 801dd2c:	2900      	cmp	r1, #0
 801dd2e:	f340 809c 	ble.w	801de6a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801dd32:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dd36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dd38:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dd3c:	3901      	subs	r1, #1
 801dd3e:	eeb0 6a62 	vmov.f32	s12, s5
 801dd42:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801dd46:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dd4a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dd4e:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801dd52:	eeb0 6a43 	vmov.f32	s12, s6
 801dd56:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dd5a:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801dd5e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dd62:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dd66:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dd6a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dd6e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dd72:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dd76:	ee12 2a90 	vmov	r2, s5
 801dd7a:	eef0 2a47 	vmov.f32	s5, s14
 801dd7e:	fb92 f3f3 	sdiv	r3, r2, r3
 801dd82:	ee13 2a10 	vmov	r2, s6
 801dd86:	930f      	str	r3, [sp, #60]	; 0x3c
 801dd88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dd8a:	eeb0 3a67 	vmov.f32	s6, s15
 801dd8e:	fb92 f3f3 	sdiv	r3, r2, r3
 801dd92:	9a01      	ldr	r2, [sp, #4]
 801dd94:	9310      	str	r3, [sp, #64]	; 0x40
 801dd96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dd98:	bf08      	it	eq
 801dd9a:	4613      	moveq	r3, r2
 801dd9c:	e734      	b.n	801dc08 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801dd9e:	1427      	asrs	r7, r4, #16
 801dda0:	d44d      	bmi.n	801de3e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801dda2:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801dda6:	42be      	cmp	r6, r7
 801dda8:	dd49      	ble.n	801de3e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801ddaa:	ea5f 4820 	movs.w	r8, r0, asr #16
 801ddae:	d446      	bmi.n	801de3e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801ddb0:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801ddb4:	4542      	cmp	r2, r8
 801ddb6:	dd42      	ble.n	801de3e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801ddb8:	b236      	sxth	r6, r6
 801ddba:	9a00      	ldr	r2, [sp, #0]
 801ddbc:	fb08 7606 	mla	r6, r8, r6, r7
 801ddc0:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801ddc4:	0e3a      	lsrs	r2, r7, #24
 801ddc6:	d03a      	beq.n	801de3e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801ddc8:	2aff      	cmp	r2, #255	; 0xff
 801ddca:	b2d6      	uxtb	r6, r2
 801ddcc:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801ddd0:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801ddd4:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801ddd8:	b2ff      	uxtb	r7, r7
 801ddda:	d037      	beq.n	801de4c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801dddc:	fa1f f986 	uxth.w	r9, r6
 801dde0:	4472      	add	r2, lr
 801dde2:	43f6      	mvns	r6, r6
 801dde4:	f815 8002 	ldrb.w	r8, [r5, r2]
 801dde8:	fb17 f709 	smulbb	r7, r7, r9
 801ddec:	fb1a fa09 	smulbb	sl, sl, r9
 801ddf0:	b2f6      	uxtb	r6, r6
 801ddf2:	fb1b f909 	smulbb	r9, fp, r9
 801ddf6:	fb08 7706 	mla	r7, r8, r6, r7
 801ddfa:	b2bf      	uxth	r7, r7
 801ddfc:	f107 0801 	add.w	r8, r7, #1
 801de00:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801de04:	123f      	asrs	r7, r7, #8
 801de06:	54af      	strb	r7, [r5, r2]
 801de08:	442a      	add	r2, r5
 801de0a:	7857      	ldrb	r7, [r2, #1]
 801de0c:	fb07 aa06 	mla	sl, r7, r6, sl
 801de10:	fa1f fa8a 	uxth.w	sl, sl
 801de14:	f10a 0701 	add.w	r7, sl, #1
 801de18:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801de1c:	7897      	ldrb	r7, [r2, #2]
 801de1e:	fb07 9906 	mla	r9, r7, r6, r9
 801de22:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801de26:	fa1f f989 	uxth.w	r9, r9
 801de2a:	f882 a001 	strb.w	sl, [r2, #1]
 801de2e:	f109 0601 	add.w	r6, r9, #1
 801de32:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801de36:	ea4f 2929 	mov.w	r9, r9, asr #8
 801de3a:	f882 9002 	strb.w	r9, [r2, #2]
 801de3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801de40:	f10e 0e01 	add.w	lr, lr, #1
 801de44:	4414      	add	r4, r2
 801de46:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801de48:	4410      	add	r0, r2
 801de4a:	e766      	b.n	801dd1a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801de4c:	4472      	add	r2, lr
 801de4e:	54af      	strb	r7, [r5, r2]
 801de50:	442a      	add	r2, r5
 801de52:	f882 a001 	strb.w	sl, [r2, #1]
 801de56:	f882 b002 	strb.w	fp, [r2, #2]
 801de5a:	e7f0      	b.n	801de3e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801de5c:	f806 7c03 	strb.w	r7, [r6, #-3]
 801de60:	f806 9c02 	strb.w	r9, [r6, #-2]
 801de64:	f806 bc01 	strb.w	fp, [r6, #-1]
 801de68:	e74d      	b.n	801dd06 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801de6a:	b003      	add	sp, #12
 801de6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801de70 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801de70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de74:	b087      	sub	sp, #28
 801de76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801de7a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801de7c:	9204      	str	r2, [sp, #16]
 801de7e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801de82:	6860      	ldr	r0, [r4, #4]
 801de84:	9205      	str	r2, [sp, #20]
 801de86:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801de8a:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 801de8e:	9101      	str	r1, [sp, #4]
 801de90:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801de94:	fb00 2505 	mla	r5, r0, r5, r2
 801de98:	6822      	ldr	r2, [r4, #0]
 801de9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801de9e:	4415      	add	r5, r2
 801dea0:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801dea4:	3201      	adds	r2, #1
 801dea6:	f022 0201 	bic.w	r2, r2, #1
 801deaa:	9202      	str	r2, [sp, #8]
 801deac:	f8dc 2000 	ldr.w	r2, [ip]
 801deb0:	9203      	str	r2, [sp, #12]
 801deb2:	9a01      	ldr	r2, [sp, #4]
 801deb4:	2a00      	cmp	r2, #0
 801deb6:	dc03      	bgt.n	801dec0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801deb8:	9a04      	ldr	r2, [sp, #16]
 801deba:	2a00      	cmp	r2, #0
 801debc:	f340 8135 	ble.w	801e12a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801dec0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801dec2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801dec6:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801deca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801decc:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801ded0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ded4:	2b00      	cmp	r3, #0
 801ded6:	dd0d      	ble.n	801def4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801ded8:	1422      	asrs	r2, r4, #16
 801deda:	d405      	bmi.n	801dee8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801dedc:	4542      	cmp	r2, r8
 801dede:	da03      	bge.n	801dee8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801dee0:	1402      	asrs	r2, r0, #16
 801dee2:	d401      	bmi.n	801dee8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801dee4:	42ba      	cmp	r2, r7
 801dee6:	db06      	blt.n	801def6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801dee8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801deea:	4474      	add	r4, lr
 801deec:	3b01      	subs	r3, #1
 801deee:	3503      	adds	r5, #3
 801def0:	4410      	add	r0, r2
 801def2:	e7ef      	b.n	801ded4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801def4:	d077      	beq.n	801dfe6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801def6:	1e5a      	subs	r2, r3, #1
 801def8:	fb0e 4602 	mla	r6, lr, r2, r4
 801defc:	1436      	asrs	r6, r6, #16
 801defe:	d469      	bmi.n	801dfd4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801df00:	4546      	cmp	r6, r8
 801df02:	da67      	bge.n	801dfd4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801df04:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801df06:	fb06 0202 	mla	r2, r6, r2, r0
 801df0a:	1412      	asrs	r2, r2, #16
 801df0c:	d462      	bmi.n	801dfd4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801df0e:	42ba      	cmp	r2, r7
 801df10:	da60      	bge.n	801dfd4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801df12:	1cee      	adds	r6, r5, #3
 801df14:	4699      	mov	r9, r3
 801df16:	f1b9 0f00 	cmp.w	r9, #0
 801df1a:	dd5f      	ble.n	801dfdc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801df1c:	1422      	asrs	r2, r4, #16
 801df1e:	9902      	ldr	r1, [sp, #8]
 801df20:	1407      	asrs	r7, r0, #16
 801df22:	fb01 2707 	mla	r7, r1, r7, r2
 801df26:	9903      	ldr	r1, [sp, #12]
 801df28:	087a      	lsrs	r2, r7, #1
 801df2a:	5c8a      	ldrb	r2, [r1, r2]
 801df2c:	07f9      	lsls	r1, r7, #31
 801df2e:	bf54      	ite	pl
 801df30:	f002 020f 	andpl.w	r2, r2, #15
 801df34:	1112      	asrmi	r2, r2, #4
 801df36:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801df3a:	b2d2      	uxtb	r2, r2
 801df3c:	2a00      	cmp	r2, #0
 801df3e:	d042      	beq.n	801dfc6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801df40:	497b      	ldr	r1, [pc, #492]	; (801e130 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801df42:	680f      	ldr	r7, [r1, #0]
 801df44:	9905      	ldr	r1, [sp, #20]
 801df46:	fa5f fb87 	uxtb.w	fp, r7
 801df4a:	434a      	muls	r2, r1
 801df4c:	f102 0801 	add.w	r8, r2, #1
 801df50:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801df54:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801df58:	1212      	asrs	r2, r2, #8
 801df5a:	fa1f fa82 	uxth.w	sl, r2
 801df5e:	43d2      	mvns	r2, r2
 801df60:	fb1b fb0a 	smulbb	fp, fp, sl
 801df64:	b2d2      	uxtb	r2, r2
 801df66:	fb08 b802 	mla	r8, r8, r2, fp
 801df6a:	fa1f f888 	uxth.w	r8, r8
 801df6e:	f108 0b01 	add.w	fp, r8, #1
 801df72:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801df76:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801df7a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801df7e:	fb1b fb0a 	smulbb	fp, fp, sl
 801df82:	ea4f 2828 	mov.w	r8, r8, asr #8
 801df86:	fb17 fa0a 	smulbb	sl, r7, sl
 801df8a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801df8e:	f806 8c03 	strb.w	r8, [r6, #-3]
 801df92:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801df96:	fb07 aa02 	mla	sl, r7, r2, sl
 801df9a:	fb08 b802 	mla	r8, r8, r2, fp
 801df9e:	fa1f fa8a 	uxth.w	sl, sl
 801dfa2:	fa1f f888 	uxth.w	r8, r8
 801dfa6:	f10a 0701 	add.w	r7, sl, #1
 801dfaa:	f108 0b01 	add.w	fp, r8, #1
 801dfae:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801dfb2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801dfb6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801dfba:	ea4f 2828 	mov.w	r8, r8, asr #8
 801dfbe:	f806 ac01 	strb.w	sl, [r6, #-1]
 801dfc2:	f806 8c02 	strb.w	r8, [r6, #-2]
 801dfc6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801dfc8:	4474      	add	r4, lr
 801dfca:	3603      	adds	r6, #3
 801dfcc:	f109 39ff 	add.w	r9, r9, #4294967295
 801dfd0:	4410      	add	r0, r2
 801dfd2:	e7a0      	b.n	801df16 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801dfd4:	2700      	movs	r7, #0
 801dfd6:	1bda      	subs	r2, r3, r7
 801dfd8:	2a00      	cmp	r2, #0
 801dfda:	dc3e      	bgt.n	801e05a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801dfdc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dfe0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dfe4:	441d      	add	r5, r3
 801dfe6:	9b01      	ldr	r3, [sp, #4]
 801dfe8:	2b00      	cmp	r3, #0
 801dfea:	f340 809e 	ble.w	801e12a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801dfee:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dff2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dff4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dff8:	eeb0 6a62 	vmov.f32	s12, s5
 801dffc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e000:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e004:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e008:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801e00c:	eeb0 6a43 	vmov.f32	s12, s6
 801e010:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e014:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801e018:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e01c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e020:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e024:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e028:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e02c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e030:	ee12 2a90 	vmov	r2, s5
 801e034:	eef0 2a47 	vmov.f32	s5, s14
 801e038:	fb92 fef3 	sdiv	lr, r2, r3
 801e03c:	ee13 2a10 	vmov	r2, s6
 801e040:	eeb0 3a67 	vmov.f32	s6, s15
 801e044:	fb92 f3f3 	sdiv	r3, r2, r3
 801e048:	9314      	str	r3, [sp, #80]	; 0x50
 801e04a:	9b01      	ldr	r3, [sp, #4]
 801e04c:	9a04      	ldr	r2, [sp, #16]
 801e04e:	3b01      	subs	r3, #1
 801e050:	9301      	str	r3, [sp, #4]
 801e052:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e054:	bf08      	it	eq
 801e056:	4613      	moveq	r3, r2
 801e058:	e72b      	b.n	801deb2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801e05a:	1426      	asrs	r6, r4, #16
 801e05c:	d460      	bmi.n	801e120 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801e05e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801e062:	42b2      	cmp	r2, r6
 801e064:	dd5c      	ble.n	801e120 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801e066:	ea5f 4820 	movs.w	r8, r0, asr #16
 801e06a:	d459      	bmi.n	801e120 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801e06c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801e070:	4542      	cmp	r2, r8
 801e072:	dd55      	ble.n	801e120 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801e074:	9a02      	ldr	r2, [sp, #8]
 801e076:	9903      	ldr	r1, [sp, #12]
 801e078:	fb08 6602 	mla	r6, r8, r2, r6
 801e07c:	0872      	lsrs	r2, r6, #1
 801e07e:	07f6      	lsls	r6, r6, #31
 801e080:	5c8a      	ldrb	r2, [r1, r2]
 801e082:	bf54      	ite	pl
 801e084:	f002 020f 	andpl.w	r2, r2, #15
 801e088:	1112      	asrmi	r2, r2, #4
 801e08a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e08e:	b2d2      	uxtb	r2, r2
 801e090:	2a00      	cmp	r2, #0
 801e092:	d045      	beq.n	801e120 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801e094:	4926      	ldr	r1, [pc, #152]	; (801e130 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801e096:	f8d1 8000 	ldr.w	r8, [r1]
 801e09a:	9905      	ldr	r1, [sp, #20]
 801e09c:	fa5f fb88 	uxtb.w	fp, r8
 801e0a0:	434a      	muls	r2, r1
 801e0a2:	1c56      	adds	r6, r2, #1
 801e0a4:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801e0a8:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801e0ac:	1212      	asrs	r2, r2, #8
 801e0ae:	f815 9006 	ldrb.w	r9, [r5, r6]
 801e0b2:	fa1f fa82 	uxth.w	sl, r2
 801e0b6:	43d2      	mvns	r2, r2
 801e0b8:	fb1b fb0a 	smulbb	fp, fp, sl
 801e0bc:	b2d2      	uxtb	r2, r2
 801e0be:	fb09 b902 	mla	r9, r9, r2, fp
 801e0c2:	fa1f f989 	uxth.w	r9, r9
 801e0c6:	f109 0b01 	add.w	fp, r9, #1
 801e0ca:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e0ce:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801e0d2:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801e0d6:	fb1b fb0a 	smulbb	fp, fp, sl
 801e0da:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e0de:	fb18 fa0a 	smulbb	sl, r8, sl
 801e0e2:	f805 9006 	strb.w	r9, [r5, r6]
 801e0e6:	442e      	add	r6, r5
 801e0e8:	f896 8002 	ldrb.w	r8, [r6, #2]
 801e0ec:	f896 9001 	ldrb.w	r9, [r6, #1]
 801e0f0:	fb08 aa02 	mla	sl, r8, r2, sl
 801e0f4:	fb09 b902 	mla	r9, r9, r2, fp
 801e0f8:	fa1f fa8a 	uxth.w	sl, sl
 801e0fc:	fa1f f989 	uxth.w	r9, r9
 801e100:	f10a 0801 	add.w	r8, sl, #1
 801e104:	f109 0b01 	add.w	fp, r9, #1
 801e108:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801e10c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e110:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e114:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e118:	f886 a002 	strb.w	sl, [r6, #2]
 801e11c:	f886 9001 	strb.w	r9, [r6, #1]
 801e120:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e122:	4474      	add	r4, lr
 801e124:	3701      	adds	r7, #1
 801e126:	4410      	add	r0, r2
 801e128:	e755      	b.n	801dfd6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801e12a:	b007      	add	sp, #28
 801e12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e130:	200567a8 	.word	0x200567a8

0801e134 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e138:	b085      	sub	sp, #20
 801e13a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e13e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e140:	9203      	str	r2, [sp, #12]
 801e142:	6860      	ldr	r0, [r4, #4]
 801e144:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801e148:	9100      	str	r1, [sp, #0]
 801e14a:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 801e14e:	fb00 2606 	mla	r6, r0, r6, r2
 801e152:	6822      	ldr	r2, [r4, #0]
 801e154:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e158:	4416      	add	r6, r2
 801e15a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801e15e:	3201      	adds	r2, #1
 801e160:	f022 0201 	bic.w	r2, r2, #1
 801e164:	9201      	str	r2, [sp, #4]
 801e166:	f8dc 2000 	ldr.w	r2, [ip]
 801e16a:	9202      	str	r2, [sp, #8]
 801e16c:	9a00      	ldr	r2, [sp, #0]
 801e16e:	2a00      	cmp	r2, #0
 801e170:	dc03      	bgt.n	801e17a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801e172:	9a03      	ldr	r2, [sp, #12]
 801e174:	2a00      	cmp	r2, #0
 801e176:	f340 8140 	ble.w	801e3fa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801e17a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e17c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801e180:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801e184:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e186:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801e18a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801e18e:	2b00      	cmp	r3, #0
 801e190:	dd0e      	ble.n	801e1b0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e192:	142a      	asrs	r2, r5, #16
 801e194:	d405      	bmi.n	801e1a2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e196:	4572      	cmp	r2, lr
 801e198:	da03      	bge.n	801e1a2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e19a:	1422      	asrs	r2, r4, #16
 801e19c:	d401      	bmi.n	801e1a2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e19e:	42ba      	cmp	r2, r7
 801e1a0:	db07      	blt.n	801e1b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e1a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e1a4:	3b01      	subs	r3, #1
 801e1a6:	3603      	adds	r6, #3
 801e1a8:	4415      	add	r5, r2
 801e1aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e1ac:	4414      	add	r4, r2
 801e1ae:	e7ee      	b.n	801e18e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801e1b0:	d072      	beq.n	801e298 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e1b2:	1e5a      	subs	r2, r3, #1
 801e1b4:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e1b6:	fb00 5002 	mla	r0, r0, r2, r5
 801e1ba:	1400      	asrs	r0, r0, #16
 801e1bc:	d463      	bmi.n	801e286 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e1be:	4570      	cmp	r0, lr
 801e1c0:	da61      	bge.n	801e286 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e1c2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801e1c4:	fb00 4202 	mla	r2, r0, r2, r4
 801e1c8:	1412      	asrs	r2, r2, #16
 801e1ca:	d45c      	bmi.n	801e286 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e1cc:	42ba      	cmp	r2, r7
 801e1ce:	da5a      	bge.n	801e286 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e1d0:	1cf0      	adds	r0, r6, #3
 801e1d2:	469a      	mov	sl, r3
 801e1d4:	f1ba 0f00 	cmp.w	sl, #0
 801e1d8:	dd59      	ble.n	801e28e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801e1da:	142a      	asrs	r2, r5, #16
 801e1dc:	9901      	ldr	r1, [sp, #4]
 801e1de:	1427      	asrs	r7, r4, #16
 801e1e0:	fb01 2707 	mla	r7, r1, r7, r2
 801e1e4:	9902      	ldr	r1, [sp, #8]
 801e1e6:	087a      	lsrs	r2, r7, #1
 801e1e8:	5c8a      	ldrb	r2, [r1, r2]
 801e1ea:	07f9      	lsls	r1, r7, #31
 801e1ec:	bf54      	ite	pl
 801e1ee:	f002 020f 	andpl.w	r2, r2, #15
 801e1f2:	1112      	asrmi	r2, r2, #4
 801e1f4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e1f8:	b2d2      	uxtb	r2, r2
 801e1fa:	2a00      	cmp	r2, #0
 801e1fc:	d03b      	beq.n	801e276 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801e1fe:	4980      	ldr	r1, [pc, #512]	; (801e400 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801e200:	2aff      	cmp	r2, #255	; 0xff
 801e202:	680f      	ldr	r7, [r1, #0]
 801e204:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801e208:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801e20c:	b2ff      	uxtb	r7, r7
 801e20e:	f000 80ed 	beq.w	801e3ec <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801e212:	fa1f f882 	uxth.w	r8, r2
 801e216:	43d2      	mvns	r2, r2
 801e218:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801e21c:	fb17 f708 	smulbb	r7, r7, r8
 801e220:	b2d2      	uxtb	r2, r2
 801e222:	fb19 f908 	smulbb	r9, r9, r8
 801e226:	fb0e 7702 	mla	r7, lr, r2, r7
 801e22a:	fb1b f808 	smulbb	r8, fp, r8
 801e22e:	b2bf      	uxth	r7, r7
 801e230:	f107 0e01 	add.w	lr, r7, #1
 801e234:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801e238:	123f      	asrs	r7, r7, #8
 801e23a:	f800 7c03 	strb.w	r7, [r0, #-3]
 801e23e:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801e242:	fb07 9902 	mla	r9, r7, r2, r9
 801e246:	fa1f f989 	uxth.w	r9, r9
 801e24a:	f109 0701 	add.w	r7, r9, #1
 801e24e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801e252:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801e256:	fb07 8802 	mla	r8, r7, r2, r8
 801e25a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e25e:	fa1f f888 	uxth.w	r8, r8
 801e262:	f800 9c02 	strb.w	r9, [r0, #-2]
 801e266:	f108 0201 	add.w	r2, r8, #1
 801e26a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801e26e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e272:	f800 8c01 	strb.w	r8, [r0, #-1]
 801e276:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e278:	3003      	adds	r0, #3
 801e27a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e27e:	4415      	add	r5, r2
 801e280:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e282:	4414      	add	r4, r2
 801e284:	e7a6      	b.n	801e1d4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801e286:	2700      	movs	r7, #0
 801e288:	1bda      	subs	r2, r3, r7
 801e28a:	2a00      	cmp	r2, #0
 801e28c:	dc40      	bgt.n	801e310 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801e28e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e292:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e296:	441e      	add	r6, r3
 801e298:	9b00      	ldr	r3, [sp, #0]
 801e29a:	2b00      	cmp	r3, #0
 801e29c:	f340 80ad 	ble.w	801e3fa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801e2a0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e2a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e2a6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e2aa:	eeb0 6a62 	vmov.f32	s12, s5
 801e2ae:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e2b2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e2b6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e2ba:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e2be:	eeb0 6a43 	vmov.f32	s12, s6
 801e2c2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e2c6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e2ca:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e2ce:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e2d2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e2d6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e2da:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e2de:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e2e2:	ee12 2a90 	vmov	r2, s5
 801e2e6:	eef0 2a47 	vmov.f32	s5, s14
 801e2ea:	fb92 f3f3 	sdiv	r3, r2, r3
 801e2ee:	ee13 2a10 	vmov	r2, s6
 801e2f2:	9311      	str	r3, [sp, #68]	; 0x44
 801e2f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e2f6:	eeb0 3a67 	vmov.f32	s6, s15
 801e2fa:	fb92 f3f3 	sdiv	r3, r2, r3
 801e2fe:	9312      	str	r3, [sp, #72]	; 0x48
 801e300:	9b00      	ldr	r3, [sp, #0]
 801e302:	9a03      	ldr	r2, [sp, #12]
 801e304:	3b01      	subs	r3, #1
 801e306:	9300      	str	r3, [sp, #0]
 801e308:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e30a:	bf08      	it	eq
 801e30c:	4613      	moveq	r3, r2
 801e30e:	e72d      	b.n	801e16c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801e310:	1428      	asrs	r0, r5, #16
 801e312:	d45c      	bmi.n	801e3ce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e314:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801e318:	4282      	cmp	r2, r0
 801e31a:	dd58      	ble.n	801e3ce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e31c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801e320:	d455      	bmi.n	801e3ce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e322:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801e326:	4572      	cmp	r2, lr
 801e328:	dd51      	ble.n	801e3ce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e32a:	9a01      	ldr	r2, [sp, #4]
 801e32c:	9902      	ldr	r1, [sp, #8]
 801e32e:	fb0e 0002 	mla	r0, lr, r2, r0
 801e332:	0842      	lsrs	r2, r0, #1
 801e334:	07c0      	lsls	r0, r0, #31
 801e336:	5c8a      	ldrb	r2, [r1, r2]
 801e338:	bf54      	ite	pl
 801e33a:	f002 020f 	andpl.w	r2, r2, #15
 801e33e:	1112      	asrmi	r2, r2, #4
 801e340:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e344:	b2d2      	uxtb	r2, r2
 801e346:	2a00      	cmp	r2, #0
 801e348:	d041      	beq.n	801e3ce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e34a:	492d      	ldr	r1, [pc, #180]	; (801e400 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801e34c:	2aff      	cmp	r2, #255	; 0xff
 801e34e:	6808      	ldr	r0, [r1, #0]
 801e350:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801e354:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801e358:	fa5f fe80 	uxtb.w	lr, r0
 801e35c:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801e360:	d03b      	beq.n	801e3da <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801e362:	fa1f f982 	uxth.w	r9, r2
 801e366:	4438      	add	r0, r7
 801e368:	43d2      	mvns	r2, r2
 801e36a:	f816 8000 	ldrb.w	r8, [r6, r0]
 801e36e:	fb1e fe09 	smulbb	lr, lr, r9
 801e372:	fb1a fa09 	smulbb	sl, sl, r9
 801e376:	b2d2      	uxtb	r2, r2
 801e378:	fb1b f909 	smulbb	r9, fp, r9
 801e37c:	fb08 ee02 	mla	lr, r8, r2, lr
 801e380:	fa1f fe8e 	uxth.w	lr, lr
 801e384:	f10e 0801 	add.w	r8, lr, #1
 801e388:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801e38c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e390:	f806 e000 	strb.w	lr, [r6, r0]
 801e394:	4430      	add	r0, r6
 801e396:	f890 e001 	ldrb.w	lr, [r0, #1]
 801e39a:	fb0e aa02 	mla	sl, lr, r2, sl
 801e39e:	fa1f fa8a 	uxth.w	sl, sl
 801e3a2:	f10a 0e01 	add.w	lr, sl, #1
 801e3a6:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801e3aa:	f890 e002 	ldrb.w	lr, [r0, #2]
 801e3ae:	fb0e 9902 	mla	r9, lr, r2, r9
 801e3b2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e3b6:	fa1f f989 	uxth.w	r9, r9
 801e3ba:	f880 a001 	strb.w	sl, [r0, #1]
 801e3be:	f109 0201 	add.w	r2, r9, #1
 801e3c2:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801e3c6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e3ca:	f880 9002 	strb.w	r9, [r0, #2]
 801e3ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e3d0:	3701      	adds	r7, #1
 801e3d2:	4415      	add	r5, r2
 801e3d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e3d6:	4414      	add	r4, r2
 801e3d8:	e756      	b.n	801e288 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801e3da:	4438      	add	r0, r7
 801e3dc:	f806 e000 	strb.w	lr, [r6, r0]
 801e3e0:	4430      	add	r0, r6
 801e3e2:	f880 a001 	strb.w	sl, [r0, #1]
 801e3e6:	f880 b002 	strb.w	fp, [r0, #2]
 801e3ea:	e7f0      	b.n	801e3ce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e3ec:	f800 7c03 	strb.w	r7, [r0, #-3]
 801e3f0:	f800 9c02 	strb.w	r9, [r0, #-2]
 801e3f4:	f800 bc01 	strb.w	fp, [r0, #-1]
 801e3f8:	e73d      	b.n	801e276 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801e3fa:	b005      	add	sp, #20
 801e3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e400:	200567a8 	.word	0x200567a8

0801e404 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801e404:	4770      	bx	lr

0801e406 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801e406:	4770      	bx	lr

0801e408 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801e408:	4770      	bx	lr

0801e40a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801e40a:	4770      	bx	lr

0801e40c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801e40c:	4770      	bx	lr

0801e40e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801e40e:	4770      	bx	lr

0801e410 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801e410:	4770      	bx	lr

0801e412 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801e412:	4770      	bx	lr

0801e414 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801e414:	4770      	bx	lr

0801e416 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801e416:	4770      	bx	lr

0801e418 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801e418:	4770      	bx	lr

0801e41a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801e41a:	4770      	bx	lr

0801e41c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801e41c:	4770      	bx	lr

0801e41e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801e41e:	4770      	bx	lr

0801e420 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801e420:	4770      	bx	lr

0801e422 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801e422:	4770      	bx	lr

0801e424 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801e424:	4770      	bx	lr

0801e426 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801e426:	4770      	bx	lr

0801e428 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801e428:	4770      	bx	lr

0801e42a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801e42a:	4770      	bx	lr

0801e42c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801e42c:	2bff      	cmp	r3, #255	; 0xff
 801e42e:	b508      	push	{r3, lr}
 801e430:	d04f      	beq.n	801e4d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801e432:	2a2c      	cmp	r2, #44	; 0x2c
 801e434:	d032      	beq.n	801e49c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801e436:	d80f      	bhi.n	801e458 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801e438:	2a08      	cmp	r2, #8
 801e43a:	d046      	beq.n	801e4ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801e43c:	d805      	bhi.n	801e44a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801e43e:	2a04      	cmp	r2, #4
 801e440:	d041      	beq.n	801e4c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801e442:	2a05      	cmp	r2, #5
 801e444:	d03d      	beq.n	801e4c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801e446:	2000      	movs	r0, #0
 801e448:	e027      	b.n	801e49a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e44a:	2a0a      	cmp	r2, #10
 801e44c:	d03d      	beq.n	801e4ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801e44e:	d301      	bcc.n	801e454 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801e450:	2a0b      	cmp	r2, #11
 801e452:	d1f8      	bne.n	801e446 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e454:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801e456:	e020      	b.n	801e49a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e458:	2a30      	cmp	r2, #48	; 0x30
 801e45a:	d038      	beq.n	801e4ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801e45c:	d808      	bhi.n	801e470 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801e45e:	2a2e      	cmp	r2, #46	; 0x2e
 801e460:	684b      	ldr	r3, [r1, #4]
 801e462:	d029      	beq.n	801e4b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801e464:	d90b      	bls.n	801e47e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801e466:	781b      	ldrb	r3, [r3, #0]
 801e468:	2b00      	cmp	r3, #0
 801e46a:	d1ec      	bne.n	801e446 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e46c:	6a00      	ldr	r0, [r0, #32]
 801e46e:	e014      	b.n	801e49a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e470:	2a32      	cmp	r2, #50	; 0x32
 801e472:	d02c      	beq.n	801e4ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801e474:	d301      	bcc.n	801e47a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801e476:	2a33      	cmp	r2, #51	; 0x33
 801e478:	d1e5      	bne.n	801e446 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e47a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801e47c:	e00d      	b.n	801e49a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e47e:	781b      	ldrb	r3, [r3, #0]
 801e480:	2b01      	cmp	r3, #1
 801e482:	d009      	beq.n	801e498 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801e484:	d3f2      	bcc.n	801e46c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801e486:	2b02      	cmp	r3, #2
 801e488:	d1dd      	bne.n	801e446 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e48a:	4b39      	ldr	r3, [pc, #228]	; (801e570 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801e48c:	f240 4186 	movw	r1, #1158	; 0x486
 801e490:	4a38      	ldr	r2, [pc, #224]	; (801e574 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801e492:	4839      	ldr	r0, [pc, #228]	; (801e578 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801e494:	f008 fa94 	bl	80269c0 <__assert_func>
 801e498:	6900      	ldr	r0, [r0, #16]
 801e49a:	bd08      	pop	{r3, pc}
 801e49c:	684b      	ldr	r3, [r1, #4]
 801e49e:	781b      	ldrb	r3, [r3, #0]
 801e4a0:	2b01      	cmp	r3, #1
 801e4a2:	d007      	beq.n	801e4b4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801e4a4:	d30b      	bcc.n	801e4be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801e4a6:	2b02      	cmp	r3, #2
 801e4a8:	d1cd      	bne.n	801e446 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e4aa:	4b31      	ldr	r3, [pc, #196]	; (801e570 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801e4ac:	f240 4192 	movw	r1, #1170	; 0x492
 801e4b0:	4a30      	ldr	r2, [pc, #192]	; (801e574 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801e4b2:	e7ee      	b.n	801e492 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e4b4:	6880      	ldr	r0, [r0, #8]
 801e4b6:	e7f0      	b.n	801e49a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e4b8:	781b      	ldrb	r3, [r3, #0]
 801e4ba:	2b00      	cmp	r3, #0
 801e4bc:	d1c3      	bne.n	801e446 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e4be:	6980      	ldr	r0, [r0, #24]
 801e4c0:	e7eb      	b.n	801e49a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e4c2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801e4c4:	e7e9      	b.n	801e49a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e4c6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801e4c8:	e7e7      	b.n	801e49a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e4ca:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801e4cc:	e7e5      	b.n	801e49a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e4ce:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801e4d0:	e7e3      	b.n	801e49a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e4d2:	2a2c      	cmp	r2, #44	; 0x2c
 801e4d4:	d030      	beq.n	801e538 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801e4d6:	d80f      	bhi.n	801e4f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801e4d8:	2a08      	cmp	r2, #8
 801e4da:	d044      	beq.n	801e566 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801e4dc:	d805      	bhi.n	801e4ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801e4de:	2a04      	cmp	r2, #4
 801e4e0:	d03f      	beq.n	801e562 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801e4e2:	2a05      	cmp	r2, #5
 801e4e4:	d1af      	bne.n	801e446 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e4e6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801e4e8:	e7d7      	b.n	801e49a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e4ea:	2a0a      	cmp	r2, #10
 801e4ec:	d03b      	beq.n	801e566 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801e4ee:	d301      	bcc.n	801e4f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801e4f0:	2a0b      	cmp	r2, #11
 801e4f2:	d1a8      	bne.n	801e446 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e4f4:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801e4f6:	e7d0      	b.n	801e49a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e4f8:	2a30      	cmp	r2, #48	; 0x30
 801e4fa:	d036      	beq.n	801e56a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801e4fc:	d808      	bhi.n	801e510 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801e4fe:	2a2e      	cmp	r2, #46	; 0x2e
 801e500:	684b      	ldr	r3, [r1, #4]
 801e502:	d028      	beq.n	801e556 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801e504:	d90b      	bls.n	801e51e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801e506:	781b      	ldrb	r3, [r3, #0]
 801e508:	2b00      	cmp	r3, #0
 801e50a:	d19c      	bne.n	801e446 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e50c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801e50e:	e7c4      	b.n	801e49a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e510:	2a32      	cmp	r2, #50	; 0x32
 801e512:	d02a      	beq.n	801e56a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801e514:	d301      	bcc.n	801e51a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801e516:	2a33      	cmp	r2, #51	; 0x33
 801e518:	d195      	bne.n	801e446 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e51a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801e51c:	e7bd      	b.n	801e49a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e51e:	781b      	ldrb	r3, [r3, #0]
 801e520:	2b01      	cmp	r3, #1
 801e522:	d007      	beq.n	801e534 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801e524:	d3f2      	bcc.n	801e50c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801e526:	2b02      	cmp	r3, #2
 801e528:	d18d      	bne.n	801e446 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e52a:	4b11      	ldr	r3, [pc, #68]	; (801e570 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801e52c:	f240 41c3 	movw	r1, #1219	; 0x4c3
 801e530:	4a10      	ldr	r2, [pc, #64]	; (801e574 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801e532:	e7ae      	b.n	801e492 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e534:	6940      	ldr	r0, [r0, #20]
 801e536:	e7b0      	b.n	801e49a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e538:	684b      	ldr	r3, [r1, #4]
 801e53a:	781b      	ldrb	r3, [r3, #0]
 801e53c:	2b01      	cmp	r3, #1
 801e53e:	d008      	beq.n	801e552 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801e540:	d30d      	bcc.n	801e55e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801e542:	2b02      	cmp	r3, #2
 801e544:	f47f af7f 	bne.w	801e446 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e548:	4b09      	ldr	r3, [pc, #36]	; (801e570 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801e54a:	f240 41cf 	movw	r1, #1231	; 0x4cf
 801e54e:	4a09      	ldr	r2, [pc, #36]	; (801e574 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801e550:	e79f      	b.n	801e492 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e552:	68c0      	ldr	r0, [r0, #12]
 801e554:	e7a1      	b.n	801e49a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e556:	781b      	ldrb	r3, [r3, #0]
 801e558:	2b00      	cmp	r3, #0
 801e55a:	f47f af74 	bne.w	801e446 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e55e:	69c0      	ldr	r0, [r0, #28]
 801e560:	e79b      	b.n	801e49a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e562:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801e564:	e799      	b.n	801e49a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e566:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801e568:	e797      	b.n	801e49a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e56a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801e56c:	e795      	b.n	801e49a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e56e:	bf00      	nop
 801e570:	0802e89d 	.word	0x0802e89d
 801e574:	0802f0c0 	.word	0x0802f0c0
 801e578:	0802e8e9 	.word	0x0802e8e9

0801e57c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801e57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e580:	b085      	sub	sp, #20
 801e582:	f89d e03c 	ldrb.w	lr, [sp, #60]	; 0x3c
 801e586:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e588:	f1be 0f00 	cmp.w	lr, #0
 801e58c:	f000 8114 	beq.w	801e7b8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801e590:	f9b3 c004 	ldrsh.w	ip, [r3, #4]
 801e594:	f1bc 0f00 	cmp.w	ip, #0
 801e598:	f340 810e 	ble.w	801e7b8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801e59c:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801e5a0:	2800      	cmp	r0, #0
 801e5a2:	f340 8109 	ble.w	801e7b8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801e5a6:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
 801e5aa:	4350      	muls	r0, r2
 801e5ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e5b0:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 801e5b4:	ea4f 2a14 	mov.w	sl, r4, lsr #8
 801e5b8:	eba2 060c 	sub.w	r6, r2, ip
 801e5bc:	fb02 3305 	mla	r3, r2, r5, r3
 801e5c0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e5c4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801e5c8:	fa5f f88b 	uxtb.w	r8, fp
 801e5cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e5d0:	fa5f f78a 	uxtb.w	r7, sl
 801e5d4:	4419      	add	r1, r3
 801e5d6:	fa5f f984 	uxtb.w	r9, r4
 801e5da:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e5de:	4408      	add	r0, r1
 801e5e0:	ea4f 034c 	mov.w	r3, ip, lsl #1
 801e5e4:	d03e      	beq.n	801e664 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe8>
 801e5e6:	fa1f f58e 	uxth.w	r5, lr
 801e5ea:	f1ce 02ff 	rsb	r2, lr, #255	; 0xff
 801e5ee:	4463      	add	r3, ip
 801e5f0:	fb08 f405 	mul.w	r4, r8, r5
 801e5f4:	b292      	uxth	r2, r2
 801e5f6:	436f      	muls	r7, r5
 801e5f8:	fb09 f505 	mul.w	r5, r9, r5
 801e5fc:	4281      	cmp	r1, r0
 801e5fe:	f080 80db 	bcs.w	801e7b8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801e602:	eb01 0c03 	add.w	ip, r1, r3
 801e606:	458c      	cmp	ip, r1
 801e608:	f101 0e03 	add.w	lr, r1, #3
 801e60c:	d928      	bls.n	801e660 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 801e60e:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801e612:	fb11 f102 	smulbb	r1, r1, r2
 801e616:	4429      	add	r1, r5
 801e618:	b289      	uxth	r1, r1
 801e61a:	f101 0801 	add.w	r8, r1, #1
 801e61e:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801e622:	1209      	asrs	r1, r1, #8
 801e624:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801e628:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801e62c:	fb11 f102 	smulbb	r1, r1, r2
 801e630:	4439      	add	r1, r7
 801e632:	b289      	uxth	r1, r1
 801e634:	f101 0801 	add.w	r8, r1, #1
 801e638:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801e63c:	1209      	asrs	r1, r1, #8
 801e63e:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801e642:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801e646:	fb11 f102 	smulbb	r1, r1, r2
 801e64a:	4421      	add	r1, r4
 801e64c:	b289      	uxth	r1, r1
 801e64e:	f101 0801 	add.w	r8, r1, #1
 801e652:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801e656:	1209      	asrs	r1, r1, #8
 801e658:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801e65c:	4671      	mov	r1, lr
 801e65e:	e7d2      	b.n	801e606 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x8a>
 801e660:	4431      	add	r1, r6
 801e662:	e7cb      	b.n	801e5fc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x80>
 801e664:	f012 0503 	ands.w	r5, r2, #3
 801e668:	d00f      	beq.n	801e68a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10e>
 801e66a:	4463      	add	r3, ip
 801e66c:	4281      	cmp	r1, r0
 801e66e:	f080 80a3 	bcs.w	801e7b8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801e672:	18ca      	adds	r2, r1, r3
 801e674:	4291      	cmp	r1, r2
 801e676:	f080 809d 	bcs.w	801e7b4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x238>
 801e67a:	f881 9000 	strb.w	r9, [r1]
 801e67e:	3103      	adds	r1, #3
 801e680:	f801 7c02 	strb.w	r7, [r1, #-2]
 801e684:	f801 8c01 	strb.w	r8, [r1, #-1]
 801e688:	e7f4      	b.n	801e674 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801e68a:	f001 0603 	and.w	r6, r1, #3
 801e68e:	ea47 270b 	orr.w	r7, r7, fp, lsl #8
 801e692:	ea49 2a0a 	orr.w	sl, r9, sl, lsl #8
 801e696:	4463      	add	r3, ip
 801e698:	2e02      	cmp	r6, #2
 801e69a:	b2bf      	uxth	r7, r7
 801e69c:	fa1f fa8a 	uxth.w	sl, sl
 801e6a0:	d017      	beq.n	801e6d2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 801e6a2:	2e03      	cmp	r6, #3
 801e6a4:	d00c      	beq.n	801e6c0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 801e6a6:	2e01      	cmp	r6, #1
 801e6a8:	d11f      	bne.n	801e6ea <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16e>
 801e6aa:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 801e6ae:	460d      	mov	r5, r1
 801e6b0:	4285      	cmp	r5, r0
 801e6b2:	d230      	bcs.n	801e716 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x19a>
 801e6b4:	f885 9000 	strb.w	r9, [r5]
 801e6b8:	f8a5 7001 	strh.w	r7, [r5, #1]
 801e6bc:	4435      	add	r5, r6
 801e6be:	e7f7      	b.n	801e6b0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x134>
 801e6c0:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 801e6c4:	460d      	mov	r5, r1
 801e6c6:	4285      	cmp	r5, r0
 801e6c8:	d20c      	bcs.n	801e6e4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801e6ca:	f885 9000 	strb.w	r9, [r5]
 801e6ce:	4435      	add	r5, r6
 801e6d0:	e7f9      	b.n	801e6c6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 801e6d2:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 801e6d6:	460d      	mov	r5, r1
 801e6d8:	4285      	cmp	r5, r0
 801e6da:	d218      	bcs.n	801e70e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x192>
 801e6dc:	f8a5 a000 	strh.w	sl, [r5]
 801e6e0:	4435      	add	r5, r6
 801e6e2:	e7f9      	b.n	801e6d8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15c>
 801e6e4:	3b01      	subs	r3, #1
 801e6e6:	3101      	adds	r1, #1
 801e6e8:	2501      	movs	r5, #1
 801e6ea:	f003 0603 	and.w	r6, r3, #3
 801e6ee:	2e02      	cmp	r6, #2
 801e6f0:	d021      	beq.n	801e736 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1ba>
 801e6f2:	2e03      	cmp	r6, #3
 801e6f4:	d013      	beq.n	801e71e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1a2>
 801e6f6:	2e01      	cmp	r6, #1
 801e6f8:	d126      	bne.n	801e748 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 801e6fa:	3b01      	subs	r3, #1
 801e6fc:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 801e700:	18ce      	adds	r6, r1, r3
 801e702:	4286      	cmp	r6, r0
 801e704:	d220      	bcs.n	801e748 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 801e706:	f886 8000 	strb.w	r8, [r6]
 801e70a:	443e      	add	r6, r7
 801e70c:	e7f9      	b.n	801e702 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x186>
 801e70e:	3b02      	subs	r3, #2
 801e710:	3102      	adds	r1, #2
 801e712:	2502      	movs	r5, #2
 801e714:	e7e9      	b.n	801e6ea <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16e>
 801e716:	3b03      	subs	r3, #3
 801e718:	3103      	adds	r1, #3
 801e71a:	2500      	movs	r5, #0
 801e71c:	e7e5      	b.n	801e6ea <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16e>
 801e71e:	3b03      	subs	r3, #3
 801e720:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 801e724:	18ce      	adds	r6, r1, r3
 801e726:	4286      	cmp	r6, r0
 801e728:	d20e      	bcs.n	801e748 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 801e72a:	f8a6 a000 	strh.w	sl, [r6]
 801e72e:	f886 8002 	strb.w	r8, [r6, #2]
 801e732:	443e      	add	r6, r7
 801e734:	e7f7      	b.n	801e726 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1aa>
 801e736:	3b02      	subs	r3, #2
 801e738:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 801e73c:	18ce      	adds	r6, r1, r3
 801e73e:	4286      	cmp	r6, r0
 801e740:	d202      	bcs.n	801e748 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1cc>
 801e742:	8037      	strh	r7, [r6, #0]
 801e744:	4466      	add	r6, ip
 801e746:	e7fa      	b.n	801e73e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1c2>
 801e748:	079e      	lsls	r6, r3, #30
 801e74a:	d006      	beq.n	801e75a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x1de>
 801e74c:	4b1c      	ldr	r3, [pc, #112]	; (801e7c0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x244>)
 801e74e:	f44f 713b 	mov.w	r1, #748	; 0x2ec
 801e752:	4a1c      	ldr	r2, [pc, #112]	; (801e7c4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x248>)
 801e754:	481c      	ldr	r0, [pc, #112]	; (801e7c8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x24c>)
 801e756:	f008 f933 	bl	80269c0 <__assert_func>
 801e75a:	b36b      	cbz	r3, 801e7b8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801e75c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 801e760:	109b      	asrs	r3, r3, #2
 801e762:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e766:	2703      	movs	r7, #3
 801e768:	ea44 6604 	orr.w	r6, r4, r4, lsl #24
 801e76c:	9601      	str	r6, [sp, #4]
 801e76e:	0426      	lsls	r6, r4, #16
 801e770:	ea46 2614 	orr.w	r6, r6, r4, lsr #8
 801e774:	ea48 2404 	orr.w	r4, r8, r4, lsl #8
 801e778:	9602      	str	r6, [sp, #8]
 801e77a:	009e      	lsls	r6, r3, #2
 801e77c:	ebc3 0392 	rsb	r3, r3, r2, lsr #2
 801e780:	9403      	str	r4, [sp, #12]
 801e782:	009b      	lsls	r3, r3, #2
 801e784:	4281      	cmp	r1, r0
 801e786:	d217      	bcs.n	801e7b8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x23c>
 801e788:	eb01 0c06 	add.w	ip, r1, r6
 801e78c:	462a      	mov	r2, r5
 801e78e:	4561      	cmp	r1, ip
 801e790:	d20e      	bcs.n	801e7b0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x234>
 801e792:	f10d 0e10 	add.w	lr, sp, #16
 801e796:	1c54      	adds	r4, r2, #1
 801e798:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 801e79c:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 801e7a0:	f841 2b04 	str.w	r2, [r1], #4
 801e7a4:	fb94 f2f7 	sdiv	r2, r4, r7
 801e7a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e7ac:	1aa2      	subs	r2, r4, r2
 801e7ae:	e7ee      	b.n	801e78e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x212>
 801e7b0:	4419      	add	r1, r3
 801e7b2:	e7e7      	b.n	801e784 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x208>
 801e7b4:	4431      	add	r1, r6
 801e7b6:	e759      	b.n	801e66c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf0>
 801e7b8:	b005      	add	sp, #20
 801e7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e7be:	bf00      	nop
 801e7c0:	0802e7b9 	.word	0x0802e7b9
 801e7c4:	0802ee0a 	.word	0x0802ee0a
 801e7c8:	0802e8e9 	.word	0x0802e8e9

0801e7cc <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801e7cc:	b508      	push	{r3, lr}
 801e7ce:	4b06      	ldr	r3, [pc, #24]	; (801e7e8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801e7d0:	8818      	ldrh	r0, [r3, #0]
 801e7d2:	b928      	cbnz	r0, 801e7e0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801e7d4:	4b05      	ldr	r3, [pc, #20]	; (801e7ec <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801e7d6:	214d      	movs	r1, #77	; 0x4d
 801e7d8:	4a05      	ldr	r2, [pc, #20]	; (801e7f0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801e7da:	4806      	ldr	r0, [pc, #24]	; (801e7f4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801e7dc:	f008 f8f0 	bl	80269c0 <__assert_func>
 801e7e0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e7e4:	b280      	uxth	r0, r0
 801e7e6:	bd08      	pop	{r3, pc}
 801e7e8:	2005677a 	.word	0x2005677a
 801e7ec:	0802eb36 	.word	0x0802eb36
 801e7f0:	0802f085 	.word	0x0802f085
 801e7f4:	0802eb78 	.word	0x0802eb78

0801e7f8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801e7f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e7fc:	b08b      	sub	sp, #44	; 0x2c
 801e7fe:	460d      	mov	r5, r1
 801e800:	4616      	mov	r6, r2
 801e802:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 801e806:	f1b8 0f00 	cmp.w	r8, #0
 801e80a:	d045      	beq.n	801e898 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa0>
 801e80c:	6810      	ldr	r0, [r2, #0]
 801e80e:	ac06      	add	r4, sp, #24
 801e810:	6851      	ldr	r1, [r2, #4]
 801e812:	4f50      	ldr	r7, [pc, #320]	; (801e954 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x15c>)
 801e814:	c403      	stmia	r4!, {r0, r1}
 801e816:	6818      	ldr	r0, [r3, #0]
 801e818:	ac08      	add	r4, sp, #32
 801e81a:	6859      	ldr	r1, [r3, #4]
 801e81c:	c403      	stmia	r4!, {r0, r1}
 801e81e:	a806      	add	r0, sp, #24
 801e820:	f7fa fe62 	bl	80194e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e824:	4631      	mov	r1, r6
 801e826:	a808      	add	r0, sp, #32
 801e828:	f7fa fe46 	bl	80194b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e82c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e830:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801e834:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801e838:	6838      	ldr	r0, [r7, #0]
 801e83a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e83e:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801e842:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 801e846:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e84a:	440d      	add	r5, r1
 801e84c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801e850:	440a      	add	r2, r1
 801e852:	f8ad 2020 	strh.w	r2, [sp, #32]
 801e856:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801e85a:	4413      	add	r3, r2
 801e85c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801e860:	6803      	ldr	r3, [r0, #0]
 801e862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e864:	4798      	blx	r3
 801e866:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801e86a:	d018      	beq.n	801e89e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801e86c:	f010 0f04 	tst.w	r0, #4
 801e870:	6838      	ldr	r0, [r7, #0]
 801e872:	d017      	beq.n	801e8a4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801e874:	2700      	movs	r7, #0
 801e876:	6801      	ldr	r1, [r0, #0]
 801e878:	b2a4      	uxth	r4, r4
 801e87a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801e87e:	b2b6      	uxth	r6, r6
 801e880:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e884:	9401      	str	r4, [sp, #4]
 801e886:	9600      	str	r6, [sp, #0]
 801e888:	e9cd 8703 	strd	r8, r7, [sp, #12]
 801e88c:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 801e890:	9702      	str	r7, [sp, #8]
 801e892:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 801e894:	4629      	mov	r1, r5
 801e896:	47a0      	blx	r4
 801e898:	b00b      	add	sp, #44	; 0x2c
 801e89a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e89e:	f010 0f01 	tst.w	r0, #1
 801e8a2:	e7e5      	b.n	801e870 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801e8a4:	6803      	ldr	r3, [r0, #0]
 801e8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e8a8:	4798      	blx	r3
 801e8aa:	4a2b      	ldr	r2, [pc, #172]	; (801e958 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801e8ac:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801e8b0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801e8b4:	8813      	ldrh	r3, [r2, #0]
 801e8b6:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801e8ba:	fb03 f404 	mul.w	r4, r3, r4
 801e8be:	fb03 c101 	mla	r1, r3, r1, ip
 801e8c2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e8c6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e8ca:	4408      	add	r0, r1
 801e8cc:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801e8d0:	4404      	add	r4, r0
 801e8d2:	d02e      	beq.n	801e932 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13a>
 801e8d4:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801e8d8:	1b9b      	subs	r3, r3, r6
 801e8da:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 801e8de:	1b96      	subs	r6, r2, r6
 801e8e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e8e4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e8e8:	42a0      	cmp	r0, r4
 801e8ea:	d22d      	bcs.n	801e948 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x150>
 801e8ec:	eb00 0e01 	add.w	lr, r0, r1
 801e8f0:	4570      	cmp	r0, lr
 801e8f2:	d210      	bcs.n	801e916 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801e8f4:	f890 9000 	ldrb.w	r9, [r0]
 801e8f8:	f815 2b01 	ldrb.w	r2, [r5], #1
 801e8fc:	fb19 f90c 	smulbb	r9, r9, ip
 801e900:	fb02 9208 	mla	r2, r2, r8, r9
 801e904:	b292      	uxth	r2, r2
 801e906:	f102 0901 	add.w	r9, r2, #1
 801e90a:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801e90e:	1212      	asrs	r2, r2, #8
 801e910:	f800 2b01 	strb.w	r2, [r0], #1
 801e914:	e7ec      	b.n	801e8f0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf8>
 801e916:	4418      	add	r0, r3
 801e918:	4435      	add	r5, r6
 801e91a:	e7e5      	b.n	801e8e8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf0>
 801e91c:	8813      	ldrh	r3, [r2, #0]
 801e91e:	1b9b      	subs	r3, r3, r6
 801e920:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e924:	4418      	add	r0, r3
 801e926:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801e92a:	1b9b      	subs	r3, r3, r6
 801e92c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e930:	441d      	add	r5, r3
 801e932:	42a0      	cmp	r0, r4
 801e934:	d208      	bcs.n	801e948 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x150>
 801e936:	eb00 0c01 	add.w	ip, r0, r1
 801e93a:	4560      	cmp	r0, ip
 801e93c:	d2ee      	bcs.n	801e91c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x124>
 801e93e:	f815 3b01 	ldrb.w	r3, [r5], #1
 801e942:	f800 3b01 	strb.w	r3, [r0], #1
 801e946:	e7f8      	b.n	801e93a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x142>
 801e948:	6838      	ldr	r0, [r7, #0]
 801e94a:	6803      	ldr	r3, [r0, #0]
 801e94c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e94e:	4798      	blx	r3
 801e950:	e7a2      	b.n	801e898 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa0>
 801e952:	bf00      	nop
 801e954:	20056780 	.word	0x20056780
 801e958:	2005677a 	.word	0x2005677a

0801e95c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801e95c:	b510      	push	{r4, lr}
 801e95e:	4604      	mov	r4, r0
 801e960:	2104      	movs	r1, #4
 801e962:	f007 fef8 	bl	8026756 <_ZdlPvj>
 801e966:	4620      	mov	r0, r4
 801e968:	bd10      	pop	{r4, pc}

0801e96a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801e96a:	b510      	push	{r4, lr}
 801e96c:	4604      	mov	r4, r0
 801e96e:	2104      	movs	r1, #4
 801e970:	f007 fef1 	bl	8026756 <_ZdlPvj>
 801e974:	4620      	mov	r0, r4
 801e976:	bd10      	pop	{r4, pc}

0801e978 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801e978:	b510      	push	{r4, lr}
 801e97a:	4604      	mov	r4, r0
 801e97c:	2104      	movs	r1, #4
 801e97e:	f007 feea 	bl	8026756 <_ZdlPvj>
 801e982:	4620      	mov	r0, r4
 801e984:	bd10      	pop	{r4, pc}

0801e986 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801e986:	b510      	push	{r4, lr}
 801e988:	4604      	mov	r4, r0
 801e98a:	2104      	movs	r1, #4
 801e98c:	f007 fee3 	bl	8026756 <_ZdlPvj>
 801e990:	4620      	mov	r0, r4
 801e992:	bd10      	pop	{r4, pc}

0801e994 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801e994:	b510      	push	{r4, lr}
 801e996:	4604      	mov	r4, r0
 801e998:	2104      	movs	r1, #4
 801e99a:	f007 fedc 	bl	8026756 <_ZdlPvj>
 801e99e:	4620      	mov	r0, r4
 801e9a0:	bd10      	pop	{r4, pc}

0801e9a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801e9a2:	b510      	push	{r4, lr}
 801e9a4:	4604      	mov	r4, r0
 801e9a6:	2104      	movs	r1, #4
 801e9a8:	f007 fed5 	bl	8026756 <_ZdlPvj>
 801e9ac:	4620      	mov	r0, r4
 801e9ae:	bd10      	pop	{r4, pc}

0801e9b0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801e9b0:	b510      	push	{r4, lr}
 801e9b2:	4604      	mov	r4, r0
 801e9b4:	2104      	movs	r1, #4
 801e9b6:	f007 fece 	bl	8026756 <_ZdlPvj>
 801e9ba:	4620      	mov	r0, r4
 801e9bc:	bd10      	pop	{r4, pc}

0801e9be <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801e9be:	b510      	push	{r4, lr}
 801e9c0:	4604      	mov	r4, r0
 801e9c2:	2104      	movs	r1, #4
 801e9c4:	f007 fec7 	bl	8026756 <_ZdlPvj>
 801e9c8:	4620      	mov	r0, r4
 801e9ca:	bd10      	pop	{r4, pc}

0801e9cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801e9cc:	b510      	push	{r4, lr}
 801e9ce:	4604      	mov	r4, r0
 801e9d0:	2104      	movs	r1, #4
 801e9d2:	f007 fec0 	bl	8026756 <_ZdlPvj>
 801e9d6:	4620      	mov	r0, r4
 801e9d8:	bd10      	pop	{r4, pc}

0801e9da <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801e9da:	b510      	push	{r4, lr}
 801e9dc:	4604      	mov	r4, r0
 801e9de:	2104      	movs	r1, #4
 801e9e0:	f007 feb9 	bl	8026756 <_ZdlPvj>
 801e9e4:	4620      	mov	r0, r4
 801e9e6:	bd10      	pop	{r4, pc}

0801e9e8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801e9e8:	b510      	push	{r4, lr}
 801e9ea:	4604      	mov	r4, r0
 801e9ec:	2104      	movs	r1, #4
 801e9ee:	f007 feb2 	bl	8026756 <_ZdlPvj>
 801e9f2:	4620      	mov	r0, r4
 801e9f4:	bd10      	pop	{r4, pc}

0801e9f6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801e9f6:	b510      	push	{r4, lr}
 801e9f8:	4604      	mov	r4, r0
 801e9fa:	2104      	movs	r1, #4
 801e9fc:	f007 feab 	bl	8026756 <_ZdlPvj>
 801ea00:	4620      	mov	r0, r4
 801ea02:	bd10      	pop	{r4, pc}

0801ea04 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801ea04:	b510      	push	{r4, lr}
 801ea06:	4604      	mov	r4, r0
 801ea08:	2104      	movs	r1, #4
 801ea0a:	f007 fea4 	bl	8026756 <_ZdlPvj>
 801ea0e:	4620      	mov	r0, r4
 801ea10:	bd10      	pop	{r4, pc}

0801ea12 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801ea12:	b510      	push	{r4, lr}
 801ea14:	4604      	mov	r4, r0
 801ea16:	2104      	movs	r1, #4
 801ea18:	f007 fe9d 	bl	8026756 <_ZdlPvj>
 801ea1c:	4620      	mov	r0, r4
 801ea1e:	bd10      	pop	{r4, pc}

0801ea20 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801ea20:	b510      	push	{r4, lr}
 801ea22:	4604      	mov	r4, r0
 801ea24:	2104      	movs	r1, #4
 801ea26:	f007 fe96 	bl	8026756 <_ZdlPvj>
 801ea2a:	4620      	mov	r0, r4
 801ea2c:	bd10      	pop	{r4, pc}

0801ea2e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801ea2e:	b510      	push	{r4, lr}
 801ea30:	4604      	mov	r4, r0
 801ea32:	2104      	movs	r1, #4
 801ea34:	f007 fe8f 	bl	8026756 <_ZdlPvj>
 801ea38:	4620      	mov	r0, r4
 801ea3a:	bd10      	pop	{r4, pc}

0801ea3c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801ea3c:	b510      	push	{r4, lr}
 801ea3e:	4604      	mov	r4, r0
 801ea40:	2104      	movs	r1, #4
 801ea42:	f007 fe88 	bl	8026756 <_ZdlPvj>
 801ea46:	4620      	mov	r0, r4
 801ea48:	bd10      	pop	{r4, pc}

0801ea4a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801ea4a:	b510      	push	{r4, lr}
 801ea4c:	4604      	mov	r4, r0
 801ea4e:	2104      	movs	r1, #4
 801ea50:	f007 fe81 	bl	8026756 <_ZdlPvj>
 801ea54:	4620      	mov	r0, r4
 801ea56:	bd10      	pop	{r4, pc}

0801ea58 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801ea58:	b510      	push	{r4, lr}
 801ea5a:	4604      	mov	r4, r0
 801ea5c:	2104      	movs	r1, #4
 801ea5e:	f007 fe7a 	bl	8026756 <_ZdlPvj>
 801ea62:	4620      	mov	r0, r4
 801ea64:	bd10      	pop	{r4, pc}

0801ea66 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801ea66:	b510      	push	{r4, lr}
 801ea68:	4604      	mov	r4, r0
 801ea6a:	2104      	movs	r1, #4
 801ea6c:	f007 fe73 	bl	8026756 <_ZdlPvj>
 801ea70:	4620      	mov	r0, r4
 801ea72:	bd10      	pop	{r4, pc}

0801ea74 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801ea74:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ea76:	4606      	mov	r6, r0
 801ea78:	b087      	sub	sp, #28
 801ea7a:	4615      	mov	r5, r2
 801ea7c:	461f      	mov	r7, r3
 801ea7e:	b343      	cbz	r3, 801ead2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 801ea80:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801ea84:	2b00      	cmp	r3, #0
 801ea86:	dd24      	ble.n	801ead2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 801ea88:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801ea8c:	2b00      	cmp	r3, #0
 801ea8e:	dd20      	ble.n	801ead2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 801ea90:	6808      	ldr	r0, [r1, #0]
 801ea92:	aa04      	add	r2, sp, #16
 801ea94:	6849      	ldr	r1, [r1, #4]
 801ea96:	4c1a      	ldr	r4, [pc, #104]	; (801eb00 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801ea98:	c203      	stmia	r2!, {r0, r1}
 801ea9a:	a804      	add	r0, sp, #16
 801ea9c:	f7fa fd24 	bl	80194e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801eaa0:	6820      	ldr	r0, [r4, #0]
 801eaa2:	6803      	ldr	r3, [r0, #0]
 801eaa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801eaa6:	4798      	blx	r3
 801eaa8:	2fff      	cmp	r7, #255	; 0xff
 801eaaa:	d014      	beq.n	801ead6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801eaac:	f010 0f08 	tst.w	r0, #8
 801eab0:	6820      	ldr	r0, [r4, #0]
 801eab2:	d013      	beq.n	801eadc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801eab4:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801eab8:	6801      	ldr	r1, [r0, #0]
 801eaba:	9401      	str	r4, [sp, #4]
 801eabc:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801eac0:	9702      	str	r7, [sp, #8]
 801eac2:	9400      	str	r4, [sp, #0]
 801eac4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801eac8:	6d8c      	ldr	r4, [r1, #88]	; 0x58
 801eaca:	4629      	mov	r1, r5
 801eacc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801ead0:	47a0      	blx	r4
 801ead2:	b007      	add	sp, #28
 801ead4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ead6:	f010 0f02 	tst.w	r0, #2
 801eada:	e7e9      	b.n	801eab0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801eadc:	6803      	ldr	r3, [r0, #0]
 801eade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eae0:	4798      	blx	r3
 801eae2:	4b08      	ldr	r3, [pc, #32]	; (801eb04 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801eae4:	4601      	mov	r1, r0
 801eae6:	4630      	mov	r0, r6
 801eae8:	881a      	ldrh	r2, [r3, #0]
 801eaea:	6833      	ldr	r3, [r6, #0]
 801eaec:	e9cd 5700 	strd	r5, r7, [sp]
 801eaf0:	69dd      	ldr	r5, [r3, #28]
 801eaf2:	ab04      	add	r3, sp, #16
 801eaf4:	47a8      	blx	r5
 801eaf6:	6820      	ldr	r0, [r4, #0]
 801eaf8:	6803      	ldr	r3, [r0, #0]
 801eafa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801eafc:	4798      	blx	r3
 801eafe:	e7e8      	b.n	801ead2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 801eb00:	20056780 	.word	0x20056780
 801eb04:	2005677a 	.word	0x2005677a

0801eb08 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801eb08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb0c:	4db4      	ldr	r5, [pc, #720]	; (801ede0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2d8>)
 801eb0e:	4690      	mov	r8, r2
 801eb10:	b08d      	sub	sp, #52	; 0x34
 801eb12:	4604      	mov	r4, r0
 801eb14:	682a      	ldr	r2, [r5, #0]
 801eb16:	4689      	mov	r9, r1
 801eb18:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801eb1c:	2a02      	cmp	r2, #2
 801eb1e:	d106      	bne.n	801eb2e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801eb20:	4bb0      	ldr	r3, [pc, #704]	; (801ede4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2dc>)
 801eb22:	f240 11ed 	movw	r1, #493	; 0x1ed
 801eb26:	4ab0      	ldr	r2, [pc, #704]	; (801ede8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801eb28:	48b0      	ldr	r0, [pc, #704]	; (801edec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e4>)
 801eb2a:	f007 ff49 	bl	80269c0 <__assert_func>
 801eb2e:	ae0c      	add	r6, sp, #48	; 0x30
 801eb30:	f826 3d1c 	strh.w	r3, [r6, #-28]!
 801eb34:	4630      	mov	r0, r6
 801eb36:	f7fe f815 	bl	801cb64 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801eb3a:	6823      	ldr	r3, [r4, #0]
 801eb3c:	4607      	mov	r7, r0
 801eb3e:	4620      	mov	r0, r4
 801eb40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eb42:	4798      	blx	r3
 801eb44:	4287      	cmp	r7, r0
 801eb46:	d004      	beq.n	801eb52 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801eb48:	4ba9      	ldr	r3, [pc, #676]	; (801edf0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e8>)
 801eb4a:	f240 11ef 	movw	r1, #495	; 0x1ef
 801eb4e:	4aa6      	ldr	r2, [pc, #664]	; (801ede8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801eb50:	e7ea      	b.n	801eb28 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801eb52:	4630      	mov	r0, r6
 801eb54:	f7fd ff7c 	bl	801ca50 <_ZNK8touchgfx6Bitmap7getDataEv>
 801eb58:	4607      	mov	r7, r0
 801eb5a:	b920      	cbnz	r0, 801eb66 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801eb5c:	4ba5      	ldr	r3, [pc, #660]	; (801edf4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ec>)
 801eb5e:	f240 11f1 	movw	r1, #497	; 0x1f1
 801eb62:	4aa1      	ldr	r2, [pc, #644]	; (801ede8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801eb64:	e7e0      	b.n	801eb28 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801eb66:	f8d8 0000 	ldr.w	r0, [r8]
 801eb6a:	ab06      	add	r3, sp, #24
 801eb6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801eb70:	f9b8 a000 	ldrsh.w	sl, [r8]
 801eb74:	c303      	stmia	r3!, {r0, r1}
 801eb76:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801eb7a:	ab08      	add	r3, sp, #32
 801eb7c:	f8d9 0000 	ldr.w	r0, [r9]
 801eb80:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801eb84:	c303      	stmia	r3!, {r0, r1}
 801eb86:	4630      	mov	r0, r6
 801eb88:	f7fd feee 	bl	801c968 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801eb8c:	4680      	mov	r8, r0
 801eb8e:	4630      	mov	r0, r6
 801eb90:	f7fd ff24 	bl	801c9dc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801eb94:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801eb98:	f10d 0920 	add.w	r9, sp, #32
 801eb9c:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801eba0:	a806      	add	r0, sp, #24
 801eba2:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801eba6:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801ebaa:	f7fa fc9d 	bl	80194e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ebae:	4648      	mov	r0, r9
 801ebb0:	f7fa fc9a 	bl	80194e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ebb4:	a80a      	add	r0, sp, #40	; 0x28
 801ebb6:	f7fa fc97 	bl	80194e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ebba:	4b8f      	ldr	r3, [pc, #572]	; (801edf8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 801ebbc:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801ebc0:	881e      	ldrh	r6, [r3, #0]
 801ebc2:	4b8e      	ldr	r3, [pc, #568]	; (801edfc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 801ebc4:	fa0f fb86 	sxth.w	fp, r6
 801ebc8:	8819      	ldrh	r1, [r3, #0]
 801ebca:	4593      	cmp	fp, r2
 801ebcc:	dd75      	ble.n	801ecba <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801ebce:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
 801ebd2:	4494      	add	ip, r2
 801ebd4:	fa1f fc8c 	uxth.w	ip, ip
 801ebd8:	fa0f fa8c 	sxth.w	sl, ip
 801ebdc:	f1ba 0f00 	cmp.w	sl, #0
 801ebe0:	dd6b      	ble.n	801ecba <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801ebe2:	fa0f f881 	sxth.w	r8, r1
 801ebe6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801ebea:	4598      	cmp	r8, r3
 801ebec:	dd65      	ble.n	801ecba <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801ebee:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
 801ebf2:	4418      	add	r0, r3
 801ebf4:	b280      	uxth	r0, r0
 801ebf6:	fa0f fe80 	sxth.w	lr, r0
 801ebfa:	f1be 0f00 	cmp.w	lr, #0
 801ebfe:	dd5c      	ble.n	801ecba <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801ec00:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801ec04:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ec08:	45d3      	cmp	fp, sl
 801ec0a:	bfc8      	it	gt
 801ec0c:	4666      	movgt	r6, ip
 801ec0e:	45f0      	cmp	r8, lr
 801ec10:	bfc8      	it	gt
 801ec12:	4601      	movgt	r1, r0
 801ec14:	f8ad 2020 	strh.w	r2, [sp, #32]
 801ec18:	1ab6      	subs	r6, r6, r2
 801ec1a:	1ac9      	subs	r1, r1, r3
 801ec1c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801ec20:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801ec24:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801ec28:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801ec2c:	f1bc 0f00 	cmp.w	ip, #0
 801ec30:	f340 80aa 	ble.w	801ed88 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801ec34:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801ec38:	2e00      	cmp	r6, #0
 801ec3a:	f340 80a5 	ble.w	801ed88 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801ec3e:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801ec42:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801ec46:	4288      	cmp	r0, r1
 801ec48:	db3b      	blt.n	801ecc2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801ec4a:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801ec4e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801ec52:	429a      	cmp	r2, r3
 801ec54:	db35      	blt.n	801ecc2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801ec56:	4460      	add	r0, ip
 801ec58:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801ec5c:	4461      	add	r1, ip
 801ec5e:	b200      	sxth	r0, r0
 801ec60:	b209      	sxth	r1, r1
 801ec62:	4288      	cmp	r0, r1
 801ec64:	dc2d      	bgt.n	801ecc2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801ec66:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801ec6a:	4432      	add	r2, r6
 801ec6c:	440b      	add	r3, r1
 801ec6e:	b212      	sxth	r2, r2
 801ec70:	b21b      	sxth	r3, r3
 801ec72:	429a      	cmp	r2, r3
 801ec74:	dc25      	bgt.n	801ecc2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801ec76:	6823      	ldr	r3, [r4, #0]
 801ec78:	4620      	mov	r0, r4
 801ec7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ec7c:	4798      	blx	r3
 801ec7e:	4682      	mov	sl, r0
 801ec80:	6828      	ldr	r0, [r5, #0]
 801ec82:	6803      	ldr	r3, [r0, #0]
 801ec84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ec86:	4798      	blx	r3
 801ec88:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801ec8c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801ec90:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801ec94:	9303      	str	r3, [sp, #12]
 801ec96:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801ec9a:	1a9b      	subs	r3, r3, r2
 801ec9c:	b29b      	uxth	r3, r3
 801ec9e:	b21c      	sxth	r4, r3
 801eca0:	2c00      	cmp	r4, #0
 801eca2:	dc13      	bgt.n	801eccc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1c4>
 801eca4:	bf18      	it	ne
 801eca6:	f8ad 2020 	strhne.w	r2, [sp, #32]
 801ecaa:	463c      	mov	r4, r7
 801ecac:	bf1e      	ittt	ne
 801ecae:	f8bd 2024 	ldrhne.w	r2, [sp, #36]	; 0x24
 801ecb2:	189b      	addne	r3, r3, r2
 801ecb4:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 801ecb8:	e00f      	b.n	801ecda <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d2>
 801ecba:	2300      	movs	r3, #0
 801ecbc:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801ecc0:	e7b2      	b.n	801ec28 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x120>
 801ecc2:	4b4f      	ldr	r3, [pc, #316]	; (801ee00 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f8>)
 801ecc4:	f240 11ff 	movw	r1, #511	; 0x1ff
 801ecc8:	4a47      	ldr	r2, [pc, #284]	; (801ede8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801ecca:	e72d      	b.n	801eb28 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801eccc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ecd0:	ebab 0303 	sub.w	r3, fp, r3
 801ecd4:	443c      	add	r4, r7
 801ecd6:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801ecda:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801ecde:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801ece2:	1a9b      	subs	r3, r3, r2
 801ece4:	b29b      	uxth	r3, r3
 801ece6:	b219      	sxth	r1, r3
 801ece8:	2900      	cmp	r1, #0
 801ecea:	dd51      	ble.n	801ed90 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>
 801ecec:	9a03      	ldr	r2, [sp, #12]
 801ecee:	fb02 4401 	mla	r4, r2, r1, r4
 801ecf2:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801ecf6:	1ad3      	subs	r3, r2, r3
 801ecf8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801ecfc:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801ed00:	2b00      	cmp	r3, #0
 801ed02:	dd41      	ble.n	801ed88 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801ed04:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801ed08:	2e00      	cmp	r6, #0
 801ed0a:	dd3d      	ble.n	801ed88 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801ed0c:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801ed10:	f04f 0803 	mov.w	r8, #3
 801ed14:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801ed18:	fb0a f10c 	mul.w	r1, sl, ip
 801ed1c:	fb12 1808 	smlabb	r8, r2, r8, r1
 801ed20:	4935      	ldr	r1, [pc, #212]	; (801edf8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 801ed22:	4480      	add	r8, r0
 801ed24:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801ed28:	8809      	ldrh	r1, [r1, #0]
 801ed2a:	4283      	cmp	r3, r0
 801ed2c:	eba1 0202 	sub.w	r2, r1, r2
 801ed30:	bfa8      	it	ge
 801ed32:	4603      	movge	r3, r0
 801ed34:	4293      	cmp	r3, r2
 801ed36:	bfa8      	it	ge
 801ed38:	4613      	movge	r3, r2
 801ed3a:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 801ed3e:	4296      	cmp	r6, r2
 801ed40:	bfa8      	it	ge
 801ed42:	4616      	movge	r6, r2
 801ed44:	4a2d      	ldr	r2, [pc, #180]	; (801edfc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 801ed46:	8812      	ldrh	r2, [r2, #0]
 801ed48:	eba2 0c0c 	sub.w	ip, r2, ip
 801ed4c:	4632      	mov	r2, r6
 801ed4e:	4566      	cmp	r6, ip
 801ed50:	bfa8      	it	ge
 801ed52:	4662      	movge	r2, ip
 801ed54:	4299      	cmp	r1, r3
 801ed56:	9202      	str	r2, [sp, #8]
 801ed58:	d12d      	bne.n	801edb6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 801ed5a:	4559      	cmp	r1, fp
 801ed5c:	d12b      	bne.n	801edb6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 801ed5e:	6828      	ldr	r0, [r5, #0]
 801ed60:	6803      	ldr	r3, [r0, #0]
 801ed62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ed64:	4798      	blx	r3
 801ed66:	07c3      	lsls	r3, r0, #31
 801ed68:	d51b      	bpl.n	801eda2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29a>
 801ed6a:	6828      	ldr	r0, [r5, #0]
 801ed6c:	9b02      	ldr	r3, [sp, #8]
 801ed6e:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801ed72:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801ed76:	6803      	ldr	r3, [r0, #0]
 801ed78:	f8cd b000 	str.w	fp, [sp]
 801ed7c:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 801ed7e:	4623      	mov	r3, r4
 801ed80:	e899 0006 	ldmia.w	r9, {r1, r2}
 801ed84:	47a8      	blx	r5
 801ed86:	4607      	mov	r7, r0
 801ed88:	4638      	mov	r0, r7
 801ed8a:	b00d      	add	sp, #52	; 0x34
 801ed8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed90:	bf1f      	itttt	ne
 801ed92:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801ed96:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801ed9a:	189b      	addne	r3, r3, r2
 801ed9c:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801eda0:	e7ac      	b.n	801ecfc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f4>
 801eda2:	6828      	ldr	r0, [r5, #0]
 801eda4:	4642      	mov	r2, r8
 801eda6:	4621      	mov	r1, r4
 801eda8:	6803      	ldr	r3, [r0, #0]
 801edaa:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 801edac:	9b02      	ldr	r3, [sp, #8]
 801edae:	fb03 f30a 	mul.w	r3, r3, sl
 801edb2:	47a8      	blx	r5
 801edb4:	e7e8      	b.n	801ed88 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801edb6:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 801edba:	f04f 0900 	mov.w	r9, #0
 801edbe:	9b02      	ldr	r3, [sp, #8]
 801edc0:	454b      	cmp	r3, r9
 801edc2:	dde1      	ble.n	801ed88 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801edc4:	6828      	ldr	r0, [r5, #0]
 801edc6:	4642      	mov	r2, r8
 801edc8:	4621      	mov	r1, r4
 801edca:	44d0      	add	r8, sl
 801edcc:	6803      	ldr	r3, [r0, #0]
 801edce:	f109 0901 	add.w	r9, r9, #1
 801edd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801edd4:	461e      	mov	r6, r3
 801edd6:	465b      	mov	r3, fp
 801edd8:	47b0      	blx	r6
 801edda:	9b03      	ldr	r3, [sp, #12]
 801eddc:	441c      	add	r4, r3
 801edde:	e7ee      	b.n	801edbe <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2b6>
 801ede0:	20056780 	.word	0x20056780
 801ede4:	0802e91b 	.word	0x0802e91b
 801ede8:	0802f16a 	.word	0x0802f16a
 801edec:	0802e8e9 	.word	0x0802e8e9
 801edf0:	0802e9cd 	.word	0x0802e9cd
 801edf4:	0802ea22 	.word	0x0802ea22
 801edf8:	2005677a 	.word	0x2005677a
 801edfc:	2005677c 	.word	0x2005677c
 801ee00:	0802ea60 	.word	0x0802ea60

0801ee04 <_ZN8touchgfx8LCD24bppC1Ev>:
 801ee04:	2200      	movs	r2, #0
 801ee06:	490c      	ldr	r1, [pc, #48]	; (801ee38 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 801ee08:	6042      	str	r2, [r0, #4]
 801ee0a:	6001      	str	r1, [r0, #0]
 801ee0c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801ee10:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801ee14:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801ee18:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801ee1c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801ee20:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801ee24:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801ee28:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801ee2c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801ee30:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801ee34:	4770      	bx	lr
 801ee36:	bf00      	nop
 801ee38:	0802ed44 	.word	0x0802ed44

0801ee3c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801ee3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee40:	4616      	mov	r6, r2
 801ee42:	b091      	sub	sp, #68	; 0x44
 801ee44:	880a      	ldrh	r2, [r1, #0]
 801ee46:	4607      	mov	r7, r0
 801ee48:	4688      	mov	r8, r1
 801ee4a:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801ee4e:	b12a      	cbz	r2, 801ee5c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801ee50:	4b67      	ldr	r3, [pc, #412]	; (801eff0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b4>)
 801ee52:	2160      	movs	r1, #96	; 0x60
 801ee54:	4a67      	ldr	r2, [pc, #412]	; (801eff4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b8>)
 801ee56:	4868      	ldr	r0, [pc, #416]	; (801eff8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1bc>)
 801ee58:	f007 fdb2 	bl	80269c0 <__assert_func>
 801ee5c:	6830      	ldr	r0, [r6, #0]
 801ee5e:	ac0c      	add	r4, sp, #48	; 0x30
 801ee60:	6871      	ldr	r1, [r6, #4]
 801ee62:	4d66      	ldr	r5, [pc, #408]	; (801effc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 801ee64:	f8df a198 	ldr.w	sl, [pc, #408]	; 801f000 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>
 801ee68:	c403      	stmia	r4!, {r0, r1}
 801ee6a:	6818      	ldr	r0, [r3, #0]
 801ee6c:	ac0e      	add	r4, sp, #56	; 0x38
 801ee6e:	6859      	ldr	r1, [r3, #4]
 801ee70:	c403      	stmia	r4!, {r0, r1}
 801ee72:	a80c      	add	r0, sp, #48	; 0x30
 801ee74:	f7fa fb38 	bl	80194e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ee78:	4631      	mov	r1, r6
 801ee7a:	a80e      	add	r0, sp, #56	; 0x38
 801ee7c:	f7fa fb1c 	bl	80194b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ee80:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801ee84:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801ee88:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801ee8c:	6828      	ldr	r0, [r5, #0]
 801ee8e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ee92:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 801ee96:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 801ee9a:	440f      	add	r7, r1
 801ee9c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801eea0:	440a      	add	r2, r1
 801eea2:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801eea6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801eeaa:	4413      	add	r3, r2
 801eeac:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801eeb0:	6803      	ldr	r3, [r0, #0]
 801eeb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801eeb4:	4798      	blx	r3
 801eeb6:	f010 0f80 	tst.w	r0, #128	; 0x80
 801eeba:	6828      	ldr	r0, [r5, #0]
 801eebc:	d01d      	beq.n	801eefa <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801eebe:	2201      	movs	r2, #1
 801eec0:	250b      	movs	r5, #11
 801eec2:	6801      	ldr	r1, [r0, #0]
 801eec4:	b2a4      	uxth	r4, r4
 801eec6:	b2b6      	uxth	r6, r6
 801eec8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801eecc:	e9cd 5207 	strd	r5, r2, [sp, #28]
 801eed0:	f8ba 5000 	ldrh.w	r5, [sl]
 801eed4:	f8cd 9010 	str.w	r9, [sp, #16]
 801eed8:	9602      	str	r6, [sp, #8]
 801eeda:	9401      	str	r4, [sp, #4]
 801eedc:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801eee0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801eee4:	9203      	str	r2, [sp, #12]
 801eee6:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801eeea:	9200      	str	r2, [sp, #0]
 801eeec:	4642      	mov	r2, r8
 801eeee:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 801eef0:	4639      	mov	r1, r7
 801eef2:	47a0      	blx	r4
 801eef4:	b011      	add	sp, #68	; 0x44
 801eef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eefa:	6803      	ldr	r3, [r0, #0]
 801eefc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eefe:	4798      	blx	r3
 801ef00:	f8ba 5000 	ldrh.w	r5, [sl]
 801ef04:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801ef08:	f04f 0e04 	mov.w	lr, #4
 801ef0c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801ef10:	436e      	muls	r6, r5
 801ef12:	fb05 2303 	mla	r3, r5, r3, r2
 801ef16:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ef1a:	1b2d      	subs	r5, r5, r4
 801ef1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ef20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ef24:	4418      	add	r0, r3
 801ef26:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801ef2a:	1982      	adds	r2, r0, r6
 801ef2c:	1b1b      	subs	r3, r3, r4
 801ef2e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ef32:	930b      	str	r3, [sp, #44]	; 0x2c
 801ef34:	4290      	cmp	r0, r2
 801ef36:	d254      	bcs.n	801efe2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a6>
 801ef38:	eb00 0a04 	add.w	sl, r0, r4
 801ef3c:	4550      	cmp	r0, sl
 801ef3e:	d24c      	bcs.n	801efda <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19e>
 801ef40:	f817 1b01 	ldrb.w	r1, [r7], #1
 801ef44:	fb1e e101 	smlabb	r1, lr, r1, lr
 801ef48:	eb08 0c01 	add.w	ip, r8, r1
 801ef4c:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801ef50:	b173      	cbz	r3, 801ef70 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x134>
 801ef52:	2bff      	cmp	r3, #255	; 0xff
 801ef54:	f818 b001 	ldrb.w	fp, [r8, r1]
 801ef58:	d10c      	bne.n	801ef74 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801ef5a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ef5e:	d109      	bne.n	801ef74 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801ef60:	f880 b000 	strb.w	fp, [r0]
 801ef64:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801ef68:	7043      	strb	r3, [r0, #1]
 801ef6a:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801ef6e:	7083      	strb	r3, [r0, #2]
 801ef70:	3003      	adds	r0, #3
 801ef72:	e7e3      	b.n	801ef3c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x100>
 801ef74:	fb09 f103 	mul.w	r1, r9, r3
 801ef78:	1c4b      	adds	r3, r1, #1
 801ef7a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801ef7e:	7801      	ldrb	r1, [r0, #0]
 801ef80:	121b      	asrs	r3, r3, #8
 801ef82:	b29e      	uxth	r6, r3
 801ef84:	43db      	mvns	r3, r3
 801ef86:	fb1b fb06 	smulbb	fp, fp, r6
 801ef8a:	b2db      	uxtb	r3, r3
 801ef8c:	fb01 b103 	mla	r1, r1, r3, fp
 801ef90:	b289      	uxth	r1, r1
 801ef92:	f101 0b01 	add.w	fp, r1, #1
 801ef96:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801ef9a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ef9e:	fb1b fb03 	smulbb	fp, fp, r3
 801efa2:	1209      	asrs	r1, r1, #8
 801efa4:	7001      	strb	r1, [r0, #0]
 801efa6:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801efaa:	fb01 b106 	mla	r1, r1, r6, fp
 801efae:	b289      	uxth	r1, r1
 801efb0:	f101 0b01 	add.w	fp, r1, #1
 801efb4:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801efb8:	1209      	asrs	r1, r1, #8
 801efba:	7041      	strb	r1, [r0, #1]
 801efbc:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801efc0:	f890 c002 	ldrb.w	ip, [r0, #2]
 801efc4:	fb1c f303 	smulbb	r3, ip, r3
 801efc8:	fb01 3606 	mla	r6, r1, r6, r3
 801efcc:	b2b6      	uxth	r6, r6
 801efce:	1c73      	adds	r3, r6, #1
 801efd0:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801efd4:	1236      	asrs	r6, r6, #8
 801efd6:	7086      	strb	r6, [r0, #2]
 801efd8:	e7ca      	b.n	801ef70 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x134>
 801efda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801efdc:	4428      	add	r0, r5
 801efde:	441f      	add	r7, r3
 801efe0:	e7a8      	b.n	801ef34 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf8>
 801efe2:	4b06      	ldr	r3, [pc, #24]	; (801effc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 801efe4:	6818      	ldr	r0, [r3, #0]
 801efe6:	6803      	ldr	r3, [r0, #0]
 801efe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801efea:	4798      	blx	r3
 801efec:	e782      	b.n	801eef4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb8>
 801efee:	bf00      	nop
 801eff0:	0802e84d 	.word	0x0802e84d
 801eff4:	0802ef8c 	.word	0x0802ef8c
 801eff8:	0802e8e9 	.word	0x0802e8e9
 801effc:	20056780 	.word	0x20056780
 801f000:	2005677a 	.word	0x2005677a

0801f004 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801f004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f008:	f8b1 9000 	ldrh.w	r9, [r1]
 801f00c:	b091      	sub	sp, #68	; 0x44
 801f00e:	4604      	mov	r4, r0
 801f010:	460e      	mov	r6, r1
 801f012:	f1b9 0f01 	cmp.w	r9, #1
 801f016:	4690      	mov	r8, r2
 801f018:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801f01c:	d005      	beq.n	801f02a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x26>
 801f01e:	4b68      	ldr	r3, [pc, #416]	; (801f1c0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>)
 801f020:	21ae      	movs	r1, #174	; 0xae
 801f022:	4a68      	ldr	r2, [pc, #416]	; (801f1c4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 801f024:	4868      	ldr	r0, [pc, #416]	; (801f1c8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801f026:	f007 fccb 	bl	80269c0 <__assert_func>
 801f02a:	6810      	ldr	r0, [r2, #0]
 801f02c:	ad0c      	add	r5, sp, #48	; 0x30
 801f02e:	6851      	ldr	r1, [r2, #4]
 801f030:	f8df a198 	ldr.w	sl, [pc, #408]	; 801f1cc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 801f034:	f8df b198 	ldr.w	fp, [pc, #408]	; 801f1d0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>
 801f038:	c503      	stmia	r5!, {r0, r1}
 801f03a:	6818      	ldr	r0, [r3, #0]
 801f03c:	ad0e      	add	r5, sp, #56	; 0x38
 801f03e:	6859      	ldr	r1, [r3, #4]
 801f040:	c503      	stmia	r5!, {r0, r1}
 801f042:	a80c      	add	r0, sp, #48	; 0x30
 801f044:	f7fa fa50 	bl	80194e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f048:	4641      	mov	r1, r8
 801f04a:	a80e      	add	r0, sp, #56	; 0x38
 801f04c:	f7fa fa34 	bl	80194b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f050:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801f054:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801f058:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801f05c:	f8da 0000 	ldr.w	r0, [sl]
 801f060:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f064:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801f068:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801f06c:	440c      	add	r4, r1
 801f06e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801f072:	440a      	add	r2, r1
 801f074:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801f078:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801f07c:	4413      	add	r3, r2
 801f07e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801f082:	6803      	ldr	r3, [r0, #0]
 801f084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f086:	4798      	blx	r3
 801f088:	f010 0f80 	tst.w	r0, #128	; 0x80
 801f08c:	f8da 0000 	ldr.w	r0, [sl]
 801f090:	d01e      	beq.n	801f0d0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 801f092:	220b      	movs	r2, #11
 801f094:	6801      	ldr	r1, [r0, #0]
 801f096:	f8cd 9020 	str.w	r9, [sp, #32]
 801f09a:	b2ad      	uxth	r5, r5
 801f09c:	9207      	str	r2, [sp, #28]
 801f09e:	f8bb 2000 	ldrh.w	r2, [fp]
 801f0a2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801f0a6:	9206      	str	r2, [sp, #24]
 801f0a8:	2200      	movs	r2, #0
 801f0aa:	9502      	str	r5, [sp, #8]
 801f0ac:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801f0b0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801f0b4:	9203      	str	r2, [sp, #12]
 801f0b6:	fa1f f288 	uxth.w	r2, r8
 801f0ba:	9201      	str	r2, [sp, #4]
 801f0bc:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801f0c0:	9200      	str	r2, [sp, #0]
 801f0c2:	4632      	mov	r2, r6
 801f0c4:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801f0c6:	4621      	mov	r1, r4
 801f0c8:	47a8      	blx	r5
 801f0ca:	b011      	add	sp, #68	; 0x44
 801f0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0d0:	6803      	ldr	r3, [r0, #0]
 801f0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f0d4:	4798      	blx	r3
 801f0d6:	f8bb 2000 	ldrh.w	r2, [fp]
 801f0da:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801f0de:	f04f 0e03 	mov.w	lr, #3
 801f0e2:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801f0e6:	4355      	muls	r5, r2
 801f0e8:	fa1f fc87 	uxth.w	ip, r7
 801f0ec:	fb02 1303 	mla	r3, r2, r3, r1
 801f0f0:	eba2 0208 	sub.w	r2, r2, r8
 801f0f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f0f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f0fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f100:	4418      	add	r0, r3
 801f102:	920b      	str	r2, [sp, #44]	; 0x2c
 801f104:	1943      	adds	r3, r0, r5
 801f106:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801f10a:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 801f10e:	eba2 0208 	sub.w	r2, r2, r8
 801f112:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f116:	b2ad      	uxth	r5, r5
 801f118:	4298      	cmp	r0, r3
 801f11a:	d24a      	bcs.n	801f1b2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ae>
 801f11c:	eb00 0908 	add.w	r9, r0, r8
 801f120:	4621      	mov	r1, r4
 801f122:	4548      	cmp	r0, r9
 801f124:	460c      	mov	r4, r1
 801f126:	d240      	bcs.n	801f1aa <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a6>
 801f128:	f04f 0a04 	mov.w	sl, #4
 801f12c:	7824      	ldrb	r4, [r4, #0]
 801f12e:	2fff      	cmp	r7, #255	; 0xff
 801f130:	f101 0101 	add.w	r1, r1, #1
 801f134:	fb1e a404 	smlabb	r4, lr, r4, sl
 801f138:	eb06 0a04 	add.w	sl, r6, r4
 801f13c:	f816 b004 	ldrb.w	fp, [r6, r4]
 801f140:	d02b      	beq.n	801f19a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801f142:	7804      	ldrb	r4, [r0, #0]
 801f144:	fb14 f405 	smulbb	r4, r4, r5
 801f148:	fb0b 440c 	mla	r4, fp, ip, r4
 801f14c:	b2a4      	uxth	r4, r4
 801f14e:	f104 0b01 	add.w	fp, r4, #1
 801f152:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801f156:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f15a:	fb1b fb05 	smulbb	fp, fp, r5
 801f15e:	1224      	asrs	r4, r4, #8
 801f160:	7004      	strb	r4, [r0, #0]
 801f162:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801f166:	fb04 b40c 	mla	r4, r4, ip, fp
 801f16a:	b2a4      	uxth	r4, r4
 801f16c:	f104 0b01 	add.w	fp, r4, #1
 801f170:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801f174:	1224      	asrs	r4, r4, #8
 801f176:	7044      	strb	r4, [r0, #1]
 801f178:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801f17c:	f890 a002 	ldrb.w	sl, [r0, #2]
 801f180:	fb1a fa05 	smulbb	sl, sl, r5
 801f184:	fb04 a40c 	mla	r4, r4, ip, sl
 801f188:	b2a4      	uxth	r4, r4
 801f18a:	f104 0a01 	add.w	sl, r4, #1
 801f18e:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801f192:	1224      	asrs	r4, r4, #8
 801f194:	7084      	strb	r4, [r0, #2]
 801f196:	3003      	adds	r0, #3
 801f198:	e7c3      	b.n	801f122 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x11e>
 801f19a:	f880 b000 	strb.w	fp, [r0]
 801f19e:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801f1a2:	7044      	strb	r4, [r0, #1]
 801f1a4:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801f1a8:	e7f4      	b.n	801f194 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x190>
 801f1aa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f1ac:	4420      	add	r0, r4
 801f1ae:	188c      	adds	r4, r1, r2
 801f1b0:	e7b2      	b.n	801f118 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x114>
 801f1b2:	4b06      	ldr	r3, [pc, #24]	; (801f1cc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801f1b4:	6818      	ldr	r0, [r3, #0]
 801f1b6:	6803      	ldr	r3, [r0, #0]
 801f1b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f1ba:	4798      	blx	r3
 801f1bc:	e785      	b.n	801f0ca <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 801f1be:	bf00      	nop
 801f1c0:	0802e7cc 	.word	0x0802e7cc
 801f1c4:	0802ee7f 	.word	0x0802ee7f
 801f1c8:	0802e8e9 	.word	0x0802e8e9
 801f1cc:	20056780 	.word	0x20056780
 801f1d0:	2005677a 	.word	0x2005677a

0801f1d4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801f1d4:	b570      	push	{r4, r5, r6, lr}
 801f1d6:	780d      	ldrb	r5, [r1, #0]
 801f1d8:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801f1dc:	2d01      	cmp	r5, #1
 801f1de:	d00d      	beq.n	801f1fc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801f1e0:	d307      	bcc.n	801f1f2 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801f1e2:	2d02      	cmp	r5, #2
 801f1e4:	d10f      	bne.n	801f206 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801f1e6:	4b08      	ldr	r3, [pc, #32]	; (801f208 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801f1e8:	2153      	movs	r1, #83	; 0x53
 801f1ea:	4a08      	ldr	r2, [pc, #32]	; (801f20c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801f1ec:	4808      	ldr	r0, [pc, #32]	; (801f210 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801f1ee:	f007 fbe7 	bl	80269c0 <__assert_func>
 801f1f2:	9404      	str	r4, [sp, #16]
 801f1f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f1f8:	f7ff be20 	b.w	801ee3c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801f1fc:	9404      	str	r4, [sp, #16]
 801f1fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f202:	f7ff beff 	b.w	801f004 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801f206:	bd70      	pop	{r4, r5, r6, pc}
 801f208:	0802e76e 	.word	0x0802e76e
 801f20c:	0802ed88 	.word	0x0802ed88
 801f210:	0802e8e9 	.word	0x0802e8e9

0801f214 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801f214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f218:	4605      	mov	r5, r0
 801f21a:	b08d      	sub	sp, #52	; 0x34
 801f21c:	460c      	mov	r4, r1
 801f21e:	461f      	mov	r7, r3
 801f220:	2b00      	cmp	r3, #0
 801f222:	d051      	beq.n	801f2c8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb4>
 801f224:	6808      	ldr	r0, [r1, #0]
 801f226:	ab08      	add	r3, sp, #32
 801f228:	6849      	ldr	r1, [r1, #4]
 801f22a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 801f3f4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801f22e:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 801f3f8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801f232:	c303      	stmia	r3!, {r0, r1}
 801f234:	6810      	ldr	r0, [r2, #0]
 801f236:	ab0a      	add	r3, sp, #40	; 0x28
 801f238:	6851      	ldr	r1, [r2, #4]
 801f23a:	c303      	stmia	r3!, {r0, r1}
 801f23c:	a808      	add	r0, sp, #32
 801f23e:	f7fa f953 	bl	80194e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f242:	4621      	mov	r1, r4
 801f244:	a80a      	add	r0, sp, #40	; 0x28
 801f246:	f7fa f937 	bl	80194b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f24a:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801f24e:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801f252:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801f256:	f8d8 0000 	ldr.w	r0, [r8]
 801f25a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f25e:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801f262:	f9bd 402e 	ldrsh.w	r4, [sp, #46]	; 0x2e
 801f266:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801f26a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801f26e:	440a      	add	r2, r1
 801f270:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801f274:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801f278:	4413      	add	r3, r2
 801f27a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801f27e:	6803      	ldr	r3, [r0, #0]
 801f280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f282:	4798      	blx	r3
 801f284:	2fff      	cmp	r7, #255	; 0xff
 801f286:	d022      	beq.n	801f2ce <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xba>
 801f288:	f010 0f04 	tst.w	r0, #4
 801f28c:	f8d8 0000 	ldr.w	r0, [r8]
 801f290:	d020      	beq.n	801f2d4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc0>
 801f292:	2100      	movs	r1, #0
 801f294:	f04f 0e01 	mov.w	lr, #1
 801f298:	f8d0 c000 	ldr.w	ip, [r0]
 801f29c:	b2a4      	uxth	r4, r4
 801f29e:	b2b6      	uxth	r6, r6
 801f2a0:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801f2a4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801f2a8:	e9cd 1e06 	strd	r1, lr, [sp, #24]
 801f2ac:	f8b9 e000 	ldrh.w	lr, [r9]
 801f2b0:	9703      	str	r7, [sp, #12]
 801f2b2:	9401      	str	r4, [sp, #4]
 801f2b4:	9600      	str	r6, [sp, #0]
 801f2b6:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801f2ba:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801f2be:	9102      	str	r1, [sp, #8]
 801f2c0:	4629      	mov	r1, r5
 801f2c2:	f8dc 403c 	ldr.w	r4, [ip, #60]	; 0x3c
 801f2c6:	47a0      	blx	r4
 801f2c8:	b00d      	add	sp, #52	; 0x34
 801f2ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f2ce:	f010 0f01 	tst.w	r0, #1
 801f2d2:	e7db      	b.n	801f28c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801f2d4:	6803      	ldr	r3, [r0, #0]
 801f2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f2d8:	4798      	blx	r3
 801f2da:	f8b9 1000 	ldrh.w	r1, [r9]
 801f2de:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801f2e2:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801f2e6:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801f2ea:	434c      	muls	r4, r1
 801f2ec:	2fff      	cmp	r7, #255	; 0xff
 801f2ee:	fb01 2303 	mla	r3, r1, r3, r2
 801f2f2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f2f6:	eba1 0106 	sub.w	r1, r1, r6
 801f2fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f2fe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f302:	4418      	add	r0, r3
 801f304:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801f308:	eba3 0606 	sub.w	r6, r3, r6
 801f30c:	4404      	add	r4, r0
 801f30e:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801f312:	d04a      	beq.n	801f3aa <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x196>
 801f314:	43fa      	mvns	r2, r7
 801f316:	b2bb      	uxth	r3, r7
 801f318:	b2d7      	uxtb	r7, r2
 801f31a:	42a0      	cmp	r0, r4
 801f31c:	d263      	bcs.n	801f3e6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d2>
 801f31e:	eb00 0e0c 	add.w	lr, r0, ip
 801f322:	4586      	cmp	lr, r0
 801f324:	f100 0803 	add.w	r8, r0, #3
 801f328:	d93a      	bls.n	801f3a0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18c>
 801f32a:	f835 2b02 	ldrh.w	r2, [r5], #2
 801f32e:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801f332:	00d0      	lsls	r0, r2, #3
 801f334:	fb19 f907 	smulbb	r9, r9, r7
 801f338:	b2c0      	uxtb	r0, r0
 801f33a:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801f33e:	fb00 9003 	mla	r0, r0, r3, r9
 801f342:	b280      	uxth	r0, r0
 801f344:	f100 0901 	add.w	r9, r0, #1
 801f348:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801f34c:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801f350:	fb19 f907 	smulbb	r9, r9, r7
 801f354:	1200      	asrs	r0, r0, #8
 801f356:	f808 0c03 	strb.w	r0, [r8, #-3]
 801f35a:	10d0      	asrs	r0, r2, #3
 801f35c:	1212      	asrs	r2, r2, #8
 801f35e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801f362:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801f366:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801f36a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801f36e:	fb00 9003 	mla	r0, r0, r3, r9
 801f372:	b280      	uxth	r0, r0
 801f374:	f100 0901 	add.w	r9, r0, #1
 801f378:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801f37c:	1200      	asrs	r0, r0, #8
 801f37e:	f808 0c02 	strb.w	r0, [r8, #-2]
 801f382:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801f386:	fb10 f007 	smulbb	r0, r0, r7
 801f38a:	fb02 0203 	mla	r2, r2, r3, r0
 801f38e:	b292      	uxth	r2, r2
 801f390:	1c50      	adds	r0, r2, #1
 801f392:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801f396:	4640      	mov	r0, r8
 801f398:	1212      	asrs	r2, r2, #8
 801f39a:	f808 2c01 	strb.w	r2, [r8, #-1]
 801f39e:	e7c0      	b.n	801f322 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x10e>
 801f3a0:	4408      	add	r0, r1
 801f3a2:	4435      	add	r5, r6
 801f3a4:	e7b9      	b.n	801f31a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x106>
 801f3a6:	4408      	add	r0, r1
 801f3a8:	4435      	add	r5, r6
 801f3aa:	42a0      	cmp	r0, r4
 801f3ac:	d21b      	bcs.n	801f3e6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d2>
 801f3ae:	eb00 070c 	add.w	r7, r0, ip
 801f3b2:	42b8      	cmp	r0, r7
 801f3b4:	d2f7      	bcs.n	801f3a6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x192>
 801f3b6:	f835 3b02 	ldrh.w	r3, [r5], #2
 801f3ba:	3003      	adds	r0, #3
 801f3bc:	00da      	lsls	r2, r3, #3
 801f3be:	b2d2      	uxtb	r2, r2
 801f3c0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801f3c4:	f800 2c03 	strb.w	r2, [r0, #-3]
 801f3c8:	10da      	asrs	r2, r3, #3
 801f3ca:	121b      	asrs	r3, r3, #8
 801f3cc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801f3d0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801f3d4:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801f3d8:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801f3dc:	f800 2c02 	strb.w	r2, [r0, #-2]
 801f3e0:	f800 3c01 	strb.w	r3, [r0, #-1]
 801f3e4:	e7e5      	b.n	801f3b2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x19e>
 801f3e6:	4b03      	ldr	r3, [pc, #12]	; (801f3f4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801f3e8:	6818      	ldr	r0, [r3, #0]
 801f3ea:	6803      	ldr	r3, [r0, #0]
 801f3ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f3ee:	4798      	blx	r3
 801f3f0:	e76a      	b.n	801f2c8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb4>
 801f3f2:	bf00      	nop
 801f3f4:	20056780 	.word	0x20056780
 801f3f8:	2005677a 	.word	0x2005677a

0801f3fc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801f3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f400:	b088      	sub	sp, #32
 801f402:	460d      	mov	r5, r1
 801f404:	4604      	mov	r4, r0
 801f406:	461e      	mov	r6, r3
 801f408:	6808      	ldr	r0, [r1, #0]
 801f40a:	ab04      	add	r3, sp, #16
 801f40c:	6849      	ldr	r1, [r1, #4]
 801f40e:	4f5c      	ldr	r7, [pc, #368]	; (801f580 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x184>)
 801f410:	c303      	stmia	r3!, {r0, r1}
 801f412:	6810      	ldr	r0, [r2, #0]
 801f414:	ab06      	add	r3, sp, #24
 801f416:	6851      	ldr	r1, [r2, #4]
 801f418:	c303      	stmia	r3!, {r0, r1}
 801f41a:	a804      	add	r0, sp, #16
 801f41c:	f7fa f864 	bl	80194e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f420:	4629      	mov	r1, r5
 801f422:	a806      	add	r0, sp, #24
 801f424:	f7fa f848 	bl	80194b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f428:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801f42c:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801f430:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801f434:	6838      	ldr	r0, [r7, #0]
 801f436:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f43a:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
 801f43e:	f9bd 501e 	ldrsh.w	r5, [sp, #30]
 801f442:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801f446:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801f44a:	440a      	add	r2, r1
 801f44c:	f8ad 2018 	strh.w	r2, [sp, #24]
 801f450:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801f454:	4413      	add	r3, r2
 801f456:	f8ad 301a 	strh.w	r3, [sp, #26]
 801f45a:	6803      	ldr	r3, [r0, #0]
 801f45c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f45e:	4798      	blx	r3
 801f460:	2eff      	cmp	r6, #255	; 0xff
 801f462:	d117      	bne.n	801f494 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801f464:	f010 0f20 	tst.w	r0, #32
 801f468:	6838      	ldr	r0, [r7, #0]
 801f46a:	d016      	beq.n	801f49a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801f46c:	b2ad      	uxth	r5, r5
 801f46e:	6801      	ldr	r1, [r0, #0]
 801f470:	9603      	str	r6, [sp, #12]
 801f472:	9501      	str	r5, [sp, #4]
 801f474:	fa1f f588 	uxth.w	r5, r8
 801f478:	f8bd 6014 	ldrh.w	r6, [sp, #20]
 801f47c:	9500      	str	r5, [sp, #0]
 801f47e:	9602      	str	r6, [sp, #8]
 801f480:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 801f484:	6ccd      	ldr	r5, [r1, #76]	; 0x4c
 801f486:	4621      	mov	r1, r4
 801f488:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 801f48c:	47a8      	blx	r5
 801f48e:	b008      	add	sp, #32
 801f490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f494:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f498:	e7e6      	b.n	801f468 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801f49a:	6803      	ldr	r3, [r0, #0]
 801f49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f49e:	4798      	blx	r3
 801f4a0:	4b38      	ldr	r3, [pc, #224]	; (801f584 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801f4a2:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801f4a6:	f8b3 c000 	ldrh.w	ip, [r3]
 801f4aa:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801f4ae:	fb0c f505 	mul.w	r5, ip, r5
 801f4b2:	f9bd e014 	ldrsh.w	lr, [sp, #20]
 801f4b6:	fb0c 2303 	mla	r3, ip, r3, r2
 801f4ba:	ebac 0c08 	sub.w	ip, ip, r8
 801f4be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f4c2:	ebae 0e08 	sub.w	lr, lr, r8
 801f4c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f4ca:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f4ce:	4418      	add	r0, r3
 801f4d0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801f4d4:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801f4d8:	4405      	add	r5, r0
 801f4da:	42a8      	cmp	r0, r5
 801f4dc:	d24a      	bcs.n	801f574 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x178>
 801f4de:	eb00 0803 	add.w	r8, r0, r3
 801f4e2:	4540      	cmp	r0, r8
 801f4e4:	d243      	bcs.n	801f56e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x172>
 801f4e6:	78e2      	ldrb	r2, [r4, #3]
 801f4e8:	b15a      	cbz	r2, 801f502 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801f4ea:	2aff      	cmp	r2, #255	; 0xff
 801f4ec:	f894 9000 	ldrb.w	r9, [r4]
 801f4f0:	d10a      	bne.n	801f508 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801f4f2:	2eff      	cmp	r6, #255	; 0xff
 801f4f4:	d108      	bne.n	801f508 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801f4f6:	f880 9000 	strb.w	r9, [r0]
 801f4fa:	7862      	ldrb	r2, [r4, #1]
 801f4fc:	7042      	strb	r2, [r0, #1]
 801f4fe:	78a2      	ldrb	r2, [r4, #2]
 801f500:	7082      	strb	r2, [r0, #2]
 801f502:	3003      	adds	r0, #3
 801f504:	3404      	adds	r4, #4
 801f506:	e7ec      	b.n	801f4e2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe6>
 801f508:	4372      	muls	r2, r6
 801f50a:	1c51      	adds	r1, r2, #1
 801f50c:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801f510:	1209      	asrs	r1, r1, #8
 801f512:	fa1f fa81 	uxth.w	sl, r1
 801f516:	43c9      	mvns	r1, r1
 801f518:	fb19 f90a 	smulbb	r9, r9, sl
 801f51c:	b2ca      	uxtb	r2, r1
 801f51e:	7801      	ldrb	r1, [r0, #0]
 801f520:	fb01 9902 	mla	r9, r1, r2, r9
 801f524:	fa1f f989 	uxth.w	r9, r9
 801f528:	f109 0101 	add.w	r1, r9, #1
 801f52c:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801f530:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f534:	f880 9000 	strb.w	r9, [r0]
 801f538:	f890 9001 	ldrb.w	r9, [r0, #1]
 801f53c:	7861      	ldrb	r1, [r4, #1]
 801f53e:	fb19 f902 	smulbb	r9, r9, r2
 801f542:	fb01 910a 	mla	r1, r1, sl, r9
 801f546:	b289      	uxth	r1, r1
 801f548:	f101 0901 	add.w	r9, r1, #1
 801f54c:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801f550:	1209      	asrs	r1, r1, #8
 801f552:	7041      	strb	r1, [r0, #1]
 801f554:	7881      	ldrb	r1, [r0, #2]
 801f556:	f894 9002 	ldrb.w	r9, [r4, #2]
 801f55a:	fb11 f202 	smulbb	r2, r1, r2
 801f55e:	fb09 220a 	mla	r2, r9, sl, r2
 801f562:	b292      	uxth	r2, r2
 801f564:	1c51      	adds	r1, r2, #1
 801f566:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801f56a:	1212      	asrs	r2, r2, #8
 801f56c:	e7c8      	b.n	801f500 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x104>
 801f56e:	4460      	add	r0, ip
 801f570:	4474      	add	r4, lr
 801f572:	e7b2      	b.n	801f4da <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801f574:	6838      	ldr	r0, [r7, #0]
 801f576:	6803      	ldr	r3, [r0, #0]
 801f578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f57a:	4798      	blx	r3
 801f57c:	e787      	b.n	801f48e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x92>
 801f57e:	bf00      	nop
 801f580:	20056780 	.word	0x20056780
 801f584:	2005677a 	.word	0x2005677a

0801f588 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801f588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f58c:	b085      	sub	sp, #20
 801f58e:	4606      	mov	r6, r0
 801f590:	460c      	mov	r4, r1
 801f592:	4691      	mov	r9, r2
 801f594:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801f598:	4698      	mov	r8, r3
 801f59a:	b31d      	cbz	r5, 801f5e4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801f59c:	4608      	mov	r0, r1
 801f59e:	f7fd f9e3 	bl	801c968 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801f5a2:	4607      	mov	r7, r0
 801f5a4:	4620      	mov	r0, r4
 801f5a6:	f7fd fa19 	bl	801c9dc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801f5aa:	f8ad 000e 	strh.w	r0, [sp, #14]
 801f5ae:	4620      	mov	r0, r4
 801f5b0:	f8ad 9008 	strh.w	r9, [sp, #8]
 801f5b4:	f8ad 800a 	strh.w	r8, [sp, #10]
 801f5b8:	f8ad 700c 	strh.w	r7, [sp, #12]
 801f5bc:	f7fd fad2 	bl	801cb64 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f5c0:	280b      	cmp	r0, #11
 801f5c2:	d838      	bhi.n	801f636 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xae>
 801f5c4:	e8df f000 	tbb	[pc, r0]
 801f5c8:	37062920 	.word	0x37062920
 801f5cc:	37373737 	.word	0x37373737
 801f5d0:	11373737 	.word	0x11373737
 801f5d4:	4620      	mov	r0, r4
 801f5d6:	f7fd fa3b 	bl	801ca50 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f5da:	462b      	mov	r3, r5
 801f5dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f5de:	a902      	add	r1, sp, #8
 801f5e0:	f7ff ff0c 	bl	801f3fc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f5e4:	b005      	add	sp, #20
 801f5e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f5ea:	4620      	mov	r0, r4
 801f5ec:	f7fd fa30 	bl	801ca50 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f5f0:	4606      	mov	r6, r0
 801f5f2:	4620      	mov	r0, r4
 801f5f4:	f7fd fa5e 	bl	801cab4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801f5f8:	9500      	str	r5, [sp, #0]
 801f5fa:	4601      	mov	r1, r0
 801f5fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f5fe:	aa02      	add	r2, sp, #8
 801f600:	4630      	mov	r0, r6
 801f602:	f7ff fde7 	bl	801f1d4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801f606:	e7ed      	b.n	801f5e4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801f608:	4620      	mov	r0, r4
 801f60a:	f7fd fa21 	bl	801ca50 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f60e:	462b      	mov	r3, r5
 801f610:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f612:	a902      	add	r1, sp, #8
 801f614:	f7ff fdfe 	bl	801f214 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801f618:	e7e4      	b.n	801f5e4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801f61a:	6833      	ldr	r3, [r6, #0]
 801f61c:	4620      	mov	r0, r4
 801f61e:	68df      	ldr	r7, [r3, #12]
 801f620:	f7fd fa16 	bl	801ca50 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f624:	2300      	movs	r3, #0
 801f626:	4601      	mov	r1, r0
 801f628:	aa02      	add	r2, sp, #8
 801f62a:	4630      	mov	r0, r6
 801f62c:	e9cd 5300 	strd	r5, r3, [sp]
 801f630:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f632:	47b8      	blx	r7
 801f634:	e7d6      	b.n	801f5e4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801f636:	4b03      	ldr	r3, [pc, #12]	; (801f644 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xbc>)
 801f638:	2147      	movs	r1, #71	; 0x47
 801f63a:	4a03      	ldr	r2, [pc, #12]	; (801f648 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801f63c:	4803      	ldr	r0, [pc, #12]	; (801f64c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801f63e:	f007 f9bf 	bl	80269c0 <__assert_func>
 801f642:	bf00      	nop
 801f644:	0802e81a 	.word	0x0802e81a
 801f648:	0802ef08 	.word	0x0802ef08
 801f64c:	0802e8e9 	.word	0x0802e8e9

0801f650 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801f650:	b570      	push	{r4, r5, r6, lr}
 801f652:	9d04      	ldr	r5, [sp, #16]
 801f654:	460c      	mov	r4, r1
 801f656:	4619      	mov	r1, r3
 801f658:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801f65c:	2a0d      	cmp	r2, #13
 801f65e:	d826      	bhi.n	801f6ae <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801f660:	e8df f002 	tbb	[pc, r2]
 801f664:	200e1407 	.word	0x200e1407
 801f668:	20202020 	.word	0x20202020
 801f66c:	20202020 	.word	0x20202020
 801f670:	2020      	.short	0x2020
 801f672:	4b0f      	ldr	r3, [pc, #60]	; (801f6b0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801f674:	f240 11d3 	movw	r1, #467	; 0x1d3
 801f678:	4a0e      	ldr	r2, [pc, #56]	; (801f6b4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801f67a:	480f      	ldr	r0, [pc, #60]	; (801f6b8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801f67c:	f007 f9a0 	bl	80269c0 <__assert_func>
 801f680:	462a      	mov	r2, r5
 801f682:	4620      	mov	r0, r4
 801f684:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f688:	f7ff beb8 	b.w	801f3fc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f68c:	6802      	ldr	r2, [r0, #0]
 801f68e:	2600      	movs	r6, #0
 801f690:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801f694:	68d6      	ldr	r6, [r2, #12]
 801f696:	462b      	mov	r3, r5
 801f698:	460a      	mov	r2, r1
 801f69a:	4621      	mov	r1, r4
 801f69c:	46b4      	mov	ip, r6
 801f69e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f6a2:	4760      	bx	ip
 801f6a4:	4b05      	ldr	r3, [pc, #20]	; (801f6bc <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801f6a6:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 801f6aa:	4a02      	ldr	r2, [pc, #8]	; (801f6b4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801f6ac:	e7e5      	b.n	801f67a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801f6ae:	bd70      	pop	{r4, r5, r6, pc}
 801f6b0:	0802eac0 	.word	0x0802eac0
 801f6b4:	0802f1f0 	.word	0x0802f1f0
 801f6b8:	0802e8e9 	.word	0x0802e8e9
 801f6bc:	0802eb01 	.word	0x0802eb01

0801f6c0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801f6c0:	b158      	cbz	r0, 801f6da <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801f6c2:	2902      	cmp	r1, #2
 801f6c4:	d00f      	beq.n	801f6e6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801f6c6:	2903      	cmp	r1, #3
 801f6c8:	d010      	beq.n	801f6ec <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801f6ca:	2901      	cmp	r1, #1
 801f6cc:	d101      	bne.n	801f6d2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801f6ce:	2001      	movs	r0, #1
 801f6d0:	4770      	bx	lr
 801f6d2:	4b08      	ldr	r3, [pc, #32]	; (801f6f4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801f6d4:	8819      	ldrh	r1, [r3, #0]
 801f6d6:	4248      	negs	r0, r1
 801f6d8:	4770      	bx	lr
 801f6da:	2902      	cmp	r1, #2
 801f6dc:	d006      	beq.n	801f6ec <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801f6de:	2903      	cmp	r1, #3
 801f6e0:	d0f7      	beq.n	801f6d2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801f6e2:	2901      	cmp	r1, #1
 801f6e4:	d1f3      	bne.n	801f6ce <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801f6e6:	4b03      	ldr	r3, [pc, #12]	; (801f6f4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801f6e8:	8818      	ldrh	r0, [r3, #0]
 801f6ea:	4770      	bx	lr
 801f6ec:	f04f 30ff 	mov.w	r0, #4294967295
 801f6f0:	4770      	bx	lr
 801f6f2:	bf00      	nop
 801f6f4:	2005677a 	.word	0x2005677a

0801f6f8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801f6f8:	b170      	cbz	r0, 801f718 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801f6fa:	2902      	cmp	r1, #2
 801f6fc:	d012      	beq.n	801f724 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801f6fe:	2903      	cmp	r1, #3
 801f700:	d006      	beq.n	801f710 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801f702:	2901      	cmp	r1, #1
 801f704:	d001      	beq.n	801f70a <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801f706:	2001      	movs	r0, #1
 801f708:	4770      	bx	lr
 801f70a:	4b08      	ldr	r3, [pc, #32]	; (801f72c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801f70c:	8818      	ldrh	r0, [r3, #0]
 801f70e:	4770      	bx	lr
 801f710:	4b06      	ldr	r3, [pc, #24]	; (801f72c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801f712:	8818      	ldrh	r0, [r3, #0]
 801f714:	4240      	negs	r0, r0
 801f716:	4770      	bx	lr
 801f718:	2902      	cmp	r1, #2
 801f71a:	d0f9      	beq.n	801f710 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801f71c:	2903      	cmp	r1, #3
 801f71e:	d0f2      	beq.n	801f706 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801f720:	2901      	cmp	r1, #1
 801f722:	d1f2      	bne.n	801f70a <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801f724:	f04f 30ff 	mov.w	r0, #4294967295
 801f728:	4770      	bx	lr
 801f72a:	bf00      	nop
 801f72c:	2005677a 	.word	0x2005677a

0801f730 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801f730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f734:	b095      	sub	sp, #84	; 0x54
 801f736:	9109      	str	r1, [sp, #36]	; 0x24
 801f738:	a910      	add	r1, sp, #64	; 0x40
 801f73a:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 801f73e:	f8bd 7080 	ldrh.w	r7, [sp, #128]	; 0x80
 801f742:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 801f746:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 801f74a:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 801f74e:	e881 000c 	stmia.w	r1, {r2, r3}
 801f752:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 801f756:	9308      	str	r3, [sp, #32]
 801f758:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801f75c:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 801f760:	930f      	str	r3, [sp, #60]	; 0x3c
 801f762:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 801f766:	798d      	ldrb	r5, [r1, #6]
 801f768:	930a      	str	r3, [sp, #40]	; 0x28
 801f76a:	7b4b      	ldrb	r3, [r1, #13]
 801f76c:	0158      	lsls	r0, r3, #5
 801f76e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801f772:	4328      	orrs	r0, r5
 801f774:	9007      	str	r0, [sp, #28]
 801f776:	f000 817a 	beq.w	801fa6e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801f77a:	011b      	lsls	r3, r3, #4
 801f77c:	79c8      	ldrb	r0, [r1, #7]
 801f77e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f782:	4303      	orrs	r3, r0
 801f784:	930c      	str	r3, [sp, #48]	; 0x30
 801f786:	f000 8172 	beq.w	801fa6e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801f78a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801f78e:	b29b      	uxth	r3, r3
 801f790:	2f00      	cmp	r7, #0
 801f792:	f000 8117 	beq.w	801f9c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x294>
 801f796:	1aff      	subs	r7, r7, r3
 801f798:	b2bf      	uxth	r7, r7
 801f79a:	043b      	lsls	r3, r7, #16
 801f79c:	d502      	bpl.n	801f7a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801f79e:	1bf6      	subs	r6, r6, r7
 801f7a0:	2700      	movs	r7, #0
 801f7a2:	b236      	sxth	r6, r6
 801f7a4:	f9b2 1000 	ldrsh.w	r1, [r2]
 801f7a8:	a810      	add	r0, sp, #64	; 0x40
 801f7aa:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801f7ae:	428e      	cmp	r6, r1
 801f7b0:	b28b      	uxth	r3, r1
 801f7b2:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 801f7b6:	bfbf      	itttt	lt
 801f7b8:	18ff      	addlt	r7, r7, r3
 801f7ba:	1bbe      	sublt	r6, r7, r6
 801f7bc:	b2b7      	uxthlt	r7, r6
 801f7be:	460e      	movlt	r6, r1
 801f7c0:	8891      	ldrh	r1, [r2, #4]
 801f7c2:	440b      	add	r3, r1
 801f7c4:	4631      	mov	r1, r6
 801f7c6:	b21b      	sxth	r3, r3
 801f7c8:	930e      	str	r3, [sp, #56]	; 0x38
 801f7ca:	88d3      	ldrh	r3, [r2, #6]
 801f7cc:	9a08      	ldr	r2, [sp, #32]
 801f7ce:	449a      	add	sl, r3
 801f7d0:	fa0f f38a 	sxth.w	r3, sl
 801f7d4:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
 801f7d8:	930d      	str	r3, [sp, #52]	; 0x34
 801f7da:	4bb4      	ldr	r3, [pc, #720]	; (801faac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 801f7dc:	f893 b000 	ldrb.w	fp, [r3]
 801f7e0:	f10b 3cff 	add.w	ip, fp, #4294967295
 801f7e4:	f1dc 0300 	rsbs	r3, ip, #0
 801f7e8:	eb43 030c 	adc.w	r3, r3, ip
 801f7ec:	930b      	str	r3, [sp, #44]	; 0x2c
 801f7ee:	464b      	mov	r3, r9
 801f7f0:	f7f9 fcd3 	bl	801919a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801f7f4:	4631      	mov	r1, r6
 801f7f6:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 801f7fa:	464b      	mov	r3, r9
 801f7fc:	9a08      	ldr	r2, [sp, #32]
 801f7fe:	a810      	add	r0, sp, #64	; 0x40
 801f800:	f7f9 fce3 	bl	80191ca <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801f804:	a914      	add	r1, sp, #80	; 0x50
 801f806:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801f80a:	a813      	add	r0, sp, #76	; 0x4c
 801f80c:	f7f9 fe3e 	bl	801948c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801f810:	f1b9 0f00 	cmp.w	r9, #0
 801f814:	f040 80d9 	bne.w	801f9ca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29a>
 801f818:	f1bb 0f01 	cmp.w	fp, #1
 801f81c:	f040 80dd 	bne.w	801f9da <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 801f820:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f822:	b153      	cbz	r3, 801f83a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801f824:	2508      	movs	r5, #8
 801f826:	9a07      	ldr	r2, [sp, #28]
 801f828:	fb95 f3f8 	sdiv	r3, r5, r8
 801f82c:	1e5d      	subs	r5, r3, #1
 801f82e:	4415      	add	r5, r2
 801f830:	fb95 f5f3 	sdiv	r5, r5, r3
 801f834:	fb15 f503 	smulbb	r5, r5, r3
 801f838:	b2ad      	uxth	r5, r5
 801f83a:	b907      	cbnz	r7, 801f83e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801f83c:	b16c      	cbz	r4, 801f85a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801f83e:	fb04 7305 	mla	r3, r4, r5, r7
 801f842:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801f844:	ebaa 0a04 	sub.w	sl, sl, r4
 801f848:	fb08 f303 	mul.w	r3, r8, r3
 801f84c:	fa1f fa8a 	uxth.w	sl, sl
 801f850:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801f854:	f003 0407 	and.w	r4, r3, #7
 801f858:	9224      	str	r2, [sp, #144]	; 0x90
 801f85a:	4649      	mov	r1, r9
 801f85c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f85e:	f7ff ff2f 	bl	801f6c0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801f862:	4649      	mov	r1, r9
 801f864:	4683      	mov	fp, r0
 801f866:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f868:	f7ff ff46 	bl	801f6f8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801f86c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f86e:	9a08      	ldr	r2, [sp, #32]
 801f870:	4681      	mov	r9, r0
 801f872:	1a9b      	subs	r3, r3, r2
 801f874:	459a      	cmp	sl, r3
 801f876:	bfa8      	it	ge
 801f878:	469a      	movge	sl, r3
 801f87a:	f1ba 0f00 	cmp.w	sl, #0
 801f87e:	f340 80f6 	ble.w	801fa6e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801f882:	1bf6      	subs	r6, r6, r7
 801f884:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f886:	1b9e      	subs	r6, r3, r6
 801f888:	9b07      	ldr	r3, [sp, #28]
 801f88a:	429e      	cmp	r6, r3
 801f88c:	bfd4      	ite	le
 801f88e:	ebc7 0706 	rsble	r7, r7, r6
 801f892:	ebc7 0703 	rsbgt	r7, r7, r3
 801f896:	2f00      	cmp	r7, #0
 801f898:	f340 80e9 	ble.w	801fa6e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801f89c:	1bed      	subs	r5, r5, r7
 801f89e:	fb08 f305 	mul.w	r3, r8, r5
 801f8a2:	930b      	str	r3, [sp, #44]	; 0x2c
 801f8a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f8a6:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801f8aa:	930c      	str	r3, [sp, #48]	; 0x30
 801f8ac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f8ae:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f8b2:	930d      	str	r3, [sp, #52]	; 0x34
 801f8b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f8b6:	b2db      	uxtb	r3, r3
 801f8b8:	930e      	str	r3, [sp, #56]	; 0x38
 801f8ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f8bc:	2b00      	cmp	r3, #0
 801f8be:	f040 80db 	bne.w	801fa78 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801f8c2:	4b7b      	ldr	r3, [pc, #492]	; (801fab0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801f8c4:	6818      	ldr	r0, [r3, #0]
 801f8c6:	6803      	ldr	r3, [r0, #0]
 801f8c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f8ca:	4798      	blx	r3
 801f8cc:	2301      	movs	r3, #1
 801f8ce:	4a79      	ldr	r2, [pc, #484]	; (801fab4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801f8d0:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801f8d4:	fb07 9b1b 	mls	fp, r7, fp, r9
 801f8d8:	fa03 f308 	lsl.w	r3, r3, r8
 801f8dc:	8811      	ldrh	r1, [r2, #0]
 801f8de:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801f8e2:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801f8e6:	3b01      	subs	r3, #1
 801f8e8:	fb06 bb07 	mla	fp, r6, r7, fp
 801f8ec:	b2db      	uxtb	r3, r3
 801f8ee:	9308      	str	r3, [sp, #32]
 801f8f0:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801f8f4:	fb01 2303 	mla	r3, r1, r3, r2
 801f8f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f8fc:	18c3      	adds	r3, r0, r3
 801f8fe:	9307      	str	r3, [sp, #28]
 801f900:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f902:	781a      	ldrb	r2, [r3, #0]
 801f904:	4122      	asrs	r2, r4
 801f906:	b2d2      	uxtb	r2, r2
 801f908:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801f90c:	f0c0 80d4 	bcc.w	801fab8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>
 801f910:	46be      	mov	lr, r7
 801f912:	9907      	ldr	r1, [sp, #28]
 801f914:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801f918:	f0c0 80b7 	bcc.w	801fa8a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35a>
 801f91c:	9b08      	ldr	r3, [sp, #32]
 801f91e:	4013      	ands	r3, r2
 801f920:	d041      	beq.n	801f9a6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 801f922:	20ff      	movs	r0, #255	; 0xff
 801f924:	9d08      	ldr	r5, [sp, #32]
 801f926:	fb90 f5f5 	sdiv	r5, r0, r5
 801f92a:	436b      	muls	r3, r5
 801f92c:	2bfe      	cmp	r3, #254	; 0xfe
 801f92e:	dd03      	ble.n	801f938 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 801f930:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801f932:	4285      	cmp	r5, r0
 801f934:	f000 80a2 	beq.w	801fa7c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801f938:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801f93a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801f93c:	fb15 f303 	smulbb	r3, r5, r3
 801f940:	b29b      	uxth	r3, r3
 801f942:	1c5d      	adds	r5, r3, #1
 801f944:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801f948:	780d      	ldrb	r5, [r1, #0]
 801f94a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f94e:	fa1f fc83 	uxth.w	ip, r3
 801f952:	43db      	mvns	r3, r3
 801f954:	fb10 f90c 	smulbb	r9, r0, ip
 801f958:	b2db      	uxtb	r3, r3
 801f95a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801f95c:	fb05 9503 	mla	r5, r5, r3, r9
 801f960:	b2ad      	uxth	r5, r5
 801f962:	f105 0901 	add.w	r9, r5, #1
 801f966:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801f96a:	fb10 f90c 	smulbb	r9, r0, ip
 801f96e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f970:	122d      	asrs	r5, r5, #8
 801f972:	fb10 fc0c 	smulbb	ip, r0, ip
 801f976:	700d      	strb	r5, [r1, #0]
 801f978:	784d      	ldrb	r5, [r1, #1]
 801f97a:	fb05 9503 	mla	r5, r5, r3, r9
 801f97e:	b2ad      	uxth	r5, r5
 801f980:	f105 0901 	add.w	r9, r5, #1
 801f984:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801f988:	122d      	asrs	r5, r5, #8
 801f98a:	704d      	strb	r5, [r1, #1]
 801f98c:	788d      	ldrb	r5, [r1, #2]
 801f98e:	fb05 cc03 	mla	ip, r5, r3, ip
 801f992:	fa1f fc8c 	uxth.w	ip, ip
 801f996:	f10c 0301 	add.w	r3, ip, #1
 801f99a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f99e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f9a2:	f881 c002 	strb.w	ip, [r1, #2]
 801f9a6:	4444      	add	r4, r8
 801f9a8:	4431      	add	r1, r6
 801f9aa:	b2a4      	uxth	r4, r4
 801f9ac:	2c07      	cmp	r4, #7
 801f9ae:	bf89      	itett	hi
 801f9b0:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 801f9b2:	fa42 f208 	asrls.w	r2, r2, r8
 801f9b6:	2400      	movhi	r4, #0
 801f9b8:	785a      	ldrbhi	r2, [r3, #1]
 801f9ba:	bf8a      	itet	hi
 801f9bc:	3301      	addhi	r3, #1
 801f9be:	b2d2      	uxtbls	r2, r2
 801f9c0:	9324      	strhi	r3, [sp, #144]	; 0x90
 801f9c2:	e7a7      	b.n	801f914 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e4>
 801f9c4:	441e      	add	r6, r3
 801f9c6:	b236      	sxth	r6, r6
 801f9c8:	e6ec      	b.n	801f7a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801f9ca:	f1b9 0f01 	cmp.w	r9, #1
 801f9ce:	f47f af27 	bne.w	801f820 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f9d2:	f1bb 0f01 	cmp.w	fp, #1
 801f9d6:	f47f af23 	bne.w	801f820 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f9da:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 801fab0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801f9de:	f8db 0000 	ldr.w	r0, [fp]
 801f9e2:	6803      	ldr	r3, [r0, #0]
 801f9e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f9e6:	4798      	blx	r3
 801f9e8:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801f9ec:	465a      	mov	r2, fp
 801f9ee:	d006      	beq.n	801f9fe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801f9f0:	f1b8 0f04 	cmp.w	r8, #4
 801f9f4:	d13e      	bne.n	801fa74 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801f9f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f9f8:	3300      	adds	r3, #0
 801f9fa:	bf18      	it	ne
 801f9fc:	2301      	movne	r3, #1
 801f9fe:	0580      	lsls	r0, r0, #22
 801fa00:	d563      	bpl.n	801faca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801fa02:	f1b8 0f08 	cmp.w	r8, #8
 801fa06:	d160      	bne.n	801faca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801fa08:	2b00      	cmp	r3, #0
 801fa0a:	bf0c      	ite	eq
 801fa0c:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801fa10:	f44f 7180 	movne.w	r1, #256	; 0x100
 801fa14:	2f00      	cmp	r7, #0
 801fa16:	f47f af03 	bne.w	801f820 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fa1a:	2c00      	cmp	r4, #0
 801fa1c:	f47f af00 	bne.w	801f820 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fa20:	9b07      	ldr	r3, [sp, #28]
 801fa22:	980e      	ldr	r0, [sp, #56]	; 0x38
 801fa24:	18f3      	adds	r3, r6, r3
 801fa26:	4283      	cmp	r3, r0
 801fa28:	f73f aefa 	bgt.w	801f820 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fa2c:	9808      	ldr	r0, [sp, #32]
 801fa2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fa30:	4403      	add	r3, r0
 801fa32:	980d      	ldr	r0, [sp, #52]	; 0x34
 801fa34:	4283      	cmp	r3, r0
 801fa36:	f73f aef3 	bgt.w	801f820 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fa3a:	f1b8 0f08 	cmp.w	r8, #8
 801fa3e:	6810      	ldr	r0, [r2, #0]
 801fa40:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801fa44:	bf18      	it	ne
 801fa46:	3501      	addne	r5, #1
 801fa48:	6804      	ldr	r4, [r0, #0]
 801fa4a:	9105      	str	r1, [sp, #20]
 801fa4c:	bf18      	it	ne
 801fa4e:	f025 0501 	bicne.w	r5, r5, #1
 801fa52:	990a      	ldr	r1, [sp, #40]	; 0x28
 801fa54:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 801fa58:	bf18      	it	ne
 801fa5a:	b2ad      	uxthne	r5, r5
 801fa5c:	9104      	str	r1, [sp, #16]
 801fa5e:	9926      	ldr	r1, [sp, #152]	; 0x98
 801fa60:	e9cd 5a00 	strd	r5, sl, [sp]
 801fa64:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801fa68:	9924      	ldr	r1, [sp, #144]	; 0x90
 801fa6a:	6d24      	ldr	r4, [r4, #80]	; 0x50
 801fa6c:	47a0      	blx	r4
 801fa6e:	b015      	add	sp, #84	; 0x54
 801fa70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa74:	2300      	movs	r3, #0
 801fa76:	e7c2      	b.n	801f9fe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801fa78:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fa7a:	e727      	b.n	801f8cc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19c>
 801fa7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fa7e:	700b      	strb	r3, [r1, #0]
 801fa80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fa82:	704b      	strb	r3, [r1, #1]
 801fa84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fa86:	708b      	strb	r3, [r1, #2]
 801fa88:	e78d      	b.n	801f9a6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 801fa8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fa8c:	b153      	cbz	r3, 801faa4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801fa8e:	441c      	add	r4, r3
 801fa90:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fa92:	b2a4      	uxth	r4, r4
 801fa94:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801fa98:	f004 0407 	and.w	r4, r4, #7
 801fa9c:	781a      	ldrb	r2, [r3, #0]
 801fa9e:	9324      	str	r3, [sp, #144]	; 0x90
 801faa0:	4122      	asrs	r2, r4
 801faa2:	b2d2      	uxtb	r2, r2
 801faa4:	9b07      	ldr	r3, [sp, #28]
 801faa6:	445b      	add	r3, fp
 801faa8:	9307      	str	r3, [sp, #28]
 801faaa:	e72d      	b.n	801f908 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d8>
 801faac:	20056778 	.word	0x20056778
 801fab0:	20056780 	.word	0x20056780
 801fab4:	2005677a 	.word	0x2005677a
 801fab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801faba:	2b00      	cmp	r3, #0
 801fabc:	d1d7      	bne.n	801fa6e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801fabe:	4b06      	ldr	r3, [pc, #24]	; (801fad8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801fac0:	6818      	ldr	r0, [r3, #0]
 801fac2:	6803      	ldr	r3, [r0, #0]
 801fac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fac6:	4798      	blx	r3
 801fac8:	e7d1      	b.n	801fa6e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801faca:	2b00      	cmp	r3, #0
 801facc:	f43f aea8 	beq.w	801f820 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fad0:	f44f 7180 	mov.w	r1, #256	; 0x100
 801fad4:	e79e      	b.n	801fa14 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 801fad6:	bf00      	nop
 801fad8:	20056780 	.word	0x20056780

0801fadc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801fadc:	b538      	push	{r3, r4, r5, lr}
 801fade:	4c15      	ldr	r4, [pc, #84]	; (801fb34 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801fae0:	4605      	mov	r5, r0
 801fae2:	7823      	ldrb	r3, [r4, #0]
 801fae4:	f3bf 8f5b 	dmb	ish
 801fae8:	07da      	lsls	r2, r3, #31
 801faea:	d40b      	bmi.n	801fb04 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801faec:	4620      	mov	r0, r4
 801faee:	f006 fe34 	bl	802675a <__cxa_guard_acquire>
 801faf2:	b138      	cbz	r0, 801fb04 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801faf4:	4620      	mov	r0, r4
 801faf6:	f006 fe3c 	bl	8026772 <__cxa_guard_release>
 801fafa:	4a0f      	ldr	r2, [pc, #60]	; (801fb38 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801fafc:	490f      	ldr	r1, [pc, #60]	; (801fb3c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801fafe:	4810      	ldr	r0, [pc, #64]	; (801fb40 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801fb00:	f006 fe24 	bl	802674c <__aeabi_atexit>
 801fb04:	4c0f      	ldr	r4, [pc, #60]	; (801fb44 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801fb06:	7823      	ldrb	r3, [r4, #0]
 801fb08:	f3bf 8f5b 	dmb	ish
 801fb0c:	07db      	lsls	r3, r3, #31
 801fb0e:	d40b      	bmi.n	801fb28 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801fb10:	4620      	mov	r0, r4
 801fb12:	f006 fe22 	bl	802675a <__cxa_guard_acquire>
 801fb16:	b138      	cbz	r0, 801fb28 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801fb18:	4620      	mov	r0, r4
 801fb1a:	f006 fe2a 	bl	8026772 <__cxa_guard_release>
 801fb1e:	4a06      	ldr	r2, [pc, #24]	; (801fb38 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801fb20:	4909      	ldr	r1, [pc, #36]	; (801fb48 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801fb22:	480a      	ldr	r0, [pc, #40]	; (801fb4c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801fb24:	f006 fe12 	bl	802674c <__aeabi_atexit>
 801fb28:	4b05      	ldr	r3, [pc, #20]	; (801fb40 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801fb2a:	612b      	str	r3, [r5, #16]
 801fb2c:	4b07      	ldr	r3, [pc, #28]	; (801fb4c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801fb2e:	616b      	str	r3, [r5, #20]
 801fb30:	bd38      	pop	{r3, r4, r5, pc}
 801fb32:	bf00      	nop
 801fb34:	2005686c 	.word	0x2005686c
 801fb38:	20000000 	.word	0x20000000
 801fb3c:	0801e427 	.word	0x0801e427
 801fb40:	20000068 	.word	0x20000068
 801fb44:	20056870 	.word	0x20056870
 801fb48:	0801e425 	.word	0x0801e425
 801fb4c:	2000006c 	.word	0x2000006c

0801fb50 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801fb50:	b538      	push	{r3, r4, r5, lr}
 801fb52:	4c15      	ldr	r4, [pc, #84]	; (801fba8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801fb54:	4605      	mov	r5, r0
 801fb56:	7823      	ldrb	r3, [r4, #0]
 801fb58:	f3bf 8f5b 	dmb	ish
 801fb5c:	07da      	lsls	r2, r3, #31
 801fb5e:	d40b      	bmi.n	801fb78 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801fb60:	4620      	mov	r0, r4
 801fb62:	f006 fdfa 	bl	802675a <__cxa_guard_acquire>
 801fb66:	b138      	cbz	r0, 801fb78 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801fb68:	4620      	mov	r0, r4
 801fb6a:	f006 fe02 	bl	8026772 <__cxa_guard_release>
 801fb6e:	4a0f      	ldr	r2, [pc, #60]	; (801fbac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801fb70:	490f      	ldr	r1, [pc, #60]	; (801fbb0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801fb72:	4810      	ldr	r0, [pc, #64]	; (801fbb4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801fb74:	f006 fdea 	bl	802674c <__aeabi_atexit>
 801fb78:	4c0f      	ldr	r4, [pc, #60]	; (801fbb8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801fb7a:	7823      	ldrb	r3, [r4, #0]
 801fb7c:	f3bf 8f5b 	dmb	ish
 801fb80:	07db      	lsls	r3, r3, #31
 801fb82:	d40b      	bmi.n	801fb9c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801fb84:	4620      	mov	r0, r4
 801fb86:	f006 fde8 	bl	802675a <__cxa_guard_acquire>
 801fb8a:	b138      	cbz	r0, 801fb9c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801fb8c:	4620      	mov	r0, r4
 801fb8e:	f006 fdf0 	bl	8026772 <__cxa_guard_release>
 801fb92:	4a06      	ldr	r2, [pc, #24]	; (801fbac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801fb94:	4909      	ldr	r1, [pc, #36]	; (801fbbc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801fb96:	480a      	ldr	r0, [pc, #40]	; (801fbc0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801fb98:	f006 fdd8 	bl	802674c <__aeabi_atexit>
 801fb9c:	4b05      	ldr	r3, [pc, #20]	; (801fbb4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801fb9e:	60ab      	str	r3, [r5, #8]
 801fba0:	4b07      	ldr	r3, [pc, #28]	; (801fbc0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801fba2:	60eb      	str	r3, [r5, #12]
 801fba4:	bd38      	pop	{r3, r4, r5, pc}
 801fba6:	bf00      	nop
 801fba8:	2005684c 	.word	0x2005684c
 801fbac:	20000000 	.word	0x20000000
 801fbb0:	0801e42b 	.word	0x0801e42b
 801fbb4:	20000048 	.word	0x20000048
 801fbb8:	20056850 	.word	0x20056850
 801fbbc:	0801e429 	.word	0x0801e429
 801fbc0:	2000004c 	.word	0x2000004c

0801fbc4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801fbc4:	b510      	push	{r4, lr}
 801fbc6:	4604      	mov	r4, r0
 801fbc8:	f7ff ff88 	bl	801fadc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801fbcc:	4620      	mov	r0, r4
 801fbce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fbd2:	f7ff bfbd 	b.w	801fb50 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801fbd8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801fbd8:	b538      	push	{r3, r4, r5, lr}
 801fbda:	4c15      	ldr	r4, [pc, #84]	; (801fc30 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801fbdc:	4605      	mov	r5, r0
 801fbde:	7823      	ldrb	r3, [r4, #0]
 801fbe0:	f3bf 8f5b 	dmb	ish
 801fbe4:	07da      	lsls	r2, r3, #31
 801fbe6:	d40b      	bmi.n	801fc00 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801fbe8:	4620      	mov	r0, r4
 801fbea:	f006 fdb6 	bl	802675a <__cxa_guard_acquire>
 801fbee:	b138      	cbz	r0, 801fc00 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801fbf0:	4620      	mov	r0, r4
 801fbf2:	f006 fdbe 	bl	8026772 <__cxa_guard_release>
 801fbf6:	4a0f      	ldr	r2, [pc, #60]	; (801fc34 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801fbf8:	490f      	ldr	r1, [pc, #60]	; (801fc38 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801fbfa:	4810      	ldr	r0, [pc, #64]	; (801fc3c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801fbfc:	f006 fda6 	bl	802674c <__aeabi_atexit>
 801fc00:	4c0f      	ldr	r4, [pc, #60]	; (801fc40 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801fc02:	7823      	ldrb	r3, [r4, #0]
 801fc04:	f3bf 8f5b 	dmb	ish
 801fc08:	07db      	lsls	r3, r3, #31
 801fc0a:	d40b      	bmi.n	801fc24 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801fc0c:	4620      	mov	r0, r4
 801fc0e:	f006 fda4 	bl	802675a <__cxa_guard_acquire>
 801fc12:	b138      	cbz	r0, 801fc24 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801fc14:	4620      	mov	r0, r4
 801fc16:	f006 fdac 	bl	8026772 <__cxa_guard_release>
 801fc1a:	4a06      	ldr	r2, [pc, #24]	; (801fc34 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801fc1c:	4909      	ldr	r1, [pc, #36]	; (801fc44 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801fc1e:	480a      	ldr	r0, [pc, #40]	; (801fc48 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801fc20:	f006 fd94 	bl	802674c <__aeabi_atexit>
 801fc24:	4b05      	ldr	r3, [pc, #20]	; (801fc3c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801fc26:	622b      	str	r3, [r5, #32]
 801fc28:	4b07      	ldr	r3, [pc, #28]	; (801fc48 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801fc2a:	626b      	str	r3, [r5, #36]	; 0x24
 801fc2c:	bd38      	pop	{r3, r4, r5, pc}
 801fc2e:	bf00      	nop
 801fc30:	20056874 	.word	0x20056874
 801fc34:	20000000 	.word	0x20000000
 801fc38:	0801e41f 	.word	0x0801e41f
 801fc3c:	20000070 	.word	0x20000070
 801fc40:	20056878 	.word	0x20056878
 801fc44:	0801e41d 	.word	0x0801e41d
 801fc48:	20000074 	.word	0x20000074

0801fc4c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801fc4c:	b538      	push	{r3, r4, r5, lr}
 801fc4e:	4c15      	ldr	r4, [pc, #84]	; (801fca4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801fc50:	4605      	mov	r5, r0
 801fc52:	7823      	ldrb	r3, [r4, #0]
 801fc54:	f3bf 8f5b 	dmb	ish
 801fc58:	07da      	lsls	r2, r3, #31
 801fc5a:	d40b      	bmi.n	801fc74 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801fc5c:	4620      	mov	r0, r4
 801fc5e:	f006 fd7c 	bl	802675a <__cxa_guard_acquire>
 801fc62:	b138      	cbz	r0, 801fc74 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801fc64:	4620      	mov	r0, r4
 801fc66:	f006 fd84 	bl	8026772 <__cxa_guard_release>
 801fc6a:	4a0f      	ldr	r2, [pc, #60]	; (801fca8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801fc6c:	490f      	ldr	r1, [pc, #60]	; (801fcac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801fc6e:	4810      	ldr	r0, [pc, #64]	; (801fcb0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801fc70:	f006 fd6c 	bl	802674c <__aeabi_atexit>
 801fc74:	4c0f      	ldr	r4, [pc, #60]	; (801fcb4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801fc76:	7823      	ldrb	r3, [r4, #0]
 801fc78:	f3bf 8f5b 	dmb	ish
 801fc7c:	07db      	lsls	r3, r3, #31
 801fc7e:	d40b      	bmi.n	801fc98 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801fc80:	4620      	mov	r0, r4
 801fc82:	f006 fd6a 	bl	802675a <__cxa_guard_acquire>
 801fc86:	b138      	cbz	r0, 801fc98 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801fc88:	4620      	mov	r0, r4
 801fc8a:	f006 fd72 	bl	8026772 <__cxa_guard_release>
 801fc8e:	4a06      	ldr	r2, [pc, #24]	; (801fca8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801fc90:	4909      	ldr	r1, [pc, #36]	; (801fcb8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801fc92:	480a      	ldr	r0, [pc, #40]	; (801fcbc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801fc94:	f006 fd5a 	bl	802674c <__aeabi_atexit>
 801fc98:	4b05      	ldr	r3, [pc, #20]	; (801fcb0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801fc9a:	61ab      	str	r3, [r5, #24]
 801fc9c:	4b07      	ldr	r3, [pc, #28]	; (801fcbc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801fc9e:	61eb      	str	r3, [r5, #28]
 801fca0:	bd38      	pop	{r3, r4, r5, pc}
 801fca2:	bf00      	nop
 801fca4:	20056854 	.word	0x20056854
 801fca8:	20000000 	.word	0x20000000
 801fcac:	0801e423 	.word	0x0801e423
 801fcb0:	20000050 	.word	0x20000050
 801fcb4:	20056858 	.word	0x20056858
 801fcb8:	0801e421 	.word	0x0801e421
 801fcbc:	20000054 	.word	0x20000054

0801fcc0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801fcc0:	b510      	push	{r4, lr}
 801fcc2:	4604      	mov	r4, r0
 801fcc4:	f7ff ff88 	bl	801fbd8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801fcc8:	4620      	mov	r0, r4
 801fcca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fcce:	f7ff bfbd 	b.w	801fc4c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801fcd4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801fcd4:	b538      	push	{r3, r4, r5, lr}
 801fcd6:	4c15      	ldr	r4, [pc, #84]	; (801fd2c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801fcd8:	4605      	mov	r5, r0
 801fcda:	7823      	ldrb	r3, [r4, #0]
 801fcdc:	f3bf 8f5b 	dmb	ish
 801fce0:	07da      	lsls	r2, r3, #31
 801fce2:	d40b      	bmi.n	801fcfc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801fce4:	4620      	mov	r0, r4
 801fce6:	f006 fd38 	bl	802675a <__cxa_guard_acquire>
 801fcea:	b138      	cbz	r0, 801fcfc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801fcec:	4620      	mov	r0, r4
 801fcee:	f006 fd40 	bl	8026772 <__cxa_guard_release>
 801fcf2:	4a0f      	ldr	r2, [pc, #60]	; (801fd30 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801fcf4:	490f      	ldr	r1, [pc, #60]	; (801fd34 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801fcf6:	4810      	ldr	r0, [pc, #64]	; (801fd38 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801fcf8:	f006 fd28 	bl	802674c <__aeabi_atexit>
 801fcfc:	4c0f      	ldr	r4, [pc, #60]	; (801fd3c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801fcfe:	7823      	ldrb	r3, [r4, #0]
 801fd00:	f3bf 8f5b 	dmb	ish
 801fd04:	07db      	lsls	r3, r3, #31
 801fd06:	d40b      	bmi.n	801fd20 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801fd08:	4620      	mov	r0, r4
 801fd0a:	f006 fd26 	bl	802675a <__cxa_guard_acquire>
 801fd0e:	b138      	cbz	r0, 801fd20 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801fd10:	4620      	mov	r0, r4
 801fd12:	f006 fd2e 	bl	8026772 <__cxa_guard_release>
 801fd16:	4a06      	ldr	r2, [pc, #24]	; (801fd30 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801fd18:	4909      	ldr	r1, [pc, #36]	; (801fd40 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801fd1a:	480a      	ldr	r0, [pc, #40]	; (801fd44 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801fd1c:	f006 fd16 	bl	802674c <__aeabi_atexit>
 801fd20:	4b05      	ldr	r3, [pc, #20]	; (801fd38 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801fd22:	632b      	str	r3, [r5, #48]	; 0x30
 801fd24:	4b07      	ldr	r3, [pc, #28]	; (801fd44 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801fd26:	636b      	str	r3, [r5, #52]	; 0x34
 801fd28:	bd38      	pop	{r3, r4, r5, pc}
 801fd2a:	bf00      	nop
 801fd2c:	2005685c 	.word	0x2005685c
 801fd30:	20000000 	.word	0x20000000
 801fd34:	0801e417 	.word	0x0801e417
 801fd38:	20000058 	.word	0x20000058
 801fd3c:	20056860 	.word	0x20056860
 801fd40:	0801e415 	.word	0x0801e415
 801fd44:	2000005c 	.word	0x2000005c

0801fd48 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801fd48:	b538      	push	{r3, r4, r5, lr}
 801fd4a:	4c15      	ldr	r4, [pc, #84]	; (801fda0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801fd4c:	4605      	mov	r5, r0
 801fd4e:	7823      	ldrb	r3, [r4, #0]
 801fd50:	f3bf 8f5b 	dmb	ish
 801fd54:	07da      	lsls	r2, r3, #31
 801fd56:	d40b      	bmi.n	801fd70 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801fd58:	4620      	mov	r0, r4
 801fd5a:	f006 fcfe 	bl	802675a <__cxa_guard_acquire>
 801fd5e:	b138      	cbz	r0, 801fd70 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801fd60:	4620      	mov	r0, r4
 801fd62:	f006 fd06 	bl	8026772 <__cxa_guard_release>
 801fd66:	4a0f      	ldr	r2, [pc, #60]	; (801fda4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801fd68:	490f      	ldr	r1, [pc, #60]	; (801fda8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801fd6a:	4810      	ldr	r0, [pc, #64]	; (801fdac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801fd6c:	f006 fcee 	bl	802674c <__aeabi_atexit>
 801fd70:	4c0f      	ldr	r4, [pc, #60]	; (801fdb0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801fd72:	7823      	ldrb	r3, [r4, #0]
 801fd74:	f3bf 8f5b 	dmb	ish
 801fd78:	07db      	lsls	r3, r3, #31
 801fd7a:	d40b      	bmi.n	801fd94 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801fd7c:	4620      	mov	r0, r4
 801fd7e:	f006 fcec 	bl	802675a <__cxa_guard_acquire>
 801fd82:	b138      	cbz	r0, 801fd94 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801fd84:	4620      	mov	r0, r4
 801fd86:	f006 fcf4 	bl	8026772 <__cxa_guard_release>
 801fd8a:	4a06      	ldr	r2, [pc, #24]	; (801fda4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801fd8c:	4909      	ldr	r1, [pc, #36]	; (801fdb4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801fd8e:	480a      	ldr	r0, [pc, #40]	; (801fdb8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801fd90:	f006 fcdc 	bl	802674c <__aeabi_atexit>
 801fd94:	4b05      	ldr	r3, [pc, #20]	; (801fdac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801fd96:	62ab      	str	r3, [r5, #40]	; 0x28
 801fd98:	4b07      	ldr	r3, [pc, #28]	; (801fdb8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801fd9a:	62eb      	str	r3, [r5, #44]	; 0x2c
 801fd9c:	bd38      	pop	{r3, r4, r5, pc}
 801fd9e:	bf00      	nop
 801fda0:	20056834 	.word	0x20056834
 801fda4:	20000000 	.word	0x20000000
 801fda8:	0801e41b 	.word	0x0801e41b
 801fdac:	20000030 	.word	0x20000030
 801fdb0:	20056838 	.word	0x20056838
 801fdb4:	0801e419 	.word	0x0801e419
 801fdb8:	20000034 	.word	0x20000034

0801fdbc <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801fdbc:	b510      	push	{r4, lr}
 801fdbe:	4604      	mov	r4, r0
 801fdc0:	f7ff ff88 	bl	801fcd4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801fdc4:	4620      	mov	r0, r4
 801fdc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fdca:	f7ff bfbd 	b.w	801fd48 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801fdd0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801fdd0:	b538      	push	{r3, r4, r5, lr}
 801fdd2:	4c15      	ldr	r4, [pc, #84]	; (801fe28 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801fdd4:	4605      	mov	r5, r0
 801fdd6:	7823      	ldrb	r3, [r4, #0]
 801fdd8:	f3bf 8f5b 	dmb	ish
 801fddc:	07da      	lsls	r2, r3, #31
 801fdde:	d40b      	bmi.n	801fdf8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801fde0:	4620      	mov	r0, r4
 801fde2:	f006 fcba 	bl	802675a <__cxa_guard_acquire>
 801fde6:	b138      	cbz	r0, 801fdf8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801fde8:	4620      	mov	r0, r4
 801fdea:	f006 fcc2 	bl	8026772 <__cxa_guard_release>
 801fdee:	4a0f      	ldr	r2, [pc, #60]	; (801fe2c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801fdf0:	490f      	ldr	r1, [pc, #60]	; (801fe30 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801fdf2:	4810      	ldr	r0, [pc, #64]	; (801fe34 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801fdf4:	f006 fcaa 	bl	802674c <__aeabi_atexit>
 801fdf8:	4c0f      	ldr	r4, [pc, #60]	; (801fe38 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801fdfa:	7823      	ldrb	r3, [r4, #0]
 801fdfc:	f3bf 8f5b 	dmb	ish
 801fe00:	07db      	lsls	r3, r3, #31
 801fe02:	d40b      	bmi.n	801fe1c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801fe04:	4620      	mov	r0, r4
 801fe06:	f006 fca8 	bl	802675a <__cxa_guard_acquire>
 801fe0a:	b138      	cbz	r0, 801fe1c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801fe0c:	4620      	mov	r0, r4
 801fe0e:	f006 fcb0 	bl	8026772 <__cxa_guard_release>
 801fe12:	4a06      	ldr	r2, [pc, #24]	; (801fe2c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801fe14:	4909      	ldr	r1, [pc, #36]	; (801fe3c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801fe16:	480a      	ldr	r0, [pc, #40]	; (801fe40 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801fe18:	f006 fc98 	bl	802674c <__aeabi_atexit>
 801fe1c:	4b05      	ldr	r3, [pc, #20]	; (801fe34 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801fe1e:	642b      	str	r3, [r5, #64]	; 0x40
 801fe20:	4b07      	ldr	r3, [pc, #28]	; (801fe40 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801fe22:	646b      	str	r3, [r5, #68]	; 0x44
 801fe24:	bd38      	pop	{r3, r4, r5, pc}
 801fe26:	bf00      	nop
 801fe28:	20056864 	.word	0x20056864
 801fe2c:	20000000 	.word	0x20000000
 801fe30:	0801e40f 	.word	0x0801e40f
 801fe34:	20000060 	.word	0x20000060
 801fe38:	20056868 	.word	0x20056868
 801fe3c:	0801e40d 	.word	0x0801e40d
 801fe40:	20000064 	.word	0x20000064

0801fe44 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801fe44:	b538      	push	{r3, r4, r5, lr}
 801fe46:	4c15      	ldr	r4, [pc, #84]	; (801fe9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801fe48:	4605      	mov	r5, r0
 801fe4a:	7823      	ldrb	r3, [r4, #0]
 801fe4c:	f3bf 8f5b 	dmb	ish
 801fe50:	07da      	lsls	r2, r3, #31
 801fe52:	d40b      	bmi.n	801fe6c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801fe54:	4620      	mov	r0, r4
 801fe56:	f006 fc80 	bl	802675a <__cxa_guard_acquire>
 801fe5a:	b138      	cbz	r0, 801fe6c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801fe5c:	4620      	mov	r0, r4
 801fe5e:	f006 fc88 	bl	8026772 <__cxa_guard_release>
 801fe62:	4a0f      	ldr	r2, [pc, #60]	; (801fea0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801fe64:	490f      	ldr	r1, [pc, #60]	; (801fea4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801fe66:	4810      	ldr	r0, [pc, #64]	; (801fea8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801fe68:	f006 fc70 	bl	802674c <__aeabi_atexit>
 801fe6c:	4c0f      	ldr	r4, [pc, #60]	; (801feac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801fe6e:	7823      	ldrb	r3, [r4, #0]
 801fe70:	f3bf 8f5b 	dmb	ish
 801fe74:	07db      	lsls	r3, r3, #31
 801fe76:	d40b      	bmi.n	801fe90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801fe78:	4620      	mov	r0, r4
 801fe7a:	f006 fc6e 	bl	802675a <__cxa_guard_acquire>
 801fe7e:	b138      	cbz	r0, 801fe90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801fe80:	4620      	mov	r0, r4
 801fe82:	f006 fc76 	bl	8026772 <__cxa_guard_release>
 801fe86:	4a06      	ldr	r2, [pc, #24]	; (801fea0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801fe88:	4909      	ldr	r1, [pc, #36]	; (801feb0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801fe8a:	480a      	ldr	r0, [pc, #40]	; (801feb4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801fe8c:	f006 fc5e 	bl	802674c <__aeabi_atexit>
 801fe90:	4b05      	ldr	r3, [pc, #20]	; (801fea8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801fe92:	63ab      	str	r3, [r5, #56]	; 0x38
 801fe94:	4b07      	ldr	r3, [pc, #28]	; (801feb4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801fe96:	63eb      	str	r3, [r5, #60]	; 0x3c
 801fe98:	bd38      	pop	{r3, r4, r5, pc}
 801fe9a:	bf00      	nop
 801fe9c:	20056844 	.word	0x20056844
 801fea0:	20000000 	.word	0x20000000
 801fea4:	0801e413 	.word	0x0801e413
 801fea8:	20000040 	.word	0x20000040
 801feac:	20056848 	.word	0x20056848
 801feb0:	0801e411 	.word	0x0801e411
 801feb4:	20000044 	.word	0x20000044

0801feb8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801feb8:	b510      	push	{r4, lr}
 801feba:	4604      	mov	r4, r0
 801febc:	f7ff ff88 	bl	801fdd0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801fec0:	4620      	mov	r0, r4
 801fec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fec6:	f7ff bfbd 	b.w	801fe44 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801fecc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801fecc:	b538      	push	{r3, r4, r5, lr}
 801fece:	4c15      	ldr	r4, [pc, #84]	; (801ff24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801fed0:	4605      	mov	r5, r0
 801fed2:	7823      	ldrb	r3, [r4, #0]
 801fed4:	f3bf 8f5b 	dmb	ish
 801fed8:	07da      	lsls	r2, r3, #31
 801feda:	d40b      	bmi.n	801fef4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801fedc:	4620      	mov	r0, r4
 801fede:	f006 fc3c 	bl	802675a <__cxa_guard_acquire>
 801fee2:	b138      	cbz	r0, 801fef4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801fee4:	4620      	mov	r0, r4
 801fee6:	f006 fc44 	bl	8026772 <__cxa_guard_release>
 801feea:	4a0f      	ldr	r2, [pc, #60]	; (801ff28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801feec:	490f      	ldr	r1, [pc, #60]	; (801ff2c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801feee:	4810      	ldr	r0, [pc, #64]	; (801ff30 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801fef0:	f006 fc2c 	bl	802674c <__aeabi_atexit>
 801fef4:	4c0f      	ldr	r4, [pc, #60]	; (801ff34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801fef6:	7823      	ldrb	r3, [r4, #0]
 801fef8:	f3bf 8f5b 	dmb	ish
 801fefc:	07db      	lsls	r3, r3, #31
 801fefe:	d40b      	bmi.n	801ff18 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801ff00:	4620      	mov	r0, r4
 801ff02:	f006 fc2a 	bl	802675a <__cxa_guard_acquire>
 801ff06:	b138      	cbz	r0, 801ff18 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801ff08:	4620      	mov	r0, r4
 801ff0a:	f006 fc32 	bl	8026772 <__cxa_guard_release>
 801ff0e:	4a06      	ldr	r2, [pc, #24]	; (801ff28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801ff10:	4909      	ldr	r1, [pc, #36]	; (801ff38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801ff12:	480a      	ldr	r0, [pc, #40]	; (801ff3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801ff14:	f006 fc1a 	bl	802674c <__aeabi_atexit>
 801ff18:	4b05      	ldr	r3, [pc, #20]	; (801ff30 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801ff1a:	652b      	str	r3, [r5, #80]	; 0x50
 801ff1c:	4b07      	ldr	r3, [pc, #28]	; (801ff3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801ff1e:	656b      	str	r3, [r5, #84]	; 0x54
 801ff20:	bd38      	pop	{r3, r4, r5, pc}
 801ff22:	bf00      	nop
 801ff24:	2005683c 	.word	0x2005683c
 801ff28:	20000000 	.word	0x20000000
 801ff2c:	0801e407 	.word	0x0801e407
 801ff30:	20000038 	.word	0x20000038
 801ff34:	20056840 	.word	0x20056840
 801ff38:	0801e405 	.word	0x0801e405
 801ff3c:	2000003c 	.word	0x2000003c

0801ff40 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801ff40:	b538      	push	{r3, r4, r5, lr}
 801ff42:	4c15      	ldr	r4, [pc, #84]	; (801ff98 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801ff44:	4605      	mov	r5, r0
 801ff46:	7823      	ldrb	r3, [r4, #0]
 801ff48:	f3bf 8f5b 	dmb	ish
 801ff4c:	07da      	lsls	r2, r3, #31
 801ff4e:	d40b      	bmi.n	801ff68 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801ff50:	4620      	mov	r0, r4
 801ff52:	f006 fc02 	bl	802675a <__cxa_guard_acquire>
 801ff56:	b138      	cbz	r0, 801ff68 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801ff58:	4620      	mov	r0, r4
 801ff5a:	f006 fc0a 	bl	8026772 <__cxa_guard_release>
 801ff5e:	4a0f      	ldr	r2, [pc, #60]	; (801ff9c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801ff60:	490f      	ldr	r1, [pc, #60]	; (801ffa0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801ff62:	4810      	ldr	r0, [pc, #64]	; (801ffa4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801ff64:	f006 fbf2 	bl	802674c <__aeabi_atexit>
 801ff68:	4c0f      	ldr	r4, [pc, #60]	; (801ffa8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801ff6a:	7823      	ldrb	r3, [r4, #0]
 801ff6c:	f3bf 8f5b 	dmb	ish
 801ff70:	07db      	lsls	r3, r3, #31
 801ff72:	d40b      	bmi.n	801ff8c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801ff74:	4620      	mov	r0, r4
 801ff76:	f006 fbf0 	bl	802675a <__cxa_guard_acquire>
 801ff7a:	b138      	cbz	r0, 801ff8c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801ff7c:	4620      	mov	r0, r4
 801ff7e:	f006 fbf8 	bl	8026772 <__cxa_guard_release>
 801ff82:	4a06      	ldr	r2, [pc, #24]	; (801ff9c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801ff84:	4909      	ldr	r1, [pc, #36]	; (801ffac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801ff86:	480a      	ldr	r0, [pc, #40]	; (801ffb0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801ff88:	f006 fbe0 	bl	802674c <__aeabi_atexit>
 801ff8c:	4b05      	ldr	r3, [pc, #20]	; (801ffa4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801ff8e:	64ab      	str	r3, [r5, #72]	; 0x48
 801ff90:	4b07      	ldr	r3, [pc, #28]	; (801ffb0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801ff92:	64eb      	str	r3, [r5, #76]	; 0x4c
 801ff94:	bd38      	pop	{r3, r4, r5, pc}
 801ff96:	bf00      	nop
 801ff98:	2005682c 	.word	0x2005682c
 801ff9c:	20000000 	.word	0x20000000
 801ffa0:	0801e40b 	.word	0x0801e40b
 801ffa4:	20000028 	.word	0x20000028
 801ffa8:	20056830 	.word	0x20056830
 801ffac:	0801e409 	.word	0x0801e409
 801ffb0:	2000002c 	.word	0x2000002c

0801ffb4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801ffb4:	b510      	push	{r4, lr}
 801ffb6:	4604      	mov	r4, r0
 801ffb8:	f7ff ff88 	bl	801fecc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801ffbc:	4620      	mov	r0, r4
 801ffbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ffc2:	f7ff bfbd 	b.w	801ff40 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801ffc6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801ffc6:	b510      	push	{r4, lr}
 801ffc8:	4604      	mov	r4, r0
 801ffca:	f7ff fff3 	bl	801ffb4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801ffce:	4620      	mov	r0, r4
 801ffd0:	f7ff ff72 	bl	801feb8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801ffd4:	4620      	mov	r0, r4
 801ffd6:	f7ff fe73 	bl	801fcc0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801ffda:	4620      	mov	r0, r4
 801ffdc:	f7ff fdf2 	bl	801fbc4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801ffe0:	4620      	mov	r0, r4
 801ffe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ffe6:	f7ff bee9 	b.w	801fdbc <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801ffec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801ffec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fff0:	b087      	sub	sp, #28
 801fff2:	7888      	ldrb	r0, [r1, #2]
 801fff4:	4616      	mov	r6, r2
 801fff6:	9001      	str	r0, [sp, #4]
 801fff8:	7848      	ldrb	r0, [r1, #1]
 801fffa:	9100      	str	r1, [sp, #0]
 801fffc:	9002      	str	r0, [sp, #8]
 801fffe:	7808      	ldrb	r0, [r1, #0]
 8020000:	9901      	ldr	r1, [sp, #4]
 8020002:	9003      	str	r0, [sp, #12]
 8020004:	9802      	ldr	r0, [sp, #8]
 8020006:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 802000a:	0200      	lsls	r0, r0, #8
 802000c:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8020010:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8020014:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8020018:	9903      	ldr	r1, [sp, #12]
 802001a:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 802001e:	4308      	orrs	r0, r1
 8020020:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8020024:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 8020028:	9005      	str	r0, [sp, #20]
 802002a:	fb05 ca0e 	mla	sl, r5, lr, ip
 802002e:	2d00      	cmp	r5, #0
 8020030:	eb06 080a 	add.w	r8, r6, sl
 8020034:	db4a      	blt.n	80200cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 8020036:	45a9      	cmp	r9, r5
 8020038:	dd48      	ble.n	80200cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 802003a:	f1bc 0f00 	cmp.w	ip, #0
 802003e:	db43      	blt.n	80200c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 8020040:	45e6      	cmp	lr, ip
 8020042:	dd41      	ble.n	80200c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 8020044:	f816 600a 	ldrb.w	r6, [r6, sl]
 8020048:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802004c:	441e      	add	r6, r3
 802004e:	f11c 0001 	adds.w	r0, ip, #1
 8020052:	d43e      	bmi.n	80200d2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8020054:	4586      	cmp	lr, r0
 8020056:	dd3c      	ble.n	80200d2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8020058:	2a00      	cmp	r2, #0
 802005a:	d03a      	beq.n	80200d2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 802005c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8020060:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020064:	4418      	add	r0, r3
 8020066:	3501      	adds	r5, #1
 8020068:	d437      	bmi.n	80200da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 802006a:	45a9      	cmp	r9, r5
 802006c:	dd35      	ble.n	80200da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 802006e:	b3a4      	cbz	r4, 80200da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 8020070:	f1bc 0f00 	cmp.w	ip, #0
 8020074:	db2f      	blt.n	80200d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 8020076:	45e6      	cmp	lr, ip
 8020078:	dd2d      	ble.n	80200d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 802007a:	f818 500e 	ldrb.w	r5, [r8, lr]
 802007e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020082:	441d      	add	r5, r3
 8020084:	f11c 0c01 	adds.w	ip, ip, #1
 8020088:	d42a      	bmi.n	80200e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 802008a:	45e6      	cmp	lr, ip
 802008c:	dd28      	ble.n	80200e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 802008e:	b33a      	cbz	r2, 80200e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 8020090:	44c6      	add	lr, r8
 8020092:	f89e c001 	ldrb.w	ip, [lr, #1]
 8020096:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802009a:	4463      	add	r3, ip
 802009c:	ea6f 0c07 	mvn.w	ip, r7
 80200a0:	2a0f      	cmp	r2, #15
 80200a2:	f896 a000 	ldrb.w	sl, [r6]
 80200a6:	fa5f fc8c 	uxtb.w	ip, ip
 80200aa:	f890 b000 	ldrb.w	fp, [r0]
 80200ae:	f895 9000 	ldrb.w	r9, [r5]
 80200b2:	7819      	ldrb	r1, [r3, #0]
 80200b4:	d801      	bhi.n	80200ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xce>
 80200b6:	2c0f      	cmp	r4, #15
 80200b8:	d914      	bls.n	80200e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf8>
 80200ba:	4b40      	ldr	r3, [pc, #256]	; (80201bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d0>)
 80200bc:	f240 1157 	movw	r1, #343	; 0x157
 80200c0:	4a3f      	ldr	r2, [pc, #252]	; (80201c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 80200c2:	4840      	ldr	r0, [pc, #256]	; (80201c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 80200c4:	f006 fc7c 	bl	80269c0 <__assert_func>
 80200c8:	ae05      	add	r6, sp, #20
 80200ca:	e7c0      	b.n	802004e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x62>
 80200cc:	a805      	add	r0, sp, #20
 80200ce:	4606      	mov	r6, r0
 80200d0:	e7c9      	b.n	8020066 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 80200d2:	a805      	add	r0, sp, #20
 80200d4:	e7c7      	b.n	8020066 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 80200d6:	ad05      	add	r5, sp, #20
 80200d8:	e7d4      	b.n	8020084 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x98>
 80200da:	ab05      	add	r3, sp, #20
 80200dc:	461d      	mov	r5, r3
 80200de:	e7dd      	b.n	802009c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 80200e0:	ab05      	add	r3, sp, #20
 80200e2:	e7db      	b.n	802009c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 80200e4:	b292      	uxth	r2, r2
 80200e6:	b2a4      	uxth	r4, r4
 80200e8:	fa1f fc8c 	uxth.w	ip, ip
 80200ec:	fb02 f804 	mul.w	r8, r2, r4
 80200f0:	0112      	lsls	r2, r2, #4
 80200f2:	b2bf      	uxth	r7, r7
 80200f4:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 80200f8:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 80200fc:	eba2 0208 	sub.w	r2, r2, r8
 8020100:	b2a4      	uxth	r4, r4
 8020102:	b292      	uxth	r2, r2
 8020104:	ebae 0e04 	sub.w	lr, lr, r4
 8020108:	fb02 fb0b 	mul.w	fp, r2, fp
 802010c:	fa1f fe8e 	uxth.w	lr, lr
 8020110:	fb0e ba0a 	mla	sl, lr, sl, fp
 8020114:	fb04 aa09 	mla	sl, r4, r9, sl
 8020118:	fb08 aa01 	mla	sl, r8, r1, sl
 802011c:	9903      	ldr	r1, [sp, #12]
 802011e:	fb11 f90c 	smulbb	r9, r1, ip
 8020122:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8020126:	9900      	ldr	r1, [sp, #0]
 8020128:	fb0a 9a07 	mla	sl, sl, r7, r9
 802012c:	fa1f fa8a 	uxth.w	sl, sl
 8020130:	f10a 0901 	add.w	r9, sl, #1
 8020134:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 8020138:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802013c:	f881 a000 	strb.w	sl, [r1]
 8020140:	f890 a001 	ldrb.w	sl, [r0, #1]
 8020144:	f896 9001 	ldrb.w	r9, [r6, #1]
 8020148:	fb02 fa0a 	mul.w	sl, r2, sl
 802014c:	9902      	ldr	r1, [sp, #8]
 802014e:	fb0e aa09 	mla	sl, lr, r9, sl
 8020152:	f895 9001 	ldrb.w	r9, [r5, #1]
 8020156:	fb04 aa09 	mla	sl, r4, r9, sl
 802015a:	f893 9001 	ldrb.w	r9, [r3, #1]
 802015e:	fb08 a909 	mla	r9, r8, r9, sl
 8020162:	fb11 fa0c 	smulbb	sl, r1, ip
 8020166:	9900      	ldr	r1, [sp, #0]
 8020168:	f3c9 2907 	ubfx	r9, r9, #8, #8
 802016c:	fb09 a907 	mla	r9, r9, r7, sl
 8020170:	fa1f f989 	uxth.w	r9, r9
 8020174:	f109 0a01 	add.w	sl, r9, #1
 8020178:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 802017c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020180:	f881 9001 	strb.w	r9, [r1, #1]
 8020184:	7880      	ldrb	r0, [r0, #2]
 8020186:	78b6      	ldrb	r6, [r6, #2]
 8020188:	4342      	muls	r2, r0
 802018a:	78a8      	ldrb	r0, [r5, #2]
 802018c:	789b      	ldrb	r3, [r3, #2]
 802018e:	fb0e 2206 	mla	r2, lr, r6, r2
 8020192:	fb04 2400 	mla	r4, r4, r0, r2
 8020196:	fb08 4803 	mla	r8, r8, r3, r4
 802019a:	9b01      	ldr	r3, [sp, #4]
 802019c:	fb13 fc0c 	smulbb	ip, r3, ip
 80201a0:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80201a4:	fb08 c707 	mla	r7, r8, r7, ip
 80201a8:	b2bf      	uxth	r7, r7
 80201aa:	f107 0c01 	add.w	ip, r7, #1
 80201ae:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 80201b2:	123f      	asrs	r7, r7, #8
 80201b4:	708f      	strb	r7, [r1, #2]
 80201b6:	b007      	add	sp, #28
 80201b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201bc:	0802eaaf 	.word	0x0802eaaf
 80201c0:	0802f017 	.word	0x0802f017
 80201c4:	0802eb78 	.word	0x0802eb78

080201c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80201c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201cc:	ed2d 8b08 	vpush	{d8-d11}
 80201d0:	b093      	sub	sp, #76	; 0x4c
 80201d2:	eeb0 aa40 	vmov.f32	s20, s0
 80201d6:	eef0 9a60 	vmov.f32	s19, s1
 80201da:	9210      	str	r2, [sp, #64]	; 0x40
 80201dc:	eeb0 9a41 	vmov.f32	s18, s2
 80201e0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80201e2:	eeb0 8a62 	vmov.f32	s16, s5
 80201e6:	9309      	str	r3, [sp, #36]	; 0x24
 80201e8:	eef0 8a43 	vmov.f32	s17, s6
 80201ec:	f89d 30b4 	ldrb.w	r3, [sp, #180]	; 0xb4
 80201f0:	eef0 ba44 	vmov.f32	s23, s8
 80201f4:	9011      	str	r0, [sp, #68]	; 0x44
 80201f6:	eeb0 ba64 	vmov.f32	s22, s9
 80201fa:	930e      	str	r3, [sp, #56]	; 0x38
 80201fc:	eef0 aa45 	vmov.f32	s21, s10
 8020200:	6850      	ldr	r0, [r2, #4]
 8020202:	910d      	str	r1, [sp, #52]	; 0x34
 8020204:	6812      	ldr	r2, [r2, #0]
 8020206:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802020a:	fb00 1303 	mla	r3, r0, r3, r1
 802020e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020212:	18d3      	adds	r3, r2, r3
 8020214:	930a      	str	r3, [sp, #40]	; 0x28
 8020216:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020218:	681b      	ldr	r3, [r3, #0]
 802021a:	930c      	str	r3, [sp, #48]	; 0x30
 802021c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802021e:	685c      	ldr	r4, [r3, #4]
 8020220:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020222:	3404      	adds	r4, #4
 8020224:	43db      	mvns	r3, r3
 8020226:	b2db      	uxtb	r3, r3
 8020228:	930b      	str	r3, [sp, #44]	; 0x2c
 802022a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802022c:	2b00      	cmp	r3, #0
 802022e:	dc03      	bgt.n	8020238 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020230:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020232:	2b00      	cmp	r3, #0
 8020234:	f340 8250 	ble.w	80206d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8020238:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802023a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802023e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020242:	1e48      	subs	r0, r1, #1
 8020244:	1e55      	subs	r5, r2, #1
 8020246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020248:	2b00      	cmp	r3, #0
 802024a:	f340 80ee 	ble.w	802042a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 802024e:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8020250:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020252:	1436      	asrs	r6, r6, #16
 8020254:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020258:	d406      	bmi.n	8020268 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802025a:	4286      	cmp	r6, r0
 802025c:	da04      	bge.n	8020268 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802025e:	2b00      	cmp	r3, #0
 8020260:	db02      	blt.n	8020268 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020262:	42ab      	cmp	r3, r5
 8020264:	f2c0 80e2 	blt.w	802042c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8020268:	3601      	adds	r6, #1
 802026a:	f100 80cf 	bmi.w	802040c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 802026e:	42b1      	cmp	r1, r6
 8020270:	f2c0 80cc 	blt.w	802040c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8020274:	3301      	adds	r3, #1
 8020276:	f100 80c9 	bmi.w	802040c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 802027a:	429a      	cmp	r2, r3
 802027c:	f2c0 80c6 	blt.w	802040c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8020280:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 8020284:	f1bb 0f00 	cmp.w	fp, #0
 8020288:	f340 80f1 	ble.w	802046e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 802028c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802028e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8020290:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8020292:	141d      	asrs	r5, r3, #16
 8020294:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020296:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802029a:	68c7      	ldr	r7, [r0, #12]
 802029c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802029e:	1418      	asrs	r0, r3, #16
 80202a0:	f3c3 3803 	ubfx	r8, r3, #12, #4
 80202a4:	6892      	ldr	r2, [r2, #8]
 80202a6:	f100 8137 	bmi.w	8020518 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80202aa:	f102 3cff 	add.w	ip, r2, #4294967295
 80202ae:	4560      	cmp	r0, ip
 80202b0:	f280 8132 	bge.w	8020518 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80202b4:	2d00      	cmp	r5, #0
 80202b6:	f2c0 812f 	blt.w	8020518 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80202ba:	f107 3cff 	add.w	ip, r7, #4294967295
 80202be:	4565      	cmp	r5, ip
 80202c0:	f280 812a 	bge.w	8020518 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80202c4:	b212      	sxth	r2, r2
 80202c6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80202c8:	fb05 0002 	mla	r0, r5, r2, r0
 80202cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80202ce:	f817 c000 	ldrb.w	ip, [r7, r0]
 80202d2:	4405      	add	r5, r0
 80202d4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80202d8:	eb04 0e0c 	add.w	lr, r4, ip
 80202dc:	f1b8 0f00 	cmp.w	r8, #0
 80202e0:	f000 810c 	beq.w	80204fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 80202e4:	786f      	ldrb	r7, [r5, #1]
 80202e6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80202ea:	4427      	add	r7, r4
 80202ec:	2900      	cmp	r1, #0
 80202ee:	f000 810d 	beq.w	802050c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80202f2:	18a8      	adds	r0, r5, r2
 80202f4:	5caa      	ldrb	r2, [r5, r2]
 80202f6:	7840      	ldrb	r0, [r0, #1]
 80202f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80202fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020300:	4422      	add	r2, r4
 8020302:	4420      	add	r0, r4
 8020304:	fa1f f388 	uxth.w	r3, r8
 8020308:	f814 a00c 	ldrb.w	sl, [r4, ip]
 802030c:	b289      	uxth	r1, r1
 802030e:	f897 c000 	ldrb.w	ip, [r7]
 8020312:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8020316:	fb03 f901 	mul.w	r9, r3, r1
 802031a:	011b      	lsls	r3, r3, #4
 802031c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020320:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8020324:	eba3 0309 	sub.w	r3, r3, r9
 8020328:	b289      	uxth	r1, r1
 802032a:	b29b      	uxth	r3, r3
 802032c:	eba8 0801 	sub.w	r8, r8, r1
 8020330:	fb03 fc0c 	mul.w	ip, r3, ip
 8020334:	fa1f f888 	uxth.w	r8, r8
 8020338:	930f      	str	r3, [sp, #60]	; 0x3c
 802033a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802033c:	fb08 cc0a 	mla	ip, r8, sl, ip
 8020340:	f892 a000 	ldrb.w	sl, [r2]
 8020344:	fb01 cc0a 	mla	ip, r1, sl, ip
 8020348:	f890 a000 	ldrb.w	sl, [r0]
 802034c:	fb09 cc0a 	mla	ip, r9, sl, ip
 8020350:	f896 a000 	ldrb.w	sl, [r6]
 8020354:	fb1a fa03 	smulbb	sl, sl, r3
 8020358:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802035c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802035e:	fb0c ac05 	mla	ip, ip, r5, sl
 8020362:	fa1f fc8c 	uxth.w	ip, ip
 8020366:	f10c 0a01 	add.w	sl, ip, #1
 802036a:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 802036e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020372:	f886 a000 	strb.w	sl, [r6]
 8020376:	f897 c001 	ldrb.w	ip, [r7, #1]
 802037a:	f89e a001 	ldrb.w	sl, [lr, #1]
 802037e:	fb03 fc0c 	mul.w	ip, r3, ip
 8020382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020384:	fb08 cc0a 	mla	ip, r8, sl, ip
 8020388:	f892 a001 	ldrb.w	sl, [r2, #1]
 802038c:	fb01 cc0a 	mla	ip, r1, sl, ip
 8020390:	f890 a001 	ldrb.w	sl, [r0, #1]
 8020394:	fb09 cc0a 	mla	ip, r9, sl, ip
 8020398:	f896 a001 	ldrb.w	sl, [r6, #1]
 802039c:	fb1a fa03 	smulbb	sl, sl, r3
 80203a0:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80203a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80203a6:	fb0c ac05 	mla	ip, ip, r5, sl
 80203aa:	fa1f fc8c 	uxth.w	ip, ip
 80203ae:	f10c 0a01 	add.w	sl, ip, #1
 80203b2:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 80203b6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80203ba:	f886 c001 	strb.w	ip, [r6, #1]
 80203be:	78bf      	ldrb	r7, [r7, #2]
 80203c0:	f89e c002 	ldrb.w	ip, [lr, #2]
 80203c4:	437b      	muls	r3, r7
 80203c6:	fb08 330c 	mla	r3, r8, ip, r3
 80203ca:	f892 c002 	ldrb.w	ip, [r2, #2]
 80203ce:	7882      	ldrb	r2, [r0, #2]
 80203d0:	fb01 310c 	mla	r1, r1, ip, r3
 80203d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80203d6:	fb09 1902 	mla	r9, r9, r2, r1
 80203da:	78b1      	ldrb	r1, [r6, #2]
 80203dc:	fb11 f103 	smulbb	r1, r1, r3
 80203e0:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80203e4:	fb09 1505 	mla	r5, r9, r5, r1
 80203e8:	b2ad      	uxth	r5, r5
 80203ea:	1c6b      	adds	r3, r5, #1
 80203ec:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80203f0:	122d      	asrs	r5, r5, #8
 80203f2:	70b5      	strb	r5, [r6, #2]
 80203f4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80203f6:	3603      	adds	r6, #3
 80203f8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80203fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80203fe:	4413      	add	r3, r2
 8020400:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8020402:	9325      	str	r3, [sp, #148]	; 0x94
 8020404:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020406:	4413      	add	r3, r2
 8020408:	9326      	str	r3, [sp, #152]	; 0x98
 802040a:	e73b      	b.n	8020284 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 802040c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802040e:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8020410:	4433      	add	r3, r6
 8020412:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8020414:	9325      	str	r3, [sp, #148]	; 0x94
 8020416:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020418:	4433      	add	r3, r6
 802041a:	9326      	str	r3, [sp, #152]	; 0x98
 802041c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802041e:	3b01      	subs	r3, #1
 8020420:	9309      	str	r3, [sp, #36]	; 0x24
 8020422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020424:	3303      	adds	r3, #3
 8020426:	930a      	str	r3, [sp, #40]	; 0x28
 8020428:	e70d      	b.n	8020246 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802042a:	d028      	beq.n	802047e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 802042c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802042e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8020430:	3b01      	subs	r3, #1
 8020432:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8020434:	fb00 5003 	mla	r0, r0, r3, r5
 8020438:	1400      	asrs	r0, r0, #16
 802043a:	f53f af21 	bmi.w	8020280 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802043e:	3901      	subs	r1, #1
 8020440:	4288      	cmp	r0, r1
 8020442:	f6bf af1d 	bge.w	8020280 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8020446:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8020448:	9826      	ldr	r0, [sp, #152]	; 0x98
 802044a:	fb01 0303 	mla	r3, r1, r3, r0
 802044e:	141b      	asrs	r3, r3, #16
 8020450:	f53f af16 	bmi.w	8020280 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8020454:	3a01      	subs	r2, #1
 8020456:	4293      	cmp	r3, r2
 8020458:	f6bf af12 	bge.w	8020280 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802045c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802045e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8020462:	1cdf      	adds	r7, r3, #3
 8020464:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8020468:	f1b9 0f00 	cmp.w	r9, #0
 802046c:	dc73      	bgt.n	8020556 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 802046e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020470:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020472:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020476:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802047a:	441a      	add	r2, r3
 802047c:	920a      	str	r2, [sp, #40]	; 0x28
 802047e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020480:	2b00      	cmp	r3, #0
 8020482:	f340 8129 	ble.w	80206d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8020486:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802048a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802048c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020490:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020494:	eef0 6a48 	vmov.f32	s13, s16
 8020498:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802049c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80204a0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80204a4:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 80204a8:	eef0 6a68 	vmov.f32	s13, s17
 80204ac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80204b0:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 80204b4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80204b8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80204bc:	ee37 8a48 	vsub.f32	s16, s14, s16
 80204c0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80204c4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80204c8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80204cc:	ee18 2a10 	vmov	r2, s16
 80204d0:	eeb0 8a47 	vmov.f32	s16, s14
 80204d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80204d8:	ee18 2a90 	vmov	r2, s17
 80204dc:	9327      	str	r3, [sp, #156]	; 0x9c
 80204de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80204e0:	eef0 8a67 	vmov.f32	s17, s15
 80204e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80204e8:	9328      	str	r3, [sp, #160]	; 0xa0
 80204ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80204ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80204ee:	3b01      	subs	r3, #1
 80204f0:	930d      	str	r3, [sp, #52]	; 0x34
 80204f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80204f4:	bf08      	it	eq
 80204f6:	4613      	moveq	r3, r2
 80204f8:	9309      	str	r3, [sp, #36]	; 0x24
 80204fa:	e696      	b.n	802022a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80204fc:	b149      	cbz	r1, 8020512 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80204fe:	5caa      	ldrb	r2, [r5, r2]
 8020500:	4670      	mov	r0, lr
 8020502:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020506:	4422      	add	r2, r4
 8020508:	4677      	mov	r7, lr
 802050a:	e6fb      	b.n	8020304 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 802050c:	4670      	mov	r0, lr
 802050e:	4672      	mov	r2, lr
 8020510:	e6f8      	b.n	8020304 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8020512:	4670      	mov	r0, lr
 8020514:	4672      	mov	r2, lr
 8020516:	e7f7      	b.n	8020508 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 8020518:	f110 0c01 	adds.w	ip, r0, #1
 802051c:	f53f af6a 	bmi.w	80203f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8020520:	4562      	cmp	r2, ip
 8020522:	f6ff af67 	blt.w	80203f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8020526:	f115 0c01 	adds.w	ip, r5, #1
 802052a:	f53f af63 	bmi.w	80203f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 802052e:	4567      	cmp	r7, ip
 8020530:	f6ff af60 	blt.w	80203f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8020534:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020536:	b23f      	sxth	r7, r7
 8020538:	b212      	sxth	r2, r2
 802053a:	9002      	str	r0, [sp, #8]
 802053c:	9701      	str	r7, [sp, #4]
 802053e:	9200      	str	r2, [sp, #0]
 8020540:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020542:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020544:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8020548:	e9cd 5803 	strd	r5, r8, [sp, #12]
 802054c:	4623      	mov	r3, r4
 802054e:	4631      	mov	r1, r6
 8020550:	f7ff fd4c 	bl	801ffec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8020554:	e74e      	b.n	80203f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8020556:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8020558:	9826      	ldr	r0, [sp, #152]	; 0x98
 802055a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802055e:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8020560:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020562:	1400      	asrs	r0, r0, #16
 8020564:	142d      	asrs	r5, r5, #16
 8020566:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020568:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 802056c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8020570:	fb02 5000 	mla	r0, r2, r0, r5
 8020574:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020576:	f815 e000 	ldrb.w	lr, [r5, r0]
 802057a:	eb05 0c00 	add.w	ip, r5, r0
 802057e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8020582:	eb04 060e 	add.w	r6, r4, lr
 8020586:	2b00      	cmp	r3, #0
 8020588:	f000 8097 	beq.w	80206ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 802058c:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8020590:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020594:	4425      	add	r5, r4
 8020596:	2900      	cmp	r1, #0
 8020598:	f000 8098 	beq.w	80206cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 802059c:	eb0c 0002 	add.w	r0, ip, r2
 80205a0:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80205a4:	7840      	ldrb	r0, [r0, #1]
 80205a6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80205aa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80205ae:	4422      	add	r2, r4
 80205b0:	4420      	add	r0, r4
 80205b2:	b29b      	uxth	r3, r3
 80205b4:	f814 b00e 	ldrb.w	fp, [r4, lr]
 80205b8:	b289      	uxth	r1, r1
 80205ba:	f895 e000 	ldrb.w	lr, [r5]
 80205be:	3703      	adds	r7, #3
 80205c0:	f109 39ff 	add.w	r9, r9, #4294967295
 80205c4:	fb03 f801 	mul.w	r8, r3, r1
 80205c8:	011b      	lsls	r3, r3, #4
 80205ca:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 80205ce:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80205d2:	eba3 0308 	sub.w	r3, r3, r8
 80205d6:	b289      	uxth	r1, r1
 80205d8:	b29b      	uxth	r3, r3
 80205da:	ebac 0c01 	sub.w	ip, ip, r1
 80205de:	fb03 fe0e 	mul.w	lr, r3, lr
 80205e2:	fa1f fc8c 	uxth.w	ip, ip
 80205e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80205e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80205ea:	fb0c ee0b 	mla	lr, ip, fp, lr
 80205ee:	f892 b000 	ldrb.w	fp, [r2]
 80205f2:	fb01 ee0b 	mla	lr, r1, fp, lr
 80205f6:	f890 b000 	ldrb.w	fp, [r0]
 80205fa:	fb08 ee0b 	mla	lr, r8, fp, lr
 80205fe:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 8020602:	fb1b fb03 	smulbb	fp, fp, r3
 8020606:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 802060a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802060c:	fb0e be0a 	mla	lr, lr, sl, fp
 8020610:	fa1f fe8e 	uxth.w	lr, lr
 8020614:	f10e 0b01 	add.w	fp, lr, #1
 8020618:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 802061c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020620:	f807 ec06 	strb.w	lr, [r7, #-6]
 8020624:	f895 e001 	ldrb.w	lr, [r5, #1]
 8020628:	f896 b001 	ldrb.w	fp, [r6, #1]
 802062c:	fb03 fe0e 	mul.w	lr, r3, lr
 8020630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020632:	fb0c ee0b 	mla	lr, ip, fp, lr
 8020636:	f892 b001 	ldrb.w	fp, [r2, #1]
 802063a:	fb01 ee0b 	mla	lr, r1, fp, lr
 802063e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8020642:	fb08 ee0b 	mla	lr, r8, fp, lr
 8020646:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 802064a:	fb1b fb03 	smulbb	fp, fp, r3
 802064e:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8020652:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020654:	fb0e be0a 	mla	lr, lr, sl, fp
 8020658:	fa1f fe8e 	uxth.w	lr, lr
 802065c:	f10e 0b01 	add.w	fp, lr, #1
 8020660:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8020664:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020668:	f807 ec05 	strb.w	lr, [r7, #-5]
 802066c:	78ad      	ldrb	r5, [r5, #2]
 802066e:	78b6      	ldrb	r6, [r6, #2]
 8020670:	436b      	muls	r3, r5
 8020672:	7895      	ldrb	r5, [r2, #2]
 8020674:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020676:	fb0c 3306 	mla	r3, ip, r6, r3
 802067a:	fb01 3305 	mla	r3, r1, r5, r3
 802067e:	7885      	ldrb	r5, [r0, #2]
 8020680:	fb08 3805 	mla	r8, r8, r5, r3
 8020684:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8020688:	fb13 f302 	smulbb	r3, r3, r2
 802068c:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8020690:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8020692:	fb08 380a 	mla	r8, r8, sl, r3
 8020696:	fa1f f888 	uxth.w	r8, r8
 802069a:	f108 0301 	add.w	r3, r8, #1
 802069e:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 80206a2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80206a4:	4413      	add	r3, r2
 80206a6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80206a8:	ea4f 2828 	mov.w	r8, r8, asr #8
 80206ac:	9325      	str	r3, [sp, #148]	; 0x94
 80206ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80206b0:	f807 8c04 	strb.w	r8, [r7, #-4]
 80206b4:	4413      	add	r3, r2
 80206b6:	9326      	str	r3, [sp, #152]	; 0x98
 80206b8:	e6d6      	b.n	8020468 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80206ba:	b151      	cbz	r1, 80206d2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 80206bc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80206c0:	4630      	mov	r0, r6
 80206c2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80206c6:	4422      	add	r2, r4
 80206c8:	4635      	mov	r5, r6
 80206ca:	e772      	b.n	80205b2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80206cc:	4630      	mov	r0, r6
 80206ce:	4632      	mov	r2, r6
 80206d0:	e76f      	b.n	80205b2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80206d2:	4630      	mov	r0, r6
 80206d4:	4632      	mov	r2, r6
 80206d6:	e7f7      	b.n	80206c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 80206d8:	b013      	add	sp, #76	; 0x4c
 80206da:	ecbd 8b08 	vpop	{d8-d11}
 80206de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080206e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 80206e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206e8:	784d      	ldrb	r5, [r1, #1]
 80206ea:	f891 9002 	ldrb.w	r9, [r1, #2]
 80206ee:	022d      	lsls	r5, r5, #8
 80206f0:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80206f4:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 80206f8:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 80206fc:	f891 9000 	ldrb.w	r9, [r1]
 8020700:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8020704:	ea45 0509 	orr.w	r5, r5, r9
 8020708:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 802070c:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 8020710:	9501      	str	r5, [sp, #4]
 8020712:	fb06 470c 	mla	r7, r6, ip, r4
 8020716:	2e00      	cmp	r6, #0
 8020718:	eb02 0e07 	add.w	lr, r2, r7
 802071c:	db46      	blt.n	80207ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 802071e:	45b0      	cmp	r8, r6
 8020720:	dd44      	ble.n	80207ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 8020722:	2c00      	cmp	r4, #0
 8020724:	db40      	blt.n	80207a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 8020726:	45a4      	cmp	ip, r4
 8020728:	dd3e      	ble.n	80207a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 802072a:	5dd7      	ldrb	r7, [r2, r7]
 802072c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020730:	441f      	add	r7, r3
 8020732:	1c62      	adds	r2, r4, #1
 8020734:	d43d      	bmi.n	80207b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 8020736:	4594      	cmp	ip, r2
 8020738:	dd3b      	ble.n	80207b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 802073a:	f1ba 0f00 	cmp.w	sl, #0
 802073e:	d038      	beq.n	80207b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 8020740:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8020744:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020748:	441d      	add	r5, r3
 802074a:	3601      	adds	r6, #1
 802074c:	d435      	bmi.n	80207ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 802074e:	45b0      	cmp	r8, r6
 8020750:	dd33      	ble.n	80207ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 8020752:	b390      	cbz	r0, 80207ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 8020754:	2c00      	cmp	r4, #0
 8020756:	db2e      	blt.n	80207b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 8020758:	45a4      	cmp	ip, r4
 802075a:	dd2c      	ble.n	80207b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 802075c:	f81e 600c 	ldrb.w	r6, [lr, ip]
 8020760:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020764:	441e      	add	r6, r3
 8020766:	1c62      	adds	r2, r4, #1
 8020768:	d42a      	bmi.n	80207c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 802076a:	4594      	cmp	ip, r2
 802076c:	dd28      	ble.n	80207c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 802076e:	f1ba 0f00 	cmp.w	sl, #0
 8020772:	d025      	beq.n	80207c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 8020774:	44f4      	add	ip, lr
 8020776:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802077a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802077e:	4413      	add	r3, r2
 8020780:	f1ba 0f0f 	cmp.w	sl, #15
 8020784:	f897 8000 	ldrb.w	r8, [r7]
 8020788:	f895 9000 	ldrb.w	r9, [r5]
 802078c:	f896 e000 	ldrb.w	lr, [r6]
 8020790:	f893 c000 	ldrb.w	ip, [r3]
 8020794:	d801      	bhi.n	802079a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb6>
 8020796:	280f      	cmp	r0, #15
 8020798:	d914      	bls.n	80207c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe0>
 802079a:	4b29      	ldr	r3, [pc, #164]	; (8020840 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x15c>)
 802079c:	f240 1157 	movw	r1, #343	; 0x157
 80207a0:	4a28      	ldr	r2, [pc, #160]	; (8020844 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 80207a2:	4829      	ldr	r0, [pc, #164]	; (8020848 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 80207a4:	f006 f90c 	bl	80269c0 <__assert_func>
 80207a8:	af01      	add	r7, sp, #4
 80207aa:	e7c2      	b.n	8020732 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 80207ac:	ad01      	add	r5, sp, #4
 80207ae:	462f      	mov	r7, r5
 80207b0:	e7cb      	b.n	802074a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 80207b2:	ad01      	add	r5, sp, #4
 80207b4:	e7c9      	b.n	802074a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 80207b6:	ae01      	add	r6, sp, #4
 80207b8:	e7d5      	b.n	8020766 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x82>
 80207ba:	ab01      	add	r3, sp, #4
 80207bc:	461e      	mov	r6, r3
 80207be:	e7df      	b.n	8020780 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 80207c0:	ab01      	add	r3, sp, #4
 80207c2:	e7dd      	b.n	8020780 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 80207c4:	fa1f f48a 	uxth.w	r4, sl
 80207c8:	b280      	uxth	r0, r0
 80207ca:	fb04 fa00 	mul.w	sl, r4, r0
 80207ce:	0124      	lsls	r4, r4, #4
 80207d0:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80207d4:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 80207d8:	b282      	uxth	r2, r0
 80207da:	eba4 000a 	sub.w	r0, r4, sl
 80207de:	ebab 0b02 	sub.w	fp, fp, r2
 80207e2:	b280      	uxth	r0, r0
 80207e4:	fa1f fb8b 	uxth.w	fp, fp
 80207e8:	fb00 f909 	mul.w	r9, r0, r9
 80207ec:	fb0b 9808 	mla	r8, fp, r8, r9
 80207f0:	fb02 8e0e 	mla	lr, r2, lr, r8
 80207f4:	fb0a ec0c 	mla	ip, sl, ip, lr
 80207f8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80207fc:	f881 c000 	strb.w	ip, [r1]
 8020800:	786c      	ldrb	r4, [r5, #1]
 8020802:	f897 c001 	ldrb.w	ip, [r7, #1]
 8020806:	4344      	muls	r4, r0
 8020808:	fb0b 4c0c 	mla	ip, fp, ip, r4
 802080c:	7874      	ldrb	r4, [r6, #1]
 802080e:	fb02 cc04 	mla	ip, r2, r4, ip
 8020812:	785c      	ldrb	r4, [r3, #1]
 8020814:	fb0a c404 	mla	r4, sl, r4, ip
 8020818:	1224      	asrs	r4, r4, #8
 802081a:	704c      	strb	r4, [r1, #1]
 802081c:	78ad      	ldrb	r5, [r5, #2]
 802081e:	78bc      	ldrb	r4, [r7, #2]
 8020820:	4368      	muls	r0, r5
 8020822:	fb0b 0b04 	mla	fp, fp, r4, r0
 8020826:	78b0      	ldrb	r0, [r6, #2]
 8020828:	fb02 b000 	mla	r0, r2, r0, fp
 802082c:	789a      	ldrb	r2, [r3, #2]
 802082e:	fb0a 0a02 	mla	sl, sl, r2, r0
 8020832:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020836:	f881 a002 	strb.w	sl, [r1, #2]
 802083a:	b003      	add	sp, #12
 802083c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020840:	0802eaaf 	.word	0x0802eaaf
 8020844:	0802f017 	.word	0x0802f017
 8020848:	0802eb78 	.word	0x0802eb78

0802084c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802084c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020850:	ed2d 8b0a 	vpush	{d8-d12}
 8020854:	b08d      	sub	sp, #52	; 0x34
 8020856:	eeb0 aa40 	vmov.f32	s20, s0
 802085a:	eef0 9a60 	vmov.f32	s19, s1
 802085e:	900b      	str	r0, [sp, #44]	; 0x2c
 8020860:	eeb0 9a41 	vmov.f32	s18, s2
 8020864:	9306      	str	r3, [sp, #24]
 8020866:	eeb0 8a62 	vmov.f32	s16, s5
 802086a:	eef0 8a43 	vmov.f32	s17, s6
 802086e:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8020870:	eeb0 ca44 	vmov.f32	s24, s8
 8020874:	eef0 ba64 	vmov.f32	s23, s9
 8020878:	eeb0 ba45 	vmov.f32	s22, s10
 802087c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8020880:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 8020884:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8020886:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 802088a:	6850      	ldr	r0, [r2, #4]
 802088c:	6812      	ldr	r2, [r2, #0]
 802088e:	fb00 1303 	mla	r3, r0, r3, r1
 8020892:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020896:	18d3      	adds	r3, r2, r3
 8020898:	9307      	str	r3, [sp, #28]
 802089a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802089c:	681b      	ldr	r3, [r3, #0]
 802089e:	9308      	str	r3, [sp, #32]
 80208a0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80208a2:	685d      	ldr	r5, [r3, #4]
 80208a4:	3504      	adds	r5, #4
 80208a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80208a8:	2b00      	cmp	r3, #0
 80208aa:	dc03      	bgt.n	80208b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80208ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80208ae:	2b00      	cmp	r3, #0
 80208b0:	f340 81e6 	ble.w	8020c80 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80208b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80208b6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80208ba:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80208be:	1e48      	subs	r0, r1, #1
 80208c0:	1e56      	subs	r6, r2, #1
 80208c2:	9b06      	ldr	r3, [sp, #24]
 80208c4:	2b00      	cmp	r3, #0
 80208c6:	f340 80bd 	ble.w	8020a44 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 80208ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80208cc:	1427      	asrs	r7, r4, #16
 80208ce:	ea4f 4323 	mov.w	r3, r3, asr #16
 80208d2:	d406      	bmi.n	80208e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80208d4:	4287      	cmp	r7, r0
 80208d6:	da04      	bge.n	80208e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80208d8:	2b00      	cmp	r3, #0
 80208da:	db02      	blt.n	80208e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80208dc:	42b3      	cmp	r3, r6
 80208de:	f2c0 80b2 	blt.w	8020a46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80208e2:	3701      	adds	r7, #1
 80208e4:	f100 80a1 	bmi.w	8020a2a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80208e8:	42b9      	cmp	r1, r7
 80208ea:	f2c0 809e 	blt.w	8020a2a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80208ee:	3301      	adds	r3, #1
 80208f0:	f100 809b 	bmi.w	8020a2a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80208f4:	429a      	cmp	r2, r3
 80208f6:	f2c0 8098 	blt.w	8020a2a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80208fa:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 80208fe:	f1bb 0f00 	cmp.w	fp, #0
 8020902:	f340 80bf 	ble.w	8020a84 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8020906:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8020908:	9828      	ldr	r0, [sp, #160]	; 0xa0
 802090a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802090c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020910:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8020914:	1420      	asrs	r0, r4, #16
 8020916:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8020918:	ea4f 4723 	mov.w	r7, r3, asr #16
 802091c:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8020920:	6892      	ldr	r2, [r2, #8]
 8020922:	f100 8103 	bmi.w	8020b2c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8020926:	f102 3eff 	add.w	lr, r2, #4294967295
 802092a:	4570      	cmp	r0, lr
 802092c:	f280 80fe 	bge.w	8020b2c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8020930:	2f00      	cmp	r7, #0
 8020932:	f2c0 80fb 	blt.w	8020b2c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8020936:	f10c 3eff 	add.w	lr, ip, #4294967295
 802093a:	4577      	cmp	r7, lr
 802093c:	f280 80f6 	bge.w	8020b2c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8020940:	b212      	sxth	r2, r2
 8020942:	fb07 0002 	mla	r0, r7, r2, r0
 8020946:	9f08      	ldr	r7, [sp, #32]
 8020948:	f817 8000 	ldrb.w	r8, [r7, r0]
 802094c:	eb07 0e00 	add.w	lr, r7, r0
 8020950:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020954:	eb05 0c08 	add.w	ip, r5, r8
 8020958:	2b00      	cmp	r3, #0
 802095a:	f000 80d8 	beq.w	8020b0e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c2>
 802095e:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8020962:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020966:	442f      	add	r7, r5
 8020968:	2900      	cmp	r1, #0
 802096a:	f000 80d9 	beq.w	8020b20 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 802096e:	eb0e 0002 	add.w	r0, lr, r2
 8020972:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8020976:	7840      	ldrb	r0, [r0, #1]
 8020978:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802097c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020980:	442a      	add	r2, r5
 8020982:	4428      	add	r0, r5
 8020984:	b29b      	uxth	r3, r3
 8020986:	f815 a008 	ldrb.w	sl, [r5, r8]
 802098a:	b289      	uxth	r1, r1
 802098c:	f897 8000 	ldrb.w	r8, [r7]
 8020990:	fb03 f901 	mul.w	r9, r3, r1
 8020994:	011b      	lsls	r3, r3, #4
 8020996:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802099a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802099e:	eba3 0309 	sub.w	r3, r3, r9
 80209a2:	b289      	uxth	r1, r1
 80209a4:	b29b      	uxth	r3, r3
 80209a6:	ebae 0e01 	sub.w	lr, lr, r1
 80209aa:	fb03 f808 	mul.w	r8, r3, r8
 80209ae:	fa1f fe8e 	uxth.w	lr, lr
 80209b2:	fb0e 880a 	mla	r8, lr, sl, r8
 80209b6:	f892 a000 	ldrb.w	sl, [r2]
 80209ba:	fb01 880a 	mla	r8, r1, sl, r8
 80209be:	f890 a000 	ldrb.w	sl, [r0]
 80209c2:	fb09 880a 	mla	r8, r9, sl, r8
 80209c6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80209ca:	f886 8000 	strb.w	r8, [r6]
 80209ce:	f897 8001 	ldrb.w	r8, [r7, #1]
 80209d2:	f89c a001 	ldrb.w	sl, [ip, #1]
 80209d6:	fb03 f808 	mul.w	r8, r3, r8
 80209da:	fb0e 880a 	mla	r8, lr, sl, r8
 80209de:	f892 a001 	ldrb.w	sl, [r2, #1]
 80209e2:	fb01 880a 	mla	r8, r1, sl, r8
 80209e6:	f890 a001 	ldrb.w	sl, [r0, #1]
 80209ea:	fb09 880a 	mla	r8, r9, sl, r8
 80209ee:	ea4f 2828 	mov.w	r8, r8, asr #8
 80209f2:	f886 8001 	strb.w	r8, [r6, #1]
 80209f6:	78bf      	ldrb	r7, [r7, #2]
 80209f8:	f89c c002 	ldrb.w	ip, [ip, #2]
 80209fc:	437b      	muls	r3, r7
 80209fe:	7892      	ldrb	r2, [r2, #2]
 8020a00:	fb0e 330c 	mla	r3, lr, ip, r3
 8020a04:	fb01 3102 	mla	r1, r1, r2, r3
 8020a08:	7882      	ldrb	r2, [r0, #2]
 8020a0a:	fb09 1902 	mla	r9, r9, r2, r1
 8020a0e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020a12:	f886 9002 	strb.w	r9, [r6, #2]
 8020a16:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020a18:	3603      	adds	r6, #3
 8020a1a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8020a1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020a20:	441c      	add	r4, r3
 8020a22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020a24:	4413      	add	r3, r2
 8020a26:	9322      	str	r3, [sp, #136]	; 0x88
 8020a28:	e769      	b.n	80208fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8020a2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020a2c:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8020a2e:	441c      	add	r4, r3
 8020a30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020a32:	443b      	add	r3, r7
 8020a34:	9322      	str	r3, [sp, #136]	; 0x88
 8020a36:	9b06      	ldr	r3, [sp, #24]
 8020a38:	3b01      	subs	r3, #1
 8020a3a:	9306      	str	r3, [sp, #24]
 8020a3c:	9b07      	ldr	r3, [sp, #28]
 8020a3e:	3303      	adds	r3, #3
 8020a40:	9307      	str	r3, [sp, #28]
 8020a42:	e73e      	b.n	80208c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020a44:	d026      	beq.n	8020a94 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8020a46:	9b06      	ldr	r3, [sp, #24]
 8020a48:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8020a4a:	3b01      	subs	r3, #1
 8020a4c:	fb00 4003 	mla	r0, r0, r3, r4
 8020a50:	1400      	asrs	r0, r0, #16
 8020a52:	f53f af52 	bmi.w	80208fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8020a56:	3901      	subs	r1, #1
 8020a58:	4288      	cmp	r0, r1
 8020a5a:	f6bf af4e 	bge.w	80208fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8020a5e:	9924      	ldr	r1, [sp, #144]	; 0x90
 8020a60:	9822      	ldr	r0, [sp, #136]	; 0x88
 8020a62:	fb01 0303 	mla	r3, r1, r3, r0
 8020a66:	141b      	asrs	r3, r3, #16
 8020a68:	f53f af47 	bmi.w	80208fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8020a6c:	3a01      	subs	r2, #1
 8020a6e:	4293      	cmp	r3, r2
 8020a70:	f6bf af43 	bge.w	80208fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8020a74:	9b07      	ldr	r3, [sp, #28]
 8020a76:	f8dd a018 	ldr.w	sl, [sp, #24]
 8020a7a:	f103 0803 	add.w	r8, r3, #3
 8020a7e:	f1ba 0f00 	cmp.w	sl, #0
 8020a82:	dc71      	bgt.n	8020b68 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8020a84:	9b06      	ldr	r3, [sp, #24]
 8020a86:	9a07      	ldr	r2, [sp, #28]
 8020a88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020a8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020a90:	441a      	add	r2, r3
 8020a92:	9207      	str	r2, [sp, #28]
 8020a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a96:	2b00      	cmp	r3, #0
 8020a98:	f340 80f2 	ble.w	8020c80 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8020a9c:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8020aa0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020aa2:	ee79 9aab 	vadd.f32	s19, s19, s23
 8020aa6:	eef0 6a48 	vmov.f32	s13, s16
 8020aaa:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8020aae:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8020ab2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020ab6:	ee16 4a90 	vmov	r4, s13
 8020aba:	eef0 6a68 	vmov.f32	s13, s17
 8020abe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020ac2:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 8020ac6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020aca:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020ace:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020ad2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020ad6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020ada:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020ade:	ee18 2a10 	vmov	r2, s16
 8020ae2:	eeb0 8a47 	vmov.f32	s16, s14
 8020ae6:	fb92 f3f3 	sdiv	r3, r2, r3
 8020aea:	ee18 2a90 	vmov	r2, s17
 8020aee:	9323      	str	r3, [sp, #140]	; 0x8c
 8020af0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020af2:	eef0 8a67 	vmov.f32	s17, s15
 8020af6:	fb92 f3f3 	sdiv	r3, r2, r3
 8020afa:	9324      	str	r3, [sp, #144]	; 0x90
 8020afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020afe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020b00:	3b01      	subs	r3, #1
 8020b02:	9309      	str	r3, [sp, #36]	; 0x24
 8020b04:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020b06:	bf08      	it	eq
 8020b08:	4613      	moveq	r3, r2
 8020b0a:	9306      	str	r3, [sp, #24]
 8020b0c:	e6cb      	b.n	80208a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8020b0e:	b151      	cbz	r1, 8020b26 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8020b10:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8020b14:	4660      	mov	r0, ip
 8020b16:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020b1a:	442a      	add	r2, r5
 8020b1c:	4667      	mov	r7, ip
 8020b1e:	e731      	b.n	8020984 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8020b20:	4660      	mov	r0, ip
 8020b22:	4662      	mov	r2, ip
 8020b24:	e72e      	b.n	8020984 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8020b26:	4660      	mov	r0, ip
 8020b28:	4662      	mov	r2, ip
 8020b2a:	e7f7      	b.n	8020b1c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8020b2c:	f110 0e01 	adds.w	lr, r0, #1
 8020b30:	f53f af71 	bmi.w	8020a16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8020b34:	4572      	cmp	r2, lr
 8020b36:	f6ff af6e 	blt.w	8020a16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8020b3a:	f117 0e01 	adds.w	lr, r7, #1
 8020b3e:	f53f af6a 	bmi.w	8020a16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8020b42:	45f4      	cmp	ip, lr
 8020b44:	f6ff af67 	blt.w	8020a16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8020b48:	b212      	sxth	r2, r2
 8020b4a:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8020b4e:	fa0f f38c 	sxth.w	r3, ip
 8020b52:	9200      	str	r2, [sp, #0]
 8020b54:	4631      	mov	r1, r6
 8020b56:	9a08      	ldr	r2, [sp, #32]
 8020b58:	9301      	str	r3, [sp, #4]
 8020b5a:	462b      	mov	r3, r5
 8020b5c:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8020b60:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8020b62:	f7ff fdbf 	bl	80206e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8020b66:	e756      	b.n	8020a16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8020b68:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8020b6a:	1426      	asrs	r6, r4, #16
 8020b6c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8020b6e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8020b72:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020b76:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8020b78:	1400      	asrs	r0, r0, #16
 8020b7a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8020b7e:	fb02 6000 	mla	r0, r2, r0, r6
 8020b82:	9e08      	ldr	r6, [sp, #32]
 8020b84:	f816 e000 	ldrb.w	lr, [r6, r0]
 8020b88:	eb06 0c00 	add.w	ip, r6, r0
 8020b8c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8020b90:	eb05 070e 	add.w	r7, r5, lr
 8020b94:	2b00      	cmp	r3, #0
 8020b96:	d064      	beq.n	8020c62 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 8020b98:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8020b9c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020ba0:	442e      	add	r6, r5
 8020ba2:	2900      	cmp	r1, #0
 8020ba4:	d066      	beq.n	8020c74 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8020ba6:	eb0c 0002 	add.w	r0, ip, r2
 8020baa:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8020bae:	7840      	ldrb	r0, [r0, #1]
 8020bb0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020bb4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020bb8:	442a      	add	r2, r5
 8020bba:	4428      	add	r0, r5
 8020bbc:	b29b      	uxth	r3, r3
 8020bbe:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8020bc2:	b289      	uxth	r1, r1
 8020bc4:	f896 e000 	ldrb.w	lr, [r6]
 8020bc8:	f108 0803 	add.w	r8, r8, #3
 8020bcc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020bd0:	fb03 f901 	mul.w	r9, r3, r1
 8020bd4:	011b      	lsls	r3, r3, #4
 8020bd6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020bda:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8020bde:	eba3 0309 	sub.w	r3, r3, r9
 8020be2:	b289      	uxth	r1, r1
 8020be4:	b29b      	uxth	r3, r3
 8020be6:	ebac 0c01 	sub.w	ip, ip, r1
 8020bea:	fb03 fe0e 	mul.w	lr, r3, lr
 8020bee:	fa1f fc8c 	uxth.w	ip, ip
 8020bf2:	fb0c ee0b 	mla	lr, ip, fp, lr
 8020bf6:	f892 b000 	ldrb.w	fp, [r2]
 8020bfa:	fb01 ee0b 	mla	lr, r1, fp, lr
 8020bfe:	f890 b000 	ldrb.w	fp, [r0]
 8020c02:	fb09 ee0b 	mla	lr, r9, fp, lr
 8020c06:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020c0a:	f808 ec06 	strb.w	lr, [r8, #-6]
 8020c0e:	f896 e001 	ldrb.w	lr, [r6, #1]
 8020c12:	f897 b001 	ldrb.w	fp, [r7, #1]
 8020c16:	fb03 fe0e 	mul.w	lr, r3, lr
 8020c1a:	fb0c ee0b 	mla	lr, ip, fp, lr
 8020c1e:	f892 b001 	ldrb.w	fp, [r2, #1]
 8020c22:	fb01 ee0b 	mla	lr, r1, fp, lr
 8020c26:	f890 b001 	ldrb.w	fp, [r0, #1]
 8020c2a:	fb09 ee0b 	mla	lr, r9, fp, lr
 8020c2e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020c32:	f808 ec05 	strb.w	lr, [r8, #-5]
 8020c36:	78b6      	ldrb	r6, [r6, #2]
 8020c38:	78bf      	ldrb	r7, [r7, #2]
 8020c3a:	4373      	muls	r3, r6
 8020c3c:	7896      	ldrb	r6, [r2, #2]
 8020c3e:	7882      	ldrb	r2, [r0, #2]
 8020c40:	fb0c 3307 	mla	r3, ip, r7, r3
 8020c44:	fb01 3306 	mla	r3, r1, r6, r3
 8020c48:	fb09 3902 	mla	r9, r9, r2, r3
 8020c4c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020c4e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8020c50:	441c      	add	r4, r3
 8020c52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020c54:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020c58:	4413      	add	r3, r2
 8020c5a:	f808 9c04 	strb.w	r9, [r8, #-4]
 8020c5e:	9322      	str	r3, [sp, #136]	; 0x88
 8020c60:	e70d      	b.n	8020a7e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8020c62:	b151      	cbz	r1, 8020c7a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8020c64:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8020c68:	4638      	mov	r0, r7
 8020c6a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020c6e:	442a      	add	r2, r5
 8020c70:	463e      	mov	r6, r7
 8020c72:	e7a3      	b.n	8020bbc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020c74:	4638      	mov	r0, r7
 8020c76:	463a      	mov	r2, r7
 8020c78:	e7a0      	b.n	8020bbc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020c7a:	4638      	mov	r0, r7
 8020c7c:	463a      	mov	r2, r7
 8020c7e:	e7f7      	b.n	8020c70 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8020c80:	b00d      	add	sp, #52	; 0x34
 8020c82:	ecbd 8b0a 	vpop	{d8-d12}
 8020c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020c8c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8020c8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c90:	e9dd 050e 	ldrd	r0, r5, [sp, #56]	; 0x38
 8020c94:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8020c98:	2d00      	cmp	r5, #0
 8020c9a:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8020c9e:	fb05 040e 	mla	r4, r5, lr, r0
 8020ca2:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8020ca6:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 8020caa:	eb02 0804 	add.w	r8, r2, r4
 8020cae:	db40      	blt.n	8020d32 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 8020cb0:	45a9      	cmp	r9, r5
 8020cb2:	dd3e      	ble.n	8020d32 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 8020cb4:	2800      	cmp	r0, #0
 8020cb6:	db3a      	blt.n	8020d2e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 8020cb8:	4586      	cmp	lr, r0
 8020cba:	dd38      	ble.n	8020d2e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 8020cbc:	5d12      	ldrb	r2, [r2, r4]
 8020cbe:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8020cc2:	1c42      	adds	r2, r0, #1
 8020cc4:	d438      	bmi.n	8020d38 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 8020cc6:	4596      	cmp	lr, r2
 8020cc8:	dd36      	ble.n	8020d38 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 8020cca:	b3bf      	cbz	r7, 8020d3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb0>
 8020ccc:	f898 2001 	ldrb.w	r2, [r8, #1]
 8020cd0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8020cd4:	3501      	adds	r5, #1
 8020cd6:	d435      	bmi.n	8020d44 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 8020cd8:	45a9      	cmp	r9, r5
 8020cda:	dd33      	ble.n	8020d44 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 8020cdc:	f1bc 0f00 	cmp.w	ip, #0
 8020ce0:	d033      	beq.n	8020d4a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbe>
 8020ce2:	2800      	cmp	r0, #0
 8020ce4:	db2c      	blt.n	8020d40 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 8020ce6:	4586      	cmp	lr, r0
 8020ce8:	dd2a      	ble.n	8020d40 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 8020cea:	f818 200e 	ldrb.w	r2, [r8, lr]
 8020cee:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8020cf2:	3001      	adds	r0, #1
 8020cf4:	d42c      	bmi.n	8020d50 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 8020cf6:	4586      	cmp	lr, r0
 8020cf8:	dd2a      	ble.n	8020d50 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 8020cfa:	b35f      	cbz	r7, 8020d54 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc8>
 8020cfc:	44c6      	add	lr, r8
 8020cfe:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8020d02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8020d06:	2f0f      	cmp	r7, #15
 8020d08:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8020d0c:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 8020d10:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8020d14:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020d18:	d802      	bhi.n	8020d20 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x94>
 8020d1a:	f1bc 0f0f 	cmp.w	ip, #15
 8020d1e:	d91b      	bls.n	8020d58 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xcc>
 8020d20:	4b77      	ldr	r3, [pc, #476]	; (8020f00 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>)
 8020d22:	f240 1157 	movw	r1, #343	; 0x157
 8020d26:	4a77      	ldr	r2, [pc, #476]	; (8020f04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>)
 8020d28:	4877      	ldr	r0, [pc, #476]	; (8020f08 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x27c>)
 8020d2a:	f005 fe49 	bl	80269c0 <__assert_func>
 8020d2e:	2600      	movs	r6, #0
 8020d30:	e7c7      	b.n	8020cc2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x36>
 8020d32:	2400      	movs	r4, #0
 8020d34:	4626      	mov	r6, r4
 8020d36:	e7cd      	b.n	8020cd4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8020d38:	2400      	movs	r4, #0
 8020d3a:	e7cb      	b.n	8020cd4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8020d3c:	463c      	mov	r4, r7
 8020d3e:	e7c9      	b.n	8020cd4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8020d40:	2500      	movs	r5, #0
 8020d42:	e7d6      	b.n	8020cf2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x66>
 8020d44:	2200      	movs	r2, #0
 8020d46:	4615      	mov	r5, r2
 8020d48:	e7dd      	b.n	8020d06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8020d4a:	4662      	mov	r2, ip
 8020d4c:	4665      	mov	r5, ip
 8020d4e:	e7da      	b.n	8020d06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8020d50:	2200      	movs	r2, #0
 8020d52:	e7d8      	b.n	8020d06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8020d54:	463a      	mov	r2, r7
 8020d56:	e7d6      	b.n	8020d06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8020d58:	b2bf      	uxth	r7, r7
 8020d5a:	fa1f f08c 	uxth.w	r0, ip
 8020d5e:	ea4f 1c07 	mov.w	ip, r7, lsl #4
 8020d62:	fb00 fe07 	mul.w	lr, r0, r7
 8020d66:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8020d6a:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8020d6e:	ebac 070e 	sub.w	r7, ip, lr
 8020d72:	b280      	uxth	r0, r0
 8020d74:	b2bf      	uxth	r7, r7
 8020d76:	1a1b      	subs	r3, r3, r0
 8020d78:	fb07 fc0a 	mul.w	ip, r7, sl
 8020d7c:	b29b      	uxth	r3, r3
 8020d7e:	fb03 cc0b 	mla	ip, r3, fp, ip
 8020d82:	9300      	str	r3, [sp, #0]
 8020d84:	fb00 cc09 	mla	ip, r0, r9, ip
 8020d88:	fb0e cc08 	mla	ip, lr, r8, ip
 8020d8c:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8020d90:	9301      	str	r3, [sp, #4]
 8020d92:	2b00      	cmp	r3, #0
 8020d94:	f000 80b0 	beq.w	8020ef8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26c>
 8020d98:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8020d9c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020da0:	fb0b fc0c 	mul.w	ip, fp, ip
 8020da4:	fb0b f606 	mul.w	r6, fp, r6
 8020da8:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8020dac:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020db0:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8020db4:	44dc      	add	ip, fp
 8020db6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020dba:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020dbe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020dc2:	fb0a fb0b 	mul.w	fp, sl, fp
 8020dc6:	fb0a fa04 	mul.w	sl, sl, r4
 8020dca:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8020dce:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8020dd2:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 8020dd6:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8020dda:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8020dde:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020de2:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 8020de6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020dea:	0a36      	lsrs	r6, r6, #8
 8020dec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020df0:	44dc      	add	ip, fp
 8020df2:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8020df6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8020dfa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020dfe:	fb09 fb0b 	mul.w	fp, r9, fp
 8020e02:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020e06:	fb09 f905 	mul.w	r9, r9, r5
 8020e0a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020e0e:	ea4f 241b 	mov.w	r4, fp, lsr #8
 8020e12:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020e16:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8020e1a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020e1e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020e22:	fb0c fc07 	mul.w	ip, ip, r7
 8020e26:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8020e2a:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8020e2e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020e32:	445c      	add	r4, fp
 8020e34:	fb08 f505 	mul.w	r5, r8, r5
 8020e38:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020e3c:	fb08 f802 	mul.w	r8, r8, r2
 8020e40:	0a24      	lsrs	r4, r4, #8
 8020e42:	0a2a      	lsrs	r2, r5, #8
 8020e44:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8020e48:	fb07 f70a 	mul.w	r7, r7, sl
 8020e4c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020e50:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020e54:	4415      	add	r5, r2
 8020e56:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8020e5a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8020e5e:	9a00      	ldr	r2, [sp, #0]
 8020e60:	0a2d      	lsrs	r5, r5, #8
 8020e62:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020e66:	fb03 cc02 	mla	ip, r3, r2, ip
 8020e6a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020e6e:	fb02 7306 	mla	r3, r2, r6, r7
 8020e72:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8020e76:	9a01      	ldr	r2, [sp, #4]
 8020e78:	fb05 c50e 	mla	r5, r5, lr, ip
 8020e7c:	fb0e 3e08 	mla	lr, lr, r8, r3
 8020e80:	f409 437f 	and.w	r3, r9, #65280	; 0xff00
 8020e84:	fb04 5400 	mla	r4, r4, r0, r5
 8020e88:	fb00 e303 	mla	r3, r0, r3, lr
 8020e8c:	0a24      	lsrs	r4, r4, #8
 8020e8e:	0a1b      	lsrs	r3, r3, #8
 8020e90:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020e94:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020e98:	431c      	orrs	r4, r3
 8020e9a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8020e9e:	b29b      	uxth	r3, r3
 8020ea0:	b2e0      	uxtb	r0, r4
 8020ea2:	435a      	muls	r2, r3
 8020ea4:	fb10 f003 	smulbb	r0, r0, r3
 8020ea8:	1c55      	adds	r5, r2, #1
 8020eaa:	eb05 2512 	add.w	r5, r5, r2, lsr #8
 8020eae:	780a      	ldrb	r2, [r1, #0]
 8020eb0:	ea6f 2515 	mvn.w	r5, r5, lsr #8
 8020eb4:	b2ed      	uxtb	r5, r5
 8020eb6:	fb02 0205 	mla	r2, r2, r5, r0
 8020eba:	b292      	uxth	r2, r2
 8020ebc:	1c50      	adds	r0, r2, #1
 8020ebe:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8020ec2:	7848      	ldrb	r0, [r1, #1]
 8020ec4:	fb10 f005 	smulbb	r0, r0, r5
 8020ec8:	1212      	asrs	r2, r2, #8
 8020eca:	700a      	strb	r2, [r1, #0]
 8020ecc:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8020ed0:	0c24      	lsrs	r4, r4, #16
 8020ed2:	fb02 0203 	mla	r2, r2, r3, r0
 8020ed6:	b292      	uxth	r2, r2
 8020ed8:	1c50      	adds	r0, r2, #1
 8020eda:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8020ede:	1212      	asrs	r2, r2, #8
 8020ee0:	704a      	strb	r2, [r1, #1]
 8020ee2:	788a      	ldrb	r2, [r1, #2]
 8020ee4:	fb12 f505 	smulbb	r5, r2, r5
 8020ee8:	fb04 5303 	mla	r3, r4, r3, r5
 8020eec:	b29b      	uxth	r3, r3
 8020eee:	1c5a      	adds	r2, r3, #1
 8020ef0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020ef4:	121b      	asrs	r3, r3, #8
 8020ef6:	708b      	strb	r3, [r1, #2]
 8020ef8:	b003      	add	sp, #12
 8020efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020efe:	bf00      	nop
 8020f00:	0802eaaf 	.word	0x0802eaaf
 8020f04:	0802f017 	.word	0x0802f017
 8020f08:	0802eb78 	.word	0x0802eb78

08020f0c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f10:	ed2d 8b08 	vpush	{d8-d11}
 8020f14:	b09f      	sub	sp, #124	; 0x7c
 8020f16:	eeb0 aa40 	vmov.f32	s20, s0
 8020f1a:	eef0 9a60 	vmov.f32	s19, s1
 8020f1e:	921b      	str	r2, [sp, #108]	; 0x6c
 8020f20:	eeb0 9a41 	vmov.f32	s18, s2
 8020f24:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8020f26:	eeb0 8a62 	vmov.f32	s16, s5
 8020f2a:	9309      	str	r3, [sp, #36]	; 0x24
 8020f2c:	eef0 8a43 	vmov.f32	s17, s6
 8020f30:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8020f34:	eef0 ba44 	vmov.f32	s23, s8
 8020f38:	901d      	str	r0, [sp, #116]	; 0x74
 8020f3a:	eeb0 ba64 	vmov.f32	s22, s9
 8020f3e:	931c      	str	r3, [sp, #112]	; 0x70
 8020f40:	eef0 aa45 	vmov.f32	s21, s10
 8020f44:	6850      	ldr	r0, [r2, #4]
 8020f46:	9119      	str	r1, [sp, #100]	; 0x64
 8020f48:	6812      	ldr	r2, [r2, #0]
 8020f4a:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 8020f4c:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8020f50:	fb00 1303 	mla	r3, r0, r3, r1
 8020f54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020f58:	18d3      	adds	r3, r2, r3
 8020f5a:	930c      	str	r3, [sp, #48]	; 0x30
 8020f5c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8020f5e:	681b      	ldr	r3, [r3, #0]
 8020f60:	9312      	str	r3, [sp, #72]	; 0x48
 8020f62:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8020f64:	685e      	ldr	r6, [r3, #4]
 8020f66:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8020f6a:	3604      	adds	r6, #4
 8020f6c:	930d      	str	r3, [sp, #52]	; 0x34
 8020f6e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020f70:	2b00      	cmp	r3, #0
 8020f72:	dc03      	bgt.n	8020f7c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020f74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020f76:	2b00      	cmp	r3, #0
 8020f78:	f340 8378 	ble.w	802166c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 8020f7c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8020f7e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020f82:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020f86:	1e48      	subs	r0, r1, #1
 8020f88:	1e57      	subs	r7, r2, #1
 8020f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020f8c:	2b00      	cmp	r3, #0
 8020f8e:	f340 818c 	ble.w	80212aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8020f92:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8020f94:	142b      	asrs	r3, r5, #16
 8020f96:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8020f9a:	d406      	bmi.n	8020faa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020f9c:	4584      	cmp	ip, r0
 8020f9e:	da04      	bge.n	8020faa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020fa0:	2b00      	cmp	r3, #0
 8020fa2:	db02      	blt.n	8020faa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020fa4:	42bb      	cmp	r3, r7
 8020fa6:	f2c0 8181 	blt.w	80212ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 8020faa:	f11c 0c01 	adds.w	ip, ip, #1
 8020fae:	f100 816f 	bmi.w	8021290 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8020fb2:	4561      	cmp	r1, ip
 8020fb4:	f2c0 816c 	blt.w	8021290 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8020fb8:	3301      	adds	r3, #1
 8020fba:	f100 8169 	bmi.w	8021290 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8020fbe:	429a      	cmp	r2, r3
 8020fc0:	f2c0 8166 	blt.w	8021290 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8020fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020fc6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020fc8:	931a      	str	r3, [sp, #104]	; 0x68
 8020fca:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020fcc:	2b00      	cmp	r3, #0
 8020fce:	f340 818c 	ble.w	80212ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8020fd2:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8020fd4:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8020fd8:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020fdc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020fe0:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8020fe2:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8020fe6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8020fe8:	141b      	asrs	r3, r3, #16
 8020fea:	f100 81d0 	bmi.w	802138e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8020fee:	f100 38ff 	add.w	r8, r0, #4294967295
 8020ff2:	4543      	cmp	r3, r8
 8020ff4:	f280 81cb 	bge.w	802138e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8020ff8:	f1bc 0f00 	cmp.w	ip, #0
 8020ffc:	f2c0 81c7 	blt.w	802138e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8021000:	f10e 38ff 	add.w	r8, lr, #4294967295
 8021004:	45c4      	cmp	ip, r8
 8021006:	f280 81c2 	bge.w	802138e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 802100a:	b200      	sxth	r0, r0
 802100c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802100e:	fb0c 3300 	mla	r3, ip, r0, r3
 8021012:	eb04 0803 	add.w	r8, r4, r3
 8021016:	5ce3      	ldrb	r3, [r4, r3]
 8021018:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802101c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8021020:	2a00      	cmp	r2, #0
 8021022:	f000 81a9 	beq.w	8021378 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46c>
 8021026:	f898 c001 	ldrb.w	ip, [r8, #1]
 802102a:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 802102e:	940e      	str	r4, [sp, #56]	; 0x38
 8021030:	0e24      	lsrs	r4, r4, #24
 8021032:	9415      	str	r4, [sp, #84]	; 0x54
 8021034:	b179      	cbz	r1, 8021056 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8021036:	eb08 0c00 	add.w	ip, r8, r0
 802103a:	f818 0000 	ldrb.w	r0, [r8, r0]
 802103e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8021042:	900a      	str	r0, [sp, #40]	; 0x28
 8021044:	0e00      	lsrs	r0, r0, #24
 8021046:	9013      	str	r0, [sp, #76]	; 0x4c
 8021048:	f89c 0001 	ldrb.w	r0, [ip, #1]
 802104c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8021050:	900f      	str	r0, [sp, #60]	; 0x3c
 8021052:	0e00      	lsrs	r0, r0, #24
 8021054:	9016      	str	r0, [sp, #88]	; 0x58
 8021056:	b292      	uxth	r2, r2
 8021058:	9815      	ldr	r0, [sp, #84]	; 0x54
 802105a:	b289      	uxth	r1, r1
 802105c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802105e:	fb02 f901 	mul.w	r9, r2, r1
 8021062:	0112      	lsls	r2, r2, #4
 8021064:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8021068:	eba2 0809 	sub.w	r8, r2, r9
 802106c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8021070:	b289      	uxth	r1, r1
 8021072:	fa1f f888 	uxth.w	r8, r8
 8021076:	1a52      	subs	r2, r2, r1
 8021078:	fb08 f000 	mul.w	r0, r8, r0
 802107c:	b292      	uxth	r2, r2
 802107e:	fb02 000e 	mla	r0, r2, lr, r0
 8021082:	fb01 0004 	mla	r0, r1, r4, r0
 8021086:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021088:	fb09 0004 	mla	r0, r9, r4, r0
 802108c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021090:	2800      	cmp	r0, #0
 8021092:	f000 80f2 	beq.w	802127a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8021096:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802109a:	d01b      	beq.n	80210d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802109c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80210a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80210a4:	fb0e fa0a 	mul.w	sl, lr, sl
 80210a8:	fb0e fe03 	mul.w	lr, lr, r3
 80210ac:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80210b0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80210b4:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80210b8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80210bc:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80210c0:	4453      	add	r3, sl
 80210c2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80210c6:	0a1b      	lsrs	r3, r3, #8
 80210c8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80210cc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80210d0:	ea43 030c 	orr.w	r3, r3, ip
 80210d4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80210d6:	2cff      	cmp	r4, #255	; 0xff
 80210d8:	d021      	beq.n	802111e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80210da:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80210dc:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80210e0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80210e2:	fb04 fb0b 	mul.w	fp, r4, fp
 80210e6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80210e8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80210ec:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80210ee:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80210f2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80210f6:	fb04 fa0a 	mul.w	sl, r4, sl
 80210fa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80210fe:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021102:	44de      	add	lr, fp
 8021104:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021108:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802110c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021110:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021114:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021118:	ea4e 040a 	orr.w	r4, lr, sl
 802111c:	940e      	str	r4, [sp, #56]	; 0x38
 802111e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021120:	2cff      	cmp	r4, #255	; 0xff
 8021122:	d021      	beq.n	8021168 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 8021124:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021126:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802112a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802112c:	fb04 fb0b 	mul.w	fp, r4, fp
 8021130:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021132:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021136:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021138:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802113c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021140:	fb04 fa0a 	mul.w	sl, r4, sl
 8021144:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021148:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802114c:	44de      	add	lr, fp
 802114e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021152:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021156:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802115a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802115e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021162:	ea4e 040a 	orr.w	r4, lr, sl
 8021166:	940a      	str	r4, [sp, #40]	; 0x28
 8021168:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802116a:	2cff      	cmp	r4, #255	; 0xff
 802116c:	d021      	beq.n	80211b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 802116e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021170:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021174:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021176:	fb04 fb0b 	mul.w	fp, r4, fp
 802117a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802117c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021180:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021182:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021186:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802118a:	fb04 fa0a 	mul.w	sl, r4, sl
 802118e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021192:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021196:	44de      	add	lr, fp
 8021198:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802119c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80211a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80211a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80211a8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80211ac:	ea4e 040a 	orr.w	r4, lr, sl
 80211b0:	940f      	str	r4, [sp, #60]	; 0x3c
 80211b2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80211b4:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80211b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80211bc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80211c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80211c2:	fb08 fc0c 	mul.w	ip, r8, ip
 80211c6:	fb02 cc0e 	mla	ip, r2, lr, ip
 80211ca:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80211ce:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80211d0:	fb01 cc0e 	mla	ip, r1, lr, ip
 80211d4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80211d8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80211da:	fb09 cc0e 	mla	ip, r9, lr, ip
 80211de:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80211e2:	fb08 f80e 	mul.w	r8, r8, lr
 80211e6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80211ea:	fb02 8303 	mla	r3, r2, r3, r8
 80211ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80211f0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80211f4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80211f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80211fa:	fb01 330a 	mla	r3, r1, sl, r3
 80211fe:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8021202:	fb09 3901 	mla	r9, r9, r1, r3
 8021206:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021208:	990d      	ldr	r1, [sp, #52]	; 0x34
 802120a:	4343      	muls	r3, r0
 802120c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021210:	1c58      	adds	r0, r3, #1
 8021212:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021216:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802121a:	ea4c 0c09 	orr.w	ip, ip, r9
 802121e:	783b      	ldrb	r3, [r7, #0]
 8021220:	fa5f f28c 	uxtb.w	r2, ip
 8021224:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8021228:	fb12 f201 	smulbb	r2, r2, r1
 802122c:	b2c0      	uxtb	r0, r0
 802122e:	fb03 2300 	mla	r3, r3, r0, r2
 8021232:	b29b      	uxth	r3, r3
 8021234:	1c5a      	adds	r2, r3, #1
 8021236:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802123a:	787a      	ldrb	r2, [r7, #1]
 802123c:	fb12 f200 	smulbb	r2, r2, r0
 8021240:	121b      	asrs	r3, r3, #8
 8021242:	703b      	strb	r3, [r7, #0]
 8021244:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8021248:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 802124c:	fb03 2301 	mla	r3, r3, r1, r2
 8021250:	b29b      	uxth	r3, r3
 8021252:	1c5a      	adds	r2, r3, #1
 8021254:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021258:	121b      	asrs	r3, r3, #8
 802125a:	707b      	strb	r3, [r7, #1]
 802125c:	78bb      	ldrb	r3, [r7, #2]
 802125e:	fb13 f000 	smulbb	r0, r3, r0
 8021262:	fb0c 0c01 	mla	ip, ip, r1, r0
 8021266:	fa1f fc8c 	uxth.w	ip, ip
 802126a:	f10c 0301 	add.w	r3, ip, #1
 802126e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8021272:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8021276:	f887 c002 	strb.w	ip, [r7, #2]
 802127a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 802127c:	3703      	adds	r7, #3
 802127e:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8021280:	441a      	add	r2, r3
 8021282:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021284:	441d      	add	r5, r3
 8021286:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8021288:	9231      	str	r2, [sp, #196]	; 0xc4
 802128a:	3b01      	subs	r3, #1
 802128c:	931a      	str	r3, [sp, #104]	; 0x68
 802128e:	e69c      	b.n	8020fca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8021290:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021292:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8021294:	441c      	add	r4, r3
 8021296:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021298:	441d      	add	r5, r3
 802129a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802129c:	9431      	str	r4, [sp, #196]	; 0xc4
 802129e:	3b01      	subs	r3, #1
 80212a0:	9309      	str	r3, [sp, #36]	; 0x24
 80212a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80212a4:	3303      	adds	r3, #3
 80212a6:	930c      	str	r3, [sp, #48]	; 0x30
 80212a8:	e66f      	b.n	8020f8a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80212aa:	d026      	beq.n	80212fa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80212ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80212ae:	9833      	ldr	r0, [sp, #204]	; 0xcc
 80212b0:	3b01      	subs	r3, #1
 80212b2:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80212b4:	fb00 4003 	mla	r0, r0, r3, r4
 80212b8:	1400      	asrs	r0, r0, #16
 80212ba:	f53f ae83 	bmi.w	8020fc4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80212be:	3901      	subs	r1, #1
 80212c0:	4288      	cmp	r0, r1
 80212c2:	f6bf ae7f 	bge.w	8020fc4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80212c6:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80212c8:	fb01 5303 	mla	r3, r1, r3, r5
 80212cc:	141b      	asrs	r3, r3, #16
 80212ce:	f53f ae79 	bmi.w	8020fc4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80212d2:	3a01      	subs	r2, #1
 80212d4:	4293      	cmp	r3, r2
 80212d6:	f6bf ae75 	bge.w	8020fc4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80212da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80212dc:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80212e0:	f103 0e03 	add.w	lr, r3, #3
 80212e4:	f1bb 0f00 	cmp.w	fp, #0
 80212e8:	dc71      	bgt.n	80213ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80212ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80212ec:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80212f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80212f2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80212f6:	4423      	add	r3, r4
 80212f8:	930c      	str	r3, [sp, #48]	; 0x30
 80212fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80212fc:	2b00      	cmp	r3, #0
 80212fe:	f340 81b5 	ble.w	802166c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 8021302:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021306:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021308:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802130c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021310:	eef0 6a48 	vmov.f32	s13, s16
 8021314:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021318:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802131c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021320:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 8021324:	eef0 6a68 	vmov.f32	s13, s17
 8021328:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802132c:	ee16 5a90 	vmov	r5, s13
 8021330:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021334:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021338:	ee37 8a48 	vsub.f32	s16, s14, s16
 802133c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021340:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021344:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021348:	ee18 2a10 	vmov	r2, s16
 802134c:	eeb0 8a47 	vmov.f32	s16, s14
 8021350:	fb92 f3f3 	sdiv	r3, r2, r3
 8021354:	ee18 2a90 	vmov	r2, s17
 8021358:	9333      	str	r3, [sp, #204]	; 0xcc
 802135a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802135c:	eef0 8a67 	vmov.f32	s17, s15
 8021360:	fb92 f3f3 	sdiv	r3, r2, r3
 8021364:	9334      	str	r3, [sp, #208]	; 0xd0
 8021366:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8021368:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 802136a:	3b01      	subs	r3, #1
 802136c:	9319      	str	r3, [sp, #100]	; 0x64
 802136e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021370:	bf08      	it	eq
 8021372:	4613      	moveq	r3, r2
 8021374:	9309      	str	r3, [sp, #36]	; 0x24
 8021376:	e5fa      	b.n	8020f6e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8021378:	2900      	cmp	r1, #0
 802137a:	f43f ae6c 	beq.w	8021056 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802137e:	f818 0000 	ldrb.w	r0, [r8, r0]
 8021382:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8021386:	900a      	str	r0, [sp, #40]	; 0x28
 8021388:	0e00      	lsrs	r0, r0, #24
 802138a:	9013      	str	r0, [sp, #76]	; 0x4c
 802138c:	e663      	b.n	8021056 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802138e:	f113 0801 	adds.w	r8, r3, #1
 8021392:	f53f af72 	bmi.w	802127a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8021396:	4540      	cmp	r0, r8
 8021398:	f6ff af6f 	blt.w	802127a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802139c:	f11c 0801 	adds.w	r8, ip, #1
 80213a0:	f53f af6b 	bmi.w	802127a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80213a4:	45c6      	cmp	lr, r8
 80213a6:	f6ff af68 	blt.w	802127a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80213aa:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80213ac:	b200      	sxth	r0, r0
 80213ae:	9302      	str	r3, [sp, #8]
 80213b0:	fa0f f38e 	sxth.w	r3, lr
 80213b4:	9000      	str	r0, [sp, #0]
 80213b6:	9301      	str	r3, [sp, #4]
 80213b8:	4633      	mov	r3, r6
 80213ba:	981d      	ldr	r0, [sp, #116]	; 0x74
 80213bc:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80213c0:	e9cd c203 	strd	ip, r2, [sp, #12]
 80213c4:	4639      	mov	r1, r7
 80213c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80213c8:	f7ff fc60 	bl	8020c8c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 80213cc:	e755      	b.n	802127a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80213ce:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80213d0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80213d4:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80213d6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80213da:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80213dc:	1427      	asrs	r7, r4, #16
 80213de:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80213e0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80213e4:	142b      	asrs	r3, r5, #16
 80213e6:	fb01 7303 	mla	r3, r1, r3, r7
 80213ea:	18e7      	adds	r7, r4, r3
 80213ec:	5ce3      	ldrb	r3, [r4, r3]
 80213ee:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80213f2:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80213f6:	2a00      	cmp	r2, #0
 80213f8:	f000 812e 	beq.w	8021658 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>
 80213fc:	f897 8001 	ldrb.w	r8, [r7, #1]
 8021400:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8021404:	9410      	str	r4, [sp, #64]	; 0x40
 8021406:	0e24      	lsrs	r4, r4, #24
 8021408:	9417      	str	r4, [sp, #92]	; 0x5c
 802140a:	b170      	cbz	r0, 802142a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 802140c:	eb07 0801 	add.w	r8, r7, r1
 8021410:	5c79      	ldrb	r1, [r7, r1]
 8021412:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021416:	910b      	str	r1, [sp, #44]	; 0x2c
 8021418:	0e09      	lsrs	r1, r1, #24
 802141a:	9114      	str	r1, [sp, #80]	; 0x50
 802141c:	f898 1001 	ldrb.w	r1, [r8, #1]
 8021420:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021424:	9111      	str	r1, [sp, #68]	; 0x44
 8021426:	0e09      	lsrs	r1, r1, #24
 8021428:	9118      	str	r1, [sp, #96]	; 0x60
 802142a:	b292      	uxth	r2, r2
 802142c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 802142e:	b280      	uxth	r0, r0
 8021430:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021432:	fb02 f900 	mul.w	r9, r2, r0
 8021436:	0112      	lsls	r2, r2, #4
 8021438:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802143c:	eba2 0809 	sub.w	r8, r2, r9
 8021440:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8021444:	b280      	uxth	r0, r0
 8021446:	fa1f f888 	uxth.w	r8, r8
 802144a:	1a12      	subs	r2, r2, r0
 802144c:	fb08 f101 	mul.w	r1, r8, r1
 8021450:	b292      	uxth	r2, r2
 8021452:	fb02 110c 	mla	r1, r2, ip, r1
 8021456:	fb00 1104 	mla	r1, r0, r4, r1
 802145a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802145c:	fb09 1104 	mla	r1, r9, r4, r1
 8021460:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021464:	2900      	cmp	r1, #0
 8021466:	f000 80ec 	beq.w	8021642 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 802146a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802146e:	d019      	beq.n	80214a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x598>
 8021470:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021474:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021478:	fb0c fa0a 	mul.w	sl, ip, sl
 802147c:	fb0c fc03 	mul.w	ip, ip, r3
 8021480:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021484:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021488:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802148c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021490:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021494:	4453      	add	r3, sl
 8021496:	0a3f      	lsrs	r7, r7, #8
 8021498:	0a1b      	lsrs	r3, r3, #8
 802149a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802149e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80214a2:	433b      	orrs	r3, r7
 80214a4:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80214a6:	2cff      	cmp	r4, #255	; 0xff
 80214a8:	d020      	beq.n	80214ec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e0>
 80214aa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80214ac:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80214b0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80214b2:	4367      	muls	r7, r4
 80214b4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80214b6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80214ba:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80214be:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80214c0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80214c4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80214c8:	fb04 fa0a 	mul.w	sl, r4, sl
 80214cc:	44bc      	add	ip, r7
 80214ce:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80214d2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80214d6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80214da:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80214de:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80214e2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80214e6:	ea4c 040a 	orr.w	r4, ip, sl
 80214ea:	9410      	str	r4, [sp, #64]	; 0x40
 80214ec:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80214ee:	2cff      	cmp	r4, #255	; 0xff
 80214f0:	d020      	beq.n	8021534 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x628>
 80214f2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80214f4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80214f8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80214fa:	4367      	muls	r7, r4
 80214fc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80214fe:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021502:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021506:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021508:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802150c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021510:	fb04 fa0a 	mul.w	sl, r4, sl
 8021514:	44bc      	add	ip, r7
 8021516:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802151a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802151e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021522:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021526:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802152a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802152e:	ea4c 040a 	orr.w	r4, ip, sl
 8021532:	940b      	str	r4, [sp, #44]	; 0x2c
 8021534:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8021536:	2cff      	cmp	r4, #255	; 0xff
 8021538:	d020      	beq.n	802157c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 802153a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802153c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021540:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8021542:	4367      	muls	r7, r4
 8021544:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021546:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802154a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802154e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8021550:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021554:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021558:	fb04 fa0a 	mul.w	sl, r4, sl
 802155c:	44bc      	add	ip, r7
 802155e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021562:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021566:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802156a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802156e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021572:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021576:	ea4c 040a 	orr.w	r4, ip, sl
 802157a:	9411      	str	r4, [sp, #68]	; 0x44
 802157c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802157e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021582:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021586:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802158a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802158c:	fb08 f707 	mul.w	r7, r8, r7
 8021590:	fb02 770c 	mla	r7, r2, ip, r7
 8021594:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021598:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802159a:	fb00 770c 	mla	r7, r0, ip, r7
 802159e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80215a2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80215a4:	fb09 770c 	mla	r7, r9, ip, r7
 80215a8:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80215ac:	fb08 f80c 	mul.w	r8, r8, ip
 80215b0:	0a3f      	lsrs	r7, r7, #8
 80215b2:	fb02 8303 	mla	r3, r2, r3, r8
 80215b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80215b8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80215bc:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80215c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80215c2:	fb00 330a 	mla	r3, r0, sl, r3
 80215c6:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80215ca:	980d      	ldr	r0, [sp, #52]	; 0x34
 80215cc:	fb09 3c0c 	mla	ip, r9, ip, r3
 80215d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80215d2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80215d6:	434b      	muls	r3, r1
 80215d8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80215dc:	1c59      	adds	r1, r3, #1
 80215de:	ea47 070c 	orr.w	r7, r7, ip
 80215e2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80215e6:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80215ea:	b2fa      	uxtb	r2, r7
 80215ec:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80215f0:	fb12 f200 	smulbb	r2, r2, r0
 80215f4:	b2c9      	uxtb	r1, r1
 80215f6:	fb03 2301 	mla	r3, r3, r1, r2
 80215fa:	b29b      	uxth	r3, r3
 80215fc:	1c5a      	adds	r2, r3, #1
 80215fe:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021602:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8021606:	fb12 f201 	smulbb	r2, r2, r1
 802160a:	121b      	asrs	r3, r3, #8
 802160c:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8021610:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8021614:	0c3f      	lsrs	r7, r7, #16
 8021616:	fb03 2300 	mla	r3, r3, r0, r2
 802161a:	b29b      	uxth	r3, r3
 802161c:	1c5a      	adds	r2, r3, #1
 802161e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021622:	121b      	asrs	r3, r3, #8
 8021624:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8021628:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 802162c:	fb13 f101 	smulbb	r1, r3, r1
 8021630:	fb07 1700 	mla	r7, r7, r0, r1
 8021634:	b2bf      	uxth	r7, r7
 8021636:	1c7b      	adds	r3, r7, #1
 8021638:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802163c:	123f      	asrs	r7, r7, #8
 802163e:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8021642:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021644:	f10e 0e03 	add.w	lr, lr, #3
 8021648:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 802164a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802164e:	441a      	add	r2, r3
 8021650:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021652:	9231      	str	r2, [sp, #196]	; 0xc4
 8021654:	441d      	add	r5, r3
 8021656:	e645      	b.n	80212e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 8021658:	2800      	cmp	r0, #0
 802165a:	f43f aee6 	beq.w	802142a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 802165e:	5c79      	ldrb	r1, [r7, r1]
 8021660:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021664:	910b      	str	r1, [sp, #44]	; 0x2c
 8021666:	0e09      	lsrs	r1, r1, #24
 8021668:	9114      	str	r1, [sp, #80]	; 0x50
 802166a:	e6de      	b.n	802142a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 802166c:	b01f      	add	sp, #124	; 0x7c
 802166e:	ecbd 8b08 	vpop	{d8-d11}
 8021672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021678 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8021678:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802167c:	e9dd 040e 	ldrd	r0, r4, [sp, #56]	; 0x38
 8021680:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8021684:	2c00      	cmp	r4, #0
 8021686:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 802168a:	fb04 060c 	mla	r6, r4, ip, r0
 802168e:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8021692:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8021696:	eb02 0e06 	add.w	lr, r2, r6
 802169a:	db3d      	blt.n	8021718 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 802169c:	45a0      	cmp	r8, r4
 802169e:	dd3b      	ble.n	8021718 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 80216a0:	2800      	cmp	r0, #0
 80216a2:	db37      	blt.n	8021714 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80216a4:	4584      	cmp	ip, r0
 80216a6:	dd35      	ble.n	8021714 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80216a8:	5d92      	ldrb	r2, [r2, r6]
 80216aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80216ae:	1c46      	adds	r6, r0, #1
 80216b0:	d435      	bmi.n	802171e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 80216b2:	45b4      	cmp	ip, r6
 80216b4:	dd33      	ble.n	802171e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 80216b6:	b3a5      	cbz	r5, 8021722 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xaa>
 80216b8:	f89e 6001 	ldrb.w	r6, [lr, #1]
 80216bc:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80216c0:	3401      	adds	r4, #1
 80216c2:	d432      	bmi.n	802172a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 80216c4:	45a0      	cmp	r8, r4
 80216c6:	dd30      	ble.n	802172a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 80216c8:	b397      	cbz	r7, 8021730 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb8>
 80216ca:	2800      	cmp	r0, #0
 80216cc:	db2b      	blt.n	8021726 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 80216ce:	4584      	cmp	ip, r0
 80216d0:	dd29      	ble.n	8021726 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 80216d2:	f81e 400c 	ldrb.w	r4, [lr, ip]
 80216d6:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80216da:	3001      	adds	r0, #1
 80216dc:	d42b      	bmi.n	8021736 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 80216de:	4584      	cmp	ip, r0
 80216e0:	dd29      	ble.n	8021736 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 80216e2:	b355      	cbz	r5, 802173a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc2>
 80216e4:	44f4      	add	ip, lr
 80216e6:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80216ea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80216ee:	2d0f      	cmp	r5, #15
 80216f0:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80216f4:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80216f8:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80216fc:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8021700:	d801      	bhi.n	8021706 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x8e>
 8021702:	2f0f      	cmp	r7, #15
 8021704:	d91b      	bls.n	802173e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc6>
 8021706:	4b7f      	ldr	r3, [pc, #508]	; (8021904 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 8021708:	f240 1157 	movw	r1, #343	; 0x157
 802170c:	4a7e      	ldr	r2, [pc, #504]	; (8021908 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 802170e:	487f      	ldr	r0, [pc, #508]	; (802190c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 8021710:	f005 f956 	bl	80269c0 <__assert_func>
 8021714:	2200      	movs	r2, #0
 8021716:	e7ca      	b.n	80216ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x36>
 8021718:	2600      	movs	r6, #0
 802171a:	4632      	mov	r2, r6
 802171c:	e7d0      	b.n	80216c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 802171e:	2600      	movs	r6, #0
 8021720:	e7ce      	b.n	80216c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 8021722:	462e      	mov	r6, r5
 8021724:	e7cc      	b.n	80216c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 8021726:	2400      	movs	r4, #0
 8021728:	e7d7      	b.n	80216da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x62>
 802172a:	2300      	movs	r3, #0
 802172c:	461c      	mov	r4, r3
 802172e:	e7de      	b.n	80216ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8021730:	463b      	mov	r3, r7
 8021732:	463c      	mov	r4, r7
 8021734:	e7db      	b.n	80216ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8021736:	2300      	movs	r3, #0
 8021738:	e7d9      	b.n	80216ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 802173a:	462b      	mov	r3, r5
 802173c:	e7d7      	b.n	80216ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 802173e:	b2a8      	uxth	r0, r5
 8021740:	b2bf      	uxth	r7, r7
 8021742:	fb07 fe00 	mul.w	lr, r7, r0
 8021746:	0100      	lsls	r0, r0, #4
 8021748:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 802174c:	eba0 0c0e 	sub.w	ip, r0, lr
 8021750:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8021754:	b2bf      	uxth	r7, r7
 8021756:	fa1f fc8c 	uxth.w	ip, ip
 802175a:	1bc5      	subs	r5, r0, r7
 802175c:	fb0c f00a 	mul.w	r0, ip, sl
 8021760:	b2ad      	uxth	r5, r5
 8021762:	fb05 000b 	mla	r0, r5, fp, r0
 8021766:	fb07 0009 	mla	r0, r7, r9, r0
 802176a:	fb0e 0008 	mla	r0, lr, r8, r0
 802176e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021772:	9001      	str	r0, [sp, #4]
 8021774:	2800      	cmp	r0, #0
 8021776:	f000 80c2 	beq.w	80218fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x286>
 802177a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802177e:	d018      	beq.n	80217b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x13a>
 8021780:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8021784:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021788:	fb0b f000 	mul.w	r0, fp, r0
 802178c:	fb0b fb02 	mul.w	fp, fp, r2
 8021790:	0a02      	lsrs	r2, r0, #8
 8021792:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8021796:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802179a:	4402      	add	r2, r0
 802179c:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80217a0:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80217a4:	0a12      	lsrs	r2, r2, #8
 80217a6:	0a00      	lsrs	r0, r0, #8
 80217a8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80217ac:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80217b0:	4302      	orrs	r2, r0
 80217b2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80217b6:	d01a      	beq.n	80217ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x176>
 80217b8:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80217bc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80217c0:	fb0a f000 	mul.w	r0, sl, r0
 80217c4:	fb0a fa06 	mul.w	sl, sl, r6
 80217c8:	0a06      	lsrs	r6, r0, #8
 80217ca:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80217ce:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80217d2:	4406      	add	r6, r0
 80217d4:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80217d8:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80217dc:	0a36      	lsrs	r6, r6, #8
 80217de:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80217e2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80217e6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80217ea:	ea46 060a 	orr.w	r6, r6, sl
 80217ee:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80217f2:	d01b      	beq.n	802182c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1b4>
 80217f4:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80217f8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80217fc:	fb09 fa0a 	mul.w	sl, r9, sl
 8021800:	fb09 f004 	mul.w	r0, r9, r4
 8021804:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8021808:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802180c:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8021810:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021814:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8021818:	4454      	add	r4, sl
 802181a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802181e:	0a24      	lsrs	r4, r4, #8
 8021820:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021824:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021828:	ea44 0409 	orr.w	r4, r4, r9
 802182c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021830:	d01b      	beq.n	802186a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f2>
 8021832:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8021836:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802183a:	fb08 f909 	mul.w	r9, r8, r9
 802183e:	fb08 f003 	mul.w	r0, r8, r3
 8021842:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8021846:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802184a:	f500 7880 	add.w	r8, r0, #256	; 0x100
 802184e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021852:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8021856:	444b      	add	r3, r9
 8021858:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802185c:	0a1b      	lsrs	r3, r3, #8
 802185e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8021862:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021866:	ea43 0308 	orr.w	r3, r3, r8
 802186a:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 802186e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021872:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8021876:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802187a:	fb0c f000 	mul.w	r0, ip, r0
 802187e:	fb0c f606 	mul.w	r6, ip, r6
 8021882:	fb05 0808 	mla	r8, r5, r8, r0
 8021886:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 802188a:	fb05 6502 	mla	r5, r5, r2, r6
 802188e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021892:	fb07 8800 	mla	r8, r7, r0, r8
 8021896:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 802189a:	fb07 5704 	mla	r7, r7, r4, r5
 802189e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80218a2:	fb0e 8000 	mla	r0, lr, r0, r8
 80218a6:	780a      	ldrb	r2, [r1, #0]
 80218a8:	fb0e 7e03 	mla	lr, lr, r3, r7
 80218ac:	9b01      	ldr	r3, [sp, #4]
 80218ae:	0a00      	lsrs	r0, r0, #8
 80218b0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80218b4:	43db      	mvns	r3, r3
 80218b6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80218ba:	b2db      	uxtb	r3, r3
 80218bc:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80218c0:	ea40 0e0e 	orr.w	lr, r0, lr
 80218c4:	fb02 f003 	mul.w	r0, r2, r3
 80218c8:	1c42      	adds	r2, r0, #1
 80218ca:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80218ce:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80218d2:	700a      	strb	r2, [r1, #0]
 80218d4:	784a      	ldrb	r2, [r1, #1]
 80218d6:	435a      	muls	r2, r3
 80218d8:	1c50      	adds	r0, r2, #1
 80218da:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80218de:	ea4f 221e 	mov.w	r2, lr, lsr #8
 80218e2:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80218e6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80218ea:	704a      	strb	r2, [r1, #1]
 80218ec:	788a      	ldrb	r2, [r1, #2]
 80218ee:	4353      	muls	r3, r2
 80218f0:	1c5a      	adds	r2, r3, #1
 80218f2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80218f6:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 80218fa:	f881 e002 	strb.w	lr, [r1, #2]
 80218fe:	b003      	add	sp, #12
 8021900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021904:	0802eaaf 	.word	0x0802eaaf
 8021908:	0802f017 	.word	0x0802f017
 802190c:	0802eb78 	.word	0x0802eb78

08021910 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021914:	ed2d 8b0a 	vpush	{d8-d12}
 8021918:	b09b      	sub	sp, #108	; 0x6c
 802191a:	eeb0 aa40 	vmov.f32	s20, s0
 802191e:	eef0 9a60 	vmov.f32	s19, s1
 8021922:	9218      	str	r2, [sp, #96]	; 0x60
 8021924:	eeb0 9a41 	vmov.f32	s18, s2
 8021928:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 802192a:	eeb0 8a62 	vmov.f32	s16, s5
 802192e:	9019      	str	r0, [sp, #100]	; 0x64
 8021930:	eef0 8a43 	vmov.f32	s17, s6
 8021934:	6850      	ldr	r0, [r2, #4]
 8021936:	eeb0 ca44 	vmov.f32	s24, s8
 802193a:	9116      	str	r1, [sp, #88]	; 0x58
 802193c:	eef0 ba64 	vmov.f32	s23, s9
 8021940:	9307      	str	r3, [sp, #28]
 8021942:	eeb0 ba45 	vmov.f32	s22, s10
 8021946:	6812      	ldr	r2, [r2, #0]
 8021948:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 802194c:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 802194e:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8021952:	fb00 1303 	mla	r3, r0, r3, r1
 8021956:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802195a:	18d3      	adds	r3, r2, r3
 802195c:	930a      	str	r3, [sp, #40]	; 0x28
 802195e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8021960:	681b      	ldr	r3, [r3, #0]
 8021962:	930f      	str	r3, [sp, #60]	; 0x3c
 8021964:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8021966:	685e      	ldr	r6, [r3, #4]
 8021968:	3604      	adds	r6, #4
 802196a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802196c:	2b00      	cmp	r3, #0
 802196e:	dc03      	bgt.n	8021978 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8021970:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021972:	2b00      	cmp	r3, #0
 8021974:	f340 834f 	ble.w	8022016 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8021978:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 802197a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802197e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021982:	1e48      	subs	r0, r1, #1
 8021984:	1e57      	subs	r7, r2, #1
 8021986:	9b07      	ldr	r3, [sp, #28]
 8021988:	2b00      	cmp	r3, #0
 802198a:	f340 8178 	ble.w	8021c7e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802198e:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8021990:	142b      	asrs	r3, r5, #16
 8021992:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8021996:	d406      	bmi.n	80219a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021998:	4584      	cmp	ip, r0
 802199a:	da04      	bge.n	80219a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802199c:	2b00      	cmp	r3, #0
 802199e:	db02      	blt.n	80219a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80219a0:	42bb      	cmp	r3, r7
 80219a2:	f2c0 816d 	blt.w	8021c80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80219a6:	f11c 0c01 	adds.w	ip, ip, #1
 80219aa:	f100 815b 	bmi.w	8021c64 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80219ae:	4561      	cmp	r1, ip
 80219b0:	f2c0 8158 	blt.w	8021c64 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80219b4:	3301      	adds	r3, #1
 80219b6:	f100 8155 	bmi.w	8021c64 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80219ba:	429a      	cmp	r2, r3
 80219bc:	f2c0 8152 	blt.w	8021c64 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80219c0:	9b07      	ldr	r3, [sp, #28]
 80219c2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80219c4:	9317      	str	r3, [sp, #92]	; 0x5c
 80219c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80219c8:	2b00      	cmp	r3, #0
 80219ca:	f340 8178 	ble.w	8021cbe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80219ce:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80219d0:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80219d4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80219d8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80219dc:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80219de:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 80219e2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80219e4:	141b      	asrs	r3, r3, #16
 80219e6:	f100 81ba 	bmi.w	8021d5e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80219ea:	f101 38ff 	add.w	r8, r1, #4294967295
 80219ee:	4543      	cmp	r3, r8
 80219f0:	f280 81b5 	bge.w	8021d5e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80219f4:	f1bc 0f00 	cmp.w	ip, #0
 80219f8:	f2c0 81b1 	blt.w	8021d5e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80219fc:	f10e 38ff 	add.w	r8, lr, #4294967295
 8021a00:	45c4      	cmp	ip, r8
 8021a02:	f280 81ac 	bge.w	8021d5e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8021a06:	b209      	sxth	r1, r1
 8021a08:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021a0a:	fb0c 3301 	mla	r3, ip, r1, r3
 8021a0e:	eb04 0803 	add.w	r8, r4, r3
 8021a12:	5ce3      	ldrb	r3, [r4, r3]
 8021a14:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021a18:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8021a1c:	2a00      	cmp	r2, #0
 8021a1e:	f000 8193 	beq.w	8021d48 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8021a22:	f898 c001 	ldrb.w	ip, [r8, #1]
 8021a26:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8021a2a:	940b      	str	r4, [sp, #44]	; 0x2c
 8021a2c:	0e24      	lsrs	r4, r4, #24
 8021a2e:	9412      	str	r4, [sp, #72]	; 0x48
 8021a30:	b178      	cbz	r0, 8021a52 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8021a32:	eb08 0c01 	add.w	ip, r8, r1
 8021a36:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021a3a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021a3e:	9108      	str	r1, [sp, #32]
 8021a40:	0e09      	lsrs	r1, r1, #24
 8021a42:	9110      	str	r1, [sp, #64]	; 0x40
 8021a44:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8021a48:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021a4c:	910c      	str	r1, [sp, #48]	; 0x30
 8021a4e:	0e09      	lsrs	r1, r1, #24
 8021a50:	9113      	str	r1, [sp, #76]	; 0x4c
 8021a52:	b292      	uxth	r2, r2
 8021a54:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021a56:	b280      	uxth	r0, r0
 8021a58:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021a5a:	fb02 f900 	mul.w	r9, r2, r0
 8021a5e:	0112      	lsls	r2, r2, #4
 8021a60:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021a64:	eba2 0809 	sub.w	r8, r2, r9
 8021a68:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8021a6c:	b280      	uxth	r0, r0
 8021a6e:	fa1f f888 	uxth.w	r8, r8
 8021a72:	1a12      	subs	r2, r2, r0
 8021a74:	fb08 f101 	mul.w	r1, r8, r1
 8021a78:	b292      	uxth	r2, r2
 8021a7a:	fb02 110e 	mla	r1, r2, lr, r1
 8021a7e:	fb00 1104 	mla	r1, r0, r4, r1
 8021a82:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021a84:	fb09 1104 	mla	r1, r9, r4, r1
 8021a88:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021a8c:	2900      	cmp	r1, #0
 8021a8e:	f000 80de 	beq.w	8021c4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021a92:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021a96:	d01b      	beq.n	8021ad0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8021a98:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021a9c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021aa0:	fb0e fa0a 	mul.w	sl, lr, sl
 8021aa4:	fb0e fe03 	mul.w	lr, lr, r3
 8021aa8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021aac:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021ab0:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8021ab4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021ab8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021abc:	4453      	add	r3, sl
 8021abe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021ac2:	0a1b      	lsrs	r3, r3, #8
 8021ac4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021ac8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021acc:	ea43 030c 	orr.w	r3, r3, ip
 8021ad0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021ad2:	2cff      	cmp	r4, #255	; 0xff
 8021ad4:	d021      	beq.n	8021b1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8021ad6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021ad8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021adc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021ade:	fb04 fb0b 	mul.w	fp, r4, fp
 8021ae2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021ae4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021ae8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021aea:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021aee:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021af2:	fb04 fa0a 	mul.w	sl, r4, sl
 8021af6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021afa:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021afe:	44de      	add	lr, fp
 8021b00:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021b04:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021b08:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021b0c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021b10:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021b14:	ea4e 040a 	orr.w	r4, lr, sl
 8021b18:	940b      	str	r4, [sp, #44]	; 0x2c
 8021b1a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021b1c:	2cff      	cmp	r4, #255	; 0xff
 8021b1e:	d021      	beq.n	8021b64 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8021b20:	9c08      	ldr	r4, [sp, #32]
 8021b22:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021b26:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021b28:	fb04 fb0b 	mul.w	fp, r4, fp
 8021b2c:	9c08      	ldr	r4, [sp, #32]
 8021b2e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021b32:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021b34:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021b38:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021b3c:	fb04 fa0a 	mul.w	sl, r4, sl
 8021b40:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021b44:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021b48:	44de      	add	lr, fp
 8021b4a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021b4e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021b52:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021b56:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021b5a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021b5e:	ea4e 040a 	orr.w	r4, lr, sl
 8021b62:	9408      	str	r4, [sp, #32]
 8021b64:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021b66:	2cff      	cmp	r4, #255	; 0xff
 8021b68:	d021      	beq.n	8021bae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8021b6a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021b6c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021b70:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021b72:	fb04 fb0b 	mul.w	fp, r4, fp
 8021b76:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021b78:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021b7c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021b7e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021b82:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021b86:	fb04 fa0a 	mul.w	sl, r4, sl
 8021b8a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021b8e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021b92:	44de      	add	lr, fp
 8021b94:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021b98:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021b9c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021ba0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021ba4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021ba8:	ea4e 040a 	orr.w	r4, lr, sl
 8021bac:	940c      	str	r4, [sp, #48]	; 0x30
 8021bae:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021bb0:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8021bb4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021bb8:	43c9      	mvns	r1, r1
 8021bba:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021bbe:	9c08      	ldr	r4, [sp, #32]
 8021bc0:	b2c9      	uxtb	r1, r1
 8021bc2:	fb08 fc0c 	mul.w	ip, r8, ip
 8021bc6:	fb02 cc0e 	mla	ip, r2, lr, ip
 8021bca:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021bce:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021bd0:	fb00 cc0e 	mla	ip, r0, lr, ip
 8021bd4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021bd8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021bda:	fb09 cc0e 	mla	ip, r9, lr, ip
 8021bde:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8021be2:	fb08 f80e 	mul.w	r8, r8, lr
 8021be6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021bea:	fb02 8303 	mla	r3, r2, r3, r8
 8021bee:	9a08      	ldr	r2, [sp, #32]
 8021bf0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021bf4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8021bf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021bfa:	fb00 330a 	mla	r3, r0, sl, r3
 8021bfe:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8021c02:	fb09 3900 	mla	r9, r9, r0, r3
 8021c06:	783b      	ldrb	r3, [r7, #0]
 8021c08:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021c0c:	fb03 f201 	mul.w	r2, r3, r1
 8021c10:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021c14:	1c53      	adds	r3, r2, #1
 8021c16:	ea4c 0c09 	orr.w	ip, ip, r9
 8021c1a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021c1e:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8021c22:	703b      	strb	r3, [r7, #0]
 8021c24:	787b      	ldrb	r3, [r7, #1]
 8021c26:	434b      	muls	r3, r1
 8021c28:	1c5a      	adds	r2, r3, #1
 8021c2a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021c2e:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8021c32:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8021c36:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021c3a:	707b      	strb	r3, [r7, #1]
 8021c3c:	78bb      	ldrb	r3, [r7, #2]
 8021c3e:	4359      	muls	r1, r3
 8021c40:	1c4b      	adds	r3, r1, #1
 8021c42:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8021c46:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8021c4a:	f887 c002 	strb.w	ip, [r7, #2]
 8021c4e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8021c50:	3703      	adds	r7, #3
 8021c52:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8021c54:	441a      	add	r2, r3
 8021c56:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021c58:	441d      	add	r5, r3
 8021c5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021c5c:	922f      	str	r2, [sp, #188]	; 0xbc
 8021c5e:	3b01      	subs	r3, #1
 8021c60:	9317      	str	r3, [sp, #92]	; 0x5c
 8021c62:	e6b0      	b.n	80219c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8021c64:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8021c66:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8021c68:	441c      	add	r4, r3
 8021c6a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021c6c:	441d      	add	r5, r3
 8021c6e:	9b07      	ldr	r3, [sp, #28]
 8021c70:	942f      	str	r4, [sp, #188]	; 0xbc
 8021c72:	3b01      	subs	r3, #1
 8021c74:	9307      	str	r3, [sp, #28]
 8021c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021c78:	3303      	adds	r3, #3
 8021c7a:	930a      	str	r3, [sp, #40]	; 0x28
 8021c7c:	e683      	b.n	8021986 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021c7e:	d026      	beq.n	8021cce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8021c80:	9b07      	ldr	r3, [sp, #28]
 8021c82:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8021c84:	3b01      	subs	r3, #1
 8021c86:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8021c88:	fb00 4003 	mla	r0, r0, r3, r4
 8021c8c:	1400      	asrs	r0, r0, #16
 8021c8e:	f53f ae97 	bmi.w	80219c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8021c92:	3901      	subs	r1, #1
 8021c94:	4288      	cmp	r0, r1
 8021c96:	f6bf ae93 	bge.w	80219c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8021c9a:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8021c9c:	fb01 5303 	mla	r3, r1, r3, r5
 8021ca0:	141b      	asrs	r3, r3, #16
 8021ca2:	f53f ae8d 	bmi.w	80219c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8021ca6:	3a01      	subs	r2, #1
 8021ca8:	4293      	cmp	r3, r2
 8021caa:	f6bf ae89 	bge.w	80219c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8021cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021cb0:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8021cb4:	f103 0e03 	add.w	lr, r3, #3
 8021cb8:	f1bb 0f00 	cmp.w	fp, #0
 8021cbc:	dc6d      	bgt.n	8021d9a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48a>
 8021cbe:	9b07      	ldr	r3, [sp, #28]
 8021cc0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021cc6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021cca:	4423      	add	r3, r4
 8021ccc:	930a      	str	r3, [sp, #40]	; 0x28
 8021cce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021cd0:	2b00      	cmp	r3, #0
 8021cd2:	f340 81a0 	ble.w	8022016 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8021cd6:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8021cda:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021cdc:	ee79 9aab 	vadd.f32	s19, s19, s23
 8021ce0:	eef0 6a48 	vmov.f32	s13, s16
 8021ce4:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8021ce8:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8021cec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021cf0:	edcd 6a2f 	vstr	s13, [sp, #188]	; 0xbc
 8021cf4:	eef0 6a68 	vmov.f32	s13, s17
 8021cf8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021cfc:	ee16 5a90 	vmov	r5, s13
 8021d00:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021d04:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021d08:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021d0c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021d10:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021d14:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021d18:	ee18 2a10 	vmov	r2, s16
 8021d1c:	eeb0 8a47 	vmov.f32	s16, s14
 8021d20:	fb92 f3f3 	sdiv	r3, r2, r3
 8021d24:	ee18 2a90 	vmov	r2, s17
 8021d28:	9331      	str	r3, [sp, #196]	; 0xc4
 8021d2a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021d2c:	eef0 8a67 	vmov.f32	s17, s15
 8021d30:	fb92 f3f3 	sdiv	r3, r2, r3
 8021d34:	9332      	str	r3, [sp, #200]	; 0xc8
 8021d36:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021d38:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8021d3a:	3b01      	subs	r3, #1
 8021d3c:	9316      	str	r3, [sp, #88]	; 0x58
 8021d3e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021d40:	bf08      	it	eq
 8021d42:	4613      	moveq	r3, r2
 8021d44:	9307      	str	r3, [sp, #28]
 8021d46:	e610      	b.n	802196a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8021d48:	2800      	cmp	r0, #0
 8021d4a:	f43f ae82 	beq.w	8021a52 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8021d4e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021d52:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021d56:	9108      	str	r1, [sp, #32]
 8021d58:	0e09      	lsrs	r1, r1, #24
 8021d5a:	9110      	str	r1, [sp, #64]	; 0x40
 8021d5c:	e679      	b.n	8021a52 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8021d5e:	f113 0801 	adds.w	r8, r3, #1
 8021d62:	f53f af74 	bmi.w	8021c4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021d66:	4541      	cmp	r1, r8
 8021d68:	f6ff af71 	blt.w	8021c4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021d6c:	f11c 0801 	adds.w	r8, ip, #1
 8021d70:	f53f af6d 	bmi.w	8021c4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021d74:	45c6      	cmp	lr, r8
 8021d76:	f6ff af6a 	blt.w	8021c4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021d7a:	b209      	sxth	r1, r1
 8021d7c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8021d80:	fa0f f38e 	sxth.w	r3, lr
 8021d84:	9100      	str	r1, [sp, #0]
 8021d86:	4639      	mov	r1, r7
 8021d88:	9301      	str	r3, [sp, #4]
 8021d8a:	4633      	mov	r3, r6
 8021d8c:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8021d90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021d92:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021d94:	f7ff fc70 	bl	8021678 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8021d98:	e759      	b.n	8021c4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021d9a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8021d9c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021da0:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8021da2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021da6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8021da8:	1427      	asrs	r7, r4, #16
 8021daa:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021dac:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021db0:	142b      	asrs	r3, r5, #16
 8021db2:	fb01 7303 	mla	r3, r1, r3, r7
 8021db6:	18e7      	adds	r7, r4, r3
 8021db8:	5ce3      	ldrb	r3, [r4, r3]
 8021dba:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021dbe:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021dc2:	2a00      	cmp	r2, #0
 8021dc4:	f000 811d 	beq.w	8022002 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8021dc8:	f897 8001 	ldrb.w	r8, [r7, #1]
 8021dcc:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8021dd0:	940d      	str	r4, [sp, #52]	; 0x34
 8021dd2:	0e24      	lsrs	r4, r4, #24
 8021dd4:	9414      	str	r4, [sp, #80]	; 0x50
 8021dd6:	b170      	cbz	r0, 8021df6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8021dd8:	eb07 0801 	add.w	r8, r7, r1
 8021ddc:	5c79      	ldrb	r1, [r7, r1]
 8021dde:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021de2:	9109      	str	r1, [sp, #36]	; 0x24
 8021de4:	0e09      	lsrs	r1, r1, #24
 8021de6:	9111      	str	r1, [sp, #68]	; 0x44
 8021de8:	f898 1001 	ldrb.w	r1, [r8, #1]
 8021dec:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021df0:	910e      	str	r1, [sp, #56]	; 0x38
 8021df2:	0e09      	lsrs	r1, r1, #24
 8021df4:	9115      	str	r1, [sp, #84]	; 0x54
 8021df6:	b292      	uxth	r2, r2
 8021df8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021dfa:	b280      	uxth	r0, r0
 8021dfc:	fb02 f900 	mul.w	r9, r2, r0
 8021e00:	0112      	lsls	r2, r2, #4
 8021e02:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021e06:	eba2 0809 	sub.w	r8, r2, r9
 8021e0a:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8021e0e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021e10:	b280      	uxth	r0, r0
 8021e12:	fa1f f888 	uxth.w	r8, r8
 8021e16:	1a09      	subs	r1, r1, r0
 8021e18:	fb08 f202 	mul.w	r2, r8, r2
 8021e1c:	b289      	uxth	r1, r1
 8021e1e:	fb01 220c 	mla	r2, r1, ip, r2
 8021e22:	fb00 2204 	mla	r2, r0, r4, r2
 8021e26:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021e28:	fb09 2204 	mla	r2, r9, r4, r2
 8021e2c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021e30:	2a00      	cmp	r2, #0
 8021e32:	f000 80db 	beq.w	8021fec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8021e36:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021e3a:	d019      	beq.n	8021e70 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x560>
 8021e3c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021e40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021e44:	fb0c fa0a 	mul.w	sl, ip, sl
 8021e48:	fb0c fc03 	mul.w	ip, ip, r3
 8021e4c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021e50:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021e54:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8021e58:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021e5c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021e60:	4453      	add	r3, sl
 8021e62:	0a3f      	lsrs	r7, r7, #8
 8021e64:	0a1b      	lsrs	r3, r3, #8
 8021e66:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021e6a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021e6e:	433b      	orrs	r3, r7
 8021e70:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021e72:	2cff      	cmp	r4, #255	; 0xff
 8021e74:	d020      	beq.n	8021eb8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a8>
 8021e76:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021e78:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021e7c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021e7e:	4367      	muls	r7, r4
 8021e80:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021e82:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021e86:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021e8a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021e8c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021e90:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021e94:	fb04 fa0a 	mul.w	sl, r4, sl
 8021e98:	44bc      	add	ip, r7
 8021e9a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021e9e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021ea2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021ea6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021eaa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021eae:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021eb2:	ea4c 040a 	orr.w	r4, ip, sl
 8021eb6:	940d      	str	r4, [sp, #52]	; 0x34
 8021eb8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021eba:	2cff      	cmp	r4, #255	; 0xff
 8021ebc:	d020      	beq.n	8021f00 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f0>
 8021ebe:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021ec0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021ec4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021ec6:	4367      	muls	r7, r4
 8021ec8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021eca:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021ece:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021ed2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021ed4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021ed8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021edc:	fb04 fa0a 	mul.w	sl, r4, sl
 8021ee0:	44bc      	add	ip, r7
 8021ee2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021ee6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021eea:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021eee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021ef2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021ef6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021efa:	ea4c 040a 	orr.w	r4, ip, sl
 8021efe:	9409      	str	r4, [sp, #36]	; 0x24
 8021f00:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021f02:	2cff      	cmp	r4, #255	; 0xff
 8021f04:	d020      	beq.n	8021f48 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x638>
 8021f06:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021f08:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021f0c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021f0e:	4367      	muls	r7, r4
 8021f10:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021f12:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021f16:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021f1a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021f1c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021f20:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021f24:	fb04 fa0a 	mul.w	sl, r4, sl
 8021f28:	44bc      	add	ip, r7
 8021f2a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021f2e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021f32:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021f36:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021f3a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021f3e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021f42:	ea4c 040a 	orr.w	r4, ip, sl
 8021f46:	940e      	str	r4, [sp, #56]	; 0x38
 8021f48:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021f4a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021f4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021f52:	43d2      	mvns	r2, r2
 8021f54:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021f58:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021f5a:	b2d2      	uxtb	r2, r2
 8021f5c:	fb08 f707 	mul.w	r7, r8, r7
 8021f60:	fb01 770c 	mla	r7, r1, ip, r7
 8021f64:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021f68:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021f6a:	fb00 770c 	mla	r7, r0, ip, r7
 8021f6e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021f72:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021f74:	fb09 770c 	mla	r7, r9, ip, r7
 8021f78:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8021f7c:	fb08 f80c 	mul.w	r8, r8, ip
 8021f80:	0a3f      	lsrs	r7, r7, #8
 8021f82:	fb01 8303 	mla	r3, r1, r3, r8
 8021f86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021f88:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021f8c:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8021f90:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021f92:	fb00 330a 	mla	r3, r0, sl, r3
 8021f96:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8021f9a:	fb09 3c0c 	mla	ip, r9, ip, r3
 8021f9e:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8021fa2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021fa6:	fb03 f102 	mul.w	r1, r3, r2
 8021faa:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021fae:	1c4b      	adds	r3, r1, #1
 8021fb0:	ea47 070c 	orr.w	r7, r7, ip
 8021fb4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021fb8:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8021fbc:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8021fc0:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8021fc4:	4353      	muls	r3, r2
 8021fc6:	1c59      	adds	r1, r3, #1
 8021fc8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021fcc:	0a3b      	lsrs	r3, r7, #8
 8021fce:	0c3f      	lsrs	r7, r7, #16
 8021fd0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021fd4:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8021fd8:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8021fdc:	435a      	muls	r2, r3
 8021fde:	1c53      	adds	r3, r2, #1
 8021fe0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8021fe4:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8021fe8:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8021fec:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8021fee:	f10e 0e03 	add.w	lr, lr, #3
 8021ff2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8021ff4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021ff8:	441a      	add	r2, r3
 8021ffa:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021ffc:	922f      	str	r2, [sp, #188]	; 0xbc
 8021ffe:	441d      	add	r5, r3
 8022000:	e65a      	b.n	8021cb8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8022002:	2800      	cmp	r0, #0
 8022004:	f43f aef7 	beq.w	8021df6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8022008:	5c79      	ldrb	r1, [r7, r1]
 802200a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802200e:	9109      	str	r1, [sp, #36]	; 0x24
 8022010:	0e09      	lsrs	r1, r1, #24
 8022012:	9111      	str	r1, [sp, #68]	; 0x44
 8022014:	e6ef      	b.n	8021df6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8022016:	b01b      	add	sp, #108	; 0x6c
 8022018:	ecbd 8b0a 	vpop	{d8-d12}
 802201c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022020 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8022020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022024:	b08d      	sub	sp, #52	; 0x34
 8022026:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 802202a:	9103      	str	r1, [sp, #12]
 802202c:	fb07 5803 	mla	r8, r7, r3, r5
 8022030:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8022034:	9803      	ldr	r0, [sp, #12]
 8022036:	2f00      	cmp	r7, #0
 8022038:	910b      	str	r1, [sp, #44]	; 0x2c
 802203a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802203e:	9903      	ldr	r1, [sp, #12]
 8022040:	9c03      	ldr	r4, [sp, #12]
 8022042:	eb02 0608 	add.w	r6, r2, r8
 8022046:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 802204a:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 802204e:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8022052:	7809      	ldrb	r1, [r1, #0]
 8022054:	7840      	ldrb	r0, [r0, #1]
 8022056:	78a4      	ldrb	r4, [r4, #2]
 8022058:	db51      	blt.n	80220fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 802205a:	45be      	cmp	lr, r7
 802205c:	dd4f      	ble.n	80220fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 802205e:	2d00      	cmp	r5, #0
 8022060:	db49      	blt.n	80220f6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8022062:	42ab      	cmp	r3, r5
 8022064:	dd47      	ble.n	80220f6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8022066:	f812 2008 	ldrb.w	r2, [r2, r8]
 802206a:	9204      	str	r2, [sp, #16]
 802206c:	7872      	ldrb	r2, [r6, #1]
 802206e:	9205      	str	r2, [sp, #20]
 8022070:	78b2      	ldrb	r2, [r6, #2]
 8022072:	9206      	str	r2, [sp, #24]
 8022074:	1c6a      	adds	r2, r5, #1
 8022076:	d449      	bmi.n	802210c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8022078:	4293      	cmp	r3, r2
 802207a:	dd47      	ble.n	802210c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 802207c:	f1bc 0f00 	cmp.w	ip, #0
 8022080:	d044      	beq.n	802210c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8022082:	7972      	ldrb	r2, [r6, #5]
 8022084:	f896 b003 	ldrb.w	fp, [r6, #3]
 8022088:	f896 a004 	ldrb.w	sl, [r6, #4]
 802208c:	9201      	str	r2, [sp, #4]
 802208e:	3701      	adds	r7, #1
 8022090:	d444      	bmi.n	802211c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8022092:	45be      	cmp	lr, r7
 8022094:	dd42      	ble.n	802211c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8022096:	f1b9 0f00 	cmp.w	r9, #0
 802209a:	f000 80c1 	beq.w	8022220 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 802209e:	2d00      	cmp	r5, #0
 80220a0:	db38      	blt.n	8022114 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 80220a2:	42ab      	cmp	r3, r5
 80220a4:	dd36      	ble.n	8022114 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 80220a6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80220aa:	f816 8002 	ldrb.w	r8, [r6, r2]
 80220ae:	2203      	movs	r2, #3
 80220b0:	fb03 6702 	mla	r7, r3, r2, r6
 80220b4:	fb03 6202 	mla	r2, r3, r2, r6
 80220b8:	787f      	ldrb	r7, [r7, #1]
 80220ba:	f892 e002 	ldrb.w	lr, [r2, #2]
 80220be:	9702      	str	r7, [sp, #8]
 80220c0:	3501      	adds	r5, #1
 80220c2:	d432      	bmi.n	802212a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 80220c4:	42ab      	cmp	r3, r5
 80220c6:	dd30      	ble.n	802212a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 80220c8:	f1bc 0f00 	cmp.w	ip, #0
 80220cc:	d031      	beq.n	8022132 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 80220ce:	2703      	movs	r7, #3
 80220d0:	fb13 7207 	smlabb	r2, r3, r7, r7
 80220d4:	5cb5      	ldrb	r5, [r6, r2]
 80220d6:	fb03 6207 	mla	r2, r3, r7, r6
 80220da:	fb03 6307 	mla	r3, r3, r7, r6
 80220de:	7912      	ldrb	r2, [r2, #4]
 80220e0:	795e      	ldrb	r6, [r3, #5]
 80220e2:	f1bc 0f0f 	cmp.w	ip, #15
 80220e6:	d927      	bls.n	8022138 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 80220e8:	4b53      	ldr	r3, [pc, #332]	; (8022238 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 80220ea:	f240 1157 	movw	r1, #343	; 0x157
 80220ee:	4a53      	ldr	r2, [pc, #332]	; (802223c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 80220f0:	4853      	ldr	r0, [pc, #332]	; (8022240 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 80220f2:	f004 fc65 	bl	80269c0 <__assert_func>
 80220f6:	e9cd 0405 	strd	r0, r4, [sp, #20]
 80220fa:	9104      	str	r1, [sp, #16]
 80220fc:	e7ba      	b.n	8022074 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 80220fe:	9401      	str	r4, [sp, #4]
 8022100:	4682      	mov	sl, r0
 8022102:	468b      	mov	fp, r1
 8022104:	9104      	str	r1, [sp, #16]
 8022106:	e9cd 0405 	strd	r0, r4, [sp, #20]
 802210a:	e7c0      	b.n	802208e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 802210c:	9401      	str	r4, [sp, #4]
 802210e:	4682      	mov	sl, r0
 8022110:	468b      	mov	fp, r1
 8022112:	e7bc      	b.n	802208e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8022114:	46a6      	mov	lr, r4
 8022116:	9002      	str	r0, [sp, #8]
 8022118:	4688      	mov	r8, r1
 802211a:	e7d1      	b.n	80220c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 802211c:	4626      	mov	r6, r4
 802211e:	4602      	mov	r2, r0
 8022120:	460d      	mov	r5, r1
 8022122:	46a6      	mov	lr, r4
 8022124:	9002      	str	r0, [sp, #8]
 8022126:	4688      	mov	r8, r1
 8022128:	e7db      	b.n	80220e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 802212a:	4626      	mov	r6, r4
 802212c:	4602      	mov	r2, r0
 802212e:	460d      	mov	r5, r1
 8022130:	e7d7      	b.n	80220e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8022132:	4626      	mov	r6, r4
 8022134:	4602      	mov	r2, r0
 8022136:	460d      	mov	r5, r1
 8022138:	f1b9 0f0f 	cmp.w	r9, #15
 802213c:	d8d4      	bhi.n	80220e8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 802213e:	fa1f f38c 	uxth.w	r3, ip
 8022142:	fa1f fc89 	uxth.w	ip, r9
 8022146:	fb03 f70c 	mul.w	r7, r3, ip
 802214a:	011b      	lsls	r3, r3, #4
 802214c:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8022150:	9707      	str	r7, [sp, #28]
 8022152:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8022156:	fa1f fc8c 	uxth.w	ip, ip
 802215a:	eba7 070c 	sub.w	r7, r7, ip
 802215e:	b2bf      	uxth	r7, r7
 8022160:	9709      	str	r7, [sp, #36]	; 0x24
 8022162:	9f07      	ldr	r7, [sp, #28]
 8022164:	1bdb      	subs	r3, r3, r7
 8022166:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 802216a:	b29b      	uxth	r3, r3
 802216c:	9708      	str	r7, [sp, #32]
 802216e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022170:	930a      	str	r3, [sp, #40]	; 0x28
 8022172:	ea6f 0907 	mvn.w	r9, r7
 8022176:	fb03 fb0b 	mul.w	fp, r3, fp
 802217a:	9f04      	ldr	r7, [sp, #16]
 802217c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802217e:	fa5f f989 	uxtb.w	r9, r9
 8022182:	fb03 bb07 	mla	fp, r3, r7, fp
 8022186:	9f07      	ldr	r7, [sp, #28]
 8022188:	fb11 f109 	smulbb	r1, r1, r9
 802218c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802218e:	fb0c b808 	mla	r8, ip, r8, fp
 8022192:	fb10 f009 	smulbb	r0, r0, r9
 8022196:	fb14 f409 	smulbb	r4, r4, r9
 802219a:	fb07 8805 	mla	r8, r7, r5, r8
 802219e:	9d08      	ldr	r5, [sp, #32]
 80221a0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80221a2:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80221a6:	fb08 1805 	mla	r8, r8, r5, r1
 80221aa:	9d05      	ldr	r5, [sp, #20]
 80221ac:	fa1f f888 	uxth.w	r8, r8
 80221b0:	f108 0101 	add.w	r1, r8, #1
 80221b4:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 80221b8:	9903      	ldr	r1, [sp, #12]
 80221ba:	ea4f 2828 	mov.w	r8, r8, asr #8
 80221be:	f881 8000 	strb.w	r8, [r1]
 80221c2:	fb03 f10a 	mul.w	r1, r3, sl
 80221c6:	fb07 1105 	mla	r1, r7, r5, r1
 80221ca:	9d02      	ldr	r5, [sp, #8]
 80221cc:	fb0c 1105 	mla	r1, ip, r5, r1
 80221d0:	9d07      	ldr	r5, [sp, #28]
 80221d2:	fb05 1102 	mla	r1, r5, r2, r1
 80221d6:	9a08      	ldr	r2, [sp, #32]
 80221d8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80221dc:	fb01 0102 	mla	r1, r1, r2, r0
 80221e0:	9a03      	ldr	r2, [sp, #12]
 80221e2:	b289      	uxth	r1, r1
 80221e4:	1c48      	adds	r0, r1, #1
 80221e6:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80221ea:	1209      	asrs	r1, r1, #8
 80221ec:	7051      	strb	r1, [r2, #1]
 80221ee:	9a01      	ldr	r2, [sp, #4]
 80221f0:	4353      	muls	r3, r2
 80221f2:	9a06      	ldr	r2, [sp, #24]
 80221f4:	fb07 3702 	mla	r7, r7, r2, r3
 80221f8:	9b08      	ldr	r3, [sp, #32]
 80221fa:	fb0c 7c0e 	mla	ip, ip, lr, r7
 80221fe:	fb05 c606 	mla	r6, r5, r6, ip
 8022202:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8022206:	fb06 4603 	mla	r6, r6, r3, r4
 802220a:	9b03      	ldr	r3, [sp, #12]
 802220c:	b2b6      	uxth	r6, r6
 802220e:	f106 0e01 	add.w	lr, r6, #1
 8022212:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8022216:	1236      	asrs	r6, r6, #8
 8022218:	709e      	strb	r6, [r3, #2]
 802221a:	b00d      	add	sp, #52	; 0x34
 802221c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022220:	f1bc 0f0f 	cmp.w	ip, #15
 8022224:	f63f af60 	bhi.w	80220e8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8022228:	4626      	mov	r6, r4
 802222a:	4602      	mov	r2, r0
 802222c:	460d      	mov	r5, r1
 802222e:	46a6      	mov	lr, r4
 8022230:	9002      	str	r0, [sp, #8]
 8022232:	4688      	mov	r8, r1
 8022234:	e783      	b.n	802213e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 8022236:	bf00      	nop
 8022238:	0802eaaf 	.word	0x0802eaaf
 802223c:	0802f017 	.word	0x0802f017
 8022240:	0802eb78 	.word	0x0802eb78

08022244 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022248:	ed2d 8b08 	vpush	{d8-d11}
 802224c:	b09f      	sub	sp, #124	; 0x7c
 802224e:	eeb0 aa40 	vmov.f32	s20, s0
 8022252:	eef0 9a60 	vmov.f32	s19, s1
 8022256:	920e      	str	r2, [sp, #56]	; 0x38
 8022258:	eeb0 9a41 	vmov.f32	s18, s2
 802225c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802225e:	eeb0 8a62 	vmov.f32	s16, s5
 8022262:	9307      	str	r3, [sp, #28]
 8022264:	eef0 8a43 	vmov.f32	s17, s6
 8022268:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 802226c:	eef0 ba44 	vmov.f32	s23, s8
 8022270:	901d      	str	r0, [sp, #116]	; 0x74
 8022272:	eeb0 ba64 	vmov.f32	s22, s9
 8022276:	930c      	str	r3, [sp, #48]	; 0x30
 8022278:	eef0 aa45 	vmov.f32	s21, s10
 802227c:	6850      	ldr	r0, [r2, #4]
 802227e:	910b      	str	r1, [sp, #44]	; 0x2c
 8022280:	6812      	ldr	r2, [r2, #0]
 8022282:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8022286:	e9dd a831 	ldrd	sl, r8, [sp, #196]	; 0xc4
 802228a:	fb00 1303 	mla	r3, r0, r3, r1
 802228e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022292:	18d3      	adds	r3, r2, r3
 8022294:	9308      	str	r3, [sp, #32]
 8022296:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8022298:	681b      	ldr	r3, [r3, #0]
 802229a:	930a      	str	r3, [sp, #40]	; 0x28
 802229c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802229e:	43db      	mvns	r3, r3
 80222a0:	b2db      	uxtb	r3, r3
 80222a2:	9309      	str	r3, [sp, #36]	; 0x24
 80222a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80222a6:	2b00      	cmp	r3, #0
 80222a8:	dc03      	bgt.n	80222b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80222aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80222ac:	2b00      	cmp	r3, #0
 80222ae:	f340 81f5 	ble.w	802269c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 80222b2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80222b4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80222b8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80222bc:	1e48      	subs	r0, r1, #1
 80222be:	1e54      	subs	r4, r2, #1
 80222c0:	9b07      	ldr	r3, [sp, #28]
 80222c2:	2b00      	cmp	r3, #0
 80222c4:	f340 80d5 	ble.w	8022472 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 80222c8:	ea5f 452a 	movs.w	r5, sl, asr #16
 80222cc:	ea4f 4328 	mov.w	r3, r8, asr #16
 80222d0:	d406      	bmi.n	80222e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80222d2:	4285      	cmp	r5, r0
 80222d4:	da04      	bge.n	80222e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80222d6:	2b00      	cmp	r3, #0
 80222d8:	db02      	blt.n	80222e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80222da:	42a3      	cmp	r3, r4
 80222dc:	f2c0 80ca 	blt.w	8022474 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80222e0:	3501      	adds	r5, #1
 80222e2:	f100 80bb 	bmi.w	802245c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80222e6:	42a9      	cmp	r1, r5
 80222e8:	f2c0 80b8 	blt.w	802245c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80222ec:	3301      	adds	r3, #1
 80222ee:	f100 80b5 	bmi.w	802245c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80222f2:	429a      	cmp	r2, r3
 80222f4:	f2c0 80b2 	blt.w	802245c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80222f8:	9b07      	ldr	r3, [sp, #28]
 80222fa:	9d08      	ldr	r5, [sp, #32]
 80222fc:	930d      	str	r3, [sp, #52]	; 0x34
 80222fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022300:	2b00      	cmp	r3, #0
 8022302:	f340 80d6 	ble.w	80224b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8022306:	9838      	ldr	r0, [sp, #224]	; 0xe0
 8022308:	ea4f 4428 	mov.w	r4, r8, asr #16
 802230c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802230e:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8022312:	68c6      	ldr	r6, [r0, #12]
 8022314:	ea5f 402a 	movs.w	r0, sl, asr #16
 8022318:	f3c8 3103 	ubfx	r1, r8, #12, #4
 802231c:	689b      	ldr	r3, [r3, #8]
 802231e:	f100 810f 	bmi.w	8022540 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8022322:	1e5f      	subs	r7, r3, #1
 8022324:	42b8      	cmp	r0, r7
 8022326:	f280 810b 	bge.w	8022540 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802232a:	2c00      	cmp	r4, #0
 802232c:	f2c0 8108 	blt.w	8022540 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8022330:	1e77      	subs	r7, r6, #1
 8022332:	42bc      	cmp	r4, r7
 8022334:	f280 8104 	bge.w	8022540 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8022338:	b21b      	sxth	r3, r3
 802233a:	fb04 0003 	mla	r0, r4, r3, r0
 802233e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022340:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022344:	1826      	adds	r6, r4, r0
 8022346:	5c24      	ldrb	r4, [r4, r0]
 8022348:	78b7      	ldrb	r7, [r6, #2]
 802234a:	7870      	ldrb	r0, [r6, #1]
 802234c:	970f      	str	r7, [sp, #60]	; 0x3c
 802234e:	7977      	ldrb	r7, [r6, #5]
 8022350:	f896 e003 	ldrb.w	lr, [r6, #3]
 8022354:	f896 c004 	ldrb.w	ip, [r6, #4]
 8022358:	9710      	str	r7, [sp, #64]	; 0x40
 802235a:	b1c9      	cbz	r1, 8022390 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 802235c:	f04f 0b03 	mov.w	fp, #3
 8022360:	f06f 0904 	mvn.w	r9, #4
 8022364:	3605      	adds	r6, #5
 8022366:	fb13 930b 	smlabb	r3, r3, fp, r9
 802236a:	eb06 0b03 	add.w	fp, r6, r3
 802236e:	5cf3      	ldrb	r3, [r6, r3]
 8022370:	9311      	str	r3, [sp, #68]	; 0x44
 8022372:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8022376:	9313      	str	r3, [sp, #76]	; 0x4c
 8022378:	f89b 3002 	ldrb.w	r3, [fp, #2]
 802237c:	9315      	str	r3, [sp, #84]	; 0x54
 802237e:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8022382:	9312      	str	r3, [sp, #72]	; 0x48
 8022384:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8022388:	9314      	str	r3, [sp, #80]	; 0x50
 802238a:	f89b 3005 	ldrb.w	r3, [fp, #5]
 802238e:	9316      	str	r3, [sp, #88]	; 0x58
 8022390:	b292      	uxth	r2, r2
 8022392:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8022394:	b289      	uxth	r1, r1
 8022396:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 802239a:	fb02 f601 	mul.w	r6, r2, r1
 802239e:	0112      	lsls	r2, r2, #4
 80223a0:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 80223a4:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 80223a8:	1b92      	subs	r2, r2, r6
 80223aa:	b289      	uxth	r1, r1
 80223ac:	b292      	uxth	r2, r2
 80223ae:	eba9 0901 	sub.w	r9, r9, r1
 80223b2:	fb02 fe0e 	mul.w	lr, r2, lr
 80223b6:	fa1f f989 	uxth.w	r9, r9
 80223ba:	fb02 fc0c 	mul.w	ip, r2, ip
 80223be:	fb09 e404 	mla	r4, r9, r4, lr
 80223c2:	f895 e000 	ldrb.w	lr, [r5]
 80223c6:	fb09 c000 	mla	r0, r9, r0, ip
 80223ca:	fb01 4407 	mla	r4, r1, r7, r4
 80223ce:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80223d0:	fb06 4407 	mla	r4, r6, r7, r4
 80223d4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80223d6:	fb1e fe07 	smulbb	lr, lr, r7
 80223da:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80223de:	fb04 e403 	mla	r4, r4, r3, lr
 80223e2:	b2a4      	uxth	r4, r4
 80223e4:	f104 0e01 	add.w	lr, r4, #1
 80223e8:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 80223ec:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80223ee:	fb01 0004 	mla	r0, r1, r4, r0
 80223f2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80223f4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80223f8:	fb06 0004 	mla	r0, r6, r4, r0
 80223fc:	786c      	ldrb	r4, [r5, #1]
 80223fe:	f885 e000 	strb.w	lr, [r5]
 8022402:	fb14 f407 	smulbb	r4, r4, r7
 8022406:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802240a:	fb00 4003 	mla	r0, r0, r3, r4
 802240e:	b280      	uxth	r0, r0
 8022410:	1c44      	adds	r4, r0, #1
 8022412:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8022416:	1200      	asrs	r0, r0, #8
 8022418:	7068      	strb	r0, [r5, #1]
 802241a:	9810      	ldr	r0, [sp, #64]	; 0x40
 802241c:	4342      	muls	r2, r0
 802241e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022420:	fb09 2200 	mla	r2, r9, r0, r2
 8022424:	9815      	ldr	r0, [sp, #84]	; 0x54
 8022426:	fb01 2100 	mla	r1, r1, r0, r2
 802242a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802242c:	fb06 1602 	mla	r6, r6, r2, r1
 8022430:	78a9      	ldrb	r1, [r5, #2]
 8022432:	fb11 f107 	smulbb	r1, r1, r7
 8022436:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802243a:	fb06 1303 	mla	r3, r6, r3, r1
 802243e:	b29b      	uxth	r3, r3
 8022440:	1c5e      	adds	r6, r3, #1
 8022442:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8022446:	121b      	asrs	r3, r3, #8
 8022448:	70ab      	strb	r3, [r5, #2]
 802244a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 802244c:	3503      	adds	r5, #3
 802244e:	449a      	add	sl, r3
 8022450:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022452:	4498      	add	r8, r3
 8022454:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022456:	3b01      	subs	r3, #1
 8022458:	930d      	str	r3, [sp, #52]	; 0x34
 802245a:	e750      	b.n	80222fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 802245c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 802245e:	449a      	add	sl, r3
 8022460:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022462:	4498      	add	r8, r3
 8022464:	9b07      	ldr	r3, [sp, #28]
 8022466:	3b01      	subs	r3, #1
 8022468:	9307      	str	r3, [sp, #28]
 802246a:	9b08      	ldr	r3, [sp, #32]
 802246c:	3303      	adds	r3, #3
 802246e:	9308      	str	r3, [sp, #32]
 8022470:	e726      	b.n	80222c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022472:	d026      	beq.n	80224c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8022474:	9b07      	ldr	r3, [sp, #28]
 8022476:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8022478:	3b01      	subs	r3, #1
 802247a:	fb00 a003 	mla	r0, r0, r3, sl
 802247e:	1400      	asrs	r0, r0, #16
 8022480:	f53f af3a 	bmi.w	80222f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8022484:	3901      	subs	r1, #1
 8022486:	4288      	cmp	r0, r1
 8022488:	f6bf af36 	bge.w	80222f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802248c:	9934      	ldr	r1, [sp, #208]	; 0xd0
 802248e:	fb01 8303 	mla	r3, r1, r3, r8
 8022492:	141b      	asrs	r3, r3, #16
 8022494:	f53f af30 	bmi.w	80222f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8022498:	3a01      	subs	r2, #1
 802249a:	4293      	cmp	r3, r2
 802249c:	f6bf af2c 	bge.w	80222f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80224a0:	9b08      	ldr	r3, [sp, #32]
 80224a2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80224a6:	1cdd      	adds	r5, r3, #3
 80224a8:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 80224ac:	f1bc 0f00 	cmp.w	ip, #0
 80224b0:	dc5f      	bgt.n	8022572 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 80224b2:	9b07      	ldr	r3, [sp, #28]
 80224b4:	9a08      	ldr	r2, [sp, #32]
 80224b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80224ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80224be:	441a      	add	r2, r3
 80224c0:	9208      	str	r2, [sp, #32]
 80224c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80224c4:	2b00      	cmp	r3, #0
 80224c6:	f340 80e9 	ble.w	802269c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 80224ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80224ce:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80224d0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80224d4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80224d8:	eef0 6a48 	vmov.f32	s13, s16
 80224dc:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80224e0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80224e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80224e8:	ee16 aa90 	vmov	sl, s13
 80224ec:	eef0 6a68 	vmov.f32	s13, s17
 80224f0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80224f4:	ee16 8a90 	vmov	r8, s13
 80224f8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80224fc:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022500:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022504:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022508:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802250c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022510:	ee18 2a10 	vmov	r2, s16
 8022514:	eeb0 8a47 	vmov.f32	s16, s14
 8022518:	fb92 f3f3 	sdiv	r3, r2, r3
 802251c:	ee18 2a90 	vmov	r2, s17
 8022520:	9333      	str	r3, [sp, #204]	; 0xcc
 8022522:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022524:	eef0 8a67 	vmov.f32	s17, s15
 8022528:	fb92 f3f3 	sdiv	r3, r2, r3
 802252c:	9334      	str	r3, [sp, #208]	; 0xd0
 802252e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022530:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022532:	3b01      	subs	r3, #1
 8022534:	930b      	str	r3, [sp, #44]	; 0x2c
 8022536:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022538:	bf08      	it	eq
 802253a:	4613      	moveq	r3, r2
 802253c:	9307      	str	r3, [sp, #28]
 802253e:	e6b1      	b.n	80222a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8022540:	1c47      	adds	r7, r0, #1
 8022542:	d482      	bmi.n	802244a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8022544:	42bb      	cmp	r3, r7
 8022546:	db80      	blt.n	802244a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8022548:	1c67      	adds	r7, r4, #1
 802254a:	f53f af7e 	bmi.w	802244a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802254e:	42be      	cmp	r6, r7
 8022550:	f6ff af7b 	blt.w	802244a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8022554:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022556:	b236      	sxth	r6, r6
 8022558:	9001      	str	r0, [sp, #4]
 802255a:	b21b      	sxth	r3, r3
 802255c:	9600      	str	r6, [sp, #0]
 802255e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8022560:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8022564:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8022568:	4629      	mov	r1, r5
 802256a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802256c:	f7ff fd58 	bl	8022020 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8022570:	e76b      	b.n	802244a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8022572:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8022574:	ea4f 402a 	mov.w	r0, sl, asr #16
 8022578:	f3c8 3203 	ubfx	r2, r8, #12, #4
 802257c:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8022580:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8022584:	ea4f 4128 	mov.w	r1, r8, asr #16
 8022588:	fb07 0101 	mla	r1, r7, r1, r0
 802258c:	980a      	ldr	r0, [sp, #40]	; 0x28
 802258e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022592:	1844      	adds	r4, r0, r1
 8022594:	5c40      	ldrb	r0, [r0, r1]
 8022596:	78a6      	ldrb	r6, [r4, #2]
 8022598:	7861      	ldrb	r1, [r4, #1]
 802259a:	960f      	str	r6, [sp, #60]	; 0x3c
 802259c:	78e6      	ldrb	r6, [r4, #3]
 802259e:	910d      	str	r1, [sp, #52]	; 0x34
 80225a0:	9610      	str	r6, [sp, #64]	; 0x40
 80225a2:	f894 9004 	ldrb.w	r9, [r4, #4]
 80225a6:	f894 b005 	ldrb.w	fp, [r4, #5]
 80225aa:	b192      	cbz	r2, 80225d2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80225ac:	f06f 0604 	mvn.w	r6, #4
 80225b0:	2103      	movs	r1, #3
 80225b2:	3405      	adds	r4, #5
 80225b4:	fb17 6701 	smlabb	r7, r7, r1, r6
 80225b8:	19e6      	adds	r6, r4, r7
 80225ba:	5de4      	ldrb	r4, [r4, r7]
 80225bc:	9417      	str	r4, [sp, #92]	; 0x5c
 80225be:	7874      	ldrb	r4, [r6, #1]
 80225c0:	9419      	str	r4, [sp, #100]	; 0x64
 80225c2:	78b4      	ldrb	r4, [r6, #2]
 80225c4:	941b      	str	r4, [sp, #108]	; 0x6c
 80225c6:	78f4      	ldrb	r4, [r6, #3]
 80225c8:	9418      	str	r4, [sp, #96]	; 0x60
 80225ca:	7934      	ldrb	r4, [r6, #4]
 80225cc:	941a      	str	r4, [sp, #104]	; 0x68
 80225ce:	7974      	ldrb	r4, [r6, #5]
 80225d0:	941c      	str	r4, [sp, #112]	; 0x70
 80225d2:	b29b      	uxth	r3, r3
 80225d4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80225d6:	b292      	uxth	r2, r2
 80225d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80225da:	3503      	adds	r5, #3
 80225dc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80225e0:	fb03 f402 	mul.w	r4, r3, r2
 80225e4:	011b      	lsls	r3, r3, #4
 80225e6:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 80225ea:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 80225ee:	1b1b      	subs	r3, r3, r4
 80225f0:	b292      	uxth	r2, r2
 80225f2:	b29b      	uxth	r3, r3
 80225f4:	1ab6      	subs	r6, r6, r2
 80225f6:	435f      	muls	r7, r3
 80225f8:	b2b6      	uxth	r6, r6
 80225fa:	fb03 f909 	mul.w	r9, r3, r9
 80225fe:	fb03 fb0b 	mul.w	fp, r3, fp
 8022602:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022604:	fb06 7000 	mla	r0, r6, r0, r7
 8022608:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 802260a:	fb06 bb03 	mla	fp, r6, r3, fp
 802260e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022610:	fb02 0007 	mla	r0, r2, r7, r0
 8022614:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8022616:	fb02 bb03 	mla	fp, r2, r3, fp
 802261a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802261c:	fb04 0007 	mla	r0, r4, r7, r0
 8022620:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8022624:	fb17 f701 	smulbb	r7, r7, r1
 8022628:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802262c:	990d      	ldr	r1, [sp, #52]	; 0x34
 802262e:	fb00 700e 	mla	r0, r0, lr, r7
 8022632:	fb06 9101 	mla	r1, r6, r1, r9
 8022636:	b280      	uxth	r0, r0
 8022638:	1c47      	adds	r7, r0, #1
 802263a:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 802263e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022640:	1200      	asrs	r0, r0, #8
 8022642:	f805 0c06 	strb.w	r0, [r5, #-6]
 8022646:	9819      	ldr	r0, [sp, #100]	; 0x64
 8022648:	fb02 1100 	mla	r1, r2, r0, r1
 802264c:	981a      	ldr	r0, [sp, #104]	; 0x68
 802264e:	fb04 1100 	mla	r1, r4, r0, r1
 8022652:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8022656:	fb04 b403 	mla	r4, r4, r3, fp
 802265a:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 802265e:	fb10 f007 	smulbb	r0, r0, r7
 8022662:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8022666:	fb13 f307 	smulbb	r3, r3, r7
 802266a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 802266e:	fb01 010e 	mla	r1, r1, lr, r0
 8022672:	fb04 340e 	mla	r4, r4, lr, r3
 8022676:	b289      	uxth	r1, r1
 8022678:	b2a4      	uxth	r4, r4
 802267a:	1c48      	adds	r0, r1, #1
 802267c:	1c63      	adds	r3, r4, #1
 802267e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8022682:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8022686:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8022688:	1209      	asrs	r1, r1, #8
 802268a:	1224      	asrs	r4, r4, #8
 802268c:	449a      	add	sl, r3
 802268e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022690:	f805 1c05 	strb.w	r1, [r5, #-5]
 8022694:	f805 4c04 	strb.w	r4, [r5, #-4]
 8022698:	4498      	add	r8, r3
 802269a:	e707      	b.n	80224ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 802269c:	b01f      	add	sp, #124	; 0x7c
 802269e:	ecbd 8b08 	vpop	{d8-d11}
 80226a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080226a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 80226a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226ac:	b085      	sub	sp, #20
 80226ae:	784d      	ldrb	r5, [r1, #1]
 80226b0:	788e      	ldrb	r6, [r1, #2]
 80226b2:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80226b6:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 80226ba:	9403      	str	r4, [sp, #12]
 80226bc:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80226c0:	780c      	ldrb	r4, [r1, #0]
 80226c2:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 80226c6:	fb07 ce03 	mla	lr, r7, r3, ip
 80226ca:	2f00      	cmp	r7, #0
 80226cc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80226d0:	eb02 0b0e 	add.w	fp, r2, lr
 80226d4:	db56      	blt.n	8022784 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 80226d6:	45b9      	cmp	r9, r7
 80226d8:	dd54      	ble.n	8022784 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 80226da:	f1bc 0f00 	cmp.w	ip, #0
 80226de:	db4d      	blt.n	802277c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 80226e0:	4563      	cmp	r3, ip
 80226e2:	dd4b      	ble.n	802277c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 80226e4:	f812 200e 	ldrb.w	r2, [r2, lr]
 80226e8:	9200      	str	r2, [sp, #0]
 80226ea:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80226ee:	9201      	str	r2, [sp, #4]
 80226f0:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80226f4:	9202      	str	r2, [sp, #8]
 80226f6:	f11c 0201 	adds.w	r2, ip, #1
 80226fa:	d44a      	bmi.n	8022792 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 80226fc:	4293      	cmp	r3, r2
 80226fe:	dd48      	ble.n	8022792 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8022700:	2800      	cmp	r0, #0
 8022702:	d046      	beq.n	8022792 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8022704:	f89b e003 	ldrb.w	lr, [fp, #3]
 8022708:	f89b 8004 	ldrb.w	r8, [fp, #4]
 802270c:	f89b a005 	ldrb.w	sl, [fp, #5]
 8022710:	3701      	adds	r7, #1
 8022712:	d446      	bmi.n	80227a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8022714:	45b9      	cmp	r9, r7
 8022716:	dd44      	ble.n	80227a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8022718:	9a03      	ldr	r2, [sp, #12]
 802271a:	2a00      	cmp	r2, #0
 802271c:	d045      	beq.n	80227aa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 802271e:	f1bc 0f00 	cmp.w	ip, #0
 8022722:	db3a      	blt.n	802279a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8022724:	4563      	cmp	r3, ip
 8022726:	dd38      	ble.n	802279a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8022728:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 802272c:	f04f 0903 	mov.w	r9, #3
 8022730:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8022734:	fb03 b209 	mla	r2, r3, r9, fp
 8022738:	fb03 b909 	mla	r9, r3, r9, fp
 802273c:	7852      	ldrb	r2, [r2, #1]
 802273e:	f899 9002 	ldrb.w	r9, [r9, #2]
 8022742:	f11c 0c01 	adds.w	ip, ip, #1
 8022746:	d40d      	bmi.n	8022764 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8022748:	4563      	cmp	r3, ip
 802274a:	dd0b      	ble.n	8022764 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 802274c:	b160      	cbz	r0, 8022768 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 802274e:	2603      	movs	r6, #3
 8022750:	fb13 6406 	smlabb	r4, r3, r6, r6
 8022754:	fb03 b506 	mla	r5, r3, r6, fp
 8022758:	fb03 b306 	mla	r3, r3, r6, fp
 802275c:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8022760:	792d      	ldrb	r5, [r5, #4]
 8022762:	795e      	ldrb	r6, [r3, #5]
 8022764:	280f      	cmp	r0, #15
 8022766:	d802      	bhi.n	802276e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8022768:	9b03      	ldr	r3, [sp, #12]
 802276a:	2b0f      	cmp	r3, #15
 802276c:	d922      	bls.n	80227b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 802276e:	4b2f      	ldr	r3, [pc, #188]	; (802282c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 8022770:	f240 1157 	movw	r1, #343	; 0x157
 8022774:	4a2e      	ldr	r2, [pc, #184]	; (8022830 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 8022776:	482f      	ldr	r0, [pc, #188]	; (8022834 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8022778:	f004 f922 	bl	80269c0 <__assert_func>
 802277c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8022780:	9400      	str	r4, [sp, #0]
 8022782:	e7b8      	b.n	80226f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 8022784:	46b2      	mov	sl, r6
 8022786:	46a8      	mov	r8, r5
 8022788:	46a6      	mov	lr, r4
 802278a:	9400      	str	r4, [sp, #0]
 802278c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8022790:	e7be      	b.n	8022710 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8022792:	46b2      	mov	sl, r6
 8022794:	46a8      	mov	r8, r5
 8022796:	46a6      	mov	lr, r4
 8022798:	e7ba      	b.n	8022710 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 802279a:	46b1      	mov	r9, r6
 802279c:	462a      	mov	r2, r5
 802279e:	4627      	mov	r7, r4
 80227a0:	e7cf      	b.n	8022742 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 80227a2:	46b1      	mov	r9, r6
 80227a4:	462a      	mov	r2, r5
 80227a6:	4627      	mov	r7, r4
 80227a8:	e7dc      	b.n	8022764 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80227aa:	280f      	cmp	r0, #15
 80227ac:	d8df      	bhi.n	802276e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 80227ae:	46b1      	mov	r9, r6
 80227b0:	462a      	mov	r2, r5
 80227b2:	4627      	mov	r7, r4
 80227b4:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 80227b8:	b280      	uxth	r0, r0
 80227ba:	fb00 f30b 	mul.w	r3, r0, fp
 80227be:	0100      	lsls	r0, r0, #4
 80227c0:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 80227c4:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 80227c8:	1ac0      	subs	r0, r0, r3
 80227ca:	fa1f fb8b 	uxth.w	fp, fp
 80227ce:	b280      	uxth	r0, r0
 80227d0:	ebac 0c0b 	sub.w	ip, ip, fp
 80227d4:	9003      	str	r0, [sp, #12]
 80227d6:	fa1f fc8c 	uxth.w	ip, ip
 80227da:	fb00 fe0e 	mul.w	lr, r0, lr
 80227de:	9800      	ldr	r0, [sp, #0]
 80227e0:	fb0c ee00 	mla	lr, ip, r0, lr
 80227e4:	9803      	ldr	r0, [sp, #12]
 80227e6:	fb00 f808 	mul.w	r8, r0, r8
 80227ea:	9801      	ldr	r0, [sp, #4]
 80227ec:	fb0b ee07 	mla	lr, fp, r7, lr
 80227f0:	fb0c 8800 	mla	r8, ip, r0, r8
 80227f4:	fb03 ee04 	mla	lr, r3, r4, lr
 80227f8:	fb0b 8202 	mla	r2, fp, r2, r8
 80227fc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022800:	fb03 2505 	mla	r5, r3, r5, r2
 8022804:	9a03      	ldr	r2, [sp, #12]
 8022806:	f881 e000 	strb.w	lr, [r1]
 802280a:	fb02 f00a 	mul.w	r0, r2, sl
 802280e:	9a02      	ldr	r2, [sp, #8]
 8022810:	122d      	asrs	r5, r5, #8
 8022812:	fb0c 0c02 	mla	ip, ip, r2, r0
 8022816:	704d      	strb	r5, [r1, #1]
 8022818:	fb0b c909 	mla	r9, fp, r9, ip
 802281c:	fb03 9606 	mla	r6, r3, r6, r9
 8022820:	1236      	asrs	r6, r6, #8
 8022822:	708e      	strb	r6, [r1, #2]
 8022824:	b005      	add	sp, #20
 8022826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802282a:	bf00      	nop
 802282c:	0802eaaf 	.word	0x0802eaaf
 8022830:	0802f017 	.word	0x0802f017
 8022834:	0802eb78 	.word	0x0802eb78

08022838 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802283c:	ed2d 8b08 	vpush	{d8-d11}
 8022840:	b09b      	sub	sp, #108	; 0x6c
 8022842:	eeb0 aa40 	vmov.f32	s20, s0
 8022846:	eef0 9a60 	vmov.f32	s19, s1
 802284a:	920b      	str	r2, [sp, #44]	; 0x2c
 802284c:	eeb0 9a41 	vmov.f32	s18, s2
 8022850:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8022852:	eeb0 8a62 	vmov.f32	s16, s5
 8022856:	9019      	str	r0, [sp, #100]	; 0x64
 8022858:	eef0 8a43 	vmov.f32	s17, s6
 802285c:	6850      	ldr	r0, [r2, #4]
 802285e:	eef0 ba44 	vmov.f32	s23, s8
 8022862:	9109      	str	r1, [sp, #36]	; 0x24
 8022864:	eeb0 ba64 	vmov.f32	s22, s9
 8022868:	9306      	str	r3, [sp, #24]
 802286a:	eef0 aa45 	vmov.f32	s21, s10
 802286e:	6812      	ldr	r2, [r2, #0]
 8022870:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8022874:	e9dd b42d 	ldrd	fp, r4, [sp, #180]	; 0xb4
 8022878:	fb00 1303 	mla	r3, r0, r3, r1
 802287c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022880:	18d3      	adds	r3, r2, r3
 8022882:	9307      	str	r3, [sp, #28]
 8022884:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022886:	681b      	ldr	r3, [r3, #0]
 8022888:	9308      	str	r3, [sp, #32]
 802288a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802288c:	2b00      	cmp	r3, #0
 802288e:	dc03      	bgt.n	8022898 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8022890:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022892:	2b00      	cmp	r3, #0
 8022894:	f340 81ab 	ble.w	8022bee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 8022898:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802289a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802289e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80228a2:	1e48      	subs	r0, r1, #1
 80228a4:	1e55      	subs	r5, r2, #1
 80228a6:	9b06      	ldr	r3, [sp, #24]
 80228a8:	2b00      	cmp	r3, #0
 80228aa:	f340 80b1 	ble.w	8022a10 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80228ae:	ea5f 462b 	movs.w	r6, fp, asr #16
 80228b2:	ea4f 4324 	mov.w	r3, r4, asr #16
 80228b6:	d406      	bmi.n	80228c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80228b8:	4286      	cmp	r6, r0
 80228ba:	da04      	bge.n	80228c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80228bc:	2b00      	cmp	r3, #0
 80228be:	db02      	blt.n	80228c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80228c0:	42ab      	cmp	r3, r5
 80228c2:	f2c0 80a6 	blt.w	8022a12 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80228c6:	3601      	adds	r6, #1
 80228c8:	f100 8097 	bmi.w	80229fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80228cc:	42b1      	cmp	r1, r6
 80228ce:	f2c0 8094 	blt.w	80229fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80228d2:	3301      	adds	r3, #1
 80228d4:	f100 8091 	bmi.w	80229fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80228d8:	429a      	cmp	r2, r3
 80228da:	f2c0 808e 	blt.w	80229fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80228de:	9b06      	ldr	r3, [sp, #24]
 80228e0:	9e07      	ldr	r6, [sp, #28]
 80228e2:	930a      	str	r3, [sp, #40]	; 0x28
 80228e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80228e6:	2b00      	cmp	r3, #0
 80228e8:	f340 80b0 	ble.w	8022a4c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80228ec:	9834      	ldr	r0, [sp, #208]	; 0xd0
 80228ee:	1425      	asrs	r5, r4, #16
 80228f0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80228f2:	f3cb 3203 	ubfx	r2, fp, #12, #4
 80228f6:	68c7      	ldr	r7, [r0, #12]
 80228f8:	ea5f 402b 	movs.w	r0, fp, asr #16
 80228fc:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8022900:	689b      	ldr	r3, [r3, #8]
 8022902:	f100 80ea 	bmi.w	8022ada <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8022906:	f103 3cff 	add.w	ip, r3, #4294967295
 802290a:	4560      	cmp	r0, ip
 802290c:	f280 80e5 	bge.w	8022ada <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8022910:	2d00      	cmp	r5, #0
 8022912:	f2c0 80e2 	blt.w	8022ada <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8022916:	f107 3cff 	add.w	ip, r7, #4294967295
 802291a:	4565      	cmp	r5, ip
 802291c:	f280 80dd 	bge.w	8022ada <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8022920:	b21b      	sxth	r3, r3
 8022922:	fb05 0003 	mla	r0, r5, r3, r0
 8022926:	9d08      	ldr	r5, [sp, #32]
 8022928:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802292c:	182f      	adds	r7, r5, r0
 802292e:	5c2d      	ldrb	r5, [r5, r0]
 8022930:	7878      	ldrb	r0, [r7, #1]
 8022932:	f897 e002 	ldrb.w	lr, [r7, #2]
 8022936:	900c      	str	r0, [sp, #48]	; 0x30
 8022938:	f897 9003 	ldrb.w	r9, [r7, #3]
 802293c:	f897 8004 	ldrb.w	r8, [r7, #4]
 8022940:	f897 a005 	ldrb.w	sl, [r7, #5]
 8022944:	b1c9      	cbz	r1, 802297a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8022946:	f04f 0c03 	mov.w	ip, #3
 802294a:	f06f 0004 	mvn.w	r0, #4
 802294e:	3705      	adds	r7, #5
 8022950:	fb13 030c 	smlabb	r3, r3, ip, r0
 8022954:	eb07 0c03 	add.w	ip, r7, r3
 8022958:	5cfb      	ldrb	r3, [r7, r3]
 802295a:	930d      	str	r3, [sp, #52]	; 0x34
 802295c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8022960:	930f      	str	r3, [sp, #60]	; 0x3c
 8022962:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8022966:	9311      	str	r3, [sp, #68]	; 0x44
 8022968:	f89c 3003 	ldrb.w	r3, [ip, #3]
 802296c:	930e      	str	r3, [sp, #56]	; 0x38
 802296e:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8022972:	9310      	str	r3, [sp, #64]	; 0x40
 8022974:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8022978:	9312      	str	r3, [sp, #72]	; 0x48
 802297a:	b292      	uxth	r2, r2
 802297c:	980c      	ldr	r0, [sp, #48]	; 0x30
 802297e:	b289      	uxth	r1, r1
 8022980:	fb02 f301 	mul.w	r3, r2, r1
 8022984:	0112      	lsls	r2, r2, #4
 8022986:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802298a:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 802298e:	1ad2      	subs	r2, r2, r3
 8022990:	b289      	uxth	r1, r1
 8022992:	b292      	uxth	r2, r2
 8022994:	1a7f      	subs	r7, r7, r1
 8022996:	fb02 f909 	mul.w	r9, r2, r9
 802299a:	b2bf      	uxth	r7, r7
 802299c:	fb02 f808 	mul.w	r8, r2, r8
 80229a0:	fb02 fa0a 	mul.w	sl, r2, sl
 80229a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80229a6:	fb07 9905 	mla	r9, r7, r5, r9
 80229aa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80229ac:	fb07 8800 	mla	r8, r7, r0, r8
 80229b0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80229b2:	fb07 aa0e 	mla	sl, r7, lr, sl
 80229b6:	fb01 9905 	mla	r9, r1, r5, r9
 80229ba:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80229bc:	fb01 8800 	mla	r8, r1, r0, r8
 80229c0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80229c2:	fb01 a102 	mla	r1, r1, r2, sl
 80229c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80229c8:	fb03 9905 	mla	r9, r3, r5, r9
 80229cc:	fb03 8800 	mla	r8, r3, r0, r8
 80229d0:	fb03 1302 	mla	r3, r3, r2, r1
 80229d4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80229d8:	ea4f 2828 	mov.w	r8, r8, asr #8
 80229dc:	121b      	asrs	r3, r3, #8
 80229de:	f886 9000 	strb.w	r9, [r6]
 80229e2:	f886 8001 	strb.w	r8, [r6, #1]
 80229e6:	70b3      	strb	r3, [r6, #2]
 80229e8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80229ea:	3603      	adds	r6, #3
 80229ec:	449b      	add	fp, r3
 80229ee:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80229f0:	441c      	add	r4, r3
 80229f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80229f4:	3b01      	subs	r3, #1
 80229f6:	930a      	str	r3, [sp, #40]	; 0x28
 80229f8:	e774      	b.n	80228e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 80229fa:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80229fc:	449b      	add	fp, r3
 80229fe:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022a00:	441c      	add	r4, r3
 8022a02:	9b06      	ldr	r3, [sp, #24]
 8022a04:	3b01      	subs	r3, #1
 8022a06:	9306      	str	r3, [sp, #24]
 8022a08:	9b07      	ldr	r3, [sp, #28]
 8022a0a:	3303      	adds	r3, #3
 8022a0c:	9307      	str	r3, [sp, #28]
 8022a0e:	e74a      	b.n	80228a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8022a10:	d024      	beq.n	8022a5c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8022a12:	9b06      	ldr	r3, [sp, #24]
 8022a14:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8022a16:	3b01      	subs	r3, #1
 8022a18:	fb00 b003 	mla	r0, r0, r3, fp
 8022a1c:	1400      	asrs	r0, r0, #16
 8022a1e:	f53f af5e 	bmi.w	80228de <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8022a22:	3901      	subs	r1, #1
 8022a24:	4288      	cmp	r0, r1
 8022a26:	f6bf af5a 	bge.w	80228de <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8022a2a:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8022a2c:	fb01 4303 	mla	r3, r1, r3, r4
 8022a30:	141b      	asrs	r3, r3, #16
 8022a32:	f53f af54 	bmi.w	80228de <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8022a36:	3a01      	subs	r2, #1
 8022a38:	4293      	cmp	r3, r2
 8022a3a:	f6bf af50 	bge.w	80228de <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8022a3e:	9b07      	ldr	r3, [sp, #28]
 8022a40:	f8dd e018 	ldr.w	lr, [sp, #24]
 8022a44:	1cde      	adds	r6, r3, #3
 8022a46:	f1be 0f00 	cmp.w	lr, #0
 8022a4a:	dc5f      	bgt.n	8022b0c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8022a4c:	9b06      	ldr	r3, [sp, #24]
 8022a4e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022a52:	9b07      	ldr	r3, [sp, #28]
 8022a54:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022a58:	4423      	add	r3, r4
 8022a5a:	9307      	str	r3, [sp, #28]
 8022a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022a5e:	2b00      	cmp	r3, #0
 8022a60:	f340 80c5 	ble.w	8022bee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 8022a64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022a68:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022a6a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022a6e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022a72:	eef0 6a48 	vmov.f32	s13, s16
 8022a76:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022a7a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022a7e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022a82:	ee16 ba90 	vmov	fp, s13
 8022a86:	eef0 6a68 	vmov.f32	s13, s17
 8022a8a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022a8e:	ee16 4a90 	vmov	r4, s13
 8022a92:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022a96:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022a9a:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022a9e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022aa2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022aa6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022aaa:	ee18 2a10 	vmov	r2, s16
 8022aae:	eeb0 8a47 	vmov.f32	s16, s14
 8022ab2:	fb92 f3f3 	sdiv	r3, r2, r3
 8022ab6:	ee18 2a90 	vmov	r2, s17
 8022aba:	932f      	str	r3, [sp, #188]	; 0xbc
 8022abc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022abe:	eef0 8a67 	vmov.f32	s17, s15
 8022ac2:	fb92 f3f3 	sdiv	r3, r2, r3
 8022ac6:	9330      	str	r3, [sp, #192]	; 0xc0
 8022ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022aca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022acc:	3b01      	subs	r3, #1
 8022ace:	9309      	str	r3, [sp, #36]	; 0x24
 8022ad0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022ad2:	bf08      	it	eq
 8022ad4:	4613      	moveq	r3, r2
 8022ad6:	9306      	str	r3, [sp, #24]
 8022ad8:	e6d7      	b.n	802288a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8022ada:	f110 0c01 	adds.w	ip, r0, #1
 8022ade:	d483      	bmi.n	80229e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8022ae0:	4563      	cmp	r3, ip
 8022ae2:	db81      	blt.n	80229e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8022ae4:	f115 0c01 	adds.w	ip, r5, #1
 8022ae8:	f53f af7e 	bmi.w	80229e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8022aec:	4567      	cmp	r7, ip
 8022aee:	f6ff af7b 	blt.w	80229e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8022af2:	b23f      	sxth	r7, r7
 8022af4:	b21b      	sxth	r3, r3
 8022af6:	9700      	str	r7, [sp, #0]
 8022af8:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8022afc:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8022b00:	9a08      	ldr	r2, [sp, #32]
 8022b02:	4631      	mov	r1, r6
 8022b04:	9819      	ldr	r0, [sp, #100]	; 0x64
 8022b06:	f7ff fdcf 	bl	80226a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8022b0a:	e76d      	b.n	80229e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8022b0c:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8022b0e:	ea4f 402b 	mov.w	r0, fp, asr #16
 8022b12:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8022b16:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022b1a:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8022b1e:	1421      	asrs	r1, r4, #16
 8022b20:	930a      	str	r3, [sp, #40]	; 0x28
 8022b22:	fb0c 0101 	mla	r1, ip, r1, r0
 8022b26:	9808      	ldr	r0, [sp, #32]
 8022b28:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022b2c:	1845      	adds	r5, r0, r1
 8022b2e:	5c40      	ldrb	r0, [r0, r1]
 8022b30:	796f      	ldrb	r7, [r5, #5]
 8022b32:	7869      	ldrb	r1, [r5, #1]
 8022b34:	f895 8002 	ldrb.w	r8, [r5, #2]
 8022b38:	f895 a003 	ldrb.w	sl, [r5, #3]
 8022b3c:	f895 9004 	ldrb.w	r9, [r5, #4]
 8022b40:	970c      	str	r7, [sp, #48]	; 0x30
 8022b42:	b1a2      	cbz	r2, 8022b6e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x336>
 8022b44:	2703      	movs	r7, #3
 8022b46:	f06f 0304 	mvn.w	r3, #4
 8022b4a:	3505      	adds	r5, #5
 8022b4c:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8022b50:	eb05 070c 	add.w	r7, r5, ip
 8022b54:	f815 500c 	ldrb.w	r5, [r5, ip]
 8022b58:	9513      	str	r5, [sp, #76]	; 0x4c
 8022b5a:	787d      	ldrb	r5, [r7, #1]
 8022b5c:	9515      	str	r5, [sp, #84]	; 0x54
 8022b5e:	78bd      	ldrb	r5, [r7, #2]
 8022b60:	9517      	str	r5, [sp, #92]	; 0x5c
 8022b62:	78fd      	ldrb	r5, [r7, #3]
 8022b64:	9514      	str	r5, [sp, #80]	; 0x50
 8022b66:	793d      	ldrb	r5, [r7, #4]
 8022b68:	9516      	str	r5, [sp, #88]	; 0x58
 8022b6a:	797d      	ldrb	r5, [r7, #5]
 8022b6c:	9518      	str	r5, [sp, #96]	; 0x60
 8022b6e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8022b72:	b292      	uxth	r2, r2
 8022b74:	3603      	adds	r6, #3
 8022b76:	f10e 3eff 	add.w	lr, lr, #4294967295
 8022b7a:	fb03 f502 	mul.w	r5, r3, r2
 8022b7e:	011b      	lsls	r3, r3, #4
 8022b80:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8022b84:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8022b88:	1b5b      	subs	r3, r3, r5
 8022b8a:	b292      	uxth	r2, r2
 8022b8c:	b29b      	uxth	r3, r3
 8022b8e:	1abf      	subs	r7, r7, r2
 8022b90:	fb03 f909 	mul.w	r9, r3, r9
 8022b94:	b2bf      	uxth	r7, r7
 8022b96:	fb03 fa0a 	mul.w	sl, r3, sl
 8022b9a:	fb07 9901 	mla	r9, r7, r1, r9
 8022b9e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8022ba0:	fb07 aa00 	mla	sl, r7, r0, sl
 8022ba4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022ba6:	fb02 9901 	mla	r9, r2, r1, r9
 8022baa:	9916      	ldr	r1, [sp, #88]	; 0x58
 8022bac:	fb02 aa00 	mla	sl, r2, r0, sl
 8022bb0:	9814      	ldr	r0, [sp, #80]	; 0x50
 8022bb2:	fb05 9901 	mla	r9, r5, r1, r9
 8022bb6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022bb8:	fb05 aa00 	mla	sl, r5, r0, sl
 8022bbc:	434b      	muls	r3, r1
 8022bbe:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8022bc0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022bc4:	fb07 3308 	mla	r3, r7, r8, r3
 8022bc8:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022bcc:	f806 ac06 	strb.w	sl, [r6, #-6]
 8022bd0:	fb02 3201 	mla	r2, r2, r1, r3
 8022bd4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022bd6:	f806 9c05 	strb.w	r9, [r6, #-5]
 8022bda:	fb05 2503 	mla	r5, r5, r3, r2
 8022bde:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8022be0:	122d      	asrs	r5, r5, #8
 8022be2:	449b      	add	fp, r3
 8022be4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022be6:	f806 5c04 	strb.w	r5, [r6, #-4]
 8022bea:	441c      	add	r4, r3
 8022bec:	e72b      	b.n	8022a46 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8022bee:	b01b      	add	sp, #108	; 0x6c
 8022bf0:	ecbd 8b08 	vpop	{d8-d11}
 8022bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022bf8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8022bf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022bfc:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8022c00:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8022c04:	fb04 5603 	mla	r6, r4, r3, r5
 8022c08:	2c00      	cmp	r4, #0
 8022c0a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8022c0e:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8022c12:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8022c16:	db36      	blt.n	8022c86 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 8022c18:	45a6      	cmp	lr, r4
 8022c1a:	dd34      	ble.n	8022c86 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 8022c1c:	2d00      	cmp	r5, #0
 8022c1e:	db30      	blt.n	8022c82 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 8022c20:	42ab      	cmp	r3, r5
 8022c22:	dd2e      	ble.n	8022c82 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 8022c24:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8022c28:	1c6e      	adds	r6, r5, #1
 8022c2a:	d42f      	bmi.n	8022c8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 8022c2c:	42b3      	cmp	r3, r6
 8022c2e:	dd2d      	ble.n	8022c8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 8022c30:	b370      	cbz	r0, 8022c90 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x98>
 8022c32:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8022c36:	3401      	adds	r4, #1
 8022c38:	d42e      	bmi.n	8022c98 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 8022c3a:	45a6      	cmp	lr, r4
 8022c3c:	dd2c      	ble.n	8022c98 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 8022c3e:	b377      	cbz	r7, 8022c9e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa6>
 8022c40:	2d00      	cmp	r5, #0
 8022c42:	db27      	blt.n	8022c94 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 8022c44:	42ab      	cmp	r3, r5
 8022c46:	dd25      	ble.n	8022c94 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 8022c48:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8022c4c:	3501      	adds	r5, #1
 8022c4e:	d429      	bmi.n	8022ca4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8022c50:	42ab      	cmp	r3, r5
 8022c52:	dd27      	ble.n	8022ca4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8022c54:	b340      	cbz	r0, 8022ca8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb0>
 8022c56:	3301      	adds	r3, #1
 8022c58:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8022c5c:	280f      	cmp	r0, #15
 8022c5e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8022c62:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8022c66:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022c6a:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8022c6e:	d801      	bhi.n	8022c74 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7c>
 8022c70:	2f0f      	cmp	r7, #15
 8022c72:	d91b      	bls.n	8022cac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb4>
 8022c74:	4b89      	ldr	r3, [pc, #548]	; (8022e9c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a4>)
 8022c76:	f240 1157 	movw	r1, #343	; 0x157
 8022c7a:	4a89      	ldr	r2, [pc, #548]	; (8022ea0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 8022c7c:	4889      	ldr	r0, [pc, #548]	; (8022ea4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 8022c7e:	f003 fe9f 	bl	80269c0 <__assert_func>
 8022c82:	2200      	movs	r2, #0
 8022c84:	e7d0      	b.n	8022c28 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x30>
 8022c86:	2600      	movs	r6, #0
 8022c88:	4632      	mov	r2, r6
 8022c8a:	e7d4      	b.n	8022c36 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8022c8c:	2600      	movs	r6, #0
 8022c8e:	e7d2      	b.n	8022c36 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8022c90:	4606      	mov	r6, r0
 8022c92:	e7d0      	b.n	8022c36 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8022c94:	2400      	movs	r4, #0
 8022c96:	e7d9      	b.n	8022c4c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x54>
 8022c98:	2300      	movs	r3, #0
 8022c9a:	461c      	mov	r4, r3
 8022c9c:	e7de      	b.n	8022c5c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8022c9e:	463b      	mov	r3, r7
 8022ca0:	463c      	mov	r4, r7
 8022ca2:	e7db      	b.n	8022c5c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8022ca4:	2300      	movs	r3, #0
 8022ca6:	e7d9      	b.n	8022c5c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8022ca8:	4603      	mov	r3, r0
 8022caa:	e7d7      	b.n	8022c5c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8022cac:	b280      	uxth	r0, r0
 8022cae:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8022cb2:	b2bf      	uxth	r7, r7
 8022cb4:	fb00 fe07 	mul.w	lr, r0, r7
 8022cb8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8022cbc:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8022cc0:	eba0 0c0e 	sub.w	ip, r0, lr
 8022cc4:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8022cc8:	b2bf      	uxth	r7, r7
 8022cca:	fa1f fc8c 	uxth.w	ip, ip
 8022cce:	eba5 0507 	sub.w	r5, r5, r7
 8022cd2:	fb0c f00a 	mul.w	r0, ip, sl
 8022cd6:	b2ad      	uxth	r5, r5
 8022cd8:	fb05 000b 	mla	r0, r5, fp, r0
 8022cdc:	fb07 0009 	mla	r0, r7, r9, r0
 8022ce0:	fb0e 0008 	mla	r0, lr, r8, r0
 8022ce4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022ce8:	9001      	str	r0, [sp, #4]
 8022cea:	d018      	beq.n	8022d1e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x126>
 8022cec:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8022cf0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022cf4:	fb0b f000 	mul.w	r0, fp, r0
 8022cf8:	fb0b fb02 	mul.w	fp, fp, r2
 8022cfc:	0a02      	lsrs	r2, r0, #8
 8022cfe:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8022d02:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022d06:	4402      	add	r2, r0
 8022d08:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8022d0c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8022d10:	0a12      	lsrs	r2, r2, #8
 8022d12:	0a00      	lsrs	r0, r0, #8
 8022d14:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022d18:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022d1c:	4302      	orrs	r2, r0
 8022d1e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022d22:	d01a      	beq.n	8022d5a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x162>
 8022d24:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8022d28:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022d2c:	fb0a f000 	mul.w	r0, sl, r0
 8022d30:	fb0a fa06 	mul.w	sl, sl, r6
 8022d34:	0a06      	lsrs	r6, r0, #8
 8022d36:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8022d3a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022d3e:	4406      	add	r6, r0
 8022d40:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8022d44:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8022d48:	0a36      	lsrs	r6, r6, #8
 8022d4a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022d4e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022d52:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022d56:	ea46 060a 	orr.w	r6, r6, sl
 8022d5a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022d5e:	d01b      	beq.n	8022d98 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1a0>
 8022d60:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8022d64:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022d68:	fb09 fa0a 	mul.w	sl, r9, sl
 8022d6c:	fb09 f004 	mul.w	r0, r9, r4
 8022d70:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8022d74:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022d78:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8022d7c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022d80:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8022d84:	4454      	add	r4, sl
 8022d86:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022d8a:	0a24      	lsrs	r4, r4, #8
 8022d8c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022d90:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022d94:	ea44 0409 	orr.w	r4, r4, r9
 8022d98:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022d9c:	d01b      	beq.n	8022dd6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1de>
 8022d9e:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8022da2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022da6:	fb08 f909 	mul.w	r9, r8, r9
 8022daa:	fb08 f003 	mul.w	r0, r8, r3
 8022dae:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8022db2:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8022db6:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8022dba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022dbe:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8022dc2:	444b      	add	r3, r9
 8022dc4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8022dc8:	0a1b      	lsrs	r3, r3, #8
 8022dca:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8022dce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022dd2:	ea43 0308 	orr.w	r3, r3, r8
 8022dd6:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8022dda:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022dde:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8022de2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022de6:	fb0c f000 	mul.w	r0, ip, r0
 8022dea:	fb0c f606 	mul.w	r6, ip, r6
 8022dee:	fb05 0808 	mla	r8, r5, r8, r0
 8022df2:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8022df6:	fb05 6502 	mla	r5, r5, r2, r6
 8022dfa:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022dfe:	fb07 8800 	mla	r8, r7, r0, r8
 8022e02:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8022e06:	fb07 5704 	mla	r7, r7, r4, r5
 8022e0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022e0e:	fb0e 8000 	mla	r0, lr, r0, r8
 8022e12:	fb0e 7e03 	mla	lr, lr, r3, r7
 8022e16:	9b01      	ldr	r3, [sp, #4]
 8022e18:	0a00      	lsrs	r0, r0, #8
 8022e1a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022e1e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022e22:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022e26:	ea40 0e0e 	orr.w	lr, r0, lr
 8022e2a:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8022e2e:	b280      	uxth	r0, r0
 8022e30:	fa5f f48e 	uxtb.w	r4, lr
 8022e34:	4343      	muls	r3, r0
 8022e36:	fb14 f400 	smulbb	r4, r4, r0
 8022e3a:	1c5a      	adds	r2, r3, #1
 8022e3c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022e40:	780b      	ldrb	r3, [r1, #0]
 8022e42:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8022e46:	b2d2      	uxtb	r2, r2
 8022e48:	fb03 4302 	mla	r3, r3, r2, r4
 8022e4c:	b29b      	uxth	r3, r3
 8022e4e:	1c5c      	adds	r4, r3, #1
 8022e50:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8022e54:	784c      	ldrb	r4, [r1, #1]
 8022e56:	fb14 f402 	smulbb	r4, r4, r2
 8022e5a:	121b      	asrs	r3, r3, #8
 8022e5c:	700b      	strb	r3, [r1, #0]
 8022e5e:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8022e62:	fb03 4300 	mla	r3, r3, r0, r4
 8022e66:	b29b      	uxth	r3, r3
 8022e68:	1c5c      	adds	r4, r3, #1
 8022e6a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8022e6e:	121b      	asrs	r3, r3, #8
 8022e70:	704b      	strb	r3, [r1, #1]
 8022e72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8022e76:	f891 e002 	ldrb.w	lr, [r1, #2]
 8022e7a:	fb1e fe02 	smulbb	lr, lr, r2
 8022e7e:	fb03 ee00 	mla	lr, r3, r0, lr
 8022e82:	fa1f fe8e 	uxth.w	lr, lr
 8022e86:	f10e 0301 	add.w	r3, lr, #1
 8022e8a:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8022e8e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022e92:	f881 e002 	strb.w	lr, [r1, #2]
 8022e96:	b003      	add	sp, #12
 8022e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e9c:	0802eaaf 	.word	0x0802eaaf
 8022ea0:	0802f017 	.word	0x0802f017
 8022ea4:	0802eb78 	.word	0x0802eb78

08022ea8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022eac:	ed2d 8b08 	vpush	{d8-d11}
 8022eb0:	b09d      	sub	sp, #116	; 0x74
 8022eb2:	eeb0 aa40 	vmov.f32	s20, s0
 8022eb6:	eef0 9a60 	vmov.f32	s19, s1
 8022eba:	9219      	str	r2, [sp, #100]	; 0x64
 8022ebc:	eeb0 9a41 	vmov.f32	s18, s2
 8022ec0:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8022ec2:	eeb0 8a62 	vmov.f32	s16, s5
 8022ec6:	9307      	str	r3, [sp, #28]
 8022ec8:	eef0 8a43 	vmov.f32	s17, s6
 8022ecc:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8022ed0:	eef0 ba44 	vmov.f32	s23, s8
 8022ed4:	901b      	str	r0, [sp, #108]	; 0x6c
 8022ed6:	eeb0 ba64 	vmov.f32	s22, s9
 8022eda:	931a      	str	r3, [sp, #104]	; 0x68
 8022edc:	eef0 aa45 	vmov.f32	s21, s10
 8022ee0:	6850      	ldr	r0, [r2, #4]
 8022ee2:	9117      	str	r1, [sp, #92]	; 0x5c
 8022ee4:	6812      	ldr	r2, [r2, #0]
 8022ee6:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8022eea:	e9dd 562f 	ldrd	r5, r6, [sp, #188]	; 0xbc
 8022eee:	fb00 1303 	mla	r3, r0, r3, r1
 8022ef2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022ef6:	18d3      	adds	r3, r2, r3
 8022ef8:	930a      	str	r3, [sp, #40]	; 0x28
 8022efa:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8022efc:	681b      	ldr	r3, [r3, #0]
 8022efe:	9310      	str	r3, [sp, #64]	; 0x40
 8022f00:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8022f04:	930b      	str	r3, [sp, #44]	; 0x2c
 8022f06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022f08:	2b00      	cmp	r3, #0
 8022f0a:	dc03      	bgt.n	8022f14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8022f0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022f0e:	2b00      	cmp	r3, #0
 8022f10:	f340 8368 	ble.w	80235e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8022f14:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8022f16:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022f1a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022f1e:	1e48      	subs	r0, r1, #1
 8022f20:	1e57      	subs	r7, r2, #1
 8022f22:	9b07      	ldr	r3, [sp, #28]
 8022f24:	2b00      	cmp	r3, #0
 8022f26:	f340 8187 	ble.w	8023238 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8022f2a:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8022f2e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022f32:	d406      	bmi.n	8022f42 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022f34:	4584      	cmp	ip, r0
 8022f36:	da04      	bge.n	8022f42 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022f38:	2b00      	cmp	r3, #0
 8022f3a:	db02      	blt.n	8022f42 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022f3c:	42bb      	cmp	r3, r7
 8022f3e:	f2c0 817c 	blt.w	802323a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8022f42:	f11c 0c01 	adds.w	ip, ip, #1
 8022f46:	f100 816c 	bmi.w	8023222 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8022f4a:	4561      	cmp	r1, ip
 8022f4c:	f2c0 8169 	blt.w	8023222 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8022f50:	3301      	adds	r3, #1
 8022f52:	f100 8166 	bmi.w	8023222 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8022f56:	429a      	cmp	r2, r3
 8022f58:	f2c0 8163 	blt.w	8023222 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8022f5c:	9b07      	ldr	r3, [sp, #28]
 8022f5e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8022f60:	9318      	str	r3, [sp, #96]	; 0x60
 8022f62:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022f64:	2b00      	cmp	r3, #0
 8022f66:	f340 8186 	ble.w	8023276 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8022f6a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8022f6c:	142a      	asrs	r2, r5, #16
 8022f6e:	ea4f 4026 	mov.w	r0, r6, asr #16
 8022f72:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022f76:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8022f7a:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8022f7e:	f100 81cb 	bmi.w	8023318 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8022f82:	f10e 38ff 	add.w	r8, lr, #4294967295
 8022f86:	4542      	cmp	r2, r8
 8022f88:	f280 81c6 	bge.w	8023318 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8022f8c:	2800      	cmp	r0, #0
 8022f8e:	f2c0 81c3 	blt.w	8023318 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8022f92:	f103 38ff 	add.w	r8, r3, #4294967295
 8022f96:	4540      	cmp	r0, r8
 8022f98:	f280 81be 	bge.w	8023318 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8022f9c:	fa0f f38e 	sxth.w	r3, lr
 8022fa0:	fb00 2203 	mla	r2, r0, r3, r2
 8022fa4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022fa6:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8022faa:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8022fae:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8022fb2:	2900      	cmp	r1, #0
 8022fb4:	f000 81a6 	beq.w	8023304 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45c>
 8022fb8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8022fbc:	900c      	str	r0, [sp, #48]	; 0x30
 8022fbe:	0e00      	lsrs	r0, r0, #24
 8022fc0:	9013      	str	r0, [sp, #76]	; 0x4c
 8022fc2:	f1bc 0f00 	cmp.w	ip, #0
 8022fc6:	d00f      	beq.n	8022fe8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8022fc8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8022fcc:	3b01      	subs	r3, #1
 8022fce:	009b      	lsls	r3, r3, #2
 8022fd0:	3304      	adds	r3, #4
 8022fd2:	eb08 0003 	add.w	r0, r8, r3
 8022fd6:	f858 3003 	ldr.w	r3, [r8, r3]
 8022fda:	9308      	str	r3, [sp, #32]
 8022fdc:	0e1b      	lsrs	r3, r3, #24
 8022fde:	9311      	str	r3, [sp, #68]	; 0x44
 8022fe0:	6843      	ldr	r3, [r0, #4]
 8022fe2:	930d      	str	r3, [sp, #52]	; 0x34
 8022fe4:	0e1b      	lsrs	r3, r3, #24
 8022fe6:	9314      	str	r3, [sp, #80]	; 0x50
 8022fe8:	b289      	uxth	r1, r1
 8022fea:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022fec:	fa1f fc8c 	uxth.w	ip, ip
 8022ff0:	0108      	lsls	r0, r1, #4
 8022ff2:	fb01 f90c 	mul.w	r9, r1, ip
 8022ff6:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8022ffa:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 8022ffe:	eba0 0809 	sub.w	r8, r0, r9
 8023002:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023004:	fa1f f18c 	uxth.w	r1, ip
 8023008:	fa1f f888 	uxth.w	r8, r8
 802300c:	1a5b      	subs	r3, r3, r1
 802300e:	fb08 f000 	mul.w	r0, r8, r0
 8023012:	b29b      	uxth	r3, r3
 8023014:	fb03 000e 	mla	r0, r3, lr, r0
 8023018:	fb01 0004 	mla	r0, r1, r4, r0
 802301c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802301e:	fb09 0004 	mla	r0, r9, r4, r0
 8023022:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023026:	2800      	cmp	r0, #0
 8023028:	f000 80f2 	beq.w	8023210 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802302c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023030:	d01b      	beq.n	802306a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8023032:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8023036:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802303a:	fb0e fa0a 	mul.w	sl, lr, sl
 802303e:	fb0e fe02 	mul.w	lr, lr, r2
 8023042:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8023046:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802304a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802304e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023052:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023056:	4452      	add	r2, sl
 8023058:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802305c:	0a12      	lsrs	r2, r2, #8
 802305e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023062:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023066:	ea42 020c 	orr.w	r2, r2, ip
 802306a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802306c:	2cff      	cmp	r4, #255	; 0xff
 802306e:	d021      	beq.n	80230b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8023070:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023072:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023076:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023078:	fb04 fb0b 	mul.w	fp, r4, fp
 802307c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802307e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023082:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023084:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023088:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802308c:	fb04 fa0a 	mul.w	sl, r4, sl
 8023090:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023094:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023098:	44de      	add	lr, fp
 802309a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802309e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80230a2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80230a6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80230aa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80230ae:	ea4e 040a 	orr.w	r4, lr, sl
 80230b2:	940c      	str	r4, [sp, #48]	; 0x30
 80230b4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80230b6:	2cff      	cmp	r4, #255	; 0xff
 80230b8:	d021      	beq.n	80230fe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 80230ba:	9c08      	ldr	r4, [sp, #32]
 80230bc:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80230c0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80230c2:	fb04 fb0b 	mul.w	fp, r4, fp
 80230c6:	9c08      	ldr	r4, [sp, #32]
 80230c8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80230cc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80230ce:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80230d2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80230d6:	fb04 fa0a 	mul.w	sl, r4, sl
 80230da:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80230de:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80230e2:	44de      	add	lr, fp
 80230e4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80230e8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80230ec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80230f0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80230f4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80230f8:	ea4e 040a 	orr.w	r4, lr, sl
 80230fc:	9408      	str	r4, [sp, #32]
 80230fe:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023100:	2cff      	cmp	r4, #255	; 0xff
 8023102:	d021      	beq.n	8023148 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8023104:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023106:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802310a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802310c:	fb04 fb0b 	mul.w	fp, r4, fp
 8023110:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023112:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023116:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023118:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802311c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023120:	fb04 fa0a 	mul.w	sl, r4, sl
 8023124:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023128:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802312c:	44de      	add	lr, fp
 802312e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023132:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023136:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802313a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802313e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023142:	ea4e 040a 	orr.w	r4, lr, sl
 8023146:	940d      	str	r4, [sp, #52]	; 0x34
 8023148:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802314a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802314e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023152:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023156:	9c08      	ldr	r4, [sp, #32]
 8023158:	fb08 fc0c 	mul.w	ip, r8, ip
 802315c:	fb03 cc0e 	mla	ip, r3, lr, ip
 8023160:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023164:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023166:	fb01 cc0e 	mla	ip, r1, lr, ip
 802316a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802316e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023170:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023174:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8023178:	fb08 f80e 	mul.w	r8, r8, lr
 802317c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023180:	fb03 8202 	mla	r2, r3, r2, r8
 8023184:	9b08      	ldr	r3, [sp, #32]
 8023186:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802318a:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 802318e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023190:	fb01 220a 	mla	r2, r1, sl, r2
 8023194:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8023198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802319a:	fb09 2901 	mla	r9, r9, r1, r2
 802319e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80231a0:	4343      	muls	r3, r0
 80231a2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80231a6:	1c58      	adds	r0, r3, #1
 80231a8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80231ac:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80231b0:	783b      	ldrb	r3, [r7, #0]
 80231b2:	ea4c 0c09 	orr.w	ip, ip, r9
 80231b6:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80231ba:	fa5f f28c 	uxtb.w	r2, ip
 80231be:	b2c0      	uxtb	r0, r0
 80231c0:	fb12 f201 	smulbb	r2, r2, r1
 80231c4:	fb03 2300 	mla	r3, r3, r0, r2
 80231c8:	b29b      	uxth	r3, r3
 80231ca:	1c5a      	adds	r2, r3, #1
 80231cc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80231d0:	787a      	ldrb	r2, [r7, #1]
 80231d2:	fb12 f200 	smulbb	r2, r2, r0
 80231d6:	121b      	asrs	r3, r3, #8
 80231d8:	703b      	strb	r3, [r7, #0]
 80231da:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80231de:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80231e2:	fb03 2301 	mla	r3, r3, r1, r2
 80231e6:	b29b      	uxth	r3, r3
 80231e8:	1c5a      	adds	r2, r3, #1
 80231ea:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80231ee:	121b      	asrs	r3, r3, #8
 80231f0:	707b      	strb	r3, [r7, #1]
 80231f2:	78bb      	ldrb	r3, [r7, #2]
 80231f4:	fb13 f000 	smulbb	r0, r3, r0
 80231f8:	fb0c 0c01 	mla	ip, ip, r1, r0
 80231fc:	fa1f fc8c 	uxth.w	ip, ip
 8023200:	f10c 0301 	add.w	r3, ip, #1
 8023204:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8023208:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802320c:	f887 c002 	strb.w	ip, [r7, #2]
 8023210:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8023212:	3703      	adds	r7, #3
 8023214:	441d      	add	r5, r3
 8023216:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023218:	441e      	add	r6, r3
 802321a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802321c:	3b01      	subs	r3, #1
 802321e:	9318      	str	r3, [sp, #96]	; 0x60
 8023220:	e69f      	b.n	8022f62 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8023222:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8023224:	441d      	add	r5, r3
 8023226:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023228:	441e      	add	r6, r3
 802322a:	9b07      	ldr	r3, [sp, #28]
 802322c:	3b01      	subs	r3, #1
 802322e:	9307      	str	r3, [sp, #28]
 8023230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023232:	3303      	adds	r3, #3
 8023234:	930a      	str	r3, [sp, #40]	; 0x28
 8023236:	e674      	b.n	8022f22 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8023238:	d025      	beq.n	8023286 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 802323a:	9b07      	ldr	r3, [sp, #28]
 802323c:	9831      	ldr	r0, [sp, #196]	; 0xc4
 802323e:	3b01      	subs	r3, #1
 8023240:	fb00 5003 	mla	r0, r0, r3, r5
 8023244:	1400      	asrs	r0, r0, #16
 8023246:	f53f ae89 	bmi.w	8022f5c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802324a:	3901      	subs	r1, #1
 802324c:	4288      	cmp	r0, r1
 802324e:	f6bf ae85 	bge.w	8022f5c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8023252:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8023254:	fb01 6303 	mla	r3, r1, r3, r6
 8023258:	141b      	asrs	r3, r3, #16
 802325a:	f53f ae7f 	bmi.w	8022f5c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802325e:	3a01      	subs	r2, #1
 8023260:	4293      	cmp	r3, r2
 8023262:	f6bf ae7b 	bge.w	8022f5c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8023266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023268:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802326c:	f103 0e03 	add.w	lr, r3, #3
 8023270:	f1bb 0f00 	cmp.w	fp, #0
 8023274:	dc6e      	bgt.n	8023354 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8023276:	9b07      	ldr	r3, [sp, #28]
 8023278:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802327c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802327e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023282:	4423      	add	r3, r4
 8023284:	930a      	str	r3, [sp, #40]	; 0x28
 8023286:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023288:	2b00      	cmp	r3, #0
 802328a:	f340 81ab 	ble.w	80235e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 802328e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023292:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023294:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023298:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802329c:	eef0 6a48 	vmov.f32	s13, s16
 80232a0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80232a4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80232a8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80232ac:	ee16 5a90 	vmov	r5, s13
 80232b0:	eef0 6a68 	vmov.f32	s13, s17
 80232b4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80232b8:	ee16 6a90 	vmov	r6, s13
 80232bc:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80232c0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80232c4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80232c8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80232cc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80232d0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80232d4:	ee18 2a10 	vmov	r2, s16
 80232d8:	eeb0 8a47 	vmov.f32	s16, s14
 80232dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80232e0:	ee18 2a90 	vmov	r2, s17
 80232e4:	9331      	str	r3, [sp, #196]	; 0xc4
 80232e6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80232e8:	eef0 8a67 	vmov.f32	s17, s15
 80232ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80232f0:	9332      	str	r3, [sp, #200]	; 0xc8
 80232f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80232f4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80232f6:	3b01      	subs	r3, #1
 80232f8:	9317      	str	r3, [sp, #92]	; 0x5c
 80232fa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80232fc:	bf08      	it	eq
 80232fe:	4613      	moveq	r3, r2
 8023300:	9307      	str	r3, [sp, #28]
 8023302:	e600      	b.n	8022f06 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8023304:	f1bc 0f00 	cmp.w	ip, #0
 8023308:	f43f ae6e 	beq.w	8022fe8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 802330c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8023310:	9308      	str	r3, [sp, #32]
 8023312:	0e1b      	lsrs	r3, r3, #24
 8023314:	9311      	str	r3, [sp, #68]	; 0x44
 8023316:	e667      	b.n	8022fe8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8023318:	f112 0801 	adds.w	r8, r2, #1
 802331c:	f53f af78 	bmi.w	8023210 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8023320:	45c6      	cmp	lr, r8
 8023322:	f6ff af75 	blt.w	8023210 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8023326:	f110 0801 	adds.w	r8, r0, #1
 802332a:	f53f af71 	bmi.w	8023210 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802332e:	4543      	cmp	r3, r8
 8023330:	f6ff af6e 	blt.w	8023210 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8023334:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8023336:	b21b      	sxth	r3, r3
 8023338:	9201      	str	r2, [sp, #4]
 802333a:	9300      	str	r3, [sp, #0]
 802333c:	fa0f f38e 	sxth.w	r3, lr
 8023340:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023342:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023346:	e9cd c404 	strd	ip, r4, [sp, #16]
 802334a:	4639      	mov	r1, r7
 802334c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802334e:	f7ff fc53 	bl	8022bf8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8023352:	e75d      	b.n	8023210 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8023354:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8023356:	142f      	asrs	r7, r5, #16
 8023358:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802335a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802335e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8023362:	1433      	asrs	r3, r6, #16
 8023364:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023368:	fb02 7303 	mla	r3, r2, r3, r7
 802336c:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8023370:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8023374:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023378:	2900      	cmp	r1, #0
 802337a:	f000 812a 	beq.w	80235d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72a>
 802337e:	687c      	ldr	r4, [r7, #4]
 8023380:	940e      	str	r4, [sp, #56]	; 0x38
 8023382:	0e24      	lsrs	r4, r4, #24
 8023384:	9415      	str	r4, [sp, #84]	; 0x54
 8023386:	b178      	cbz	r0, 80233a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8023388:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 802338c:	3a01      	subs	r2, #1
 802338e:	0092      	lsls	r2, r2, #2
 8023390:	3204      	adds	r2, #4
 8023392:	eb07 0802 	add.w	r8, r7, r2
 8023396:	58ba      	ldr	r2, [r7, r2]
 8023398:	9209      	str	r2, [sp, #36]	; 0x24
 802339a:	0e12      	lsrs	r2, r2, #24
 802339c:	9212      	str	r2, [sp, #72]	; 0x48
 802339e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80233a2:	920f      	str	r2, [sp, #60]	; 0x3c
 80233a4:	0e12      	lsrs	r2, r2, #24
 80233a6:	9216      	str	r2, [sp, #88]	; 0x58
 80233a8:	b289      	uxth	r1, r1
 80233aa:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80233ac:	b280      	uxth	r0, r0
 80233ae:	fb01 f900 	mul.w	r9, r1, r0
 80233b2:	0109      	lsls	r1, r1, #4
 80233b4:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80233b8:	eba1 0809 	sub.w	r8, r1, r9
 80233bc:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80233c0:	9915      	ldr	r1, [sp, #84]	; 0x54
 80233c2:	b280      	uxth	r0, r0
 80233c4:	fa1f f888 	uxth.w	r8, r8
 80233c8:	1a12      	subs	r2, r2, r0
 80233ca:	fb08 f101 	mul.w	r1, r8, r1
 80233ce:	b292      	uxth	r2, r2
 80233d0:	fb02 110c 	mla	r1, r2, ip, r1
 80233d4:	fb00 1104 	mla	r1, r0, r4, r1
 80233d8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80233da:	fb09 1104 	mla	r1, r9, r4, r1
 80233de:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80233e2:	2900      	cmp	r1, #0
 80233e4:	f000 80ec 	beq.w	80235c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 80233e8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80233ec:	d019      	beq.n	8023422 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57a>
 80233ee:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80233f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80233f6:	fb0c fa0a 	mul.w	sl, ip, sl
 80233fa:	fb0c fc03 	mul.w	ip, ip, r3
 80233fe:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023402:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023406:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802340a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802340e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023412:	4453      	add	r3, sl
 8023414:	0a3f      	lsrs	r7, r7, #8
 8023416:	0a1b      	lsrs	r3, r3, #8
 8023418:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802341c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023420:	433b      	orrs	r3, r7
 8023422:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023424:	2cff      	cmp	r4, #255	; 0xff
 8023426:	d020      	beq.n	802346a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c2>
 8023428:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802342a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802342e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023430:	4367      	muls	r7, r4
 8023432:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023434:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023438:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802343c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802343e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023442:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023446:	fb04 fa0a 	mul.w	sl, r4, sl
 802344a:	44bc      	add	ip, r7
 802344c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023450:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023454:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023458:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802345c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023460:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023464:	ea4c 040a 	orr.w	r4, ip, sl
 8023468:	940e      	str	r4, [sp, #56]	; 0x38
 802346a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802346c:	2cff      	cmp	r4, #255	; 0xff
 802346e:	d020      	beq.n	80234b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60a>
 8023470:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023472:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023476:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023478:	4367      	muls	r7, r4
 802347a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802347c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023480:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023484:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023486:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802348a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802348e:	fb04 fa0a 	mul.w	sl, r4, sl
 8023492:	44bc      	add	ip, r7
 8023494:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023498:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802349c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80234a0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80234a4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80234a8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80234ac:	ea4c 040a 	orr.w	r4, ip, sl
 80234b0:	9409      	str	r4, [sp, #36]	; 0x24
 80234b2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80234b4:	2cff      	cmp	r4, #255	; 0xff
 80234b6:	d020      	beq.n	80234fa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x652>
 80234b8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80234ba:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80234be:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80234c0:	4367      	muls	r7, r4
 80234c2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80234c4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80234c8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80234cc:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80234ce:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80234d2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80234d6:	fb04 fa0a 	mul.w	sl, r4, sl
 80234da:	44bc      	add	ip, r7
 80234dc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80234e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80234e4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80234e8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80234ec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80234f0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80234f4:	ea4c 040a 	orr.w	r4, ip, sl
 80234f8:	940f      	str	r4, [sp, #60]	; 0x3c
 80234fa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80234fc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023500:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023504:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023508:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802350a:	fb08 f707 	mul.w	r7, r8, r7
 802350e:	fb02 770c 	mla	r7, r2, ip, r7
 8023512:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023516:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023518:	fb00 770c 	mla	r7, r0, ip, r7
 802351c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023520:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023522:	fb09 770c 	mla	r7, r9, ip, r7
 8023526:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802352a:	fb08 f80c 	mul.w	r8, r8, ip
 802352e:	0a3f      	lsrs	r7, r7, #8
 8023530:	fb02 8303 	mla	r3, r2, r3, r8
 8023534:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023536:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802353a:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802353e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023540:	fb00 330a 	mla	r3, r0, sl, r3
 8023544:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8023548:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802354a:	fb09 3c0c 	mla	ip, r9, ip, r3
 802354e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023550:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023554:	434b      	muls	r3, r1
 8023556:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802355a:	1c59      	adds	r1, r3, #1
 802355c:	ea47 070c 	orr.w	r7, r7, ip
 8023560:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023564:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8023568:	b2fa      	uxtb	r2, r7
 802356a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802356e:	fb12 f200 	smulbb	r2, r2, r0
 8023572:	b2c9      	uxtb	r1, r1
 8023574:	fb03 2301 	mla	r3, r3, r1, r2
 8023578:	b29b      	uxth	r3, r3
 802357a:	1c5a      	adds	r2, r3, #1
 802357c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023580:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8023584:	fb12 f201 	smulbb	r2, r2, r1
 8023588:	121b      	asrs	r3, r3, #8
 802358a:	f80e 3c03 	strb.w	r3, [lr, #-3]
 802358e:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8023592:	0c3f      	lsrs	r7, r7, #16
 8023594:	fb03 2300 	mla	r3, r3, r0, r2
 8023598:	b29b      	uxth	r3, r3
 802359a:	1c5a      	adds	r2, r3, #1
 802359c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80235a0:	121b      	asrs	r3, r3, #8
 80235a2:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80235a6:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80235aa:	fb13 f101 	smulbb	r1, r3, r1
 80235ae:	fb07 1700 	mla	r7, r7, r0, r1
 80235b2:	b2bf      	uxth	r7, r7
 80235b4:	1c79      	adds	r1, r7, #1
 80235b6:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80235ba:	123f      	asrs	r7, r7, #8
 80235bc:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80235c0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80235c2:	f10e 0e03 	add.w	lr, lr, #3
 80235c6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80235ca:	441d      	add	r5, r3
 80235cc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80235ce:	441e      	add	r6, r3
 80235d0:	e64e      	b.n	8023270 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 80235d2:	2800      	cmp	r0, #0
 80235d4:	f43f aee8 	beq.w	80233a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 80235d8:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80235dc:	9209      	str	r2, [sp, #36]	; 0x24
 80235de:	0e12      	lsrs	r2, r2, #24
 80235e0:	9212      	str	r2, [sp, #72]	; 0x48
 80235e2:	e6e1      	b.n	80233a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 80235e4:	b01d      	add	sp, #116	; 0x74
 80235e6:	ecbd 8b08 	vpop	{d8-d11}
 80235ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080235f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80235f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80235f4:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 80235f8:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80235fc:	fb04 5603 	mla	r6, r4, r3, r5
 8023600:	2c00      	cmp	r4, #0
 8023602:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8023606:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 802360a:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 802360e:	db36      	blt.n	802367e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 8023610:	45a6      	cmp	lr, r4
 8023612:	dd34      	ble.n	802367e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 8023614:	2d00      	cmp	r5, #0
 8023616:	db30      	blt.n	802367a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 8023618:	42ab      	cmp	r3, r5
 802361a:	dd2e      	ble.n	802367a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 802361c:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8023620:	1c6e      	adds	r6, r5, #1
 8023622:	d42f      	bmi.n	8023684 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 8023624:	42b3      	cmp	r3, r6
 8023626:	dd2d      	ble.n	8023684 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 8023628:	b370      	cbz	r0, 8023688 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x98>
 802362a:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802362e:	3401      	adds	r4, #1
 8023630:	d42e      	bmi.n	8023690 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 8023632:	45a6      	cmp	lr, r4
 8023634:	dd2c      	ble.n	8023690 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 8023636:	b377      	cbz	r7, 8023696 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa6>
 8023638:	2d00      	cmp	r5, #0
 802363a:	db27      	blt.n	802368c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 802363c:	42ab      	cmp	r3, r5
 802363e:	dd25      	ble.n	802368c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 8023640:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8023644:	3501      	adds	r5, #1
 8023646:	d429      	bmi.n	802369c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 8023648:	42ab      	cmp	r3, r5
 802364a:	dd27      	ble.n	802369c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 802364c:	b340      	cbz	r0, 80236a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb0>
 802364e:	3301      	adds	r3, #1
 8023650:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8023654:	280f      	cmp	r0, #15
 8023656:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802365a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802365e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023662:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8023666:	d801      	bhi.n	802366c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7c>
 8023668:	2f0f      	cmp	r7, #15
 802366a:	d91b      	bls.n	80236a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb4>
 802366c:	4b7e      	ldr	r3, [pc, #504]	; (8023868 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x278>)
 802366e:	f240 1157 	movw	r1, #343	; 0x157
 8023672:	4a7e      	ldr	r2, [pc, #504]	; (802386c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x27c>)
 8023674:	487e      	ldr	r0, [pc, #504]	; (8023870 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x280>)
 8023676:	f003 f9a3 	bl	80269c0 <__assert_func>
 802367a:	2200      	movs	r2, #0
 802367c:	e7d0      	b.n	8023620 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x30>
 802367e:	2600      	movs	r6, #0
 8023680:	4632      	mov	r2, r6
 8023682:	e7d4      	b.n	802362e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 8023684:	2600      	movs	r6, #0
 8023686:	e7d2      	b.n	802362e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 8023688:	4606      	mov	r6, r0
 802368a:	e7d0      	b.n	802362e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 802368c:	2400      	movs	r4, #0
 802368e:	e7d9      	b.n	8023644 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x54>
 8023690:	2300      	movs	r3, #0
 8023692:	461c      	mov	r4, r3
 8023694:	e7de      	b.n	8023654 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8023696:	463b      	mov	r3, r7
 8023698:	463c      	mov	r4, r7
 802369a:	e7db      	b.n	8023654 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 802369c:	2300      	movs	r3, #0
 802369e:	e7d9      	b.n	8023654 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 80236a0:	4603      	mov	r3, r0
 80236a2:	e7d7      	b.n	8023654 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 80236a4:	b280      	uxth	r0, r0
 80236a6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80236aa:	b2bf      	uxth	r7, r7
 80236ac:	fb00 fe07 	mul.w	lr, r0, r7
 80236b0:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80236b4:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80236b8:	eba0 0c0e 	sub.w	ip, r0, lr
 80236bc:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80236c0:	b2bf      	uxth	r7, r7
 80236c2:	fa1f fc8c 	uxth.w	ip, ip
 80236c6:	eba0 0507 	sub.w	r5, r0, r7
 80236ca:	fb0c f00a 	mul.w	r0, ip, sl
 80236ce:	b2ad      	uxth	r5, r5
 80236d0:	fb05 000b 	mla	r0, r5, fp, r0
 80236d4:	fb07 0009 	mla	r0, r7, r9, r0
 80236d8:	fb0e 0008 	mla	r0, lr, r8, r0
 80236dc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80236e0:	9001      	str	r0, [sp, #4]
 80236e2:	d018      	beq.n	8023716 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x126>
 80236e4:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80236e8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80236ec:	fb0b f000 	mul.w	r0, fp, r0
 80236f0:	fb0b fb02 	mul.w	fp, fp, r2
 80236f4:	0a02      	lsrs	r2, r0, #8
 80236f6:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80236fa:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80236fe:	4402      	add	r2, r0
 8023700:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8023704:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8023708:	0a12      	lsrs	r2, r2, #8
 802370a:	0a00      	lsrs	r0, r0, #8
 802370c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023710:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023714:	4302      	orrs	r2, r0
 8023716:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802371a:	d01a      	beq.n	8023752 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x162>
 802371c:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8023720:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023724:	fb0a f000 	mul.w	r0, sl, r0
 8023728:	fb0a fa06 	mul.w	sl, sl, r6
 802372c:	0a06      	lsrs	r6, r0, #8
 802372e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8023732:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023736:	4406      	add	r6, r0
 8023738:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 802373c:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8023740:	0a36      	lsrs	r6, r6, #8
 8023742:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023746:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802374a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802374e:	ea46 060a 	orr.w	r6, r6, sl
 8023752:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023756:	d01b      	beq.n	8023790 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1a0>
 8023758:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802375c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023760:	fb09 fa0a 	mul.w	sl, r9, sl
 8023764:	fb09 f004 	mul.w	r0, r9, r4
 8023768:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802376c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023770:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8023774:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023778:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 802377c:	4454      	add	r4, sl
 802377e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023782:	0a24      	lsrs	r4, r4, #8
 8023784:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023788:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802378c:	ea44 0409 	orr.w	r4, r4, r9
 8023790:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023794:	d01b      	beq.n	80237ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1de>
 8023796:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 802379a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802379e:	fb08 f909 	mul.w	r9, r8, r9
 80237a2:	fb08 f003 	mul.w	r0, r8, r3
 80237a6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80237aa:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80237ae:	f500 7880 	add.w	r8, r0, #256	; 0x100
 80237b2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80237b6:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 80237ba:	444b      	add	r3, r9
 80237bc:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80237c0:	0a1b      	lsrs	r3, r3, #8
 80237c2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80237c6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80237ca:	ea43 0308 	orr.w	r3, r3, r8
 80237ce:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80237d2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80237d6:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 80237da:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80237de:	fb0c f000 	mul.w	r0, ip, r0
 80237e2:	fb0c f606 	mul.w	r6, ip, r6
 80237e6:	fb05 0808 	mla	r8, r5, r8, r0
 80237ea:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80237ee:	fb05 6502 	mla	r5, r5, r2, r6
 80237f2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80237f6:	fb07 8800 	mla	r8, r7, r0, r8
 80237fa:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 80237fe:	fb07 5704 	mla	r7, r7, r4, r5
 8023802:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023806:	fb0e 8000 	mla	r0, lr, r0, r8
 802380a:	780a      	ldrb	r2, [r1, #0]
 802380c:	fb0e 7e03 	mla	lr, lr, r3, r7
 8023810:	9b01      	ldr	r3, [sp, #4]
 8023812:	0a00      	lsrs	r0, r0, #8
 8023814:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023818:	43db      	mvns	r3, r3
 802381a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802381e:	b2db      	uxtb	r3, r3
 8023820:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023824:	ea40 0e0e 	orr.w	lr, r0, lr
 8023828:	fb02 f003 	mul.w	r0, r2, r3
 802382c:	1c42      	adds	r2, r0, #1
 802382e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8023832:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8023836:	700a      	strb	r2, [r1, #0]
 8023838:	784a      	ldrb	r2, [r1, #1]
 802383a:	435a      	muls	r2, r3
 802383c:	1c50      	adds	r0, r2, #1
 802383e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8023842:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8023846:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 802384a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802384e:	704a      	strb	r2, [r1, #1]
 8023850:	788a      	ldrb	r2, [r1, #2]
 8023852:	4353      	muls	r3, r2
 8023854:	1c5a      	adds	r2, r3, #1
 8023856:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802385a:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 802385e:	f881 e002 	strb.w	lr, [r1, #2]
 8023862:	b003      	add	sp, #12
 8023864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023868:	0802eaaf 	.word	0x0802eaaf
 802386c:	0802f017 	.word	0x0802f017
 8023870:	0802eb78 	.word	0x0802eb78

08023874 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023878:	ed2d 8b08 	vpush	{d8-d11}
 802387c:	b099      	sub	sp, #100	; 0x64
 802387e:	eeb0 aa40 	vmov.f32	s20, s0
 8023882:	eef0 9a60 	vmov.f32	s19, s1
 8023886:	9017      	str	r0, [sp, #92]	; 0x5c
 8023888:	eeb0 9a41 	vmov.f32	s18, s2
 802388c:	9306      	str	r3, [sp, #24]
 802388e:	eeb0 8a62 	vmov.f32	s16, s5
 8023892:	eef0 8a43 	vmov.f32	s17, s6
 8023896:	eef0 ba44 	vmov.f32	s23, s8
 802389a:	eeb0 ba64 	vmov.f32	s22, s9
 802389e:	eef0 aa45 	vmov.f32	s21, s10
 80238a2:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 80238a6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80238a8:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 80238ac:	6850      	ldr	r0, [r2, #4]
 80238ae:	6812      	ldr	r2, [r2, #0]
 80238b0:	fb00 1303 	mla	r3, r0, r3, r1
 80238b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80238b8:	18d3      	adds	r3, r2, r3
 80238ba:	9309      	str	r3, [sp, #36]	; 0x24
 80238bc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80238be:	e9dd 562b 	ldrd	r5, r6, [sp, #172]	; 0xac
 80238c2:	681b      	ldr	r3, [r3, #0]
 80238c4:	930e      	str	r3, [sp, #56]	; 0x38
 80238c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80238c8:	2b00      	cmp	r3, #0
 80238ca:	dc03      	bgt.n	80238d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80238cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80238ce:	2b00      	cmp	r3, #0
 80238d0:	f340 8360 	ble.w	8023f94 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 80238d4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80238d6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80238da:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80238de:	1e48      	subs	r0, r1, #1
 80238e0:	1e57      	subs	r7, r2, #1
 80238e2:	9b06      	ldr	r3, [sp, #24]
 80238e4:	2b00      	cmp	r3, #0
 80238e6:	f340 817b 	ble.w	8023be0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80238ea:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80238ee:	ea4f 4326 	mov.w	r3, r6, asr #16
 80238f2:	d406      	bmi.n	8023902 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80238f4:	4584      	cmp	ip, r0
 80238f6:	da04      	bge.n	8023902 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80238f8:	2b00      	cmp	r3, #0
 80238fa:	db02      	blt.n	8023902 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80238fc:	42bb      	cmp	r3, r7
 80238fe:	f2c0 8170 	blt.w	8023be2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8023902:	f11c 0c01 	adds.w	ip, ip, #1
 8023906:	f100 8160 	bmi.w	8023bca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802390a:	4561      	cmp	r1, ip
 802390c:	f2c0 815d 	blt.w	8023bca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8023910:	3301      	adds	r3, #1
 8023912:	f100 815a 	bmi.w	8023bca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8023916:	429a      	cmp	r2, r3
 8023918:	f2c0 8157 	blt.w	8023bca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802391c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8023920:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8023922:	f1b8 0f00 	cmp.w	r8, #0
 8023926:	f340 8179 	ble.w	8023c1c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 802392a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 802392c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8023930:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023932:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023936:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802393a:	142a      	asrs	r2, r5, #16
 802393c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023940:	689b      	ldr	r3, [r3, #8]
 8023942:	f100 81be 	bmi.w	8023cc2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8023946:	f103 39ff 	add.w	r9, r3, #4294967295
 802394a:	454a      	cmp	r2, r9
 802394c:	f280 81b9 	bge.w	8023cc2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8023950:	f1bc 0f00 	cmp.w	ip, #0
 8023954:	f2c0 81b5 	blt.w	8023cc2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8023958:	f10e 39ff 	add.w	r9, lr, #4294967295
 802395c:	45cc      	cmp	ip, r9
 802395e:	f280 81b0 	bge.w	8023cc2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8023962:	b21b      	sxth	r3, r3
 8023964:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023966:	fb0c 2203 	mla	r2, ip, r3, r2
 802396a:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 802396e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8023972:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8023976:	2900      	cmp	r1, #0
 8023978:	f000 8197 	beq.w	8023caa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x436>
 802397c:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8023980:	940a      	str	r4, [sp, #40]	; 0x28
 8023982:	0e24      	lsrs	r4, r4, #24
 8023984:	9411      	str	r4, [sp, #68]	; 0x44
 8023986:	b180      	cbz	r0, 80239aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8023988:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802398c:	3b01      	subs	r3, #1
 802398e:	009b      	lsls	r3, r3, #2
 8023990:	3304      	adds	r3, #4
 8023992:	eb09 0c03 	add.w	ip, r9, r3
 8023996:	f859 3003 	ldr.w	r3, [r9, r3]
 802399a:	9307      	str	r3, [sp, #28]
 802399c:	0e1b      	lsrs	r3, r3, #24
 802399e:	930f      	str	r3, [sp, #60]	; 0x3c
 80239a0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80239a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80239a6:	0e1b      	lsrs	r3, r3, #24
 80239a8:	9312      	str	r3, [sp, #72]	; 0x48
 80239aa:	b289      	uxth	r1, r1
 80239ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80239ae:	b280      	uxth	r0, r0
 80239b0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80239b2:	fb01 fa00 	mul.w	sl, r1, r0
 80239b6:	0109      	lsls	r1, r1, #4
 80239b8:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80239bc:	eba1 090a 	sub.w	r9, r1, sl
 80239c0:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80239c4:	b280      	uxth	r0, r0
 80239c6:	fa1f f989 	uxth.w	r9, r9
 80239ca:	1a09      	subs	r1, r1, r0
 80239cc:	fb09 f303 	mul.w	r3, r9, r3
 80239d0:	b289      	uxth	r1, r1
 80239d2:	fb01 330e 	mla	r3, r1, lr, r3
 80239d6:	fb00 3304 	mla	r3, r0, r4, r3
 80239da:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80239dc:	fb0a 3304 	mla	r3, sl, r4, r3
 80239e0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80239e4:	2b00      	cmp	r3, #0
 80239e6:	f000 80e8 	beq.w	8023bba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80239ea:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80239ee:	d01b      	beq.n	8023a28 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80239f0:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 80239f4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80239f8:	fb0e fb0b 	mul.w	fp, lr, fp
 80239fc:	fb0e fe02 	mul.w	lr, lr, r2
 8023a00:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8023a04:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023a08:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8023a0c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023a10:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023a14:	445a      	add	r2, fp
 8023a16:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023a1a:	0a12      	lsrs	r2, r2, #8
 8023a1c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023a20:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023a24:	ea42 020c 	orr.w	r2, r2, ip
 8023a28:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023a2a:	2cff      	cmp	r4, #255	; 0xff
 8023a2c:	d021      	beq.n	8023a72 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8023a2e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023a30:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023a34:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023a36:	fb04 fc0c 	mul.w	ip, r4, ip
 8023a3a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023a3c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023a40:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8023a44:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023a46:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023a4a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023a4e:	fb04 fb0b 	mul.w	fp, r4, fp
 8023a52:	44e6      	add	lr, ip
 8023a54:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8023a58:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023a5c:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8023a60:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023a64:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023a68:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8023a6c:	ea4e 040b 	orr.w	r4, lr, fp
 8023a70:	940a      	str	r4, [sp, #40]	; 0x28
 8023a72:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023a74:	2cff      	cmp	r4, #255	; 0xff
 8023a76:	d021      	beq.n	8023abc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8023a78:	9c07      	ldr	r4, [sp, #28]
 8023a7a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023a7e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023a80:	fb04 fc0c 	mul.w	ip, r4, ip
 8023a84:	9c07      	ldr	r4, [sp, #28]
 8023a86:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023a8a:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8023a8e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023a90:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023a94:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023a98:	fb04 fb0b 	mul.w	fp, r4, fp
 8023a9c:	44e6      	add	lr, ip
 8023a9e:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8023aa2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023aa6:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8023aaa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023aae:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023ab2:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8023ab6:	ea4e 040b 	orr.w	r4, lr, fp
 8023aba:	9407      	str	r4, [sp, #28]
 8023abc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023abe:	2cff      	cmp	r4, #255	; 0xff
 8023ac0:	d021      	beq.n	8023b06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8023ac2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023ac4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023ac8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023aca:	fb04 fc0c 	mul.w	ip, r4, ip
 8023ace:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023ad0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023ad4:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8023ad8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023ada:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023ade:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023ae2:	fb04 fb0b 	mul.w	fp, r4, fp
 8023ae6:	44e6      	add	lr, ip
 8023ae8:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8023aec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023af0:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8023af4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023af8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023afc:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8023b00:	ea4e 040b 	orr.w	r4, lr, fp
 8023b04:	940b      	str	r4, [sp, #44]	; 0x2c
 8023b06:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023b08:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8023b0c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023b10:	2bff      	cmp	r3, #255	; 0xff
 8023b12:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023b16:	9c07      	ldr	r4, [sp, #28]
 8023b18:	fb09 fc0c 	mul.w	ip, r9, ip
 8023b1c:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023b20:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023b24:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023b26:	fb00 cc0e 	mla	ip, r0, lr, ip
 8023b2a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023b2e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023b30:	fb0a cc0e 	mla	ip, sl, lr, ip
 8023b34:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8023b38:	fb09 f90e 	mul.w	r9, r9, lr
 8023b3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023b40:	fb01 9202 	mla	r2, r1, r2, r9
 8023b44:	9907      	ldr	r1, [sp, #28]
 8023b46:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023b4a:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 8023b4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023b50:	fb00 220b 	mla	r2, r0, fp, r2
 8023b54:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8023b58:	fb0a 2a00 	mla	sl, sl, r0, r2
 8023b5c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023b60:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023b64:	ea4c 0c0a 	orr.w	ip, ip, sl
 8023b68:	fa5f f08c 	uxtb.w	r0, ip
 8023b6c:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8023b70:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8023b74:	f000 80a2 	beq.w	8023cbc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8023b78:	43db      	mvns	r3, r3
 8023b7a:	783a      	ldrb	r2, [r7, #0]
 8023b7c:	f897 a002 	ldrb.w	sl, [r7, #2]
 8023b80:	b2db      	uxtb	r3, r3
 8023b82:	fb02 fe03 	mul.w	lr, r2, r3
 8023b86:	fb0a fa03 	mul.w	sl, sl, r3
 8023b8a:	f10e 0201 	add.w	r2, lr, #1
 8023b8e:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8023b92:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8023b96:	703a      	strb	r2, [r7, #0]
 8023b98:	787a      	ldrb	r2, [r7, #1]
 8023b9a:	fb02 f003 	mul.w	r0, r2, r3
 8023b9e:	f10a 0301 	add.w	r3, sl, #1
 8023ba2:	1c42      	adds	r2, r0, #1
 8023ba4:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8023ba8:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8023bac:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8023bb0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023bb4:	707a      	strb	r2, [r7, #1]
 8023bb6:	f887 c002 	strb.w	ip, [r7, #2]
 8023bba:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023bbc:	3703      	adds	r7, #3
 8023bbe:	f108 38ff 	add.w	r8, r8, #4294967295
 8023bc2:	441d      	add	r5, r3
 8023bc4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023bc6:	441e      	add	r6, r3
 8023bc8:	e6ab      	b.n	8023922 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8023bca:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023bcc:	441d      	add	r5, r3
 8023bce:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023bd0:	441e      	add	r6, r3
 8023bd2:	9b06      	ldr	r3, [sp, #24]
 8023bd4:	3b01      	subs	r3, #1
 8023bd6:	9306      	str	r3, [sp, #24]
 8023bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023bda:	3303      	adds	r3, #3
 8023bdc:	9309      	str	r3, [sp, #36]	; 0x24
 8023bde:	e680      	b.n	80238e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023be0:	d024      	beq.n	8023c2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 8023be2:	9b06      	ldr	r3, [sp, #24]
 8023be4:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8023be6:	3b01      	subs	r3, #1
 8023be8:	fb00 5003 	mla	r0, r0, r3, r5
 8023bec:	1400      	asrs	r0, r0, #16
 8023bee:	f53f ae95 	bmi.w	802391c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8023bf2:	3901      	subs	r1, #1
 8023bf4:	4288      	cmp	r0, r1
 8023bf6:	f6bf ae91 	bge.w	802391c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8023bfa:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8023bfc:	fb01 6303 	mla	r3, r1, r3, r6
 8023c00:	141b      	asrs	r3, r3, #16
 8023c02:	f53f ae8b 	bmi.w	802391c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8023c06:	3a01      	subs	r2, #1
 8023c08:	4293      	cmp	r3, r2
 8023c0a:	f6bf ae87 	bge.w	802391c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8023c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023c10:	f8dd b018 	ldr.w	fp, [sp, #24]
 8023c14:	1cdf      	adds	r7, r3, #3
 8023c16:	f1bb 0f00 	cmp.w	fp, #0
 8023c1a:	dc6e      	bgt.n	8023cfa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8023c1c:	9b06      	ldr	r3, [sp, #24]
 8023c1e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023c24:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023c28:	4423      	add	r3, r4
 8023c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8023c2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023c2e:	2b00      	cmp	r3, #0
 8023c30:	f340 81b0 	ble.w	8023f94 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 8023c34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023c38:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023c3a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023c3e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023c42:	eef0 6a48 	vmov.f32	s13, s16
 8023c46:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023c4a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023c4e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023c52:	ee16 5a90 	vmov	r5, s13
 8023c56:	eef0 6a68 	vmov.f32	s13, s17
 8023c5a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023c5e:	ee16 6a90 	vmov	r6, s13
 8023c62:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023c66:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023c6a:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023c6e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023c72:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023c76:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023c7a:	ee18 2a10 	vmov	r2, s16
 8023c7e:	eeb0 8a47 	vmov.f32	s16, s14
 8023c82:	fb92 f3f3 	sdiv	r3, r2, r3
 8023c86:	ee18 2a90 	vmov	r2, s17
 8023c8a:	932d      	str	r3, [sp, #180]	; 0xb4
 8023c8c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023c8e:	eef0 8a67 	vmov.f32	s17, s15
 8023c92:	fb92 f3f3 	sdiv	r3, r2, r3
 8023c96:	932e      	str	r3, [sp, #184]	; 0xb8
 8023c98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023c9a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8023c9c:	3b01      	subs	r3, #1
 8023c9e:	9315      	str	r3, [sp, #84]	; 0x54
 8023ca0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023ca2:	bf08      	it	eq
 8023ca4:	4613      	moveq	r3, r2
 8023ca6:	9306      	str	r3, [sp, #24]
 8023ca8:	e60d      	b.n	80238c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8023caa:	2800      	cmp	r0, #0
 8023cac:	f43f ae7d 	beq.w	80239aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8023cb0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8023cb4:	9307      	str	r3, [sp, #28]
 8023cb6:	0e1b      	lsrs	r3, r3, #24
 8023cb8:	930f      	str	r3, [sp, #60]	; 0x3c
 8023cba:	e676      	b.n	80239aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8023cbc:	7038      	strb	r0, [r7, #0]
 8023cbe:	7079      	strb	r1, [r7, #1]
 8023cc0:	e779      	b.n	8023bb6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8023cc2:	f112 0901 	adds.w	r9, r2, #1
 8023cc6:	f53f af78 	bmi.w	8023bba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8023cca:	454b      	cmp	r3, r9
 8023ccc:	f6ff af75 	blt.w	8023bba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8023cd0:	f11c 0901 	adds.w	r9, ip, #1
 8023cd4:	f53f af71 	bmi.w	8023bba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8023cd8:	45ce      	cmp	lr, r9
 8023cda:	f6ff af6e 	blt.w	8023bba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8023cde:	b21b      	sxth	r3, r3
 8023ce0:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8023ce4:	fa0f f28e 	sxth.w	r2, lr
 8023ce8:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8023cec:	9200      	str	r2, [sp, #0]
 8023cee:	4639      	mov	r1, r7
 8023cf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023cf2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8023cf4:	f7ff fc7c 	bl	80235f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8023cf8:	e75f      	b.n	8023bba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8023cfa:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023cfc:	1429      	asrs	r1, r5, #16
 8023cfe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023d00:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8023d04:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8023d08:	1433      	asrs	r3, r6, #16
 8023d0a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023d0e:	fb0c 1303 	mla	r3, ip, r3, r1
 8023d12:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023d14:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8023d18:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8023d1c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8023d20:	2a00      	cmp	r2, #0
 8023d22:	f000 8129 	beq.w	8023f78 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8023d26:	684c      	ldr	r4, [r1, #4]
 8023d28:	940c      	str	r4, [sp, #48]	; 0x30
 8023d2a:	0e24      	lsrs	r4, r4, #24
 8023d2c:	9413      	str	r4, [sp, #76]	; 0x4c
 8023d2e:	b198      	cbz	r0, 8023d58 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8023d30:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 8023d34:	f10c 3cff 	add.w	ip, ip, #4294967295
 8023d38:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8023d3c:	f10c 0c04 	add.w	ip, ip, #4
 8023d40:	eb01 080c 	add.w	r8, r1, ip
 8023d44:	f851 100c 	ldr.w	r1, [r1, ip]
 8023d48:	9108      	str	r1, [sp, #32]
 8023d4a:	0e09      	lsrs	r1, r1, #24
 8023d4c:	9110      	str	r1, [sp, #64]	; 0x40
 8023d4e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8023d52:	910d      	str	r1, [sp, #52]	; 0x34
 8023d54:	0e09      	lsrs	r1, r1, #24
 8023d56:	9114      	str	r1, [sp, #80]	; 0x50
 8023d58:	b292      	uxth	r2, r2
 8023d5a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023d5c:	b280      	uxth	r0, r0
 8023d5e:	fb02 f900 	mul.w	r9, r2, r0
 8023d62:	0112      	lsls	r2, r2, #4
 8023d64:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023d68:	eba2 0809 	sub.w	r8, r2, r9
 8023d6c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8023d70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023d72:	b280      	uxth	r0, r0
 8023d74:	fa1f f888 	uxth.w	r8, r8
 8023d78:	1a09      	subs	r1, r1, r0
 8023d7a:	fb08 f202 	mul.w	r2, r8, r2
 8023d7e:	b289      	uxth	r1, r1
 8023d80:	fb01 220e 	mla	r2, r1, lr, r2
 8023d84:	fb00 2204 	mla	r2, r0, r4, r2
 8023d88:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023d8a:	fb09 2204 	mla	r2, r9, r4, r2
 8023d8e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023d92:	2a00      	cmp	r2, #0
 8023d94:	f000 80e8 	beq.w	8023f68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8023d98:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023d9c:	d01b      	beq.n	8023dd6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x562>
 8023d9e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023da2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023da6:	fb0e fa0a 	mul.w	sl, lr, sl
 8023daa:	fb0e fe03 	mul.w	lr, lr, r3
 8023dae:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023db2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023db6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8023dba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023dbe:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023dc2:	4453      	add	r3, sl
 8023dc4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023dc8:	0a1b      	lsrs	r3, r3, #8
 8023dca:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023dce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023dd2:	ea43 030c 	orr.w	r3, r3, ip
 8023dd6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023dd8:	2cff      	cmp	r4, #255	; 0xff
 8023dda:	d021      	beq.n	8023e20 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ac>
 8023ddc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023dde:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023de2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023de4:	fb04 fc0c 	mul.w	ip, r4, ip
 8023de8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023dea:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023dee:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023df2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023df4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023df8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023dfc:	fb04 fa0a 	mul.w	sl, r4, sl
 8023e00:	44e6      	add	lr, ip
 8023e02:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023e06:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023e0a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023e0e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023e12:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023e16:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023e1a:	ea4e 040a 	orr.w	r4, lr, sl
 8023e1e:	940c      	str	r4, [sp, #48]	; 0x30
 8023e20:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023e22:	2cff      	cmp	r4, #255	; 0xff
 8023e24:	d021      	beq.n	8023e6a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 8023e26:	9c08      	ldr	r4, [sp, #32]
 8023e28:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023e2c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023e2e:	fb04 fc0c 	mul.w	ip, r4, ip
 8023e32:	9c08      	ldr	r4, [sp, #32]
 8023e34:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8023e38:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023e3a:	fb04 fa0e 	mul.w	sl, r4, lr
 8023e3e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023e42:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023e46:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023e4a:	44e6      	add	lr, ip
 8023e4c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023e50:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023e54:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023e58:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023e5c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023e60:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023e64:	ea4e 040a 	orr.w	r4, lr, sl
 8023e68:	9408      	str	r4, [sp, #32]
 8023e6a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023e6c:	2cff      	cmp	r4, #255	; 0xff
 8023e6e:	d021      	beq.n	8023eb4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x640>
 8023e70:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023e72:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023e76:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023e78:	fb04 fc0c 	mul.w	ip, r4, ip
 8023e7c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023e7e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023e82:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023e86:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023e88:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023e8c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023e90:	fb04 fa0a 	mul.w	sl, r4, sl
 8023e94:	44e6      	add	lr, ip
 8023e96:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023e9a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023e9e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023ea2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023ea6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023eaa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023eae:	ea4e 040a 	orr.w	r4, lr, sl
 8023eb2:	940d      	str	r4, [sp, #52]	; 0x34
 8023eb4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023eb6:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8023eba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023ebe:	2aff      	cmp	r2, #255	; 0xff
 8023ec0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023ec4:	9c08      	ldr	r4, [sp, #32]
 8023ec6:	fb08 fc0c 	mul.w	ip, r8, ip
 8023eca:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023ece:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023ed2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023ed4:	fb00 cc0e 	mla	ip, r0, lr, ip
 8023ed8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023edc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023ede:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023ee2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8023ee6:	fb08 f80e 	mul.w	r8, r8, lr
 8023eea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023eee:	fb01 8303 	mla	r3, r1, r3, r8
 8023ef2:	9908      	ldr	r1, [sp, #32]
 8023ef4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023ef8:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8023efc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8023efe:	fb00 330a 	mla	r3, r0, sl, r3
 8023f02:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8023f06:	fb09 3e0e 	mla	lr, r9, lr, r3
 8023f0a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023f0e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023f12:	ea4c 0c0e 	orr.w	ip, ip, lr
 8023f16:	fa5f f08c 	uxtb.w	r0, ip
 8023f1a:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8023f1e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8023f22:	d032      	beq.n	8023f8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x716>
 8023f24:	43d2      	mvns	r2, r2
 8023f26:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 8023f2a:	b2d2      	uxtb	r2, r2
 8023f2c:	fb0e fe02 	mul.w	lr, lr, r2
 8023f30:	f10e 0301 	add.w	r3, lr, #1
 8023f34:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8023f38:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8023f3c:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8023f40:	4350      	muls	r0, r2
 8023f42:	f807 3c03 	strb.w	r3, [r7, #-3]
 8023f46:	1c43      	adds	r3, r0, #1
 8023f48:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8023f4c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023f50:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8023f54:	4353      	muls	r3, r2
 8023f56:	f807 1c02 	strb.w	r1, [r7, #-2]
 8023f5a:	1c5a      	adds	r2, r3, #1
 8023f5c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023f60:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8023f64:	f807 cc01 	strb.w	ip, [r7, #-1]
 8023f68:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023f6a:	3703      	adds	r7, #3
 8023f6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023f70:	441d      	add	r5, r3
 8023f72:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023f74:	441e      	add	r6, r3
 8023f76:	e64e      	b.n	8023c16 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 8023f78:	2800      	cmp	r0, #0
 8023f7a:	f43f aeed 	beq.w	8023d58 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8023f7e:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8023f82:	9108      	str	r1, [sp, #32]
 8023f84:	0e09      	lsrs	r1, r1, #24
 8023f86:	9110      	str	r1, [sp, #64]	; 0x40
 8023f88:	e6e6      	b.n	8023d58 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8023f8a:	f807 0c03 	strb.w	r0, [r7, #-3]
 8023f8e:	f807 1c02 	strb.w	r1, [r7, #-2]
 8023f92:	e7e7      	b.n	8023f64 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f0>
 8023f94:	b019      	add	sp, #100	; 0x64
 8023f96:	ecbd 8b08 	vpop	{d8-d11}
 8023f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08023fa0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8023fa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023fa4:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8023fa8:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8023fac:	2800      	cmp	r0, #0
 8023fae:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8023fb2:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8023fb6:	fb0c 0e03 	mla	lr, ip, r3, r0
 8023fba:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8023fbe:	db6b      	blt.n	8024098 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8023fc0:	4580      	cmp	r8, r0
 8023fc2:	dd69      	ble.n	8024098 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8023fc4:	f1bc 0f00 	cmp.w	ip, #0
 8023fc8:	db66      	blt.n	8024098 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8023fca:	45e1      	cmp	r9, ip
 8023fcc:	dd64      	ble.n	8024098 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8023fce:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8023fd2:	f01e 0f01 	tst.w	lr, #1
 8023fd6:	5d16      	ldrb	r6, [r2, r4]
 8023fd8:	bf0c      	ite	eq
 8023fda:	f006 060f 	andeq.w	r6, r6, #15
 8023fde:	1136      	asrne	r6, r6, #4
 8023fe0:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8023fe4:	b2f6      	uxtb	r6, r6
 8023fe6:	f110 0a01 	adds.w	sl, r0, #1
 8023fea:	d457      	bmi.n	802409c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8023fec:	45d0      	cmp	r8, sl
 8023fee:	dd55      	ble.n	802409c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8023ff0:	f1bc 0f00 	cmp.w	ip, #0
 8023ff4:	db52      	blt.n	802409c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8023ff6:	45e1      	cmp	r9, ip
 8023ff8:	dd50      	ble.n	802409c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8023ffa:	2f00      	cmp	r7, #0
 8023ffc:	f000 80ac 	beq.w	8024158 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8024000:	f10e 0b01 	add.w	fp, lr, #1
 8024004:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8024008:	f01b 0f01 	tst.w	fp, #1
 802400c:	5d14      	ldrb	r4, [r2, r4]
 802400e:	bf0c      	ite	eq
 8024010:	f004 040f 	andeq.w	r4, r4, #15
 8024014:	1124      	asrne	r4, r4, #4
 8024016:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802401a:	b2e4      	uxtb	r4, r4
 802401c:	2d00      	cmp	r5, #0
 802401e:	f000 8096 	beq.w	802414e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8024022:	2800      	cmp	r0, #0
 8024024:	f10c 0c01 	add.w	ip, ip, #1
 8024028:	db3c      	blt.n	80240a4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 802402a:	4580      	cmp	r8, r0
 802402c:	dd3a      	ble.n	80240a4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 802402e:	f1bc 0f00 	cmp.w	ip, #0
 8024032:	db37      	blt.n	80240a4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8024034:	45e1      	cmp	r9, ip
 8024036:	dd35      	ble.n	80240a4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8024038:	eb03 0b0e 	add.w	fp, r3, lr
 802403c:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8024040:	f01b 0f01 	tst.w	fp, #1
 8024044:	5c10      	ldrb	r0, [r2, r0]
 8024046:	bf0c      	ite	eq
 8024048:	f000 000f 	andeq.w	r0, r0, #15
 802404c:	1100      	asrne	r0, r0, #4
 802404e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024052:	b2c0      	uxtb	r0, r0
 8024054:	f1ba 0f00 	cmp.w	sl, #0
 8024058:	db26      	blt.n	80240a8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 802405a:	45d0      	cmp	r8, sl
 802405c:	dd24      	ble.n	80240a8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 802405e:	f1bc 0f00 	cmp.w	ip, #0
 8024062:	db21      	blt.n	80240a8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8024064:	45e1      	cmp	r9, ip
 8024066:	dd1f      	ble.n	80240a8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8024068:	b307      	cbz	r7, 80240ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 802406a:	3301      	adds	r3, #1
 802406c:	449e      	add	lr, r3
 802406e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8024072:	f01e 0f01 	tst.w	lr, #1
 8024076:	5cd3      	ldrb	r3, [r2, r3]
 8024078:	bf0c      	ite	eq
 802407a:	f003 030f 	andeq.w	r3, r3, #15
 802407e:	111b      	asrne	r3, r3, #4
 8024080:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024084:	b2db      	uxtb	r3, r3
 8024086:	2f0f      	cmp	r7, #15
 8024088:	d911      	bls.n	80240ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 802408a:	4b35      	ldr	r3, [pc, #212]	; (8024160 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 802408c:	f240 1157 	movw	r1, #343	; 0x157
 8024090:	4a34      	ldr	r2, [pc, #208]	; (8024164 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8024092:	4835      	ldr	r0, [pc, #212]	; (8024168 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8024094:	f002 fc94 	bl	80269c0 <__assert_func>
 8024098:	2600      	movs	r6, #0
 802409a:	e7a4      	b.n	8023fe6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 802409c:	2400      	movs	r4, #0
 802409e:	e7bd      	b.n	802401c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 80240a0:	463c      	mov	r4, r7
 80240a2:	e7be      	b.n	8024022 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 80240a4:	2000      	movs	r0, #0
 80240a6:	e7d5      	b.n	8024054 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 80240a8:	2300      	movs	r3, #0
 80240aa:	e7ec      	b.n	8024086 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 80240ac:	463b      	mov	r3, r7
 80240ae:	2d0f      	cmp	r5, #15
 80240b0:	d8eb      	bhi.n	802408a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 80240b2:	b2bf      	uxth	r7, r7
 80240b4:	b2ad      	uxth	r5, r5
 80240b6:	fb07 f205 	mul.w	r2, r7, r5
 80240ba:	013f      	lsls	r7, r7, #4
 80240bc:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 80240c0:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 80240c4:	1abf      	subs	r7, r7, r2
 80240c6:	b2ad      	uxth	r5, r5
 80240c8:	b2bf      	uxth	r7, r7
 80240ca:	ebac 0c05 	sub.w	ip, ip, r5
 80240ce:	437c      	muls	r4, r7
 80240d0:	fa1f fc8c 	uxth.w	ip, ip
 80240d4:	fb06 440c 	mla	r4, r6, ip, r4
 80240d8:	fb05 4400 	mla	r4, r5, r0, r4
 80240dc:	fb02 4203 	mla	r2, r2, r3, r4
 80240e0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80240e4:	b38a      	cbz	r2, 802414a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 80240e6:	4b21      	ldr	r3, [pc, #132]	; (802416c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 80240e8:	681c      	ldr	r4, [r3, #0]
 80240ea:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80240ee:	b2e5      	uxtb	r5, r4
 80240f0:	4353      	muls	r3, r2
 80240f2:	1c5a      	adds	r2, r3, #1
 80240f4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80240f8:	1212      	asrs	r2, r2, #8
 80240fa:	b290      	uxth	r0, r2
 80240fc:	43d2      	mvns	r2, r2
 80240fe:	fb15 f500 	smulbb	r5, r5, r0
 8024102:	b2d3      	uxtb	r3, r2
 8024104:	780a      	ldrb	r2, [r1, #0]
 8024106:	fb02 5203 	mla	r2, r2, r3, r5
 802410a:	b292      	uxth	r2, r2
 802410c:	1c55      	adds	r5, r2, #1
 802410e:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8024112:	784d      	ldrb	r5, [r1, #1]
 8024114:	fb15 f503 	smulbb	r5, r5, r3
 8024118:	1212      	asrs	r2, r2, #8
 802411a:	700a      	strb	r2, [r1, #0]
 802411c:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8024120:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8024124:	fb02 5200 	mla	r2, r2, r0, r5
 8024128:	b292      	uxth	r2, r2
 802412a:	1c55      	adds	r5, r2, #1
 802412c:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8024130:	1212      	asrs	r2, r2, #8
 8024132:	704a      	strb	r2, [r1, #1]
 8024134:	788a      	ldrb	r2, [r1, #2]
 8024136:	fb12 f303 	smulbb	r3, r2, r3
 802413a:	fb04 3300 	mla	r3, r4, r0, r3
 802413e:	b29b      	uxth	r3, r3
 8024140:	1c5a      	adds	r2, r3, #1
 8024142:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024146:	121b      	asrs	r3, r3, #8
 8024148:	708b      	strb	r3, [r1, #2]
 802414a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802414e:	2f0f      	cmp	r7, #15
 8024150:	d89b      	bhi.n	802408a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8024152:	462b      	mov	r3, r5
 8024154:	4628      	mov	r0, r5
 8024156:	e7ac      	b.n	80240b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8024158:	2d00      	cmp	r5, #0
 802415a:	d1a1      	bne.n	80240a0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 802415c:	462c      	mov	r4, r5
 802415e:	e7f8      	b.n	8024152 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8024160:	0802eaaf 	.word	0x0802eaaf
 8024164:	0802f017 	.word	0x0802f017
 8024168:	0802eb78 	.word	0x0802eb78
 802416c:	200567a8 	.word	0x200567a8

08024170 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024174:	ed2d 8b08 	vpush	{d8-d11}
 8024178:	b097      	sub	sp, #92	; 0x5c
 802417a:	eeb0 aa40 	vmov.f32	s20, s0
 802417e:	eef0 9a60 	vmov.f32	s19, s1
 8024182:	9214      	str	r2, [sp, #80]	; 0x50
 8024184:	eeb0 9a41 	vmov.f32	s18, s2
 8024188:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802418a:	eeb0 8a62 	vmov.f32	s16, s5
 802418e:	9309      	str	r3, [sp, #36]	; 0x24
 8024190:	eef0 8a43 	vmov.f32	s17, s6
 8024194:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8024198:	eef0 ba44 	vmov.f32	s23, s8
 802419c:	9015      	str	r0, [sp, #84]	; 0x54
 802419e:	eeb0 ba64 	vmov.f32	s22, s9
 80241a2:	6850      	ldr	r0, [r2, #4]
 80241a4:	eef0 aa45 	vmov.f32	s21, s10
 80241a8:	910c      	str	r1, [sp, #48]	; 0x30
 80241aa:	930e      	str	r3, [sp, #56]	; 0x38
 80241ac:	6812      	ldr	r2, [r2, #0]
 80241ae:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80241b2:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 80241b6:	fb00 1303 	mla	r3, r0, r3, r1
 80241ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80241be:	eb02 0a03 	add.w	sl, r2, r3
 80241c2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80241c4:	689b      	ldr	r3, [r3, #8]
 80241c6:	3301      	adds	r3, #1
 80241c8:	f023 0301 	bic.w	r3, r3, #1
 80241cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80241ce:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80241d0:	681f      	ldr	r7, [r3, #0]
 80241d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80241d4:	2b00      	cmp	r3, #0
 80241d6:	dc03      	bgt.n	80241e0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80241d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80241da:	2b00      	cmp	r3, #0
 80241dc:	f340 8247 	ble.w	802466e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 80241e0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80241e2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80241e6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80241ea:	1e48      	subs	r0, r1, #1
 80241ec:	f102 3cff 	add.w	ip, r2, #4294967295
 80241f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80241f2:	2b00      	cmp	r3, #0
 80241f4:	f340 80e5 	ble.w	80243c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80241f8:	ea5f 4e25 	movs.w	lr, r5, asr #16
 80241fc:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024200:	d406      	bmi.n	8024210 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8024202:	4586      	cmp	lr, r0
 8024204:	da04      	bge.n	8024210 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8024206:	2b00      	cmp	r3, #0
 8024208:	db02      	blt.n	8024210 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802420a:	4563      	cmp	r3, ip
 802420c:	f2c0 80da 	blt.w	80243c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8024210:	f11e 0e01 	adds.w	lr, lr, #1
 8024214:	f100 80cb 	bmi.w	80243ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8024218:	4571      	cmp	r1, lr
 802421a:	f2c0 80c8 	blt.w	80243ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 802421e:	3301      	adds	r3, #1
 8024220:	f100 80c5 	bmi.w	80243ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8024224:	429a      	cmp	r2, r3
 8024226:	f2c0 80c2 	blt.w	80243ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 802422a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802422c:	46d0      	mov	r8, sl
 802422e:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8024232:	930d      	str	r3, [sp, #52]	; 0x34
 8024234:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024236:	2b00      	cmp	r3, #0
 8024238:	f340 80e3 	ble.w	8024402 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 802423c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802423e:	1430      	asrs	r0, r6, #16
 8024240:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8024244:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024248:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802424c:	142b      	asrs	r3, r5, #16
 802424e:	f100 812e 	bmi.w	80244ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8024252:	f10c 3bff 	add.w	fp, ip, #4294967295
 8024256:	455b      	cmp	r3, fp
 8024258:	f280 8129 	bge.w	80244ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802425c:	2800      	cmp	r0, #0
 802425e:	f2c0 8126 	blt.w	80244ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8024262:	f10e 3bff 	add.w	fp, lr, #4294967295
 8024266:	4558      	cmp	r0, fp
 8024268:	f280 8121 	bge.w	80244ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802426c:	fb00 3309 	mla	r3, r0, r9, r3
 8024270:	0858      	lsrs	r0, r3, #1
 8024272:	07dc      	lsls	r4, r3, #31
 8024274:	f817 c000 	ldrb.w	ip, [r7, r0]
 8024278:	bf54      	ite	pl
 802427a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802427e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024282:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024286:	fa5f fc8c 	uxtb.w	ip, ip
 802428a:	2a00      	cmp	r2, #0
 802428c:	f000 80fe 	beq.w	802448c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8024290:	1c58      	adds	r0, r3, #1
 8024292:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8024296:	07c0      	lsls	r0, r0, #31
 8024298:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802429c:	bf54      	ite	pl
 802429e:	f00e 0e0f 	andpl.w	lr, lr, #15
 80242a2:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80242a6:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80242aa:	fa5f f08e 	uxtb.w	r0, lr
 80242ae:	9010      	str	r0, [sp, #64]	; 0x40
 80242b0:	b1d9      	cbz	r1, 80242ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 80242b2:	444b      	add	r3, r9
 80242b4:	0858      	lsrs	r0, r3, #1
 80242b6:	07dc      	lsls	r4, r3, #31
 80242b8:	f103 0301 	add.w	r3, r3, #1
 80242bc:	5c38      	ldrb	r0, [r7, r0]
 80242be:	bf54      	ite	pl
 80242c0:	f000 000f 	andpl.w	r0, r0, #15
 80242c4:	1100      	asrmi	r0, r0, #4
 80242c6:	07dc      	lsls	r4, r3, #31
 80242c8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80242cc:	b2c0      	uxtb	r0, r0
 80242ce:	900a      	str	r0, [sp, #40]	; 0x28
 80242d0:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80242d4:	f817 e000 	ldrb.w	lr, [r7, r0]
 80242d8:	bf54      	ite	pl
 80242da:	f00e 030f 	andpl.w	r3, lr, #15
 80242de:	ea4f 132e 	movmi.w	r3, lr, asr #4
 80242e2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80242e6:	b2db      	uxtb	r3, r3
 80242e8:	9311      	str	r3, [sp, #68]	; 0x44
 80242ea:	b292      	uxth	r2, r2
 80242ec:	b289      	uxth	r1, r1
 80242ee:	0113      	lsls	r3, r2, #4
 80242f0:	fb02 f001 	mul.w	r0, r2, r1
 80242f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80242f6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80242fa:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 80242fe:	1a1b      	subs	r3, r3, r0
 8024300:	b289      	uxth	r1, r1
 8024302:	b29b      	uxth	r3, r3
 8024304:	ebae 0e01 	sub.w	lr, lr, r1
 8024308:	4353      	muls	r3, r2
 802430a:	fa1f fe8e 	uxth.w	lr, lr
 802430e:	fb0c 320e 	mla	r2, ip, lr, r3
 8024312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024314:	fb01 2203 	mla	r2, r1, r3, r2
 8024318:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802431a:	fb00 2203 	mla	r2, r0, r3, r2
 802431e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8024322:	2a00      	cmp	r2, #0
 8024324:	d039      	beq.n	802439a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8024326:	4bc7      	ldr	r3, [pc, #796]	; (8024644 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8024328:	6819      	ldr	r1, [r3, #0]
 802432a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802432c:	fa5f fc81 	uxtb.w	ip, r1
 8024330:	435a      	muls	r2, r3
 8024332:	1c53      	adds	r3, r2, #1
 8024334:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8024338:	1212      	asrs	r2, r2, #8
 802433a:	b290      	uxth	r0, r2
 802433c:	43d2      	mvns	r2, r2
 802433e:	fb1c fc00 	smulbb	ip, ip, r0
 8024342:	b2d3      	uxtb	r3, r2
 8024344:	f898 2000 	ldrb.w	r2, [r8]
 8024348:	fb02 c203 	mla	r2, r2, r3, ip
 802434c:	b292      	uxth	r2, r2
 802434e:	f102 0c01 	add.w	ip, r2, #1
 8024352:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8024356:	f898 c001 	ldrb.w	ip, [r8, #1]
 802435a:	fb1c fc03 	smulbb	ip, ip, r3
 802435e:	1212      	asrs	r2, r2, #8
 8024360:	f888 2000 	strb.w	r2, [r8]
 8024364:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8024368:	f3c1 4107 	ubfx	r1, r1, #16, #8
 802436c:	fb02 c200 	mla	r2, r2, r0, ip
 8024370:	b292      	uxth	r2, r2
 8024372:	f102 0c01 	add.w	ip, r2, #1
 8024376:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802437a:	1212      	asrs	r2, r2, #8
 802437c:	f888 2001 	strb.w	r2, [r8, #1]
 8024380:	f898 2002 	ldrb.w	r2, [r8, #2]
 8024384:	fb12 f303 	smulbb	r3, r2, r3
 8024388:	fb01 3300 	mla	r3, r1, r0, r3
 802438c:	b29b      	uxth	r3, r3
 802438e:	1c5a      	adds	r2, r3, #1
 8024390:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024394:	121b      	asrs	r3, r3, #8
 8024396:	f888 3002 	strb.w	r3, [r8, #2]
 802439a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802439c:	f108 0803 	add.w	r8, r8, #3
 80243a0:	441d      	add	r5, r3
 80243a2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80243a4:	441e      	add	r6, r3
 80243a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80243a8:	3b01      	subs	r3, #1
 80243aa:	930d      	str	r3, [sp, #52]	; 0x34
 80243ac:	e742      	b.n	8024234 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 80243ae:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80243b0:	f10a 0a03 	add.w	sl, sl, #3
 80243b4:	441d      	add	r5, r3
 80243b6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80243b8:	441e      	add	r6, r3
 80243ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80243bc:	3b01      	subs	r3, #1
 80243be:	9309      	str	r3, [sp, #36]	; 0x24
 80243c0:	e716      	b.n	80241f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80243c2:	d024      	beq.n	802440e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80243c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80243c6:	982b      	ldr	r0, [sp, #172]	; 0xac
 80243c8:	3b01      	subs	r3, #1
 80243ca:	fb00 5003 	mla	r0, r0, r3, r5
 80243ce:	1400      	asrs	r0, r0, #16
 80243d0:	f53f af2b 	bmi.w	802422a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80243d4:	3901      	subs	r1, #1
 80243d6:	4288      	cmp	r0, r1
 80243d8:	f6bf af27 	bge.w	802422a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80243dc:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80243de:	fb01 6303 	mla	r3, r1, r3, r6
 80243e2:	141b      	asrs	r3, r3, #16
 80243e4:	f53f af21 	bmi.w	802422a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80243e8:	3a01      	subs	r2, #1
 80243ea:	4293      	cmp	r3, r2
 80243ec:	f6bf af1d 	bge.w	802422a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80243f0:	f10a 0e03 	add.w	lr, sl, #3
 80243f4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80243f8:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 80243fc:	f1b8 0f00 	cmp.w	r8, #0
 8024400:	dc76      	bgt.n	80244f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8024402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024404:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024408:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802440c:	44a2      	add	sl, r4
 802440e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024410:	2b00      	cmp	r3, #0
 8024412:	f340 812c 	ble.w	802466e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 8024416:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802441a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802441c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024420:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024424:	eef0 6a48 	vmov.f32	s13, s16
 8024428:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802442c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024430:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024434:	ee16 5a90 	vmov	r5, s13
 8024438:	eef0 6a68 	vmov.f32	s13, s17
 802443c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024440:	ee16 6a90 	vmov	r6, s13
 8024444:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024448:	ee69 7a27 	vmul.f32	s15, s18, s15
 802444c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024450:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024454:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024458:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802445c:	ee18 2a10 	vmov	r2, s16
 8024460:	eeb0 8a47 	vmov.f32	s16, s14
 8024464:	fb92 f3f3 	sdiv	r3, r2, r3
 8024468:	ee18 2a90 	vmov	r2, s17
 802446c:	932b      	str	r3, [sp, #172]	; 0xac
 802446e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024470:	eef0 8a67 	vmov.f32	s17, s15
 8024474:	fb92 f3f3 	sdiv	r3, r2, r3
 8024478:	932c      	str	r3, [sp, #176]	; 0xb0
 802447a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802447c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802447e:	3b01      	subs	r3, #1
 8024480:	930c      	str	r3, [sp, #48]	; 0x30
 8024482:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024484:	bf08      	it	eq
 8024486:	4613      	moveq	r3, r2
 8024488:	9309      	str	r3, [sp, #36]	; 0x24
 802448a:	e6a2      	b.n	80241d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 802448c:	2900      	cmp	r1, #0
 802448e:	f43f af2c 	beq.w	80242ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 8024492:	eb09 0003 	add.w	r0, r9, r3
 8024496:	0843      	lsrs	r3, r0, #1
 8024498:	07c0      	lsls	r0, r0, #31
 802449a:	5cfb      	ldrb	r3, [r7, r3]
 802449c:	bf54      	ite	pl
 802449e:	f003 030f 	andpl.w	r3, r3, #15
 80244a2:	111b      	asrmi	r3, r3, #4
 80244a4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80244a8:	b2db      	uxtb	r3, r3
 80244aa:	930a      	str	r3, [sp, #40]	; 0x28
 80244ac:	e71d      	b.n	80242ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 80244ae:	f113 0b01 	adds.w	fp, r3, #1
 80244b2:	f53f af72 	bmi.w	802439a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80244b6:	45dc      	cmp	ip, fp
 80244b8:	f6ff af6f 	blt.w	802439a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80244bc:	f110 0b01 	adds.w	fp, r0, #1
 80244c0:	f53f af6b 	bmi.w	802439a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80244c4:	45de      	cmp	lr, fp
 80244c6:	f6ff af68 	blt.w	802439a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80244ca:	9302      	str	r3, [sp, #8]
 80244cc:	fa0f f38e 	sxth.w	r3, lr
 80244d0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80244d2:	9301      	str	r3, [sp, #4]
 80244d4:	fa0f f38c 	sxth.w	r3, ip
 80244d8:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80244dc:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80244e0:	9300      	str	r3, [sp, #0]
 80244e2:	463a      	mov	r2, r7
 80244e4:	464b      	mov	r3, r9
 80244e6:	4641      	mov	r1, r8
 80244e8:	9815      	ldr	r0, [sp, #84]	; 0x54
 80244ea:	f7ff fd59 	bl	8023fa0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 80244ee:	e754      	b.n	802439a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80244f0:	142a      	asrs	r2, r5, #16
 80244f2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80244f6:	1433      	asrs	r3, r6, #16
 80244f8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80244fc:	fb09 2303 	mla	r3, r9, r3, r2
 8024500:	085a      	lsrs	r2, r3, #1
 8024502:	07dc      	lsls	r4, r3, #31
 8024504:	5cba      	ldrb	r2, [r7, r2]
 8024506:	bf54      	ite	pl
 8024508:	f002 020f 	andpl.w	r2, r2, #15
 802450c:	1112      	asrmi	r2, r2, #4
 802450e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8024512:	b2d2      	uxtb	r2, r2
 8024514:	2900      	cmp	r1, #0
 8024516:	f000 8097 	beq.w	8024648 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802451a:	f103 0b01 	add.w	fp, r3, #1
 802451e:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 8024522:	f01b 0f01 	tst.w	fp, #1
 8024526:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802452a:	bf0c      	ite	eq
 802452c:	f00c 0c0f 	andeq.w	ip, ip, #15
 8024530:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8024534:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024538:	fa5f f48c 	uxtb.w	r4, ip
 802453c:	9412      	str	r4, [sp, #72]	; 0x48
 802453e:	b300      	cbz	r0, 8024582 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8024540:	444b      	add	r3, r9
 8024542:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024546:	07dc      	lsls	r4, r3, #31
 8024548:	f103 0301 	add.w	r3, r3, #1
 802454c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024550:	bf54      	ite	pl
 8024552:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024556:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802455a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802455e:	fa5f f48c 	uxtb.w	r4, ip
 8024562:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024566:	940b      	str	r4, [sp, #44]	; 0x2c
 8024568:	07dc      	lsls	r4, r3, #31
 802456a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802456e:	bf54      	ite	pl
 8024570:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024574:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024578:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802457c:	fa5f f38c 	uxtb.w	r3, ip
 8024580:	9313      	str	r3, [sp, #76]	; 0x4c
 8024582:	b289      	uxth	r1, r1
 8024584:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024586:	b280      	uxth	r0, r0
 8024588:	fb01 f300 	mul.w	r3, r1, r0
 802458c:	0109      	lsls	r1, r1, #4
 802458e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8024592:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8024596:	1ac9      	subs	r1, r1, r3
 8024598:	b280      	uxth	r0, r0
 802459a:	b289      	uxth	r1, r1
 802459c:	ebac 0c00 	sub.w	ip, ip, r0
 80245a0:	4361      	muls	r1, r4
 80245a2:	fa1f fc8c 	uxth.w	ip, ip
 80245a6:	fb02 120c 	mla	r2, r2, ip, r1
 80245aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80245ac:	fb00 2001 	mla	r0, r0, r1, r2
 80245b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80245b2:	fb03 0302 	mla	r3, r3, r2, r0
 80245b6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80245ba:	2b00      	cmp	r3, #0
 80245bc:	d039      	beq.n	8024632 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80245be:	4a21      	ldr	r2, [pc, #132]	; (8024644 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 80245c0:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 80245c4:	6810      	ldr	r0, [r2, #0]
 80245c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80245c8:	fa5f fc80 	uxtb.w	ip, r0
 80245cc:	4353      	muls	r3, r2
 80245ce:	1c5a      	adds	r2, r3, #1
 80245d0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80245d4:	121b      	asrs	r3, r3, #8
 80245d6:	b29a      	uxth	r2, r3
 80245d8:	43db      	mvns	r3, r3
 80245da:	fb1c fc02 	smulbb	ip, ip, r2
 80245de:	b2db      	uxtb	r3, r3
 80245e0:	fb01 c103 	mla	r1, r1, r3, ip
 80245e4:	b289      	uxth	r1, r1
 80245e6:	f101 0c01 	add.w	ip, r1, #1
 80245ea:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80245ee:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 80245f2:	fb1c fc03 	smulbb	ip, ip, r3
 80245f6:	1209      	asrs	r1, r1, #8
 80245f8:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80245fc:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8024600:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8024604:	fb01 c102 	mla	r1, r1, r2, ip
 8024608:	b289      	uxth	r1, r1
 802460a:	f101 0c01 	add.w	ip, r1, #1
 802460e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8024612:	1209      	asrs	r1, r1, #8
 8024614:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8024618:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 802461c:	fb11 f303 	smulbb	r3, r1, r3
 8024620:	fb00 3002 	mla	r0, r0, r2, r3
 8024624:	b280      	uxth	r0, r0
 8024626:	1c42      	adds	r2, r0, #1
 8024628:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802462c:	1200      	asrs	r0, r0, #8
 802462e:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8024632:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024634:	f10e 0e03 	add.w	lr, lr, #3
 8024638:	f108 38ff 	add.w	r8, r8, #4294967295
 802463c:	441d      	add	r5, r3
 802463e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024640:	441e      	add	r6, r3
 8024642:	e6db      	b.n	80243fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8024644:	200567a8 	.word	0x200567a8
 8024648:	2800      	cmp	r0, #0
 802464a:	d09a      	beq.n	8024582 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 802464c:	444b      	add	r3, r9
 802464e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024652:	07db      	lsls	r3, r3, #31
 8024654:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024658:	bf54      	ite	pl
 802465a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802465e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024662:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024666:	fa5f f38c 	uxtb.w	r3, ip
 802466a:	930b      	str	r3, [sp, #44]	; 0x2c
 802466c:	e789      	b.n	8024582 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 802466e:	b017      	add	sp, #92	; 0x5c
 8024670:	ecbd 8b08 	vpop	{d8-d11}
 8024674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024678 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8024678:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802467c:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8024680:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8024684:	2800      	cmp	r0, #0
 8024686:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 802468a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 802468e:	fb0c 0e03 	mla	lr, ip, r3, r0
 8024692:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8024696:	db6b      	blt.n	8024770 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8024698:	4580      	cmp	r8, r0
 802469a:	dd69      	ble.n	8024770 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 802469c:	f1bc 0f00 	cmp.w	ip, #0
 80246a0:	db66      	blt.n	8024770 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80246a2:	45e1      	cmp	r9, ip
 80246a4:	dd64      	ble.n	8024770 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80246a6:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80246aa:	f01e 0f01 	tst.w	lr, #1
 80246ae:	5d16      	ldrb	r6, [r2, r4]
 80246b0:	bf0c      	ite	eq
 80246b2:	f006 060f 	andeq.w	r6, r6, #15
 80246b6:	1136      	asrne	r6, r6, #4
 80246b8:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80246bc:	b2f6      	uxtb	r6, r6
 80246be:	f110 0a01 	adds.w	sl, r0, #1
 80246c2:	d457      	bmi.n	8024774 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80246c4:	45d0      	cmp	r8, sl
 80246c6:	dd55      	ble.n	8024774 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80246c8:	f1bc 0f00 	cmp.w	ip, #0
 80246cc:	db52      	blt.n	8024774 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80246ce:	45e1      	cmp	r9, ip
 80246d0:	dd50      	ble.n	8024774 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80246d2:	2f00      	cmp	r7, #0
 80246d4:	f000 80a5 	beq.w	8024822 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 80246d8:	f10e 0b01 	add.w	fp, lr, #1
 80246dc:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80246e0:	f01b 0f01 	tst.w	fp, #1
 80246e4:	5d14      	ldrb	r4, [r2, r4]
 80246e6:	bf0c      	ite	eq
 80246e8:	f004 040f 	andeq.w	r4, r4, #15
 80246ec:	1124      	asrne	r4, r4, #4
 80246ee:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80246f2:	b2e4      	uxtb	r4, r4
 80246f4:	2d00      	cmp	r5, #0
 80246f6:	f000 808f 	beq.w	8024818 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 80246fa:	2800      	cmp	r0, #0
 80246fc:	f10c 0c01 	add.w	ip, ip, #1
 8024700:	db3c      	blt.n	802477c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8024702:	4580      	cmp	r8, r0
 8024704:	dd3a      	ble.n	802477c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8024706:	f1bc 0f00 	cmp.w	ip, #0
 802470a:	db37      	blt.n	802477c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 802470c:	45e1      	cmp	r9, ip
 802470e:	dd35      	ble.n	802477c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8024710:	eb03 0b0e 	add.w	fp, r3, lr
 8024714:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8024718:	f01b 0f01 	tst.w	fp, #1
 802471c:	5c10      	ldrb	r0, [r2, r0]
 802471e:	bf0c      	ite	eq
 8024720:	f000 000f 	andeq.w	r0, r0, #15
 8024724:	1100      	asrne	r0, r0, #4
 8024726:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802472a:	b2c0      	uxtb	r0, r0
 802472c:	f1ba 0f00 	cmp.w	sl, #0
 8024730:	db26      	blt.n	8024780 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8024732:	45d0      	cmp	r8, sl
 8024734:	dd24      	ble.n	8024780 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8024736:	f1bc 0f00 	cmp.w	ip, #0
 802473a:	db21      	blt.n	8024780 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 802473c:	45e1      	cmp	r9, ip
 802473e:	dd1f      	ble.n	8024780 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8024740:	b307      	cbz	r7, 8024784 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 8024742:	3301      	adds	r3, #1
 8024744:	449e      	add	lr, r3
 8024746:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802474a:	f01e 0f01 	tst.w	lr, #1
 802474e:	5cd3      	ldrb	r3, [r2, r3]
 8024750:	bf0c      	ite	eq
 8024752:	f003 030f 	andeq.w	r3, r3, #15
 8024756:	111b      	asrne	r3, r3, #4
 8024758:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802475c:	b2db      	uxtb	r3, r3
 802475e:	2f0f      	cmp	r7, #15
 8024760:	d911      	bls.n	8024786 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 8024762:	4b32      	ldr	r3, [pc, #200]	; (802482c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 8024764:	f240 1157 	movw	r1, #343	; 0x157
 8024768:	4a31      	ldr	r2, [pc, #196]	; (8024830 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 802476a:	4832      	ldr	r0, [pc, #200]	; (8024834 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 802476c:	f002 f928 	bl	80269c0 <__assert_func>
 8024770:	2600      	movs	r6, #0
 8024772:	e7a4      	b.n	80246be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8024774:	2400      	movs	r4, #0
 8024776:	e7bd      	b.n	80246f4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8024778:	463c      	mov	r4, r7
 802477a:	e7be      	b.n	80246fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 802477c:	2000      	movs	r0, #0
 802477e:	e7d5      	b.n	802472c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 8024780:	2300      	movs	r3, #0
 8024782:	e7ec      	b.n	802475e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 8024784:	463b      	mov	r3, r7
 8024786:	2d0f      	cmp	r5, #15
 8024788:	d8eb      	bhi.n	8024762 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 802478a:	b2bf      	uxth	r7, r7
 802478c:	b2ad      	uxth	r5, r5
 802478e:	fb07 f205 	mul.w	r2, r7, r5
 8024792:	013f      	lsls	r7, r7, #4
 8024794:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8024798:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 802479c:	1abf      	subs	r7, r7, r2
 802479e:	b2ad      	uxth	r5, r5
 80247a0:	b2bf      	uxth	r7, r7
 80247a2:	ebac 0c05 	sub.w	ip, ip, r5
 80247a6:	437c      	muls	r4, r7
 80247a8:	fa1f fc8c 	uxth.w	ip, ip
 80247ac:	fb06 440c 	mla	r4, r6, ip, r4
 80247b0:	fb05 4400 	mla	r4, r5, r0, r4
 80247b4:	fb02 4303 	mla	r3, r2, r3, r4
 80247b8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80247bc:	b353      	cbz	r3, 8024814 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 80247be:	4a1e      	ldr	r2, [pc, #120]	; (8024838 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 80247c0:	7808      	ldrb	r0, [r1, #0]
 80247c2:	6814      	ldr	r4, [r2, #0]
 80247c4:	b29a      	uxth	r2, r3
 80247c6:	43db      	mvns	r3, r3
 80247c8:	b2e5      	uxtb	r5, r4
 80247ca:	b2db      	uxtb	r3, r3
 80247cc:	fb15 f502 	smulbb	r5, r5, r2
 80247d0:	fb00 5003 	mla	r0, r0, r3, r5
 80247d4:	b280      	uxth	r0, r0
 80247d6:	1c45      	adds	r5, r0, #1
 80247d8:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80247dc:	784d      	ldrb	r5, [r1, #1]
 80247de:	fb15 f503 	smulbb	r5, r5, r3
 80247e2:	1200      	asrs	r0, r0, #8
 80247e4:	7008      	strb	r0, [r1, #0]
 80247e6:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80247ea:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80247ee:	fb00 5002 	mla	r0, r0, r2, r5
 80247f2:	b280      	uxth	r0, r0
 80247f4:	1c45      	adds	r5, r0, #1
 80247f6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80247fa:	1200      	asrs	r0, r0, #8
 80247fc:	7048      	strb	r0, [r1, #1]
 80247fe:	7888      	ldrb	r0, [r1, #2]
 8024800:	fb10 f303 	smulbb	r3, r0, r3
 8024804:	fb04 3202 	mla	r2, r4, r2, r3
 8024808:	b292      	uxth	r2, r2
 802480a:	1c53      	adds	r3, r2, #1
 802480c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8024810:	1212      	asrs	r2, r2, #8
 8024812:	708a      	strb	r2, [r1, #2]
 8024814:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024818:	2f0f      	cmp	r7, #15
 802481a:	d8a2      	bhi.n	8024762 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 802481c:	462b      	mov	r3, r5
 802481e:	4628      	mov	r0, r5
 8024820:	e7b3      	b.n	802478a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 8024822:	2d00      	cmp	r5, #0
 8024824:	d1a8      	bne.n	8024778 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 8024826:	462c      	mov	r4, r5
 8024828:	e7f8      	b.n	802481c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 802482a:	bf00      	nop
 802482c:	0802eaaf 	.word	0x0802eaaf
 8024830:	0802f017 	.word	0x0802f017
 8024834:	0802eb78 	.word	0x0802eb78
 8024838:	200567a8 	.word	0x200567a8

0802483c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802483c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024840:	ed2d 8b08 	vpush	{d8-d11}
 8024844:	b093      	sub	sp, #76	; 0x4c
 8024846:	461c      	mov	r4, r3
 8024848:	eeb0 aa40 	vmov.f32	s20, s0
 802484c:	920c      	str	r2, [sp, #48]	; 0x30
 802484e:	eef0 9a60 	vmov.f32	s19, s1
 8024852:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024854:	eeb0 9a41 	vmov.f32	s18, s2
 8024858:	9011      	str	r0, [sp, #68]	; 0x44
 802485a:	eeb0 8a62 	vmov.f32	s16, s5
 802485e:	6850      	ldr	r0, [r2, #4]
 8024860:	eef0 8a43 	vmov.f32	s17, s6
 8024864:	9107      	str	r1, [sp, #28]
 8024866:	eef0 ba44 	vmov.f32	s23, s8
 802486a:	6812      	ldr	r2, [r2, #0]
 802486c:	eeb0 ba64 	vmov.f32	s22, s9
 8024870:	eef0 aa45 	vmov.f32	s21, s10
 8024874:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8024878:	e9dd 5625 	ldrd	r5, r6, [sp, #148]	; 0x94
 802487c:	fb00 1303 	mla	r3, r0, r3, r1
 8024880:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024884:	eb02 0b03 	add.w	fp, r2, r3
 8024888:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802488a:	689b      	ldr	r3, [r3, #8]
 802488c:	3301      	adds	r3, #1
 802488e:	f023 0301 	bic.w	r3, r3, #1
 8024892:	9309      	str	r3, [sp, #36]	; 0x24
 8024894:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024896:	f8d3 8000 	ldr.w	r8, [r3]
 802489a:	9b07      	ldr	r3, [sp, #28]
 802489c:	2b00      	cmp	r3, #0
 802489e:	dc03      	bgt.n	80248a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80248a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80248a2:	2b00      	cmp	r3, #0
 80248a4:	f340 822b 	ble.w	8024cfe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80248a8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80248aa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80248ae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80248b2:	1e48      	subs	r0, r1, #1
 80248b4:	1e57      	subs	r7, r2, #1
 80248b6:	2c00      	cmp	r4, #0
 80248b8:	f340 80d7 	ble.w	8024a6a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 80248bc:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80248c0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80248c4:	d406      	bmi.n	80248d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80248c6:	4584      	cmp	ip, r0
 80248c8:	da04      	bge.n	80248d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80248ca:	2b00      	cmp	r3, #0
 80248cc:	db02      	blt.n	80248d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80248ce:	42bb      	cmp	r3, r7
 80248d0:	f2c0 80cc 	blt.w	8024a6c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80248d4:	f11c 0c01 	adds.w	ip, ip, #1
 80248d8:	f100 80bf 	bmi.w	8024a5a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 80248dc:	4561      	cmp	r1, ip
 80248de:	f2c0 80bc 	blt.w	8024a5a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 80248e2:	3301      	adds	r3, #1
 80248e4:	f100 80b9 	bmi.w	8024a5a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 80248e8:	429a      	cmp	r2, r3
 80248ea:	f2c0 80b6 	blt.w	8024a5a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 80248ee:	46a2      	mov	sl, r4
 80248f0:	465f      	mov	r7, fp
 80248f2:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80248f6:	f1ba 0f00 	cmp.w	sl, #0
 80248fa:	f340 80d4 	ble.w	8024aa6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80248fe:	f3c5 3303 	ubfx	r3, r5, #12, #4
 8024902:	1430      	asrs	r0, r6, #16
 8024904:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024908:	9308      	str	r3, [sp, #32]
 802490a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802490c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8024910:	142b      	asrs	r3, r5, #16
 8024912:	f100 8124 	bmi.w	8024b5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8024916:	f10c 32ff 	add.w	r2, ip, #4294967295
 802491a:	4293      	cmp	r3, r2
 802491c:	f280 811f 	bge.w	8024b5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8024920:	2800      	cmp	r0, #0
 8024922:	f2c0 811c 	blt.w	8024b5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8024926:	f10e 32ff 	add.w	r2, lr, #4294967295
 802492a:	4290      	cmp	r0, r2
 802492c:	f280 8117 	bge.w	8024b5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8024930:	fb00 3309 	mla	r3, r0, r9, r3
 8024934:	0858      	lsrs	r0, r3, #1
 8024936:	07da      	lsls	r2, r3, #31
 8024938:	9a08      	ldr	r2, [sp, #32]
 802493a:	f818 c000 	ldrb.w	ip, [r8, r0]
 802493e:	bf54      	ite	pl
 8024940:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024944:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024948:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802494c:	fa5f fc8c 	uxtb.w	ip, ip
 8024950:	2a00      	cmp	r2, #0
 8024952:	f000 80ed 	beq.w	8024b30 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024956:	1c58      	adds	r0, r3, #1
 8024958:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802495c:	07c0      	lsls	r0, r0, #31
 802495e:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8024962:	bf54      	ite	pl
 8024964:	f00e 0e0f 	andpl.w	lr, lr, #15
 8024968:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802496c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8024970:	fa5f fe8e 	uxtb.w	lr, lr
 8024974:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8024978:	b1c9      	cbz	r1, 80249ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 802497a:	444b      	add	r3, r9
 802497c:	0858      	lsrs	r0, r3, #1
 802497e:	07da      	lsls	r2, r3, #31
 8024980:	f818 0000 	ldrb.w	r0, [r8, r0]
 8024984:	bf54      	ite	pl
 8024986:	f000 000f 	andpl.w	r0, r0, #15
 802498a:	1100      	asrmi	r0, r0, #4
 802498c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024990:	b2c0      	uxtb	r0, r0
 8024992:	900a      	str	r0, [sp, #40]	; 0x28
 8024994:	1c58      	adds	r0, r3, #1
 8024996:	0843      	lsrs	r3, r0, #1
 8024998:	07c2      	lsls	r2, r0, #31
 802499a:	f818 3003 	ldrb.w	r3, [r8, r3]
 802499e:	bf54      	ite	pl
 80249a0:	f003 030f 	andpl.w	r3, r3, #15
 80249a4:	111b      	asrmi	r3, r3, #4
 80249a6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80249aa:	b2db      	uxtb	r3, r3
 80249ac:	930e      	str	r3, [sp, #56]	; 0x38
 80249ae:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80249b2:	b289      	uxth	r1, r1
 80249b4:	fb02 f301 	mul.w	r3, r2, r1
 80249b8:	0112      	lsls	r2, r2, #4
 80249ba:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80249be:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80249c2:	1ad2      	subs	r2, r2, r3
 80249c4:	b289      	uxth	r1, r1
 80249c6:	b292      	uxth	r2, r2
 80249c8:	1a40      	subs	r0, r0, r1
 80249ca:	fa1f fe80 	uxth.w	lr, r0
 80249ce:	980d      	ldr	r0, [sp, #52]	; 0x34
 80249d0:	4342      	muls	r2, r0
 80249d2:	fb0c 2c0e 	mla	ip, ip, lr, r2
 80249d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80249d8:	fb01 c102 	mla	r1, r1, r2, ip
 80249dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80249de:	fb03 1302 	mla	r3, r3, r2, r1
 80249e2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80249e6:	b383      	cbz	r3, 8024a4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80249e8:	4ac7      	ldr	r2, [pc, #796]	; (8024d08 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 80249ea:	2bff      	cmp	r3, #255	; 0xff
 80249ec:	6812      	ldr	r2, [r2, #0]
 80249ee:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 80249f2:	f3c2 2007 	ubfx	r0, r2, #8, #8
 80249f6:	b2d2      	uxtb	r2, r2
 80249f8:	f000 80ac 	beq.w	8024b54 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80249fc:	b299      	uxth	r1, r3
 80249fe:	43db      	mvns	r3, r3
 8024a00:	f897 c000 	ldrb.w	ip, [r7]
 8024a04:	fb12 f201 	smulbb	r2, r2, r1
 8024a08:	b2db      	uxtb	r3, r3
 8024a0a:	fb10 f001 	smulbb	r0, r0, r1
 8024a0e:	fb0c 2203 	mla	r2, ip, r3, r2
 8024a12:	fb1e f101 	smulbb	r1, lr, r1
 8024a16:	b292      	uxth	r2, r2
 8024a18:	f102 0c01 	add.w	ip, r2, #1
 8024a1c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8024a20:	1212      	asrs	r2, r2, #8
 8024a22:	703a      	strb	r2, [r7, #0]
 8024a24:	787a      	ldrb	r2, [r7, #1]
 8024a26:	fb02 0003 	mla	r0, r2, r3, r0
 8024a2a:	b280      	uxth	r0, r0
 8024a2c:	1c42      	adds	r2, r0, #1
 8024a2e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024a32:	78ba      	ldrb	r2, [r7, #2]
 8024a34:	fb02 1303 	mla	r3, r2, r3, r1
 8024a38:	1200      	asrs	r0, r0, #8
 8024a3a:	b29b      	uxth	r3, r3
 8024a3c:	7078      	strb	r0, [r7, #1]
 8024a3e:	f103 0e01 	add.w	lr, r3, #1
 8024a42:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8024a46:	121b      	asrs	r3, r3, #8
 8024a48:	70bb      	strb	r3, [r7, #2]
 8024a4a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024a4c:	3703      	adds	r7, #3
 8024a4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024a52:	441d      	add	r5, r3
 8024a54:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024a56:	441e      	add	r6, r3
 8024a58:	e74d      	b.n	80248f6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8024a5a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024a5c:	3c01      	subs	r4, #1
 8024a5e:	f10b 0b03 	add.w	fp, fp, #3
 8024a62:	441d      	add	r5, r3
 8024a64:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024a66:	441e      	add	r6, r3
 8024a68:	e725      	b.n	80248b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024a6a:	d021      	beq.n	8024ab0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8024a6c:	1e63      	subs	r3, r4, #1
 8024a6e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8024a70:	fb00 5003 	mla	r0, r0, r3, r5
 8024a74:	1400      	asrs	r0, r0, #16
 8024a76:	f53f af3a 	bmi.w	80248ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8024a7a:	3901      	subs	r1, #1
 8024a7c:	4288      	cmp	r0, r1
 8024a7e:	f6bf af36 	bge.w	80248ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8024a82:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8024a84:	fb01 6303 	mla	r3, r1, r3, r6
 8024a88:	141b      	asrs	r3, r3, #16
 8024a8a:	f53f af30 	bmi.w	80248ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8024a8e:	3a01      	subs	r2, #1
 8024a90:	4293      	cmp	r3, r2
 8024a92:	f6bf af2c 	bge.w	80248ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8024a96:	f10b 0c03 	add.w	ip, fp, #3
 8024a9a:	46a6      	mov	lr, r4
 8024a9c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8024aa0:	f1be 0f00 	cmp.w	lr, #0
 8024aa4:	dc79      	bgt.n	8024b9a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8024aa6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8024aaa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024aae:	44a3      	add	fp, r4
 8024ab0:	9b07      	ldr	r3, [sp, #28]
 8024ab2:	2b00      	cmp	r3, #0
 8024ab4:	f340 8123 	ble.w	8024cfe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8024ab8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024abc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024abe:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024ac2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024ac6:	eef0 6a48 	vmov.f32	s13, s16
 8024aca:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024ace:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024ad2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024ad6:	ee16 5a90 	vmov	r5, s13
 8024ada:	eef0 6a68 	vmov.f32	s13, s17
 8024ade:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024ae2:	ee16 6a90 	vmov	r6, s13
 8024ae6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024aea:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024aee:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024af2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024af6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024afa:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024afe:	ee18 2a10 	vmov	r2, s16
 8024b02:	eeb0 8a47 	vmov.f32	s16, s14
 8024b06:	fb92 f3f3 	sdiv	r3, r2, r3
 8024b0a:	ee18 2a90 	vmov	r2, s17
 8024b0e:	9327      	str	r3, [sp, #156]	; 0x9c
 8024b10:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024b12:	eef0 8a67 	vmov.f32	s17, s15
 8024b16:	fb92 f3f3 	sdiv	r3, r2, r3
 8024b1a:	9328      	str	r3, [sp, #160]	; 0xa0
 8024b1c:	9b07      	ldr	r3, [sp, #28]
 8024b1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024b20:	3b01      	subs	r3, #1
 8024b22:	9307      	str	r3, [sp, #28]
 8024b24:	bf08      	it	eq
 8024b26:	4614      	moveq	r4, r2
 8024b28:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024b2a:	bf18      	it	ne
 8024b2c:	461c      	movne	r4, r3
 8024b2e:	e6b4      	b.n	802489a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8024b30:	2900      	cmp	r1, #0
 8024b32:	f43f af3c 	beq.w	80249ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 8024b36:	eb09 0003 	add.w	r0, r9, r3
 8024b3a:	0843      	lsrs	r3, r0, #1
 8024b3c:	07c0      	lsls	r0, r0, #31
 8024b3e:	f818 3003 	ldrb.w	r3, [r8, r3]
 8024b42:	bf54      	ite	pl
 8024b44:	f003 030f 	andpl.w	r3, r3, #15
 8024b48:	111b      	asrmi	r3, r3, #4
 8024b4a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024b4e:	b2db      	uxtb	r3, r3
 8024b50:	930a      	str	r3, [sp, #40]	; 0x28
 8024b52:	e72c      	b.n	80249ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 8024b54:	703a      	strb	r2, [r7, #0]
 8024b56:	7078      	strb	r0, [r7, #1]
 8024b58:	f887 e002 	strb.w	lr, [r7, #2]
 8024b5c:	e775      	b.n	8024a4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8024b5e:	1c5a      	adds	r2, r3, #1
 8024b60:	f53f af73 	bmi.w	8024a4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8024b64:	4594      	cmp	ip, r2
 8024b66:	f6ff af70 	blt.w	8024a4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8024b6a:	1c42      	adds	r2, r0, #1
 8024b6c:	f53f af6d 	bmi.w	8024a4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8024b70:	4596      	cmp	lr, r2
 8024b72:	f6ff af6a 	blt.w	8024a4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8024b76:	9302      	str	r3, [sp, #8]
 8024b78:	fa0f f38e 	sxth.w	r3, lr
 8024b7c:	9a08      	ldr	r2, [sp, #32]
 8024b7e:	9301      	str	r3, [sp, #4]
 8024b80:	fa0f f38c 	sxth.w	r3, ip
 8024b84:	9105      	str	r1, [sp, #20]
 8024b86:	4639      	mov	r1, r7
 8024b88:	9300      	str	r3, [sp, #0]
 8024b8a:	464b      	mov	r3, r9
 8024b8c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8024b90:	4642      	mov	r2, r8
 8024b92:	9811      	ldr	r0, [sp, #68]	; 0x44
 8024b94:	f7ff fd70 	bl	8024678 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8024b98:	e757      	b.n	8024a4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8024b9a:	142a      	asrs	r2, r5, #16
 8024b9c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024ba0:	1433      	asrs	r3, r6, #16
 8024ba2:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8024ba6:	fb09 2303 	mla	r3, r9, r3, r2
 8024baa:	085a      	lsrs	r2, r3, #1
 8024bac:	07d9      	lsls	r1, r3, #31
 8024bae:	f818 2002 	ldrb.w	r2, [r8, r2]
 8024bb2:	bf54      	ite	pl
 8024bb4:	f002 020f 	andpl.w	r2, r2, #15
 8024bb8:	1112      	asrmi	r2, r2, #4
 8024bba:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8024bbe:	b2d2      	uxtb	r2, r2
 8024bc0:	2800      	cmp	r0, #0
 8024bc2:	f000 8085 	beq.w	8024cd0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8024bc6:	f103 0a01 	add.w	sl, r3, #1
 8024bca:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8024bce:	f01a 0f01 	tst.w	sl, #1
 8024bd2:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024bd6:	bf0c      	ite	eq
 8024bd8:	f001 010f 	andeq.w	r1, r1, #15
 8024bdc:	1109      	asrne	r1, r1, #4
 8024bde:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024be2:	b2c9      	uxtb	r1, r1
 8024be4:	910f      	str	r1, [sp, #60]	; 0x3c
 8024be6:	b1df      	cbz	r7, 8024c20 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8024be8:	444b      	add	r3, r9
 8024bea:	0859      	lsrs	r1, r3, #1
 8024bec:	f013 0f01 	tst.w	r3, #1
 8024bf0:	f103 0301 	add.w	r3, r3, #1
 8024bf4:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024bf8:	bf0c      	ite	eq
 8024bfa:	f001 010f 	andeq.w	r1, r1, #15
 8024bfe:	1109      	asrne	r1, r1, #4
 8024c00:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024c04:	b2c9      	uxtb	r1, r1
 8024c06:	910b      	str	r1, [sp, #44]	; 0x2c
 8024c08:	0859      	lsrs	r1, r3, #1
 8024c0a:	07db      	lsls	r3, r3, #31
 8024c0c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024c10:	bf54      	ite	pl
 8024c12:	f001 010f 	andpl.w	r1, r1, #15
 8024c16:	1109      	asrmi	r1, r1, #4
 8024c18:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024c1c:	b2c9      	uxtb	r1, r1
 8024c1e:	9110      	str	r1, [sp, #64]	; 0x40
 8024c20:	b280      	uxth	r0, r0
 8024c22:	b2bf      	uxth	r7, r7
 8024c24:	fb00 f307 	mul.w	r3, r0, r7
 8024c28:	0100      	lsls	r0, r0, #4
 8024c2a:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8024c2e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8024c32:	1ac0      	subs	r0, r0, r3
 8024c34:	b2bf      	uxth	r7, r7
 8024c36:	b280      	uxth	r0, r0
 8024c38:	1bc9      	subs	r1, r1, r7
 8024c3a:	fa1f fa81 	uxth.w	sl, r1
 8024c3e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024c40:	4348      	muls	r0, r1
 8024c42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8024c44:	fb02 020a 	mla	r2, r2, sl, r0
 8024c48:	fb07 2701 	mla	r7, r7, r1, r2
 8024c4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024c4e:	fb03 7302 	mla	r3, r3, r2, r7
 8024c52:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024c56:	b393      	cbz	r3, 8024cbe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8024c58:	4a2b      	ldr	r2, [pc, #172]	; (8024d08 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 8024c5a:	2bff      	cmp	r3, #255	; 0xff
 8024c5c:	6811      	ldr	r1, [r2, #0]
 8024c5e:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8024c62:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8024c66:	b2c9      	uxtb	r1, r1
 8024c68:	d042      	beq.n	8024cf0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8024c6a:	b298      	uxth	r0, r3
 8024c6c:	43db      	mvns	r3, r3
 8024c6e:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8024c72:	fb11 f100 	smulbb	r1, r1, r0
 8024c76:	b2db      	uxtb	r3, r3
 8024c78:	fb17 f700 	smulbb	r7, r7, r0
 8024c7c:	fb02 1103 	mla	r1, r2, r3, r1
 8024c80:	fb1a f000 	smulbb	r0, sl, r0
 8024c84:	b289      	uxth	r1, r1
 8024c86:	1c4a      	adds	r2, r1, #1
 8024c88:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024c8c:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8024c90:	fb02 7703 	mla	r7, r2, r3, r7
 8024c94:	1209      	asrs	r1, r1, #8
 8024c96:	b2bf      	uxth	r7, r7
 8024c98:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8024c9c:	1c7a      	adds	r2, r7, #1
 8024c9e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8024ca2:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8024ca6:	fb02 0303 	mla	r3, r2, r3, r0
 8024caa:	123f      	asrs	r7, r7, #8
 8024cac:	b29b      	uxth	r3, r3
 8024cae:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8024cb2:	1c5a      	adds	r2, r3, #1
 8024cb4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024cb8:	121b      	asrs	r3, r3, #8
 8024cba:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8024cbe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024cc0:	f10c 0c03 	add.w	ip, ip, #3
 8024cc4:	f10e 3eff 	add.w	lr, lr, #4294967295
 8024cc8:	441d      	add	r5, r3
 8024cca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024ccc:	441e      	add	r6, r3
 8024cce:	e6e7      	b.n	8024aa0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8024cd0:	2f00      	cmp	r7, #0
 8024cd2:	d0a5      	beq.n	8024c20 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8024cd4:	444b      	add	r3, r9
 8024cd6:	0859      	lsrs	r1, r3, #1
 8024cd8:	07db      	lsls	r3, r3, #31
 8024cda:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024cde:	bf54      	ite	pl
 8024ce0:	f001 010f 	andpl.w	r1, r1, #15
 8024ce4:	1109      	asrmi	r1, r1, #4
 8024ce6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024cea:	b2c9      	uxtb	r1, r1
 8024cec:	910b      	str	r1, [sp, #44]	; 0x2c
 8024cee:	e797      	b.n	8024c20 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8024cf0:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8024cf4:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8024cf8:	f80c ac01 	strb.w	sl, [ip, #-1]
 8024cfc:	e7df      	b.n	8024cbe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8024cfe:	b013      	add	sp, #76	; 0x4c
 8024d00:	ecbd 8b08 	vpop	{d8-d11}
 8024d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024d08:	200567a8 	.word	0x200567a8

08024d0c <CRC_Lock>:
 8024d0c:	4a20      	ldr	r2, [pc, #128]	; (8024d90 <CRC_Lock+0x84>)
 8024d0e:	b530      	push	{r4, r5, lr}
 8024d10:	6813      	ldr	r3, [r2, #0]
 8024d12:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8024d16:	f24c 2540 	movw	r5, #49728	; 0xc240
 8024d1a:	f023 0301 	bic.w	r3, r3, #1
 8024d1e:	6013      	str	r3, [r2, #0]
 8024d20:	4b1c      	ldr	r3, [pc, #112]	; (8024d94 <CRC_Lock+0x88>)
 8024d22:	681a      	ldr	r2, [r3, #0]
 8024d24:	4022      	ands	r2, r4
 8024d26:	42aa      	cmp	r2, r5
 8024d28:	d005      	beq.n	8024d36 <CRC_Lock+0x2a>
 8024d2a:	681b      	ldr	r3, [r3, #0]
 8024d2c:	f24c 2270 	movw	r2, #49776	; 0xc270
 8024d30:	4023      	ands	r3, r4
 8024d32:	4293      	cmp	r3, r2
 8024d34:	d124      	bne.n	8024d80 <CRC_Lock+0x74>
 8024d36:	4b18      	ldr	r3, [pc, #96]	; (8024d98 <CRC_Lock+0x8c>)
 8024d38:	681b      	ldr	r3, [r3, #0]
 8024d3a:	bb0b      	cbnz	r3, 8024d80 <CRC_Lock+0x74>
 8024d3c:	4b17      	ldr	r3, [pc, #92]	; (8024d9c <CRC_Lock+0x90>)
 8024d3e:	681a      	ldr	r2, [r3, #0]
 8024d40:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8024d44:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8024d48:	d00d      	beq.n	8024d66 <CRC_Lock+0x5a>
 8024d4a:	681a      	ldr	r2, [r3, #0]
 8024d4c:	f240 4483 	movw	r4, #1155	; 0x483
 8024d50:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8024d54:	42a2      	cmp	r2, r4
 8024d56:	d006      	beq.n	8024d66 <CRC_Lock+0x5a>
 8024d58:	681b      	ldr	r3, [r3, #0]
 8024d5a:	f240 4285 	movw	r2, #1157	; 0x485
 8024d5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024d62:	4293      	cmp	r3, r2
 8024d64:	d10c      	bne.n	8024d80 <CRC_Lock+0x74>
 8024d66:	4b0e      	ldr	r3, [pc, #56]	; (8024da0 <CRC_Lock+0x94>)
 8024d68:	2201      	movs	r2, #1
 8024d6a:	601a      	str	r2, [r3, #0]
 8024d6c:	681a      	ldr	r2, [r3, #0]
 8024d6e:	2a00      	cmp	r2, #0
 8024d70:	d1fc      	bne.n	8024d6c <CRC_Lock+0x60>
 8024d72:	4b0c      	ldr	r3, [pc, #48]	; (8024da4 <CRC_Lock+0x98>)
 8024d74:	6018      	str	r0, [r3, #0]
 8024d76:	6818      	ldr	r0, [r3, #0]
 8024d78:	1a43      	subs	r3, r0, r1
 8024d7a:	4258      	negs	r0, r3
 8024d7c:	4158      	adcs	r0, r3
 8024d7e:	bd30      	pop	{r4, r5, pc}
 8024d80:	4b09      	ldr	r3, [pc, #36]	; (8024da8 <CRC_Lock+0x9c>)
 8024d82:	2201      	movs	r2, #1
 8024d84:	601a      	str	r2, [r3, #0]
 8024d86:	681a      	ldr	r2, [r3, #0]
 8024d88:	2a00      	cmp	r2, #0
 8024d8a:	d1fc      	bne.n	8024d86 <CRC_Lock+0x7a>
 8024d8c:	4b07      	ldr	r3, [pc, #28]	; (8024dac <CRC_Lock+0xa0>)
 8024d8e:	e7f1      	b.n	8024d74 <CRC_Lock+0x68>
 8024d90:	e0002000 	.word	0xe0002000
 8024d94:	e000ed00 	.word	0xe000ed00
 8024d98:	e0042000 	.word	0xe0042000
 8024d9c:	5c001000 	.word	0x5c001000
 8024da0:	58024c08 	.word	0x58024c08
 8024da4:	58024c00 	.word	0x58024c00
 8024da8:	40023008 	.word	0x40023008
 8024dac:	40023000 	.word	0x40023000

08024db0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8024db0:	6101      	str	r1, [r0, #16]
 8024db2:	4770      	bx	lr

08024db4 <_ZN8touchgfx8Gestures4tickEv>:
 8024db4:	7b83      	ldrb	r3, [r0, #14]
 8024db6:	b14b      	cbz	r3, 8024dcc <_ZN8touchgfx8Gestures4tickEv+0x18>
 8024db8:	8903      	ldrh	r3, [r0, #8]
 8024dba:	3301      	adds	r3, #1
 8024dbc:	b29b      	uxth	r3, r3
 8024dbe:	2b07      	cmp	r3, #7
 8024dc0:	8103      	strh	r3, [r0, #8]
 8024dc2:	bf81      	itttt	hi
 8024dc4:	2300      	movhi	r3, #0
 8024dc6:	8143      	strhhi	r3, [r0, #10]
 8024dc8:	8183      	strhhi	r3, [r0, #12]
 8024dca:	7383      	strbhi	r3, [r0, #14]
 8024dcc:	4770      	bx	lr
	...

08024dd0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8024dd0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8024dd4:	4604      	mov	r4, r0
 8024dd6:	4698      	mov	r8, r3
 8024dd8:	8880      	ldrh	r0, [r0, #4]
 8024dda:	4617      	mov	r7, r2
 8024ddc:	4b1d      	ldr	r3, [pc, #116]	; (8024e54 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8024dde:	460e      	mov	r6, r1
 8024de0:	f8ad 0006 	strh.w	r0, [sp, #6]
 8024de4:	eba8 0000 	sub.w	r0, r8, r0
 8024de8:	9300      	str	r3, [sp, #0]
 8024dea:	2300      	movs	r3, #0
 8024dec:	b280      	uxth	r0, r0
 8024dee:	8aa2      	ldrh	r2, [r4, #20]
 8024df0:	f88d 3004 	strb.w	r3, [sp, #4]
 8024df4:	b203      	sxth	r3, r0
 8024df6:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8024dfa:	88e1      	ldrh	r1, [r4, #6]
 8024dfc:	2b00      	cmp	r3, #0
 8024dfe:	f8ad 800a 	strh.w	r8, [sp, #10]
 8024e02:	f8ad 1008 	strh.w	r1, [sp, #8]
 8024e06:	bfb8      	it	lt
 8024e08:	4240      	neglt	r0, r0
 8024e0a:	f8ad 500c 	strh.w	r5, [sp, #12]
 8024e0e:	bfb8      	it	lt
 8024e10:	b203      	sxthlt	r3, r0
 8024e12:	4293      	cmp	r3, r2
 8024e14:	dc08      	bgt.n	8024e28 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8024e16:	1a69      	subs	r1, r5, r1
 8024e18:	b289      	uxth	r1, r1
 8024e1a:	b20b      	sxth	r3, r1
 8024e1c:	2b00      	cmp	r3, #0
 8024e1e:	bfbc      	itt	lt
 8024e20:	4249      	neglt	r1, r1
 8024e22:	b20b      	sxthlt	r3, r1
 8024e24:	429a      	cmp	r2, r3
 8024e26:	da13      	bge.n	8024e50 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8024e28:	6920      	ldr	r0, [r4, #16]
 8024e2a:	4669      	mov	r1, sp
 8024e2c:	eba8 0606 	sub.w	r6, r8, r6
 8024e30:	1bef      	subs	r7, r5, r7
 8024e32:	6803      	ldr	r3, [r0, #0]
 8024e34:	685b      	ldr	r3, [r3, #4]
 8024e36:	4798      	blx	r3
 8024e38:	2300      	movs	r3, #0
 8024e3a:	2001      	movs	r0, #1
 8024e3c:	8166      	strh	r6, [r4, #10]
 8024e3e:	8123      	strh	r3, [r4, #8]
 8024e40:	81a7      	strh	r7, [r4, #12]
 8024e42:	f8a4 8004 	strh.w	r8, [r4, #4]
 8024e46:	80e5      	strh	r5, [r4, #6]
 8024e48:	73a0      	strb	r0, [r4, #14]
 8024e4a:	b004      	add	sp, #16
 8024e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024e50:	2000      	movs	r0, #0
 8024e52:	e7fa      	b.n	8024e4a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8024e54:	0802df0c 	.word	0x0802df0c

08024e58 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8024e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024e5a:	461e      	mov	r6, r3
 8024e5c:	1e4b      	subs	r3, r1, #1
 8024e5e:	b085      	sub	sp, #20
 8024e60:	4604      	mov	r4, r0
 8024e62:	2b01      	cmp	r3, #1
 8024e64:	460d      	mov	r5, r1
 8024e66:	4617      	mov	r7, r2
 8024e68:	d84b      	bhi.n	8024f02 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8024e6a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8024e6e:	1cd3      	adds	r3, r2, #3
 8024e70:	b29b      	uxth	r3, r3
 8024e72:	2b06      	cmp	r3, #6
 8024e74:	d916      	bls.n	8024ea4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8024e76:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8024f18 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8024e7a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8024e7e:	f8cd c004 	str.w	ip, [sp, #4]
 8024e82:	f04f 0c00 	mov.w	ip, #0
 8024e86:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8024e8a:	6900      	ldr	r0, [r0, #16]
 8024e8c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8024e90:	a901      	add	r1, sp, #4
 8024e92:	f88d c008 	strb.w	ip, [sp, #8]
 8024e96:	f8ad 200a 	strh.w	r2, [sp, #10]
 8024e9a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024e9e:	6803      	ldr	r3, [r0, #0]
 8024ea0:	689b      	ldr	r3, [r3, #8]
 8024ea2:	4798      	blx	r3
 8024ea4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024ea8:	1cd3      	adds	r3, r2, #3
 8024eaa:	b29b      	uxth	r3, r3
 8024eac:	2b06      	cmp	r3, #6
 8024eae:	d916      	bls.n	8024ede <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024eb0:	f8df c064 	ldr.w	ip, [pc, #100]	; 8024f18 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8024eb4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8024eb8:	f8cd c004 	str.w	ip, [sp, #4]
 8024ebc:	f04f 0c01 	mov.w	ip, #1
 8024ec0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8024ec4:	6920      	ldr	r0, [r4, #16]
 8024ec6:	f8ad 100c 	strh.w	r1, [sp, #12]
 8024eca:	a901      	add	r1, sp, #4
 8024ecc:	f88d c008 	strb.w	ip, [sp, #8]
 8024ed0:	f8ad 200a 	strh.w	r2, [sp, #10]
 8024ed4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024ed8:	6803      	ldr	r3, [r0, #0]
 8024eda:	689b      	ldr	r3, [r3, #8]
 8024edc:	4798      	blx	r3
 8024ede:	4b0d      	ldr	r3, [pc, #52]	; (8024f14 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8024ee0:	a901      	add	r1, sp, #4
 8024ee2:	6920      	ldr	r0, [r4, #16]
 8024ee4:	9301      	str	r3, [sp, #4]
 8024ee6:	2300      	movs	r3, #0
 8024ee8:	f88d 5008 	strb.w	r5, [sp, #8]
 8024eec:	f8ad 700a 	strh.w	r7, [sp, #10]
 8024ef0:	f8ad 600c 	strh.w	r6, [sp, #12]
 8024ef4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024ef8:	6803      	ldr	r3, [r0, #0]
 8024efa:	681b      	ldr	r3, [r3, #0]
 8024efc:	4798      	blx	r3
 8024efe:	b005      	add	sp, #20
 8024f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024f02:	2900      	cmp	r1, #0
 8024f04:	d1eb      	bne.n	8024ede <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024f06:	80a2      	strh	r2, [r4, #4]
 8024f08:	80c6      	strh	r6, [r0, #6]
 8024f0a:	60a1      	str	r1, [r4, #8]
 8024f0c:	81a1      	strh	r1, [r4, #12]
 8024f0e:	73a1      	strb	r1, [r4, #14]
 8024f10:	e7e5      	b.n	8024ede <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024f12:	bf00      	nop
 8024f14:	0802def8 	.word	0x0802def8
 8024f18:	0802df20 	.word	0x0802df20

08024f1c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>:
 8024f1c:	10c9      	asrs	r1, r1, #3
 8024f1e:	2900      	cmp	r1, #0
 8024f20:	bfb8      	it	lt
 8024f22:	4249      	neglt	r1, r1
 8024f24:	2801      	cmp	r0, #1
 8024f26:	d108      	bne.n	8024f3a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 8024f28:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8024f2c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8024f30:	4601      	mov	r1, r0
 8024f32:	dd02      	ble.n	8024f3a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 8024f34:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8024f38:	4770      	bx	lr
 8024f3a:	29ff      	cmp	r1, #255	; 0xff
 8024f3c:	bfa8      	it	ge
 8024f3e:	21ff      	movge	r1, #255	; 0xff
 8024f40:	4608      	mov	r0, r1
 8024f42:	4770      	bx	lr

08024f44 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8024f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f48:	688c      	ldr	r4, [r1, #8]
 8024f4a:	b087      	sub	sp, #28
 8024f4c:	4607      	mov	r7, r0
 8024f4e:	2c00      	cmp	r4, #0
 8024f50:	db2b      	blt.n	8024faa <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8024f52:	6803      	ldr	r3, [r0, #0]
 8024f54:	691a      	ldr	r2, [r3, #16]
 8024f56:	42a2      	cmp	r2, r4
 8024f58:	dd27      	ble.n	8024faa <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8024f5a:	685a      	ldr	r2, [r3, #4]
 8024f5c:	695e      	ldr	r6, [r3, #20]
 8024f5e:	68cd      	ldr	r5, [r1, #12]
 8024f60:	fb06 2604 	mla	r6, r6, r4, r2
 8024f64:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8024f68:	698a      	ldr	r2, [r1, #24]
 8024f6a:	f893 a008 	ldrb.w	sl, [r3, #8]
 8024f6e:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8024f72:	9205      	str	r2, [sp, #20]
 8024f74:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8024f78:	9b05      	ldr	r3, [sp, #20]
 8024f7a:	6839      	ldr	r1, [r7, #0]
 8024f7c:	eb03 0c02 	add.w	ip, r3, r2
 8024f80:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8024f84:	68c9      	ldr	r1, [r1, #12]
 8024f86:	1898      	adds	r0, r3, r2
 8024f88:	4288      	cmp	r0, r1
 8024f8a:	db02      	blt.n	8024f92 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8024f8c:	1a8b      	subs	r3, r1, r2
 8024f8e:	2b00      	cmp	r3, #0
 8024f90:	dd09      	ble.n	8024fa6 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8024f92:	6878      	ldr	r0, [r7, #4]
 8024f94:	6801      	ldr	r1, [r0, #0]
 8024f96:	9400      	str	r4, [sp, #0]
 8024f98:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8024f9c:	4653      	mov	r3, sl
 8024f9e:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8024fa2:	4631      	mov	r1, r6
 8024fa4:	47d8      	blx	fp
 8024fa6:	3d01      	subs	r5, #1
 8024fa8:	d1e4      	bne.n	8024f74 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 8024faa:	b007      	add	sp, #28
 8024fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024fb0 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8024fb0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8024fb4:	b90b      	cbnz	r3, 8024fba <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 8024fb6:	f001 b991 	b.w	80262dc <_ZN8touchgfx7Outline6lineToEii>
 8024fba:	4770      	bx	lr

08024fbc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8024fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024fc0:	4604      	mov	r4, r0
 8024fc2:	2600      	movs	r6, #0
 8024fc4:	4b8f      	ldr	r3, [pc, #572]	; (8025204 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 8024fc6:	f100 0518 	add.w	r5, r0, #24
 8024fca:	f104 0730 	add.w	r7, r4, #48	; 0x30
 8024fce:	b086      	sub	sp, #24
 8024fd0:	4690      	mov	r8, r2
 8024fd2:	e9c0 3100 	strd	r3, r1, [r0]
 8024fd6:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8024fda:	e9c0 6604 	strd	r6, r6, [r0, #16]
 8024fde:	4628      	mov	r0, r5
 8024fe0:	f001 fba0 	bl	8026724 <_ZN8touchgfx15RenderingBufferC1Ev>
 8024fe4:	4638      	mov	r0, r7
 8024fe6:	f000 fb45 	bl	8025674 <_ZN8touchgfx7OutlineC1Ev>
 8024fea:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8024fee:	f001 fb41 	bl	8026674 <_ZN8touchgfx8ScanlineC1Ev>
 8024ff2:	2301      	movs	r3, #1
 8024ff4:	f884 609c 	strb.w	r6, [r4, #156]	; 0x9c
 8024ff8:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
 8024ffc:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 8025000:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8025004:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 8025008:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 802500c:	e9c4 662a 	strd	r6, r6, [r4, #168]	; 0xa8
 8025010:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
 8025014:	f7f2 ff36 	bl	8017e84 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8025018:	b928      	cbnz	r0, 8025026 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x6a>
 802501a:	4b7b      	ldr	r3, [pc, #492]	; (8025208 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 802501c:	212d      	movs	r1, #45	; 0x2d
 802501e:	4a7b      	ldr	r2, [pc, #492]	; (802520c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8025020:	487b      	ldr	r0, [pc, #492]	; (8025210 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 8025022:	f001 fccd 	bl	80269c0 <__assert_func>
 8025026:	f9b8 2000 	ldrsh.w	r2, [r8]
 802502a:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 802502e:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8025032:	4410      	add	r0, r2
 8025034:	9602      	str	r6, [sp, #8]
 8025036:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 802503a:	b280      	uxth	r0, r0
 802503c:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8025040:	fa0f fa80 	sxth.w	sl, r0
 8025044:	f1ba 0f00 	cmp.w	sl, #0
 8025048:	dd70      	ble.n	802512c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 802504a:	4591      	cmp	r9, r2
 802504c:	dd6e      	ble.n	802512c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 802504e:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8025052:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8025056:	440b      	add	r3, r1
 8025058:	b29b      	uxth	r3, r3
 802505a:	b21e      	sxth	r6, r3
 802505c:	2e00      	cmp	r6, #0
 802505e:	dd65      	ble.n	802512c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8025060:	458e      	cmp	lr, r1
 8025062:	dd63      	ble.n	802512c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8025064:	45d1      	cmp	r9, sl
 8025066:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 802506a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802506e:	bfb8      	it	lt
 8025070:	fa1f f089 	uxthlt.w	r0, r9
 8025074:	45b6      	cmp	lr, r6
 8025076:	f8ad 2008 	strh.w	r2, [sp, #8]
 802507a:	bfb8      	it	lt
 802507c:	fa1f f38e 	uxthlt.w	r3, lr
 8025080:	1a80      	subs	r0, r0, r2
 8025082:	f8ad 100a 	strh.w	r1, [sp, #10]
 8025086:	1a5b      	subs	r3, r3, r1
 8025088:	f8ad 000c 	strh.w	r0, [sp, #12]
 802508c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025090:	f10d 0808 	add.w	r8, sp, #8
 8025094:	ae04      	add	r6, sp, #16
 8025096:	e898 0003 	ldmia.w	r8, {r0, r1}
 802509a:	e886 0003 	stmia.w	r6, {r0, r1}
 802509e:	f8dc 3000 	ldr.w	r3, [ip]
 80250a2:	4660      	mov	r0, ip
 80250a4:	4631      	mov	r1, r6
 80250a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80250a8:	4798      	blx	r3
 80250aa:	6861      	ldr	r1, [r4, #4]
 80250ac:	4640      	mov	r0, r8
 80250ae:	3104      	adds	r1, #4
 80250b0:	f7f4 fa02 	bl	80194b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80250b4:	4630      	mov	r0, r6
 80250b6:	f7f4 fa17 	bl	80194e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80250ba:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 80250be:	f7f2 fe71 	bl	8017da4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 80250c2:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 80250c6:	4638      	mov	r0, r7
 80250c8:	f000 fab0 	bl	802562c <_ZN8touchgfx7Outline5resetEv>
 80250cc:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80250d0:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80250d4:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 80250d8:	015b      	lsls	r3, r3, #5
 80250da:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
 80250de:	0152      	lsls	r2, r2, #5
 80250e0:	60e3      	str	r3, [r4, #12]
 80250e2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80250e6:	60a2      	str	r2, [r4, #8]
 80250e8:	015b      	lsls	r3, r3, #5
 80250ea:	6123      	str	r3, [r4, #16]
 80250ec:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80250f0:	015b      	lsls	r3, r3, #5
 80250f2:	6163      	str	r3, [r4, #20]
 80250f4:	4b47      	ldr	r3, [pc, #284]	; (8025214 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 80250f6:	6818      	ldr	r0, [r3, #0]
 80250f8:	6803      	ldr	r3, [r0, #0]
 80250fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80250fc:	4798      	blx	r3
 80250fe:	4606      	mov	r6, r0
 8025100:	f7e1 fa7a 	bl	80065f8 <_ZN8touchgfx3HAL3lcdEv>
 8025104:	6803      	ldr	r3, [r0, #0]
 8025106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025108:	4798      	blx	r3
 802510a:	4607      	mov	r7, r0
 802510c:	f7e1 fa74 	bl	80065f8 <_ZN8touchgfx3HAL3lcdEv>
 8025110:	6803      	ldr	r3, [r0, #0]
 8025112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025114:	4798      	blx	r3
 8025116:	280d      	cmp	r0, #13
 8025118:	d854      	bhi.n	80251c4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x208>
 802511a:	e8df f000 	tbb	[pc, r0]
 802511e:	554b      	.short	0x554b
 8025120:	2b6e0a66 	.word	0x2b6e0a66
 8025124:	5f5f5f3b 	.word	0x5f5f5f3b
 8025128:	6e6e5f5f 	.word	0x6e6e5f5f
 802512c:	2300      	movs	r3, #0
 802512e:	9303      	str	r3, [sp, #12]
 8025130:	e7ae      	b.n	8025090 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd4>
 8025132:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8025136:	2108      	movs	r1, #8
 8025138:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802513c:	fb92 f1f1 	sdiv	r1, r2, r1
 8025140:	fb07 1303 	mla	r3, r7, r3, r1
 8025144:	441e      	add	r6, r3
 8025146:	4253      	negs	r3, r2
 8025148:	f002 0207 	and.w	r2, r2, #7
 802514c:	f003 0307 	and.w	r3, r3, #7
 8025150:	bf58      	it	pl
 8025152:	425a      	negpl	r2, r3
 8025154:	b2d2      	uxtb	r2, r2
 8025156:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 802515a:	4628      	mov	r0, r5
 802515c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8025160:	6721      	str	r1, [r4, #112]	; 0x70
 8025162:	e9cd 1700 	strd	r1, r7, [sp]
 8025166:	4631      	mov	r1, r6
 8025168:	f001 fae8 	bl	802673c <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 802516c:	4620      	mov	r0, r4
 802516e:	b006      	add	sp, #24
 8025170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025174:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8025178:	2104      	movs	r1, #4
 802517a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802517e:	fb92 f1f1 	sdiv	r1, r2, r1
 8025182:	fb07 1303 	mla	r3, r7, r3, r1
 8025186:	441e      	add	r6, r3
 8025188:	4253      	negs	r3, r2
 802518a:	f002 0203 	and.w	r2, r2, #3
 802518e:	f003 0303 	and.w	r3, r3, #3
 8025192:	e7dd      	b.n	8025150 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8025194:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8025198:	2102      	movs	r1, #2
 802519a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802519e:	2a00      	cmp	r2, #0
 80251a0:	fb92 f1f1 	sdiv	r1, r2, r1
 80251a4:	f002 0201 	and.w	r2, r2, #1
 80251a8:	fb07 1303 	mla	r3, r7, r3, r1
 80251ac:	bfb8      	it	lt
 80251ae:	4252      	neglt	r2, r2
 80251b0:	441e      	add	r6, r3
 80251b2:	e7cf      	b.n	8025154 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x198>
 80251b4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80251b8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80251bc:	437b      	muls	r3, r7
 80251be:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80251c2:	441e      	add	r6, r3
 80251c4:	2200      	movs	r2, #0
 80251c6:	e7c6      	b.n	8025156 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x19a>
 80251c8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80251cc:	2103      	movs	r1, #3
 80251ce:	fb07 f203 	mul.w	r2, r7, r3
 80251d2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80251d6:	fb13 2301 	smlabb	r3, r3, r1, r2
 80251da:	e7f2      	b.n	80251c2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 80251dc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80251e0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80251e4:	fb07 2303 	mla	r3, r7, r3, r2
 80251e8:	e7eb      	b.n	80251c2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 80251ea:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80251ee:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80251f2:	437b      	muls	r3, r7
 80251f4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80251f8:	e7e3      	b.n	80251c2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 80251fa:	4b07      	ldr	r3, [pc, #28]	; (8025218 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x25c>)
 80251fc:	216c      	movs	r1, #108	; 0x6c
 80251fe:	4a03      	ldr	r2, [pc, #12]	; (802520c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8025200:	e70e      	b.n	8025020 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x64>
 8025202:	bf00      	nop
 8025204:	0802f33c 	.word	0x0802f33c
 8025208:	0802f287 	.word	0x0802f287
 802520c:	0802f344 	.word	0x0802f344
 8025210:	0802f2e3 	.word	0x0802f2e3
 8025214:	20056780 	.word	0x20056780
 8025218:	0802f317 	.word	0x0802f317

0802521c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 802521c:	6812      	ldr	r2, [r2, #0]
 802521e:	2a00      	cmp	r2, #0
 8025220:	db0b      	blt.n	802523a <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 8025222:	9800      	ldr	r0, [sp, #0]
 8025224:	6800      	ldr	r0, [r0, #0]
 8025226:	4290      	cmp	r0, r2
 8025228:	bfd4      	ite	le
 802522a:	2002      	movle	r0, #2
 802522c:	2000      	movgt	r0, #0
 802522e:	680a      	ldr	r2, [r1, #0]
 8025230:	2a00      	cmp	r2, #0
 8025232:	da04      	bge.n	802523e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 8025234:	f040 0004 	orr.w	r0, r0, #4
 8025238:	4770      	bx	lr
 802523a:	2001      	movs	r0, #1
 802523c:	e7f7      	b.n	802522e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 802523e:	681b      	ldr	r3, [r3, #0]
 8025240:	4293      	cmp	r3, r2
 8025242:	bfd8      	it	le
 8025244:	f040 0008 	orrle.w	r0, r0, #8
 8025248:	4770      	bx	lr
	...

0802524c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802524c:	4b07      	ldr	r3, [pc, #28]	; (802526c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 802524e:	b510      	push	{r4, lr}
 8025250:	781b      	ldrb	r3, [r3, #0]
 8025252:	2b01      	cmp	r3, #1
 8025254:	d108      	bne.n	8025268 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 8025256:	6843      	ldr	r3, [r0, #4]
 8025258:	6814      	ldr	r4, [r2, #0]
 802525a:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802525e:	680b      	ldr	r3, [r1, #0]
 8025260:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8025264:	6013      	str	r3, [r2, #0]
 8025266:	600c      	str	r4, [r1, #0]
 8025268:	bd10      	pop	{r4, pc}
 802526a:	bf00      	nop
 802526c:	20056778 	.word	0x20056778

08025270 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8025270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025272:	b085      	sub	sp, #20
 8025274:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8025278:	4604      	mov	r4, r0
 802527a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 802527e:	b33b      	cbz	r3, 80252d0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8025280:	aa02      	add	r2, sp, #8
 8025282:	a903      	add	r1, sp, #12
 8025284:	f7ff ffe2 	bl	802524c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8025288:	68a3      	ldr	r3, [r4, #8]
 802528a:	9e03      	ldr	r6, [sp, #12]
 802528c:	aa02      	add	r2, sp, #8
 802528e:	9f02      	ldr	r7, [sp, #8]
 8025290:	a903      	add	r1, sp, #12
 8025292:	1af6      	subs	r6, r6, r3
 8025294:	68e3      	ldr	r3, [r4, #12]
 8025296:	4620      	mov	r0, r4
 8025298:	1aff      	subs	r7, r7, r3
 802529a:	f104 0314 	add.w	r3, r4, #20
 802529e:	9603      	str	r6, [sp, #12]
 80252a0:	9300      	str	r3, [sp, #0]
 80252a2:	f104 0310 	add.w	r3, r4, #16
 80252a6:	9702      	str	r7, [sp, #8]
 80252a8:	f7ff ffb8 	bl	802521c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 80252ac:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 80252b0:	4605      	mov	r5, r0
 80252b2:	b97b      	cbnz	r3, 80252d4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 80252b4:	463a      	mov	r2, r7
 80252b6:	4631      	mov	r1, r6
 80252b8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80252bc:	f7ff fe78 	bl	8024fb0 <_ZN8touchgfx10Rasterizer6lineToEii>
 80252c0:	9b03      	ldr	r3, [sp, #12]
 80252c2:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 80252c6:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 80252ca:	9b02      	ldr	r3, [sp, #8]
 80252cc:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 80252d0:	b005      	add	sp, #20
 80252d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80252d4:	b110      	cbz	r0, 80252dc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 80252d6:	ea13 0200 	ands.w	r2, r3, r0
 80252da:	d11c      	bne.n	8025316 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 80252dc:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
 80252e0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80252e4:	e9d4 122a 	ldrd	r1, r2, [r4, #168]	; 0xa8
 80252e8:	b188      	cbz	r0, 802530e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 80252ea:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 80252ee:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80252f2:	b913      	cbnz	r3, 80252fa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 80252f4:	4630      	mov	r0, r6
 80252f6:	f001 f821 	bl	802633c <_ZN8touchgfx7Outline6moveToEii>
 80252fa:	2300      	movs	r3, #0
 80252fc:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8025300:	2301      	movs	r3, #1
 8025302:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8025306:	4630      	mov	r0, r6
 8025308:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 802530c:	e7d6      	b.n	80252bc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 802530e:	4630      	mov	r0, r6
 8025310:	f7ff fe4e 	bl	8024fb0 <_ZN8touchgfx10Rasterizer6lineToEii>
 8025314:	e7f7      	b.n	8025306 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 8025316:	4615      	mov	r5, r2
 8025318:	e7d2      	b.n	80252c0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

0802531a <_ZN8touchgfx6Canvas5closeEv>:
 802531a:	b538      	push	{r3, r4, r5, lr}
 802531c:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 8025320:	4604      	mov	r4, r0
 8025322:	b993      	cbnz	r3, 802534a <_ZN8touchgfx6Canvas5closeEv+0x30>
 8025324:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 8025328:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
 802532c:	4213      	tst	r3, r2
 802532e:	d10c      	bne.n	802534a <_ZN8touchgfx6Canvas5closeEv+0x30>
 8025330:	f100 0530 	add.w	r5, r0, #48	; 0x30
 8025334:	b123      	cbz	r3, 8025340 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8025336:	e9d0 122a 	ldrd	r1, r2, [r0, #168]	; 0xa8
 802533a:	4628      	mov	r0, r5
 802533c:	f7ff fe38 	bl	8024fb0 <_ZN8touchgfx10Rasterizer6lineToEii>
 8025340:	4628      	mov	r0, r5
 8025342:	e9d4 122d 	ldrd	r1, r2, [r4, #180]	; 0xb4
 8025346:	f7ff fe33 	bl	8024fb0 <_ZN8touchgfx10Rasterizer6lineToEii>
 802534a:	2300      	movs	r3, #0
 802534c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8025350:	bd38      	pop	{r3, r4, r5, pc}

08025352 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8025352:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025354:	b085      	sub	sp, #20
 8025356:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802535a:	4604      	mov	r4, r0
 802535c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8025360:	b353      	cbz	r3, 80253b8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 8025362:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 8025366:	b90b      	cbnz	r3, 802536c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 8025368:	f7ff ffd7 	bl	802531a <_ZN8touchgfx6Canvas5closeEv>
 802536c:	aa02      	add	r2, sp, #8
 802536e:	a903      	add	r1, sp, #12
 8025370:	4620      	mov	r0, r4
 8025372:	f7ff ff6b 	bl	802524c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8025376:	68a3      	ldr	r3, [r4, #8]
 8025378:	9d03      	ldr	r5, [sp, #12]
 802537a:	aa02      	add	r2, sp, #8
 802537c:	9e02      	ldr	r6, [sp, #8]
 802537e:	a903      	add	r1, sp, #12
 8025380:	1aed      	subs	r5, r5, r3
 8025382:	68e3      	ldr	r3, [r4, #12]
 8025384:	4620      	mov	r0, r4
 8025386:	1af6      	subs	r6, r6, r3
 8025388:	f104 0314 	add.w	r3, r4, #20
 802538c:	9503      	str	r5, [sp, #12]
 802538e:	9300      	str	r3, [sp, #0]
 8025390:	f104 0310 	add.w	r3, r4, #16
 8025394:	9602      	str	r6, [sp, #8]
 8025396:	f7ff ff41 	bl	802521c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802539a:	4607      	mov	r7, r0
 802539c:	b170      	cbz	r0, 80253bc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 802539e:	2301      	movs	r3, #1
 80253a0:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80253a4:	9a03      	ldr	r2, [sp, #12]
 80253a6:	9b02      	ldr	r3, [sp, #8]
 80253a8:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 80253ac:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 80253b0:	f884 70b0 	strb.w	r7, [r4, #176]	; 0xb0
 80253b4:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
 80253b8:	b005      	add	sp, #20
 80253ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80253bc:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80253c0:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
 80253c4:	b92b      	cbnz	r3, 80253d2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 80253c6:	4632      	mov	r2, r6
 80253c8:	4629      	mov	r1, r5
 80253ca:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80253ce:	f000 ffb5 	bl	802633c <_ZN8touchgfx7Outline6moveToEii>
 80253d2:	2300      	movs	r3, #0
 80253d4:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80253d8:	2301      	movs	r3, #1
 80253da:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 80253de:	e7e1      	b.n	80253a4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

080253e0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 80253e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80253e4:	4604      	mov	r4, r0
 80253e6:	b087      	sub	sp, #28
 80253e8:	9105      	str	r1, [sp, #20]
 80253ea:	f001 f8ec 	bl	80265c6 <_ZN8touchgfx7Outline8getCellsEv>
 80253ee:	f8d4 9008 	ldr.w	r9, [r4, #8]
 80253f2:	4605      	mov	r5, r0
 80253f4:	f1b9 0f00 	cmp.w	r9, #0
 80253f8:	d103      	bne.n	8025402 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 80253fa:	2001      	movs	r0, #1
 80253fc:	b007      	add	sp, #28
 80253fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025402:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8025406:	2e00      	cmp	r6, #0
 8025408:	d139      	bne.n	802547e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 802540a:	f104 0848 	add.w	r8, r4, #72	; 0x48
 802540e:	f105 0708 	add.w	r7, r5, #8
 8025412:	4640      	mov	r0, r8
 8025414:	f001 f919 	bl	802664a <_ZN8touchgfx8Scanline5resetEv>
 8025418:	f109 33ff 	add.w	r3, r9, #4294967295
 802541c:	9303      	str	r3, [sp, #12]
 802541e:	f9b5 b000 	ldrsh.w	fp, [r5]
 8025422:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 8025426:	46da      	mov	sl, fp
 8025428:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 802542c:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 8025430:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8025434:	9b03      	ldr	r3, [sp, #12]
 8025436:	4416      	add	r6, r2
 8025438:	9504      	str	r5, [sp, #16]
 802543a:	463d      	mov	r5, r7
 802543c:	3b01      	subs	r3, #1
 802543e:	9303      	str	r3, [sp, #12]
 8025440:	3301      	adds	r3, #1
 8025442:	d01e      	beq.n	8025482 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 8025444:	3708      	adds	r7, #8
 8025446:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 802544a:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 802544e:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 8025452:	4290      	cmp	r0, r2
 8025454:	d11e      	bne.n	8025494 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 8025456:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 802545a:	4411      	add	r1, r2
 802545c:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 8025460:	e7e8      	b.n	8025434 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 8025462:	1c91      	adds	r1, r2, #2
 8025464:	f04f 0301 	mov.w	r3, #1
 8025468:	65e1      	str	r1, [r4, #92]	; 0x5c
 802546a:	8053      	strh	r3, [r2, #2]
 802546c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 802546e:	1c91      	adds	r1, r2, #2
 8025470:	65a1      	str	r1, [r4, #88]	; 0x58
 8025472:	f8a2 b002 	strh.w	fp, [r2, #2]
 8025476:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8025478:	3201      	adds	r2, #1
 802547a:	6562      	str	r2, [r4, #84]	; 0x54
 802547c:	e03a      	b.n	80254f4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 802547e:	2000      	movs	r0, #0
 8025480:	e7bc      	b.n	80253fc <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 8025482:	b951      	cbnz	r1, 802549a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 8025484:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8025486:	2b00      	cmp	r3, #0
 8025488:	d0b7      	beq.n	80253fa <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 802548a:	4641      	mov	r1, r8
 802548c:	9805      	ldr	r0, [sp, #20]
 802548e:	f7ff fd59 	bl	8024f44 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8025492:	e7b2      	b.n	80253fa <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8025494:	2900      	cmp	r1, #0
 8025496:	d035      	beq.n	8025504 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 8025498:	9504      	str	r5, [sp, #16]
 802549a:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 802549e:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 80254a2:	f7ff fd3b 	bl	8024f1c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 80254a6:	4605      	mov	r5, r0
 80254a8:	b330      	cbz	r0, 80254f8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 80254aa:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80254ac:	b182      	cbz	r2, 80254d0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 80254ae:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80254b0:	4591      	cmp	r9, r2
 80254b2:	d00d      	beq.n	80254d0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 80254b4:	4641      	mov	r1, r8
 80254b6:	9805      	ldr	r0, [sp, #20]
 80254b8:	f7ff fd44 	bl	8024f44 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80254bc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80254c0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80254c2:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 80254c6:	65e2      	str	r2, [r4, #92]	; 0x5c
 80254c8:	2300      	movs	r3, #0
 80254ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80254cc:	6563      	str	r3, [r4, #84]	; 0x54
 80254ce:	65a2      	str	r2, [r4, #88]	; 0x58
 80254d0:	f1bb 0f00 	cmp.w	fp, #0
 80254d4:	db10      	blt.n	80254f8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 80254d6:	f7f2 fce3 	bl	8017ea0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80254da:	4583      	cmp	fp, r0
 80254dc:	da0c      	bge.n	80254f8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 80254de:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80254e0:	f802 500b 	strb.w	r5, [r2, fp]
 80254e4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80254e6:	3201      	adds	r2, #1
 80254e8:	4593      	cmp	fp, r2
 80254ea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80254ec:	d1b9      	bne.n	8025462 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 80254ee:	8811      	ldrh	r1, [r2, #0]
 80254f0:	3101      	adds	r1, #1
 80254f2:	8011      	strh	r1, [r2, #0]
 80254f4:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 80254f8:	9b03      	ldr	r3, [sp, #12]
 80254fa:	3301      	adds	r3, #1
 80254fc:	d0c2      	beq.n	8025484 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 80254fe:	f10b 0a01 	add.w	sl, fp, #1
 8025502:	9d04      	ldr	r5, [sp, #16]
 8025504:	f9b5 3000 	ldrsh.w	r3, [r5]
 8025508:	4553      	cmp	r3, sl
 802550a:	dd88      	ble.n	802541e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 802550c:	01b1      	lsls	r1, r6, #6
 802550e:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8025512:	f7ff fd03 	bl	8024f1c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 8025516:	4683      	mov	fp, r0
 8025518:	2800      	cmp	r0, #0
 802551a:	d080      	beq.n	802541e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 802551c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802551e:	b183      	cbz	r3, 8025542 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8025520:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8025522:	4599      	cmp	r9, r3
 8025524:	d00d      	beq.n	8025542 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8025526:	4641      	mov	r1, r8
 8025528:	9805      	ldr	r0, [sp, #20]
 802552a:	f7ff fd0b 	bl	8024f44 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802552e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8025532:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8025536:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8025538:	65e3      	str	r3, [r4, #92]	; 0x5c
 802553a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802553c:	65a3      	str	r3, [r4, #88]	; 0x58
 802553e:	2300      	movs	r3, #0
 8025540:	6563      	str	r3, [r4, #84]	; 0x54
 8025542:	f9b5 3000 	ldrsh.w	r3, [r5]
 8025546:	464a      	mov	r2, r9
 8025548:	f8cd b000 	str.w	fp, [sp]
 802554c:	4651      	mov	r1, sl
 802554e:	eba3 030a 	sub.w	r3, r3, sl
 8025552:	4640      	mov	r0, r8
 8025554:	f001 f8a4 	bl	80266a0 <_ZN8touchgfx8Scanline7addSpanEiijj>
 8025558:	e761      	b.n	802541e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

0802555a <_ZN8touchgfx6Canvas6renderEh>:
 802555a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802555c:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8025560:	4604      	mov	r4, r0
 8025562:	460d      	mov	r5, r1
 8025564:	b913      	cbnz	r3, 802556c <_ZN8touchgfx6Canvas6renderEh+0x12>
 8025566:	2001      	movs	r0, #1
 8025568:	b003      	add	sp, #12
 802556a:	bd30      	pop	{r4, r5, pc}
 802556c:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8025570:	2b00      	cmp	r3, #0
 8025572:	d12f      	bne.n	80255d4 <_ZN8touchgfx6Canvas6renderEh+0x7a>
 8025574:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 8025578:	2b00      	cmp	r3, #0
 802557a:	d0f4      	beq.n	8025566 <_ZN8touchgfx6Canvas6renderEh+0xc>
 802557c:	6840      	ldr	r0, [r0, #4]
 802557e:	6803      	ldr	r3, [r0, #0]
 8025580:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8025582:	4798      	blx	r3
 8025584:	fb10 f105 	smulbb	r1, r0, r5
 8025588:	b288      	uxth	r0, r1
 802558a:	1c41      	adds	r1, r0, #1
 802558c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8025590:	120d      	asrs	r5, r1, #8
 8025592:	d0e8      	beq.n	8025566 <_ZN8touchgfx6Canvas6renderEh+0xc>
 8025594:	4620      	mov	r0, r4
 8025596:	f7ff fec0 	bl	802531a <_ZN8touchgfx6Canvas5closeEv>
 802559a:	6860      	ldr	r0, [r4, #4]
 802559c:	6803      	ldr	r3, [r0, #0]
 802559e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80255a0:	4798      	blx	r3
 80255a2:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
 80255a6:	f9b4 30a2 	ldrsh.w	r3, [r4, #162]	; 0xa2
 80255aa:	8082      	strh	r2, [r0, #4]
 80255ac:	80c3      	strh	r3, [r0, #6]
 80255ae:	6860      	ldr	r0, [r4, #4]
 80255b0:	6803      	ldr	r3, [r0, #0]
 80255b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80255b4:	4798      	blx	r3
 80255b6:	7205      	strb	r5, [r0, #8]
 80255b8:	6860      	ldr	r0, [r4, #4]
 80255ba:	6803      	ldr	r3, [r0, #0]
 80255bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80255be:	4798      	blx	r3
 80255c0:	f104 0318 	add.w	r3, r4, #24
 80255c4:	4669      	mov	r1, sp
 80255c6:	e9cd 3000 	strd	r3, r0, [sp]
 80255ca:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80255ce:	f7ff ff07 	bl	80253e0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 80255d2:	e7c9      	b.n	8025568 <_ZN8touchgfx6Canvas6renderEh+0xe>
 80255d4:	2000      	movs	r0, #0
 80255d6:	e7c7      	b.n	8025568 <_ZN8touchgfx6Canvas6renderEh+0xe>

080255d8 <_ZN8touchgfx6CanvasD1Ev>:
 80255d8:	b538      	push	{r3, r4, r5, lr}
 80255da:	4605      	mov	r5, r0
 80255dc:	4b08      	ldr	r3, [pc, #32]	; (8025600 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 80255de:	4604      	mov	r4, r0
 80255e0:	f845 3b30 	str.w	r3, [r5], #48
 80255e4:	4b07      	ldr	r3, [pc, #28]	; (8025604 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 80255e6:	6818      	ldr	r0, [r3, #0]
 80255e8:	6803      	ldr	r3, [r0, #0]
 80255ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80255ec:	4798      	blx	r3
 80255ee:	4628      	mov	r0, r5
 80255f0:	f000 f814 	bl	802561c <_ZN8touchgfx7OutlineD1Ev>
 80255f4:	f104 0018 	add.w	r0, r4, #24
 80255f8:	f001 f88b 	bl	8026712 <_ZN8touchgfx15RenderingBufferD1Ev>
 80255fc:	4620      	mov	r0, r4
 80255fe:	bd38      	pop	{r3, r4, r5, pc}
 8025600:	0802f33c 	.word	0x0802f33c
 8025604:	20056780 	.word	0x20056780

08025608 <_ZN8touchgfx6CanvasD0Ev>:
 8025608:	b510      	push	{r4, lr}
 802560a:	4604      	mov	r4, r0
 802560c:	f7ff ffe4 	bl	80255d8 <_ZN8touchgfx6CanvasD1Ev>
 8025610:	21bc      	movs	r1, #188	; 0xbc
 8025612:	4620      	mov	r0, r4
 8025614:	f001 f89f 	bl	8026756 <_ZdlPvj>
 8025618:	4620      	mov	r0, r4
 802561a:	bd10      	pop	{r4, pc}

0802561c <_ZN8touchgfx7OutlineD1Ev>:
 802561c:	4770      	bx	lr

0802561e <_ZN8touchgfx7OutlineD0Ev>:
 802561e:	b510      	push	{r4, lr}
 8025620:	4604      	mov	r4, r0
 8025622:	2148      	movs	r1, #72	; 0x48
 8025624:	f001 f897 	bl	8026756 <_ZdlPvj>
 8025628:	4620      	mov	r0, r4
 802562a:	bd10      	pop	{r4, pc}

0802562c <_ZN8touchgfx7Outline5resetEv>:
 802562c:	b510      	push	{r4, lr}
 802562e:	4604      	mov	r4, r0
 8025630:	f7f2 fc4e 	bl	8017ed0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8025634:	60e0      	str	r0, [r4, #12]
 8025636:	f7f2 fc51 	bl	8017edc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 802563a:	68e3      	ldr	r3, [r4, #12]
 802563c:	2200      	movs	r2, #0
 802563e:	08c0      	lsrs	r0, r0, #3
 8025640:	6123      	str	r3, [r4, #16]
 8025642:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8025646:	6060      	str	r0, [r4, #4]
 8025648:	82a3      	strh	r3, [r4, #20]
 802564a:	82e3      	strh	r3, [r4, #22]
 802564c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802564e:	60a2      	str	r2, [r4, #8]
 8025650:	f023 0301 	bic.w	r3, r3, #1
 8025654:	8322      	strh	r2, [r4, #24]
 8025656:	8362      	strh	r2, [r4, #26]
 8025658:	f043 0302 	orr.w	r3, r3, #2
 802565c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8025660:	63e3      	str	r3, [r4, #60]	; 0x3c
 8025662:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8025666:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 802566a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802566e:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8025672:	bd10      	pop	{r4, pc}

08025674 <_ZN8touchgfx7OutlineC1Ev>:
 8025674:	4b0f      	ldr	r3, [pc, #60]	; (80256b4 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 8025676:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802567a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 802567e:	b510      	push	{r4, lr}
 8025680:	6003      	str	r3, [r0, #0]
 8025682:	2300      	movs	r3, #0
 8025684:	4604      	mov	r4, r0
 8025686:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 802568a:	e9c0 3301 	strd	r3, r3, [r0, #4]
 802568e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8025692:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8025696:	e9c0 3307 	strd	r3, r3, [r0, #28]
 802569a:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 802569e:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 80256a2:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 80256a6:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 80256aa:	f7ff ffbf 	bl	802562c <_ZN8touchgfx7Outline5resetEv>
 80256ae:	4620      	mov	r0, r4
 80256b0:	bd10      	pop	{r4, pc}
 80256b2:	bf00      	nop
 80256b4:	0802f40c 	.word	0x0802f40c

080256b8 <_ZN8touchgfx7Outline10renderLineEiiii>:
 80256b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80256bc:	b095      	sub	sp, #84	; 0x54
 80256be:	4604      	mov	r4, r0
 80256c0:	1155      	asrs	r5, r2, #5
 80256c2:	f002 061f 	and.w	r6, r2, #31
 80256c6:	981e      	ldr	r0, [sp, #120]	; 0x78
 80256c8:	1157      	asrs	r7, r2, #5
 80256ca:	9304      	str	r3, [sp, #16]
 80256cc:	1153      	asrs	r3, r2, #5
 80256ce:	9300      	str	r3, [sp, #0]
 80256d0:	1143      	asrs	r3, r0, #5
 80256d2:	930c      	str	r3, [sp, #48]	; 0x30
 80256d4:	f000 031f 	and.w	r3, r0, #31
 80256d8:	9303      	str	r3, [sp, #12]
 80256da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80256dc:	42ab      	cmp	r3, r5
 80256de:	bfc8      	it	gt
 80256e0:	462b      	movgt	r3, r5
 80256e2:	ea4f 1562 	mov.w	r5, r2, asr #5
 80256e6:	bfc8      	it	gt
 80256e8:	6323      	strgt	r3, [r4, #48]	; 0x30
 80256ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80256ec:	42ab      	cmp	r3, r5
 80256ee:	bfd8      	it	le
 80256f0:	462b      	movle	r3, r5
 80256f2:	ea4f 1560 	mov.w	r5, r0, asr #5
 80256f6:	bfdc      	itt	le
 80256f8:	3301      	addle	r3, #1
 80256fa:	63a3      	strle	r3, [r4, #56]	; 0x38
 80256fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80256fe:	42ab      	cmp	r3, r5
 8025700:	bfc8      	it	gt
 8025702:	462b      	movgt	r3, r5
 8025704:	ea4f 1560 	mov.w	r5, r0, asr #5
 8025708:	bfc8      	it	gt
 802570a:	6323      	strgt	r3, [r4, #48]	; 0x30
 802570c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802570e:	42ab      	cmp	r3, r5
 8025710:	bfd8      	it	le
 8025712:	462b      	movle	r3, r5
 8025714:	ea4f 1561 	mov.w	r5, r1, asr #5
 8025718:	bfdc      	itt	le
 802571a:	3301      	addle	r3, #1
 802571c:	63a3      	strle	r3, [r4, #56]	; 0x38
 802571e:	9b04      	ldr	r3, [sp, #16]
 8025720:	eba3 0a01 	sub.w	sl, r3, r1
 8025724:	1143      	asrs	r3, r0, #5
 8025726:	429f      	cmp	r7, r3
 8025728:	f040 811d 	bne.w	8025966 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ae>
 802572c:	9b04      	ldr	r3, [sp, #16]
 802572e:	ea4f 1b63 	mov.w	fp, r3, asr #5
 8025732:	9b03      	ldr	r3, [sp, #12]
 8025734:	429e      	cmp	r6, r3
 8025736:	d131      	bne.n	802579c <_ZN8touchgfx7Outline10renderLineEiiii+0xe4>
 8025738:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802573c:	fa0f fb8b 	sxth.w	fp, fp
 8025740:	f9bd 2000 	ldrsh.w	r2, [sp]
 8025744:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8025748:	eb0b 4002 	add.w	r0, fp, r2, lsl #16
 802574c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8025750:	4281      	cmp	r1, r0
 8025752:	f000 80e6 	beq.w	8025922 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 8025756:	8b60      	ldrh	r0, [r4, #26]
 8025758:	8b21      	ldrh	r1, [r4, #24]
 802575a:	4301      	orrs	r1, r0
 802575c:	d00b      	beq.n	8025776 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 802575e:	2b00      	cmp	r3, #0
 8025760:	db09      	blt.n	8025776 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 8025762:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025764:	428b      	cmp	r3, r1
 8025766:	da06      	bge.n	8025776 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 8025768:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802576c:	4299      	cmp	r1, r3
 802576e:	d308      	bcc.n	8025782 <_ZN8touchgfx7Outline10renderLineEiiii+0xca>
 8025770:	2301      	movs	r3, #1
 8025772:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025776:	f8a4 b014 	strh.w	fp, [r4, #20]
 802577a:	2300      	movs	r3, #0
 802577c:	82e2      	strh	r2, [r4, #22]
 802577e:	8323      	strh	r3, [r4, #24]
 8025780:	e01f      	b.n	80257c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x10a>
 8025782:	f104 0314 	add.w	r3, r4, #20
 8025786:	6925      	ldr	r5, [r4, #16]
 8025788:	cb03      	ldmia	r3!, {r0, r1}
 802578a:	6028      	str	r0, [r5, #0]
 802578c:	6069      	str	r1, [r5, #4]
 802578e:	6923      	ldr	r3, [r4, #16]
 8025790:	3308      	adds	r3, #8
 8025792:	6123      	str	r3, [r4, #16]
 8025794:	68a3      	ldr	r3, [r4, #8]
 8025796:	3301      	adds	r3, #1
 8025798:	60a3      	str	r3, [r4, #8]
 802579a:	e7ec      	b.n	8025776 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 802579c:	9b04      	ldr	r3, [sp, #16]
 802579e:	45ab      	cmp	fp, r5
 80257a0:	f001 011f 	and.w	r1, r1, #31
 80257a4:	8b20      	ldrh	r0, [r4, #24]
 80257a6:	f003 031f 	and.w	r3, r3, #31
 80257aa:	8b62      	ldrh	r2, [r4, #26]
 80257ac:	9305      	str	r3, [sp, #20]
 80257ae:	9b03      	ldr	r3, [sp, #12]
 80257b0:	eba3 0306 	sub.w	r3, r3, r6
 80257b4:	d107      	bne.n	80257c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x10e>
 80257b6:	4418      	add	r0, r3
 80257b8:	8320      	strh	r0, [r4, #24]
 80257ba:	9805      	ldr	r0, [sp, #20]
 80257bc:	4401      	add	r1, r0
 80257be:	fb03 2301 	mla	r3, r3, r1, r2
 80257c2:	8363      	strh	r3, [r4, #26]
 80257c4:	e0ad      	b.n	8025922 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 80257c6:	f1ba 0f00 	cmp.w	sl, #0
 80257ca:	db33      	blt.n	8025834 <_ZN8touchgfx7Outline10renderLineEiiii+0x17c>
 80257cc:	2701      	movs	r7, #1
 80257ce:	f1c1 0c20 	rsb	ip, r1, #32
 80257d2:	9702      	str	r7, [sp, #8]
 80257d4:	2720      	movs	r7, #32
 80257d6:	fb03 f30c 	mul.w	r3, r3, ip
 80257da:	9701      	str	r7, [sp, #4]
 80257dc:	9f01      	ldr	r7, [sp, #4]
 80257de:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80257e2:	4439      	add	r1, r7
 80257e4:	fb93 fcfa 	sdiv	ip, r3, sl
 80257e8:	fb0a 331c 	mls	r3, sl, ip, r3
 80257ec:	2b00      	cmp	r3, #0
 80257ee:	bfbc      	itt	lt
 80257f0:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 80257f4:	4453      	addlt	r3, sl
 80257f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80257fa:	9a02      	ldr	r2, [sp, #8]
 80257fc:	4460      	add	r0, ip
 80257fe:	4415      	add	r5, r2
 8025800:	f9bd 2000 	ldrsh.w	r2, [sp]
 8025804:	b200      	sxth	r0, r0
 8025806:	0417      	lsls	r7, r2, #16
 8025808:	9200      	str	r2, [sp, #0]
 802580a:	fa0f fe85 	sxth.w	lr, r5
 802580e:	8320      	strh	r0, [r4, #24]
 8025810:	9704      	str	r7, [sp, #16]
 8025812:	b209      	sxth	r1, r1
 8025814:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
 8025818:	9a04      	ldr	r2, [sp, #16]
 802581a:	eb07 4708 	add.w	r7, r7, r8, lsl #16
 802581e:	8361      	strh	r1, [r4, #26]
 8025820:	eb0e 0902 	add.w	r9, lr, r2
 8025824:	454f      	cmp	r7, r9
 8025826:	d10d      	bne.n	8025844 <_ZN8touchgfx7Outline10renderLineEiiii+0x18c>
 8025828:	4ba0      	ldr	r3, [pc, #640]	; (8025aac <_ZN8touchgfx7Outline10renderLineEiiii+0x3f4>)
 802582a:	2177      	movs	r1, #119	; 0x77
 802582c:	4aa0      	ldr	r2, [pc, #640]	; (8025ab0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3f8>)
 802582e:	48a1      	ldr	r0, [pc, #644]	; (8025ab4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3fc>)
 8025830:	f001 f8c6 	bl	80269c0 <__assert_func>
 8025834:	f04f 37ff 	mov.w	r7, #4294967295
 8025838:	434b      	muls	r3, r1
 802583a:	f1ca 0a00 	rsb	sl, sl, #0
 802583e:	9702      	str	r7, [sp, #8]
 8025840:	2700      	movs	r7, #0
 8025842:	e7ca      	b.n	80257da <_ZN8touchgfx7Outline10renderLineEiiii+0x122>
 8025844:	ea50 0201 	orrs.w	r2, r0, r1
 8025848:	d00c      	beq.n	8025864 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 802584a:	f1b8 0f00 	cmp.w	r8, #0
 802584e:	db09      	blt.n	8025864 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 8025850:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025852:	4588      	cmp	r8, r1
 8025854:	da06      	bge.n	8025864 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 8025856:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802585a:	4288      	cmp	r0, r1
 802585c:	d364      	bcc.n	8025928 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 802585e:	2101      	movs	r1, #1
 8025860:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8025864:	2100      	movs	r1, #0
 8025866:	9a00      	ldr	r2, [sp, #0]
 8025868:	45ab      	cmp	fp, r5
 802586a:	f8a4 e014 	strh.w	lr, [r4, #20]
 802586e:	82e2      	strh	r2, [r4, #22]
 8025870:	4466      	add	r6, ip
 8025872:	8321      	strh	r1, [r4, #24]
 8025874:	8361      	strh	r1, [r4, #26]
 8025876:	d04b      	beq.n	8025910 <_ZN8touchgfx7Outline10renderLineEiiii+0x258>
 8025878:	9a03      	ldr	r2, [sp, #12]
 802587a:	eba3 030a 	sub.w	r3, r3, sl
 802587e:	f04f 0800 	mov.w	r8, #0
 8025882:	1b91      	subs	r1, r2, r6
 8025884:	448c      	add	ip, r1
 8025886:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 802588a:	fb9c f7fa 	sdiv	r7, ip, sl
 802588e:	fb0a cc17 	mls	ip, sl, r7, ip
 8025892:	f1bc 0f00 	cmp.w	ip, #0
 8025896:	bfbc      	itt	lt
 8025898:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802589c:	44d4      	addlt	ip, sl
 802589e:	1c7a      	adds	r2, r7, #1
 80258a0:	9207      	str	r2, [sp, #28]
 80258a2:	eb13 030c 	adds.w	r3, r3, ip
 80258a6:	9a02      	ldr	r2, [sp, #8]
 80258a8:	bf54      	ite	pl
 80258aa:	9807      	ldrpl	r0, [sp, #28]
 80258ac:	4638      	movmi	r0, r7
 80258ae:	4415      	add	r5, r2
 80258b0:	9a04      	ldr	r2, [sp, #16]
 80258b2:	fa0f fe80 	sxth.w	lr, r0
 80258b6:	4406      	add	r6, r0
 80258b8:	ea4f 1140 	mov.w	r1, r0, lsl #5
 80258bc:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 80258c0:	fa0f f985 	sxth.w	r9, r5
 80258c4:	bf58      	it	pl
 80258c6:	eba3 030a 	subpl.w	r3, r3, sl
 80258ca:	4410      	add	r0, r2
 80258cc:	b209      	sxth	r1, r1
 80258ce:	444a      	add	r2, r9
 80258d0:	f8a4 e018 	strh.w	lr, [r4, #24]
 80258d4:	8361      	strh	r1, [r4, #26]
 80258d6:	4290      	cmp	r0, r2
 80258d8:	d0a6      	beq.n	8025828 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 80258da:	ea5e 0201 	orrs.w	r2, lr, r1
 80258de:	d00d      	beq.n	80258fc <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 80258e0:	9a00      	ldr	r2, [sp, #0]
 80258e2:	2a00      	cmp	r2, #0
 80258e4:	db0a      	blt.n	80258fc <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 80258e6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80258e8:	428a      	cmp	r2, r1
 80258ea:	da07      	bge.n	80258fc <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 80258ec:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80258f0:	4288      	cmp	r0, r1
 80258f2:	d329      	bcc.n	8025948 <_ZN8touchgfx7Outline10renderLineEiiii+0x290>
 80258f4:	f04f 0201 	mov.w	r2, #1
 80258f8:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80258fc:	9a00      	ldr	r2, [sp, #0]
 80258fe:	45ab      	cmp	fp, r5
 8025900:	f8a4 9014 	strh.w	r9, [r4, #20]
 8025904:	82e2      	strh	r2, [r4, #22]
 8025906:	f8a4 8018 	strh.w	r8, [r4, #24]
 802590a:	f8a4 801a 	strh.w	r8, [r4, #26]
 802590e:	d1c8      	bne.n	80258a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ea>
 8025910:	9b03      	ldr	r3, [sp, #12]
 8025912:	9a01      	ldr	r2, [sp, #4]
 8025914:	1b9e      	subs	r6, r3, r6
 8025916:	9b05      	ldr	r3, [sp, #20]
 8025918:	3320      	adds	r3, #32
 802591a:	8326      	strh	r6, [r4, #24]
 802591c:	1a9b      	subs	r3, r3, r2
 802591e:	435e      	muls	r6, r3
 8025920:	8366      	strh	r6, [r4, #26]
 8025922:	b015      	add	sp, #84	; 0x54
 8025924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025928:	f104 0714 	add.w	r7, r4, #20
 802592c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8025930:	cf03      	ldmia	r7!, {r0, r1}
 8025932:	f8c8 0000 	str.w	r0, [r8]
 8025936:	f8c8 1004 	str.w	r1, [r8, #4]
 802593a:	6921      	ldr	r1, [r4, #16]
 802593c:	3108      	adds	r1, #8
 802593e:	6121      	str	r1, [r4, #16]
 8025940:	68a1      	ldr	r1, [r4, #8]
 8025942:	3101      	adds	r1, #1
 8025944:	60a1      	str	r1, [r4, #8]
 8025946:	e78d      	b.n	8025864 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 8025948:	f104 0e14 	add.w	lr, r4, #20
 802594c:	6922      	ldr	r2, [r4, #16]
 802594e:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8025952:	9206      	str	r2, [sp, #24]
 8025954:	6010      	str	r0, [r2, #0]
 8025956:	6051      	str	r1, [r2, #4]
 8025958:	6921      	ldr	r1, [r4, #16]
 802595a:	3108      	adds	r1, #8
 802595c:	6121      	str	r1, [r4, #16]
 802595e:	68a1      	ldr	r1, [r4, #8]
 8025960:	3101      	adds	r1, #1
 8025962:	60a1      	str	r1, [r4, #8]
 8025964:	e7ca      	b.n	80258fc <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 8025966:	eba0 0b02 	sub.w	fp, r0, r2
 802596a:	f1ba 0f00 	cmp.w	sl, #0
 802596e:	f040 80a3 	bne.w	8025ab8 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8025972:	f1bb 0f00 	cmp.w	fp, #0
 8025976:	ea4f 0141 	mov.w	r1, r1, lsl #1
 802597a:	8b62      	ldrh	r2, [r4, #26]
 802597c:	b22d      	sxth	r5, r5
 802597e:	bfa8      	it	ge
 8025980:	f04f 0a20 	movge.w	sl, #32
 8025984:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 8025988:	8b21      	ldrh	r1, [r4, #24]
 802598a:	bfb8      	it	lt
 802598c:	f04f 39ff 	movlt.w	r9, #4294967295
 8025990:	ebaa 0606 	sub.w	r6, sl, r6
 8025994:	bfa8      	it	ge
 8025996:	f04f 0901 	movge.w	r9, #1
 802599a:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 802599e:	4431      	add	r1, r6
 80259a0:	fb06 2603 	mla	r6, r6, r3, r2
 80259a4:	9a00      	ldr	r2, [sp, #0]
 80259a6:	f9b4 c014 	ldrsh.w	ip, [r4, #20]
 80259aa:	b209      	sxth	r1, r1
 80259ac:	444a      	add	r2, r9
 80259ae:	b236      	sxth	r6, r6
 80259b0:	eb0c 4c00 	add.w	ip, ip, r0, lsl #16
 80259b4:	8321      	strh	r1, [r4, #24]
 80259b6:	b217      	sxth	r7, r2
 80259b8:	8366      	strh	r6, [r4, #26]
 80259ba:	eb05 4e07 	add.w	lr, r5, r7, lsl #16
 80259be:	45f4      	cmp	ip, lr
 80259c0:	f43f af32 	beq.w	8025828 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 80259c4:	4331      	orrs	r1, r6
 80259c6:	d00b      	beq.n	80259e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 80259c8:	2800      	cmp	r0, #0
 80259ca:	db09      	blt.n	80259e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 80259cc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80259ce:	4288      	cmp	r0, r1
 80259d0:	da06      	bge.n	80259e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 80259d2:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80259d6:	4288      	cmp	r0, r1
 80259d8:	d33b      	bcc.n	8025a52 <_ZN8touchgfx7Outline10renderLineEiiii+0x39a>
 80259da:	2101      	movs	r1, #1
 80259dc:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80259e0:	f1aa 0610 	sub.w	r6, sl, #16
 80259e4:	82e7      	strh	r7, [r4, #22]
 80259e6:	2700      	movs	r7, #0
 80259e8:	82a5      	strh	r5, [r4, #20]
 80259ea:	0076      	lsls	r6, r6, #1
 80259ec:	8327      	strh	r7, [r4, #24]
 80259ee:	fb06 fc03 	mul.w	ip, r6, r3
 80259f2:	b236      	sxth	r6, r6
 80259f4:	8367      	strh	r7, [r4, #26]
 80259f6:	fa0f fc8c 	sxth.w	ip, ip
 80259fa:	ea46 010c 	orr.w	r1, r6, ip
 80259fe:	9100      	str	r1, [sp, #0]
 8025a00:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025a02:	428a      	cmp	r2, r1
 8025a04:	d046      	beq.n	8025a94 <_ZN8touchgfx7Outline10renderLineEiiii+0x3dc>
 8025a06:	444a      	add	r2, r9
 8025a08:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8025a0c:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8025a10:	fa0f f882 	sxth.w	r8, r2
 8025a14:	8326      	strh	r6, [r4, #24]
 8025a16:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 8025a1a:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8025a1e:	eb05 4e08 	add.w	lr, r5, r8, lsl #16
 8025a22:	4570      	cmp	r0, lr
 8025a24:	f43f af00 	beq.w	8025828 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8025a28:	9800      	ldr	r0, [sp, #0]
 8025a2a:	b160      	cbz	r0, 8025a46 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8025a2c:	2900      	cmp	r1, #0
 8025a2e:	db0a      	blt.n	8025a46 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8025a30:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8025a32:	4281      	cmp	r1, r0
 8025a34:	da07      	bge.n	8025a46 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8025a36:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025a3a:	4288      	cmp	r0, r1
 8025a3c:	d319      	bcc.n	8025a72 <_ZN8touchgfx7Outline10renderLineEiiii+0x3ba>
 8025a3e:	f04f 0101 	mov.w	r1, #1
 8025a42:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8025a46:	82a5      	strh	r5, [r4, #20]
 8025a48:	f8a4 8016 	strh.w	r8, [r4, #22]
 8025a4c:	8327      	strh	r7, [r4, #24]
 8025a4e:	8367      	strh	r7, [r4, #26]
 8025a50:	e7d6      	b.n	8025a00 <_ZN8touchgfx7Outline10renderLineEiiii+0x348>
 8025a52:	f104 0614 	add.w	r6, r4, #20
 8025a56:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8025a5a:	ce03      	ldmia	r6!, {r0, r1}
 8025a5c:	f8cc 0000 	str.w	r0, [ip]
 8025a60:	f8cc 1004 	str.w	r1, [ip, #4]
 8025a64:	6921      	ldr	r1, [r4, #16]
 8025a66:	3108      	adds	r1, #8
 8025a68:	6121      	str	r1, [r4, #16]
 8025a6a:	68a1      	ldr	r1, [r4, #8]
 8025a6c:	3101      	adds	r1, #1
 8025a6e:	60a1      	str	r1, [r4, #8]
 8025a70:	e7b6      	b.n	80259e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 8025a72:	f104 0e14 	add.w	lr, r4, #20
 8025a76:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8025a7a:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8025a7e:	f8cb 0000 	str.w	r0, [fp]
 8025a82:	f8cb 1004 	str.w	r1, [fp, #4]
 8025a86:	6921      	ldr	r1, [r4, #16]
 8025a88:	3108      	adds	r1, #8
 8025a8a:	6121      	str	r1, [r4, #16]
 8025a8c:	68a1      	ldr	r1, [r4, #8]
 8025a8e:	3101      	adds	r1, #1
 8025a90:	60a1      	str	r1, [r4, #8]
 8025a92:	e7d8      	b.n	8025a46 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8025a94:	9a03      	ldr	r2, [sp, #12]
 8025a96:	8b61      	ldrh	r1, [r4, #26]
 8025a98:	f1a2 0e20 	sub.w	lr, r2, #32
 8025a9c:	8b22      	ldrh	r2, [r4, #24]
 8025a9e:	44d6      	add	lr, sl
 8025aa0:	4472      	add	r2, lr
 8025aa2:	fb0e 1303 	mla	r3, lr, r3, r1
 8025aa6:	8322      	strh	r2, [r4, #24]
 8025aa8:	e68b      	b.n	80257c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x10a>
 8025aaa:	bf00      	nop
 8025aac:	0802f393 	.word	0x0802f393
 8025ab0:	0802f414 	.word	0x0802f414
 8025ab4:	0802f3c4 	.word	0x0802f3c4
 8025ab8:	f1bb 0f00 	cmp.w	fp, #0
 8025abc:	f2c0 8124 	blt.w	8025d08 <_ZN8touchgfx7Outline10renderLineEiiii+0x650>
 8025ac0:	2201      	movs	r2, #1
 8025ac2:	f1c6 0320 	rsb	r3, r6, #32
 8025ac6:	920b      	str	r2, [sp, #44]	; 0x2c
 8025ac8:	2220      	movs	r2, #32
 8025aca:	fb0a f303 	mul.w	r3, sl, r3
 8025ace:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8025ad2:	9202      	str	r2, [sp, #8]
 8025ad4:	fb93 fcfb 	sdiv	ip, r3, fp
 8025ad8:	fb0b 331c 	mls	r3, fp, ip, r3
 8025adc:	2b00      	cmp	r3, #0
 8025ade:	9308      	str	r3, [sp, #32]
 8025ae0:	bfbe      	ittt	lt
 8025ae2:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8025ae6:	445b      	addlt	r3, fp
 8025ae8:	9308      	strlt	r3, [sp, #32]
 8025aea:	eb0c 0301 	add.w	r3, ip, r1
 8025aee:	9301      	str	r3, [sp, #4]
 8025af0:	115b      	asrs	r3, r3, #5
 8025af2:	9305      	str	r3, [sp, #20]
 8025af4:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8025af8:	eb03 4308 	add.w	r3, r3, r8, lsl #16
 8025afc:	461f      	mov	r7, r3
 8025afe:	9b02      	ldr	r3, [sp, #8]
 8025b00:	42b3      	cmp	r3, r6
 8025b02:	f040 8117 	bne.w	8025d34 <_ZN8touchgfx7Outline10renderLineEiiii+0x67c>
 8025b06:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8025b0a:	f9bd 3000 	ldrsh.w	r3, [sp]
 8025b0e:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 8025b12:	42b9      	cmp	r1, r7
 8025b14:	d016      	beq.n	8025b44 <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 8025b16:	8b60      	ldrh	r0, [r4, #26]
 8025b18:	8b21      	ldrh	r1, [r4, #24]
 8025b1a:	4301      	orrs	r1, r0
 8025b1c:	d00d      	beq.n	8025b3a <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 8025b1e:	f1b8 0f00 	cmp.w	r8, #0
 8025b22:	db0a      	blt.n	8025b3a <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 8025b24:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025b26:	4541      	cmp	r1, r8
 8025b28:	dd07      	ble.n	8025b3a <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 8025b2a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025b2e:	4288      	cmp	r0, r1
 8025b30:	f0c0 80f3 	bcc.w	8025d1a <_ZN8touchgfx7Outline10renderLineEiiii+0x662>
 8025b34:	2101      	movs	r1, #1
 8025b36:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8025b3a:	82e3      	strh	r3, [r4, #22]
 8025b3c:	2300      	movs	r3, #0
 8025b3e:	82a2      	strh	r2, [r4, #20]
 8025b40:	8323      	strh	r3, [r4, #24]
 8025b42:	8363      	strh	r3, [r4, #26]
 8025b44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025b46:	9a00      	ldr	r2, [sp, #0]
 8025b48:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8025b4c:	441a      	add	r2, r3
 8025b4e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8025b52:	4691      	mov	r9, r2
 8025b54:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8025b58:	fa0f f589 	sxth.w	r5, r9
 8025b5c:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 8025b60:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 8025b64:	4281      	cmp	r1, r0
 8025b66:	d015      	beq.n	8025b94 <_ZN8touchgfx7Outline10renderLineEiiii+0x4dc>
 8025b68:	8b60      	ldrh	r0, [r4, #26]
 8025b6a:	8b21      	ldrh	r1, [r4, #24]
 8025b6c:	4301      	orrs	r1, r0
 8025b6e:	d00c      	beq.n	8025b8a <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 8025b70:	2a00      	cmp	r2, #0
 8025b72:	db0a      	blt.n	8025b8a <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 8025b74:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025b76:	428a      	cmp	r2, r1
 8025b78:	da07      	bge.n	8025b8a <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 8025b7a:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8025b7e:	4291      	cmp	r1, r2
 8025b80:	f0c0 81ae 	bcc.w	8025ee0 <_ZN8touchgfx7Outline10renderLineEiiii+0x828>
 8025b84:	2201      	movs	r2, #1
 8025b86:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8025b8a:	82a3      	strh	r3, [r4, #20]
 8025b8c:	2300      	movs	r3, #0
 8025b8e:	82e5      	strh	r5, [r4, #22]
 8025b90:	8323      	strh	r3, [r4, #24]
 8025b92:	8363      	strh	r3, [r4, #26]
 8025b94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025b96:	454b      	cmp	r3, r9
 8025b98:	f000 808a 	beq.w	8025cb0 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f8>
 8025b9c:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8025ba0:	fb93 f2fb 	sdiv	r2, r3, fp
 8025ba4:	fb0b 3312 	mls	r3, fp, r2, r3
 8025ba8:	9205      	str	r2, [sp, #20]
 8025baa:	2b00      	cmp	r3, #0
 8025bac:	9307      	str	r3, [sp, #28]
 8025bae:	da04      	bge.n	8025bba <_ZN8touchgfx7Outline10renderLineEiiii+0x502>
 8025bb0:	1e53      	subs	r3, r2, #1
 8025bb2:	9305      	str	r3, [sp, #20]
 8025bb4:	9b07      	ldr	r3, [sp, #28]
 8025bb6:	445b      	add	r3, fp
 8025bb8:	9307      	str	r3, [sp, #28]
 8025bba:	9b08      	ldr	r3, [sp, #32]
 8025bbc:	f04f 0a00 	mov.w	sl, #0
 8025bc0:	eba3 030b 	sub.w	r3, r3, fp
 8025bc4:	9308      	str	r3, [sp, #32]
 8025bc6:	e9dd c301 	ldrd	ip, r3, [sp, #4]
 8025bca:	f1c3 0320 	rsb	r3, r3, #32
 8025bce:	930a      	str	r3, [sp, #40]	; 0x28
 8025bd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025bd2:	9b02      	ldr	r3, [sp, #8]
 8025bd4:	1a9b      	subs	r3, r3, r2
 8025bd6:	9309      	str	r3, [sp, #36]	; 0x24
 8025bd8:	9902      	ldr	r1, [sp, #8]
 8025bda:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 8025bde:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8025be2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8025be6:	eb08 4806 	add.w	r8, r8, r6, lsl #16
 8025bea:	189b      	adds	r3, r3, r2
 8025bec:	9308      	str	r3, [sp, #32]
 8025bee:	bf57      	itett	pl
 8025bf0:	eba3 030b 	subpl.w	r3, r3, fp
 8025bf4:	9b05      	ldrmi	r3, [sp, #20]
 8025bf6:	9308      	strpl	r3, [sp, #32]
 8025bf8:	9b05      	ldrpl	r3, [sp, #20]
 8025bfa:	bf58      	it	pl
 8025bfc:	3301      	addpl	r3, #1
 8025bfe:	9300      	str	r3, [sp, #0]
 8025c00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8025c04:	4413      	add	r3, r2
 8025c06:	9301      	str	r3, [sp, #4]
 8025c08:	115b      	asrs	r3, r3, #5
 8025c0a:	9306      	str	r3, [sp, #24]
 8025c0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025c0e:	428b      	cmp	r3, r1
 8025c10:	f040 8180 	bne.w	8025f14 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 8025c14:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8025c18:	fa0f f389 	sxth.w	r3, r9
 8025c1c:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 8025c20:	4541      	cmp	r1, r8
 8025c22:	d017      	beq.n	8025c54 <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 8025c24:	8b60      	ldrh	r0, [r4, #26]
 8025c26:	8b21      	ldrh	r1, [r4, #24]
 8025c28:	4301      	orrs	r1, r0
 8025c2a:	d00d      	beq.n	8025c48 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 8025c2c:	2e00      	cmp	r6, #0
 8025c2e:	db0b      	blt.n	8025c48 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 8025c30:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025c32:	42b1      	cmp	r1, r6
 8025c34:	dd08      	ble.n	8025c48 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 8025c36:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025c3a:	4288      	cmp	r0, r1
 8025c3c:	f0c0 815d 	bcc.w	8025efa <_ZN8touchgfx7Outline10renderLineEiiii+0x842>
 8025c40:	f04f 0101 	mov.w	r1, #1
 8025c44:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8025c48:	82a2      	strh	r2, [r4, #20]
 8025c4a:	82e3      	strh	r3, [r4, #22]
 8025c4c:	f8a4 a018 	strh.w	sl, [r4, #24]
 8025c50:	f8a4 a01a 	strh.w	sl, [r4, #26]
 8025c54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025c56:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8025c5a:	4499      	add	r9, r3
 8025c5c:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8025c60:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8025c64:	fa0f f589 	sxth.w	r5, r9
 8025c68:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 8025c6c:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 8025c70:	4281      	cmp	r1, r0
 8025c72:	f43f add9 	beq.w	8025828 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8025c76:	8b60      	ldrh	r0, [r4, #26]
 8025c78:	8b21      	ldrh	r1, [r4, #24]
 8025c7a:	4301      	orrs	r1, r0
 8025c7c:	d00d      	beq.n	8025c9a <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 8025c7e:	2a00      	cmp	r2, #0
 8025c80:	db0b      	blt.n	8025c9a <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 8025c82:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025c84:	428a      	cmp	r2, r1
 8025c86:	da08      	bge.n	8025c9a <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 8025c88:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8025c8c:	4291      	cmp	r1, r2
 8025c8e:	f0c0 8228 	bcc.w	80260e2 <_ZN8touchgfx7Outline10renderLineEiiii+0xa2a>
 8025c92:	f04f 0201 	mov.w	r2, #1
 8025c96:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8025c9a:	82a3      	strh	r3, [r4, #20]
 8025c9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025c9e:	82e5      	strh	r5, [r4, #22]
 8025ca0:	454b      	cmp	r3, r9
 8025ca2:	f8a4 a018 	strh.w	sl, [r4, #24]
 8025ca6:	f8a4 a01a 	strh.w	sl, [r4, #26]
 8025caa:	f8dd c004 	ldr.w	ip, [sp, #4]
 8025cae:	d193      	bne.n	8025bd8 <_ZN8touchgfx7Outline10renderLineEiiii+0x520>
 8025cb0:	9b02      	ldr	r3, [sp, #8]
 8025cb2:	f1c3 0e20 	rsb	lr, r3, #32
 8025cb6:	9b04      	ldr	r3, [sp, #16]
 8025cb8:	ea4f 1b63 	mov.w	fp, r3, asr #5
 8025cbc:	9b03      	ldr	r3, [sp, #12]
 8025cbe:	459e      	cmp	lr, r3
 8025cc0:	f040 8229 	bne.w	8026116 <_ZN8touchgfx7Outline10renderLineEiiii+0xa5e>
 8025cc4:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8025cc8:	fa0f f58b 	sxth.w	r5, fp
 8025ccc:	fa0f f289 	sxth.w	r2, r9
 8025cd0:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8025cd4:	eb05 4002 	add.w	r0, r5, r2, lsl #16
 8025cd8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8025cdc:	4281      	cmp	r1, r0
 8025cde:	f43f ae20 	beq.w	8025922 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 8025ce2:	8b60      	ldrh	r0, [r4, #26]
 8025ce4:	8b21      	ldrh	r1, [r4, #24]
 8025ce6:	4301      	orrs	r1, r0
 8025ce8:	d00c      	beq.n	8025d04 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 8025cea:	2b00      	cmp	r3, #0
 8025cec:	db0a      	blt.n	8025d04 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 8025cee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025cf0:	428b      	cmp	r3, r1
 8025cf2:	da07      	bge.n	8025d04 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 8025cf4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8025cf8:	4299      	cmp	r1, r3
 8025cfa:	f0c0 81ff 	bcc.w	80260fc <_ZN8touchgfx7Outline10renderLineEiiii+0xa44>
 8025cfe:	2301      	movs	r3, #1
 8025d00:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025d04:	82a5      	strh	r5, [r4, #20]
 8025d06:	e538      	b.n	802577a <_ZN8touchgfx7Outline10renderLineEiiii+0xc2>
 8025d08:	f04f 32ff 	mov.w	r2, #4294967295
 8025d0c:	fb0a f306 	mul.w	r3, sl, r6
 8025d10:	f1cb 0b00 	rsb	fp, fp, #0
 8025d14:	920b      	str	r2, [sp, #44]	; 0x2c
 8025d16:	2200      	movs	r2, #0
 8025d18:	e6d9      	b.n	8025ace <_ZN8touchgfx7Outline10renderLineEiiii+0x416>
 8025d1a:	f104 0514 	add.w	r5, r4, #20
 8025d1e:	6926      	ldr	r6, [r4, #16]
 8025d20:	cd03      	ldmia	r5!, {r0, r1}
 8025d22:	6030      	str	r0, [r6, #0]
 8025d24:	6071      	str	r1, [r6, #4]
 8025d26:	6921      	ldr	r1, [r4, #16]
 8025d28:	3108      	adds	r1, #8
 8025d2a:	6121      	str	r1, [r4, #16]
 8025d2c:	68a1      	ldr	r1, [r4, #8]
 8025d2e:	3101      	adds	r1, #1
 8025d30:	60a1      	str	r1, [r4, #8]
 8025d32:	e702      	b.n	8025b3a <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 8025d34:	9b01      	ldr	r3, [sp, #4]
 8025d36:	f001 011f 	and.w	r1, r1, #31
 8025d3a:	8b20      	ldrh	r0, [r4, #24]
 8025d3c:	f003 031f 	and.w	r3, r3, #31
 8025d40:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8025d44:	930d      	str	r3, [sp, #52]	; 0x34
 8025d46:	9b02      	ldr	r3, [sp, #8]
 8025d48:	1b9a      	subs	r2, r3, r6
 8025d4a:	9b05      	ldr	r3, [sp, #20]
 8025d4c:	42ab      	cmp	r3, r5
 8025d4e:	d107      	bne.n	8025d60 <_ZN8touchgfx7Outline10renderLineEiiii+0x6a8>
 8025d50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025d52:	4410      	add	r0, r2
 8025d54:	4419      	add	r1, r3
 8025d56:	8320      	strh	r0, [r4, #24]
 8025d58:	fb02 9201 	mla	r2, r2, r1, r9
 8025d5c:	8362      	strh	r2, [r4, #26]
 8025d5e:	e6f1      	b.n	8025b44 <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 8025d60:	f1bc 0f00 	cmp.w	ip, #0
 8025d64:	f2c0 8093 	blt.w	8025e8e <_ZN8touchgfx7Outline10renderLineEiiii+0x7d6>
 8025d68:	f1c1 0320 	rsb	r3, r1, #32
 8025d6c:	435a      	muls	r2, r3
 8025d6e:	2301      	movs	r3, #1
 8025d70:	9309      	str	r3, [sp, #36]	; 0x24
 8025d72:	2320      	movs	r3, #32
 8025d74:	9307      	str	r3, [sp, #28]
 8025d76:	9b07      	ldr	r3, [sp, #28]
 8025d78:	fb92 fefc 	sdiv	lr, r2, ip
 8025d7c:	fb0c 221e 	mls	r2, ip, lr, r2
 8025d80:	4419      	add	r1, r3
 8025d82:	2a00      	cmp	r2, #0
 8025d84:	bfbc      	itt	lt
 8025d86:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8025d8a:	4462      	addlt	r2, ip
 8025d8c:	fb0e 9101 	mla	r1, lr, r1, r9
 8025d90:	4470      	add	r0, lr
 8025d92:	b20b      	sxth	r3, r1
 8025d94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025d96:	b200      	sxth	r0, r0
 8025d98:	440d      	add	r5, r1
 8025d9a:	f9bd 1000 	ldrsh.w	r1, [sp]
 8025d9e:	8320      	strh	r0, [r4, #24]
 8025da0:	fa0f f985 	sxth.w	r9, r5
 8025da4:	9106      	str	r1, [sp, #24]
 8025da6:	0409      	lsls	r1, r1, #16
 8025da8:	8363      	strh	r3, [r4, #26]
 8025daa:	910a      	str	r1, [sp, #40]	; 0x28
 8025dac:	4449      	add	r1, r9
 8025dae:	42b9      	cmp	r1, r7
 8025db0:	f43f ad3a 	beq.w	8025828 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8025db4:	4303      	orrs	r3, r0
 8025db6:	d00c      	beq.n	8025dd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 8025db8:	f1b8 0f00 	cmp.w	r8, #0
 8025dbc:	db09      	blt.n	8025dd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 8025dbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025dc0:	4543      	cmp	r3, r8
 8025dc2:	dd06      	ble.n	8025dd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 8025dc4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8025dc8:	4299      	cmp	r1, r3
 8025dca:	d368      	bcc.n	8025e9e <_ZN8touchgfx7Outline10renderLineEiiii+0x7e6>
 8025dcc:	2301      	movs	r3, #1
 8025dce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025dd2:	9b06      	ldr	r3, [sp, #24]
 8025dd4:	4476      	add	r6, lr
 8025dd6:	f8a4 9014 	strh.w	r9, [r4, #20]
 8025dda:	82e3      	strh	r3, [r4, #22]
 8025ddc:	2300      	movs	r3, #0
 8025dde:	8323      	strh	r3, [r4, #24]
 8025de0:	8363      	strh	r3, [r4, #26]
 8025de2:	9b05      	ldr	r3, [sp, #20]
 8025de4:	42ab      	cmp	r3, r5
 8025de6:	d048      	beq.n	8025e7a <_ZN8touchgfx7Outline10renderLineEiiii+0x7c2>
 8025de8:	9b02      	ldr	r3, [sp, #8]
 8025dea:	eba2 020c 	sub.w	r2, r2, ip
 8025dee:	1b9b      	subs	r3, r3, r6
 8025df0:	4473      	add	r3, lr
 8025df2:	015b      	lsls	r3, r3, #5
 8025df4:	fb93 f8fc 	sdiv	r8, r3, ip
 8025df8:	fb0c 3318 	mls	r3, ip, r8, r3
 8025dfc:	2b00      	cmp	r3, #0
 8025dfe:	bfbc      	itt	lt
 8025e00:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8025e04:	4463      	addlt	r3, ip
 8025e06:	f108 0101 	add.w	r1, r8, #1
 8025e0a:	910f      	str	r1, [sp, #60]	; 0x3c
 8025e0c:	18d2      	adds	r2, r2, r3
 8025e0e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8025e10:	bf56      	itet	pl
 8025e12:	980f      	ldrpl	r0, [sp, #60]	; 0x3c
 8025e14:	4640      	movmi	r0, r8
 8025e16:	eba2 020c 	subpl.w	r2, r2, ip
 8025e1a:	fa0f fe80 	sxth.w	lr, r0
 8025e1e:	4406      	add	r6, r0
 8025e20:	0141      	lsls	r1, r0, #5
 8025e22:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025e24:	f8a4 e018 	strh.w	lr, [r4, #24]
 8025e28:	4405      	add	r5, r0
 8025e2a:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8025e2e:	b209      	sxth	r1, r1
 8025e30:	fa0f f985 	sxth.w	r9, r5
 8025e34:	4438      	add	r0, r7
 8025e36:	8361      	strh	r1, [r4, #26]
 8025e38:	444f      	add	r7, r9
 8025e3a:	42b8      	cmp	r0, r7
 8025e3c:	f43f acf4 	beq.w	8025828 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8025e40:	ea5e 0101 	orrs.w	r1, lr, r1
 8025e44:	d00e      	beq.n	8025e64 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 8025e46:	9906      	ldr	r1, [sp, #24]
 8025e48:	2900      	cmp	r1, #0
 8025e4a:	db0b      	blt.n	8025e64 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 8025e4c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025e4e:	9806      	ldr	r0, [sp, #24]
 8025e50:	4288      	cmp	r0, r1
 8025e52:	da07      	bge.n	8025e64 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 8025e54:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025e58:	4288      	cmp	r0, r1
 8025e5a:	d330      	bcc.n	8025ebe <_ZN8touchgfx7Outline10renderLineEiiii+0x806>
 8025e5c:	f04f 0101 	mov.w	r1, #1
 8025e60:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8025e64:	9906      	ldr	r1, [sp, #24]
 8025e66:	f8a4 9014 	strh.w	r9, [r4, #20]
 8025e6a:	82e1      	strh	r1, [r4, #22]
 8025e6c:	f04f 0100 	mov.w	r1, #0
 8025e70:	8321      	strh	r1, [r4, #24]
 8025e72:	8361      	strh	r1, [r4, #26]
 8025e74:	9905      	ldr	r1, [sp, #20]
 8025e76:	42a9      	cmp	r1, r5
 8025e78:	d1c8      	bne.n	8025e0c <_ZN8touchgfx7Outline10renderLineEiiii+0x754>
 8025e7a:	9b02      	ldr	r3, [sp, #8]
 8025e7c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8025e7e:	1b9e      	subs	r6, r3, r6
 8025e80:	9b07      	ldr	r3, [sp, #28]
 8025e82:	3120      	adds	r1, #32
 8025e84:	8326      	strh	r6, [r4, #24]
 8025e86:	1ac9      	subs	r1, r1, r3
 8025e88:	434e      	muls	r6, r1
 8025e8a:	8366      	strh	r6, [r4, #26]
 8025e8c:	e65a      	b.n	8025b44 <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 8025e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8025e92:	434a      	muls	r2, r1
 8025e94:	f1cc 0c00 	rsb	ip, ip, #0
 8025e98:	9309      	str	r3, [sp, #36]	; 0x24
 8025e9a:	2300      	movs	r3, #0
 8025e9c:	e76a      	b.n	8025d74 <_ZN8touchgfx7Outline10renderLineEiiii+0x6bc>
 8025e9e:	f104 0314 	add.w	r3, r4, #20
 8025ea2:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8025ea6:	cb03      	ldmia	r3!, {r0, r1}
 8025ea8:	f8c8 0000 	str.w	r0, [r8]
 8025eac:	f8c8 1004 	str.w	r1, [r8, #4]
 8025eb0:	6923      	ldr	r3, [r4, #16]
 8025eb2:	3308      	adds	r3, #8
 8025eb4:	6123      	str	r3, [r4, #16]
 8025eb6:	68a3      	ldr	r3, [r4, #8]
 8025eb8:	3301      	adds	r3, #1
 8025eba:	60a3      	str	r3, [r4, #8]
 8025ebc:	e789      	b.n	8025dd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 8025ebe:	6921      	ldr	r1, [r4, #16]
 8025ec0:	f104 0e14 	add.w	lr, r4, #20
 8025ec4:	910e      	str	r1, [sp, #56]	; 0x38
 8025ec6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8025ec8:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8025ecc:	6038      	str	r0, [r7, #0]
 8025ece:	4638      	mov	r0, r7
 8025ed0:	6079      	str	r1, [r7, #4]
 8025ed2:	6921      	ldr	r1, [r4, #16]
 8025ed4:	3108      	adds	r1, #8
 8025ed6:	6121      	str	r1, [r4, #16]
 8025ed8:	68a1      	ldr	r1, [r4, #8]
 8025eda:	3101      	adds	r1, #1
 8025edc:	60a1      	str	r1, [r4, #8]
 8025ede:	e7c1      	b.n	8025e64 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 8025ee0:	f104 0214 	add.w	r2, r4, #20
 8025ee4:	6926      	ldr	r6, [r4, #16]
 8025ee6:	ca03      	ldmia	r2!, {r0, r1}
 8025ee8:	6030      	str	r0, [r6, #0]
 8025eea:	6071      	str	r1, [r6, #4]
 8025eec:	6922      	ldr	r2, [r4, #16]
 8025eee:	3208      	adds	r2, #8
 8025ef0:	6122      	str	r2, [r4, #16]
 8025ef2:	68a2      	ldr	r2, [r4, #8]
 8025ef4:	3201      	adds	r2, #1
 8025ef6:	60a2      	str	r2, [r4, #8]
 8025ef8:	e647      	b.n	8025b8a <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 8025efa:	f104 0514 	add.w	r5, r4, #20
 8025efe:	6926      	ldr	r6, [r4, #16]
 8025f00:	cd03      	ldmia	r5!, {r0, r1}
 8025f02:	6030      	str	r0, [r6, #0]
 8025f04:	6071      	str	r1, [r6, #4]
 8025f06:	6921      	ldr	r1, [r4, #16]
 8025f08:	3108      	adds	r1, #8
 8025f0a:	6121      	str	r1, [r4, #16]
 8025f0c:	68a1      	ldr	r1, [r4, #8]
 8025f0e:	3101      	adds	r1, #1
 8025f10:	60a1      	str	r1, [r4, #8]
 8025f12:	e699      	b.n	8025c48 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 8025f14:	9b01      	ldr	r3, [sp, #4]
 8025f16:	ea4f 176c 	mov.w	r7, ip, asr #5
 8025f1a:	8b20      	ldrh	r0, [r4, #24]
 8025f1c:	f00c 0c1f 	and.w	ip, ip, #31
 8025f20:	f003 031f 	and.w	r3, r3, #31
 8025f24:	f8b4 e01a 	ldrh.w	lr, [r4, #26]
 8025f28:	9310      	str	r3, [sp, #64]	; 0x40
 8025f2a:	9b06      	ldr	r3, [sp, #24]
 8025f2c:	429f      	cmp	r7, r3
 8025f2e:	d10a      	bne.n	8025f46 <_ZN8touchgfx7Outline10renderLineEiiii+0x88e>
 8025f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025f32:	4418      	add	r0, r3
 8025f34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025f36:	449c      	add	ip, r3
 8025f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025f3a:	8320      	strh	r0, [r4, #24]
 8025f3c:	fb03 ee0c 	mla	lr, r3, ip, lr
 8025f40:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8025f44:	e686      	b.n	8025c54 <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 8025f46:	9b00      	ldr	r3, [sp, #0]
 8025f48:	2b00      	cmp	r3, #0
 8025f4a:	f2c0 80a0 	blt.w	802608e <_ZN8touchgfx7Outline10renderLineEiiii+0x9d6>
 8025f4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025f50:	f1cc 0320 	rsb	r3, ip, #32
 8025f54:	434b      	muls	r3, r1
 8025f56:	2101      	movs	r1, #1
 8025f58:	910e      	str	r1, [sp, #56]	; 0x38
 8025f5a:	2120      	movs	r1, #32
 8025f5c:	9a00      	ldr	r2, [sp, #0]
 8025f5e:	910d      	str	r1, [sp, #52]	; 0x34
 8025f60:	990d      	ldr	r1, [sp, #52]	; 0x34
 8025f62:	fb93 f5f2 	sdiv	r5, r3, r2
 8025f66:	fb02 3315 	mls	r3, r2, r5, r3
 8025f6a:	448c      	add	ip, r1
 8025f6c:	2b00      	cmp	r3, #0
 8025f6e:	bfbc      	itt	lt
 8025f70:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8025f74:	189b      	addlt	r3, r3, r2
 8025f76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025f78:	fb05 ec0c 	mla	ip, r5, ip, lr
 8025f7c:	4428      	add	r0, r5
 8025f7e:	4417      	add	r7, r2
 8025f80:	fa0f f18c 	sxth.w	r1, ip
 8025f84:	fa0f fc89 	sxth.w	ip, r9
 8025f88:	fa0f fe87 	sxth.w	lr, r7
 8025f8c:	8361      	strh	r1, [r4, #26]
 8025f8e:	ea4f 420c 	mov.w	r2, ip, lsl #16
 8025f92:	b200      	sxth	r0, r0
 8025f94:	920f      	str	r2, [sp, #60]	; 0x3c
 8025f96:	4472      	add	r2, lr
 8025f98:	8320      	strh	r0, [r4, #24]
 8025f9a:	4542      	cmp	r2, r8
 8025f9c:	f43f ac44 	beq.w	8025828 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8025fa0:	ea50 0201 	orrs.w	r2, r0, r1
 8025fa4:	d00c      	beq.n	8025fc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8025fa6:	2e00      	cmp	r6, #0
 8025fa8:	db0a      	blt.n	8025fc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8025faa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025fac:	42b1      	cmp	r1, r6
 8025fae:	dd07      	ble.n	8025fc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8025fb0:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025fb4:	4288      	cmp	r0, r1
 8025fb6:	d375      	bcc.n	80260a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 8025fb8:	f04f 0201 	mov.w	r2, #1
 8025fbc:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8025fc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025fc2:	f8a4 e014 	strh.w	lr, [r4, #20]
 8025fc6:	1956      	adds	r6, r2, r5
 8025fc8:	9a06      	ldr	r2, [sp, #24]
 8025fca:	f8a4 c016 	strh.w	ip, [r4, #22]
 8025fce:	42ba      	cmp	r2, r7
 8025fd0:	f8a4 a018 	strh.w	sl, [r4, #24]
 8025fd4:	f8a4 a01a 	strh.w	sl, [r4, #26]
 8025fd8:	d04c      	beq.n	8026074 <_ZN8touchgfx7Outline10renderLineEiiii+0x9bc>
 8025fda:	9a02      	ldr	r2, [sp, #8]
 8025fdc:	1b91      	subs	r1, r2, r6
 8025fde:	9a00      	ldr	r2, [sp, #0]
 8025fe0:	440d      	add	r5, r1
 8025fe2:	016d      	lsls	r5, r5, #5
 8025fe4:	fb95 fef2 	sdiv	lr, r5, r2
 8025fe8:	fb02 551e 	mls	r5, r2, lr, r5
 8025fec:	2d00      	cmp	r5, #0
 8025fee:	bfbc      	itt	lt
 8025ff0:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8025ff4:	18ad      	addlt	r5, r5, r2
 8025ff6:	9a00      	ldr	r2, [sp, #0]
 8025ff8:	1a9b      	subs	r3, r3, r2
 8025ffa:	f10e 0201 	add.w	r2, lr, #1
 8025ffe:	9213      	str	r2, [sp, #76]	; 0x4c
 8026000:	195b      	adds	r3, r3, r5
 8026002:	bf57      	itett	pl
 8026004:	9a00      	ldrpl	r2, [sp, #0]
 8026006:	4670      	movmi	r0, lr
 8026008:	9813      	ldrpl	r0, [sp, #76]	; 0x4c
 802600a:	1a9b      	subpl	r3, r3, r2
 802600c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802600e:	fa0f f880 	sxth.w	r8, r0
 8026012:	4406      	add	r6, r0
 8026014:	4417      	add	r7, r2
 8026016:	0141      	lsls	r1, r0, #5
 8026018:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802601c:	b23a      	sxth	r2, r7
 802601e:	f8a4 8018 	strh.w	r8, [r4, #24]
 8026022:	b209      	sxth	r1, r1
 8026024:	9211      	str	r2, [sp, #68]	; 0x44
 8026026:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026028:	8361      	strh	r1, [r4, #26]
 802602a:	1882      	adds	r2, r0, r2
 802602c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802602e:	9212      	str	r2, [sp, #72]	; 0x48
 8026030:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8026032:	4402      	add	r2, r0
 8026034:	9812      	ldr	r0, [sp, #72]	; 0x48
 8026036:	4290      	cmp	r0, r2
 8026038:	f43f abf6 	beq.w	8025828 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 802603c:	ea58 0201 	orrs.w	r2, r8, r1
 8026040:	d00d      	beq.n	802605e <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 8026042:	f1bc 0f00 	cmp.w	ip, #0
 8026046:	db0a      	blt.n	802605e <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 8026048:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802604a:	458c      	cmp	ip, r1
 802604c:	da07      	bge.n	802605e <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 802604e:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8026052:	4288      	cmp	r0, r1
 8026054:	d336      	bcc.n	80260c4 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0c>
 8026056:	f04f 0201 	mov.w	r2, #1
 802605a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802605e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8026060:	f8a4 c016 	strh.w	ip, [r4, #22]
 8026064:	82a2      	strh	r2, [r4, #20]
 8026066:	9a06      	ldr	r2, [sp, #24]
 8026068:	f8a4 a018 	strh.w	sl, [r4, #24]
 802606c:	42ba      	cmp	r2, r7
 802606e:	f8a4 a01a 	strh.w	sl, [r4, #26]
 8026072:	d1c5      	bne.n	8026000 <_ZN8touchgfx7Outline10renderLineEiiii+0x948>
 8026074:	9b02      	ldr	r3, [sp, #8]
 8026076:	1b9e      	subs	r6, r3, r6
 8026078:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802607a:	f103 0c20 	add.w	ip, r3, #32
 802607e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026080:	8326      	strh	r6, [r4, #24]
 8026082:	ebac 0c03 	sub.w	ip, ip, r3
 8026086:	fb06 f60c 	mul.w	r6, r6, ip
 802608a:	8366      	strh	r6, [r4, #26]
 802608c:	e5e2      	b.n	8025c54 <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 802608e:	9a00      	ldr	r2, [sp, #0]
 8026090:	f04f 31ff 	mov.w	r1, #4294967295
 8026094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026096:	4252      	negs	r2, r2
 8026098:	910e      	str	r1, [sp, #56]	; 0x38
 802609a:	fb03 f30c 	mul.w	r3, r3, ip
 802609e:	2100      	movs	r1, #0
 80260a0:	9200      	str	r2, [sp, #0]
 80260a2:	e75b      	b.n	8025f5c <_ZN8touchgfx7Outline10renderLineEiiii+0x8a4>
 80260a4:	f104 0614 	add.w	r6, r4, #20
 80260a8:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80260ac:	ce03      	ldmia	r6!, {r0, r1}
 80260ae:	f8c8 0000 	str.w	r0, [r8]
 80260b2:	f8c8 1004 	str.w	r1, [r8, #4]
 80260b6:	6921      	ldr	r1, [r4, #16]
 80260b8:	3108      	adds	r1, #8
 80260ba:	6121      	str	r1, [r4, #16]
 80260bc:	68a1      	ldr	r1, [r4, #8]
 80260be:	3101      	adds	r1, #1
 80260c0:	60a1      	str	r1, [r4, #8]
 80260c2:	e77d      	b.n	8025fc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 80260c4:	f104 0814 	add.w	r8, r4, #20
 80260c8:	6922      	ldr	r2, [r4, #16]
 80260ca:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80260ce:	9212      	str	r2, [sp, #72]	; 0x48
 80260d0:	6010      	str	r0, [r2, #0]
 80260d2:	6051      	str	r1, [r2, #4]
 80260d4:	6921      	ldr	r1, [r4, #16]
 80260d6:	3108      	adds	r1, #8
 80260d8:	6121      	str	r1, [r4, #16]
 80260da:	68a1      	ldr	r1, [r4, #8]
 80260dc:	3101      	adds	r1, #1
 80260de:	60a1      	str	r1, [r4, #8]
 80260e0:	e7bd      	b.n	802605e <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 80260e2:	f104 0214 	add.w	r2, r4, #20
 80260e6:	6926      	ldr	r6, [r4, #16]
 80260e8:	ca03      	ldmia	r2!, {r0, r1}
 80260ea:	6030      	str	r0, [r6, #0]
 80260ec:	6071      	str	r1, [r6, #4]
 80260ee:	6922      	ldr	r2, [r4, #16]
 80260f0:	3208      	adds	r2, #8
 80260f2:	6122      	str	r2, [r4, #16]
 80260f4:	68a2      	ldr	r2, [r4, #8]
 80260f6:	3201      	adds	r2, #1
 80260f8:	60a2      	str	r2, [r4, #8]
 80260fa:	e5ce      	b.n	8025c9a <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 80260fc:	f104 0314 	add.w	r3, r4, #20
 8026100:	6926      	ldr	r6, [r4, #16]
 8026102:	cb03      	ldmia	r3!, {r0, r1}
 8026104:	6030      	str	r0, [r6, #0]
 8026106:	6071      	str	r1, [r6, #4]
 8026108:	6923      	ldr	r3, [r4, #16]
 802610a:	3308      	adds	r3, #8
 802610c:	6123      	str	r3, [r4, #16]
 802610e:	68a3      	ldr	r3, [r4, #8]
 8026110:	3301      	adds	r3, #1
 8026112:	60a3      	str	r3, [r4, #8]
 8026114:	e5f6      	b.n	8025d04 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 8026116:	9b01      	ldr	r3, [sp, #4]
 8026118:	8b20      	ldrh	r0, [r4, #24]
 802611a:	ea4f 1c63 	mov.w	ip, r3, asr #5
 802611e:	f003 021f 	and.w	r2, r3, #31
 8026122:	9b04      	ldr	r3, [sp, #16]
 8026124:	45dc      	cmp	ip, fp
 8026126:	8b66      	ldrh	r6, [r4, #26]
 8026128:	f003 031f 	and.w	r3, r3, #31
 802612c:	9305      	str	r3, [sp, #20]
 802612e:	9b03      	ldr	r3, [sp, #12]
 8026130:	eba3 050e 	sub.w	r5, r3, lr
 8026134:	d108      	bne.n	8026148 <_ZN8touchgfx7Outline10renderLineEiiii+0xa90>
 8026136:	9b05      	ldr	r3, [sp, #20]
 8026138:	4428      	add	r0, r5
 802613a:	441a      	add	r2, r3
 802613c:	8320      	strh	r0, [r4, #24]
 802613e:	fb05 6502 	mla	r5, r5, r2, r6
 8026142:	8365      	strh	r5, [r4, #26]
 8026144:	f7ff bbed 	b.w	8025922 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 8026148:	9b04      	ldr	r3, [sp, #16]
 802614a:	9901      	ldr	r1, [sp, #4]
 802614c:	1a5b      	subs	r3, r3, r1
 802614e:	9300      	str	r3, [sp, #0]
 8026150:	f100 809c 	bmi.w	802628c <_ZN8touchgfx7Outline10renderLineEiiii+0xbd4>
 8026154:	f1c2 0120 	rsb	r1, r2, #32
 8026158:	434d      	muls	r5, r1
 802615a:	2101      	movs	r1, #1
 802615c:	9102      	str	r1, [sp, #8]
 802615e:	2120      	movs	r1, #32
 8026160:	9b00      	ldr	r3, [sp, #0]
 8026162:	9101      	str	r1, [sp, #4]
 8026164:	9901      	ldr	r1, [sp, #4]
 8026166:	fb95 f7f3 	sdiv	r7, r5, r3
 802616a:	fb03 5517 	mls	r5, r3, r7, r5
 802616e:	440a      	add	r2, r1
 8026170:	2d00      	cmp	r5, #0
 8026172:	bfbc      	itt	lt
 8026174:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8026178:	18ed      	addlt	r5, r5, r3
 802617a:	fb07 6202 	mla	r2, r7, r2, r6
 802617e:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 8026182:	4438      	add	r0, r7
 8026184:	b211      	sxth	r1, r2
 8026186:	9a02      	ldr	r2, [sp, #8]
 8026188:	b200      	sxth	r0, r0
 802618a:	4494      	add	ip, r2
 802618c:	fa0f f289 	sxth.w	r2, r9
 8026190:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8026194:	0413      	lsls	r3, r2, #16
 8026196:	8320      	strh	r0, [r4, #24]
 8026198:	fa0f f88c 	sxth.w	r8, ip
 802619c:	8361      	strh	r1, [r4, #26]
 802619e:	eb09 4906 	add.w	r9, r9, r6, lsl #16
 80261a2:	9304      	str	r3, [sp, #16]
 80261a4:	eb08 0a03 	add.w	sl, r8, r3
 80261a8:	45d1      	cmp	r9, sl
 80261aa:	f43f ab3d 	beq.w	8025828 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 80261ae:	ea50 0301 	orrs.w	r3, r0, r1
 80261b2:	d00b      	beq.n	80261cc <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 80261b4:	2e00      	cmp	r6, #0
 80261b6:	db09      	blt.n	80261cc <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 80261b8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80261ba:	428e      	cmp	r6, r1
 80261bc:	da06      	bge.n	80261cc <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 80261be:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80261c2:	4288      	cmp	r0, r1
 80261c4:	d36b      	bcc.n	802629e <_ZN8touchgfx7Outline10renderLineEiiii+0xbe6>
 80261c6:	2101      	movs	r1, #1
 80261c8:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80261cc:	2100      	movs	r1, #0
 80261ce:	45e3      	cmp	fp, ip
 80261d0:	f8a4 8014 	strh.w	r8, [r4, #20]
 80261d4:	44be      	add	lr, r7
 80261d6:	82e2      	strh	r2, [r4, #22]
 80261d8:	8321      	strh	r1, [r4, #24]
 80261da:	8361      	strh	r1, [r4, #26]
 80261dc:	d047      	beq.n	802626e <_ZN8touchgfx7Outline10renderLineEiiii+0xbb6>
 80261de:	9b03      	ldr	r3, [sp, #12]
 80261e0:	f04f 0900 	mov.w	r9, #0
 80261e4:	eba3 060e 	sub.w	r6, r3, lr
 80261e8:	9b00      	ldr	r3, [sp, #0]
 80261ea:	443e      	add	r6, r7
 80261ec:	0176      	lsls	r6, r6, #5
 80261ee:	fb96 f7f3 	sdiv	r7, r6, r3
 80261f2:	fb03 6617 	mls	r6, r3, r7, r6
 80261f6:	428e      	cmp	r6, r1
 80261f8:	bfbc      	itt	lt
 80261fa:	f107 37ff 	addlt.w	r7, r7, #4294967295
 80261fe:	18f6      	addlt	r6, r6, r3
 8026200:	9b00      	ldr	r3, [sp, #0]
 8026202:	1aed      	subs	r5, r5, r3
 8026204:	1c7b      	adds	r3, r7, #1
 8026206:	9307      	str	r3, [sp, #28]
 8026208:	19ad      	adds	r5, r5, r6
 802620a:	bf57      	itett	pl
 802620c:	9b00      	ldrpl	r3, [sp, #0]
 802620e:	4638      	movmi	r0, r7
 8026210:	9807      	ldrpl	r0, [sp, #28]
 8026212:	1aed      	subpl	r5, r5, r3
 8026214:	9b02      	ldr	r3, [sp, #8]
 8026216:	fa0f f880 	sxth.w	r8, r0
 802621a:	4486      	add	lr, r0
 802621c:	449c      	add	ip, r3
 802621e:	0141      	lsls	r1, r0, #5
 8026220:	9b04      	ldr	r3, [sp, #16]
 8026222:	fa0f fa8c 	sxth.w	sl, ip
 8026226:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802622a:	b209      	sxth	r1, r1
 802622c:	f8a4 8018 	strh.w	r8, [r4, #24]
 8026230:	4418      	add	r0, r3
 8026232:	4453      	add	r3, sl
 8026234:	8361      	strh	r1, [r4, #26]
 8026236:	4298      	cmp	r0, r3
 8026238:	f43f aaf6 	beq.w	8025828 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 802623c:	ea58 0301 	orrs.w	r3, r8, r1
 8026240:	d00c      	beq.n	802625c <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 8026242:	2a00      	cmp	r2, #0
 8026244:	db0a      	blt.n	802625c <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 8026246:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8026248:	428a      	cmp	r2, r1
 802624a:	da07      	bge.n	802625c <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 802624c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8026250:	4288      	cmp	r0, r1
 8026252:	d334      	bcc.n	80262be <_ZN8touchgfx7Outline10renderLineEiiii+0xc06>
 8026254:	f04f 0301 	mov.w	r3, #1
 8026258:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802625c:	45e3      	cmp	fp, ip
 802625e:	f8a4 a014 	strh.w	sl, [r4, #20]
 8026262:	82e2      	strh	r2, [r4, #22]
 8026264:	f8a4 9018 	strh.w	r9, [r4, #24]
 8026268:	f8a4 901a 	strh.w	r9, [r4, #26]
 802626c:	d1cc      	bne.n	8026208 <_ZN8touchgfx7Outline10renderLineEiiii+0xb50>
 802626e:	9b03      	ldr	r3, [sp, #12]
 8026270:	9e05      	ldr	r6, [sp, #20]
 8026272:	eba3 0e0e 	sub.w	lr, r3, lr
 8026276:	9b01      	ldr	r3, [sp, #4]
 8026278:	3620      	adds	r6, #32
 802627a:	f8a4 e018 	strh.w	lr, [r4, #24]
 802627e:	1af6      	subs	r6, r6, r3
 8026280:	fb0e fe06 	mul.w	lr, lr, r6
 8026284:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8026288:	f7ff bb4b 	b.w	8025922 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 802628c:	9b00      	ldr	r3, [sp, #0]
 802628e:	f04f 31ff 	mov.w	r1, #4294967295
 8026292:	4355      	muls	r5, r2
 8026294:	425b      	negs	r3, r3
 8026296:	9102      	str	r1, [sp, #8]
 8026298:	2100      	movs	r1, #0
 802629a:	9300      	str	r3, [sp, #0]
 802629c:	e760      	b.n	8026160 <_ZN8touchgfx7Outline10renderLineEiiii+0xaa8>
 802629e:	f104 0614 	add.w	r6, r4, #20
 80262a2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80262a6:	ce03      	ldmia	r6!, {r0, r1}
 80262a8:	f8c9 0000 	str.w	r0, [r9]
 80262ac:	f8c9 1004 	str.w	r1, [r9, #4]
 80262b0:	6921      	ldr	r1, [r4, #16]
 80262b2:	3108      	adds	r1, #8
 80262b4:	6121      	str	r1, [r4, #16]
 80262b6:	68a1      	ldr	r1, [r4, #8]
 80262b8:	3101      	adds	r1, #1
 80262ba:	60a1      	str	r1, [r4, #8]
 80262bc:	e786      	b.n	80261cc <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 80262be:	f104 0814 	add.w	r8, r4, #20
 80262c2:	6923      	ldr	r3, [r4, #16]
 80262c4:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80262c8:	9306      	str	r3, [sp, #24]
 80262ca:	6018      	str	r0, [r3, #0]
 80262cc:	6059      	str	r1, [r3, #4]
 80262ce:	6921      	ldr	r1, [r4, #16]
 80262d0:	3108      	adds	r1, #8
 80262d2:	6121      	str	r1, [r4, #16]
 80262d4:	68a1      	ldr	r1, [r4, #8]
 80262d6:	3101      	adds	r1, #1
 80262d8:	60a1      	str	r1, [r4, #8]
 80262da:	e7bf      	b.n	802625c <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>

080262dc <_ZN8touchgfx7Outline6lineToEii>:
 80262dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80262de:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80262e0:	4604      	mov	r4, r0
 80262e2:	460d      	mov	r5, r1
 80262e4:	4616      	mov	r6, r2
 80262e6:	079b      	lsls	r3, r3, #30
 80262e8:	d526      	bpl.n	8026338 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 80262ea:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 80262ee:	ea85 0001 	eor.w	r0, r5, r1
 80262f2:	ea86 0302 	eor.w	r3, r6, r2
 80262f6:	4303      	orrs	r3, r0
 80262f8:	d01e      	beq.n	8026338 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 80262fa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80262fc:	114b      	asrs	r3, r1, #5
 80262fe:	9600      	str	r6, [sp, #0]
 8026300:	4283      	cmp	r3, r0
 8026302:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8026304:	bfb8      	it	lt
 8026306:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8026308:	3301      	adds	r3, #1
 802630a:	4283      	cmp	r3, r0
 802630c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802630e:	bfc8      	it	gt
 8026310:	6363      	strgt	r3, [r4, #52]	; 0x34
 8026312:	116b      	asrs	r3, r5, #5
 8026314:	4283      	cmp	r3, r0
 8026316:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8026318:	bfb8      	it	lt
 802631a:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802631c:	3301      	adds	r3, #1
 802631e:	4283      	cmp	r3, r0
 8026320:	4620      	mov	r0, r4
 8026322:	bfc8      	it	gt
 8026324:	6363      	strgt	r3, [r4, #52]	; 0x34
 8026326:	462b      	mov	r3, r5
 8026328:	f7ff f9c6 	bl	80256b8 <_ZN8touchgfx7Outline10renderLineEiiii>
 802632c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802632e:	f043 0301 	orr.w	r3, r3, #1
 8026332:	e9c4 5607 	strd	r5, r6, [r4, #28]
 8026336:	63e3      	str	r3, [r4, #60]	; 0x3c
 8026338:	b002      	add	sp, #8
 802633a:	bd70      	pop	{r4, r5, r6, pc}

0802633c <_ZN8touchgfx7Outline6moveToEii>:
 802633c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802633e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8026340:	4615      	mov	r5, r2
 8026342:	4604      	mov	r4, r0
 8026344:	460e      	mov	r6, r1
 8026346:	079a      	lsls	r2, r3, #30
 8026348:	d401      	bmi.n	802634e <_ZN8touchgfx7Outline6moveToEii+0x12>
 802634a:	f7ff f96f 	bl	802562c <_ZN8touchgfx7Outline5resetEv>
 802634e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8026350:	07db      	lsls	r3, r3, #31
 8026352:	d504      	bpl.n	802635e <_ZN8touchgfx7Outline6moveToEii+0x22>
 8026354:	4620      	mov	r0, r4
 8026356:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 802635a:	f7ff ffbf 	bl	80262dc <_ZN8touchgfx7Outline6lineToEii>
 802635e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8026362:	f346 1c4f 	sbfx	ip, r6, #5, #16
 8026366:	f345 174f 	sbfx	r7, r5, #5, #16
 802636a:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 802636e:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 8026372:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8026376:	428a      	cmp	r2, r1
 8026378:	d015      	beq.n	80263a6 <_ZN8touchgfx7Outline6moveToEii+0x6a>
 802637a:	8b61      	ldrh	r1, [r4, #26]
 802637c:	8b22      	ldrh	r2, [r4, #24]
 802637e:	430a      	orrs	r2, r1
 8026380:	d00b      	beq.n	802639a <_ZN8touchgfx7Outline6moveToEii+0x5e>
 8026382:	2b00      	cmp	r3, #0
 8026384:	db09      	blt.n	802639a <_ZN8touchgfx7Outline6moveToEii+0x5e>
 8026386:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8026388:	4293      	cmp	r3, r2
 802638a:	da06      	bge.n	802639a <_ZN8touchgfx7Outline6moveToEii+0x5e>
 802638c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8026390:	429a      	cmp	r2, r3
 8026392:	d30d      	bcc.n	80263b0 <_ZN8touchgfx7Outline6moveToEii+0x74>
 8026394:	2301      	movs	r3, #1
 8026396:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802639a:	2300      	movs	r3, #0
 802639c:	f8a4 c014 	strh.w	ip, [r4, #20]
 80263a0:	82e7      	strh	r7, [r4, #22]
 80263a2:	8323      	strh	r3, [r4, #24]
 80263a4:	8363      	strh	r3, [r4, #26]
 80263a6:	61e6      	str	r6, [r4, #28]
 80263a8:	62a5      	str	r5, [r4, #40]	; 0x28
 80263aa:	e9c4 5608 	strd	r5, r6, [r4, #32]
 80263ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80263b0:	f104 0314 	add.w	r3, r4, #20
 80263b4:	6922      	ldr	r2, [r4, #16]
 80263b6:	cb03      	ldmia	r3!, {r0, r1}
 80263b8:	6010      	str	r0, [r2, #0]
 80263ba:	6051      	str	r1, [r2, #4]
 80263bc:	6923      	ldr	r3, [r4, #16]
 80263be:	3308      	adds	r3, #8
 80263c0:	6123      	str	r3, [r4, #16]
 80263c2:	68a3      	ldr	r3, [r4, #8]
 80263c4:	3301      	adds	r3, #1
 80263c6:	60a3      	str	r3, [r4, #8]
 80263c8:	e7e7      	b.n	802639a <_ZN8touchgfx7Outline6moveToEii+0x5e>

080263ca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 80263ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80263ce:	b0d1      	sub	sp, #324	; 0x144
 80263d0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80263d4:	466c      	mov	r4, sp
 80263d6:	1a0d      	subs	r5, r1, r0
 80263d8:	f100 0208 	add.w	r2, r0, #8
 80263dc:	2d48      	cmp	r5, #72	; 0x48
 80263de:	f340 80ba 	ble.w	8026556 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 80263e2:	112d      	asrs	r5, r5, #4
 80263e4:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 80263e8:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 80263ec:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 80263f0:	f9b0 8000 	ldrsh.w	r8, [r0]
 80263f4:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 80263f8:	681e      	ldr	r6, [r3, #0]
 80263fa:	6006      	str	r6, [r0, #0]
 80263fc:	685e      	ldr	r6, [r3, #4]
 80263fe:	6046      	str	r6, [r0, #4]
 8026400:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8026404:	f8a3 e002 	strh.w	lr, [r3, #2]
 8026408:	f8a3 c004 	strh.w	ip, [r3, #4]
 802640c:	80df      	strh	r7, [r3, #6]
 802640e:	f1a1 0308 	sub.w	r3, r1, #8
 8026412:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 8026416:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 802641a:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 802641e:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8026422:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 8026426:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802642a:	4565      	cmp	r5, ip
 802642c:	da0f      	bge.n	802644e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 802642e:	681d      	ldr	r5, [r3, #0]
 8026430:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 8026434:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8026438:	6015      	str	r5, [r2, #0]
 802643a:	685d      	ldr	r5, [r3, #4]
 802643c:	6055      	str	r5, [r2, #4]
 802643e:	f821 7c08 	strh.w	r7, [r1, #-8]
 8026442:	f821 6c06 	strh.w	r6, [r1, #-6]
 8026446:	f821 ec04 	strh.w	lr, [r1, #-4]
 802644a:	f821 cc02 	strh.w	ip, [r1, #-2]
 802644e:	f9b0 7000 	ldrsh.w	r7, [r0]
 8026452:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8026456:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 802645a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 802645e:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8026462:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8026466:	45ac      	cmp	ip, r5
 8026468:	da0d      	bge.n	8026486 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 802646a:	6815      	ldr	r5, [r2, #0]
 802646c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8026470:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8026474:	6005      	str	r5, [r0, #0]
 8026476:	6855      	ldr	r5, [r2, #4]
 8026478:	8107      	strh	r7, [r0, #8]
 802647a:	6045      	str	r5, [r0, #4]
 802647c:	8146      	strh	r6, [r0, #10]
 802647e:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8026482:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8026486:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 802648a:	f9b0 7000 	ldrsh.w	r7, [r0]
 802648e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8026492:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8026496:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 802649a:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802649e:	4565      	cmp	r5, ip
 80264a0:	da0f      	bge.n	80264c2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 80264a2:	681d      	ldr	r5, [r3, #0]
 80264a4:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80264a8:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80264ac:	6005      	str	r5, [r0, #0]
 80264ae:	685d      	ldr	r5, [r3, #4]
 80264b0:	6045      	str	r5, [r0, #4]
 80264b2:	f821 7c08 	strh.w	r7, [r1, #-8]
 80264b6:	f821 6c06 	strh.w	r6, [r1, #-6]
 80264ba:	f821 ec04 	strh.w	lr, [r1, #-4]
 80264be:	f821 cc02 	strh.w	ip, [r1, #-2]
 80264c2:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 80264c6:	f102 0508 	add.w	r5, r2, #8
 80264ca:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 80264ce:	f9b0 e000 	ldrsh.w	lr, [r0]
 80264d2:	462f      	mov	r7, r5
 80264d4:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80264d8:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 80264dc:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 80264e0:	4556      	cmp	r6, sl
 80264e2:	db18      	blt.n	8026516 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 80264e4:	3b08      	subs	r3, #8
 80264e6:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 80264ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80264ee:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 80264f2:	45b2      	cmp	sl, r6
 80264f4:	dbf6      	blt.n	80264e4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 80264f6:	42ab      	cmp	r3, r5
 80264f8:	681e      	ldr	r6, [r3, #0]
 80264fa:	d30e      	bcc.n	802651a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 80264fc:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 8026500:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8026504:	602e      	str	r6, [r5, #0]
 8026506:	685e      	ldr	r6, [r3, #4]
 8026508:	606e      	str	r6, [r5, #4]
 802650a:	f8a3 9000 	strh.w	r9, [r3]
 802650e:	f8a3 8002 	strh.w	r8, [r3, #2]
 8026512:	809f      	strh	r7, [r3, #4]
 8026514:	80da      	strh	r2, [r3, #6]
 8026516:	462a      	mov	r2, r5
 8026518:	e7d3      	b.n	80264c2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802651a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 802651e:	6006      	str	r6, [r0, #0]
 8026520:	685e      	ldr	r6, [r3, #4]
 8026522:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8026526:	6046      	str	r6, [r0, #4]
 8026528:	1a1e      	subs	r6, r3, r0
 802652a:	80da      	strh	r2, [r3, #6]
 802652c:	1b4a      	subs	r2, r1, r5
 802652e:	f8a3 e000 	strh.w	lr, [r3]
 8026532:	10d2      	asrs	r2, r2, #3
 8026534:	f8a3 c002 	strh.w	ip, [r3, #2]
 8026538:	f8a3 8004 	strh.w	r8, [r3, #4]
 802653c:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 8026540:	bfb5      	itete	lt
 8026542:	e9c4 0300 	strdlt	r0, r3, [r4]
 8026546:	4607      	movge	r7, r0
 8026548:	460b      	movlt	r3, r1
 802654a:	e9c4 5100 	strdge	r5, r1, [r4]
 802654e:	4638      	mov	r0, r7
 8026550:	3408      	adds	r4, #8
 8026552:	4619      	mov	r1, r3
 8026554:	e73f      	b.n	80263d6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8026556:	4291      	cmp	r1, r2
 8026558:	d925      	bls.n	80265a6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 802655a:	f1a2 0310 	sub.w	r3, r2, #16
 802655e:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 8026562:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 8026566:	f9b3 e00a 	ldrsh.w	lr, [r3, #10]
 802656a:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 802656e:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 8026572:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8026576:	42ae      	cmp	r6, r5
 8026578:	da13      	bge.n	80265a2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 802657a:	461d      	mov	r5, r3
 802657c:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 8026580:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 8026584:	3b08      	subs	r3, #8
 8026586:	f855 6f08 	ldr.w	r6, [r5, #8]!
 802658a:	619e      	str	r6, [r3, #24]
 802658c:	42a8      	cmp	r0, r5
 802658e:	686e      	ldr	r6, [r5, #4]
 8026590:	f8a3 c010 	strh.w	ip, [r3, #16]
 8026594:	61de      	str	r6, [r3, #28]
 8026596:	825f      	strh	r7, [r3, #18]
 8026598:	f8a3 8014 	strh.w	r8, [r3, #20]
 802659c:	f8a3 e016 	strh.w	lr, [r3, #22]
 80265a0:	d1dd      	bne.n	802655e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 80265a2:	3208      	adds	r2, #8
 80265a4:	e7d7      	b.n	8026556 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 80265a6:	466b      	mov	r3, sp
 80265a8:	429c      	cmp	r4, r3
 80265aa:	d903      	bls.n	80265b4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 80265ac:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 80265b0:	3c08      	subs	r4, #8
 80265b2:	e710      	b.n	80263d6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 80265b4:	b051      	add	sp, #324	; 0x144
 80265b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080265ba <_ZN8touchgfx7Outline9sortCellsEv>:
 80265ba:	6881      	ldr	r1, [r0, #8]
 80265bc:	b111      	cbz	r1, 80265c4 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 80265be:	68c0      	ldr	r0, [r0, #12]
 80265c0:	f7ff bf03 	b.w	80263ca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 80265c4:	4770      	bx	lr

080265c6 <_ZN8touchgfx7Outline8getCellsEv>:
 80265c6:	b510      	push	{r4, lr}
 80265c8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80265ca:	4604      	mov	r4, r0
 80265cc:	07da      	lsls	r2, r3, #31
 80265ce:	d507      	bpl.n	80265e0 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 80265d0:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 80265d4:	f7ff fe82 	bl	80262dc <_ZN8touchgfx7Outline6lineToEii>
 80265d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80265da:	f023 0301 	bic.w	r3, r3, #1
 80265de:	63e3      	str	r3, [r4, #60]	; 0x3c
 80265e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80265e2:	079b      	lsls	r3, r3, #30
 80265e4:	d51a      	bpl.n	802661c <_ZN8touchgfx7Outline8getCellsEv+0x56>
 80265e6:	8b62      	ldrh	r2, [r4, #26]
 80265e8:	8b23      	ldrh	r3, [r4, #24]
 80265ea:	4313      	orrs	r3, r2
 80265ec:	d00d      	beq.n	802660a <_ZN8touchgfx7Outline8getCellsEv+0x44>
 80265ee:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80265f2:	2b00      	cmp	r3, #0
 80265f4:	db09      	blt.n	802660a <_ZN8touchgfx7Outline8getCellsEv+0x44>
 80265f6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80265f8:	4293      	cmp	r3, r2
 80265fa:	da06      	bge.n	802660a <_ZN8touchgfx7Outline8getCellsEv+0x44>
 80265fc:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8026600:	429a      	cmp	r2, r3
 8026602:	d80d      	bhi.n	8026620 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8026604:	2301      	movs	r3, #1
 8026606:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802660a:	68a0      	ldr	r0, [r4, #8]
 802660c:	b138      	cbz	r0, 802661e <_ZN8touchgfx7Outline8getCellsEv+0x58>
 802660e:	4620      	mov	r0, r4
 8026610:	f7ff ffd3 	bl	80265ba <_ZN8touchgfx7Outline9sortCellsEv>
 8026614:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8026616:	f023 0302 	bic.w	r3, r3, #2
 802661a:	63e3      	str	r3, [r4, #60]	; 0x3c
 802661c:	68e0      	ldr	r0, [r4, #12]
 802661e:	bd10      	pop	{r4, pc}
 8026620:	f104 0314 	add.w	r3, r4, #20
 8026624:	6922      	ldr	r2, [r4, #16]
 8026626:	cb03      	ldmia	r3!, {r0, r1}
 8026628:	6010      	str	r0, [r2, #0]
 802662a:	6051      	str	r1, [r2, #4]
 802662c:	6923      	ldr	r3, [r4, #16]
 802662e:	3308      	adds	r3, #8
 8026630:	6123      	str	r3, [r4, #16]
 8026632:	68a3      	ldr	r3, [r4, #8]
 8026634:	3301      	adds	r3, #1
 8026636:	60a3      	str	r3, [r4, #8]
 8026638:	e7e7      	b.n	802660a <_ZN8touchgfx7Outline8getCellsEv+0x44>

0802663a <_ZN8touchgfx8ScanlineD1Ev>:
 802663a:	4770      	bx	lr

0802663c <_ZN8touchgfx8ScanlineD0Ev>:
 802663c:	b510      	push	{r4, lr}
 802663e:	4604      	mov	r4, r0
 8026640:	2124      	movs	r1, #36	; 0x24
 8026642:	f000 f888 	bl	8026756 <_ZdlPvj>
 8026646:	4620      	mov	r0, r4
 8026648:	bd10      	pop	{r4, pc}

0802664a <_ZN8touchgfx8Scanline5resetEv>:
 802664a:	b510      	push	{r4, lr}
 802664c:	4604      	mov	r4, r0
 802664e:	f7f1 fc2d 	bl	8017eac <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 8026652:	61a0      	str	r0, [r4, #24]
 8026654:	f7f1 fc30 	bl	8017eb8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 8026658:	61e0      	str	r0, [r4, #28]
 802665a:	f7f1 fc33 	bl	8017ec4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 802665e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8026662:	6220      	str	r0, [r4, #32]
 8026664:	6160      	str	r0, [r4, #20]
 8026666:	e9c4 3301 	strd	r3, r3, [r4, #4]
 802666a:	69e3      	ldr	r3, [r4, #28]
 802666c:	6123      	str	r3, [r4, #16]
 802666e:	2300      	movs	r3, #0
 8026670:	60e3      	str	r3, [r4, #12]
 8026672:	bd10      	pop	{r4, pc}

08026674 <_ZN8touchgfx8ScanlineC1Ev>:
 8026674:	4b09      	ldr	r3, [pc, #36]	; (802669c <_ZN8touchgfx8ScanlineC1Ev+0x28>)
 8026676:	b510      	push	{r4, lr}
 8026678:	6003      	str	r3, [r0, #0]
 802667a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802667e:	4604      	mov	r4, r0
 8026680:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8026684:	2300      	movs	r3, #0
 8026686:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802668a:	e9c0 3305 	strd	r3, r3, [r0, #20]
 802668e:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8026692:	f7ff ffda 	bl	802664a <_ZN8touchgfx8Scanline5resetEv>
 8026696:	4620      	mov	r0, r4
 8026698:	bd10      	pop	{r4, pc}
 802669a:	bf00      	nop
 802669c:	0802f44c 	.word	0x0802f44c

080266a0 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 80266a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80266a4:	1e0c      	subs	r4, r1, #0
 80266a6:	4605      	mov	r5, r0
 80266a8:	4617      	mov	r7, r2
 80266aa:	461e      	mov	r6, r3
 80266ac:	da03      	bge.n	80266b6 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 80266ae:	4426      	add	r6, r4
 80266b0:	2e01      	cmp	r6, #1
 80266b2:	d421      	bmi.n	80266f8 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 80266b4:	2400      	movs	r4, #0
 80266b6:	f7f1 fbf3 	bl	8017ea0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80266ba:	42a0      	cmp	r0, r4
 80266bc:	dd1c      	ble.n	80266f8 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 80266be:	eb04 0806 	add.w	r8, r4, r6
 80266c2:	f7f1 fbed 	bl	8017ea0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80266c6:	4580      	cmp	r8, r0
 80266c8:	d902      	bls.n	80266d0 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 80266ca:	f7f1 fbe9 	bl	8017ea0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80266ce:	1b06      	subs	r6, r0, r4
 80266d0:	69a8      	ldr	r0, [r5, #24]
 80266d2:	4632      	mov	r2, r6
 80266d4:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80266d8:	4420      	add	r0, r4
 80266da:	f7f4 f92f 	bl	801a93c <_ZN8touchgfx6memsetEPvhm>
 80266de:	686b      	ldr	r3, [r5, #4]
 80266e0:	b2b2      	uxth	r2, r6
 80266e2:	3301      	adds	r3, #1
 80266e4:	42a3      	cmp	r3, r4
 80266e6:	696b      	ldr	r3, [r5, #20]
 80266e8:	d108      	bne.n	80266fc <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 80266ea:	8819      	ldrh	r1, [r3, #0]
 80266ec:	440a      	add	r2, r1
 80266ee:	801a      	strh	r2, [r3, #0]
 80266f0:	3c01      	subs	r4, #1
 80266f2:	4434      	add	r4, r6
 80266f4:	e9c5 4701 	strd	r4, r7, [r5, #4]
 80266f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80266fc:	1c99      	adds	r1, r3, #2
 80266fe:	6169      	str	r1, [r5, #20]
 8026700:	805a      	strh	r2, [r3, #2]
 8026702:	692b      	ldr	r3, [r5, #16]
 8026704:	1c9a      	adds	r2, r3, #2
 8026706:	612a      	str	r2, [r5, #16]
 8026708:	805c      	strh	r4, [r3, #2]
 802670a:	68eb      	ldr	r3, [r5, #12]
 802670c:	3301      	adds	r3, #1
 802670e:	60eb      	str	r3, [r5, #12]
 8026710:	e7ee      	b.n	80266f0 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

08026712 <_ZN8touchgfx15RenderingBufferD1Ev>:
 8026712:	4770      	bx	lr

08026714 <_ZN8touchgfx15RenderingBufferD0Ev>:
 8026714:	b510      	push	{r4, lr}
 8026716:	4604      	mov	r4, r0
 8026718:	2118      	movs	r1, #24
 802671a:	f000 f81c 	bl	8026756 <_ZdlPvj>
 802671e:	4620      	mov	r0, r4
 8026720:	bd10      	pop	{r4, pc}
	...

08026724 <_ZN8touchgfx15RenderingBufferC1Ev>:
 8026724:	4a04      	ldr	r2, [pc, #16]	; (8026738 <_ZN8touchgfx15RenderingBufferC1Ev+0x14>)
 8026726:	6002      	str	r2, [r0, #0]
 8026728:	2200      	movs	r2, #0
 802672a:	6042      	str	r2, [r0, #4]
 802672c:	7202      	strb	r2, [r0, #8]
 802672e:	6142      	str	r2, [r0, #20]
 8026730:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8026734:	4770      	bx	lr
 8026736:	bf00      	nop
 8026738:	0802f45c 	.word	0x0802f45c

0802673c <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 802673c:	60c3      	str	r3, [r0, #12]
 802673e:	9b00      	ldr	r3, [sp, #0]
 8026740:	6041      	str	r1, [r0, #4]
 8026742:	6103      	str	r3, [r0, #16]
 8026744:	9b01      	ldr	r3, [sp, #4]
 8026746:	7202      	strb	r2, [r0, #8]
 8026748:	6143      	str	r3, [r0, #20]
 802674a:	4770      	bx	lr

0802674c <__aeabi_atexit>:
 802674c:	460b      	mov	r3, r1
 802674e:	4601      	mov	r1, r0
 8026750:	4618      	mov	r0, r3
 8026752:	f000 b959 	b.w	8026a08 <__cxa_atexit>

08026756 <_ZdlPvj>:
 8026756:	f000 b812 	b.w	802677e <_ZdlPv>

0802675a <__cxa_guard_acquire>:
 802675a:	6803      	ldr	r3, [r0, #0]
 802675c:	07db      	lsls	r3, r3, #31
 802675e:	d406      	bmi.n	802676e <__cxa_guard_acquire+0x14>
 8026760:	7843      	ldrb	r3, [r0, #1]
 8026762:	b103      	cbz	r3, 8026766 <__cxa_guard_acquire+0xc>
 8026764:	deff      	udf	#255	; 0xff
 8026766:	2301      	movs	r3, #1
 8026768:	7043      	strb	r3, [r0, #1]
 802676a:	4618      	mov	r0, r3
 802676c:	4770      	bx	lr
 802676e:	2000      	movs	r0, #0
 8026770:	4770      	bx	lr

08026772 <__cxa_guard_release>:
 8026772:	2301      	movs	r3, #1
 8026774:	6003      	str	r3, [r0, #0]
 8026776:	4770      	bx	lr

08026778 <__cxa_pure_virtual>:
 8026778:	b508      	push	{r3, lr}
 802677a:	f000 f80f 	bl	802679c <_ZSt9terminatev>

0802677e <_ZdlPv>:
 802677e:	f000 b995 	b.w	8026aac <free>

08026782 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8026782:	b508      	push	{r3, lr}
 8026784:	4780      	blx	r0
 8026786:	f000 f913 	bl	80269b0 <abort>
	...

0802678c <_ZSt13get_terminatev>:
 802678c:	4b02      	ldr	r3, [pc, #8]	; (8026798 <_ZSt13get_terminatev+0xc>)
 802678e:	6818      	ldr	r0, [r3, #0]
 8026790:	f3bf 8f5b 	dmb	ish
 8026794:	4770      	bx	lr
 8026796:	bf00      	nop
 8026798:	20000078 	.word	0x20000078

0802679c <_ZSt9terminatev>:
 802679c:	b508      	push	{r3, lr}
 802679e:	f7ff fff5 	bl	802678c <_ZSt13get_terminatev>
 80267a2:	f7ff ffee 	bl	8026782 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080267a8 <ceil>:
 80267a8:	ee10 1a90 	vmov	r1, s1
 80267ac:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80267b0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80267b4:	2b13      	cmp	r3, #19
 80267b6:	b530      	push	{r4, r5, lr}
 80267b8:	ee10 0a10 	vmov	r0, s0
 80267bc:	ee10 5a10 	vmov	r5, s0
 80267c0:	dc2f      	bgt.n	8026822 <ceil+0x7a>
 80267c2:	2b00      	cmp	r3, #0
 80267c4:	da13      	bge.n	80267ee <ceil+0x46>
 80267c6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8026888 <ceil+0xe0>
 80267ca:	ee30 0b07 	vadd.f64	d0, d0, d7
 80267ce:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80267d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80267d6:	dd05      	ble.n	80267e4 <ceil+0x3c>
 80267d8:	2900      	cmp	r1, #0
 80267da:	db4c      	blt.n	8026876 <ceil+0xce>
 80267dc:	4301      	orrs	r1, r0
 80267de:	d04e      	beq.n	802687e <ceil+0xd6>
 80267e0:	492b      	ldr	r1, [pc, #172]	; (8026890 <ceil+0xe8>)
 80267e2:	2000      	movs	r0, #0
 80267e4:	460b      	mov	r3, r1
 80267e6:	4602      	mov	r2, r0
 80267e8:	ec43 2b10 	vmov	d0, r2, r3
 80267ec:	e020      	b.n	8026830 <ceil+0x88>
 80267ee:	4a29      	ldr	r2, [pc, #164]	; (8026894 <ceil+0xec>)
 80267f0:	411a      	asrs	r2, r3
 80267f2:	ea01 0402 	and.w	r4, r1, r2
 80267f6:	4304      	orrs	r4, r0
 80267f8:	d01a      	beq.n	8026830 <ceil+0x88>
 80267fa:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8026888 <ceil+0xe0>
 80267fe:	ee30 0b07 	vadd.f64	d0, d0, d7
 8026802:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8026806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802680a:	ddeb      	ble.n	80267e4 <ceil+0x3c>
 802680c:	2900      	cmp	r1, #0
 802680e:	bfc2      	ittt	gt
 8026810:	f44f 1080 	movgt.w	r0, #1048576	; 0x100000
 8026814:	fa40 f303 	asrgt.w	r3, r0, r3
 8026818:	18c9      	addgt	r1, r1, r3
 802681a:	ea21 0102 	bic.w	r1, r1, r2
 802681e:	2000      	movs	r0, #0
 8026820:	e7e0      	b.n	80267e4 <ceil+0x3c>
 8026822:	2b33      	cmp	r3, #51	; 0x33
 8026824:	dd05      	ble.n	8026832 <ceil+0x8a>
 8026826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802682a:	d101      	bne.n	8026830 <ceil+0x88>
 802682c:	ee30 0b00 	vadd.f64	d0, d0, d0
 8026830:	bd30      	pop	{r4, r5, pc}
 8026832:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8026836:	f04f 32ff 	mov.w	r2, #4294967295
 802683a:	40e2      	lsrs	r2, r4
 802683c:	4202      	tst	r2, r0
 802683e:	d0f7      	beq.n	8026830 <ceil+0x88>
 8026840:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8026888 <ceil+0xe0>
 8026844:	ee30 0b07 	vadd.f64	d0, d0, d7
 8026848:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 802684c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026850:	ddc8      	ble.n	80267e4 <ceil+0x3c>
 8026852:	2900      	cmp	r1, #0
 8026854:	dd02      	ble.n	802685c <ceil+0xb4>
 8026856:	2b14      	cmp	r3, #20
 8026858:	d103      	bne.n	8026862 <ceil+0xba>
 802685a:	3101      	adds	r1, #1
 802685c:	ea20 0002 	bic.w	r0, r0, r2
 8026860:	e7c0      	b.n	80267e4 <ceil+0x3c>
 8026862:	2401      	movs	r4, #1
 8026864:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8026868:	fa04 f303 	lsl.w	r3, r4, r3
 802686c:	4418      	add	r0, r3
 802686e:	42a8      	cmp	r0, r5
 8026870:	bf38      	it	cc
 8026872:	1909      	addcc	r1, r1, r4
 8026874:	e7f2      	b.n	802685c <ceil+0xb4>
 8026876:	2000      	movs	r0, #0
 8026878:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 802687c:	e7b2      	b.n	80267e4 <ceil+0x3c>
 802687e:	4608      	mov	r0, r1
 8026880:	e7b0      	b.n	80267e4 <ceil+0x3c>
 8026882:	bf00      	nop
 8026884:	f3af 8000 	nop.w
 8026888:	8800759c 	.word	0x8800759c
 802688c:	7e37e43c 	.word	0x7e37e43c
 8026890:	3ff00000 	.word	0x3ff00000
 8026894:	000fffff 	.word	0x000fffff

08026898 <fmin>:
 8026898:	b508      	push	{r3, lr}
 802689a:	ed2d 8b04 	vpush	{d8-d9}
 802689e:	eeb0 8b40 	vmov.f64	d8, d0
 80268a2:	eeb0 9b41 	vmov.f64	d9, d1
 80268a6:	f000 f813 	bl	80268d0 <__fpclassifyd>
 80268aa:	b148      	cbz	r0, 80268c0 <fmin+0x28>
 80268ac:	eeb0 0b49 	vmov.f64	d0, d9
 80268b0:	f000 f80e 	bl	80268d0 <__fpclassifyd>
 80268b4:	b130      	cbz	r0, 80268c4 <fmin+0x2c>
 80268b6:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80268ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80268be:	d401      	bmi.n	80268c4 <fmin+0x2c>
 80268c0:	eeb0 8b49 	vmov.f64	d8, d9
 80268c4:	eeb0 0b48 	vmov.f64	d0, d8
 80268c8:	ecbd 8b04 	vpop	{d8-d9}
 80268cc:	bd08      	pop	{r3, pc}
	...

080268d0 <__fpclassifyd>:
 80268d0:	ec51 0b10 	vmov	r0, r1, d0
 80268d4:	b510      	push	{r4, lr}
 80268d6:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 80268da:	460b      	mov	r3, r1
 80268dc:	d019      	beq.n	8026912 <__fpclassifyd+0x42>
 80268de:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 80268e2:	490e      	ldr	r1, [pc, #56]	; (802691c <__fpclassifyd+0x4c>)
 80268e4:	428a      	cmp	r2, r1
 80268e6:	d90e      	bls.n	8026906 <__fpclassifyd+0x36>
 80268e8:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 80268ec:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 80268f0:	428a      	cmp	r2, r1
 80268f2:	d908      	bls.n	8026906 <__fpclassifyd+0x36>
 80268f4:	4a0a      	ldr	r2, [pc, #40]	; (8026920 <__fpclassifyd+0x50>)
 80268f6:	4213      	tst	r3, r2
 80268f8:	d007      	beq.n	802690a <__fpclassifyd+0x3a>
 80268fa:	4294      	cmp	r4, r2
 80268fc:	d107      	bne.n	802690e <__fpclassifyd+0x3e>
 80268fe:	fab0 f080 	clz	r0, r0
 8026902:	0940      	lsrs	r0, r0, #5
 8026904:	bd10      	pop	{r4, pc}
 8026906:	2004      	movs	r0, #4
 8026908:	e7fc      	b.n	8026904 <__fpclassifyd+0x34>
 802690a:	2003      	movs	r0, #3
 802690c:	e7fa      	b.n	8026904 <__fpclassifyd+0x34>
 802690e:	2000      	movs	r0, #0
 8026910:	e7f8      	b.n	8026904 <__fpclassifyd+0x34>
 8026912:	2800      	cmp	r0, #0
 8026914:	d1ee      	bne.n	80268f4 <__fpclassifyd+0x24>
 8026916:	2002      	movs	r0, #2
 8026918:	e7f4      	b.n	8026904 <__fpclassifyd+0x34>
 802691a:	bf00      	nop
 802691c:	7fdfffff 	.word	0x7fdfffff
 8026920:	7ff00000 	.word	0x7ff00000

08026924 <round>:
 8026924:	ee10 1a90 	vmov	r1, s1
 8026928:	f3c1 500a 	ubfx	r0, r1, #20, #11
 802692c:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 8026930:	2a13      	cmp	r2, #19
 8026932:	b510      	push	{r4, lr}
 8026934:	ee10 3a10 	vmov	r3, s0
 8026938:	dc19      	bgt.n	802696e <round+0x4a>
 802693a:	2a00      	cmp	r2, #0
 802693c:	da09      	bge.n	8026952 <round+0x2e>
 802693e:	3201      	adds	r2, #1
 8026940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8026944:	d103      	bne.n	802694e <round+0x2a>
 8026946:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 802694a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 802694e:	2000      	movs	r0, #0
 8026950:	e027      	b.n	80269a2 <round+0x7e>
 8026952:	4816      	ldr	r0, [pc, #88]	; (80269ac <round+0x88>)
 8026954:	4110      	asrs	r0, r2
 8026956:	ea01 0400 	and.w	r4, r1, r0
 802695a:	4323      	orrs	r3, r4
 802695c:	d00e      	beq.n	802697c <round+0x58>
 802695e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8026962:	fa43 f202 	asr.w	r2, r3, r2
 8026966:	4411      	add	r1, r2
 8026968:	ea21 0100 	bic.w	r1, r1, r0
 802696c:	e7ef      	b.n	802694e <round+0x2a>
 802696e:	2a33      	cmp	r2, #51	; 0x33
 8026970:	dd05      	ble.n	802697e <round+0x5a>
 8026972:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8026976:	d101      	bne.n	802697c <round+0x58>
 8026978:	ee30 0b00 	vadd.f64	d0, d0, d0
 802697c:	bd10      	pop	{r4, pc}
 802697e:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 8026982:	f04f 30ff 	mov.w	r0, #4294967295
 8026986:	fa20 f404 	lsr.w	r4, r0, r4
 802698a:	4223      	tst	r3, r4
 802698c:	d0f6      	beq.n	802697c <round+0x58>
 802698e:	2001      	movs	r0, #1
 8026990:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 8026994:	fa00 f202 	lsl.w	r2, r0, r2
 8026998:	189b      	adds	r3, r3, r2
 802699a:	bf28      	it	cs
 802699c:	1809      	addcs	r1, r1, r0
 802699e:	ea23 0004 	bic.w	r0, r3, r4
 80269a2:	460b      	mov	r3, r1
 80269a4:	4602      	mov	r2, r0
 80269a6:	ec43 2b10 	vmov	d0, r2, r3
 80269aa:	e7e7      	b.n	802697c <round+0x58>
 80269ac:	000fffff 	.word	0x000fffff

080269b0 <abort>:
 80269b0:	b508      	push	{r3, lr}
 80269b2:	2006      	movs	r0, #6
 80269b4:	f001 f920 	bl	8027bf8 <raise>
 80269b8:	2001      	movs	r0, #1
 80269ba:	f7dc fa67 	bl	8002e8c <_exit>
	...

080269c0 <__assert_func>:
 80269c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80269c2:	4614      	mov	r4, r2
 80269c4:	461a      	mov	r2, r3
 80269c6:	4b09      	ldr	r3, [pc, #36]	; (80269ec <__assert_func+0x2c>)
 80269c8:	681b      	ldr	r3, [r3, #0]
 80269ca:	4605      	mov	r5, r0
 80269cc:	68d8      	ldr	r0, [r3, #12]
 80269ce:	b14c      	cbz	r4, 80269e4 <__assert_func+0x24>
 80269d0:	4b07      	ldr	r3, [pc, #28]	; (80269f0 <__assert_func+0x30>)
 80269d2:	9100      	str	r1, [sp, #0]
 80269d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80269d8:	4906      	ldr	r1, [pc, #24]	; (80269f4 <__assert_func+0x34>)
 80269da:	462b      	mov	r3, r5
 80269dc:	f000 f828 	bl	8026a30 <fiprintf>
 80269e0:	f7ff ffe6 	bl	80269b0 <abort>
 80269e4:	4b04      	ldr	r3, [pc, #16]	; (80269f8 <__assert_func+0x38>)
 80269e6:	461c      	mov	r4, r3
 80269e8:	e7f3      	b.n	80269d2 <__assert_func+0x12>
 80269ea:	bf00      	nop
 80269ec:	2000007c 	.word	0x2000007c
 80269f0:	0802f464 	.word	0x0802f464
 80269f4:	0802f471 	.word	0x0802f471
 80269f8:	0802f49f 	.word	0x0802f49f

080269fc <atexit>:
 80269fc:	2300      	movs	r3, #0
 80269fe:	4601      	mov	r1, r0
 8026a00:	461a      	mov	r2, r3
 8026a02:	4618      	mov	r0, r3
 8026a04:	f002 b872 	b.w	8028aec <__register_exitproc>

08026a08 <__cxa_atexit>:
 8026a08:	b510      	push	{r4, lr}
 8026a0a:	4c05      	ldr	r4, [pc, #20]	; (8026a20 <__cxa_atexit+0x18>)
 8026a0c:	4613      	mov	r3, r2
 8026a0e:	b12c      	cbz	r4, 8026a1c <__cxa_atexit+0x14>
 8026a10:	460a      	mov	r2, r1
 8026a12:	4601      	mov	r1, r0
 8026a14:	2002      	movs	r0, #2
 8026a16:	f002 f869 	bl	8028aec <__register_exitproc>
 8026a1a:	bd10      	pop	{r4, pc}
 8026a1c:	4620      	mov	r0, r4
 8026a1e:	e7fc      	b.n	8026a1a <__cxa_atexit+0x12>
 8026a20:	08028aed 	.word	0x08028aed

08026a24 <__errno>:
 8026a24:	4b01      	ldr	r3, [pc, #4]	; (8026a2c <__errno+0x8>)
 8026a26:	6818      	ldr	r0, [r3, #0]
 8026a28:	4770      	bx	lr
 8026a2a:	bf00      	nop
 8026a2c:	2000007c 	.word	0x2000007c

08026a30 <fiprintf>:
 8026a30:	b40e      	push	{r1, r2, r3}
 8026a32:	b503      	push	{r0, r1, lr}
 8026a34:	4601      	mov	r1, r0
 8026a36:	ab03      	add	r3, sp, #12
 8026a38:	4805      	ldr	r0, [pc, #20]	; (8026a50 <fiprintf+0x20>)
 8026a3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8026a3e:	6800      	ldr	r0, [r0, #0]
 8026a40:	9301      	str	r3, [sp, #4]
 8026a42:	f000 f925 	bl	8026c90 <_vfiprintf_r>
 8026a46:	b002      	add	sp, #8
 8026a48:	f85d eb04 	ldr.w	lr, [sp], #4
 8026a4c:	b003      	add	sp, #12
 8026a4e:	4770      	bx	lr
 8026a50:	2000007c 	.word	0x2000007c

08026a54 <__libc_init_array>:
 8026a54:	b570      	push	{r4, r5, r6, lr}
 8026a56:	4d0d      	ldr	r5, [pc, #52]	; (8026a8c <__libc_init_array+0x38>)
 8026a58:	4c0d      	ldr	r4, [pc, #52]	; (8026a90 <__libc_init_array+0x3c>)
 8026a5a:	1b64      	subs	r4, r4, r5
 8026a5c:	10a4      	asrs	r4, r4, #2
 8026a5e:	2600      	movs	r6, #0
 8026a60:	42a6      	cmp	r6, r4
 8026a62:	d109      	bne.n	8026a78 <__libc_init_array+0x24>
 8026a64:	4d0b      	ldr	r5, [pc, #44]	; (8026a94 <__libc_init_array+0x40>)
 8026a66:	4c0c      	ldr	r4, [pc, #48]	; (8026a98 <__libc_init_array+0x44>)
 8026a68:	f004 fba0 	bl	802b1ac <_init>
 8026a6c:	1b64      	subs	r4, r4, r5
 8026a6e:	10a4      	asrs	r4, r4, #2
 8026a70:	2600      	movs	r6, #0
 8026a72:	42a6      	cmp	r6, r4
 8026a74:	d105      	bne.n	8026a82 <__libc_init_array+0x2e>
 8026a76:	bd70      	pop	{r4, r5, r6, pc}
 8026a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8026a7c:	4798      	blx	r3
 8026a7e:	3601      	adds	r6, #1
 8026a80:	e7ee      	b.n	8026a60 <__libc_init_array+0xc>
 8026a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8026a86:	4798      	blx	r3
 8026a88:	3601      	adds	r6, #1
 8026a8a:	e7f2      	b.n	8026a72 <__libc_init_array+0x1e>
 8026a8c:	080d9984 	.word	0x080d9984
 8026a90:	080d9984 	.word	0x080d9984
 8026a94:	080d9984 	.word	0x080d9984
 8026a98:	080d99b4 	.word	0x080d99b4

08026a9c <malloc>:
 8026a9c:	4b02      	ldr	r3, [pc, #8]	; (8026aa8 <malloc+0xc>)
 8026a9e:	4601      	mov	r1, r0
 8026aa0:	6818      	ldr	r0, [r3, #0]
 8026aa2:	f000 b871 	b.w	8026b88 <_malloc_r>
 8026aa6:	bf00      	nop
 8026aa8:	2000007c 	.word	0x2000007c

08026aac <free>:
 8026aac:	4b02      	ldr	r3, [pc, #8]	; (8026ab8 <free+0xc>)
 8026aae:	4601      	mov	r1, r0
 8026ab0:	6818      	ldr	r0, [r3, #0]
 8026ab2:	f000 b819 	b.w	8026ae8 <_free_r>
 8026ab6:	bf00      	nop
 8026ab8:	2000007c 	.word	0x2000007c

08026abc <memcpy>:
 8026abc:	440a      	add	r2, r1
 8026abe:	4291      	cmp	r1, r2
 8026ac0:	f100 33ff 	add.w	r3, r0, #4294967295
 8026ac4:	d100      	bne.n	8026ac8 <memcpy+0xc>
 8026ac6:	4770      	bx	lr
 8026ac8:	b510      	push	{r4, lr}
 8026aca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026ace:	f803 4f01 	strb.w	r4, [r3, #1]!
 8026ad2:	4291      	cmp	r1, r2
 8026ad4:	d1f9      	bne.n	8026aca <memcpy+0xe>
 8026ad6:	bd10      	pop	{r4, pc}

08026ad8 <memset>:
 8026ad8:	4402      	add	r2, r0
 8026ada:	4603      	mov	r3, r0
 8026adc:	4293      	cmp	r3, r2
 8026ade:	d100      	bne.n	8026ae2 <memset+0xa>
 8026ae0:	4770      	bx	lr
 8026ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8026ae6:	e7f9      	b.n	8026adc <memset+0x4>

08026ae8 <_free_r>:
 8026ae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8026aea:	2900      	cmp	r1, #0
 8026aec:	d048      	beq.n	8026b80 <_free_r+0x98>
 8026aee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026af2:	9001      	str	r0, [sp, #4]
 8026af4:	2b00      	cmp	r3, #0
 8026af6:	f1a1 0404 	sub.w	r4, r1, #4
 8026afa:	bfb8      	it	lt
 8026afc:	18e4      	addlt	r4, r4, r3
 8026afe:	f003 fc23 	bl	802a348 <__malloc_lock>
 8026b02:	4a20      	ldr	r2, [pc, #128]	; (8026b84 <_free_r+0x9c>)
 8026b04:	9801      	ldr	r0, [sp, #4]
 8026b06:	6813      	ldr	r3, [r2, #0]
 8026b08:	4615      	mov	r5, r2
 8026b0a:	b933      	cbnz	r3, 8026b1a <_free_r+0x32>
 8026b0c:	6063      	str	r3, [r4, #4]
 8026b0e:	6014      	str	r4, [r2, #0]
 8026b10:	b003      	add	sp, #12
 8026b12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026b16:	f003 bc1d 	b.w	802a354 <__malloc_unlock>
 8026b1a:	42a3      	cmp	r3, r4
 8026b1c:	d90b      	bls.n	8026b36 <_free_r+0x4e>
 8026b1e:	6821      	ldr	r1, [r4, #0]
 8026b20:	1862      	adds	r2, r4, r1
 8026b22:	4293      	cmp	r3, r2
 8026b24:	bf04      	itt	eq
 8026b26:	681a      	ldreq	r2, [r3, #0]
 8026b28:	685b      	ldreq	r3, [r3, #4]
 8026b2a:	6063      	str	r3, [r4, #4]
 8026b2c:	bf04      	itt	eq
 8026b2e:	1852      	addeq	r2, r2, r1
 8026b30:	6022      	streq	r2, [r4, #0]
 8026b32:	602c      	str	r4, [r5, #0]
 8026b34:	e7ec      	b.n	8026b10 <_free_r+0x28>
 8026b36:	461a      	mov	r2, r3
 8026b38:	685b      	ldr	r3, [r3, #4]
 8026b3a:	b10b      	cbz	r3, 8026b40 <_free_r+0x58>
 8026b3c:	42a3      	cmp	r3, r4
 8026b3e:	d9fa      	bls.n	8026b36 <_free_r+0x4e>
 8026b40:	6811      	ldr	r1, [r2, #0]
 8026b42:	1855      	adds	r5, r2, r1
 8026b44:	42a5      	cmp	r5, r4
 8026b46:	d10b      	bne.n	8026b60 <_free_r+0x78>
 8026b48:	6824      	ldr	r4, [r4, #0]
 8026b4a:	4421      	add	r1, r4
 8026b4c:	1854      	adds	r4, r2, r1
 8026b4e:	42a3      	cmp	r3, r4
 8026b50:	6011      	str	r1, [r2, #0]
 8026b52:	d1dd      	bne.n	8026b10 <_free_r+0x28>
 8026b54:	681c      	ldr	r4, [r3, #0]
 8026b56:	685b      	ldr	r3, [r3, #4]
 8026b58:	6053      	str	r3, [r2, #4]
 8026b5a:	4421      	add	r1, r4
 8026b5c:	6011      	str	r1, [r2, #0]
 8026b5e:	e7d7      	b.n	8026b10 <_free_r+0x28>
 8026b60:	d902      	bls.n	8026b68 <_free_r+0x80>
 8026b62:	230c      	movs	r3, #12
 8026b64:	6003      	str	r3, [r0, #0]
 8026b66:	e7d3      	b.n	8026b10 <_free_r+0x28>
 8026b68:	6825      	ldr	r5, [r4, #0]
 8026b6a:	1961      	adds	r1, r4, r5
 8026b6c:	428b      	cmp	r3, r1
 8026b6e:	bf04      	itt	eq
 8026b70:	6819      	ldreq	r1, [r3, #0]
 8026b72:	685b      	ldreq	r3, [r3, #4]
 8026b74:	6063      	str	r3, [r4, #4]
 8026b76:	bf04      	itt	eq
 8026b78:	1949      	addeq	r1, r1, r5
 8026b7a:	6021      	streq	r1, [r4, #0]
 8026b7c:	6054      	str	r4, [r2, #4]
 8026b7e:	e7c7      	b.n	8026b10 <_free_r+0x28>
 8026b80:	b003      	add	sp, #12
 8026b82:	bd30      	pop	{r4, r5, pc}
 8026b84:	2005687c 	.word	0x2005687c

08026b88 <_malloc_r>:
 8026b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026b8a:	1ccd      	adds	r5, r1, #3
 8026b8c:	f025 0503 	bic.w	r5, r5, #3
 8026b90:	3508      	adds	r5, #8
 8026b92:	2d0c      	cmp	r5, #12
 8026b94:	bf38      	it	cc
 8026b96:	250c      	movcc	r5, #12
 8026b98:	2d00      	cmp	r5, #0
 8026b9a:	4606      	mov	r6, r0
 8026b9c:	db01      	blt.n	8026ba2 <_malloc_r+0x1a>
 8026b9e:	42a9      	cmp	r1, r5
 8026ba0:	d903      	bls.n	8026baa <_malloc_r+0x22>
 8026ba2:	230c      	movs	r3, #12
 8026ba4:	6033      	str	r3, [r6, #0]
 8026ba6:	2000      	movs	r0, #0
 8026ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026baa:	f003 fbcd 	bl	802a348 <__malloc_lock>
 8026bae:	4921      	ldr	r1, [pc, #132]	; (8026c34 <_malloc_r+0xac>)
 8026bb0:	680a      	ldr	r2, [r1, #0]
 8026bb2:	4614      	mov	r4, r2
 8026bb4:	b99c      	cbnz	r4, 8026bde <_malloc_r+0x56>
 8026bb6:	4f20      	ldr	r7, [pc, #128]	; (8026c38 <_malloc_r+0xb0>)
 8026bb8:	683b      	ldr	r3, [r7, #0]
 8026bba:	b923      	cbnz	r3, 8026bc6 <_malloc_r+0x3e>
 8026bbc:	4621      	mov	r1, r4
 8026bbe:	4630      	mov	r0, r6
 8026bc0:	f000 ffdc 	bl	8027b7c <_sbrk_r>
 8026bc4:	6038      	str	r0, [r7, #0]
 8026bc6:	4629      	mov	r1, r5
 8026bc8:	4630      	mov	r0, r6
 8026bca:	f000 ffd7 	bl	8027b7c <_sbrk_r>
 8026bce:	1c43      	adds	r3, r0, #1
 8026bd0:	d123      	bne.n	8026c1a <_malloc_r+0x92>
 8026bd2:	230c      	movs	r3, #12
 8026bd4:	6033      	str	r3, [r6, #0]
 8026bd6:	4630      	mov	r0, r6
 8026bd8:	f003 fbbc 	bl	802a354 <__malloc_unlock>
 8026bdc:	e7e3      	b.n	8026ba6 <_malloc_r+0x1e>
 8026bde:	6823      	ldr	r3, [r4, #0]
 8026be0:	1b5b      	subs	r3, r3, r5
 8026be2:	d417      	bmi.n	8026c14 <_malloc_r+0x8c>
 8026be4:	2b0b      	cmp	r3, #11
 8026be6:	d903      	bls.n	8026bf0 <_malloc_r+0x68>
 8026be8:	6023      	str	r3, [r4, #0]
 8026bea:	441c      	add	r4, r3
 8026bec:	6025      	str	r5, [r4, #0]
 8026bee:	e004      	b.n	8026bfa <_malloc_r+0x72>
 8026bf0:	6863      	ldr	r3, [r4, #4]
 8026bf2:	42a2      	cmp	r2, r4
 8026bf4:	bf0c      	ite	eq
 8026bf6:	600b      	streq	r3, [r1, #0]
 8026bf8:	6053      	strne	r3, [r2, #4]
 8026bfa:	4630      	mov	r0, r6
 8026bfc:	f003 fbaa 	bl	802a354 <__malloc_unlock>
 8026c00:	f104 000b 	add.w	r0, r4, #11
 8026c04:	1d23      	adds	r3, r4, #4
 8026c06:	f020 0007 	bic.w	r0, r0, #7
 8026c0a:	1ac2      	subs	r2, r0, r3
 8026c0c:	d0cc      	beq.n	8026ba8 <_malloc_r+0x20>
 8026c0e:	1a1b      	subs	r3, r3, r0
 8026c10:	50a3      	str	r3, [r4, r2]
 8026c12:	e7c9      	b.n	8026ba8 <_malloc_r+0x20>
 8026c14:	4622      	mov	r2, r4
 8026c16:	6864      	ldr	r4, [r4, #4]
 8026c18:	e7cc      	b.n	8026bb4 <_malloc_r+0x2c>
 8026c1a:	1cc4      	adds	r4, r0, #3
 8026c1c:	f024 0403 	bic.w	r4, r4, #3
 8026c20:	42a0      	cmp	r0, r4
 8026c22:	d0e3      	beq.n	8026bec <_malloc_r+0x64>
 8026c24:	1a21      	subs	r1, r4, r0
 8026c26:	4630      	mov	r0, r6
 8026c28:	f000 ffa8 	bl	8027b7c <_sbrk_r>
 8026c2c:	3001      	adds	r0, #1
 8026c2e:	d1dd      	bne.n	8026bec <_malloc_r+0x64>
 8026c30:	e7cf      	b.n	8026bd2 <_malloc_r+0x4a>
 8026c32:	bf00      	nop
 8026c34:	2005687c 	.word	0x2005687c
 8026c38:	20056880 	.word	0x20056880

08026c3c <__sfputc_r>:
 8026c3c:	6893      	ldr	r3, [r2, #8]
 8026c3e:	3b01      	subs	r3, #1
 8026c40:	2b00      	cmp	r3, #0
 8026c42:	b410      	push	{r4}
 8026c44:	6093      	str	r3, [r2, #8]
 8026c46:	da08      	bge.n	8026c5a <__sfputc_r+0x1e>
 8026c48:	6994      	ldr	r4, [r2, #24]
 8026c4a:	42a3      	cmp	r3, r4
 8026c4c:	db01      	blt.n	8026c52 <__sfputc_r+0x16>
 8026c4e:	290a      	cmp	r1, #10
 8026c50:	d103      	bne.n	8026c5a <__sfputc_r+0x1e>
 8026c52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026c56:	f001 be89 	b.w	802896c <__swbuf_r>
 8026c5a:	6813      	ldr	r3, [r2, #0]
 8026c5c:	1c58      	adds	r0, r3, #1
 8026c5e:	6010      	str	r0, [r2, #0]
 8026c60:	7019      	strb	r1, [r3, #0]
 8026c62:	4608      	mov	r0, r1
 8026c64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026c68:	4770      	bx	lr

08026c6a <__sfputs_r>:
 8026c6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026c6c:	4606      	mov	r6, r0
 8026c6e:	460f      	mov	r7, r1
 8026c70:	4614      	mov	r4, r2
 8026c72:	18d5      	adds	r5, r2, r3
 8026c74:	42ac      	cmp	r4, r5
 8026c76:	d101      	bne.n	8026c7c <__sfputs_r+0x12>
 8026c78:	2000      	movs	r0, #0
 8026c7a:	e007      	b.n	8026c8c <__sfputs_r+0x22>
 8026c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026c80:	463a      	mov	r2, r7
 8026c82:	4630      	mov	r0, r6
 8026c84:	f7ff ffda 	bl	8026c3c <__sfputc_r>
 8026c88:	1c43      	adds	r3, r0, #1
 8026c8a:	d1f3      	bne.n	8026c74 <__sfputs_r+0xa>
 8026c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08026c90 <_vfiprintf_r>:
 8026c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026c94:	460d      	mov	r5, r1
 8026c96:	b09d      	sub	sp, #116	; 0x74
 8026c98:	4614      	mov	r4, r2
 8026c9a:	4698      	mov	r8, r3
 8026c9c:	4606      	mov	r6, r0
 8026c9e:	b118      	cbz	r0, 8026ca8 <_vfiprintf_r+0x18>
 8026ca0:	6983      	ldr	r3, [r0, #24]
 8026ca2:	b90b      	cbnz	r3, 8026ca8 <_vfiprintf_r+0x18>
 8026ca4:	f002 feac 	bl	8029a00 <__sinit>
 8026ca8:	4b89      	ldr	r3, [pc, #548]	; (8026ed0 <_vfiprintf_r+0x240>)
 8026caa:	429d      	cmp	r5, r3
 8026cac:	d11b      	bne.n	8026ce6 <_vfiprintf_r+0x56>
 8026cae:	6875      	ldr	r5, [r6, #4]
 8026cb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026cb2:	07d9      	lsls	r1, r3, #31
 8026cb4:	d405      	bmi.n	8026cc2 <_vfiprintf_r+0x32>
 8026cb6:	89ab      	ldrh	r3, [r5, #12]
 8026cb8:	059a      	lsls	r2, r3, #22
 8026cba:	d402      	bmi.n	8026cc2 <_vfiprintf_r+0x32>
 8026cbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026cbe:	f003 fab0 	bl	802a222 <__retarget_lock_acquire_recursive>
 8026cc2:	89ab      	ldrh	r3, [r5, #12]
 8026cc4:	071b      	lsls	r3, r3, #28
 8026cc6:	d501      	bpl.n	8026ccc <_vfiprintf_r+0x3c>
 8026cc8:	692b      	ldr	r3, [r5, #16]
 8026cca:	b9eb      	cbnz	r3, 8026d08 <_vfiprintf_r+0x78>
 8026ccc:	4629      	mov	r1, r5
 8026cce:	4630      	mov	r0, r6
 8026cd0:	f001 fe9e 	bl	8028a10 <__swsetup_r>
 8026cd4:	b1c0      	cbz	r0, 8026d08 <_vfiprintf_r+0x78>
 8026cd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026cd8:	07dc      	lsls	r4, r3, #31
 8026cda:	d50e      	bpl.n	8026cfa <_vfiprintf_r+0x6a>
 8026cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8026ce0:	b01d      	add	sp, #116	; 0x74
 8026ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026ce6:	4b7b      	ldr	r3, [pc, #492]	; (8026ed4 <_vfiprintf_r+0x244>)
 8026ce8:	429d      	cmp	r5, r3
 8026cea:	d101      	bne.n	8026cf0 <_vfiprintf_r+0x60>
 8026cec:	68b5      	ldr	r5, [r6, #8]
 8026cee:	e7df      	b.n	8026cb0 <_vfiprintf_r+0x20>
 8026cf0:	4b79      	ldr	r3, [pc, #484]	; (8026ed8 <_vfiprintf_r+0x248>)
 8026cf2:	429d      	cmp	r5, r3
 8026cf4:	bf08      	it	eq
 8026cf6:	68f5      	ldreq	r5, [r6, #12]
 8026cf8:	e7da      	b.n	8026cb0 <_vfiprintf_r+0x20>
 8026cfa:	89ab      	ldrh	r3, [r5, #12]
 8026cfc:	0598      	lsls	r0, r3, #22
 8026cfe:	d4ed      	bmi.n	8026cdc <_vfiprintf_r+0x4c>
 8026d00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026d02:	f003 fa90 	bl	802a226 <__retarget_lock_release_recursive>
 8026d06:	e7e9      	b.n	8026cdc <_vfiprintf_r+0x4c>
 8026d08:	2300      	movs	r3, #0
 8026d0a:	9309      	str	r3, [sp, #36]	; 0x24
 8026d0c:	2320      	movs	r3, #32
 8026d0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8026d12:	f8cd 800c 	str.w	r8, [sp, #12]
 8026d16:	2330      	movs	r3, #48	; 0x30
 8026d18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8026edc <_vfiprintf_r+0x24c>
 8026d1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026d20:	f04f 0901 	mov.w	r9, #1
 8026d24:	4623      	mov	r3, r4
 8026d26:	469a      	mov	sl, r3
 8026d28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026d2c:	b10a      	cbz	r2, 8026d32 <_vfiprintf_r+0xa2>
 8026d2e:	2a25      	cmp	r2, #37	; 0x25
 8026d30:	d1f9      	bne.n	8026d26 <_vfiprintf_r+0x96>
 8026d32:	ebba 0b04 	subs.w	fp, sl, r4
 8026d36:	d00b      	beq.n	8026d50 <_vfiprintf_r+0xc0>
 8026d38:	465b      	mov	r3, fp
 8026d3a:	4622      	mov	r2, r4
 8026d3c:	4629      	mov	r1, r5
 8026d3e:	4630      	mov	r0, r6
 8026d40:	f7ff ff93 	bl	8026c6a <__sfputs_r>
 8026d44:	3001      	adds	r0, #1
 8026d46:	f000 80aa 	beq.w	8026e9e <_vfiprintf_r+0x20e>
 8026d4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026d4c:	445a      	add	r2, fp
 8026d4e:	9209      	str	r2, [sp, #36]	; 0x24
 8026d50:	f89a 3000 	ldrb.w	r3, [sl]
 8026d54:	2b00      	cmp	r3, #0
 8026d56:	f000 80a2 	beq.w	8026e9e <_vfiprintf_r+0x20e>
 8026d5a:	2300      	movs	r3, #0
 8026d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8026d60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026d64:	f10a 0a01 	add.w	sl, sl, #1
 8026d68:	9304      	str	r3, [sp, #16]
 8026d6a:	9307      	str	r3, [sp, #28]
 8026d6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8026d70:	931a      	str	r3, [sp, #104]	; 0x68
 8026d72:	4654      	mov	r4, sl
 8026d74:	2205      	movs	r2, #5
 8026d76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026d7a:	4858      	ldr	r0, [pc, #352]	; (8026edc <_vfiprintf_r+0x24c>)
 8026d7c:	f7d9 fa68 	bl	8000250 <memchr>
 8026d80:	9a04      	ldr	r2, [sp, #16]
 8026d82:	b9d8      	cbnz	r0, 8026dbc <_vfiprintf_r+0x12c>
 8026d84:	06d1      	lsls	r1, r2, #27
 8026d86:	bf44      	itt	mi
 8026d88:	2320      	movmi	r3, #32
 8026d8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026d8e:	0713      	lsls	r3, r2, #28
 8026d90:	bf44      	itt	mi
 8026d92:	232b      	movmi	r3, #43	; 0x2b
 8026d94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026d98:	f89a 3000 	ldrb.w	r3, [sl]
 8026d9c:	2b2a      	cmp	r3, #42	; 0x2a
 8026d9e:	d015      	beq.n	8026dcc <_vfiprintf_r+0x13c>
 8026da0:	9a07      	ldr	r2, [sp, #28]
 8026da2:	4654      	mov	r4, sl
 8026da4:	2000      	movs	r0, #0
 8026da6:	f04f 0c0a 	mov.w	ip, #10
 8026daa:	4621      	mov	r1, r4
 8026dac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026db0:	3b30      	subs	r3, #48	; 0x30
 8026db2:	2b09      	cmp	r3, #9
 8026db4:	d94e      	bls.n	8026e54 <_vfiprintf_r+0x1c4>
 8026db6:	b1b0      	cbz	r0, 8026de6 <_vfiprintf_r+0x156>
 8026db8:	9207      	str	r2, [sp, #28]
 8026dba:	e014      	b.n	8026de6 <_vfiprintf_r+0x156>
 8026dbc:	eba0 0308 	sub.w	r3, r0, r8
 8026dc0:	fa09 f303 	lsl.w	r3, r9, r3
 8026dc4:	4313      	orrs	r3, r2
 8026dc6:	9304      	str	r3, [sp, #16]
 8026dc8:	46a2      	mov	sl, r4
 8026dca:	e7d2      	b.n	8026d72 <_vfiprintf_r+0xe2>
 8026dcc:	9b03      	ldr	r3, [sp, #12]
 8026dce:	1d19      	adds	r1, r3, #4
 8026dd0:	681b      	ldr	r3, [r3, #0]
 8026dd2:	9103      	str	r1, [sp, #12]
 8026dd4:	2b00      	cmp	r3, #0
 8026dd6:	bfbb      	ittet	lt
 8026dd8:	425b      	neglt	r3, r3
 8026dda:	f042 0202 	orrlt.w	r2, r2, #2
 8026dde:	9307      	strge	r3, [sp, #28]
 8026de0:	9307      	strlt	r3, [sp, #28]
 8026de2:	bfb8      	it	lt
 8026de4:	9204      	strlt	r2, [sp, #16]
 8026de6:	7823      	ldrb	r3, [r4, #0]
 8026de8:	2b2e      	cmp	r3, #46	; 0x2e
 8026dea:	d10c      	bne.n	8026e06 <_vfiprintf_r+0x176>
 8026dec:	7863      	ldrb	r3, [r4, #1]
 8026dee:	2b2a      	cmp	r3, #42	; 0x2a
 8026df0:	d135      	bne.n	8026e5e <_vfiprintf_r+0x1ce>
 8026df2:	9b03      	ldr	r3, [sp, #12]
 8026df4:	1d1a      	adds	r2, r3, #4
 8026df6:	681b      	ldr	r3, [r3, #0]
 8026df8:	9203      	str	r2, [sp, #12]
 8026dfa:	2b00      	cmp	r3, #0
 8026dfc:	bfb8      	it	lt
 8026dfe:	f04f 33ff 	movlt.w	r3, #4294967295
 8026e02:	3402      	adds	r4, #2
 8026e04:	9305      	str	r3, [sp, #20]
 8026e06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8026eec <_vfiprintf_r+0x25c>
 8026e0a:	7821      	ldrb	r1, [r4, #0]
 8026e0c:	2203      	movs	r2, #3
 8026e0e:	4650      	mov	r0, sl
 8026e10:	f7d9 fa1e 	bl	8000250 <memchr>
 8026e14:	b140      	cbz	r0, 8026e28 <_vfiprintf_r+0x198>
 8026e16:	2340      	movs	r3, #64	; 0x40
 8026e18:	eba0 000a 	sub.w	r0, r0, sl
 8026e1c:	fa03 f000 	lsl.w	r0, r3, r0
 8026e20:	9b04      	ldr	r3, [sp, #16]
 8026e22:	4303      	orrs	r3, r0
 8026e24:	3401      	adds	r4, #1
 8026e26:	9304      	str	r3, [sp, #16]
 8026e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026e2c:	482c      	ldr	r0, [pc, #176]	; (8026ee0 <_vfiprintf_r+0x250>)
 8026e2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8026e32:	2206      	movs	r2, #6
 8026e34:	f7d9 fa0c 	bl	8000250 <memchr>
 8026e38:	2800      	cmp	r0, #0
 8026e3a:	d03f      	beq.n	8026ebc <_vfiprintf_r+0x22c>
 8026e3c:	4b29      	ldr	r3, [pc, #164]	; (8026ee4 <_vfiprintf_r+0x254>)
 8026e3e:	bb1b      	cbnz	r3, 8026e88 <_vfiprintf_r+0x1f8>
 8026e40:	9b03      	ldr	r3, [sp, #12]
 8026e42:	3307      	adds	r3, #7
 8026e44:	f023 0307 	bic.w	r3, r3, #7
 8026e48:	3308      	adds	r3, #8
 8026e4a:	9303      	str	r3, [sp, #12]
 8026e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026e4e:	443b      	add	r3, r7
 8026e50:	9309      	str	r3, [sp, #36]	; 0x24
 8026e52:	e767      	b.n	8026d24 <_vfiprintf_r+0x94>
 8026e54:	fb0c 3202 	mla	r2, ip, r2, r3
 8026e58:	460c      	mov	r4, r1
 8026e5a:	2001      	movs	r0, #1
 8026e5c:	e7a5      	b.n	8026daa <_vfiprintf_r+0x11a>
 8026e5e:	2300      	movs	r3, #0
 8026e60:	3401      	adds	r4, #1
 8026e62:	9305      	str	r3, [sp, #20]
 8026e64:	4619      	mov	r1, r3
 8026e66:	f04f 0c0a 	mov.w	ip, #10
 8026e6a:	4620      	mov	r0, r4
 8026e6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026e70:	3a30      	subs	r2, #48	; 0x30
 8026e72:	2a09      	cmp	r2, #9
 8026e74:	d903      	bls.n	8026e7e <_vfiprintf_r+0x1ee>
 8026e76:	2b00      	cmp	r3, #0
 8026e78:	d0c5      	beq.n	8026e06 <_vfiprintf_r+0x176>
 8026e7a:	9105      	str	r1, [sp, #20]
 8026e7c:	e7c3      	b.n	8026e06 <_vfiprintf_r+0x176>
 8026e7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8026e82:	4604      	mov	r4, r0
 8026e84:	2301      	movs	r3, #1
 8026e86:	e7f0      	b.n	8026e6a <_vfiprintf_r+0x1da>
 8026e88:	ab03      	add	r3, sp, #12
 8026e8a:	9300      	str	r3, [sp, #0]
 8026e8c:	462a      	mov	r2, r5
 8026e8e:	4b16      	ldr	r3, [pc, #88]	; (8026ee8 <_vfiprintf_r+0x258>)
 8026e90:	a904      	add	r1, sp, #16
 8026e92:	4630      	mov	r0, r6
 8026e94:	f000 f8bc 	bl	8027010 <_printf_float>
 8026e98:	4607      	mov	r7, r0
 8026e9a:	1c78      	adds	r0, r7, #1
 8026e9c:	d1d6      	bne.n	8026e4c <_vfiprintf_r+0x1bc>
 8026e9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026ea0:	07d9      	lsls	r1, r3, #31
 8026ea2:	d405      	bmi.n	8026eb0 <_vfiprintf_r+0x220>
 8026ea4:	89ab      	ldrh	r3, [r5, #12]
 8026ea6:	059a      	lsls	r2, r3, #22
 8026ea8:	d402      	bmi.n	8026eb0 <_vfiprintf_r+0x220>
 8026eaa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026eac:	f003 f9bb 	bl	802a226 <__retarget_lock_release_recursive>
 8026eb0:	89ab      	ldrh	r3, [r5, #12]
 8026eb2:	065b      	lsls	r3, r3, #25
 8026eb4:	f53f af12 	bmi.w	8026cdc <_vfiprintf_r+0x4c>
 8026eb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026eba:	e711      	b.n	8026ce0 <_vfiprintf_r+0x50>
 8026ebc:	ab03      	add	r3, sp, #12
 8026ebe:	9300      	str	r3, [sp, #0]
 8026ec0:	462a      	mov	r2, r5
 8026ec2:	4b09      	ldr	r3, [pc, #36]	; (8026ee8 <_vfiprintf_r+0x258>)
 8026ec4:	a904      	add	r1, sp, #16
 8026ec6:	4630      	mov	r0, r6
 8026ec8:	f000 fb2e 	bl	8027528 <_printf_i>
 8026ecc:	e7e4      	b.n	8026e98 <_vfiprintf_r+0x208>
 8026ece:	bf00      	nop
 8026ed0:	0802f6f8 	.word	0x0802f6f8
 8026ed4:	0802f718 	.word	0x0802f718
 8026ed8:	0802f6d8 	.word	0x0802f6d8
 8026edc:	0802f4a4 	.word	0x0802f4a4
 8026ee0:	0802f4ae 	.word	0x0802f4ae
 8026ee4:	08027011 	.word	0x08027011
 8026ee8:	08026c6b 	.word	0x08026c6b
 8026eec:	0802f4aa 	.word	0x0802f4aa

08026ef0 <__cvt>:
 8026ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026ef2:	ed2d 8b02 	vpush	{d8}
 8026ef6:	eeb0 8b40 	vmov.f64	d8, d0
 8026efa:	b085      	sub	sp, #20
 8026efc:	4617      	mov	r7, r2
 8026efe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8026f00:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8026f02:	ee18 2a90 	vmov	r2, s17
 8026f06:	f025 0520 	bic.w	r5, r5, #32
 8026f0a:	2a00      	cmp	r2, #0
 8026f0c:	bfb6      	itet	lt
 8026f0e:	222d      	movlt	r2, #45	; 0x2d
 8026f10:	2200      	movge	r2, #0
 8026f12:	eeb1 8b40 	vneglt.f64	d8, d0
 8026f16:	2d46      	cmp	r5, #70	; 0x46
 8026f18:	460c      	mov	r4, r1
 8026f1a:	701a      	strb	r2, [r3, #0]
 8026f1c:	d004      	beq.n	8026f28 <__cvt+0x38>
 8026f1e:	2d45      	cmp	r5, #69	; 0x45
 8026f20:	d100      	bne.n	8026f24 <__cvt+0x34>
 8026f22:	3401      	adds	r4, #1
 8026f24:	2102      	movs	r1, #2
 8026f26:	e000      	b.n	8026f2a <__cvt+0x3a>
 8026f28:	2103      	movs	r1, #3
 8026f2a:	ab03      	add	r3, sp, #12
 8026f2c:	9301      	str	r3, [sp, #4]
 8026f2e:	ab02      	add	r3, sp, #8
 8026f30:	9300      	str	r3, [sp, #0]
 8026f32:	4622      	mov	r2, r4
 8026f34:	4633      	mov	r3, r6
 8026f36:	eeb0 0b48 	vmov.f64	d0, d8
 8026f3a:	f001 fec5 	bl	8028cc8 <_dtoa_r>
 8026f3e:	2d47      	cmp	r5, #71	; 0x47
 8026f40:	d109      	bne.n	8026f56 <__cvt+0x66>
 8026f42:	07fb      	lsls	r3, r7, #31
 8026f44:	d407      	bmi.n	8026f56 <__cvt+0x66>
 8026f46:	9b03      	ldr	r3, [sp, #12]
 8026f48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026f4a:	1a1b      	subs	r3, r3, r0
 8026f4c:	6013      	str	r3, [r2, #0]
 8026f4e:	b005      	add	sp, #20
 8026f50:	ecbd 8b02 	vpop	{d8}
 8026f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026f56:	2d46      	cmp	r5, #70	; 0x46
 8026f58:	eb00 0204 	add.w	r2, r0, r4
 8026f5c:	d10c      	bne.n	8026f78 <__cvt+0x88>
 8026f5e:	7803      	ldrb	r3, [r0, #0]
 8026f60:	2b30      	cmp	r3, #48	; 0x30
 8026f62:	d107      	bne.n	8026f74 <__cvt+0x84>
 8026f64:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8026f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026f6c:	bf1c      	itt	ne
 8026f6e:	f1c4 0401 	rsbne	r4, r4, #1
 8026f72:	6034      	strne	r4, [r6, #0]
 8026f74:	6833      	ldr	r3, [r6, #0]
 8026f76:	441a      	add	r2, r3
 8026f78:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8026f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026f80:	bf08      	it	eq
 8026f82:	9203      	streq	r2, [sp, #12]
 8026f84:	2130      	movs	r1, #48	; 0x30
 8026f86:	9b03      	ldr	r3, [sp, #12]
 8026f88:	4293      	cmp	r3, r2
 8026f8a:	d2dc      	bcs.n	8026f46 <__cvt+0x56>
 8026f8c:	1c5c      	adds	r4, r3, #1
 8026f8e:	9403      	str	r4, [sp, #12]
 8026f90:	7019      	strb	r1, [r3, #0]
 8026f92:	e7f8      	b.n	8026f86 <__cvt+0x96>

08026f94 <__exponent>:
 8026f94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026f96:	4603      	mov	r3, r0
 8026f98:	2900      	cmp	r1, #0
 8026f9a:	bfb8      	it	lt
 8026f9c:	4249      	neglt	r1, r1
 8026f9e:	f803 2b02 	strb.w	r2, [r3], #2
 8026fa2:	bfb4      	ite	lt
 8026fa4:	222d      	movlt	r2, #45	; 0x2d
 8026fa6:	222b      	movge	r2, #43	; 0x2b
 8026fa8:	2909      	cmp	r1, #9
 8026faa:	7042      	strb	r2, [r0, #1]
 8026fac:	dd2a      	ble.n	8027004 <__exponent+0x70>
 8026fae:	f10d 0407 	add.w	r4, sp, #7
 8026fb2:	46a4      	mov	ip, r4
 8026fb4:	270a      	movs	r7, #10
 8026fb6:	46a6      	mov	lr, r4
 8026fb8:	460a      	mov	r2, r1
 8026fba:	fb91 f6f7 	sdiv	r6, r1, r7
 8026fbe:	fb07 1516 	mls	r5, r7, r6, r1
 8026fc2:	3530      	adds	r5, #48	; 0x30
 8026fc4:	2a63      	cmp	r2, #99	; 0x63
 8026fc6:	f104 34ff 	add.w	r4, r4, #4294967295
 8026fca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8026fce:	4631      	mov	r1, r6
 8026fd0:	dcf1      	bgt.n	8026fb6 <__exponent+0x22>
 8026fd2:	3130      	adds	r1, #48	; 0x30
 8026fd4:	f1ae 0502 	sub.w	r5, lr, #2
 8026fd8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8026fdc:	1c44      	adds	r4, r0, #1
 8026fde:	4629      	mov	r1, r5
 8026fe0:	4561      	cmp	r1, ip
 8026fe2:	d30a      	bcc.n	8026ffa <__exponent+0x66>
 8026fe4:	f10d 0209 	add.w	r2, sp, #9
 8026fe8:	eba2 020e 	sub.w	r2, r2, lr
 8026fec:	4565      	cmp	r5, ip
 8026fee:	bf88      	it	hi
 8026ff0:	2200      	movhi	r2, #0
 8026ff2:	4413      	add	r3, r2
 8026ff4:	1a18      	subs	r0, r3, r0
 8026ff6:	b003      	add	sp, #12
 8026ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026ffa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026ffe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8027002:	e7ed      	b.n	8026fe0 <__exponent+0x4c>
 8027004:	2330      	movs	r3, #48	; 0x30
 8027006:	3130      	adds	r1, #48	; 0x30
 8027008:	7083      	strb	r3, [r0, #2]
 802700a:	70c1      	strb	r1, [r0, #3]
 802700c:	1d03      	adds	r3, r0, #4
 802700e:	e7f1      	b.n	8026ff4 <__exponent+0x60>

08027010 <_printf_float>:
 8027010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027014:	b08b      	sub	sp, #44	; 0x2c
 8027016:	460c      	mov	r4, r1
 8027018:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 802701c:	4616      	mov	r6, r2
 802701e:	461f      	mov	r7, r3
 8027020:	4605      	mov	r5, r0
 8027022:	f003 f8f9 	bl	802a218 <_localeconv_r>
 8027026:	f8d0 b000 	ldr.w	fp, [r0]
 802702a:	4658      	mov	r0, fp
 802702c:	f7d9 f908 	bl	8000240 <strlen>
 8027030:	2300      	movs	r3, #0
 8027032:	9308      	str	r3, [sp, #32]
 8027034:	f8d8 3000 	ldr.w	r3, [r8]
 8027038:	f894 9018 	ldrb.w	r9, [r4, #24]
 802703c:	6822      	ldr	r2, [r4, #0]
 802703e:	3307      	adds	r3, #7
 8027040:	f023 0307 	bic.w	r3, r3, #7
 8027044:	f103 0108 	add.w	r1, r3, #8
 8027048:	f8c8 1000 	str.w	r1, [r8]
 802704c:	4682      	mov	sl, r0
 802704e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027052:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8027056:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80272b8 <_printf_float+0x2a8>
 802705a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 802705e:	eeb0 6bc0 	vabs.f64	d6, d0
 8027062:	eeb4 6b47 	vcmp.f64	d6, d7
 8027066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802706a:	dd24      	ble.n	80270b6 <_printf_float+0xa6>
 802706c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8027070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027074:	d502      	bpl.n	802707c <_printf_float+0x6c>
 8027076:	232d      	movs	r3, #45	; 0x2d
 8027078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802707c:	4b90      	ldr	r3, [pc, #576]	; (80272c0 <_printf_float+0x2b0>)
 802707e:	4891      	ldr	r0, [pc, #580]	; (80272c4 <_printf_float+0x2b4>)
 8027080:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8027084:	bf94      	ite	ls
 8027086:	4698      	movls	r8, r3
 8027088:	4680      	movhi	r8, r0
 802708a:	2303      	movs	r3, #3
 802708c:	6123      	str	r3, [r4, #16]
 802708e:	f022 0204 	bic.w	r2, r2, #4
 8027092:	2300      	movs	r3, #0
 8027094:	6022      	str	r2, [r4, #0]
 8027096:	9304      	str	r3, [sp, #16]
 8027098:	9700      	str	r7, [sp, #0]
 802709a:	4633      	mov	r3, r6
 802709c:	aa09      	add	r2, sp, #36	; 0x24
 802709e:	4621      	mov	r1, r4
 80270a0:	4628      	mov	r0, r5
 80270a2:	f000 f9d3 	bl	802744c <_printf_common>
 80270a6:	3001      	adds	r0, #1
 80270a8:	f040 808a 	bne.w	80271c0 <_printf_float+0x1b0>
 80270ac:	f04f 30ff 	mov.w	r0, #4294967295
 80270b0:	b00b      	add	sp, #44	; 0x2c
 80270b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80270b6:	eeb4 0b40 	vcmp.f64	d0, d0
 80270ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80270be:	d709      	bvc.n	80270d4 <_printf_float+0xc4>
 80270c0:	ee10 3a90 	vmov	r3, s1
 80270c4:	2b00      	cmp	r3, #0
 80270c6:	bfbc      	itt	lt
 80270c8:	232d      	movlt	r3, #45	; 0x2d
 80270ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80270ce:	487e      	ldr	r0, [pc, #504]	; (80272c8 <_printf_float+0x2b8>)
 80270d0:	4b7e      	ldr	r3, [pc, #504]	; (80272cc <_printf_float+0x2bc>)
 80270d2:	e7d5      	b.n	8027080 <_printf_float+0x70>
 80270d4:	6863      	ldr	r3, [r4, #4]
 80270d6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80270da:	9104      	str	r1, [sp, #16]
 80270dc:	1c59      	adds	r1, r3, #1
 80270de:	d13c      	bne.n	802715a <_printf_float+0x14a>
 80270e0:	2306      	movs	r3, #6
 80270e2:	6063      	str	r3, [r4, #4]
 80270e4:	2300      	movs	r3, #0
 80270e6:	9303      	str	r3, [sp, #12]
 80270e8:	ab08      	add	r3, sp, #32
 80270ea:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80270ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80270f2:	ab07      	add	r3, sp, #28
 80270f4:	6861      	ldr	r1, [r4, #4]
 80270f6:	9300      	str	r3, [sp, #0]
 80270f8:	6022      	str	r2, [r4, #0]
 80270fa:	f10d 031b 	add.w	r3, sp, #27
 80270fe:	4628      	mov	r0, r5
 8027100:	f7ff fef6 	bl	8026ef0 <__cvt>
 8027104:	9b04      	ldr	r3, [sp, #16]
 8027106:	9907      	ldr	r1, [sp, #28]
 8027108:	2b47      	cmp	r3, #71	; 0x47
 802710a:	4680      	mov	r8, r0
 802710c:	d108      	bne.n	8027120 <_printf_float+0x110>
 802710e:	1cc8      	adds	r0, r1, #3
 8027110:	db02      	blt.n	8027118 <_printf_float+0x108>
 8027112:	6863      	ldr	r3, [r4, #4]
 8027114:	4299      	cmp	r1, r3
 8027116:	dd41      	ble.n	802719c <_printf_float+0x18c>
 8027118:	f1a9 0902 	sub.w	r9, r9, #2
 802711c:	fa5f f989 	uxtb.w	r9, r9
 8027120:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8027124:	d820      	bhi.n	8027168 <_printf_float+0x158>
 8027126:	3901      	subs	r1, #1
 8027128:	464a      	mov	r2, r9
 802712a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 802712e:	9107      	str	r1, [sp, #28]
 8027130:	f7ff ff30 	bl	8026f94 <__exponent>
 8027134:	9a08      	ldr	r2, [sp, #32]
 8027136:	9004      	str	r0, [sp, #16]
 8027138:	1813      	adds	r3, r2, r0
 802713a:	2a01      	cmp	r2, #1
 802713c:	6123      	str	r3, [r4, #16]
 802713e:	dc02      	bgt.n	8027146 <_printf_float+0x136>
 8027140:	6822      	ldr	r2, [r4, #0]
 8027142:	07d2      	lsls	r2, r2, #31
 8027144:	d501      	bpl.n	802714a <_printf_float+0x13a>
 8027146:	3301      	adds	r3, #1
 8027148:	6123      	str	r3, [r4, #16]
 802714a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 802714e:	2b00      	cmp	r3, #0
 8027150:	d0a2      	beq.n	8027098 <_printf_float+0x88>
 8027152:	232d      	movs	r3, #45	; 0x2d
 8027154:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027158:	e79e      	b.n	8027098 <_printf_float+0x88>
 802715a:	9904      	ldr	r1, [sp, #16]
 802715c:	2947      	cmp	r1, #71	; 0x47
 802715e:	d1c1      	bne.n	80270e4 <_printf_float+0xd4>
 8027160:	2b00      	cmp	r3, #0
 8027162:	d1bf      	bne.n	80270e4 <_printf_float+0xd4>
 8027164:	2301      	movs	r3, #1
 8027166:	e7bc      	b.n	80270e2 <_printf_float+0xd2>
 8027168:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 802716c:	d118      	bne.n	80271a0 <_printf_float+0x190>
 802716e:	2900      	cmp	r1, #0
 8027170:	6863      	ldr	r3, [r4, #4]
 8027172:	dd0b      	ble.n	802718c <_printf_float+0x17c>
 8027174:	6121      	str	r1, [r4, #16]
 8027176:	b913      	cbnz	r3, 802717e <_printf_float+0x16e>
 8027178:	6822      	ldr	r2, [r4, #0]
 802717a:	07d0      	lsls	r0, r2, #31
 802717c:	d502      	bpl.n	8027184 <_printf_float+0x174>
 802717e:	3301      	adds	r3, #1
 8027180:	440b      	add	r3, r1
 8027182:	6123      	str	r3, [r4, #16]
 8027184:	2300      	movs	r3, #0
 8027186:	65a1      	str	r1, [r4, #88]	; 0x58
 8027188:	9304      	str	r3, [sp, #16]
 802718a:	e7de      	b.n	802714a <_printf_float+0x13a>
 802718c:	b913      	cbnz	r3, 8027194 <_printf_float+0x184>
 802718e:	6822      	ldr	r2, [r4, #0]
 8027190:	07d2      	lsls	r2, r2, #31
 8027192:	d501      	bpl.n	8027198 <_printf_float+0x188>
 8027194:	3302      	adds	r3, #2
 8027196:	e7f4      	b.n	8027182 <_printf_float+0x172>
 8027198:	2301      	movs	r3, #1
 802719a:	e7f2      	b.n	8027182 <_printf_float+0x172>
 802719c:	f04f 0967 	mov.w	r9, #103	; 0x67
 80271a0:	9b08      	ldr	r3, [sp, #32]
 80271a2:	4299      	cmp	r1, r3
 80271a4:	db05      	blt.n	80271b2 <_printf_float+0x1a2>
 80271a6:	6823      	ldr	r3, [r4, #0]
 80271a8:	6121      	str	r1, [r4, #16]
 80271aa:	07d8      	lsls	r0, r3, #31
 80271ac:	d5ea      	bpl.n	8027184 <_printf_float+0x174>
 80271ae:	1c4b      	adds	r3, r1, #1
 80271b0:	e7e7      	b.n	8027182 <_printf_float+0x172>
 80271b2:	2900      	cmp	r1, #0
 80271b4:	bfd4      	ite	le
 80271b6:	f1c1 0202 	rsble	r2, r1, #2
 80271ba:	2201      	movgt	r2, #1
 80271bc:	4413      	add	r3, r2
 80271be:	e7e0      	b.n	8027182 <_printf_float+0x172>
 80271c0:	6823      	ldr	r3, [r4, #0]
 80271c2:	055a      	lsls	r2, r3, #21
 80271c4:	d407      	bmi.n	80271d6 <_printf_float+0x1c6>
 80271c6:	6923      	ldr	r3, [r4, #16]
 80271c8:	4642      	mov	r2, r8
 80271ca:	4631      	mov	r1, r6
 80271cc:	4628      	mov	r0, r5
 80271ce:	47b8      	blx	r7
 80271d0:	3001      	adds	r0, #1
 80271d2:	d12a      	bne.n	802722a <_printf_float+0x21a>
 80271d4:	e76a      	b.n	80270ac <_printf_float+0x9c>
 80271d6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80271da:	f240 80e2 	bls.w	80273a2 <_printf_float+0x392>
 80271de:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80271e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80271e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80271ea:	d133      	bne.n	8027254 <_printf_float+0x244>
 80271ec:	4a38      	ldr	r2, [pc, #224]	; (80272d0 <_printf_float+0x2c0>)
 80271ee:	2301      	movs	r3, #1
 80271f0:	4631      	mov	r1, r6
 80271f2:	4628      	mov	r0, r5
 80271f4:	47b8      	blx	r7
 80271f6:	3001      	adds	r0, #1
 80271f8:	f43f af58 	beq.w	80270ac <_printf_float+0x9c>
 80271fc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8027200:	429a      	cmp	r2, r3
 8027202:	db02      	blt.n	802720a <_printf_float+0x1fa>
 8027204:	6823      	ldr	r3, [r4, #0]
 8027206:	07d8      	lsls	r0, r3, #31
 8027208:	d50f      	bpl.n	802722a <_printf_float+0x21a>
 802720a:	4653      	mov	r3, sl
 802720c:	465a      	mov	r2, fp
 802720e:	4631      	mov	r1, r6
 8027210:	4628      	mov	r0, r5
 8027212:	47b8      	blx	r7
 8027214:	3001      	adds	r0, #1
 8027216:	f43f af49 	beq.w	80270ac <_printf_float+0x9c>
 802721a:	f04f 0800 	mov.w	r8, #0
 802721e:	f104 091a 	add.w	r9, r4, #26
 8027222:	9b08      	ldr	r3, [sp, #32]
 8027224:	3b01      	subs	r3, #1
 8027226:	4543      	cmp	r3, r8
 8027228:	dc09      	bgt.n	802723e <_printf_float+0x22e>
 802722a:	6823      	ldr	r3, [r4, #0]
 802722c:	079b      	lsls	r3, r3, #30
 802722e:	f100 8108 	bmi.w	8027442 <_printf_float+0x432>
 8027232:	68e0      	ldr	r0, [r4, #12]
 8027234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027236:	4298      	cmp	r0, r3
 8027238:	bfb8      	it	lt
 802723a:	4618      	movlt	r0, r3
 802723c:	e738      	b.n	80270b0 <_printf_float+0xa0>
 802723e:	2301      	movs	r3, #1
 8027240:	464a      	mov	r2, r9
 8027242:	4631      	mov	r1, r6
 8027244:	4628      	mov	r0, r5
 8027246:	47b8      	blx	r7
 8027248:	3001      	adds	r0, #1
 802724a:	f43f af2f 	beq.w	80270ac <_printf_float+0x9c>
 802724e:	f108 0801 	add.w	r8, r8, #1
 8027252:	e7e6      	b.n	8027222 <_printf_float+0x212>
 8027254:	9b07      	ldr	r3, [sp, #28]
 8027256:	2b00      	cmp	r3, #0
 8027258:	dc3c      	bgt.n	80272d4 <_printf_float+0x2c4>
 802725a:	4a1d      	ldr	r2, [pc, #116]	; (80272d0 <_printf_float+0x2c0>)
 802725c:	2301      	movs	r3, #1
 802725e:	4631      	mov	r1, r6
 8027260:	4628      	mov	r0, r5
 8027262:	47b8      	blx	r7
 8027264:	3001      	adds	r0, #1
 8027266:	f43f af21 	beq.w	80270ac <_printf_float+0x9c>
 802726a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 802726e:	4313      	orrs	r3, r2
 8027270:	d102      	bne.n	8027278 <_printf_float+0x268>
 8027272:	6823      	ldr	r3, [r4, #0]
 8027274:	07d9      	lsls	r1, r3, #31
 8027276:	d5d8      	bpl.n	802722a <_printf_float+0x21a>
 8027278:	4653      	mov	r3, sl
 802727a:	465a      	mov	r2, fp
 802727c:	4631      	mov	r1, r6
 802727e:	4628      	mov	r0, r5
 8027280:	47b8      	blx	r7
 8027282:	3001      	adds	r0, #1
 8027284:	f43f af12 	beq.w	80270ac <_printf_float+0x9c>
 8027288:	f04f 0900 	mov.w	r9, #0
 802728c:	f104 0a1a 	add.w	sl, r4, #26
 8027290:	9b07      	ldr	r3, [sp, #28]
 8027292:	425b      	negs	r3, r3
 8027294:	454b      	cmp	r3, r9
 8027296:	dc01      	bgt.n	802729c <_printf_float+0x28c>
 8027298:	9b08      	ldr	r3, [sp, #32]
 802729a:	e795      	b.n	80271c8 <_printf_float+0x1b8>
 802729c:	2301      	movs	r3, #1
 802729e:	4652      	mov	r2, sl
 80272a0:	4631      	mov	r1, r6
 80272a2:	4628      	mov	r0, r5
 80272a4:	47b8      	blx	r7
 80272a6:	3001      	adds	r0, #1
 80272a8:	f43f af00 	beq.w	80270ac <_printf_float+0x9c>
 80272ac:	f109 0901 	add.w	r9, r9, #1
 80272b0:	e7ee      	b.n	8027290 <_printf_float+0x280>
 80272b2:	bf00      	nop
 80272b4:	f3af 8000 	nop.w
 80272b8:	ffffffff 	.word	0xffffffff
 80272bc:	7fefffff 	.word	0x7fefffff
 80272c0:	0802f4b5 	.word	0x0802f4b5
 80272c4:	0802f4b9 	.word	0x0802f4b9
 80272c8:	0802f4c1 	.word	0x0802f4c1
 80272cc:	0802f4bd 	.word	0x0802f4bd
 80272d0:	0802e7ca 	.word	0x0802e7ca
 80272d4:	9a08      	ldr	r2, [sp, #32]
 80272d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80272d8:	429a      	cmp	r2, r3
 80272da:	bfa8      	it	ge
 80272dc:	461a      	movge	r2, r3
 80272de:	2a00      	cmp	r2, #0
 80272e0:	4691      	mov	r9, r2
 80272e2:	dc38      	bgt.n	8027356 <_printf_float+0x346>
 80272e4:	2300      	movs	r3, #0
 80272e6:	9305      	str	r3, [sp, #20]
 80272e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80272ec:	f104 021a 	add.w	r2, r4, #26
 80272f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80272f2:	9905      	ldr	r1, [sp, #20]
 80272f4:	9304      	str	r3, [sp, #16]
 80272f6:	eba3 0309 	sub.w	r3, r3, r9
 80272fa:	428b      	cmp	r3, r1
 80272fc:	dc33      	bgt.n	8027366 <_printf_float+0x356>
 80272fe:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8027302:	429a      	cmp	r2, r3
 8027304:	db3c      	blt.n	8027380 <_printf_float+0x370>
 8027306:	6823      	ldr	r3, [r4, #0]
 8027308:	07da      	lsls	r2, r3, #31
 802730a:	d439      	bmi.n	8027380 <_printf_float+0x370>
 802730c:	9a08      	ldr	r2, [sp, #32]
 802730e:	9b04      	ldr	r3, [sp, #16]
 8027310:	9907      	ldr	r1, [sp, #28]
 8027312:	1ad3      	subs	r3, r2, r3
 8027314:	eba2 0901 	sub.w	r9, r2, r1
 8027318:	4599      	cmp	r9, r3
 802731a:	bfa8      	it	ge
 802731c:	4699      	movge	r9, r3
 802731e:	f1b9 0f00 	cmp.w	r9, #0
 8027322:	dc35      	bgt.n	8027390 <_printf_float+0x380>
 8027324:	f04f 0800 	mov.w	r8, #0
 8027328:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802732c:	f104 0a1a 	add.w	sl, r4, #26
 8027330:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8027334:	1a9b      	subs	r3, r3, r2
 8027336:	eba3 0309 	sub.w	r3, r3, r9
 802733a:	4543      	cmp	r3, r8
 802733c:	f77f af75 	ble.w	802722a <_printf_float+0x21a>
 8027340:	2301      	movs	r3, #1
 8027342:	4652      	mov	r2, sl
 8027344:	4631      	mov	r1, r6
 8027346:	4628      	mov	r0, r5
 8027348:	47b8      	blx	r7
 802734a:	3001      	adds	r0, #1
 802734c:	f43f aeae 	beq.w	80270ac <_printf_float+0x9c>
 8027350:	f108 0801 	add.w	r8, r8, #1
 8027354:	e7ec      	b.n	8027330 <_printf_float+0x320>
 8027356:	4613      	mov	r3, r2
 8027358:	4631      	mov	r1, r6
 802735a:	4642      	mov	r2, r8
 802735c:	4628      	mov	r0, r5
 802735e:	47b8      	blx	r7
 8027360:	3001      	adds	r0, #1
 8027362:	d1bf      	bne.n	80272e4 <_printf_float+0x2d4>
 8027364:	e6a2      	b.n	80270ac <_printf_float+0x9c>
 8027366:	2301      	movs	r3, #1
 8027368:	4631      	mov	r1, r6
 802736a:	4628      	mov	r0, r5
 802736c:	9204      	str	r2, [sp, #16]
 802736e:	47b8      	blx	r7
 8027370:	3001      	adds	r0, #1
 8027372:	f43f ae9b 	beq.w	80270ac <_printf_float+0x9c>
 8027376:	9b05      	ldr	r3, [sp, #20]
 8027378:	9a04      	ldr	r2, [sp, #16]
 802737a:	3301      	adds	r3, #1
 802737c:	9305      	str	r3, [sp, #20]
 802737e:	e7b7      	b.n	80272f0 <_printf_float+0x2e0>
 8027380:	4653      	mov	r3, sl
 8027382:	465a      	mov	r2, fp
 8027384:	4631      	mov	r1, r6
 8027386:	4628      	mov	r0, r5
 8027388:	47b8      	blx	r7
 802738a:	3001      	adds	r0, #1
 802738c:	d1be      	bne.n	802730c <_printf_float+0x2fc>
 802738e:	e68d      	b.n	80270ac <_printf_float+0x9c>
 8027390:	9a04      	ldr	r2, [sp, #16]
 8027392:	464b      	mov	r3, r9
 8027394:	4442      	add	r2, r8
 8027396:	4631      	mov	r1, r6
 8027398:	4628      	mov	r0, r5
 802739a:	47b8      	blx	r7
 802739c:	3001      	adds	r0, #1
 802739e:	d1c1      	bne.n	8027324 <_printf_float+0x314>
 80273a0:	e684      	b.n	80270ac <_printf_float+0x9c>
 80273a2:	9a08      	ldr	r2, [sp, #32]
 80273a4:	2a01      	cmp	r2, #1
 80273a6:	dc01      	bgt.n	80273ac <_printf_float+0x39c>
 80273a8:	07db      	lsls	r3, r3, #31
 80273aa:	d537      	bpl.n	802741c <_printf_float+0x40c>
 80273ac:	2301      	movs	r3, #1
 80273ae:	4642      	mov	r2, r8
 80273b0:	4631      	mov	r1, r6
 80273b2:	4628      	mov	r0, r5
 80273b4:	47b8      	blx	r7
 80273b6:	3001      	adds	r0, #1
 80273b8:	f43f ae78 	beq.w	80270ac <_printf_float+0x9c>
 80273bc:	4653      	mov	r3, sl
 80273be:	465a      	mov	r2, fp
 80273c0:	4631      	mov	r1, r6
 80273c2:	4628      	mov	r0, r5
 80273c4:	47b8      	blx	r7
 80273c6:	3001      	adds	r0, #1
 80273c8:	f43f ae70 	beq.w	80270ac <_printf_float+0x9c>
 80273cc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80273d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80273d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80273d8:	d01b      	beq.n	8027412 <_printf_float+0x402>
 80273da:	9b08      	ldr	r3, [sp, #32]
 80273dc:	f108 0201 	add.w	r2, r8, #1
 80273e0:	3b01      	subs	r3, #1
 80273e2:	4631      	mov	r1, r6
 80273e4:	4628      	mov	r0, r5
 80273e6:	47b8      	blx	r7
 80273e8:	3001      	adds	r0, #1
 80273ea:	d10e      	bne.n	802740a <_printf_float+0x3fa>
 80273ec:	e65e      	b.n	80270ac <_printf_float+0x9c>
 80273ee:	2301      	movs	r3, #1
 80273f0:	464a      	mov	r2, r9
 80273f2:	4631      	mov	r1, r6
 80273f4:	4628      	mov	r0, r5
 80273f6:	47b8      	blx	r7
 80273f8:	3001      	adds	r0, #1
 80273fa:	f43f ae57 	beq.w	80270ac <_printf_float+0x9c>
 80273fe:	f108 0801 	add.w	r8, r8, #1
 8027402:	9b08      	ldr	r3, [sp, #32]
 8027404:	3b01      	subs	r3, #1
 8027406:	4543      	cmp	r3, r8
 8027408:	dcf1      	bgt.n	80273ee <_printf_float+0x3de>
 802740a:	9b04      	ldr	r3, [sp, #16]
 802740c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8027410:	e6db      	b.n	80271ca <_printf_float+0x1ba>
 8027412:	f04f 0800 	mov.w	r8, #0
 8027416:	f104 091a 	add.w	r9, r4, #26
 802741a:	e7f2      	b.n	8027402 <_printf_float+0x3f2>
 802741c:	2301      	movs	r3, #1
 802741e:	4642      	mov	r2, r8
 8027420:	e7df      	b.n	80273e2 <_printf_float+0x3d2>
 8027422:	2301      	movs	r3, #1
 8027424:	464a      	mov	r2, r9
 8027426:	4631      	mov	r1, r6
 8027428:	4628      	mov	r0, r5
 802742a:	47b8      	blx	r7
 802742c:	3001      	adds	r0, #1
 802742e:	f43f ae3d 	beq.w	80270ac <_printf_float+0x9c>
 8027432:	f108 0801 	add.w	r8, r8, #1
 8027436:	68e3      	ldr	r3, [r4, #12]
 8027438:	9909      	ldr	r1, [sp, #36]	; 0x24
 802743a:	1a5b      	subs	r3, r3, r1
 802743c:	4543      	cmp	r3, r8
 802743e:	dcf0      	bgt.n	8027422 <_printf_float+0x412>
 8027440:	e6f7      	b.n	8027232 <_printf_float+0x222>
 8027442:	f04f 0800 	mov.w	r8, #0
 8027446:	f104 0919 	add.w	r9, r4, #25
 802744a:	e7f4      	b.n	8027436 <_printf_float+0x426>

0802744c <_printf_common>:
 802744c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027450:	4616      	mov	r6, r2
 8027452:	4699      	mov	r9, r3
 8027454:	688a      	ldr	r2, [r1, #8]
 8027456:	690b      	ldr	r3, [r1, #16]
 8027458:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802745c:	4293      	cmp	r3, r2
 802745e:	bfb8      	it	lt
 8027460:	4613      	movlt	r3, r2
 8027462:	6033      	str	r3, [r6, #0]
 8027464:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8027468:	4607      	mov	r7, r0
 802746a:	460c      	mov	r4, r1
 802746c:	b10a      	cbz	r2, 8027472 <_printf_common+0x26>
 802746e:	3301      	adds	r3, #1
 8027470:	6033      	str	r3, [r6, #0]
 8027472:	6823      	ldr	r3, [r4, #0]
 8027474:	0699      	lsls	r1, r3, #26
 8027476:	bf42      	ittt	mi
 8027478:	6833      	ldrmi	r3, [r6, #0]
 802747a:	3302      	addmi	r3, #2
 802747c:	6033      	strmi	r3, [r6, #0]
 802747e:	6825      	ldr	r5, [r4, #0]
 8027480:	f015 0506 	ands.w	r5, r5, #6
 8027484:	d106      	bne.n	8027494 <_printf_common+0x48>
 8027486:	f104 0a19 	add.w	sl, r4, #25
 802748a:	68e3      	ldr	r3, [r4, #12]
 802748c:	6832      	ldr	r2, [r6, #0]
 802748e:	1a9b      	subs	r3, r3, r2
 8027490:	42ab      	cmp	r3, r5
 8027492:	dc26      	bgt.n	80274e2 <_printf_common+0x96>
 8027494:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8027498:	1e13      	subs	r3, r2, #0
 802749a:	6822      	ldr	r2, [r4, #0]
 802749c:	bf18      	it	ne
 802749e:	2301      	movne	r3, #1
 80274a0:	0692      	lsls	r2, r2, #26
 80274a2:	d42b      	bmi.n	80274fc <_printf_common+0xb0>
 80274a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80274a8:	4649      	mov	r1, r9
 80274aa:	4638      	mov	r0, r7
 80274ac:	47c0      	blx	r8
 80274ae:	3001      	adds	r0, #1
 80274b0:	d01e      	beq.n	80274f0 <_printf_common+0xa4>
 80274b2:	6823      	ldr	r3, [r4, #0]
 80274b4:	68e5      	ldr	r5, [r4, #12]
 80274b6:	6832      	ldr	r2, [r6, #0]
 80274b8:	f003 0306 	and.w	r3, r3, #6
 80274bc:	2b04      	cmp	r3, #4
 80274be:	bf08      	it	eq
 80274c0:	1aad      	subeq	r5, r5, r2
 80274c2:	68a3      	ldr	r3, [r4, #8]
 80274c4:	6922      	ldr	r2, [r4, #16]
 80274c6:	bf0c      	ite	eq
 80274c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80274cc:	2500      	movne	r5, #0
 80274ce:	4293      	cmp	r3, r2
 80274d0:	bfc4      	itt	gt
 80274d2:	1a9b      	subgt	r3, r3, r2
 80274d4:	18ed      	addgt	r5, r5, r3
 80274d6:	2600      	movs	r6, #0
 80274d8:	341a      	adds	r4, #26
 80274da:	42b5      	cmp	r5, r6
 80274dc:	d11a      	bne.n	8027514 <_printf_common+0xc8>
 80274de:	2000      	movs	r0, #0
 80274e0:	e008      	b.n	80274f4 <_printf_common+0xa8>
 80274e2:	2301      	movs	r3, #1
 80274e4:	4652      	mov	r2, sl
 80274e6:	4649      	mov	r1, r9
 80274e8:	4638      	mov	r0, r7
 80274ea:	47c0      	blx	r8
 80274ec:	3001      	adds	r0, #1
 80274ee:	d103      	bne.n	80274f8 <_printf_common+0xac>
 80274f0:	f04f 30ff 	mov.w	r0, #4294967295
 80274f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80274f8:	3501      	adds	r5, #1
 80274fa:	e7c6      	b.n	802748a <_printf_common+0x3e>
 80274fc:	18e1      	adds	r1, r4, r3
 80274fe:	1c5a      	adds	r2, r3, #1
 8027500:	2030      	movs	r0, #48	; 0x30
 8027502:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8027506:	4422      	add	r2, r4
 8027508:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802750c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8027510:	3302      	adds	r3, #2
 8027512:	e7c7      	b.n	80274a4 <_printf_common+0x58>
 8027514:	2301      	movs	r3, #1
 8027516:	4622      	mov	r2, r4
 8027518:	4649      	mov	r1, r9
 802751a:	4638      	mov	r0, r7
 802751c:	47c0      	blx	r8
 802751e:	3001      	adds	r0, #1
 8027520:	d0e6      	beq.n	80274f0 <_printf_common+0xa4>
 8027522:	3601      	adds	r6, #1
 8027524:	e7d9      	b.n	80274da <_printf_common+0x8e>
	...

08027528 <_printf_i>:
 8027528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802752c:	460c      	mov	r4, r1
 802752e:	4691      	mov	r9, r2
 8027530:	7e27      	ldrb	r7, [r4, #24]
 8027532:	990c      	ldr	r1, [sp, #48]	; 0x30
 8027534:	2f78      	cmp	r7, #120	; 0x78
 8027536:	4680      	mov	r8, r0
 8027538:	469a      	mov	sl, r3
 802753a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802753e:	d807      	bhi.n	8027550 <_printf_i+0x28>
 8027540:	2f62      	cmp	r7, #98	; 0x62
 8027542:	d80a      	bhi.n	802755a <_printf_i+0x32>
 8027544:	2f00      	cmp	r7, #0
 8027546:	f000 80d8 	beq.w	80276fa <_printf_i+0x1d2>
 802754a:	2f58      	cmp	r7, #88	; 0x58
 802754c:	f000 80a3 	beq.w	8027696 <_printf_i+0x16e>
 8027550:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8027554:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8027558:	e03a      	b.n	80275d0 <_printf_i+0xa8>
 802755a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802755e:	2b15      	cmp	r3, #21
 8027560:	d8f6      	bhi.n	8027550 <_printf_i+0x28>
 8027562:	a001      	add	r0, pc, #4	; (adr r0, 8027568 <_printf_i+0x40>)
 8027564:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8027568:	080275c1 	.word	0x080275c1
 802756c:	080275d5 	.word	0x080275d5
 8027570:	08027551 	.word	0x08027551
 8027574:	08027551 	.word	0x08027551
 8027578:	08027551 	.word	0x08027551
 802757c:	08027551 	.word	0x08027551
 8027580:	080275d5 	.word	0x080275d5
 8027584:	08027551 	.word	0x08027551
 8027588:	08027551 	.word	0x08027551
 802758c:	08027551 	.word	0x08027551
 8027590:	08027551 	.word	0x08027551
 8027594:	080276e1 	.word	0x080276e1
 8027598:	08027605 	.word	0x08027605
 802759c:	080276c3 	.word	0x080276c3
 80275a0:	08027551 	.word	0x08027551
 80275a4:	08027551 	.word	0x08027551
 80275a8:	08027703 	.word	0x08027703
 80275ac:	08027551 	.word	0x08027551
 80275b0:	08027605 	.word	0x08027605
 80275b4:	08027551 	.word	0x08027551
 80275b8:	08027551 	.word	0x08027551
 80275bc:	080276cb 	.word	0x080276cb
 80275c0:	680b      	ldr	r3, [r1, #0]
 80275c2:	1d1a      	adds	r2, r3, #4
 80275c4:	681b      	ldr	r3, [r3, #0]
 80275c6:	600a      	str	r2, [r1, #0]
 80275c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80275cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80275d0:	2301      	movs	r3, #1
 80275d2:	e0a3      	b.n	802771c <_printf_i+0x1f4>
 80275d4:	6825      	ldr	r5, [r4, #0]
 80275d6:	6808      	ldr	r0, [r1, #0]
 80275d8:	062e      	lsls	r6, r5, #24
 80275da:	f100 0304 	add.w	r3, r0, #4
 80275de:	d50a      	bpl.n	80275f6 <_printf_i+0xce>
 80275e0:	6805      	ldr	r5, [r0, #0]
 80275e2:	600b      	str	r3, [r1, #0]
 80275e4:	2d00      	cmp	r5, #0
 80275e6:	da03      	bge.n	80275f0 <_printf_i+0xc8>
 80275e8:	232d      	movs	r3, #45	; 0x2d
 80275ea:	426d      	negs	r5, r5
 80275ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80275f0:	485e      	ldr	r0, [pc, #376]	; (802776c <_printf_i+0x244>)
 80275f2:	230a      	movs	r3, #10
 80275f4:	e019      	b.n	802762a <_printf_i+0x102>
 80275f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80275fa:	6805      	ldr	r5, [r0, #0]
 80275fc:	600b      	str	r3, [r1, #0]
 80275fe:	bf18      	it	ne
 8027600:	b22d      	sxthne	r5, r5
 8027602:	e7ef      	b.n	80275e4 <_printf_i+0xbc>
 8027604:	680b      	ldr	r3, [r1, #0]
 8027606:	6825      	ldr	r5, [r4, #0]
 8027608:	1d18      	adds	r0, r3, #4
 802760a:	6008      	str	r0, [r1, #0]
 802760c:	0628      	lsls	r0, r5, #24
 802760e:	d501      	bpl.n	8027614 <_printf_i+0xec>
 8027610:	681d      	ldr	r5, [r3, #0]
 8027612:	e002      	b.n	802761a <_printf_i+0xf2>
 8027614:	0669      	lsls	r1, r5, #25
 8027616:	d5fb      	bpl.n	8027610 <_printf_i+0xe8>
 8027618:	881d      	ldrh	r5, [r3, #0]
 802761a:	4854      	ldr	r0, [pc, #336]	; (802776c <_printf_i+0x244>)
 802761c:	2f6f      	cmp	r7, #111	; 0x6f
 802761e:	bf0c      	ite	eq
 8027620:	2308      	moveq	r3, #8
 8027622:	230a      	movne	r3, #10
 8027624:	2100      	movs	r1, #0
 8027626:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802762a:	6866      	ldr	r6, [r4, #4]
 802762c:	60a6      	str	r6, [r4, #8]
 802762e:	2e00      	cmp	r6, #0
 8027630:	bfa2      	ittt	ge
 8027632:	6821      	ldrge	r1, [r4, #0]
 8027634:	f021 0104 	bicge.w	r1, r1, #4
 8027638:	6021      	strge	r1, [r4, #0]
 802763a:	b90d      	cbnz	r5, 8027640 <_printf_i+0x118>
 802763c:	2e00      	cmp	r6, #0
 802763e:	d04d      	beq.n	80276dc <_printf_i+0x1b4>
 8027640:	4616      	mov	r6, r2
 8027642:	fbb5 f1f3 	udiv	r1, r5, r3
 8027646:	fb03 5711 	mls	r7, r3, r1, r5
 802764a:	5dc7      	ldrb	r7, [r0, r7]
 802764c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8027650:	462f      	mov	r7, r5
 8027652:	42bb      	cmp	r3, r7
 8027654:	460d      	mov	r5, r1
 8027656:	d9f4      	bls.n	8027642 <_printf_i+0x11a>
 8027658:	2b08      	cmp	r3, #8
 802765a:	d10b      	bne.n	8027674 <_printf_i+0x14c>
 802765c:	6823      	ldr	r3, [r4, #0]
 802765e:	07df      	lsls	r7, r3, #31
 8027660:	d508      	bpl.n	8027674 <_printf_i+0x14c>
 8027662:	6923      	ldr	r3, [r4, #16]
 8027664:	6861      	ldr	r1, [r4, #4]
 8027666:	4299      	cmp	r1, r3
 8027668:	bfde      	ittt	le
 802766a:	2330      	movle	r3, #48	; 0x30
 802766c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8027670:	f106 36ff 	addle.w	r6, r6, #4294967295
 8027674:	1b92      	subs	r2, r2, r6
 8027676:	6122      	str	r2, [r4, #16]
 8027678:	f8cd a000 	str.w	sl, [sp]
 802767c:	464b      	mov	r3, r9
 802767e:	aa03      	add	r2, sp, #12
 8027680:	4621      	mov	r1, r4
 8027682:	4640      	mov	r0, r8
 8027684:	f7ff fee2 	bl	802744c <_printf_common>
 8027688:	3001      	adds	r0, #1
 802768a:	d14c      	bne.n	8027726 <_printf_i+0x1fe>
 802768c:	f04f 30ff 	mov.w	r0, #4294967295
 8027690:	b004      	add	sp, #16
 8027692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027696:	4835      	ldr	r0, [pc, #212]	; (802776c <_printf_i+0x244>)
 8027698:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802769c:	6823      	ldr	r3, [r4, #0]
 802769e:	680e      	ldr	r6, [r1, #0]
 80276a0:	061f      	lsls	r7, r3, #24
 80276a2:	f856 5b04 	ldr.w	r5, [r6], #4
 80276a6:	600e      	str	r6, [r1, #0]
 80276a8:	d514      	bpl.n	80276d4 <_printf_i+0x1ac>
 80276aa:	07d9      	lsls	r1, r3, #31
 80276ac:	bf44      	itt	mi
 80276ae:	f043 0320 	orrmi.w	r3, r3, #32
 80276b2:	6023      	strmi	r3, [r4, #0]
 80276b4:	b91d      	cbnz	r5, 80276be <_printf_i+0x196>
 80276b6:	6823      	ldr	r3, [r4, #0]
 80276b8:	f023 0320 	bic.w	r3, r3, #32
 80276bc:	6023      	str	r3, [r4, #0]
 80276be:	2310      	movs	r3, #16
 80276c0:	e7b0      	b.n	8027624 <_printf_i+0xfc>
 80276c2:	6823      	ldr	r3, [r4, #0]
 80276c4:	f043 0320 	orr.w	r3, r3, #32
 80276c8:	6023      	str	r3, [r4, #0]
 80276ca:	2378      	movs	r3, #120	; 0x78
 80276cc:	4828      	ldr	r0, [pc, #160]	; (8027770 <_printf_i+0x248>)
 80276ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80276d2:	e7e3      	b.n	802769c <_printf_i+0x174>
 80276d4:	065e      	lsls	r6, r3, #25
 80276d6:	bf48      	it	mi
 80276d8:	b2ad      	uxthmi	r5, r5
 80276da:	e7e6      	b.n	80276aa <_printf_i+0x182>
 80276dc:	4616      	mov	r6, r2
 80276de:	e7bb      	b.n	8027658 <_printf_i+0x130>
 80276e0:	680b      	ldr	r3, [r1, #0]
 80276e2:	6826      	ldr	r6, [r4, #0]
 80276e4:	6960      	ldr	r0, [r4, #20]
 80276e6:	1d1d      	adds	r5, r3, #4
 80276e8:	600d      	str	r5, [r1, #0]
 80276ea:	0635      	lsls	r5, r6, #24
 80276ec:	681b      	ldr	r3, [r3, #0]
 80276ee:	d501      	bpl.n	80276f4 <_printf_i+0x1cc>
 80276f0:	6018      	str	r0, [r3, #0]
 80276f2:	e002      	b.n	80276fa <_printf_i+0x1d2>
 80276f4:	0671      	lsls	r1, r6, #25
 80276f6:	d5fb      	bpl.n	80276f0 <_printf_i+0x1c8>
 80276f8:	8018      	strh	r0, [r3, #0]
 80276fa:	2300      	movs	r3, #0
 80276fc:	6123      	str	r3, [r4, #16]
 80276fe:	4616      	mov	r6, r2
 8027700:	e7ba      	b.n	8027678 <_printf_i+0x150>
 8027702:	680b      	ldr	r3, [r1, #0]
 8027704:	1d1a      	adds	r2, r3, #4
 8027706:	600a      	str	r2, [r1, #0]
 8027708:	681e      	ldr	r6, [r3, #0]
 802770a:	6862      	ldr	r2, [r4, #4]
 802770c:	2100      	movs	r1, #0
 802770e:	4630      	mov	r0, r6
 8027710:	f7d8 fd9e 	bl	8000250 <memchr>
 8027714:	b108      	cbz	r0, 802771a <_printf_i+0x1f2>
 8027716:	1b80      	subs	r0, r0, r6
 8027718:	6060      	str	r0, [r4, #4]
 802771a:	6863      	ldr	r3, [r4, #4]
 802771c:	6123      	str	r3, [r4, #16]
 802771e:	2300      	movs	r3, #0
 8027720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027724:	e7a8      	b.n	8027678 <_printf_i+0x150>
 8027726:	6923      	ldr	r3, [r4, #16]
 8027728:	4632      	mov	r2, r6
 802772a:	4649      	mov	r1, r9
 802772c:	4640      	mov	r0, r8
 802772e:	47d0      	blx	sl
 8027730:	3001      	adds	r0, #1
 8027732:	d0ab      	beq.n	802768c <_printf_i+0x164>
 8027734:	6823      	ldr	r3, [r4, #0]
 8027736:	079b      	lsls	r3, r3, #30
 8027738:	d413      	bmi.n	8027762 <_printf_i+0x23a>
 802773a:	68e0      	ldr	r0, [r4, #12]
 802773c:	9b03      	ldr	r3, [sp, #12]
 802773e:	4298      	cmp	r0, r3
 8027740:	bfb8      	it	lt
 8027742:	4618      	movlt	r0, r3
 8027744:	e7a4      	b.n	8027690 <_printf_i+0x168>
 8027746:	2301      	movs	r3, #1
 8027748:	4632      	mov	r2, r6
 802774a:	4649      	mov	r1, r9
 802774c:	4640      	mov	r0, r8
 802774e:	47d0      	blx	sl
 8027750:	3001      	adds	r0, #1
 8027752:	d09b      	beq.n	802768c <_printf_i+0x164>
 8027754:	3501      	adds	r5, #1
 8027756:	68e3      	ldr	r3, [r4, #12]
 8027758:	9903      	ldr	r1, [sp, #12]
 802775a:	1a5b      	subs	r3, r3, r1
 802775c:	42ab      	cmp	r3, r5
 802775e:	dcf2      	bgt.n	8027746 <_printf_i+0x21e>
 8027760:	e7eb      	b.n	802773a <_printf_i+0x212>
 8027762:	2500      	movs	r5, #0
 8027764:	f104 0619 	add.w	r6, r4, #25
 8027768:	e7f5      	b.n	8027756 <_printf_i+0x22e>
 802776a:	bf00      	nop
 802776c:	0802f4c5 	.word	0x0802f4c5
 8027770:	0802f4d6 	.word	0x0802f4d6

08027774 <_scanf_float>:
 8027774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027778:	b087      	sub	sp, #28
 802777a:	4617      	mov	r7, r2
 802777c:	9303      	str	r3, [sp, #12]
 802777e:	688b      	ldr	r3, [r1, #8]
 8027780:	1e5a      	subs	r2, r3, #1
 8027782:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8027786:	bf83      	ittte	hi
 8027788:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 802778c:	195b      	addhi	r3, r3, r5
 802778e:	9302      	strhi	r3, [sp, #8]
 8027790:	2300      	movls	r3, #0
 8027792:	bf86      	itte	hi
 8027794:	f240 135d 	movwhi	r3, #349	; 0x15d
 8027798:	608b      	strhi	r3, [r1, #8]
 802779a:	9302      	strls	r3, [sp, #8]
 802779c:	680b      	ldr	r3, [r1, #0]
 802779e:	468b      	mov	fp, r1
 80277a0:	2500      	movs	r5, #0
 80277a2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80277a6:	f84b 3b1c 	str.w	r3, [fp], #28
 80277aa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80277ae:	4680      	mov	r8, r0
 80277b0:	460c      	mov	r4, r1
 80277b2:	465e      	mov	r6, fp
 80277b4:	46aa      	mov	sl, r5
 80277b6:	46a9      	mov	r9, r5
 80277b8:	9501      	str	r5, [sp, #4]
 80277ba:	68a2      	ldr	r2, [r4, #8]
 80277bc:	b152      	cbz	r2, 80277d4 <_scanf_float+0x60>
 80277be:	683b      	ldr	r3, [r7, #0]
 80277c0:	781b      	ldrb	r3, [r3, #0]
 80277c2:	2b4e      	cmp	r3, #78	; 0x4e
 80277c4:	d864      	bhi.n	8027890 <_scanf_float+0x11c>
 80277c6:	2b40      	cmp	r3, #64	; 0x40
 80277c8:	d83c      	bhi.n	8027844 <_scanf_float+0xd0>
 80277ca:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80277ce:	b2c8      	uxtb	r0, r1
 80277d0:	280e      	cmp	r0, #14
 80277d2:	d93a      	bls.n	802784a <_scanf_float+0xd6>
 80277d4:	f1b9 0f00 	cmp.w	r9, #0
 80277d8:	d003      	beq.n	80277e2 <_scanf_float+0x6e>
 80277da:	6823      	ldr	r3, [r4, #0]
 80277dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80277e0:	6023      	str	r3, [r4, #0]
 80277e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80277e6:	f1ba 0f01 	cmp.w	sl, #1
 80277ea:	f200 8113 	bhi.w	8027a14 <_scanf_float+0x2a0>
 80277ee:	455e      	cmp	r6, fp
 80277f0:	f200 8105 	bhi.w	80279fe <_scanf_float+0x28a>
 80277f4:	2501      	movs	r5, #1
 80277f6:	4628      	mov	r0, r5
 80277f8:	b007      	add	sp, #28
 80277fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80277fe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8027802:	2a0d      	cmp	r2, #13
 8027804:	d8e6      	bhi.n	80277d4 <_scanf_float+0x60>
 8027806:	a101      	add	r1, pc, #4	; (adr r1, 802780c <_scanf_float+0x98>)
 8027808:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802780c:	0802794b 	.word	0x0802794b
 8027810:	080277d5 	.word	0x080277d5
 8027814:	080277d5 	.word	0x080277d5
 8027818:	080277d5 	.word	0x080277d5
 802781c:	080279ab 	.word	0x080279ab
 8027820:	08027983 	.word	0x08027983
 8027824:	080277d5 	.word	0x080277d5
 8027828:	080277d5 	.word	0x080277d5
 802782c:	08027959 	.word	0x08027959
 8027830:	080277d5 	.word	0x080277d5
 8027834:	080277d5 	.word	0x080277d5
 8027838:	080277d5 	.word	0x080277d5
 802783c:	080277d5 	.word	0x080277d5
 8027840:	08027911 	.word	0x08027911
 8027844:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8027848:	e7db      	b.n	8027802 <_scanf_float+0x8e>
 802784a:	290e      	cmp	r1, #14
 802784c:	d8c2      	bhi.n	80277d4 <_scanf_float+0x60>
 802784e:	a001      	add	r0, pc, #4	; (adr r0, 8027854 <_scanf_float+0xe0>)
 8027850:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8027854:	08027903 	.word	0x08027903
 8027858:	080277d5 	.word	0x080277d5
 802785c:	08027903 	.word	0x08027903
 8027860:	08027997 	.word	0x08027997
 8027864:	080277d5 	.word	0x080277d5
 8027868:	080278b1 	.word	0x080278b1
 802786c:	080278ed 	.word	0x080278ed
 8027870:	080278ed 	.word	0x080278ed
 8027874:	080278ed 	.word	0x080278ed
 8027878:	080278ed 	.word	0x080278ed
 802787c:	080278ed 	.word	0x080278ed
 8027880:	080278ed 	.word	0x080278ed
 8027884:	080278ed 	.word	0x080278ed
 8027888:	080278ed 	.word	0x080278ed
 802788c:	080278ed 	.word	0x080278ed
 8027890:	2b6e      	cmp	r3, #110	; 0x6e
 8027892:	d809      	bhi.n	80278a8 <_scanf_float+0x134>
 8027894:	2b60      	cmp	r3, #96	; 0x60
 8027896:	d8b2      	bhi.n	80277fe <_scanf_float+0x8a>
 8027898:	2b54      	cmp	r3, #84	; 0x54
 802789a:	d077      	beq.n	802798c <_scanf_float+0x218>
 802789c:	2b59      	cmp	r3, #89	; 0x59
 802789e:	d199      	bne.n	80277d4 <_scanf_float+0x60>
 80278a0:	2d07      	cmp	r5, #7
 80278a2:	d197      	bne.n	80277d4 <_scanf_float+0x60>
 80278a4:	2508      	movs	r5, #8
 80278a6:	e029      	b.n	80278fc <_scanf_float+0x188>
 80278a8:	2b74      	cmp	r3, #116	; 0x74
 80278aa:	d06f      	beq.n	802798c <_scanf_float+0x218>
 80278ac:	2b79      	cmp	r3, #121	; 0x79
 80278ae:	e7f6      	b.n	802789e <_scanf_float+0x12a>
 80278b0:	6821      	ldr	r1, [r4, #0]
 80278b2:	05c8      	lsls	r0, r1, #23
 80278b4:	d51a      	bpl.n	80278ec <_scanf_float+0x178>
 80278b6:	9b02      	ldr	r3, [sp, #8]
 80278b8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80278bc:	6021      	str	r1, [r4, #0]
 80278be:	f109 0901 	add.w	r9, r9, #1
 80278c2:	b11b      	cbz	r3, 80278cc <_scanf_float+0x158>
 80278c4:	3b01      	subs	r3, #1
 80278c6:	3201      	adds	r2, #1
 80278c8:	9302      	str	r3, [sp, #8]
 80278ca:	60a2      	str	r2, [r4, #8]
 80278cc:	68a3      	ldr	r3, [r4, #8]
 80278ce:	3b01      	subs	r3, #1
 80278d0:	60a3      	str	r3, [r4, #8]
 80278d2:	6923      	ldr	r3, [r4, #16]
 80278d4:	3301      	adds	r3, #1
 80278d6:	6123      	str	r3, [r4, #16]
 80278d8:	687b      	ldr	r3, [r7, #4]
 80278da:	3b01      	subs	r3, #1
 80278dc:	2b00      	cmp	r3, #0
 80278de:	607b      	str	r3, [r7, #4]
 80278e0:	f340 8084 	ble.w	80279ec <_scanf_float+0x278>
 80278e4:	683b      	ldr	r3, [r7, #0]
 80278e6:	3301      	adds	r3, #1
 80278e8:	603b      	str	r3, [r7, #0]
 80278ea:	e766      	b.n	80277ba <_scanf_float+0x46>
 80278ec:	eb1a 0f05 	cmn.w	sl, r5
 80278f0:	f47f af70 	bne.w	80277d4 <_scanf_float+0x60>
 80278f4:	6822      	ldr	r2, [r4, #0]
 80278f6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80278fa:	6022      	str	r2, [r4, #0]
 80278fc:	f806 3b01 	strb.w	r3, [r6], #1
 8027900:	e7e4      	b.n	80278cc <_scanf_float+0x158>
 8027902:	6822      	ldr	r2, [r4, #0]
 8027904:	0610      	lsls	r0, r2, #24
 8027906:	f57f af65 	bpl.w	80277d4 <_scanf_float+0x60>
 802790a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802790e:	e7f4      	b.n	80278fa <_scanf_float+0x186>
 8027910:	f1ba 0f00 	cmp.w	sl, #0
 8027914:	d10e      	bne.n	8027934 <_scanf_float+0x1c0>
 8027916:	f1b9 0f00 	cmp.w	r9, #0
 802791a:	d10e      	bne.n	802793a <_scanf_float+0x1c6>
 802791c:	6822      	ldr	r2, [r4, #0]
 802791e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8027922:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8027926:	d108      	bne.n	802793a <_scanf_float+0x1c6>
 8027928:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802792c:	6022      	str	r2, [r4, #0]
 802792e:	f04f 0a01 	mov.w	sl, #1
 8027932:	e7e3      	b.n	80278fc <_scanf_float+0x188>
 8027934:	f1ba 0f02 	cmp.w	sl, #2
 8027938:	d055      	beq.n	80279e6 <_scanf_float+0x272>
 802793a:	2d01      	cmp	r5, #1
 802793c:	d002      	beq.n	8027944 <_scanf_float+0x1d0>
 802793e:	2d04      	cmp	r5, #4
 8027940:	f47f af48 	bne.w	80277d4 <_scanf_float+0x60>
 8027944:	3501      	adds	r5, #1
 8027946:	b2ed      	uxtb	r5, r5
 8027948:	e7d8      	b.n	80278fc <_scanf_float+0x188>
 802794a:	f1ba 0f01 	cmp.w	sl, #1
 802794e:	f47f af41 	bne.w	80277d4 <_scanf_float+0x60>
 8027952:	f04f 0a02 	mov.w	sl, #2
 8027956:	e7d1      	b.n	80278fc <_scanf_float+0x188>
 8027958:	b97d      	cbnz	r5, 802797a <_scanf_float+0x206>
 802795a:	f1b9 0f00 	cmp.w	r9, #0
 802795e:	f47f af3c 	bne.w	80277da <_scanf_float+0x66>
 8027962:	6822      	ldr	r2, [r4, #0]
 8027964:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8027968:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 802796c:	f47f af39 	bne.w	80277e2 <_scanf_float+0x6e>
 8027970:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8027974:	6022      	str	r2, [r4, #0]
 8027976:	2501      	movs	r5, #1
 8027978:	e7c0      	b.n	80278fc <_scanf_float+0x188>
 802797a:	2d03      	cmp	r5, #3
 802797c:	d0e2      	beq.n	8027944 <_scanf_float+0x1d0>
 802797e:	2d05      	cmp	r5, #5
 8027980:	e7de      	b.n	8027940 <_scanf_float+0x1cc>
 8027982:	2d02      	cmp	r5, #2
 8027984:	f47f af26 	bne.w	80277d4 <_scanf_float+0x60>
 8027988:	2503      	movs	r5, #3
 802798a:	e7b7      	b.n	80278fc <_scanf_float+0x188>
 802798c:	2d06      	cmp	r5, #6
 802798e:	f47f af21 	bne.w	80277d4 <_scanf_float+0x60>
 8027992:	2507      	movs	r5, #7
 8027994:	e7b2      	b.n	80278fc <_scanf_float+0x188>
 8027996:	6822      	ldr	r2, [r4, #0]
 8027998:	0591      	lsls	r1, r2, #22
 802799a:	f57f af1b 	bpl.w	80277d4 <_scanf_float+0x60>
 802799e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80279a2:	6022      	str	r2, [r4, #0]
 80279a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80279a8:	e7a8      	b.n	80278fc <_scanf_float+0x188>
 80279aa:	6822      	ldr	r2, [r4, #0]
 80279ac:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80279b0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80279b4:	d006      	beq.n	80279c4 <_scanf_float+0x250>
 80279b6:	0550      	lsls	r0, r2, #21
 80279b8:	f57f af0c 	bpl.w	80277d4 <_scanf_float+0x60>
 80279bc:	f1b9 0f00 	cmp.w	r9, #0
 80279c0:	f43f af0f 	beq.w	80277e2 <_scanf_float+0x6e>
 80279c4:	0591      	lsls	r1, r2, #22
 80279c6:	bf58      	it	pl
 80279c8:	9901      	ldrpl	r1, [sp, #4]
 80279ca:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80279ce:	bf58      	it	pl
 80279d0:	eba9 0101 	subpl.w	r1, r9, r1
 80279d4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80279d8:	bf58      	it	pl
 80279da:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80279de:	6022      	str	r2, [r4, #0]
 80279e0:	f04f 0900 	mov.w	r9, #0
 80279e4:	e78a      	b.n	80278fc <_scanf_float+0x188>
 80279e6:	f04f 0a03 	mov.w	sl, #3
 80279ea:	e787      	b.n	80278fc <_scanf_float+0x188>
 80279ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80279f0:	4639      	mov	r1, r7
 80279f2:	4640      	mov	r0, r8
 80279f4:	4798      	blx	r3
 80279f6:	2800      	cmp	r0, #0
 80279f8:	f43f aedf 	beq.w	80277ba <_scanf_float+0x46>
 80279fc:	e6ea      	b.n	80277d4 <_scanf_float+0x60>
 80279fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8027a02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8027a06:	463a      	mov	r2, r7
 8027a08:	4640      	mov	r0, r8
 8027a0a:	4798      	blx	r3
 8027a0c:	6923      	ldr	r3, [r4, #16]
 8027a0e:	3b01      	subs	r3, #1
 8027a10:	6123      	str	r3, [r4, #16]
 8027a12:	e6ec      	b.n	80277ee <_scanf_float+0x7a>
 8027a14:	1e6b      	subs	r3, r5, #1
 8027a16:	2b06      	cmp	r3, #6
 8027a18:	d825      	bhi.n	8027a66 <_scanf_float+0x2f2>
 8027a1a:	2d02      	cmp	r5, #2
 8027a1c:	d836      	bhi.n	8027a8c <_scanf_float+0x318>
 8027a1e:	455e      	cmp	r6, fp
 8027a20:	f67f aee8 	bls.w	80277f4 <_scanf_float+0x80>
 8027a24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8027a28:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8027a2c:	463a      	mov	r2, r7
 8027a2e:	4640      	mov	r0, r8
 8027a30:	4798      	blx	r3
 8027a32:	6923      	ldr	r3, [r4, #16]
 8027a34:	3b01      	subs	r3, #1
 8027a36:	6123      	str	r3, [r4, #16]
 8027a38:	e7f1      	b.n	8027a1e <_scanf_float+0x2aa>
 8027a3a:	9802      	ldr	r0, [sp, #8]
 8027a3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8027a40:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8027a44:	9002      	str	r0, [sp, #8]
 8027a46:	463a      	mov	r2, r7
 8027a48:	4640      	mov	r0, r8
 8027a4a:	4798      	blx	r3
 8027a4c:	6923      	ldr	r3, [r4, #16]
 8027a4e:	3b01      	subs	r3, #1
 8027a50:	6123      	str	r3, [r4, #16]
 8027a52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8027a56:	fa5f fa8a 	uxtb.w	sl, sl
 8027a5a:	f1ba 0f02 	cmp.w	sl, #2
 8027a5e:	d1ec      	bne.n	8027a3a <_scanf_float+0x2c6>
 8027a60:	3d03      	subs	r5, #3
 8027a62:	b2ed      	uxtb	r5, r5
 8027a64:	1b76      	subs	r6, r6, r5
 8027a66:	6823      	ldr	r3, [r4, #0]
 8027a68:	05da      	lsls	r2, r3, #23
 8027a6a:	d52f      	bpl.n	8027acc <_scanf_float+0x358>
 8027a6c:	055b      	lsls	r3, r3, #21
 8027a6e:	d510      	bpl.n	8027a92 <_scanf_float+0x31e>
 8027a70:	455e      	cmp	r6, fp
 8027a72:	f67f aebf 	bls.w	80277f4 <_scanf_float+0x80>
 8027a76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8027a7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8027a7e:	463a      	mov	r2, r7
 8027a80:	4640      	mov	r0, r8
 8027a82:	4798      	blx	r3
 8027a84:	6923      	ldr	r3, [r4, #16]
 8027a86:	3b01      	subs	r3, #1
 8027a88:	6123      	str	r3, [r4, #16]
 8027a8a:	e7f1      	b.n	8027a70 <_scanf_float+0x2fc>
 8027a8c:	46aa      	mov	sl, r5
 8027a8e:	9602      	str	r6, [sp, #8]
 8027a90:	e7df      	b.n	8027a52 <_scanf_float+0x2de>
 8027a92:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8027a96:	6923      	ldr	r3, [r4, #16]
 8027a98:	2965      	cmp	r1, #101	; 0x65
 8027a9a:	f103 33ff 	add.w	r3, r3, #4294967295
 8027a9e:	f106 35ff 	add.w	r5, r6, #4294967295
 8027aa2:	6123      	str	r3, [r4, #16]
 8027aa4:	d00c      	beq.n	8027ac0 <_scanf_float+0x34c>
 8027aa6:	2945      	cmp	r1, #69	; 0x45
 8027aa8:	d00a      	beq.n	8027ac0 <_scanf_float+0x34c>
 8027aaa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8027aae:	463a      	mov	r2, r7
 8027ab0:	4640      	mov	r0, r8
 8027ab2:	4798      	blx	r3
 8027ab4:	6923      	ldr	r3, [r4, #16]
 8027ab6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8027aba:	3b01      	subs	r3, #1
 8027abc:	1eb5      	subs	r5, r6, #2
 8027abe:	6123      	str	r3, [r4, #16]
 8027ac0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8027ac4:	463a      	mov	r2, r7
 8027ac6:	4640      	mov	r0, r8
 8027ac8:	4798      	blx	r3
 8027aca:	462e      	mov	r6, r5
 8027acc:	6825      	ldr	r5, [r4, #0]
 8027ace:	f015 0510 	ands.w	r5, r5, #16
 8027ad2:	d14d      	bne.n	8027b70 <_scanf_float+0x3fc>
 8027ad4:	7035      	strb	r5, [r6, #0]
 8027ad6:	6823      	ldr	r3, [r4, #0]
 8027ad8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8027adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8027ae0:	d11a      	bne.n	8027b18 <_scanf_float+0x3a4>
 8027ae2:	9b01      	ldr	r3, [sp, #4]
 8027ae4:	454b      	cmp	r3, r9
 8027ae6:	eba3 0209 	sub.w	r2, r3, r9
 8027aea:	d122      	bne.n	8027b32 <_scanf_float+0x3be>
 8027aec:	2200      	movs	r2, #0
 8027aee:	4659      	mov	r1, fp
 8027af0:	4640      	mov	r0, r8
 8027af2:	f000 feaf 	bl	8028854 <_strtod_r>
 8027af6:	9b03      	ldr	r3, [sp, #12]
 8027af8:	6821      	ldr	r1, [r4, #0]
 8027afa:	681b      	ldr	r3, [r3, #0]
 8027afc:	f011 0f02 	tst.w	r1, #2
 8027b00:	f103 0204 	add.w	r2, r3, #4
 8027b04:	d020      	beq.n	8027b48 <_scanf_float+0x3d4>
 8027b06:	9903      	ldr	r1, [sp, #12]
 8027b08:	600a      	str	r2, [r1, #0]
 8027b0a:	681b      	ldr	r3, [r3, #0]
 8027b0c:	ed83 0b00 	vstr	d0, [r3]
 8027b10:	68e3      	ldr	r3, [r4, #12]
 8027b12:	3301      	adds	r3, #1
 8027b14:	60e3      	str	r3, [r4, #12]
 8027b16:	e66e      	b.n	80277f6 <_scanf_float+0x82>
 8027b18:	9b04      	ldr	r3, [sp, #16]
 8027b1a:	2b00      	cmp	r3, #0
 8027b1c:	d0e6      	beq.n	8027aec <_scanf_float+0x378>
 8027b1e:	9905      	ldr	r1, [sp, #20]
 8027b20:	230a      	movs	r3, #10
 8027b22:	462a      	mov	r2, r5
 8027b24:	3101      	adds	r1, #1
 8027b26:	4640      	mov	r0, r8
 8027b28:	f000 ff1e 	bl	8028968 <_strtol_r>
 8027b2c:	9b04      	ldr	r3, [sp, #16]
 8027b2e:	9e05      	ldr	r6, [sp, #20]
 8027b30:	1ac2      	subs	r2, r0, r3
 8027b32:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8027b36:	429e      	cmp	r6, r3
 8027b38:	bf28      	it	cs
 8027b3a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8027b3e:	490d      	ldr	r1, [pc, #52]	; (8027b74 <_scanf_float+0x400>)
 8027b40:	4630      	mov	r0, r6
 8027b42:	f000 f875 	bl	8027c30 <siprintf>
 8027b46:	e7d1      	b.n	8027aec <_scanf_float+0x378>
 8027b48:	f011 0f04 	tst.w	r1, #4
 8027b4c:	9903      	ldr	r1, [sp, #12]
 8027b4e:	600a      	str	r2, [r1, #0]
 8027b50:	d1db      	bne.n	8027b0a <_scanf_float+0x396>
 8027b52:	eeb4 0b40 	vcmp.f64	d0, d0
 8027b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027b5a:	681e      	ldr	r6, [r3, #0]
 8027b5c:	d705      	bvc.n	8027b6a <_scanf_float+0x3f6>
 8027b5e:	4806      	ldr	r0, [pc, #24]	; (8027b78 <_scanf_float+0x404>)
 8027b60:	f000 f81c 	bl	8027b9c <nanf>
 8027b64:	ed86 0a00 	vstr	s0, [r6]
 8027b68:	e7d2      	b.n	8027b10 <_scanf_float+0x39c>
 8027b6a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8027b6e:	e7f9      	b.n	8027b64 <_scanf_float+0x3f0>
 8027b70:	2500      	movs	r5, #0
 8027b72:	e640      	b.n	80277f6 <_scanf_float+0x82>
 8027b74:	0802f4e7 	.word	0x0802f4e7
 8027b78:	0802f49f 	.word	0x0802f49f

08027b7c <_sbrk_r>:
 8027b7c:	b538      	push	{r3, r4, r5, lr}
 8027b7e:	4d06      	ldr	r5, [pc, #24]	; (8027b98 <_sbrk_r+0x1c>)
 8027b80:	2300      	movs	r3, #0
 8027b82:	4604      	mov	r4, r0
 8027b84:	4608      	mov	r0, r1
 8027b86:	602b      	str	r3, [r5, #0]
 8027b88:	f7db f9f8 	bl	8002f7c <_sbrk>
 8027b8c:	1c43      	adds	r3, r0, #1
 8027b8e:	d102      	bne.n	8027b96 <_sbrk_r+0x1a>
 8027b90:	682b      	ldr	r3, [r5, #0]
 8027b92:	b103      	cbz	r3, 8027b96 <_sbrk_r+0x1a>
 8027b94:	6023      	str	r3, [r4, #0]
 8027b96:	bd38      	pop	{r3, r4, r5, pc}
 8027b98:	200571e0 	.word	0x200571e0

08027b9c <nanf>:
 8027b9c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8027ba4 <nanf+0x8>
 8027ba0:	4770      	bx	lr
 8027ba2:	bf00      	nop
 8027ba4:	7fc00000 	.word	0x7fc00000

08027ba8 <_raise_r>:
 8027ba8:	291f      	cmp	r1, #31
 8027baa:	b538      	push	{r3, r4, r5, lr}
 8027bac:	4604      	mov	r4, r0
 8027bae:	460d      	mov	r5, r1
 8027bb0:	d904      	bls.n	8027bbc <_raise_r+0x14>
 8027bb2:	2316      	movs	r3, #22
 8027bb4:	6003      	str	r3, [r0, #0]
 8027bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8027bba:	bd38      	pop	{r3, r4, r5, pc}
 8027bbc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8027bbe:	b112      	cbz	r2, 8027bc6 <_raise_r+0x1e>
 8027bc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8027bc4:	b94b      	cbnz	r3, 8027bda <_raise_r+0x32>
 8027bc6:	4620      	mov	r0, r4
 8027bc8:	f000 f830 	bl	8027c2c <_getpid_r>
 8027bcc:	462a      	mov	r2, r5
 8027bce:	4601      	mov	r1, r0
 8027bd0:	4620      	mov	r0, r4
 8027bd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8027bd6:	f000 b817 	b.w	8027c08 <_kill_r>
 8027bda:	2b01      	cmp	r3, #1
 8027bdc:	d00a      	beq.n	8027bf4 <_raise_r+0x4c>
 8027bde:	1c59      	adds	r1, r3, #1
 8027be0:	d103      	bne.n	8027bea <_raise_r+0x42>
 8027be2:	2316      	movs	r3, #22
 8027be4:	6003      	str	r3, [r0, #0]
 8027be6:	2001      	movs	r0, #1
 8027be8:	e7e7      	b.n	8027bba <_raise_r+0x12>
 8027bea:	2400      	movs	r4, #0
 8027bec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8027bf0:	4628      	mov	r0, r5
 8027bf2:	4798      	blx	r3
 8027bf4:	2000      	movs	r0, #0
 8027bf6:	e7e0      	b.n	8027bba <_raise_r+0x12>

08027bf8 <raise>:
 8027bf8:	4b02      	ldr	r3, [pc, #8]	; (8027c04 <raise+0xc>)
 8027bfa:	4601      	mov	r1, r0
 8027bfc:	6818      	ldr	r0, [r3, #0]
 8027bfe:	f7ff bfd3 	b.w	8027ba8 <_raise_r>
 8027c02:	bf00      	nop
 8027c04:	2000007c 	.word	0x2000007c

08027c08 <_kill_r>:
 8027c08:	b538      	push	{r3, r4, r5, lr}
 8027c0a:	4d07      	ldr	r5, [pc, #28]	; (8027c28 <_kill_r+0x20>)
 8027c0c:	2300      	movs	r3, #0
 8027c0e:	4604      	mov	r4, r0
 8027c10:	4608      	mov	r0, r1
 8027c12:	4611      	mov	r1, r2
 8027c14:	602b      	str	r3, [r5, #0]
 8027c16:	f7db f929 	bl	8002e6c <_kill>
 8027c1a:	1c43      	adds	r3, r0, #1
 8027c1c:	d102      	bne.n	8027c24 <_kill_r+0x1c>
 8027c1e:	682b      	ldr	r3, [r5, #0]
 8027c20:	b103      	cbz	r3, 8027c24 <_kill_r+0x1c>
 8027c22:	6023      	str	r3, [r4, #0]
 8027c24:	bd38      	pop	{r3, r4, r5, pc}
 8027c26:	bf00      	nop
 8027c28:	200571e0 	.word	0x200571e0

08027c2c <_getpid_r>:
 8027c2c:	f7db b916 	b.w	8002e5c <_getpid>

08027c30 <siprintf>:
 8027c30:	b40e      	push	{r1, r2, r3}
 8027c32:	b500      	push	{lr}
 8027c34:	b09c      	sub	sp, #112	; 0x70
 8027c36:	ab1d      	add	r3, sp, #116	; 0x74
 8027c38:	9002      	str	r0, [sp, #8]
 8027c3a:	9006      	str	r0, [sp, #24]
 8027c3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8027c40:	4809      	ldr	r0, [pc, #36]	; (8027c68 <siprintf+0x38>)
 8027c42:	9107      	str	r1, [sp, #28]
 8027c44:	9104      	str	r1, [sp, #16]
 8027c46:	4909      	ldr	r1, [pc, #36]	; (8027c6c <siprintf+0x3c>)
 8027c48:	f853 2b04 	ldr.w	r2, [r3], #4
 8027c4c:	9105      	str	r1, [sp, #20]
 8027c4e:	6800      	ldr	r0, [r0, #0]
 8027c50:	9301      	str	r3, [sp, #4]
 8027c52:	a902      	add	r1, sp, #8
 8027c54:	f003 f8d0 	bl	802adf8 <_svfiprintf_r>
 8027c58:	9b02      	ldr	r3, [sp, #8]
 8027c5a:	2200      	movs	r2, #0
 8027c5c:	701a      	strb	r2, [r3, #0]
 8027c5e:	b01c      	add	sp, #112	; 0x70
 8027c60:	f85d eb04 	ldr.w	lr, [sp], #4
 8027c64:	b003      	add	sp, #12
 8027c66:	4770      	bx	lr
 8027c68:	2000007c 	.word	0x2000007c
 8027c6c:	ffff0208 	.word	0xffff0208

08027c70 <sulp>:
 8027c70:	b570      	push	{r4, r5, r6, lr}
 8027c72:	4604      	mov	r4, r0
 8027c74:	460d      	mov	r5, r1
 8027c76:	4616      	mov	r6, r2
 8027c78:	ec45 4b10 	vmov	d0, r4, r5
 8027c7c:	f002 fedc 	bl	802aa38 <__ulp>
 8027c80:	b17e      	cbz	r6, 8027ca2 <sulp+0x32>
 8027c82:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8027c86:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8027c8a:	2b00      	cmp	r3, #0
 8027c8c:	dd09      	ble.n	8027ca2 <sulp+0x32>
 8027c8e:	051b      	lsls	r3, r3, #20
 8027c90:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8027c94:	2000      	movs	r0, #0
 8027c96:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8027c9a:	ec41 0b17 	vmov	d7, r0, r1
 8027c9e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8027ca2:	bd70      	pop	{r4, r5, r6, pc}
 8027ca4:	0000      	movs	r0, r0
	...

08027ca8 <_strtod_l>:
 8027ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027cac:	ed2d 8b0c 	vpush	{d8-d13}
 8027cb0:	b09d      	sub	sp, #116	; 0x74
 8027cb2:	461f      	mov	r7, r3
 8027cb4:	2300      	movs	r3, #0
 8027cb6:	9318      	str	r3, [sp, #96]	; 0x60
 8027cb8:	4ba6      	ldr	r3, [pc, #664]	; (8027f54 <_strtod_l+0x2ac>)
 8027cba:	9213      	str	r2, [sp, #76]	; 0x4c
 8027cbc:	681b      	ldr	r3, [r3, #0]
 8027cbe:	9308      	str	r3, [sp, #32]
 8027cc0:	4604      	mov	r4, r0
 8027cc2:	4618      	mov	r0, r3
 8027cc4:	468a      	mov	sl, r1
 8027cc6:	f7d8 fabb 	bl	8000240 <strlen>
 8027cca:	f04f 0800 	mov.w	r8, #0
 8027cce:	4605      	mov	r5, r0
 8027cd0:	f04f 0900 	mov.w	r9, #0
 8027cd4:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8027cd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027cda:	781a      	ldrb	r2, [r3, #0]
 8027cdc:	2a2b      	cmp	r2, #43	; 0x2b
 8027cde:	d04d      	beq.n	8027d7c <_strtod_l+0xd4>
 8027ce0:	d83a      	bhi.n	8027d58 <_strtod_l+0xb0>
 8027ce2:	2a0d      	cmp	r2, #13
 8027ce4:	d833      	bhi.n	8027d4e <_strtod_l+0xa6>
 8027ce6:	2a08      	cmp	r2, #8
 8027ce8:	d833      	bhi.n	8027d52 <_strtod_l+0xaa>
 8027cea:	2a00      	cmp	r2, #0
 8027cec:	d03d      	beq.n	8027d6a <_strtod_l+0xc2>
 8027cee:	2300      	movs	r3, #0
 8027cf0:	930b      	str	r3, [sp, #44]	; 0x2c
 8027cf2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8027cf4:	7833      	ldrb	r3, [r6, #0]
 8027cf6:	2b30      	cmp	r3, #48	; 0x30
 8027cf8:	f040 80b6 	bne.w	8027e68 <_strtod_l+0x1c0>
 8027cfc:	7873      	ldrb	r3, [r6, #1]
 8027cfe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8027d02:	2b58      	cmp	r3, #88	; 0x58
 8027d04:	d16d      	bne.n	8027de2 <_strtod_l+0x13a>
 8027d06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027d08:	9301      	str	r3, [sp, #4]
 8027d0a:	ab18      	add	r3, sp, #96	; 0x60
 8027d0c:	9702      	str	r7, [sp, #8]
 8027d0e:	9300      	str	r3, [sp, #0]
 8027d10:	4a91      	ldr	r2, [pc, #580]	; (8027f58 <_strtod_l+0x2b0>)
 8027d12:	ab19      	add	r3, sp, #100	; 0x64
 8027d14:	a917      	add	r1, sp, #92	; 0x5c
 8027d16:	4620      	mov	r0, r4
 8027d18:	f001 ff76 	bl	8029c08 <__gethex>
 8027d1c:	f010 0507 	ands.w	r5, r0, #7
 8027d20:	4607      	mov	r7, r0
 8027d22:	d005      	beq.n	8027d30 <_strtod_l+0x88>
 8027d24:	2d06      	cmp	r5, #6
 8027d26:	d12b      	bne.n	8027d80 <_strtod_l+0xd8>
 8027d28:	3601      	adds	r6, #1
 8027d2a:	2300      	movs	r3, #0
 8027d2c:	9617      	str	r6, [sp, #92]	; 0x5c
 8027d2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8027d30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027d32:	2b00      	cmp	r3, #0
 8027d34:	f040 856e 	bne.w	8028814 <_strtod_l+0xb6c>
 8027d38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027d3a:	b1e3      	cbz	r3, 8027d76 <_strtod_l+0xce>
 8027d3c:	ec49 8b17 	vmov	d7, r8, r9
 8027d40:	eeb1 0b47 	vneg.f64	d0, d7
 8027d44:	b01d      	add	sp, #116	; 0x74
 8027d46:	ecbd 8b0c 	vpop	{d8-d13}
 8027d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027d4e:	2a20      	cmp	r2, #32
 8027d50:	d1cd      	bne.n	8027cee <_strtod_l+0x46>
 8027d52:	3301      	adds	r3, #1
 8027d54:	9317      	str	r3, [sp, #92]	; 0x5c
 8027d56:	e7bf      	b.n	8027cd8 <_strtod_l+0x30>
 8027d58:	2a2d      	cmp	r2, #45	; 0x2d
 8027d5a:	d1c8      	bne.n	8027cee <_strtod_l+0x46>
 8027d5c:	2201      	movs	r2, #1
 8027d5e:	920b      	str	r2, [sp, #44]	; 0x2c
 8027d60:	1c5a      	adds	r2, r3, #1
 8027d62:	9217      	str	r2, [sp, #92]	; 0x5c
 8027d64:	785b      	ldrb	r3, [r3, #1]
 8027d66:	2b00      	cmp	r3, #0
 8027d68:	d1c3      	bne.n	8027cf2 <_strtod_l+0x4a>
 8027d6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027d6c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8027d70:	2b00      	cmp	r3, #0
 8027d72:	f040 854d 	bne.w	8028810 <_strtod_l+0xb68>
 8027d76:	ec49 8b10 	vmov	d0, r8, r9
 8027d7a:	e7e3      	b.n	8027d44 <_strtod_l+0x9c>
 8027d7c:	2200      	movs	r2, #0
 8027d7e:	e7ee      	b.n	8027d5e <_strtod_l+0xb6>
 8027d80:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8027d82:	b13a      	cbz	r2, 8027d94 <_strtod_l+0xec>
 8027d84:	2135      	movs	r1, #53	; 0x35
 8027d86:	a81a      	add	r0, sp, #104	; 0x68
 8027d88:	f002 ff62 	bl	802ac50 <__copybits>
 8027d8c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8027d8e:	4620      	mov	r0, r4
 8027d90:	f002 fb26 	bl	802a3e0 <_Bfree>
 8027d94:	3d01      	subs	r5, #1
 8027d96:	2d05      	cmp	r5, #5
 8027d98:	d807      	bhi.n	8027daa <_strtod_l+0x102>
 8027d9a:	e8df f005 	tbb	[pc, r5]
 8027d9e:	0b0e      	.short	0x0b0e
 8027da0:	030e1d18 	.word	0x030e1d18
 8027da4:	f04f 0900 	mov.w	r9, #0
 8027da8:	46c8      	mov	r8, r9
 8027daa:	073b      	lsls	r3, r7, #28
 8027dac:	d5c0      	bpl.n	8027d30 <_strtod_l+0x88>
 8027dae:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8027db2:	e7bd      	b.n	8027d30 <_strtod_l+0x88>
 8027db4:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8027db8:	e7f7      	b.n	8027daa <_strtod_l+0x102>
 8027dba:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 8027dbe:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8027dc0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8027dc4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8027dc8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8027dcc:	e7ed      	b.n	8027daa <_strtod_l+0x102>
 8027dce:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8027f5c <_strtod_l+0x2b4>
 8027dd2:	f04f 0800 	mov.w	r8, #0
 8027dd6:	e7e8      	b.n	8027daa <_strtod_l+0x102>
 8027dd8:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8027ddc:	f04f 38ff 	mov.w	r8, #4294967295
 8027de0:	e7e3      	b.n	8027daa <_strtod_l+0x102>
 8027de2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027de4:	1c5a      	adds	r2, r3, #1
 8027de6:	9217      	str	r2, [sp, #92]	; 0x5c
 8027de8:	785b      	ldrb	r3, [r3, #1]
 8027dea:	2b30      	cmp	r3, #48	; 0x30
 8027dec:	d0f9      	beq.n	8027de2 <_strtod_l+0x13a>
 8027dee:	2b00      	cmp	r3, #0
 8027df0:	d09e      	beq.n	8027d30 <_strtod_l+0x88>
 8027df2:	2301      	movs	r3, #1
 8027df4:	9306      	str	r3, [sp, #24]
 8027df6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027df8:	930c      	str	r3, [sp, #48]	; 0x30
 8027dfa:	2300      	movs	r3, #0
 8027dfc:	9304      	str	r3, [sp, #16]
 8027dfe:	930a      	str	r3, [sp, #40]	; 0x28
 8027e00:	461e      	mov	r6, r3
 8027e02:	220a      	movs	r2, #10
 8027e04:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8027e06:	f890 b000 	ldrb.w	fp, [r0]
 8027e0a:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 8027e0e:	b2d9      	uxtb	r1, r3
 8027e10:	2909      	cmp	r1, #9
 8027e12:	d92b      	bls.n	8027e6c <_strtod_l+0x1c4>
 8027e14:	9908      	ldr	r1, [sp, #32]
 8027e16:	462a      	mov	r2, r5
 8027e18:	f003 f939 	bl	802b08e <strncmp>
 8027e1c:	2800      	cmp	r0, #0
 8027e1e:	d035      	beq.n	8027e8c <_strtod_l+0x1e4>
 8027e20:	2000      	movs	r0, #0
 8027e22:	465a      	mov	r2, fp
 8027e24:	4633      	mov	r3, r6
 8027e26:	4683      	mov	fp, r0
 8027e28:	4601      	mov	r1, r0
 8027e2a:	2a65      	cmp	r2, #101	; 0x65
 8027e2c:	d001      	beq.n	8027e32 <_strtod_l+0x18a>
 8027e2e:	2a45      	cmp	r2, #69	; 0x45
 8027e30:	d118      	bne.n	8027e64 <_strtod_l+0x1bc>
 8027e32:	b91b      	cbnz	r3, 8027e3c <_strtod_l+0x194>
 8027e34:	9b06      	ldr	r3, [sp, #24]
 8027e36:	4303      	orrs	r3, r0
 8027e38:	d097      	beq.n	8027d6a <_strtod_l+0xc2>
 8027e3a:	2300      	movs	r3, #0
 8027e3c:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8027e40:	f10a 0201 	add.w	r2, sl, #1
 8027e44:	9217      	str	r2, [sp, #92]	; 0x5c
 8027e46:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8027e4a:	2a2b      	cmp	r2, #43	; 0x2b
 8027e4c:	d077      	beq.n	8027f3e <_strtod_l+0x296>
 8027e4e:	2a2d      	cmp	r2, #45	; 0x2d
 8027e50:	d07d      	beq.n	8027f4e <_strtod_l+0x2a6>
 8027e52:	f04f 0e00 	mov.w	lr, #0
 8027e56:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8027e5a:	2d09      	cmp	r5, #9
 8027e5c:	f240 8084 	bls.w	8027f68 <_strtod_l+0x2c0>
 8027e60:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8027e64:	2500      	movs	r5, #0
 8027e66:	e09f      	b.n	8027fa8 <_strtod_l+0x300>
 8027e68:	2300      	movs	r3, #0
 8027e6a:	e7c3      	b.n	8027df4 <_strtod_l+0x14c>
 8027e6c:	2e08      	cmp	r6, #8
 8027e6e:	bfd5      	itete	le
 8027e70:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8027e72:	9904      	ldrgt	r1, [sp, #16]
 8027e74:	fb02 3301 	mlale	r3, r2, r1, r3
 8027e78:	fb02 3301 	mlagt	r3, r2, r1, r3
 8027e7c:	f100 0001 	add.w	r0, r0, #1
 8027e80:	bfd4      	ite	le
 8027e82:	930a      	strle	r3, [sp, #40]	; 0x28
 8027e84:	9304      	strgt	r3, [sp, #16]
 8027e86:	3601      	adds	r6, #1
 8027e88:	9017      	str	r0, [sp, #92]	; 0x5c
 8027e8a:	e7bb      	b.n	8027e04 <_strtod_l+0x15c>
 8027e8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027e8e:	195a      	adds	r2, r3, r5
 8027e90:	9217      	str	r2, [sp, #92]	; 0x5c
 8027e92:	5d5a      	ldrb	r2, [r3, r5]
 8027e94:	b3ae      	cbz	r6, 8027f02 <_strtod_l+0x25a>
 8027e96:	4683      	mov	fp, r0
 8027e98:	4633      	mov	r3, r6
 8027e9a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8027e9e:	2909      	cmp	r1, #9
 8027ea0:	d912      	bls.n	8027ec8 <_strtod_l+0x220>
 8027ea2:	2101      	movs	r1, #1
 8027ea4:	e7c1      	b.n	8027e2a <_strtod_l+0x182>
 8027ea6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027ea8:	1c5a      	adds	r2, r3, #1
 8027eaa:	9217      	str	r2, [sp, #92]	; 0x5c
 8027eac:	785a      	ldrb	r2, [r3, #1]
 8027eae:	3001      	adds	r0, #1
 8027eb0:	2a30      	cmp	r2, #48	; 0x30
 8027eb2:	d0f8      	beq.n	8027ea6 <_strtod_l+0x1fe>
 8027eb4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8027eb8:	2b08      	cmp	r3, #8
 8027eba:	f200 84b0 	bhi.w	802881e <_strtod_l+0xb76>
 8027ebe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027ec0:	930c      	str	r3, [sp, #48]	; 0x30
 8027ec2:	4683      	mov	fp, r0
 8027ec4:	2000      	movs	r0, #0
 8027ec6:	4603      	mov	r3, r0
 8027ec8:	3a30      	subs	r2, #48	; 0x30
 8027eca:	f100 0101 	add.w	r1, r0, #1
 8027ece:	d012      	beq.n	8027ef6 <_strtod_l+0x24e>
 8027ed0:	448b      	add	fp, r1
 8027ed2:	eb00 0c03 	add.w	ip, r0, r3
 8027ed6:	4619      	mov	r1, r3
 8027ed8:	250a      	movs	r5, #10
 8027eda:	4561      	cmp	r1, ip
 8027edc:	d113      	bne.n	8027f06 <_strtod_l+0x25e>
 8027ede:	1819      	adds	r1, r3, r0
 8027ee0:	2908      	cmp	r1, #8
 8027ee2:	f103 0301 	add.w	r3, r3, #1
 8027ee6:	4403      	add	r3, r0
 8027ee8:	dc1d      	bgt.n	8027f26 <_strtod_l+0x27e>
 8027eea:	980a      	ldr	r0, [sp, #40]	; 0x28
 8027eec:	210a      	movs	r1, #10
 8027eee:	fb01 2200 	mla	r2, r1, r0, r2
 8027ef2:	920a      	str	r2, [sp, #40]	; 0x28
 8027ef4:	2100      	movs	r1, #0
 8027ef6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8027ef8:	1c50      	adds	r0, r2, #1
 8027efa:	9017      	str	r0, [sp, #92]	; 0x5c
 8027efc:	7852      	ldrb	r2, [r2, #1]
 8027efe:	4608      	mov	r0, r1
 8027f00:	e7cb      	b.n	8027e9a <_strtod_l+0x1f2>
 8027f02:	4630      	mov	r0, r6
 8027f04:	e7d4      	b.n	8027eb0 <_strtod_l+0x208>
 8027f06:	2908      	cmp	r1, #8
 8027f08:	dc04      	bgt.n	8027f14 <_strtod_l+0x26c>
 8027f0a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8027f0c:	436f      	muls	r7, r5
 8027f0e:	970a      	str	r7, [sp, #40]	; 0x28
 8027f10:	3101      	adds	r1, #1
 8027f12:	e7e2      	b.n	8027eda <_strtod_l+0x232>
 8027f14:	f101 0e01 	add.w	lr, r1, #1
 8027f18:	f1be 0f10 	cmp.w	lr, #16
 8027f1c:	bfde      	ittt	le
 8027f1e:	9f04      	ldrle	r7, [sp, #16]
 8027f20:	436f      	mulle	r7, r5
 8027f22:	9704      	strle	r7, [sp, #16]
 8027f24:	e7f4      	b.n	8027f10 <_strtod_l+0x268>
 8027f26:	2b10      	cmp	r3, #16
 8027f28:	bfdf      	itttt	le
 8027f2a:	9804      	ldrle	r0, [sp, #16]
 8027f2c:	210a      	movle	r1, #10
 8027f2e:	fb01 2200 	mlale	r2, r1, r0, r2
 8027f32:	9204      	strle	r2, [sp, #16]
 8027f34:	e7de      	b.n	8027ef4 <_strtod_l+0x24c>
 8027f36:	f04f 0b00 	mov.w	fp, #0
 8027f3a:	2101      	movs	r1, #1
 8027f3c:	e77a      	b.n	8027e34 <_strtod_l+0x18c>
 8027f3e:	f04f 0e00 	mov.w	lr, #0
 8027f42:	f10a 0202 	add.w	r2, sl, #2
 8027f46:	9217      	str	r2, [sp, #92]	; 0x5c
 8027f48:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8027f4c:	e783      	b.n	8027e56 <_strtod_l+0x1ae>
 8027f4e:	f04f 0e01 	mov.w	lr, #1
 8027f52:	e7f6      	b.n	8027f42 <_strtod_l+0x29a>
 8027f54:	0802f7a4 	.word	0x0802f7a4
 8027f58:	0802f4f0 	.word	0x0802f4f0
 8027f5c:	7ff00000 	.word	0x7ff00000
 8027f60:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8027f62:	1c55      	adds	r5, r2, #1
 8027f64:	9517      	str	r5, [sp, #92]	; 0x5c
 8027f66:	7852      	ldrb	r2, [r2, #1]
 8027f68:	2a30      	cmp	r2, #48	; 0x30
 8027f6a:	d0f9      	beq.n	8027f60 <_strtod_l+0x2b8>
 8027f6c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8027f70:	2d08      	cmp	r5, #8
 8027f72:	f63f af77 	bhi.w	8027e64 <_strtod_l+0x1bc>
 8027f76:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8027f7a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8027f7c:	9208      	str	r2, [sp, #32]
 8027f7e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8027f80:	1c55      	adds	r5, r2, #1
 8027f82:	9517      	str	r5, [sp, #92]	; 0x5c
 8027f84:	7852      	ldrb	r2, [r2, #1]
 8027f86:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8027f8a:	2f09      	cmp	r7, #9
 8027f8c:	d937      	bls.n	8027ffe <_strtod_l+0x356>
 8027f8e:	9f08      	ldr	r7, [sp, #32]
 8027f90:	1bed      	subs	r5, r5, r7
 8027f92:	2d08      	cmp	r5, #8
 8027f94:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8027f98:	dc02      	bgt.n	8027fa0 <_strtod_l+0x2f8>
 8027f9a:	4565      	cmp	r5, ip
 8027f9c:	bfa8      	it	ge
 8027f9e:	4665      	movge	r5, ip
 8027fa0:	f1be 0f00 	cmp.w	lr, #0
 8027fa4:	d000      	beq.n	8027fa8 <_strtod_l+0x300>
 8027fa6:	426d      	negs	r5, r5
 8027fa8:	2b00      	cmp	r3, #0
 8027faa:	d14f      	bne.n	802804c <_strtod_l+0x3a4>
 8027fac:	9b06      	ldr	r3, [sp, #24]
 8027fae:	4303      	orrs	r3, r0
 8027fb0:	f47f aebe 	bne.w	8027d30 <_strtod_l+0x88>
 8027fb4:	2900      	cmp	r1, #0
 8027fb6:	f47f aed8 	bne.w	8027d6a <_strtod_l+0xc2>
 8027fba:	2a69      	cmp	r2, #105	; 0x69
 8027fbc:	d027      	beq.n	802800e <_strtod_l+0x366>
 8027fbe:	dc24      	bgt.n	802800a <_strtod_l+0x362>
 8027fc0:	2a49      	cmp	r2, #73	; 0x49
 8027fc2:	d024      	beq.n	802800e <_strtod_l+0x366>
 8027fc4:	2a4e      	cmp	r2, #78	; 0x4e
 8027fc6:	f47f aed0 	bne.w	8027d6a <_strtod_l+0xc2>
 8027fca:	499b      	ldr	r1, [pc, #620]	; (8028238 <_strtod_l+0x590>)
 8027fcc:	a817      	add	r0, sp, #92	; 0x5c
 8027fce:	f002 f873 	bl	802a0b8 <__match>
 8027fd2:	2800      	cmp	r0, #0
 8027fd4:	f43f aec9 	beq.w	8027d6a <_strtod_l+0xc2>
 8027fd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027fda:	781b      	ldrb	r3, [r3, #0]
 8027fdc:	2b28      	cmp	r3, #40	; 0x28
 8027fde:	d12d      	bne.n	802803c <_strtod_l+0x394>
 8027fe0:	4996      	ldr	r1, [pc, #600]	; (802823c <_strtod_l+0x594>)
 8027fe2:	aa1a      	add	r2, sp, #104	; 0x68
 8027fe4:	a817      	add	r0, sp, #92	; 0x5c
 8027fe6:	f002 f87b 	bl	802a0e0 <__hexnan>
 8027fea:	2805      	cmp	r0, #5
 8027fec:	d126      	bne.n	802803c <_strtod_l+0x394>
 8027fee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8027ff0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8027ff4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8027ff8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8027ffc:	e698      	b.n	8027d30 <_strtod_l+0x88>
 8027ffe:	250a      	movs	r5, #10
 8028000:	fb05 250c 	mla	r5, r5, ip, r2
 8028004:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8028008:	e7b9      	b.n	8027f7e <_strtod_l+0x2d6>
 802800a:	2a6e      	cmp	r2, #110	; 0x6e
 802800c:	e7db      	b.n	8027fc6 <_strtod_l+0x31e>
 802800e:	498c      	ldr	r1, [pc, #560]	; (8028240 <_strtod_l+0x598>)
 8028010:	a817      	add	r0, sp, #92	; 0x5c
 8028012:	f002 f851 	bl	802a0b8 <__match>
 8028016:	2800      	cmp	r0, #0
 8028018:	f43f aea7 	beq.w	8027d6a <_strtod_l+0xc2>
 802801c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802801e:	4989      	ldr	r1, [pc, #548]	; (8028244 <_strtod_l+0x59c>)
 8028020:	3b01      	subs	r3, #1
 8028022:	a817      	add	r0, sp, #92	; 0x5c
 8028024:	9317      	str	r3, [sp, #92]	; 0x5c
 8028026:	f002 f847 	bl	802a0b8 <__match>
 802802a:	b910      	cbnz	r0, 8028032 <_strtod_l+0x38a>
 802802c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802802e:	3301      	adds	r3, #1
 8028030:	9317      	str	r3, [sp, #92]	; 0x5c
 8028032:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8028258 <_strtod_l+0x5b0>
 8028036:	f04f 0800 	mov.w	r8, #0
 802803a:	e679      	b.n	8027d30 <_strtod_l+0x88>
 802803c:	4882      	ldr	r0, [pc, #520]	; (8028248 <_strtod_l+0x5a0>)
 802803e:	f002 ffdb 	bl	802aff8 <nan>
 8028042:	ed8d 0b04 	vstr	d0, [sp, #16]
 8028046:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 802804a:	e671      	b.n	8027d30 <_strtod_l+0x88>
 802804c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8028050:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8028054:	eba5 020b 	sub.w	r2, r5, fp
 8028058:	2e00      	cmp	r6, #0
 802805a:	bf08      	it	eq
 802805c:	461e      	moveq	r6, r3
 802805e:	2b10      	cmp	r3, #16
 8028060:	ed8d 7b08 	vstr	d7, [sp, #32]
 8028064:	9206      	str	r2, [sp, #24]
 8028066:	461a      	mov	r2, r3
 8028068:	bfa8      	it	ge
 802806a:	2210      	movge	r2, #16
 802806c:	2b09      	cmp	r3, #9
 802806e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8028072:	dd0e      	ble.n	8028092 <_strtod_l+0x3ea>
 8028074:	4975      	ldr	r1, [pc, #468]	; (802824c <_strtod_l+0x5a4>)
 8028076:	eddd 7a04 	vldr	s15, [sp, #16]
 802807a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 802807e:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8028082:	ed9d 5b08 	vldr	d5, [sp, #32]
 8028086:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 802808a:	eea5 7b06 	vfma.f64	d7, d5, d6
 802808e:	ec59 8b17 	vmov	r8, r9, d7
 8028092:	2b0f      	cmp	r3, #15
 8028094:	dc37      	bgt.n	8028106 <_strtod_l+0x45e>
 8028096:	9906      	ldr	r1, [sp, #24]
 8028098:	2900      	cmp	r1, #0
 802809a:	f43f ae49 	beq.w	8027d30 <_strtod_l+0x88>
 802809e:	dd23      	ble.n	80280e8 <_strtod_l+0x440>
 80280a0:	2916      	cmp	r1, #22
 80280a2:	dc0b      	bgt.n	80280bc <_strtod_l+0x414>
 80280a4:	4b69      	ldr	r3, [pc, #420]	; (802824c <_strtod_l+0x5a4>)
 80280a6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80280aa:	ed93 7b00 	vldr	d7, [r3]
 80280ae:	ec49 8b16 	vmov	d6, r8, r9
 80280b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80280b6:	ec59 8b17 	vmov	r8, r9, d7
 80280ba:	e639      	b.n	8027d30 <_strtod_l+0x88>
 80280bc:	9806      	ldr	r0, [sp, #24]
 80280be:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80280c2:	4281      	cmp	r1, r0
 80280c4:	db1f      	blt.n	8028106 <_strtod_l+0x45e>
 80280c6:	4a61      	ldr	r2, [pc, #388]	; (802824c <_strtod_l+0x5a4>)
 80280c8:	f1c3 030f 	rsb	r3, r3, #15
 80280cc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80280d0:	ed91 7b00 	vldr	d7, [r1]
 80280d4:	ec49 8b16 	vmov	d6, r8, r9
 80280d8:	1ac3      	subs	r3, r0, r3
 80280da:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80280de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80280e2:	ed92 6b00 	vldr	d6, [r2]
 80280e6:	e7e4      	b.n	80280b2 <_strtod_l+0x40a>
 80280e8:	9906      	ldr	r1, [sp, #24]
 80280ea:	3116      	adds	r1, #22
 80280ec:	db0b      	blt.n	8028106 <_strtod_l+0x45e>
 80280ee:	4b57      	ldr	r3, [pc, #348]	; (802824c <_strtod_l+0x5a4>)
 80280f0:	ebab 0505 	sub.w	r5, fp, r5
 80280f4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80280f8:	ed95 7b00 	vldr	d7, [r5]
 80280fc:	ec49 8b16 	vmov	d6, r8, r9
 8028100:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8028104:	e7d7      	b.n	80280b6 <_strtod_l+0x40e>
 8028106:	9906      	ldr	r1, [sp, #24]
 8028108:	1a9a      	subs	r2, r3, r2
 802810a:	440a      	add	r2, r1
 802810c:	2a00      	cmp	r2, #0
 802810e:	dd74      	ble.n	80281fa <_strtod_l+0x552>
 8028110:	f012 000f 	ands.w	r0, r2, #15
 8028114:	d00a      	beq.n	802812c <_strtod_l+0x484>
 8028116:	494d      	ldr	r1, [pc, #308]	; (802824c <_strtod_l+0x5a4>)
 8028118:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 802811c:	ed91 7b00 	vldr	d7, [r1]
 8028120:	ec49 8b16 	vmov	d6, r8, r9
 8028124:	ee27 7b06 	vmul.f64	d7, d7, d6
 8028128:	ec59 8b17 	vmov	r8, r9, d7
 802812c:	f032 020f 	bics.w	r2, r2, #15
 8028130:	d04f      	beq.n	80281d2 <_strtod_l+0x52a>
 8028132:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8028136:	dd22      	ble.n	802817e <_strtod_l+0x4d6>
 8028138:	2500      	movs	r5, #0
 802813a:	462e      	mov	r6, r5
 802813c:	950a      	str	r5, [sp, #40]	; 0x28
 802813e:	462f      	mov	r7, r5
 8028140:	2322      	movs	r3, #34	; 0x22
 8028142:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8028258 <_strtod_l+0x5b0>
 8028146:	6023      	str	r3, [r4, #0]
 8028148:	f04f 0800 	mov.w	r8, #0
 802814c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802814e:	2b00      	cmp	r3, #0
 8028150:	f43f adee 	beq.w	8027d30 <_strtod_l+0x88>
 8028154:	9918      	ldr	r1, [sp, #96]	; 0x60
 8028156:	4620      	mov	r0, r4
 8028158:	f002 f942 	bl	802a3e0 <_Bfree>
 802815c:	4639      	mov	r1, r7
 802815e:	4620      	mov	r0, r4
 8028160:	f002 f93e 	bl	802a3e0 <_Bfree>
 8028164:	4631      	mov	r1, r6
 8028166:	4620      	mov	r0, r4
 8028168:	f002 f93a 	bl	802a3e0 <_Bfree>
 802816c:	990a      	ldr	r1, [sp, #40]	; 0x28
 802816e:	4620      	mov	r0, r4
 8028170:	f002 f936 	bl	802a3e0 <_Bfree>
 8028174:	4629      	mov	r1, r5
 8028176:	4620      	mov	r0, r4
 8028178:	f002 f932 	bl	802a3e0 <_Bfree>
 802817c:	e5d8      	b.n	8027d30 <_strtod_l+0x88>
 802817e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8028182:	2000      	movs	r0, #0
 8028184:	4f32      	ldr	r7, [pc, #200]	; (8028250 <_strtod_l+0x5a8>)
 8028186:	1112      	asrs	r2, r2, #4
 8028188:	4601      	mov	r1, r0
 802818a:	2a01      	cmp	r2, #1
 802818c:	dc24      	bgt.n	80281d8 <_strtod_l+0x530>
 802818e:	b108      	cbz	r0, 8028194 <_strtod_l+0x4ec>
 8028190:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8028194:	4a2e      	ldr	r2, [pc, #184]	; (8028250 <_strtod_l+0x5a8>)
 8028196:	482f      	ldr	r0, [pc, #188]	; (8028254 <_strtod_l+0x5ac>)
 8028198:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 802819c:	ed91 7b00 	vldr	d7, [r1]
 80281a0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80281a4:	ec49 8b16 	vmov	d6, r8, r9
 80281a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80281ac:	ed8d 7b04 	vstr	d7, [sp, #16]
 80281b0:	9905      	ldr	r1, [sp, #20]
 80281b2:	4a29      	ldr	r2, [pc, #164]	; (8028258 <_strtod_l+0x5b0>)
 80281b4:	400a      	ands	r2, r1
 80281b6:	4282      	cmp	r2, r0
 80281b8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80281bc:	d8bc      	bhi.n	8028138 <_strtod_l+0x490>
 80281be:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80281c2:	4282      	cmp	r2, r0
 80281c4:	bf86      	itte	hi
 80281c6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 802825c <_strtod_l+0x5b4>
 80281ca:	f04f 38ff 	movhi.w	r8, #4294967295
 80281ce:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 80281d2:	2200      	movs	r2, #0
 80281d4:	9204      	str	r2, [sp, #16]
 80281d6:	e07f      	b.n	80282d8 <_strtod_l+0x630>
 80281d8:	f012 0f01 	tst.w	r2, #1
 80281dc:	d00a      	beq.n	80281f4 <_strtod_l+0x54c>
 80281de:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 80281e2:	ed90 7b00 	vldr	d7, [r0]
 80281e6:	ed9d 6b04 	vldr	d6, [sp, #16]
 80281ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 80281ee:	ed8d 7b04 	vstr	d7, [sp, #16]
 80281f2:	2001      	movs	r0, #1
 80281f4:	3101      	adds	r1, #1
 80281f6:	1052      	asrs	r2, r2, #1
 80281f8:	e7c7      	b.n	802818a <_strtod_l+0x4e2>
 80281fa:	d0ea      	beq.n	80281d2 <_strtod_l+0x52a>
 80281fc:	4252      	negs	r2, r2
 80281fe:	f012 000f 	ands.w	r0, r2, #15
 8028202:	d00a      	beq.n	802821a <_strtod_l+0x572>
 8028204:	4911      	ldr	r1, [pc, #68]	; (802824c <_strtod_l+0x5a4>)
 8028206:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 802820a:	ed91 7b00 	vldr	d7, [r1]
 802820e:	ec49 8b16 	vmov	d6, r8, r9
 8028212:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8028216:	ec59 8b17 	vmov	r8, r9, d7
 802821a:	1112      	asrs	r2, r2, #4
 802821c:	d0d9      	beq.n	80281d2 <_strtod_l+0x52a>
 802821e:	2a1f      	cmp	r2, #31
 8028220:	dd1e      	ble.n	8028260 <_strtod_l+0x5b8>
 8028222:	2500      	movs	r5, #0
 8028224:	462e      	mov	r6, r5
 8028226:	950a      	str	r5, [sp, #40]	; 0x28
 8028228:	462f      	mov	r7, r5
 802822a:	2322      	movs	r3, #34	; 0x22
 802822c:	f04f 0800 	mov.w	r8, #0
 8028230:	f04f 0900 	mov.w	r9, #0
 8028234:	6023      	str	r3, [r4, #0]
 8028236:	e789      	b.n	802814c <_strtod_l+0x4a4>
 8028238:	0802f4c2 	.word	0x0802f4c2
 802823c:	0802f504 	.word	0x0802f504
 8028240:	0802f4ba 	.word	0x0802f4ba
 8028244:	0802f644 	.word	0x0802f644
 8028248:	0802f49f 	.word	0x0802f49f
 802824c:	0802f840 	.word	0x0802f840
 8028250:	0802f818 	.word	0x0802f818
 8028254:	7ca00000 	.word	0x7ca00000
 8028258:	7ff00000 	.word	0x7ff00000
 802825c:	7fefffff 	.word	0x7fefffff
 8028260:	f012 0110 	ands.w	r1, r2, #16
 8028264:	bf18      	it	ne
 8028266:	216a      	movne	r1, #106	; 0x6a
 8028268:	e9cd 8908 	strd	r8, r9, [sp, #32]
 802826c:	9104      	str	r1, [sp, #16]
 802826e:	49c0      	ldr	r1, [pc, #768]	; (8028570 <_strtod_l+0x8c8>)
 8028270:	2000      	movs	r0, #0
 8028272:	07d7      	lsls	r7, r2, #31
 8028274:	d508      	bpl.n	8028288 <_strtod_l+0x5e0>
 8028276:	ed9d 6b08 	vldr	d6, [sp, #32]
 802827a:	ed91 7b00 	vldr	d7, [r1]
 802827e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8028282:	ed8d 7b08 	vstr	d7, [sp, #32]
 8028286:	2001      	movs	r0, #1
 8028288:	1052      	asrs	r2, r2, #1
 802828a:	f101 0108 	add.w	r1, r1, #8
 802828e:	d1f0      	bne.n	8028272 <_strtod_l+0x5ca>
 8028290:	b108      	cbz	r0, 8028296 <_strtod_l+0x5ee>
 8028292:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8028296:	9a04      	ldr	r2, [sp, #16]
 8028298:	b1ba      	cbz	r2, 80282ca <_strtod_l+0x622>
 802829a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 802829e:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 80282a2:	2a00      	cmp	r2, #0
 80282a4:	4649      	mov	r1, r9
 80282a6:	dd10      	ble.n	80282ca <_strtod_l+0x622>
 80282a8:	2a1f      	cmp	r2, #31
 80282aa:	f340 8132 	ble.w	8028512 <_strtod_l+0x86a>
 80282ae:	2a34      	cmp	r2, #52	; 0x34
 80282b0:	bfde      	ittt	le
 80282b2:	3a20      	suble	r2, #32
 80282b4:	f04f 30ff 	movle.w	r0, #4294967295
 80282b8:	fa00 f202 	lslle.w	r2, r0, r2
 80282bc:	f04f 0800 	mov.w	r8, #0
 80282c0:	bfcc      	ite	gt
 80282c2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80282c6:	ea02 0901 	andle.w	r9, r2, r1
 80282ca:	ec49 8b17 	vmov	d7, r8, r9
 80282ce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80282d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80282d6:	d0a4      	beq.n	8028222 <_strtod_l+0x57a>
 80282d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80282da:	9200      	str	r2, [sp, #0]
 80282dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80282de:	4632      	mov	r2, r6
 80282e0:	4620      	mov	r0, r4
 80282e2:	f002 f8e9 	bl	802a4b8 <__s2b>
 80282e6:	900a      	str	r0, [sp, #40]	; 0x28
 80282e8:	2800      	cmp	r0, #0
 80282ea:	f43f af25 	beq.w	8028138 <_strtod_l+0x490>
 80282ee:	9b06      	ldr	r3, [sp, #24]
 80282f0:	ebab 0505 	sub.w	r5, fp, r5
 80282f4:	2b00      	cmp	r3, #0
 80282f6:	bfb4      	ite	lt
 80282f8:	462b      	movlt	r3, r5
 80282fa:	2300      	movge	r3, #0
 80282fc:	930c      	str	r3, [sp, #48]	; 0x30
 80282fe:	9b06      	ldr	r3, [sp, #24]
 8028300:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8028558 <_strtod_l+0x8b0>
 8028304:	ed9f ab96 	vldr	d10, [pc, #600]	; 8028560 <_strtod_l+0x8b8>
 8028308:	ed9f bb97 	vldr	d11, [pc, #604]	; 8028568 <_strtod_l+0x8c0>
 802830c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8028310:	2500      	movs	r5, #0
 8028312:	9312      	str	r3, [sp, #72]	; 0x48
 8028314:	462e      	mov	r6, r5
 8028316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028318:	4620      	mov	r0, r4
 802831a:	6859      	ldr	r1, [r3, #4]
 802831c:	f002 f820 	bl	802a360 <_Balloc>
 8028320:	4607      	mov	r7, r0
 8028322:	2800      	cmp	r0, #0
 8028324:	f43f af0c 	beq.w	8028140 <_strtod_l+0x498>
 8028328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802832a:	691a      	ldr	r2, [r3, #16]
 802832c:	3202      	adds	r2, #2
 802832e:	f103 010c 	add.w	r1, r3, #12
 8028332:	0092      	lsls	r2, r2, #2
 8028334:	300c      	adds	r0, #12
 8028336:	f7fe fbc1 	bl	8026abc <memcpy>
 802833a:	ec49 8b10 	vmov	d0, r8, r9
 802833e:	aa1a      	add	r2, sp, #104	; 0x68
 8028340:	a919      	add	r1, sp, #100	; 0x64
 8028342:	4620      	mov	r0, r4
 8028344:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8028348:	f002 fbf2 	bl	802ab30 <__d2b>
 802834c:	9018      	str	r0, [sp, #96]	; 0x60
 802834e:	2800      	cmp	r0, #0
 8028350:	f43f aef6 	beq.w	8028140 <_strtod_l+0x498>
 8028354:	2101      	movs	r1, #1
 8028356:	4620      	mov	r0, r4
 8028358:	f002 f948 	bl	802a5ec <__i2b>
 802835c:	4606      	mov	r6, r0
 802835e:	2800      	cmp	r0, #0
 8028360:	f43f aeee 	beq.w	8028140 <_strtod_l+0x498>
 8028364:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8028366:	991a      	ldr	r1, [sp, #104]	; 0x68
 8028368:	2b00      	cmp	r3, #0
 802836a:	bfab      	itete	ge
 802836c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 802836e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8028370:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 8028374:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8028378:	bfac      	ite	ge
 802837a:	eb03 0b02 	addge.w	fp, r3, r2
 802837e:	eba2 0a03 	sublt.w	sl, r2, r3
 8028382:	9a04      	ldr	r2, [sp, #16]
 8028384:	1a9b      	subs	r3, r3, r2
 8028386:	440b      	add	r3, r1
 8028388:	4a7a      	ldr	r2, [pc, #488]	; (8028574 <_strtod_l+0x8cc>)
 802838a:	3b01      	subs	r3, #1
 802838c:	4293      	cmp	r3, r2
 802838e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8028392:	f280 80d1 	bge.w	8028538 <_strtod_l+0x890>
 8028396:	1ad2      	subs	r2, r2, r3
 8028398:	2a1f      	cmp	r2, #31
 802839a:	eba1 0102 	sub.w	r1, r1, r2
 802839e:	f04f 0001 	mov.w	r0, #1
 80283a2:	f300 80bd 	bgt.w	8028520 <_strtod_l+0x878>
 80283a6:	fa00 f302 	lsl.w	r3, r0, r2
 80283aa:	930e      	str	r3, [sp, #56]	; 0x38
 80283ac:	2300      	movs	r3, #0
 80283ae:	930d      	str	r3, [sp, #52]	; 0x34
 80283b0:	eb0b 0301 	add.w	r3, fp, r1
 80283b4:	9a04      	ldr	r2, [sp, #16]
 80283b6:	459b      	cmp	fp, r3
 80283b8:	448a      	add	sl, r1
 80283ba:	4492      	add	sl, r2
 80283bc:	465a      	mov	r2, fp
 80283be:	bfa8      	it	ge
 80283c0:	461a      	movge	r2, r3
 80283c2:	4552      	cmp	r2, sl
 80283c4:	bfa8      	it	ge
 80283c6:	4652      	movge	r2, sl
 80283c8:	2a00      	cmp	r2, #0
 80283ca:	bfc2      	ittt	gt
 80283cc:	1a9b      	subgt	r3, r3, r2
 80283ce:	ebaa 0a02 	subgt.w	sl, sl, r2
 80283d2:	ebab 0b02 	subgt.w	fp, fp, r2
 80283d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80283d8:	2a00      	cmp	r2, #0
 80283da:	dd18      	ble.n	802840e <_strtod_l+0x766>
 80283dc:	4631      	mov	r1, r6
 80283de:	4620      	mov	r0, r4
 80283e0:	9315      	str	r3, [sp, #84]	; 0x54
 80283e2:	f002 f9bf 	bl	802a764 <__pow5mult>
 80283e6:	4606      	mov	r6, r0
 80283e8:	2800      	cmp	r0, #0
 80283ea:	f43f aea9 	beq.w	8028140 <_strtod_l+0x498>
 80283ee:	4601      	mov	r1, r0
 80283f0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80283f2:	4620      	mov	r0, r4
 80283f4:	f002 f910 	bl	802a618 <__multiply>
 80283f8:	9014      	str	r0, [sp, #80]	; 0x50
 80283fa:	2800      	cmp	r0, #0
 80283fc:	f43f aea0 	beq.w	8028140 <_strtod_l+0x498>
 8028400:	9918      	ldr	r1, [sp, #96]	; 0x60
 8028402:	4620      	mov	r0, r4
 8028404:	f001 ffec 	bl	802a3e0 <_Bfree>
 8028408:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802840a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802840c:	9218      	str	r2, [sp, #96]	; 0x60
 802840e:	2b00      	cmp	r3, #0
 8028410:	f300 8097 	bgt.w	8028542 <_strtod_l+0x89a>
 8028414:	9b06      	ldr	r3, [sp, #24]
 8028416:	2b00      	cmp	r3, #0
 8028418:	dd08      	ble.n	802842c <_strtod_l+0x784>
 802841a:	4639      	mov	r1, r7
 802841c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802841e:	4620      	mov	r0, r4
 8028420:	f002 f9a0 	bl	802a764 <__pow5mult>
 8028424:	4607      	mov	r7, r0
 8028426:	2800      	cmp	r0, #0
 8028428:	f43f ae8a 	beq.w	8028140 <_strtod_l+0x498>
 802842c:	f1ba 0f00 	cmp.w	sl, #0
 8028430:	dd08      	ble.n	8028444 <_strtod_l+0x79c>
 8028432:	4639      	mov	r1, r7
 8028434:	4652      	mov	r2, sl
 8028436:	4620      	mov	r0, r4
 8028438:	f002 f9ee 	bl	802a818 <__lshift>
 802843c:	4607      	mov	r7, r0
 802843e:	2800      	cmp	r0, #0
 8028440:	f43f ae7e 	beq.w	8028140 <_strtod_l+0x498>
 8028444:	f1bb 0f00 	cmp.w	fp, #0
 8028448:	dd08      	ble.n	802845c <_strtod_l+0x7b4>
 802844a:	4631      	mov	r1, r6
 802844c:	465a      	mov	r2, fp
 802844e:	4620      	mov	r0, r4
 8028450:	f002 f9e2 	bl	802a818 <__lshift>
 8028454:	4606      	mov	r6, r0
 8028456:	2800      	cmp	r0, #0
 8028458:	f43f ae72 	beq.w	8028140 <_strtod_l+0x498>
 802845c:	9918      	ldr	r1, [sp, #96]	; 0x60
 802845e:	463a      	mov	r2, r7
 8028460:	4620      	mov	r0, r4
 8028462:	f002 fa61 	bl	802a928 <__mdiff>
 8028466:	4605      	mov	r5, r0
 8028468:	2800      	cmp	r0, #0
 802846a:	f43f ae69 	beq.w	8028140 <_strtod_l+0x498>
 802846e:	2300      	movs	r3, #0
 8028470:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8028474:	60c3      	str	r3, [r0, #12]
 8028476:	4631      	mov	r1, r6
 8028478:	f002 fa3a 	bl	802a8f0 <__mcmp>
 802847c:	2800      	cmp	r0, #0
 802847e:	da7f      	bge.n	8028580 <_strtod_l+0x8d8>
 8028480:	ea5a 0308 	orrs.w	r3, sl, r8
 8028484:	f040 80a5 	bne.w	80285d2 <_strtod_l+0x92a>
 8028488:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802848c:	2b00      	cmp	r3, #0
 802848e:	f040 80a0 	bne.w	80285d2 <_strtod_l+0x92a>
 8028492:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8028496:	0d1b      	lsrs	r3, r3, #20
 8028498:	051b      	lsls	r3, r3, #20
 802849a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 802849e:	f240 8098 	bls.w	80285d2 <_strtod_l+0x92a>
 80284a2:	696b      	ldr	r3, [r5, #20]
 80284a4:	b91b      	cbnz	r3, 80284ae <_strtod_l+0x806>
 80284a6:	692b      	ldr	r3, [r5, #16]
 80284a8:	2b01      	cmp	r3, #1
 80284aa:	f340 8092 	ble.w	80285d2 <_strtod_l+0x92a>
 80284ae:	4629      	mov	r1, r5
 80284b0:	2201      	movs	r2, #1
 80284b2:	4620      	mov	r0, r4
 80284b4:	f002 f9b0 	bl	802a818 <__lshift>
 80284b8:	4631      	mov	r1, r6
 80284ba:	4605      	mov	r5, r0
 80284bc:	f002 fa18 	bl	802a8f0 <__mcmp>
 80284c0:	2800      	cmp	r0, #0
 80284c2:	f340 8086 	ble.w	80285d2 <_strtod_l+0x92a>
 80284c6:	9904      	ldr	r1, [sp, #16]
 80284c8:	4a2b      	ldr	r2, [pc, #172]	; (8028578 <_strtod_l+0x8d0>)
 80284ca:	464b      	mov	r3, r9
 80284cc:	2900      	cmp	r1, #0
 80284ce:	f000 80a1 	beq.w	8028614 <_strtod_l+0x96c>
 80284d2:	ea02 0109 	and.w	r1, r2, r9
 80284d6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80284da:	f300 809b 	bgt.w	8028614 <_strtod_l+0x96c>
 80284de:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80284e2:	f77f aea2 	ble.w	802822a <_strtod_l+0x582>
 80284e6:	4a25      	ldr	r2, [pc, #148]	; (802857c <_strtod_l+0x8d4>)
 80284e8:	2300      	movs	r3, #0
 80284ea:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 80284ee:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 80284f2:	ec49 8b17 	vmov	d7, r8, r9
 80284f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80284fa:	ed8d 7b04 	vstr	d7, [sp, #16]
 80284fe:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8028502:	4313      	orrs	r3, r2
 8028504:	bf08      	it	eq
 8028506:	2322      	moveq	r3, #34	; 0x22
 8028508:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 802850c:	bf08      	it	eq
 802850e:	6023      	streq	r3, [r4, #0]
 8028510:	e620      	b.n	8028154 <_strtod_l+0x4ac>
 8028512:	f04f 31ff 	mov.w	r1, #4294967295
 8028516:	fa01 f202 	lsl.w	r2, r1, r2
 802851a:	ea02 0808 	and.w	r8, r2, r8
 802851e:	e6d4      	b.n	80282ca <_strtod_l+0x622>
 8028520:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8028524:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8028528:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 802852c:	33e2      	adds	r3, #226	; 0xe2
 802852e:	fa00 f303 	lsl.w	r3, r0, r3
 8028532:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 8028536:	e73b      	b.n	80283b0 <_strtod_l+0x708>
 8028538:	2000      	movs	r0, #0
 802853a:	2301      	movs	r3, #1
 802853c:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8028540:	e736      	b.n	80283b0 <_strtod_l+0x708>
 8028542:	9918      	ldr	r1, [sp, #96]	; 0x60
 8028544:	461a      	mov	r2, r3
 8028546:	4620      	mov	r0, r4
 8028548:	f002 f966 	bl	802a818 <__lshift>
 802854c:	9018      	str	r0, [sp, #96]	; 0x60
 802854e:	2800      	cmp	r0, #0
 8028550:	f47f af60 	bne.w	8028414 <_strtod_l+0x76c>
 8028554:	e5f4      	b.n	8028140 <_strtod_l+0x498>
 8028556:	bf00      	nop
 8028558:	94a03595 	.word	0x94a03595
 802855c:	3fcfffff 	.word	0x3fcfffff
 8028560:	94a03595 	.word	0x94a03595
 8028564:	3fdfffff 	.word	0x3fdfffff
 8028568:	35afe535 	.word	0x35afe535
 802856c:	3fe00000 	.word	0x3fe00000
 8028570:	0802f518 	.word	0x0802f518
 8028574:	fffffc02 	.word	0xfffffc02
 8028578:	7ff00000 	.word	0x7ff00000
 802857c:	39500000 	.word	0x39500000
 8028580:	46cb      	mov	fp, r9
 8028582:	d165      	bne.n	8028650 <_strtod_l+0x9a8>
 8028584:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8028588:	f1ba 0f00 	cmp.w	sl, #0
 802858c:	d02a      	beq.n	80285e4 <_strtod_l+0x93c>
 802858e:	4aaa      	ldr	r2, [pc, #680]	; (8028838 <_strtod_l+0xb90>)
 8028590:	4293      	cmp	r3, r2
 8028592:	d12b      	bne.n	80285ec <_strtod_l+0x944>
 8028594:	9b04      	ldr	r3, [sp, #16]
 8028596:	4641      	mov	r1, r8
 8028598:	b1fb      	cbz	r3, 80285da <_strtod_l+0x932>
 802859a:	4aa8      	ldr	r2, [pc, #672]	; (802883c <_strtod_l+0xb94>)
 802859c:	ea09 0202 	and.w	r2, r9, r2
 80285a0:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80285a4:	f04f 30ff 	mov.w	r0, #4294967295
 80285a8:	d81a      	bhi.n	80285e0 <_strtod_l+0x938>
 80285aa:	0d12      	lsrs	r2, r2, #20
 80285ac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80285b0:	fa00 f303 	lsl.w	r3, r0, r3
 80285b4:	4299      	cmp	r1, r3
 80285b6:	d119      	bne.n	80285ec <_strtod_l+0x944>
 80285b8:	4ba1      	ldr	r3, [pc, #644]	; (8028840 <_strtod_l+0xb98>)
 80285ba:	459b      	cmp	fp, r3
 80285bc:	d102      	bne.n	80285c4 <_strtod_l+0x91c>
 80285be:	3101      	adds	r1, #1
 80285c0:	f43f adbe 	beq.w	8028140 <_strtod_l+0x498>
 80285c4:	4b9d      	ldr	r3, [pc, #628]	; (802883c <_strtod_l+0xb94>)
 80285c6:	ea0b 0303 	and.w	r3, fp, r3
 80285ca:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80285ce:	f04f 0800 	mov.w	r8, #0
 80285d2:	9b04      	ldr	r3, [sp, #16]
 80285d4:	2b00      	cmp	r3, #0
 80285d6:	d186      	bne.n	80284e6 <_strtod_l+0x83e>
 80285d8:	e5bc      	b.n	8028154 <_strtod_l+0x4ac>
 80285da:	f04f 33ff 	mov.w	r3, #4294967295
 80285de:	e7e9      	b.n	80285b4 <_strtod_l+0x90c>
 80285e0:	4603      	mov	r3, r0
 80285e2:	e7e7      	b.n	80285b4 <_strtod_l+0x90c>
 80285e4:	ea53 0308 	orrs.w	r3, r3, r8
 80285e8:	f43f af6d 	beq.w	80284c6 <_strtod_l+0x81e>
 80285ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80285ee:	b1db      	cbz	r3, 8028628 <_strtod_l+0x980>
 80285f0:	ea13 0f0b 	tst.w	r3, fp
 80285f4:	d0ed      	beq.n	80285d2 <_strtod_l+0x92a>
 80285f6:	9a04      	ldr	r2, [sp, #16]
 80285f8:	4640      	mov	r0, r8
 80285fa:	4649      	mov	r1, r9
 80285fc:	f1ba 0f00 	cmp.w	sl, #0
 8028600:	d016      	beq.n	8028630 <_strtod_l+0x988>
 8028602:	f7ff fb35 	bl	8027c70 <sulp>
 8028606:	ed9d 7b08 	vldr	d7, [sp, #32]
 802860a:	ee37 7b00 	vadd.f64	d7, d7, d0
 802860e:	ec59 8b17 	vmov	r8, r9, d7
 8028612:	e7de      	b.n	80285d2 <_strtod_l+0x92a>
 8028614:	4013      	ands	r3, r2
 8028616:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 802861a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 802861e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8028622:	f04f 38ff 	mov.w	r8, #4294967295
 8028626:	e7d4      	b.n	80285d2 <_strtod_l+0x92a>
 8028628:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802862a:	ea13 0f08 	tst.w	r3, r8
 802862e:	e7e1      	b.n	80285f4 <_strtod_l+0x94c>
 8028630:	f7ff fb1e 	bl	8027c70 <sulp>
 8028634:	ed9d 7b08 	vldr	d7, [sp, #32]
 8028638:	ee37 7b40 	vsub.f64	d7, d7, d0
 802863c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8028640:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8028644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028648:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 802864c:	d1c1      	bne.n	80285d2 <_strtod_l+0x92a>
 802864e:	e5ec      	b.n	802822a <_strtod_l+0x582>
 8028650:	4631      	mov	r1, r6
 8028652:	4628      	mov	r0, r5
 8028654:	f002 fac8 	bl	802abe8 <__ratio>
 8028658:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 802865c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8028660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028664:	d867      	bhi.n	8028736 <_strtod_l+0xa8e>
 8028666:	f1ba 0f00 	cmp.w	sl, #0
 802866a:	d044      	beq.n	80286f6 <_strtod_l+0xa4e>
 802866c:	4b75      	ldr	r3, [pc, #468]	; (8028844 <_strtod_l+0xb9c>)
 802866e:	2200      	movs	r2, #0
 8028670:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8028674:	4971      	ldr	r1, [pc, #452]	; (802883c <_strtod_l+0xb94>)
 8028676:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8028850 <_strtod_l+0xba8>
 802867a:	ea0b 0001 	and.w	r0, fp, r1
 802867e:	4560      	cmp	r0, ip
 8028680:	900d      	str	r0, [sp, #52]	; 0x34
 8028682:	f040 808b 	bne.w	802879c <_strtod_l+0xaf4>
 8028686:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 802868a:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 802868e:	ec49 8b10 	vmov	d0, r8, r9
 8028692:	ec43 2b1c 	vmov	d12, r2, r3
 8028696:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 802869a:	f002 f9cd 	bl	802aa38 <__ulp>
 802869e:	ec49 8b1d 	vmov	d13, r8, r9
 80286a2:	eeac db00 	vfma.f64	d13, d12, d0
 80286a6:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 80286aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80286ac:	4963      	ldr	r1, [pc, #396]	; (802883c <_strtod_l+0xb94>)
 80286ae:	4a66      	ldr	r2, [pc, #408]	; (8028848 <_strtod_l+0xba0>)
 80286b0:	4019      	ands	r1, r3
 80286b2:	4291      	cmp	r1, r2
 80286b4:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 80286b8:	d947      	bls.n	802874a <_strtod_l+0xaa2>
 80286ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80286bc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80286c0:	4293      	cmp	r3, r2
 80286c2:	d103      	bne.n	80286cc <_strtod_l+0xa24>
 80286c4:	9b08      	ldr	r3, [sp, #32]
 80286c6:	3301      	adds	r3, #1
 80286c8:	f43f ad3a 	beq.w	8028140 <_strtod_l+0x498>
 80286cc:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8028840 <_strtod_l+0xb98>
 80286d0:	f04f 38ff 	mov.w	r8, #4294967295
 80286d4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80286d6:	4620      	mov	r0, r4
 80286d8:	f001 fe82 	bl	802a3e0 <_Bfree>
 80286dc:	4639      	mov	r1, r7
 80286de:	4620      	mov	r0, r4
 80286e0:	f001 fe7e 	bl	802a3e0 <_Bfree>
 80286e4:	4631      	mov	r1, r6
 80286e6:	4620      	mov	r0, r4
 80286e8:	f001 fe7a 	bl	802a3e0 <_Bfree>
 80286ec:	4629      	mov	r1, r5
 80286ee:	4620      	mov	r0, r4
 80286f0:	f001 fe76 	bl	802a3e0 <_Bfree>
 80286f4:	e60f      	b.n	8028316 <_strtod_l+0x66e>
 80286f6:	f1b8 0f00 	cmp.w	r8, #0
 80286fa:	d112      	bne.n	8028722 <_strtod_l+0xa7a>
 80286fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8028700:	b9b3      	cbnz	r3, 8028730 <_strtod_l+0xa88>
 8028702:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8028706:	eeb4 0bc7 	vcmpe.f64	d0, d7
 802870a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802870e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8028712:	d401      	bmi.n	8028718 <_strtod_l+0xa70>
 8028714:	ee20 8b08 	vmul.f64	d8, d0, d8
 8028718:	eeb1 7b48 	vneg.f64	d7, d8
 802871c:	ec53 2b17 	vmov	r2, r3, d7
 8028720:	e7a8      	b.n	8028674 <_strtod_l+0x9cc>
 8028722:	f1b8 0f01 	cmp.w	r8, #1
 8028726:	d103      	bne.n	8028730 <_strtod_l+0xa88>
 8028728:	f1b9 0f00 	cmp.w	r9, #0
 802872c:	f43f ad7d 	beq.w	802822a <_strtod_l+0x582>
 8028730:	4b46      	ldr	r3, [pc, #280]	; (802884c <_strtod_l+0xba4>)
 8028732:	2200      	movs	r2, #0
 8028734:	e79c      	b.n	8028670 <_strtod_l+0x9c8>
 8028736:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 802873a:	ee20 8b08 	vmul.f64	d8, d0, d8
 802873e:	f1ba 0f00 	cmp.w	sl, #0
 8028742:	d0e9      	beq.n	8028718 <_strtod_l+0xa70>
 8028744:	ec53 2b18 	vmov	r2, r3, d8
 8028748:	e794      	b.n	8028674 <_strtod_l+0x9cc>
 802874a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 802874e:	9b04      	ldr	r3, [sp, #16]
 8028750:	2b00      	cmp	r3, #0
 8028752:	d1bf      	bne.n	80286d4 <_strtod_l+0xa2c>
 8028754:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8028758:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802875a:	0d1b      	lsrs	r3, r3, #20
 802875c:	051b      	lsls	r3, r3, #20
 802875e:	429a      	cmp	r2, r3
 8028760:	d1b8      	bne.n	80286d4 <_strtod_l+0xa2c>
 8028762:	ec51 0b18 	vmov	r0, r1, d8
 8028766:	f7d7 ff97 	bl	8000698 <__aeabi_d2lz>
 802876a:	f7d7 ff4f 	bl	800060c <__aeabi_l2d>
 802876e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8028772:	ec41 0b17 	vmov	d7, r0, r1
 8028776:	ea43 0308 	orr.w	r3, r3, r8
 802877a:	ea53 030a 	orrs.w	r3, r3, sl
 802877e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8028782:	d03e      	beq.n	8028802 <_strtod_l+0xb5a>
 8028784:	eeb4 8bca 	vcmpe.f64	d8, d10
 8028788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802878c:	f53f ace2 	bmi.w	8028154 <_strtod_l+0x4ac>
 8028790:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8028794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028798:	dd9c      	ble.n	80286d4 <_strtod_l+0xa2c>
 802879a:	e4db      	b.n	8028154 <_strtod_l+0x4ac>
 802879c:	9904      	ldr	r1, [sp, #16]
 802879e:	b301      	cbz	r1, 80287e2 <_strtod_l+0xb3a>
 80287a0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80287a2:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 80287a6:	d81c      	bhi.n	80287e2 <_strtod_l+0xb3a>
 80287a8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8028830 <_strtod_l+0xb88>
 80287ac:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80287b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80287b4:	d811      	bhi.n	80287da <_strtod_l+0xb32>
 80287b6:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80287ba:	ee18 3a10 	vmov	r3, s16
 80287be:	2b01      	cmp	r3, #1
 80287c0:	bf38      	it	cc
 80287c2:	2301      	movcc	r3, #1
 80287c4:	ee08 3a10 	vmov	s16, r3
 80287c8:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80287cc:	f1ba 0f00 	cmp.w	sl, #0
 80287d0:	d114      	bne.n	80287fc <_strtod_l+0xb54>
 80287d2:	eeb1 7b48 	vneg.f64	d7, d8
 80287d6:	ec53 2b17 	vmov	r2, r3, d7
 80287da:	980d      	ldr	r0, [sp, #52]	; 0x34
 80287dc:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 80287e0:	1a0b      	subs	r3, r1, r0
 80287e2:	ed9d 0b08 	vldr	d0, [sp, #32]
 80287e6:	ec43 2b1c 	vmov	d12, r2, r3
 80287ea:	f002 f925 	bl	802aa38 <__ulp>
 80287ee:	ed9d 7b08 	vldr	d7, [sp, #32]
 80287f2:	eeac 7b00 	vfma.f64	d7, d12, d0
 80287f6:	ec59 8b17 	vmov	r8, r9, d7
 80287fa:	e7a8      	b.n	802874e <_strtod_l+0xaa6>
 80287fc:	ec53 2b18 	vmov	r2, r3, d8
 8028800:	e7eb      	b.n	80287da <_strtod_l+0xb32>
 8028802:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8028806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802880a:	f57f af63 	bpl.w	80286d4 <_strtod_l+0xa2c>
 802880e:	e4a1      	b.n	8028154 <_strtod_l+0x4ac>
 8028810:	2300      	movs	r3, #0
 8028812:	930b      	str	r3, [sp, #44]	; 0x2c
 8028814:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8028816:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028818:	6013      	str	r3, [r2, #0]
 802881a:	f7ff ba8d 	b.w	8027d38 <_strtod_l+0x90>
 802881e:	2a65      	cmp	r2, #101	; 0x65
 8028820:	f43f ab89 	beq.w	8027f36 <_strtod_l+0x28e>
 8028824:	2a45      	cmp	r2, #69	; 0x45
 8028826:	f43f ab86 	beq.w	8027f36 <_strtod_l+0x28e>
 802882a:	2101      	movs	r1, #1
 802882c:	f7ff bbbe 	b.w	8027fac <_strtod_l+0x304>
 8028830:	ffc00000 	.word	0xffc00000
 8028834:	41dfffff 	.word	0x41dfffff
 8028838:	000fffff 	.word	0x000fffff
 802883c:	7ff00000 	.word	0x7ff00000
 8028840:	7fefffff 	.word	0x7fefffff
 8028844:	3ff00000 	.word	0x3ff00000
 8028848:	7c9fffff 	.word	0x7c9fffff
 802884c:	bff00000 	.word	0xbff00000
 8028850:	7fe00000 	.word	0x7fe00000

08028854 <_strtod_r>:
 8028854:	4b01      	ldr	r3, [pc, #4]	; (802885c <_strtod_r+0x8>)
 8028856:	f7ff ba27 	b.w	8027ca8 <_strtod_l>
 802885a:	bf00      	nop
 802885c:	200000e8 	.word	0x200000e8

08028860 <_strtol_l.isra.0>:
 8028860:	2b01      	cmp	r3, #1
 8028862:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028866:	d001      	beq.n	802886c <_strtol_l.isra.0+0xc>
 8028868:	2b24      	cmp	r3, #36	; 0x24
 802886a:	d906      	bls.n	802887a <_strtol_l.isra.0+0x1a>
 802886c:	f7fe f8da 	bl	8026a24 <__errno>
 8028870:	2316      	movs	r3, #22
 8028872:	6003      	str	r3, [r0, #0]
 8028874:	2000      	movs	r0, #0
 8028876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802887a:	4f3a      	ldr	r7, [pc, #232]	; (8028964 <_strtol_l.isra.0+0x104>)
 802887c:	468e      	mov	lr, r1
 802887e:	4676      	mov	r6, lr
 8028880:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8028884:	5de5      	ldrb	r5, [r4, r7]
 8028886:	f015 0508 	ands.w	r5, r5, #8
 802888a:	d1f8      	bne.n	802887e <_strtol_l.isra.0+0x1e>
 802888c:	2c2d      	cmp	r4, #45	; 0x2d
 802888e:	d134      	bne.n	80288fa <_strtol_l.isra.0+0x9a>
 8028890:	f89e 4000 	ldrb.w	r4, [lr]
 8028894:	f04f 0801 	mov.w	r8, #1
 8028898:	f106 0e02 	add.w	lr, r6, #2
 802889c:	2b00      	cmp	r3, #0
 802889e:	d05c      	beq.n	802895a <_strtol_l.isra.0+0xfa>
 80288a0:	2b10      	cmp	r3, #16
 80288a2:	d10c      	bne.n	80288be <_strtol_l.isra.0+0x5e>
 80288a4:	2c30      	cmp	r4, #48	; 0x30
 80288a6:	d10a      	bne.n	80288be <_strtol_l.isra.0+0x5e>
 80288a8:	f89e 4000 	ldrb.w	r4, [lr]
 80288ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80288b0:	2c58      	cmp	r4, #88	; 0x58
 80288b2:	d14d      	bne.n	8028950 <_strtol_l.isra.0+0xf0>
 80288b4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80288b8:	2310      	movs	r3, #16
 80288ba:	f10e 0e02 	add.w	lr, lr, #2
 80288be:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80288c2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80288c6:	2600      	movs	r6, #0
 80288c8:	fbbc f9f3 	udiv	r9, ip, r3
 80288cc:	4635      	mov	r5, r6
 80288ce:	fb03 ca19 	mls	sl, r3, r9, ip
 80288d2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80288d6:	2f09      	cmp	r7, #9
 80288d8:	d818      	bhi.n	802890c <_strtol_l.isra.0+0xac>
 80288da:	463c      	mov	r4, r7
 80288dc:	42a3      	cmp	r3, r4
 80288de:	dd24      	ble.n	802892a <_strtol_l.isra.0+0xca>
 80288e0:	2e00      	cmp	r6, #0
 80288e2:	db1f      	blt.n	8028924 <_strtol_l.isra.0+0xc4>
 80288e4:	45a9      	cmp	r9, r5
 80288e6:	d31d      	bcc.n	8028924 <_strtol_l.isra.0+0xc4>
 80288e8:	d101      	bne.n	80288ee <_strtol_l.isra.0+0x8e>
 80288ea:	45a2      	cmp	sl, r4
 80288ec:	db1a      	blt.n	8028924 <_strtol_l.isra.0+0xc4>
 80288ee:	fb05 4503 	mla	r5, r5, r3, r4
 80288f2:	2601      	movs	r6, #1
 80288f4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80288f8:	e7eb      	b.n	80288d2 <_strtol_l.isra.0+0x72>
 80288fa:	2c2b      	cmp	r4, #43	; 0x2b
 80288fc:	bf08      	it	eq
 80288fe:	f89e 4000 	ldrbeq.w	r4, [lr]
 8028902:	46a8      	mov	r8, r5
 8028904:	bf08      	it	eq
 8028906:	f106 0e02 	addeq.w	lr, r6, #2
 802890a:	e7c7      	b.n	802889c <_strtol_l.isra.0+0x3c>
 802890c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8028910:	2f19      	cmp	r7, #25
 8028912:	d801      	bhi.n	8028918 <_strtol_l.isra.0+0xb8>
 8028914:	3c37      	subs	r4, #55	; 0x37
 8028916:	e7e1      	b.n	80288dc <_strtol_l.isra.0+0x7c>
 8028918:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 802891c:	2f19      	cmp	r7, #25
 802891e:	d804      	bhi.n	802892a <_strtol_l.isra.0+0xca>
 8028920:	3c57      	subs	r4, #87	; 0x57
 8028922:	e7db      	b.n	80288dc <_strtol_l.isra.0+0x7c>
 8028924:	f04f 36ff 	mov.w	r6, #4294967295
 8028928:	e7e4      	b.n	80288f4 <_strtol_l.isra.0+0x94>
 802892a:	2e00      	cmp	r6, #0
 802892c:	da05      	bge.n	802893a <_strtol_l.isra.0+0xda>
 802892e:	2322      	movs	r3, #34	; 0x22
 8028930:	6003      	str	r3, [r0, #0]
 8028932:	4665      	mov	r5, ip
 8028934:	b942      	cbnz	r2, 8028948 <_strtol_l.isra.0+0xe8>
 8028936:	4628      	mov	r0, r5
 8028938:	e79d      	b.n	8028876 <_strtol_l.isra.0+0x16>
 802893a:	f1b8 0f00 	cmp.w	r8, #0
 802893e:	d000      	beq.n	8028942 <_strtol_l.isra.0+0xe2>
 8028940:	426d      	negs	r5, r5
 8028942:	2a00      	cmp	r2, #0
 8028944:	d0f7      	beq.n	8028936 <_strtol_l.isra.0+0xd6>
 8028946:	b10e      	cbz	r6, 802894c <_strtol_l.isra.0+0xec>
 8028948:	f10e 31ff 	add.w	r1, lr, #4294967295
 802894c:	6011      	str	r1, [r2, #0]
 802894e:	e7f2      	b.n	8028936 <_strtol_l.isra.0+0xd6>
 8028950:	2430      	movs	r4, #48	; 0x30
 8028952:	2b00      	cmp	r3, #0
 8028954:	d1b3      	bne.n	80288be <_strtol_l.isra.0+0x5e>
 8028956:	2308      	movs	r3, #8
 8028958:	e7b1      	b.n	80288be <_strtol_l.isra.0+0x5e>
 802895a:	2c30      	cmp	r4, #48	; 0x30
 802895c:	d0a4      	beq.n	80288a8 <_strtol_l.isra.0+0x48>
 802895e:	230a      	movs	r3, #10
 8028960:	e7ad      	b.n	80288be <_strtol_l.isra.0+0x5e>
 8028962:	bf00      	nop
 8028964:	0802f541 	.word	0x0802f541

08028968 <_strtol_r>:
 8028968:	f7ff bf7a 	b.w	8028860 <_strtol_l.isra.0>

0802896c <__swbuf_r>:
 802896c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802896e:	460e      	mov	r6, r1
 8028970:	4614      	mov	r4, r2
 8028972:	4605      	mov	r5, r0
 8028974:	b118      	cbz	r0, 802897e <__swbuf_r+0x12>
 8028976:	6983      	ldr	r3, [r0, #24]
 8028978:	b90b      	cbnz	r3, 802897e <__swbuf_r+0x12>
 802897a:	f001 f841 	bl	8029a00 <__sinit>
 802897e:	4b21      	ldr	r3, [pc, #132]	; (8028a04 <__swbuf_r+0x98>)
 8028980:	429c      	cmp	r4, r3
 8028982:	d12b      	bne.n	80289dc <__swbuf_r+0x70>
 8028984:	686c      	ldr	r4, [r5, #4]
 8028986:	69a3      	ldr	r3, [r4, #24]
 8028988:	60a3      	str	r3, [r4, #8]
 802898a:	89a3      	ldrh	r3, [r4, #12]
 802898c:	071a      	lsls	r2, r3, #28
 802898e:	d52f      	bpl.n	80289f0 <__swbuf_r+0x84>
 8028990:	6923      	ldr	r3, [r4, #16]
 8028992:	b36b      	cbz	r3, 80289f0 <__swbuf_r+0x84>
 8028994:	6923      	ldr	r3, [r4, #16]
 8028996:	6820      	ldr	r0, [r4, #0]
 8028998:	1ac0      	subs	r0, r0, r3
 802899a:	6963      	ldr	r3, [r4, #20]
 802899c:	b2f6      	uxtb	r6, r6
 802899e:	4283      	cmp	r3, r0
 80289a0:	4637      	mov	r7, r6
 80289a2:	dc04      	bgt.n	80289ae <__swbuf_r+0x42>
 80289a4:	4621      	mov	r1, r4
 80289a6:	4628      	mov	r0, r5
 80289a8:	f000 ff96 	bl	80298d8 <_fflush_r>
 80289ac:	bb30      	cbnz	r0, 80289fc <__swbuf_r+0x90>
 80289ae:	68a3      	ldr	r3, [r4, #8]
 80289b0:	3b01      	subs	r3, #1
 80289b2:	60a3      	str	r3, [r4, #8]
 80289b4:	6823      	ldr	r3, [r4, #0]
 80289b6:	1c5a      	adds	r2, r3, #1
 80289b8:	6022      	str	r2, [r4, #0]
 80289ba:	701e      	strb	r6, [r3, #0]
 80289bc:	6963      	ldr	r3, [r4, #20]
 80289be:	3001      	adds	r0, #1
 80289c0:	4283      	cmp	r3, r0
 80289c2:	d004      	beq.n	80289ce <__swbuf_r+0x62>
 80289c4:	89a3      	ldrh	r3, [r4, #12]
 80289c6:	07db      	lsls	r3, r3, #31
 80289c8:	d506      	bpl.n	80289d8 <__swbuf_r+0x6c>
 80289ca:	2e0a      	cmp	r6, #10
 80289cc:	d104      	bne.n	80289d8 <__swbuf_r+0x6c>
 80289ce:	4621      	mov	r1, r4
 80289d0:	4628      	mov	r0, r5
 80289d2:	f000 ff81 	bl	80298d8 <_fflush_r>
 80289d6:	b988      	cbnz	r0, 80289fc <__swbuf_r+0x90>
 80289d8:	4638      	mov	r0, r7
 80289da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80289dc:	4b0a      	ldr	r3, [pc, #40]	; (8028a08 <__swbuf_r+0x9c>)
 80289de:	429c      	cmp	r4, r3
 80289e0:	d101      	bne.n	80289e6 <__swbuf_r+0x7a>
 80289e2:	68ac      	ldr	r4, [r5, #8]
 80289e4:	e7cf      	b.n	8028986 <__swbuf_r+0x1a>
 80289e6:	4b09      	ldr	r3, [pc, #36]	; (8028a0c <__swbuf_r+0xa0>)
 80289e8:	429c      	cmp	r4, r3
 80289ea:	bf08      	it	eq
 80289ec:	68ec      	ldreq	r4, [r5, #12]
 80289ee:	e7ca      	b.n	8028986 <__swbuf_r+0x1a>
 80289f0:	4621      	mov	r1, r4
 80289f2:	4628      	mov	r0, r5
 80289f4:	f000 f80c 	bl	8028a10 <__swsetup_r>
 80289f8:	2800      	cmp	r0, #0
 80289fa:	d0cb      	beq.n	8028994 <__swbuf_r+0x28>
 80289fc:	f04f 37ff 	mov.w	r7, #4294967295
 8028a00:	e7ea      	b.n	80289d8 <__swbuf_r+0x6c>
 8028a02:	bf00      	nop
 8028a04:	0802f6f8 	.word	0x0802f6f8
 8028a08:	0802f718 	.word	0x0802f718
 8028a0c:	0802f6d8 	.word	0x0802f6d8

08028a10 <__swsetup_r>:
 8028a10:	4b32      	ldr	r3, [pc, #200]	; (8028adc <__swsetup_r+0xcc>)
 8028a12:	b570      	push	{r4, r5, r6, lr}
 8028a14:	681d      	ldr	r5, [r3, #0]
 8028a16:	4606      	mov	r6, r0
 8028a18:	460c      	mov	r4, r1
 8028a1a:	b125      	cbz	r5, 8028a26 <__swsetup_r+0x16>
 8028a1c:	69ab      	ldr	r3, [r5, #24]
 8028a1e:	b913      	cbnz	r3, 8028a26 <__swsetup_r+0x16>
 8028a20:	4628      	mov	r0, r5
 8028a22:	f000 ffed 	bl	8029a00 <__sinit>
 8028a26:	4b2e      	ldr	r3, [pc, #184]	; (8028ae0 <__swsetup_r+0xd0>)
 8028a28:	429c      	cmp	r4, r3
 8028a2a:	d10f      	bne.n	8028a4c <__swsetup_r+0x3c>
 8028a2c:	686c      	ldr	r4, [r5, #4]
 8028a2e:	89a3      	ldrh	r3, [r4, #12]
 8028a30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028a34:	0719      	lsls	r1, r3, #28
 8028a36:	d42c      	bmi.n	8028a92 <__swsetup_r+0x82>
 8028a38:	06dd      	lsls	r5, r3, #27
 8028a3a:	d411      	bmi.n	8028a60 <__swsetup_r+0x50>
 8028a3c:	2309      	movs	r3, #9
 8028a3e:	6033      	str	r3, [r6, #0]
 8028a40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8028a44:	81a3      	strh	r3, [r4, #12]
 8028a46:	f04f 30ff 	mov.w	r0, #4294967295
 8028a4a:	e03e      	b.n	8028aca <__swsetup_r+0xba>
 8028a4c:	4b25      	ldr	r3, [pc, #148]	; (8028ae4 <__swsetup_r+0xd4>)
 8028a4e:	429c      	cmp	r4, r3
 8028a50:	d101      	bne.n	8028a56 <__swsetup_r+0x46>
 8028a52:	68ac      	ldr	r4, [r5, #8]
 8028a54:	e7eb      	b.n	8028a2e <__swsetup_r+0x1e>
 8028a56:	4b24      	ldr	r3, [pc, #144]	; (8028ae8 <__swsetup_r+0xd8>)
 8028a58:	429c      	cmp	r4, r3
 8028a5a:	bf08      	it	eq
 8028a5c:	68ec      	ldreq	r4, [r5, #12]
 8028a5e:	e7e6      	b.n	8028a2e <__swsetup_r+0x1e>
 8028a60:	0758      	lsls	r0, r3, #29
 8028a62:	d512      	bpl.n	8028a8a <__swsetup_r+0x7a>
 8028a64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028a66:	b141      	cbz	r1, 8028a7a <__swsetup_r+0x6a>
 8028a68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028a6c:	4299      	cmp	r1, r3
 8028a6e:	d002      	beq.n	8028a76 <__swsetup_r+0x66>
 8028a70:	4630      	mov	r0, r6
 8028a72:	f7fe f839 	bl	8026ae8 <_free_r>
 8028a76:	2300      	movs	r3, #0
 8028a78:	6363      	str	r3, [r4, #52]	; 0x34
 8028a7a:	89a3      	ldrh	r3, [r4, #12]
 8028a7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8028a80:	81a3      	strh	r3, [r4, #12]
 8028a82:	2300      	movs	r3, #0
 8028a84:	6063      	str	r3, [r4, #4]
 8028a86:	6923      	ldr	r3, [r4, #16]
 8028a88:	6023      	str	r3, [r4, #0]
 8028a8a:	89a3      	ldrh	r3, [r4, #12]
 8028a8c:	f043 0308 	orr.w	r3, r3, #8
 8028a90:	81a3      	strh	r3, [r4, #12]
 8028a92:	6923      	ldr	r3, [r4, #16]
 8028a94:	b94b      	cbnz	r3, 8028aaa <__swsetup_r+0x9a>
 8028a96:	89a3      	ldrh	r3, [r4, #12]
 8028a98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8028a9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8028aa0:	d003      	beq.n	8028aaa <__swsetup_r+0x9a>
 8028aa2:	4621      	mov	r1, r4
 8028aa4:	4630      	mov	r0, r6
 8028aa6:	f001 fbe3 	bl	802a270 <__smakebuf_r>
 8028aaa:	89a0      	ldrh	r0, [r4, #12]
 8028aac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028ab0:	f010 0301 	ands.w	r3, r0, #1
 8028ab4:	d00a      	beq.n	8028acc <__swsetup_r+0xbc>
 8028ab6:	2300      	movs	r3, #0
 8028ab8:	60a3      	str	r3, [r4, #8]
 8028aba:	6963      	ldr	r3, [r4, #20]
 8028abc:	425b      	negs	r3, r3
 8028abe:	61a3      	str	r3, [r4, #24]
 8028ac0:	6923      	ldr	r3, [r4, #16]
 8028ac2:	b943      	cbnz	r3, 8028ad6 <__swsetup_r+0xc6>
 8028ac4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8028ac8:	d1ba      	bne.n	8028a40 <__swsetup_r+0x30>
 8028aca:	bd70      	pop	{r4, r5, r6, pc}
 8028acc:	0781      	lsls	r1, r0, #30
 8028ace:	bf58      	it	pl
 8028ad0:	6963      	ldrpl	r3, [r4, #20]
 8028ad2:	60a3      	str	r3, [r4, #8]
 8028ad4:	e7f4      	b.n	8028ac0 <__swsetup_r+0xb0>
 8028ad6:	2000      	movs	r0, #0
 8028ad8:	e7f7      	b.n	8028aca <__swsetup_r+0xba>
 8028ada:	bf00      	nop
 8028adc:	2000007c 	.word	0x2000007c
 8028ae0:	0802f6f8 	.word	0x0802f6f8
 8028ae4:	0802f718 	.word	0x0802f718
 8028ae8:	0802f6d8 	.word	0x0802f6d8

08028aec <__register_exitproc>:
 8028aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028af0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8028bac <__register_exitproc+0xc0>
 8028af4:	4606      	mov	r6, r0
 8028af6:	f8d8 0000 	ldr.w	r0, [r8]
 8028afa:	461f      	mov	r7, r3
 8028afc:	460d      	mov	r5, r1
 8028afe:	4691      	mov	r9, r2
 8028b00:	f001 fb8f 	bl	802a222 <__retarget_lock_acquire_recursive>
 8028b04:	4b25      	ldr	r3, [pc, #148]	; (8028b9c <__register_exitproc+0xb0>)
 8028b06:	681c      	ldr	r4, [r3, #0]
 8028b08:	b934      	cbnz	r4, 8028b18 <__register_exitproc+0x2c>
 8028b0a:	4c25      	ldr	r4, [pc, #148]	; (8028ba0 <__register_exitproc+0xb4>)
 8028b0c:	601c      	str	r4, [r3, #0]
 8028b0e:	4b25      	ldr	r3, [pc, #148]	; (8028ba4 <__register_exitproc+0xb8>)
 8028b10:	b113      	cbz	r3, 8028b18 <__register_exitproc+0x2c>
 8028b12:	681b      	ldr	r3, [r3, #0]
 8028b14:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8028b18:	6863      	ldr	r3, [r4, #4]
 8028b1a:	2b1f      	cmp	r3, #31
 8028b1c:	dd07      	ble.n	8028b2e <__register_exitproc+0x42>
 8028b1e:	f8d8 0000 	ldr.w	r0, [r8]
 8028b22:	f001 fb80 	bl	802a226 <__retarget_lock_release_recursive>
 8028b26:	f04f 30ff 	mov.w	r0, #4294967295
 8028b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028b2e:	b34e      	cbz	r6, 8028b84 <__register_exitproc+0x98>
 8028b30:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8028b34:	b988      	cbnz	r0, 8028b5a <__register_exitproc+0x6e>
 8028b36:	4b1c      	ldr	r3, [pc, #112]	; (8028ba8 <__register_exitproc+0xbc>)
 8028b38:	b923      	cbnz	r3, 8028b44 <__register_exitproc+0x58>
 8028b3a:	f8d8 0000 	ldr.w	r0, [r8]
 8028b3e:	f001 fb71 	bl	802a224 <__retarget_lock_release>
 8028b42:	e7f0      	b.n	8028b26 <__register_exitproc+0x3a>
 8028b44:	f44f 7084 	mov.w	r0, #264	; 0x108
 8028b48:	f7fd ffa8 	bl	8026a9c <malloc>
 8028b4c:	2800      	cmp	r0, #0
 8028b4e:	d0f4      	beq.n	8028b3a <__register_exitproc+0x4e>
 8028b50:	2300      	movs	r3, #0
 8028b52:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8028b56:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8028b5a:	6863      	ldr	r3, [r4, #4]
 8028b5c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8028b60:	2201      	movs	r2, #1
 8028b62:	409a      	lsls	r2, r3
 8028b64:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8028b68:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8028b6c:	4313      	orrs	r3, r2
 8028b6e:	2e02      	cmp	r6, #2
 8028b70:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8028b74:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8028b78:	bf02      	ittt	eq
 8028b7a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8028b7e:	431a      	orreq	r2, r3
 8028b80:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8028b84:	6863      	ldr	r3, [r4, #4]
 8028b86:	f8d8 0000 	ldr.w	r0, [r8]
 8028b8a:	1c5a      	adds	r2, r3, #1
 8028b8c:	3302      	adds	r3, #2
 8028b8e:	6062      	str	r2, [r4, #4]
 8028b90:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8028b94:	f001 fb47 	bl	802a226 <__retarget_lock_release_recursive>
 8028b98:	2000      	movs	r0, #0
 8028b9a:	e7c6      	b.n	8028b2a <__register_exitproc+0x3e>
 8028b9c:	20056a18 	.word	0x20056a18
 8028ba0:	2005698c 	.word	0x2005698c
 8028ba4:	0802f4ec 	.word	0x0802f4ec
 8028ba8:	08026a9d 	.word	0x08026a9d
 8028bac:	200000e0 	.word	0x200000e0

08028bb0 <quorem>:
 8028bb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028bb4:	6903      	ldr	r3, [r0, #16]
 8028bb6:	690c      	ldr	r4, [r1, #16]
 8028bb8:	42a3      	cmp	r3, r4
 8028bba:	4607      	mov	r7, r0
 8028bbc:	f2c0 8081 	blt.w	8028cc2 <quorem+0x112>
 8028bc0:	3c01      	subs	r4, #1
 8028bc2:	f101 0814 	add.w	r8, r1, #20
 8028bc6:	f100 0514 	add.w	r5, r0, #20
 8028bca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8028bce:	9301      	str	r3, [sp, #4]
 8028bd0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8028bd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8028bd8:	3301      	adds	r3, #1
 8028bda:	429a      	cmp	r2, r3
 8028bdc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8028be0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8028be4:	fbb2 f6f3 	udiv	r6, r2, r3
 8028be8:	d331      	bcc.n	8028c4e <quorem+0x9e>
 8028bea:	f04f 0e00 	mov.w	lr, #0
 8028bee:	4640      	mov	r0, r8
 8028bf0:	46ac      	mov	ip, r5
 8028bf2:	46f2      	mov	sl, lr
 8028bf4:	f850 2b04 	ldr.w	r2, [r0], #4
 8028bf8:	b293      	uxth	r3, r2
 8028bfa:	fb06 e303 	mla	r3, r6, r3, lr
 8028bfe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8028c02:	b29b      	uxth	r3, r3
 8028c04:	ebaa 0303 	sub.w	r3, sl, r3
 8028c08:	0c12      	lsrs	r2, r2, #16
 8028c0a:	f8dc a000 	ldr.w	sl, [ip]
 8028c0e:	fb06 e202 	mla	r2, r6, r2, lr
 8028c12:	fa13 f38a 	uxtah	r3, r3, sl
 8028c16:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8028c1a:	fa1f fa82 	uxth.w	sl, r2
 8028c1e:	f8dc 2000 	ldr.w	r2, [ip]
 8028c22:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8028c26:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8028c2a:	b29b      	uxth	r3, r3
 8028c2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8028c30:	4581      	cmp	r9, r0
 8028c32:	f84c 3b04 	str.w	r3, [ip], #4
 8028c36:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8028c3a:	d2db      	bcs.n	8028bf4 <quorem+0x44>
 8028c3c:	f855 300b 	ldr.w	r3, [r5, fp]
 8028c40:	b92b      	cbnz	r3, 8028c4e <quorem+0x9e>
 8028c42:	9b01      	ldr	r3, [sp, #4]
 8028c44:	3b04      	subs	r3, #4
 8028c46:	429d      	cmp	r5, r3
 8028c48:	461a      	mov	r2, r3
 8028c4a:	d32e      	bcc.n	8028caa <quorem+0xfa>
 8028c4c:	613c      	str	r4, [r7, #16]
 8028c4e:	4638      	mov	r0, r7
 8028c50:	f001 fe4e 	bl	802a8f0 <__mcmp>
 8028c54:	2800      	cmp	r0, #0
 8028c56:	db24      	blt.n	8028ca2 <quorem+0xf2>
 8028c58:	3601      	adds	r6, #1
 8028c5a:	4628      	mov	r0, r5
 8028c5c:	f04f 0c00 	mov.w	ip, #0
 8028c60:	f858 2b04 	ldr.w	r2, [r8], #4
 8028c64:	f8d0 e000 	ldr.w	lr, [r0]
 8028c68:	b293      	uxth	r3, r2
 8028c6a:	ebac 0303 	sub.w	r3, ip, r3
 8028c6e:	0c12      	lsrs	r2, r2, #16
 8028c70:	fa13 f38e 	uxtah	r3, r3, lr
 8028c74:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8028c78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8028c7c:	b29b      	uxth	r3, r3
 8028c7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8028c82:	45c1      	cmp	r9, r8
 8028c84:	f840 3b04 	str.w	r3, [r0], #4
 8028c88:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8028c8c:	d2e8      	bcs.n	8028c60 <quorem+0xb0>
 8028c8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8028c92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8028c96:	b922      	cbnz	r2, 8028ca2 <quorem+0xf2>
 8028c98:	3b04      	subs	r3, #4
 8028c9a:	429d      	cmp	r5, r3
 8028c9c:	461a      	mov	r2, r3
 8028c9e:	d30a      	bcc.n	8028cb6 <quorem+0x106>
 8028ca0:	613c      	str	r4, [r7, #16]
 8028ca2:	4630      	mov	r0, r6
 8028ca4:	b003      	add	sp, #12
 8028ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028caa:	6812      	ldr	r2, [r2, #0]
 8028cac:	3b04      	subs	r3, #4
 8028cae:	2a00      	cmp	r2, #0
 8028cb0:	d1cc      	bne.n	8028c4c <quorem+0x9c>
 8028cb2:	3c01      	subs	r4, #1
 8028cb4:	e7c7      	b.n	8028c46 <quorem+0x96>
 8028cb6:	6812      	ldr	r2, [r2, #0]
 8028cb8:	3b04      	subs	r3, #4
 8028cba:	2a00      	cmp	r2, #0
 8028cbc:	d1f0      	bne.n	8028ca0 <quorem+0xf0>
 8028cbe:	3c01      	subs	r4, #1
 8028cc0:	e7eb      	b.n	8028c9a <quorem+0xea>
 8028cc2:	2000      	movs	r0, #0
 8028cc4:	e7ee      	b.n	8028ca4 <quorem+0xf4>
	...

08028cc8 <_dtoa_r>:
 8028cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028ccc:	ec59 8b10 	vmov	r8, r9, d0
 8028cd0:	b095      	sub	sp, #84	; 0x54
 8028cd2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8028cd4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8028cd6:	9107      	str	r1, [sp, #28]
 8028cd8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8028cdc:	4606      	mov	r6, r0
 8028cde:	9209      	str	r2, [sp, #36]	; 0x24
 8028ce0:	9310      	str	r3, [sp, #64]	; 0x40
 8028ce2:	b975      	cbnz	r5, 8028d02 <_dtoa_r+0x3a>
 8028ce4:	2010      	movs	r0, #16
 8028ce6:	f7fd fed9 	bl	8026a9c <malloc>
 8028cea:	4602      	mov	r2, r0
 8028cec:	6270      	str	r0, [r6, #36]	; 0x24
 8028cee:	b920      	cbnz	r0, 8028cfa <_dtoa_r+0x32>
 8028cf0:	4bab      	ldr	r3, [pc, #684]	; (8028fa0 <_dtoa_r+0x2d8>)
 8028cf2:	21ea      	movs	r1, #234	; 0xea
 8028cf4:	48ab      	ldr	r0, [pc, #684]	; (8028fa4 <_dtoa_r+0x2dc>)
 8028cf6:	f7fd fe63 	bl	80269c0 <__assert_func>
 8028cfa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8028cfe:	6005      	str	r5, [r0, #0]
 8028d00:	60c5      	str	r5, [r0, #12]
 8028d02:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8028d04:	6819      	ldr	r1, [r3, #0]
 8028d06:	b151      	cbz	r1, 8028d1e <_dtoa_r+0x56>
 8028d08:	685a      	ldr	r2, [r3, #4]
 8028d0a:	604a      	str	r2, [r1, #4]
 8028d0c:	2301      	movs	r3, #1
 8028d0e:	4093      	lsls	r3, r2
 8028d10:	608b      	str	r3, [r1, #8]
 8028d12:	4630      	mov	r0, r6
 8028d14:	f001 fb64 	bl	802a3e0 <_Bfree>
 8028d18:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8028d1a:	2200      	movs	r2, #0
 8028d1c:	601a      	str	r2, [r3, #0]
 8028d1e:	f1b9 0300 	subs.w	r3, r9, #0
 8028d22:	bfbb      	ittet	lt
 8028d24:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8028d28:	9303      	strlt	r3, [sp, #12]
 8028d2a:	2300      	movge	r3, #0
 8028d2c:	2201      	movlt	r2, #1
 8028d2e:	bfac      	ite	ge
 8028d30:	6023      	strge	r3, [r4, #0]
 8028d32:	6022      	strlt	r2, [r4, #0]
 8028d34:	4b9c      	ldr	r3, [pc, #624]	; (8028fa8 <_dtoa_r+0x2e0>)
 8028d36:	9c03      	ldr	r4, [sp, #12]
 8028d38:	43a3      	bics	r3, r4
 8028d3a:	d11a      	bne.n	8028d72 <_dtoa_r+0xaa>
 8028d3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028d3e:	f242 730f 	movw	r3, #9999	; 0x270f
 8028d42:	6013      	str	r3, [r2, #0]
 8028d44:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8028d48:	ea53 0308 	orrs.w	r3, r3, r8
 8028d4c:	f000 8512 	beq.w	8029774 <_dtoa_r+0xaac>
 8028d50:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8028d52:	b953      	cbnz	r3, 8028d6a <_dtoa_r+0xa2>
 8028d54:	4b95      	ldr	r3, [pc, #596]	; (8028fac <_dtoa_r+0x2e4>)
 8028d56:	e01f      	b.n	8028d98 <_dtoa_r+0xd0>
 8028d58:	4b95      	ldr	r3, [pc, #596]	; (8028fb0 <_dtoa_r+0x2e8>)
 8028d5a:	9300      	str	r3, [sp, #0]
 8028d5c:	3308      	adds	r3, #8
 8028d5e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8028d60:	6013      	str	r3, [r2, #0]
 8028d62:	9800      	ldr	r0, [sp, #0]
 8028d64:	b015      	add	sp, #84	; 0x54
 8028d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028d6a:	4b90      	ldr	r3, [pc, #576]	; (8028fac <_dtoa_r+0x2e4>)
 8028d6c:	9300      	str	r3, [sp, #0]
 8028d6e:	3303      	adds	r3, #3
 8028d70:	e7f5      	b.n	8028d5e <_dtoa_r+0x96>
 8028d72:	ed9d 7b02 	vldr	d7, [sp, #8]
 8028d76:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8028d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028d7e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8028d82:	d10b      	bne.n	8028d9c <_dtoa_r+0xd4>
 8028d84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028d86:	2301      	movs	r3, #1
 8028d88:	6013      	str	r3, [r2, #0]
 8028d8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8028d8c:	2b00      	cmp	r3, #0
 8028d8e:	f000 84ee 	beq.w	802976e <_dtoa_r+0xaa6>
 8028d92:	4888      	ldr	r0, [pc, #544]	; (8028fb4 <_dtoa_r+0x2ec>)
 8028d94:	6018      	str	r0, [r3, #0]
 8028d96:	1e43      	subs	r3, r0, #1
 8028d98:	9300      	str	r3, [sp, #0]
 8028d9a:	e7e2      	b.n	8028d62 <_dtoa_r+0x9a>
 8028d9c:	a913      	add	r1, sp, #76	; 0x4c
 8028d9e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8028da2:	aa12      	add	r2, sp, #72	; 0x48
 8028da4:	4630      	mov	r0, r6
 8028da6:	f001 fec3 	bl	802ab30 <__d2b>
 8028daa:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8028dae:	4605      	mov	r5, r0
 8028db0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8028db2:	2900      	cmp	r1, #0
 8028db4:	d047      	beq.n	8028e46 <_dtoa_r+0x17e>
 8028db6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8028db8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8028dbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8028dc0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8028dc4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8028dc8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8028dcc:	2400      	movs	r4, #0
 8028dce:	ec43 2b16 	vmov	d6, r2, r3
 8028dd2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8028dd6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8028f88 <_dtoa_r+0x2c0>
 8028dda:	ee36 7b47 	vsub.f64	d7, d6, d7
 8028dde:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8028f90 <_dtoa_r+0x2c8>
 8028de2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8028de6:	eeb0 7b46 	vmov.f64	d7, d6
 8028dea:	ee06 1a90 	vmov	s13, r1
 8028dee:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8028df2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8028f98 <_dtoa_r+0x2d0>
 8028df6:	eea5 7b06 	vfma.f64	d7, d5, d6
 8028dfa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8028dfe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8028e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028e06:	ee16 ba90 	vmov	fp, s13
 8028e0a:	9411      	str	r4, [sp, #68]	; 0x44
 8028e0c:	d508      	bpl.n	8028e20 <_dtoa_r+0x158>
 8028e0e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8028e12:	eeb4 6b47 	vcmp.f64	d6, d7
 8028e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028e1a:	bf18      	it	ne
 8028e1c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8028e20:	f1bb 0f16 	cmp.w	fp, #22
 8028e24:	d832      	bhi.n	8028e8c <_dtoa_r+0x1c4>
 8028e26:	4b64      	ldr	r3, [pc, #400]	; (8028fb8 <_dtoa_r+0x2f0>)
 8028e28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8028e2c:	ed93 7b00 	vldr	d7, [r3]
 8028e30:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8028e34:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8028e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028e3c:	d501      	bpl.n	8028e42 <_dtoa_r+0x17a>
 8028e3e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028e42:	2300      	movs	r3, #0
 8028e44:	e023      	b.n	8028e8e <_dtoa_r+0x1c6>
 8028e46:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8028e48:	4401      	add	r1, r0
 8028e4a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8028e4e:	2b20      	cmp	r3, #32
 8028e50:	bfc3      	ittte	gt
 8028e52:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8028e56:	fa04 f303 	lslgt.w	r3, r4, r3
 8028e5a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8028e5e:	f1c3 0320 	rsble	r3, r3, #32
 8028e62:	bfc6      	itte	gt
 8028e64:	fa28 f804 	lsrgt.w	r8, r8, r4
 8028e68:	ea43 0308 	orrgt.w	r3, r3, r8
 8028e6c:	fa08 f303 	lslle.w	r3, r8, r3
 8028e70:	ee07 3a90 	vmov	s15, r3
 8028e74:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8028e78:	3901      	subs	r1, #1
 8028e7a:	ed8d 7b00 	vstr	d7, [sp]
 8028e7e:	9c01      	ldr	r4, [sp, #4]
 8028e80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8028e84:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8028e88:	2401      	movs	r4, #1
 8028e8a:	e7a0      	b.n	8028dce <_dtoa_r+0x106>
 8028e8c:	2301      	movs	r3, #1
 8028e8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8028e90:	1a43      	subs	r3, r0, r1
 8028e92:	1e5a      	subs	r2, r3, #1
 8028e94:	bf45      	ittet	mi
 8028e96:	f1c3 0301 	rsbmi	r3, r3, #1
 8028e9a:	9305      	strmi	r3, [sp, #20]
 8028e9c:	2300      	movpl	r3, #0
 8028e9e:	2300      	movmi	r3, #0
 8028ea0:	9206      	str	r2, [sp, #24]
 8028ea2:	bf54      	ite	pl
 8028ea4:	9305      	strpl	r3, [sp, #20]
 8028ea6:	9306      	strmi	r3, [sp, #24]
 8028ea8:	f1bb 0f00 	cmp.w	fp, #0
 8028eac:	db18      	blt.n	8028ee0 <_dtoa_r+0x218>
 8028eae:	9b06      	ldr	r3, [sp, #24]
 8028eb0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8028eb4:	445b      	add	r3, fp
 8028eb6:	9306      	str	r3, [sp, #24]
 8028eb8:	2300      	movs	r3, #0
 8028eba:	9a07      	ldr	r2, [sp, #28]
 8028ebc:	2a09      	cmp	r2, #9
 8028ebe:	d849      	bhi.n	8028f54 <_dtoa_r+0x28c>
 8028ec0:	2a05      	cmp	r2, #5
 8028ec2:	bfc4      	itt	gt
 8028ec4:	3a04      	subgt	r2, #4
 8028ec6:	9207      	strgt	r2, [sp, #28]
 8028ec8:	9a07      	ldr	r2, [sp, #28]
 8028eca:	f1a2 0202 	sub.w	r2, r2, #2
 8028ece:	bfcc      	ite	gt
 8028ed0:	2400      	movgt	r4, #0
 8028ed2:	2401      	movle	r4, #1
 8028ed4:	2a03      	cmp	r2, #3
 8028ed6:	d848      	bhi.n	8028f6a <_dtoa_r+0x2a2>
 8028ed8:	e8df f002 	tbb	[pc, r2]
 8028edc:	3a2c2e0b 	.word	0x3a2c2e0b
 8028ee0:	9b05      	ldr	r3, [sp, #20]
 8028ee2:	2200      	movs	r2, #0
 8028ee4:	eba3 030b 	sub.w	r3, r3, fp
 8028ee8:	9305      	str	r3, [sp, #20]
 8028eea:	920e      	str	r2, [sp, #56]	; 0x38
 8028eec:	f1cb 0300 	rsb	r3, fp, #0
 8028ef0:	e7e3      	b.n	8028eba <_dtoa_r+0x1f2>
 8028ef2:	2200      	movs	r2, #0
 8028ef4:	9208      	str	r2, [sp, #32]
 8028ef6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028ef8:	2a00      	cmp	r2, #0
 8028efa:	dc39      	bgt.n	8028f70 <_dtoa_r+0x2a8>
 8028efc:	f04f 0a01 	mov.w	sl, #1
 8028f00:	46d1      	mov	r9, sl
 8028f02:	4652      	mov	r2, sl
 8028f04:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8028f08:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8028f0a:	2100      	movs	r1, #0
 8028f0c:	6079      	str	r1, [r7, #4]
 8028f0e:	2004      	movs	r0, #4
 8028f10:	f100 0c14 	add.w	ip, r0, #20
 8028f14:	4594      	cmp	ip, r2
 8028f16:	6879      	ldr	r1, [r7, #4]
 8028f18:	d92f      	bls.n	8028f7a <_dtoa_r+0x2b2>
 8028f1a:	4630      	mov	r0, r6
 8028f1c:	930c      	str	r3, [sp, #48]	; 0x30
 8028f1e:	f001 fa1f 	bl	802a360 <_Balloc>
 8028f22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028f24:	9000      	str	r0, [sp, #0]
 8028f26:	4602      	mov	r2, r0
 8028f28:	2800      	cmp	r0, #0
 8028f2a:	d149      	bne.n	8028fc0 <_dtoa_r+0x2f8>
 8028f2c:	4b23      	ldr	r3, [pc, #140]	; (8028fbc <_dtoa_r+0x2f4>)
 8028f2e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8028f32:	e6df      	b.n	8028cf4 <_dtoa_r+0x2c>
 8028f34:	2201      	movs	r2, #1
 8028f36:	e7dd      	b.n	8028ef4 <_dtoa_r+0x22c>
 8028f38:	2200      	movs	r2, #0
 8028f3a:	9208      	str	r2, [sp, #32]
 8028f3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028f3e:	eb0b 0a02 	add.w	sl, fp, r2
 8028f42:	f10a 0901 	add.w	r9, sl, #1
 8028f46:	464a      	mov	r2, r9
 8028f48:	2a01      	cmp	r2, #1
 8028f4a:	bfb8      	it	lt
 8028f4c:	2201      	movlt	r2, #1
 8028f4e:	e7db      	b.n	8028f08 <_dtoa_r+0x240>
 8028f50:	2201      	movs	r2, #1
 8028f52:	e7f2      	b.n	8028f3a <_dtoa_r+0x272>
 8028f54:	2401      	movs	r4, #1
 8028f56:	2200      	movs	r2, #0
 8028f58:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8028f5c:	f04f 3aff 	mov.w	sl, #4294967295
 8028f60:	2100      	movs	r1, #0
 8028f62:	46d1      	mov	r9, sl
 8028f64:	2212      	movs	r2, #18
 8028f66:	9109      	str	r1, [sp, #36]	; 0x24
 8028f68:	e7ce      	b.n	8028f08 <_dtoa_r+0x240>
 8028f6a:	2201      	movs	r2, #1
 8028f6c:	9208      	str	r2, [sp, #32]
 8028f6e:	e7f5      	b.n	8028f5c <_dtoa_r+0x294>
 8028f70:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8028f74:	46d1      	mov	r9, sl
 8028f76:	4652      	mov	r2, sl
 8028f78:	e7c6      	b.n	8028f08 <_dtoa_r+0x240>
 8028f7a:	3101      	adds	r1, #1
 8028f7c:	6079      	str	r1, [r7, #4]
 8028f7e:	0040      	lsls	r0, r0, #1
 8028f80:	e7c6      	b.n	8028f10 <_dtoa_r+0x248>
 8028f82:	bf00      	nop
 8028f84:	f3af 8000 	nop.w
 8028f88:	636f4361 	.word	0x636f4361
 8028f8c:	3fd287a7 	.word	0x3fd287a7
 8028f90:	8b60c8b3 	.word	0x8b60c8b3
 8028f94:	3fc68a28 	.word	0x3fc68a28
 8028f98:	509f79fb 	.word	0x509f79fb
 8028f9c:	3fd34413 	.word	0x3fd34413
 8028fa0:	0802f64e 	.word	0x0802f64e
 8028fa4:	0802f665 	.word	0x0802f665
 8028fa8:	7ff00000 	.word	0x7ff00000
 8028fac:	0802f64a 	.word	0x0802f64a
 8028fb0:	0802f641 	.word	0x0802f641
 8028fb4:	0802e7cb 	.word	0x0802e7cb
 8028fb8:	0802f840 	.word	0x0802f840
 8028fbc:	0802f6c4 	.word	0x0802f6c4
 8028fc0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8028fc2:	9900      	ldr	r1, [sp, #0]
 8028fc4:	6011      	str	r1, [r2, #0]
 8028fc6:	f1b9 0f0e 	cmp.w	r9, #14
 8028fca:	d872      	bhi.n	80290b2 <_dtoa_r+0x3ea>
 8028fcc:	2c00      	cmp	r4, #0
 8028fce:	d070      	beq.n	80290b2 <_dtoa_r+0x3ea>
 8028fd0:	f1bb 0f00 	cmp.w	fp, #0
 8028fd4:	f340 80a6 	ble.w	8029124 <_dtoa_r+0x45c>
 8028fd8:	49ca      	ldr	r1, [pc, #808]	; (8029304 <_dtoa_r+0x63c>)
 8028fda:	f00b 020f 	and.w	r2, fp, #15
 8028fde:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8028fe2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8028fe6:	ed92 7b00 	vldr	d7, [r2]
 8028fea:	ea4f 112b 	mov.w	r1, fp, asr #4
 8028fee:	f000 808d 	beq.w	802910c <_dtoa_r+0x444>
 8028ff2:	4ac5      	ldr	r2, [pc, #788]	; (8029308 <_dtoa_r+0x640>)
 8028ff4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8028ff8:	ed92 6b08 	vldr	d6, [r2, #32]
 8028ffc:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8029000:	ed8d 6b02 	vstr	d6, [sp, #8]
 8029004:	f001 010f 	and.w	r1, r1, #15
 8029008:	2203      	movs	r2, #3
 802900a:	48bf      	ldr	r0, [pc, #764]	; (8029308 <_dtoa_r+0x640>)
 802900c:	2900      	cmp	r1, #0
 802900e:	d17f      	bne.n	8029110 <_dtoa_r+0x448>
 8029010:	ed9d 6b02 	vldr	d6, [sp, #8]
 8029014:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8029018:	ed8d 7b02 	vstr	d7, [sp, #8]
 802901c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802901e:	2900      	cmp	r1, #0
 8029020:	f000 80b2 	beq.w	8029188 <_dtoa_r+0x4c0>
 8029024:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8029028:	ed9d 7b02 	vldr	d7, [sp, #8]
 802902c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8029030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029034:	f140 80a8 	bpl.w	8029188 <_dtoa_r+0x4c0>
 8029038:	f1b9 0f00 	cmp.w	r9, #0
 802903c:	f000 80a4 	beq.w	8029188 <_dtoa_r+0x4c0>
 8029040:	f1ba 0f00 	cmp.w	sl, #0
 8029044:	dd31      	ble.n	80290aa <_dtoa_r+0x3e2>
 8029046:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 802904a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802904e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8029052:	f10b 37ff 	add.w	r7, fp, #4294967295
 8029056:	3201      	adds	r2, #1
 8029058:	4650      	mov	r0, sl
 802905a:	ed9d 6b02 	vldr	d6, [sp, #8]
 802905e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8029062:	ee07 2a90 	vmov	s15, r2
 8029066:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802906a:	eea7 5b06 	vfma.f64	d5, d7, d6
 802906e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8029072:	9c03      	ldr	r4, [sp, #12]
 8029074:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8029078:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 802907c:	2800      	cmp	r0, #0
 802907e:	f040 8086 	bne.w	802918e <_dtoa_r+0x4c6>
 8029082:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8029086:	ee36 6b47 	vsub.f64	d6, d6, d7
 802908a:	ec42 1b17 	vmov	d7, r1, r2
 802908e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8029092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029096:	f300 8272 	bgt.w	802957e <_dtoa_r+0x8b6>
 802909a:	eeb1 7b47 	vneg.f64	d7, d7
 802909e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80290a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80290a6:	f100 8267 	bmi.w	8029578 <_dtoa_r+0x8b0>
 80290aa:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80290ae:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80290b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80290b4:	2a00      	cmp	r2, #0
 80290b6:	f2c0 8129 	blt.w	802930c <_dtoa_r+0x644>
 80290ba:	f1bb 0f0e 	cmp.w	fp, #14
 80290be:	f300 8125 	bgt.w	802930c <_dtoa_r+0x644>
 80290c2:	4b90      	ldr	r3, [pc, #576]	; (8029304 <_dtoa_r+0x63c>)
 80290c4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80290c8:	ed93 6b00 	vldr	d6, [r3]
 80290cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80290ce:	2b00      	cmp	r3, #0
 80290d0:	f280 80c3 	bge.w	802925a <_dtoa_r+0x592>
 80290d4:	f1b9 0f00 	cmp.w	r9, #0
 80290d8:	f300 80bf 	bgt.w	802925a <_dtoa_r+0x592>
 80290dc:	f040 824c 	bne.w	8029578 <_dtoa_r+0x8b0>
 80290e0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80290e4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80290e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80290ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80290f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80290f4:	464c      	mov	r4, r9
 80290f6:	464f      	mov	r7, r9
 80290f8:	f280 8222 	bge.w	8029540 <_dtoa_r+0x878>
 80290fc:	f8dd 8000 	ldr.w	r8, [sp]
 8029100:	2331      	movs	r3, #49	; 0x31
 8029102:	f808 3b01 	strb.w	r3, [r8], #1
 8029106:	f10b 0b01 	add.w	fp, fp, #1
 802910a:	e21e      	b.n	802954a <_dtoa_r+0x882>
 802910c:	2202      	movs	r2, #2
 802910e:	e77c      	b.n	802900a <_dtoa_r+0x342>
 8029110:	07cc      	lsls	r4, r1, #31
 8029112:	d504      	bpl.n	802911e <_dtoa_r+0x456>
 8029114:	ed90 6b00 	vldr	d6, [r0]
 8029118:	3201      	adds	r2, #1
 802911a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802911e:	1049      	asrs	r1, r1, #1
 8029120:	3008      	adds	r0, #8
 8029122:	e773      	b.n	802900c <_dtoa_r+0x344>
 8029124:	d02e      	beq.n	8029184 <_dtoa_r+0x4bc>
 8029126:	f1cb 0100 	rsb	r1, fp, #0
 802912a:	4a76      	ldr	r2, [pc, #472]	; (8029304 <_dtoa_r+0x63c>)
 802912c:	f001 000f 	and.w	r0, r1, #15
 8029130:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8029134:	ed92 7b00 	vldr	d7, [r2]
 8029138:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 802913c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8029140:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8029144:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8029148:	e9cd 7802 	strd	r7, r8, [sp, #8]
 802914c:	486e      	ldr	r0, [pc, #440]	; (8029308 <_dtoa_r+0x640>)
 802914e:	1109      	asrs	r1, r1, #4
 8029150:	2400      	movs	r4, #0
 8029152:	2202      	movs	r2, #2
 8029154:	b939      	cbnz	r1, 8029166 <_dtoa_r+0x49e>
 8029156:	2c00      	cmp	r4, #0
 8029158:	f43f af60 	beq.w	802901c <_dtoa_r+0x354>
 802915c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8029160:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8029164:	e75a      	b.n	802901c <_dtoa_r+0x354>
 8029166:	07cf      	lsls	r7, r1, #31
 8029168:	d509      	bpl.n	802917e <_dtoa_r+0x4b6>
 802916a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 802916e:	ed90 7b00 	vldr	d7, [r0]
 8029172:	ee26 7b07 	vmul.f64	d7, d6, d7
 8029176:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 802917a:	3201      	adds	r2, #1
 802917c:	2401      	movs	r4, #1
 802917e:	1049      	asrs	r1, r1, #1
 8029180:	3008      	adds	r0, #8
 8029182:	e7e7      	b.n	8029154 <_dtoa_r+0x48c>
 8029184:	2202      	movs	r2, #2
 8029186:	e749      	b.n	802901c <_dtoa_r+0x354>
 8029188:	465f      	mov	r7, fp
 802918a:	4648      	mov	r0, r9
 802918c:	e765      	b.n	802905a <_dtoa_r+0x392>
 802918e:	ec42 1b17 	vmov	d7, r1, r2
 8029192:	4a5c      	ldr	r2, [pc, #368]	; (8029304 <_dtoa_r+0x63c>)
 8029194:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8029198:	ed12 4b02 	vldr	d4, [r2, #-8]
 802919c:	9a00      	ldr	r2, [sp, #0]
 802919e:	1814      	adds	r4, r2, r0
 80291a0:	9a08      	ldr	r2, [sp, #32]
 80291a2:	b352      	cbz	r2, 80291fa <_dtoa_r+0x532>
 80291a4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80291a8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80291ac:	f8dd 8000 	ldr.w	r8, [sp]
 80291b0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80291b4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80291b8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80291bc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80291c0:	ee14 2a90 	vmov	r2, s9
 80291c4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80291c8:	3230      	adds	r2, #48	; 0x30
 80291ca:	ee36 6b45 	vsub.f64	d6, d6, d5
 80291ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80291d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80291d6:	f808 2b01 	strb.w	r2, [r8], #1
 80291da:	d439      	bmi.n	8029250 <_dtoa_r+0x588>
 80291dc:	ee32 5b46 	vsub.f64	d5, d2, d6
 80291e0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80291e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80291e8:	d472      	bmi.n	80292d0 <_dtoa_r+0x608>
 80291ea:	45a0      	cmp	r8, r4
 80291ec:	f43f af5d 	beq.w	80290aa <_dtoa_r+0x3e2>
 80291f0:	ee27 7b03 	vmul.f64	d7, d7, d3
 80291f4:	ee26 6b03 	vmul.f64	d6, d6, d3
 80291f8:	e7e0      	b.n	80291bc <_dtoa_r+0x4f4>
 80291fa:	f8dd 8000 	ldr.w	r8, [sp]
 80291fe:	ee27 7b04 	vmul.f64	d7, d7, d4
 8029202:	4621      	mov	r1, r4
 8029204:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8029208:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 802920c:	ee14 2a90 	vmov	r2, s9
 8029210:	3230      	adds	r2, #48	; 0x30
 8029212:	f808 2b01 	strb.w	r2, [r8], #1
 8029216:	45a0      	cmp	r8, r4
 8029218:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 802921c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8029220:	d118      	bne.n	8029254 <_dtoa_r+0x58c>
 8029222:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8029226:	ee37 4b05 	vadd.f64	d4, d7, d5
 802922a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 802922e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029232:	dc4d      	bgt.n	80292d0 <_dtoa_r+0x608>
 8029234:	ee35 7b47 	vsub.f64	d7, d5, d7
 8029238:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802923c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029240:	f57f af33 	bpl.w	80290aa <_dtoa_r+0x3e2>
 8029244:	4688      	mov	r8, r1
 8029246:	3901      	subs	r1, #1
 8029248:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 802924c:	2b30      	cmp	r3, #48	; 0x30
 802924e:	d0f9      	beq.n	8029244 <_dtoa_r+0x57c>
 8029250:	46bb      	mov	fp, r7
 8029252:	e02a      	b.n	80292aa <_dtoa_r+0x5e2>
 8029254:	ee26 6b03 	vmul.f64	d6, d6, d3
 8029258:	e7d6      	b.n	8029208 <_dtoa_r+0x540>
 802925a:	ed9d 7b02 	vldr	d7, [sp, #8]
 802925e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8029262:	f8dd 8000 	ldr.w	r8, [sp]
 8029266:	ee87 5b06 	vdiv.f64	d5, d7, d6
 802926a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 802926e:	ee15 3a10 	vmov	r3, s10
 8029272:	3330      	adds	r3, #48	; 0x30
 8029274:	f808 3b01 	strb.w	r3, [r8], #1
 8029278:	9b00      	ldr	r3, [sp, #0]
 802927a:	eba8 0303 	sub.w	r3, r8, r3
 802927e:	4599      	cmp	r9, r3
 8029280:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8029284:	eea3 7b46 	vfms.f64	d7, d3, d6
 8029288:	d133      	bne.n	80292f2 <_dtoa_r+0x62a>
 802928a:	ee37 7b07 	vadd.f64	d7, d7, d7
 802928e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8029292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029296:	dc1a      	bgt.n	80292ce <_dtoa_r+0x606>
 8029298:	eeb4 7b46 	vcmp.f64	d7, d6
 802929c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80292a0:	d103      	bne.n	80292aa <_dtoa_r+0x5e2>
 80292a2:	ee15 3a10 	vmov	r3, s10
 80292a6:	07d9      	lsls	r1, r3, #31
 80292a8:	d411      	bmi.n	80292ce <_dtoa_r+0x606>
 80292aa:	4629      	mov	r1, r5
 80292ac:	4630      	mov	r0, r6
 80292ae:	f001 f897 	bl	802a3e0 <_Bfree>
 80292b2:	2300      	movs	r3, #0
 80292b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80292b6:	f888 3000 	strb.w	r3, [r8]
 80292ba:	f10b 0301 	add.w	r3, fp, #1
 80292be:	6013      	str	r3, [r2, #0]
 80292c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80292c2:	2b00      	cmp	r3, #0
 80292c4:	f43f ad4d 	beq.w	8028d62 <_dtoa_r+0x9a>
 80292c8:	f8c3 8000 	str.w	r8, [r3]
 80292cc:	e549      	b.n	8028d62 <_dtoa_r+0x9a>
 80292ce:	465f      	mov	r7, fp
 80292d0:	4643      	mov	r3, r8
 80292d2:	4698      	mov	r8, r3
 80292d4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80292d8:	2a39      	cmp	r2, #57	; 0x39
 80292da:	d106      	bne.n	80292ea <_dtoa_r+0x622>
 80292dc:	9a00      	ldr	r2, [sp, #0]
 80292de:	429a      	cmp	r2, r3
 80292e0:	d1f7      	bne.n	80292d2 <_dtoa_r+0x60a>
 80292e2:	9900      	ldr	r1, [sp, #0]
 80292e4:	2230      	movs	r2, #48	; 0x30
 80292e6:	3701      	adds	r7, #1
 80292e8:	700a      	strb	r2, [r1, #0]
 80292ea:	781a      	ldrb	r2, [r3, #0]
 80292ec:	3201      	adds	r2, #1
 80292ee:	701a      	strb	r2, [r3, #0]
 80292f0:	e7ae      	b.n	8029250 <_dtoa_r+0x588>
 80292f2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80292f6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80292fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80292fe:	d1b2      	bne.n	8029266 <_dtoa_r+0x59e>
 8029300:	e7d3      	b.n	80292aa <_dtoa_r+0x5e2>
 8029302:	bf00      	nop
 8029304:	0802f840 	.word	0x0802f840
 8029308:	0802f818 	.word	0x0802f818
 802930c:	9908      	ldr	r1, [sp, #32]
 802930e:	2900      	cmp	r1, #0
 8029310:	f000 80d1 	beq.w	80294b6 <_dtoa_r+0x7ee>
 8029314:	9907      	ldr	r1, [sp, #28]
 8029316:	2901      	cmp	r1, #1
 8029318:	f300 80b4 	bgt.w	8029484 <_dtoa_r+0x7bc>
 802931c:	9911      	ldr	r1, [sp, #68]	; 0x44
 802931e:	2900      	cmp	r1, #0
 8029320:	f000 80ac 	beq.w	802947c <_dtoa_r+0x7b4>
 8029324:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8029328:	f8dd 8014 	ldr.w	r8, [sp, #20]
 802932c:	461c      	mov	r4, r3
 802932e:	930a      	str	r3, [sp, #40]	; 0x28
 8029330:	9b05      	ldr	r3, [sp, #20]
 8029332:	4413      	add	r3, r2
 8029334:	9305      	str	r3, [sp, #20]
 8029336:	9b06      	ldr	r3, [sp, #24]
 8029338:	2101      	movs	r1, #1
 802933a:	4413      	add	r3, r2
 802933c:	4630      	mov	r0, r6
 802933e:	9306      	str	r3, [sp, #24]
 8029340:	f001 f954 	bl	802a5ec <__i2b>
 8029344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029346:	4607      	mov	r7, r0
 8029348:	f1b8 0f00 	cmp.w	r8, #0
 802934c:	dd0d      	ble.n	802936a <_dtoa_r+0x6a2>
 802934e:	9a06      	ldr	r2, [sp, #24]
 8029350:	2a00      	cmp	r2, #0
 8029352:	dd0a      	ble.n	802936a <_dtoa_r+0x6a2>
 8029354:	4542      	cmp	r2, r8
 8029356:	9905      	ldr	r1, [sp, #20]
 8029358:	bfa8      	it	ge
 802935a:	4642      	movge	r2, r8
 802935c:	1a89      	subs	r1, r1, r2
 802935e:	9105      	str	r1, [sp, #20]
 8029360:	9906      	ldr	r1, [sp, #24]
 8029362:	eba8 0802 	sub.w	r8, r8, r2
 8029366:	1a8a      	subs	r2, r1, r2
 8029368:	9206      	str	r2, [sp, #24]
 802936a:	b303      	cbz	r3, 80293ae <_dtoa_r+0x6e6>
 802936c:	9a08      	ldr	r2, [sp, #32]
 802936e:	2a00      	cmp	r2, #0
 8029370:	f000 80a6 	beq.w	80294c0 <_dtoa_r+0x7f8>
 8029374:	2c00      	cmp	r4, #0
 8029376:	dd13      	ble.n	80293a0 <_dtoa_r+0x6d8>
 8029378:	4639      	mov	r1, r7
 802937a:	4622      	mov	r2, r4
 802937c:	4630      	mov	r0, r6
 802937e:	930c      	str	r3, [sp, #48]	; 0x30
 8029380:	f001 f9f0 	bl	802a764 <__pow5mult>
 8029384:	462a      	mov	r2, r5
 8029386:	4601      	mov	r1, r0
 8029388:	4607      	mov	r7, r0
 802938a:	4630      	mov	r0, r6
 802938c:	f001 f944 	bl	802a618 <__multiply>
 8029390:	4629      	mov	r1, r5
 8029392:	900a      	str	r0, [sp, #40]	; 0x28
 8029394:	4630      	mov	r0, r6
 8029396:	f001 f823 	bl	802a3e0 <_Bfree>
 802939a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802939c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802939e:	4615      	mov	r5, r2
 80293a0:	1b1a      	subs	r2, r3, r4
 80293a2:	d004      	beq.n	80293ae <_dtoa_r+0x6e6>
 80293a4:	4629      	mov	r1, r5
 80293a6:	4630      	mov	r0, r6
 80293a8:	f001 f9dc 	bl	802a764 <__pow5mult>
 80293ac:	4605      	mov	r5, r0
 80293ae:	2101      	movs	r1, #1
 80293b0:	4630      	mov	r0, r6
 80293b2:	f001 f91b 	bl	802a5ec <__i2b>
 80293b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80293b8:	2b00      	cmp	r3, #0
 80293ba:	4604      	mov	r4, r0
 80293bc:	f340 8082 	ble.w	80294c4 <_dtoa_r+0x7fc>
 80293c0:	461a      	mov	r2, r3
 80293c2:	4601      	mov	r1, r0
 80293c4:	4630      	mov	r0, r6
 80293c6:	f001 f9cd 	bl	802a764 <__pow5mult>
 80293ca:	9b07      	ldr	r3, [sp, #28]
 80293cc:	2b01      	cmp	r3, #1
 80293ce:	4604      	mov	r4, r0
 80293d0:	dd7b      	ble.n	80294ca <_dtoa_r+0x802>
 80293d2:	2300      	movs	r3, #0
 80293d4:	930a      	str	r3, [sp, #40]	; 0x28
 80293d6:	6922      	ldr	r2, [r4, #16]
 80293d8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80293dc:	6910      	ldr	r0, [r2, #16]
 80293de:	f001 f8b5 	bl	802a54c <__hi0bits>
 80293e2:	f1c0 0020 	rsb	r0, r0, #32
 80293e6:	9b06      	ldr	r3, [sp, #24]
 80293e8:	4418      	add	r0, r3
 80293ea:	f010 001f 	ands.w	r0, r0, #31
 80293ee:	f000 808d 	beq.w	802950c <_dtoa_r+0x844>
 80293f2:	f1c0 0220 	rsb	r2, r0, #32
 80293f6:	2a04      	cmp	r2, #4
 80293f8:	f340 8086 	ble.w	8029508 <_dtoa_r+0x840>
 80293fc:	f1c0 001c 	rsb	r0, r0, #28
 8029400:	9b05      	ldr	r3, [sp, #20]
 8029402:	4403      	add	r3, r0
 8029404:	9305      	str	r3, [sp, #20]
 8029406:	9b06      	ldr	r3, [sp, #24]
 8029408:	4403      	add	r3, r0
 802940a:	4480      	add	r8, r0
 802940c:	9306      	str	r3, [sp, #24]
 802940e:	9b05      	ldr	r3, [sp, #20]
 8029410:	2b00      	cmp	r3, #0
 8029412:	dd05      	ble.n	8029420 <_dtoa_r+0x758>
 8029414:	4629      	mov	r1, r5
 8029416:	461a      	mov	r2, r3
 8029418:	4630      	mov	r0, r6
 802941a:	f001 f9fd 	bl	802a818 <__lshift>
 802941e:	4605      	mov	r5, r0
 8029420:	9b06      	ldr	r3, [sp, #24]
 8029422:	2b00      	cmp	r3, #0
 8029424:	dd05      	ble.n	8029432 <_dtoa_r+0x76a>
 8029426:	4621      	mov	r1, r4
 8029428:	461a      	mov	r2, r3
 802942a:	4630      	mov	r0, r6
 802942c:	f001 f9f4 	bl	802a818 <__lshift>
 8029430:	4604      	mov	r4, r0
 8029432:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8029434:	2b00      	cmp	r3, #0
 8029436:	d06b      	beq.n	8029510 <_dtoa_r+0x848>
 8029438:	4621      	mov	r1, r4
 802943a:	4628      	mov	r0, r5
 802943c:	f001 fa58 	bl	802a8f0 <__mcmp>
 8029440:	2800      	cmp	r0, #0
 8029442:	da65      	bge.n	8029510 <_dtoa_r+0x848>
 8029444:	2300      	movs	r3, #0
 8029446:	4629      	mov	r1, r5
 8029448:	220a      	movs	r2, #10
 802944a:	4630      	mov	r0, r6
 802944c:	f000 ffea 	bl	802a424 <__multadd>
 8029450:	9b08      	ldr	r3, [sp, #32]
 8029452:	f10b 3bff 	add.w	fp, fp, #4294967295
 8029456:	4605      	mov	r5, r0
 8029458:	2b00      	cmp	r3, #0
 802945a:	f000 8192 	beq.w	8029782 <_dtoa_r+0xaba>
 802945e:	4639      	mov	r1, r7
 8029460:	2300      	movs	r3, #0
 8029462:	220a      	movs	r2, #10
 8029464:	4630      	mov	r0, r6
 8029466:	f000 ffdd 	bl	802a424 <__multadd>
 802946a:	f1ba 0f00 	cmp.w	sl, #0
 802946e:	4607      	mov	r7, r0
 8029470:	f300 808e 	bgt.w	8029590 <_dtoa_r+0x8c8>
 8029474:	9b07      	ldr	r3, [sp, #28]
 8029476:	2b02      	cmp	r3, #2
 8029478:	dc51      	bgt.n	802951e <_dtoa_r+0x856>
 802947a:	e089      	b.n	8029590 <_dtoa_r+0x8c8>
 802947c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802947e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8029482:	e751      	b.n	8029328 <_dtoa_r+0x660>
 8029484:	f109 34ff 	add.w	r4, r9, #4294967295
 8029488:	42a3      	cmp	r3, r4
 802948a:	bfbf      	itttt	lt
 802948c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 802948e:	1ae3      	sublt	r3, r4, r3
 8029490:	18d2      	addlt	r2, r2, r3
 8029492:	4613      	movlt	r3, r2
 8029494:	bfb7      	itett	lt
 8029496:	930e      	strlt	r3, [sp, #56]	; 0x38
 8029498:	1b1c      	subge	r4, r3, r4
 802949a:	4623      	movlt	r3, r4
 802949c:	2400      	movlt	r4, #0
 802949e:	f1b9 0f00 	cmp.w	r9, #0
 80294a2:	bfb5      	itete	lt
 80294a4:	9a05      	ldrlt	r2, [sp, #20]
 80294a6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 80294aa:	eba2 0809 	sublt.w	r8, r2, r9
 80294ae:	464a      	movge	r2, r9
 80294b0:	bfb8      	it	lt
 80294b2:	2200      	movlt	r2, #0
 80294b4:	e73b      	b.n	802932e <_dtoa_r+0x666>
 80294b6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80294ba:	9f08      	ldr	r7, [sp, #32]
 80294bc:	461c      	mov	r4, r3
 80294be:	e743      	b.n	8029348 <_dtoa_r+0x680>
 80294c0:	461a      	mov	r2, r3
 80294c2:	e76f      	b.n	80293a4 <_dtoa_r+0x6dc>
 80294c4:	9b07      	ldr	r3, [sp, #28]
 80294c6:	2b01      	cmp	r3, #1
 80294c8:	dc18      	bgt.n	80294fc <_dtoa_r+0x834>
 80294ca:	9b02      	ldr	r3, [sp, #8]
 80294cc:	b9b3      	cbnz	r3, 80294fc <_dtoa_r+0x834>
 80294ce:	9b03      	ldr	r3, [sp, #12]
 80294d0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80294d4:	b9a2      	cbnz	r2, 8029500 <_dtoa_r+0x838>
 80294d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80294da:	0d12      	lsrs	r2, r2, #20
 80294dc:	0512      	lsls	r2, r2, #20
 80294de:	b18a      	cbz	r2, 8029504 <_dtoa_r+0x83c>
 80294e0:	9b05      	ldr	r3, [sp, #20]
 80294e2:	3301      	adds	r3, #1
 80294e4:	9305      	str	r3, [sp, #20]
 80294e6:	9b06      	ldr	r3, [sp, #24]
 80294e8:	3301      	adds	r3, #1
 80294ea:	9306      	str	r3, [sp, #24]
 80294ec:	2301      	movs	r3, #1
 80294ee:	930a      	str	r3, [sp, #40]	; 0x28
 80294f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80294f2:	2b00      	cmp	r3, #0
 80294f4:	f47f af6f 	bne.w	80293d6 <_dtoa_r+0x70e>
 80294f8:	2001      	movs	r0, #1
 80294fa:	e774      	b.n	80293e6 <_dtoa_r+0x71e>
 80294fc:	2300      	movs	r3, #0
 80294fe:	e7f6      	b.n	80294ee <_dtoa_r+0x826>
 8029500:	9b02      	ldr	r3, [sp, #8]
 8029502:	e7f4      	b.n	80294ee <_dtoa_r+0x826>
 8029504:	920a      	str	r2, [sp, #40]	; 0x28
 8029506:	e7f3      	b.n	80294f0 <_dtoa_r+0x828>
 8029508:	d081      	beq.n	802940e <_dtoa_r+0x746>
 802950a:	4610      	mov	r0, r2
 802950c:	301c      	adds	r0, #28
 802950e:	e777      	b.n	8029400 <_dtoa_r+0x738>
 8029510:	f1b9 0f00 	cmp.w	r9, #0
 8029514:	dc37      	bgt.n	8029586 <_dtoa_r+0x8be>
 8029516:	9b07      	ldr	r3, [sp, #28]
 8029518:	2b02      	cmp	r3, #2
 802951a:	dd34      	ble.n	8029586 <_dtoa_r+0x8be>
 802951c:	46ca      	mov	sl, r9
 802951e:	f1ba 0f00 	cmp.w	sl, #0
 8029522:	d10d      	bne.n	8029540 <_dtoa_r+0x878>
 8029524:	4621      	mov	r1, r4
 8029526:	4653      	mov	r3, sl
 8029528:	2205      	movs	r2, #5
 802952a:	4630      	mov	r0, r6
 802952c:	f000 ff7a 	bl	802a424 <__multadd>
 8029530:	4601      	mov	r1, r0
 8029532:	4604      	mov	r4, r0
 8029534:	4628      	mov	r0, r5
 8029536:	f001 f9db 	bl	802a8f0 <__mcmp>
 802953a:	2800      	cmp	r0, #0
 802953c:	f73f adde 	bgt.w	80290fc <_dtoa_r+0x434>
 8029540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029542:	f8dd 8000 	ldr.w	r8, [sp]
 8029546:	ea6f 0b03 	mvn.w	fp, r3
 802954a:	f04f 0900 	mov.w	r9, #0
 802954e:	4621      	mov	r1, r4
 8029550:	4630      	mov	r0, r6
 8029552:	f000 ff45 	bl	802a3e0 <_Bfree>
 8029556:	2f00      	cmp	r7, #0
 8029558:	f43f aea7 	beq.w	80292aa <_dtoa_r+0x5e2>
 802955c:	f1b9 0f00 	cmp.w	r9, #0
 8029560:	d005      	beq.n	802956e <_dtoa_r+0x8a6>
 8029562:	45b9      	cmp	r9, r7
 8029564:	d003      	beq.n	802956e <_dtoa_r+0x8a6>
 8029566:	4649      	mov	r1, r9
 8029568:	4630      	mov	r0, r6
 802956a:	f000 ff39 	bl	802a3e0 <_Bfree>
 802956e:	4639      	mov	r1, r7
 8029570:	4630      	mov	r0, r6
 8029572:	f000 ff35 	bl	802a3e0 <_Bfree>
 8029576:	e698      	b.n	80292aa <_dtoa_r+0x5e2>
 8029578:	2400      	movs	r4, #0
 802957a:	4627      	mov	r7, r4
 802957c:	e7e0      	b.n	8029540 <_dtoa_r+0x878>
 802957e:	46bb      	mov	fp, r7
 8029580:	4604      	mov	r4, r0
 8029582:	4607      	mov	r7, r0
 8029584:	e5ba      	b.n	80290fc <_dtoa_r+0x434>
 8029586:	9b08      	ldr	r3, [sp, #32]
 8029588:	46ca      	mov	sl, r9
 802958a:	2b00      	cmp	r3, #0
 802958c:	f000 8100 	beq.w	8029790 <_dtoa_r+0xac8>
 8029590:	f1b8 0f00 	cmp.w	r8, #0
 8029594:	dd05      	ble.n	80295a2 <_dtoa_r+0x8da>
 8029596:	4639      	mov	r1, r7
 8029598:	4642      	mov	r2, r8
 802959a:	4630      	mov	r0, r6
 802959c:	f001 f93c 	bl	802a818 <__lshift>
 80295a0:	4607      	mov	r7, r0
 80295a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80295a4:	2b00      	cmp	r3, #0
 80295a6:	d05d      	beq.n	8029664 <_dtoa_r+0x99c>
 80295a8:	6879      	ldr	r1, [r7, #4]
 80295aa:	4630      	mov	r0, r6
 80295ac:	f000 fed8 	bl	802a360 <_Balloc>
 80295b0:	4680      	mov	r8, r0
 80295b2:	b928      	cbnz	r0, 80295c0 <_dtoa_r+0x8f8>
 80295b4:	4b82      	ldr	r3, [pc, #520]	; (80297c0 <_dtoa_r+0xaf8>)
 80295b6:	4602      	mov	r2, r0
 80295b8:	f240 21ea 	movw	r1, #746	; 0x2ea
 80295bc:	f7ff bb9a 	b.w	8028cf4 <_dtoa_r+0x2c>
 80295c0:	693a      	ldr	r2, [r7, #16]
 80295c2:	3202      	adds	r2, #2
 80295c4:	0092      	lsls	r2, r2, #2
 80295c6:	f107 010c 	add.w	r1, r7, #12
 80295ca:	300c      	adds	r0, #12
 80295cc:	f7fd fa76 	bl	8026abc <memcpy>
 80295d0:	2201      	movs	r2, #1
 80295d2:	4641      	mov	r1, r8
 80295d4:	4630      	mov	r0, r6
 80295d6:	f001 f91f 	bl	802a818 <__lshift>
 80295da:	9b00      	ldr	r3, [sp, #0]
 80295dc:	3301      	adds	r3, #1
 80295de:	9305      	str	r3, [sp, #20]
 80295e0:	9b00      	ldr	r3, [sp, #0]
 80295e2:	4453      	add	r3, sl
 80295e4:	9309      	str	r3, [sp, #36]	; 0x24
 80295e6:	9b02      	ldr	r3, [sp, #8]
 80295e8:	f003 0301 	and.w	r3, r3, #1
 80295ec:	46b9      	mov	r9, r7
 80295ee:	9308      	str	r3, [sp, #32]
 80295f0:	4607      	mov	r7, r0
 80295f2:	9b05      	ldr	r3, [sp, #20]
 80295f4:	4621      	mov	r1, r4
 80295f6:	3b01      	subs	r3, #1
 80295f8:	4628      	mov	r0, r5
 80295fa:	9302      	str	r3, [sp, #8]
 80295fc:	f7ff fad8 	bl	8028bb0 <quorem>
 8029600:	4603      	mov	r3, r0
 8029602:	3330      	adds	r3, #48	; 0x30
 8029604:	9006      	str	r0, [sp, #24]
 8029606:	4649      	mov	r1, r9
 8029608:	4628      	mov	r0, r5
 802960a:	930a      	str	r3, [sp, #40]	; 0x28
 802960c:	f001 f970 	bl	802a8f0 <__mcmp>
 8029610:	463a      	mov	r2, r7
 8029612:	4682      	mov	sl, r0
 8029614:	4621      	mov	r1, r4
 8029616:	4630      	mov	r0, r6
 8029618:	f001 f986 	bl	802a928 <__mdiff>
 802961c:	68c2      	ldr	r2, [r0, #12]
 802961e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029620:	4680      	mov	r8, r0
 8029622:	bb0a      	cbnz	r2, 8029668 <_dtoa_r+0x9a0>
 8029624:	4601      	mov	r1, r0
 8029626:	4628      	mov	r0, r5
 8029628:	f001 f962 	bl	802a8f0 <__mcmp>
 802962c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802962e:	4602      	mov	r2, r0
 8029630:	4641      	mov	r1, r8
 8029632:	4630      	mov	r0, r6
 8029634:	920e      	str	r2, [sp, #56]	; 0x38
 8029636:	930a      	str	r3, [sp, #40]	; 0x28
 8029638:	f000 fed2 	bl	802a3e0 <_Bfree>
 802963c:	9b07      	ldr	r3, [sp, #28]
 802963e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8029640:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8029644:	ea43 0102 	orr.w	r1, r3, r2
 8029648:	9b08      	ldr	r3, [sp, #32]
 802964a:	430b      	orrs	r3, r1
 802964c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802964e:	d10d      	bne.n	802966c <_dtoa_r+0x9a4>
 8029650:	2b39      	cmp	r3, #57	; 0x39
 8029652:	d029      	beq.n	80296a8 <_dtoa_r+0x9e0>
 8029654:	f1ba 0f00 	cmp.w	sl, #0
 8029658:	dd01      	ble.n	802965e <_dtoa_r+0x996>
 802965a:	9b06      	ldr	r3, [sp, #24]
 802965c:	3331      	adds	r3, #49	; 0x31
 802965e:	9a02      	ldr	r2, [sp, #8]
 8029660:	7013      	strb	r3, [r2, #0]
 8029662:	e774      	b.n	802954e <_dtoa_r+0x886>
 8029664:	4638      	mov	r0, r7
 8029666:	e7b8      	b.n	80295da <_dtoa_r+0x912>
 8029668:	2201      	movs	r2, #1
 802966a:	e7e1      	b.n	8029630 <_dtoa_r+0x968>
 802966c:	f1ba 0f00 	cmp.w	sl, #0
 8029670:	db06      	blt.n	8029680 <_dtoa_r+0x9b8>
 8029672:	9907      	ldr	r1, [sp, #28]
 8029674:	ea41 0a0a 	orr.w	sl, r1, sl
 8029678:	9908      	ldr	r1, [sp, #32]
 802967a:	ea5a 0101 	orrs.w	r1, sl, r1
 802967e:	d120      	bne.n	80296c2 <_dtoa_r+0x9fa>
 8029680:	2a00      	cmp	r2, #0
 8029682:	ddec      	ble.n	802965e <_dtoa_r+0x996>
 8029684:	4629      	mov	r1, r5
 8029686:	2201      	movs	r2, #1
 8029688:	4630      	mov	r0, r6
 802968a:	9305      	str	r3, [sp, #20]
 802968c:	f001 f8c4 	bl	802a818 <__lshift>
 8029690:	4621      	mov	r1, r4
 8029692:	4605      	mov	r5, r0
 8029694:	f001 f92c 	bl	802a8f0 <__mcmp>
 8029698:	2800      	cmp	r0, #0
 802969a:	9b05      	ldr	r3, [sp, #20]
 802969c:	dc02      	bgt.n	80296a4 <_dtoa_r+0x9dc>
 802969e:	d1de      	bne.n	802965e <_dtoa_r+0x996>
 80296a0:	07da      	lsls	r2, r3, #31
 80296a2:	d5dc      	bpl.n	802965e <_dtoa_r+0x996>
 80296a4:	2b39      	cmp	r3, #57	; 0x39
 80296a6:	d1d8      	bne.n	802965a <_dtoa_r+0x992>
 80296a8:	9a02      	ldr	r2, [sp, #8]
 80296aa:	2339      	movs	r3, #57	; 0x39
 80296ac:	7013      	strb	r3, [r2, #0]
 80296ae:	4643      	mov	r3, r8
 80296b0:	4698      	mov	r8, r3
 80296b2:	3b01      	subs	r3, #1
 80296b4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80296b8:	2a39      	cmp	r2, #57	; 0x39
 80296ba:	d051      	beq.n	8029760 <_dtoa_r+0xa98>
 80296bc:	3201      	adds	r2, #1
 80296be:	701a      	strb	r2, [r3, #0]
 80296c0:	e745      	b.n	802954e <_dtoa_r+0x886>
 80296c2:	2a00      	cmp	r2, #0
 80296c4:	dd03      	ble.n	80296ce <_dtoa_r+0xa06>
 80296c6:	2b39      	cmp	r3, #57	; 0x39
 80296c8:	d0ee      	beq.n	80296a8 <_dtoa_r+0x9e0>
 80296ca:	3301      	adds	r3, #1
 80296cc:	e7c7      	b.n	802965e <_dtoa_r+0x996>
 80296ce:	9a05      	ldr	r2, [sp, #20]
 80296d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80296d2:	f802 3c01 	strb.w	r3, [r2, #-1]
 80296d6:	428a      	cmp	r2, r1
 80296d8:	d02b      	beq.n	8029732 <_dtoa_r+0xa6a>
 80296da:	4629      	mov	r1, r5
 80296dc:	2300      	movs	r3, #0
 80296de:	220a      	movs	r2, #10
 80296e0:	4630      	mov	r0, r6
 80296e2:	f000 fe9f 	bl	802a424 <__multadd>
 80296e6:	45b9      	cmp	r9, r7
 80296e8:	4605      	mov	r5, r0
 80296ea:	f04f 0300 	mov.w	r3, #0
 80296ee:	f04f 020a 	mov.w	r2, #10
 80296f2:	4649      	mov	r1, r9
 80296f4:	4630      	mov	r0, r6
 80296f6:	d107      	bne.n	8029708 <_dtoa_r+0xa40>
 80296f8:	f000 fe94 	bl	802a424 <__multadd>
 80296fc:	4681      	mov	r9, r0
 80296fe:	4607      	mov	r7, r0
 8029700:	9b05      	ldr	r3, [sp, #20]
 8029702:	3301      	adds	r3, #1
 8029704:	9305      	str	r3, [sp, #20]
 8029706:	e774      	b.n	80295f2 <_dtoa_r+0x92a>
 8029708:	f000 fe8c 	bl	802a424 <__multadd>
 802970c:	4639      	mov	r1, r7
 802970e:	4681      	mov	r9, r0
 8029710:	2300      	movs	r3, #0
 8029712:	220a      	movs	r2, #10
 8029714:	4630      	mov	r0, r6
 8029716:	f000 fe85 	bl	802a424 <__multadd>
 802971a:	4607      	mov	r7, r0
 802971c:	e7f0      	b.n	8029700 <_dtoa_r+0xa38>
 802971e:	f1ba 0f00 	cmp.w	sl, #0
 8029722:	9a00      	ldr	r2, [sp, #0]
 8029724:	bfcc      	ite	gt
 8029726:	46d0      	movgt	r8, sl
 8029728:	f04f 0801 	movle.w	r8, #1
 802972c:	4490      	add	r8, r2
 802972e:	f04f 0900 	mov.w	r9, #0
 8029732:	4629      	mov	r1, r5
 8029734:	2201      	movs	r2, #1
 8029736:	4630      	mov	r0, r6
 8029738:	9302      	str	r3, [sp, #8]
 802973a:	f001 f86d 	bl	802a818 <__lshift>
 802973e:	4621      	mov	r1, r4
 8029740:	4605      	mov	r5, r0
 8029742:	f001 f8d5 	bl	802a8f0 <__mcmp>
 8029746:	2800      	cmp	r0, #0
 8029748:	dcb1      	bgt.n	80296ae <_dtoa_r+0x9e6>
 802974a:	d102      	bne.n	8029752 <_dtoa_r+0xa8a>
 802974c:	9b02      	ldr	r3, [sp, #8]
 802974e:	07db      	lsls	r3, r3, #31
 8029750:	d4ad      	bmi.n	80296ae <_dtoa_r+0x9e6>
 8029752:	4643      	mov	r3, r8
 8029754:	4698      	mov	r8, r3
 8029756:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802975a:	2a30      	cmp	r2, #48	; 0x30
 802975c:	d0fa      	beq.n	8029754 <_dtoa_r+0xa8c>
 802975e:	e6f6      	b.n	802954e <_dtoa_r+0x886>
 8029760:	9a00      	ldr	r2, [sp, #0]
 8029762:	429a      	cmp	r2, r3
 8029764:	d1a4      	bne.n	80296b0 <_dtoa_r+0x9e8>
 8029766:	f10b 0b01 	add.w	fp, fp, #1
 802976a:	2331      	movs	r3, #49	; 0x31
 802976c:	e778      	b.n	8029660 <_dtoa_r+0x998>
 802976e:	4b15      	ldr	r3, [pc, #84]	; (80297c4 <_dtoa_r+0xafc>)
 8029770:	f7ff bb12 	b.w	8028d98 <_dtoa_r+0xd0>
 8029774:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8029776:	2b00      	cmp	r3, #0
 8029778:	f47f aaee 	bne.w	8028d58 <_dtoa_r+0x90>
 802977c:	4b12      	ldr	r3, [pc, #72]	; (80297c8 <_dtoa_r+0xb00>)
 802977e:	f7ff bb0b 	b.w	8028d98 <_dtoa_r+0xd0>
 8029782:	f1ba 0f00 	cmp.w	sl, #0
 8029786:	dc03      	bgt.n	8029790 <_dtoa_r+0xac8>
 8029788:	9b07      	ldr	r3, [sp, #28]
 802978a:	2b02      	cmp	r3, #2
 802978c:	f73f aec7 	bgt.w	802951e <_dtoa_r+0x856>
 8029790:	f8dd 8000 	ldr.w	r8, [sp]
 8029794:	4621      	mov	r1, r4
 8029796:	4628      	mov	r0, r5
 8029798:	f7ff fa0a 	bl	8028bb0 <quorem>
 802979c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80297a0:	f808 3b01 	strb.w	r3, [r8], #1
 80297a4:	9a00      	ldr	r2, [sp, #0]
 80297a6:	eba8 0202 	sub.w	r2, r8, r2
 80297aa:	4592      	cmp	sl, r2
 80297ac:	ddb7      	ble.n	802971e <_dtoa_r+0xa56>
 80297ae:	4629      	mov	r1, r5
 80297b0:	2300      	movs	r3, #0
 80297b2:	220a      	movs	r2, #10
 80297b4:	4630      	mov	r0, r6
 80297b6:	f000 fe35 	bl	802a424 <__multadd>
 80297ba:	4605      	mov	r5, r0
 80297bc:	e7ea      	b.n	8029794 <_dtoa_r+0xacc>
 80297be:	bf00      	nop
 80297c0:	0802f6c4 	.word	0x0802f6c4
 80297c4:	0802e7ca 	.word	0x0802e7ca
 80297c8:	0802f641 	.word	0x0802f641

080297cc <__sflush_r>:
 80297cc:	898a      	ldrh	r2, [r1, #12]
 80297ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80297d2:	4605      	mov	r5, r0
 80297d4:	0710      	lsls	r0, r2, #28
 80297d6:	460c      	mov	r4, r1
 80297d8:	d458      	bmi.n	802988c <__sflush_r+0xc0>
 80297da:	684b      	ldr	r3, [r1, #4]
 80297dc:	2b00      	cmp	r3, #0
 80297de:	dc05      	bgt.n	80297ec <__sflush_r+0x20>
 80297e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80297e2:	2b00      	cmp	r3, #0
 80297e4:	dc02      	bgt.n	80297ec <__sflush_r+0x20>
 80297e6:	2000      	movs	r0, #0
 80297e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80297ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80297ee:	2e00      	cmp	r6, #0
 80297f0:	d0f9      	beq.n	80297e6 <__sflush_r+0x1a>
 80297f2:	2300      	movs	r3, #0
 80297f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80297f8:	682f      	ldr	r7, [r5, #0]
 80297fa:	602b      	str	r3, [r5, #0]
 80297fc:	d032      	beq.n	8029864 <__sflush_r+0x98>
 80297fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8029800:	89a3      	ldrh	r3, [r4, #12]
 8029802:	075a      	lsls	r2, r3, #29
 8029804:	d505      	bpl.n	8029812 <__sflush_r+0x46>
 8029806:	6863      	ldr	r3, [r4, #4]
 8029808:	1ac0      	subs	r0, r0, r3
 802980a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802980c:	b10b      	cbz	r3, 8029812 <__sflush_r+0x46>
 802980e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8029810:	1ac0      	subs	r0, r0, r3
 8029812:	2300      	movs	r3, #0
 8029814:	4602      	mov	r2, r0
 8029816:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8029818:	6a21      	ldr	r1, [r4, #32]
 802981a:	4628      	mov	r0, r5
 802981c:	47b0      	blx	r6
 802981e:	1c43      	adds	r3, r0, #1
 8029820:	89a3      	ldrh	r3, [r4, #12]
 8029822:	d106      	bne.n	8029832 <__sflush_r+0x66>
 8029824:	6829      	ldr	r1, [r5, #0]
 8029826:	291d      	cmp	r1, #29
 8029828:	d82c      	bhi.n	8029884 <__sflush_r+0xb8>
 802982a:	4a2a      	ldr	r2, [pc, #168]	; (80298d4 <__sflush_r+0x108>)
 802982c:	40ca      	lsrs	r2, r1
 802982e:	07d6      	lsls	r6, r2, #31
 8029830:	d528      	bpl.n	8029884 <__sflush_r+0xb8>
 8029832:	2200      	movs	r2, #0
 8029834:	6062      	str	r2, [r4, #4]
 8029836:	04d9      	lsls	r1, r3, #19
 8029838:	6922      	ldr	r2, [r4, #16]
 802983a:	6022      	str	r2, [r4, #0]
 802983c:	d504      	bpl.n	8029848 <__sflush_r+0x7c>
 802983e:	1c42      	adds	r2, r0, #1
 8029840:	d101      	bne.n	8029846 <__sflush_r+0x7a>
 8029842:	682b      	ldr	r3, [r5, #0]
 8029844:	b903      	cbnz	r3, 8029848 <__sflush_r+0x7c>
 8029846:	6560      	str	r0, [r4, #84]	; 0x54
 8029848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802984a:	602f      	str	r7, [r5, #0]
 802984c:	2900      	cmp	r1, #0
 802984e:	d0ca      	beq.n	80297e6 <__sflush_r+0x1a>
 8029850:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029854:	4299      	cmp	r1, r3
 8029856:	d002      	beq.n	802985e <__sflush_r+0x92>
 8029858:	4628      	mov	r0, r5
 802985a:	f7fd f945 	bl	8026ae8 <_free_r>
 802985e:	2000      	movs	r0, #0
 8029860:	6360      	str	r0, [r4, #52]	; 0x34
 8029862:	e7c1      	b.n	80297e8 <__sflush_r+0x1c>
 8029864:	6a21      	ldr	r1, [r4, #32]
 8029866:	2301      	movs	r3, #1
 8029868:	4628      	mov	r0, r5
 802986a:	47b0      	blx	r6
 802986c:	1c41      	adds	r1, r0, #1
 802986e:	d1c7      	bne.n	8029800 <__sflush_r+0x34>
 8029870:	682b      	ldr	r3, [r5, #0]
 8029872:	2b00      	cmp	r3, #0
 8029874:	d0c4      	beq.n	8029800 <__sflush_r+0x34>
 8029876:	2b1d      	cmp	r3, #29
 8029878:	d001      	beq.n	802987e <__sflush_r+0xb2>
 802987a:	2b16      	cmp	r3, #22
 802987c:	d101      	bne.n	8029882 <__sflush_r+0xb6>
 802987e:	602f      	str	r7, [r5, #0]
 8029880:	e7b1      	b.n	80297e6 <__sflush_r+0x1a>
 8029882:	89a3      	ldrh	r3, [r4, #12]
 8029884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029888:	81a3      	strh	r3, [r4, #12]
 802988a:	e7ad      	b.n	80297e8 <__sflush_r+0x1c>
 802988c:	690f      	ldr	r7, [r1, #16]
 802988e:	2f00      	cmp	r7, #0
 8029890:	d0a9      	beq.n	80297e6 <__sflush_r+0x1a>
 8029892:	0793      	lsls	r3, r2, #30
 8029894:	680e      	ldr	r6, [r1, #0]
 8029896:	bf08      	it	eq
 8029898:	694b      	ldreq	r3, [r1, #20]
 802989a:	600f      	str	r7, [r1, #0]
 802989c:	bf18      	it	ne
 802989e:	2300      	movne	r3, #0
 80298a0:	eba6 0807 	sub.w	r8, r6, r7
 80298a4:	608b      	str	r3, [r1, #8]
 80298a6:	f1b8 0f00 	cmp.w	r8, #0
 80298aa:	dd9c      	ble.n	80297e6 <__sflush_r+0x1a>
 80298ac:	6a21      	ldr	r1, [r4, #32]
 80298ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80298b0:	4643      	mov	r3, r8
 80298b2:	463a      	mov	r2, r7
 80298b4:	4628      	mov	r0, r5
 80298b6:	47b0      	blx	r6
 80298b8:	2800      	cmp	r0, #0
 80298ba:	dc06      	bgt.n	80298ca <__sflush_r+0xfe>
 80298bc:	89a3      	ldrh	r3, [r4, #12]
 80298be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80298c2:	81a3      	strh	r3, [r4, #12]
 80298c4:	f04f 30ff 	mov.w	r0, #4294967295
 80298c8:	e78e      	b.n	80297e8 <__sflush_r+0x1c>
 80298ca:	4407      	add	r7, r0
 80298cc:	eba8 0800 	sub.w	r8, r8, r0
 80298d0:	e7e9      	b.n	80298a6 <__sflush_r+0xda>
 80298d2:	bf00      	nop
 80298d4:	20400001 	.word	0x20400001

080298d8 <_fflush_r>:
 80298d8:	b538      	push	{r3, r4, r5, lr}
 80298da:	690b      	ldr	r3, [r1, #16]
 80298dc:	4605      	mov	r5, r0
 80298de:	460c      	mov	r4, r1
 80298e0:	b913      	cbnz	r3, 80298e8 <_fflush_r+0x10>
 80298e2:	2500      	movs	r5, #0
 80298e4:	4628      	mov	r0, r5
 80298e6:	bd38      	pop	{r3, r4, r5, pc}
 80298e8:	b118      	cbz	r0, 80298f2 <_fflush_r+0x1a>
 80298ea:	6983      	ldr	r3, [r0, #24]
 80298ec:	b90b      	cbnz	r3, 80298f2 <_fflush_r+0x1a>
 80298ee:	f000 f887 	bl	8029a00 <__sinit>
 80298f2:	4b14      	ldr	r3, [pc, #80]	; (8029944 <_fflush_r+0x6c>)
 80298f4:	429c      	cmp	r4, r3
 80298f6:	d11b      	bne.n	8029930 <_fflush_r+0x58>
 80298f8:	686c      	ldr	r4, [r5, #4]
 80298fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80298fe:	2b00      	cmp	r3, #0
 8029900:	d0ef      	beq.n	80298e2 <_fflush_r+0xa>
 8029902:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8029904:	07d0      	lsls	r0, r2, #31
 8029906:	d404      	bmi.n	8029912 <_fflush_r+0x3a>
 8029908:	0599      	lsls	r1, r3, #22
 802990a:	d402      	bmi.n	8029912 <_fflush_r+0x3a>
 802990c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802990e:	f000 fc88 	bl	802a222 <__retarget_lock_acquire_recursive>
 8029912:	4628      	mov	r0, r5
 8029914:	4621      	mov	r1, r4
 8029916:	f7ff ff59 	bl	80297cc <__sflush_r>
 802991a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802991c:	07da      	lsls	r2, r3, #31
 802991e:	4605      	mov	r5, r0
 8029920:	d4e0      	bmi.n	80298e4 <_fflush_r+0xc>
 8029922:	89a3      	ldrh	r3, [r4, #12]
 8029924:	059b      	lsls	r3, r3, #22
 8029926:	d4dd      	bmi.n	80298e4 <_fflush_r+0xc>
 8029928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802992a:	f000 fc7c 	bl	802a226 <__retarget_lock_release_recursive>
 802992e:	e7d9      	b.n	80298e4 <_fflush_r+0xc>
 8029930:	4b05      	ldr	r3, [pc, #20]	; (8029948 <_fflush_r+0x70>)
 8029932:	429c      	cmp	r4, r3
 8029934:	d101      	bne.n	802993a <_fflush_r+0x62>
 8029936:	68ac      	ldr	r4, [r5, #8]
 8029938:	e7df      	b.n	80298fa <_fflush_r+0x22>
 802993a:	4b04      	ldr	r3, [pc, #16]	; (802994c <_fflush_r+0x74>)
 802993c:	429c      	cmp	r4, r3
 802993e:	bf08      	it	eq
 8029940:	68ec      	ldreq	r4, [r5, #12]
 8029942:	e7da      	b.n	80298fa <_fflush_r+0x22>
 8029944:	0802f6f8 	.word	0x0802f6f8
 8029948:	0802f718 	.word	0x0802f718
 802994c:	0802f6d8 	.word	0x0802f6d8

08029950 <std>:
 8029950:	2300      	movs	r3, #0
 8029952:	b510      	push	{r4, lr}
 8029954:	4604      	mov	r4, r0
 8029956:	e9c0 3300 	strd	r3, r3, [r0]
 802995a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802995e:	6083      	str	r3, [r0, #8]
 8029960:	8181      	strh	r1, [r0, #12]
 8029962:	6643      	str	r3, [r0, #100]	; 0x64
 8029964:	81c2      	strh	r2, [r0, #14]
 8029966:	6183      	str	r3, [r0, #24]
 8029968:	4619      	mov	r1, r3
 802996a:	2208      	movs	r2, #8
 802996c:	305c      	adds	r0, #92	; 0x5c
 802996e:	f7fd f8b3 	bl	8026ad8 <memset>
 8029972:	4b05      	ldr	r3, [pc, #20]	; (8029988 <std+0x38>)
 8029974:	6263      	str	r3, [r4, #36]	; 0x24
 8029976:	4b05      	ldr	r3, [pc, #20]	; (802998c <std+0x3c>)
 8029978:	62a3      	str	r3, [r4, #40]	; 0x28
 802997a:	4b05      	ldr	r3, [pc, #20]	; (8029990 <std+0x40>)
 802997c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802997e:	4b05      	ldr	r3, [pc, #20]	; (8029994 <std+0x44>)
 8029980:	6224      	str	r4, [r4, #32]
 8029982:	6323      	str	r3, [r4, #48]	; 0x30
 8029984:	bd10      	pop	{r4, pc}
 8029986:	bf00      	nop
 8029988:	0802b009 	.word	0x0802b009
 802998c:	0802b02b 	.word	0x0802b02b
 8029990:	0802b063 	.word	0x0802b063
 8029994:	0802b087 	.word	0x0802b087

08029998 <_cleanup_r>:
 8029998:	4901      	ldr	r1, [pc, #4]	; (80299a0 <_cleanup_r+0x8>)
 802999a:	f000 b8af 	b.w	8029afc <_fwalk_reent>
 802999e:	bf00      	nop
 80299a0:	080298d9 	.word	0x080298d9

080299a4 <__sfmoreglue>:
 80299a4:	b570      	push	{r4, r5, r6, lr}
 80299a6:	1e4a      	subs	r2, r1, #1
 80299a8:	2568      	movs	r5, #104	; 0x68
 80299aa:	4355      	muls	r5, r2
 80299ac:	460e      	mov	r6, r1
 80299ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80299b2:	f7fd f8e9 	bl	8026b88 <_malloc_r>
 80299b6:	4604      	mov	r4, r0
 80299b8:	b140      	cbz	r0, 80299cc <__sfmoreglue+0x28>
 80299ba:	2100      	movs	r1, #0
 80299bc:	e9c0 1600 	strd	r1, r6, [r0]
 80299c0:	300c      	adds	r0, #12
 80299c2:	60a0      	str	r0, [r4, #8]
 80299c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80299c8:	f7fd f886 	bl	8026ad8 <memset>
 80299cc:	4620      	mov	r0, r4
 80299ce:	bd70      	pop	{r4, r5, r6, pc}

080299d0 <__sfp_lock_acquire>:
 80299d0:	4801      	ldr	r0, [pc, #4]	; (80299d8 <__sfp_lock_acquire+0x8>)
 80299d2:	f000 bc26 	b.w	802a222 <__retarget_lock_acquire_recursive>
 80299d6:	bf00      	nop
 80299d8:	200571dc 	.word	0x200571dc

080299dc <__sfp_lock_release>:
 80299dc:	4801      	ldr	r0, [pc, #4]	; (80299e4 <__sfp_lock_release+0x8>)
 80299de:	f000 bc22 	b.w	802a226 <__retarget_lock_release_recursive>
 80299e2:	bf00      	nop
 80299e4:	200571dc 	.word	0x200571dc

080299e8 <__sinit_lock_acquire>:
 80299e8:	4801      	ldr	r0, [pc, #4]	; (80299f0 <__sinit_lock_acquire+0x8>)
 80299ea:	f000 bc1a 	b.w	802a222 <__retarget_lock_acquire_recursive>
 80299ee:	bf00      	nop
 80299f0:	200571d7 	.word	0x200571d7

080299f4 <__sinit_lock_release>:
 80299f4:	4801      	ldr	r0, [pc, #4]	; (80299fc <__sinit_lock_release+0x8>)
 80299f6:	f000 bc16 	b.w	802a226 <__retarget_lock_release_recursive>
 80299fa:	bf00      	nop
 80299fc:	200571d7 	.word	0x200571d7

08029a00 <__sinit>:
 8029a00:	b510      	push	{r4, lr}
 8029a02:	4604      	mov	r4, r0
 8029a04:	f7ff fff0 	bl	80299e8 <__sinit_lock_acquire>
 8029a08:	69a3      	ldr	r3, [r4, #24]
 8029a0a:	b11b      	cbz	r3, 8029a14 <__sinit+0x14>
 8029a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029a10:	f7ff bff0 	b.w	80299f4 <__sinit_lock_release>
 8029a14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8029a18:	6523      	str	r3, [r4, #80]	; 0x50
 8029a1a:	4b13      	ldr	r3, [pc, #76]	; (8029a68 <__sinit+0x68>)
 8029a1c:	4a13      	ldr	r2, [pc, #76]	; (8029a6c <__sinit+0x6c>)
 8029a1e:	681b      	ldr	r3, [r3, #0]
 8029a20:	62a2      	str	r2, [r4, #40]	; 0x28
 8029a22:	42a3      	cmp	r3, r4
 8029a24:	bf04      	itt	eq
 8029a26:	2301      	moveq	r3, #1
 8029a28:	61a3      	streq	r3, [r4, #24]
 8029a2a:	4620      	mov	r0, r4
 8029a2c:	f000 f820 	bl	8029a70 <__sfp>
 8029a30:	6060      	str	r0, [r4, #4]
 8029a32:	4620      	mov	r0, r4
 8029a34:	f000 f81c 	bl	8029a70 <__sfp>
 8029a38:	60a0      	str	r0, [r4, #8]
 8029a3a:	4620      	mov	r0, r4
 8029a3c:	f000 f818 	bl	8029a70 <__sfp>
 8029a40:	2200      	movs	r2, #0
 8029a42:	60e0      	str	r0, [r4, #12]
 8029a44:	2104      	movs	r1, #4
 8029a46:	6860      	ldr	r0, [r4, #4]
 8029a48:	f7ff ff82 	bl	8029950 <std>
 8029a4c:	68a0      	ldr	r0, [r4, #8]
 8029a4e:	2201      	movs	r2, #1
 8029a50:	2109      	movs	r1, #9
 8029a52:	f7ff ff7d 	bl	8029950 <std>
 8029a56:	68e0      	ldr	r0, [r4, #12]
 8029a58:	2202      	movs	r2, #2
 8029a5a:	2112      	movs	r1, #18
 8029a5c:	f7ff ff78 	bl	8029950 <std>
 8029a60:	2301      	movs	r3, #1
 8029a62:	61a3      	str	r3, [r4, #24]
 8029a64:	e7d2      	b.n	8029a0c <__sinit+0xc>
 8029a66:	bf00      	nop
 8029a68:	0802f4a0 	.word	0x0802f4a0
 8029a6c:	08029999 	.word	0x08029999

08029a70 <__sfp>:
 8029a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029a72:	4607      	mov	r7, r0
 8029a74:	f7ff ffac 	bl	80299d0 <__sfp_lock_acquire>
 8029a78:	4b1e      	ldr	r3, [pc, #120]	; (8029af4 <__sfp+0x84>)
 8029a7a:	681e      	ldr	r6, [r3, #0]
 8029a7c:	69b3      	ldr	r3, [r6, #24]
 8029a7e:	b913      	cbnz	r3, 8029a86 <__sfp+0x16>
 8029a80:	4630      	mov	r0, r6
 8029a82:	f7ff ffbd 	bl	8029a00 <__sinit>
 8029a86:	3648      	adds	r6, #72	; 0x48
 8029a88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8029a8c:	3b01      	subs	r3, #1
 8029a8e:	d503      	bpl.n	8029a98 <__sfp+0x28>
 8029a90:	6833      	ldr	r3, [r6, #0]
 8029a92:	b30b      	cbz	r3, 8029ad8 <__sfp+0x68>
 8029a94:	6836      	ldr	r6, [r6, #0]
 8029a96:	e7f7      	b.n	8029a88 <__sfp+0x18>
 8029a98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8029a9c:	b9d5      	cbnz	r5, 8029ad4 <__sfp+0x64>
 8029a9e:	4b16      	ldr	r3, [pc, #88]	; (8029af8 <__sfp+0x88>)
 8029aa0:	60e3      	str	r3, [r4, #12]
 8029aa2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8029aa6:	6665      	str	r5, [r4, #100]	; 0x64
 8029aa8:	f000 fbba 	bl	802a220 <__retarget_lock_init_recursive>
 8029aac:	f7ff ff96 	bl	80299dc <__sfp_lock_release>
 8029ab0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8029ab4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8029ab8:	6025      	str	r5, [r4, #0]
 8029aba:	61a5      	str	r5, [r4, #24]
 8029abc:	2208      	movs	r2, #8
 8029abe:	4629      	mov	r1, r5
 8029ac0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8029ac4:	f7fd f808 	bl	8026ad8 <memset>
 8029ac8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8029acc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8029ad0:	4620      	mov	r0, r4
 8029ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029ad4:	3468      	adds	r4, #104	; 0x68
 8029ad6:	e7d9      	b.n	8029a8c <__sfp+0x1c>
 8029ad8:	2104      	movs	r1, #4
 8029ada:	4638      	mov	r0, r7
 8029adc:	f7ff ff62 	bl	80299a4 <__sfmoreglue>
 8029ae0:	4604      	mov	r4, r0
 8029ae2:	6030      	str	r0, [r6, #0]
 8029ae4:	2800      	cmp	r0, #0
 8029ae6:	d1d5      	bne.n	8029a94 <__sfp+0x24>
 8029ae8:	f7ff ff78 	bl	80299dc <__sfp_lock_release>
 8029aec:	230c      	movs	r3, #12
 8029aee:	603b      	str	r3, [r7, #0]
 8029af0:	e7ee      	b.n	8029ad0 <__sfp+0x60>
 8029af2:	bf00      	nop
 8029af4:	0802f4a0 	.word	0x0802f4a0
 8029af8:	ffff0001 	.word	0xffff0001

08029afc <_fwalk_reent>:
 8029afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029b00:	4606      	mov	r6, r0
 8029b02:	4688      	mov	r8, r1
 8029b04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8029b08:	2700      	movs	r7, #0
 8029b0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8029b0e:	f1b9 0901 	subs.w	r9, r9, #1
 8029b12:	d505      	bpl.n	8029b20 <_fwalk_reent+0x24>
 8029b14:	6824      	ldr	r4, [r4, #0]
 8029b16:	2c00      	cmp	r4, #0
 8029b18:	d1f7      	bne.n	8029b0a <_fwalk_reent+0xe>
 8029b1a:	4638      	mov	r0, r7
 8029b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029b20:	89ab      	ldrh	r3, [r5, #12]
 8029b22:	2b01      	cmp	r3, #1
 8029b24:	d907      	bls.n	8029b36 <_fwalk_reent+0x3a>
 8029b26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8029b2a:	3301      	adds	r3, #1
 8029b2c:	d003      	beq.n	8029b36 <_fwalk_reent+0x3a>
 8029b2e:	4629      	mov	r1, r5
 8029b30:	4630      	mov	r0, r6
 8029b32:	47c0      	blx	r8
 8029b34:	4307      	orrs	r7, r0
 8029b36:	3568      	adds	r5, #104	; 0x68
 8029b38:	e7e9      	b.n	8029b0e <_fwalk_reent+0x12>

08029b3a <rshift>:
 8029b3a:	6903      	ldr	r3, [r0, #16]
 8029b3c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8029b40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8029b44:	ea4f 1261 	mov.w	r2, r1, asr #5
 8029b48:	f100 0414 	add.w	r4, r0, #20
 8029b4c:	dd45      	ble.n	8029bda <rshift+0xa0>
 8029b4e:	f011 011f 	ands.w	r1, r1, #31
 8029b52:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8029b56:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8029b5a:	d10c      	bne.n	8029b76 <rshift+0x3c>
 8029b5c:	f100 0710 	add.w	r7, r0, #16
 8029b60:	4629      	mov	r1, r5
 8029b62:	42b1      	cmp	r1, r6
 8029b64:	d334      	bcc.n	8029bd0 <rshift+0x96>
 8029b66:	1a9b      	subs	r3, r3, r2
 8029b68:	009b      	lsls	r3, r3, #2
 8029b6a:	1eea      	subs	r2, r5, #3
 8029b6c:	4296      	cmp	r6, r2
 8029b6e:	bf38      	it	cc
 8029b70:	2300      	movcc	r3, #0
 8029b72:	4423      	add	r3, r4
 8029b74:	e015      	b.n	8029ba2 <rshift+0x68>
 8029b76:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8029b7a:	f1c1 0820 	rsb	r8, r1, #32
 8029b7e:	40cf      	lsrs	r7, r1
 8029b80:	f105 0e04 	add.w	lr, r5, #4
 8029b84:	46a1      	mov	r9, r4
 8029b86:	4576      	cmp	r6, lr
 8029b88:	46f4      	mov	ip, lr
 8029b8a:	d815      	bhi.n	8029bb8 <rshift+0x7e>
 8029b8c:	1a9b      	subs	r3, r3, r2
 8029b8e:	009a      	lsls	r2, r3, #2
 8029b90:	3a04      	subs	r2, #4
 8029b92:	3501      	adds	r5, #1
 8029b94:	42ae      	cmp	r6, r5
 8029b96:	bf38      	it	cc
 8029b98:	2200      	movcc	r2, #0
 8029b9a:	18a3      	adds	r3, r4, r2
 8029b9c:	50a7      	str	r7, [r4, r2]
 8029b9e:	b107      	cbz	r7, 8029ba2 <rshift+0x68>
 8029ba0:	3304      	adds	r3, #4
 8029ba2:	1b1a      	subs	r2, r3, r4
 8029ba4:	42a3      	cmp	r3, r4
 8029ba6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8029baa:	bf08      	it	eq
 8029bac:	2300      	moveq	r3, #0
 8029bae:	6102      	str	r2, [r0, #16]
 8029bb0:	bf08      	it	eq
 8029bb2:	6143      	streq	r3, [r0, #20]
 8029bb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8029bb8:	f8dc c000 	ldr.w	ip, [ip]
 8029bbc:	fa0c fc08 	lsl.w	ip, ip, r8
 8029bc0:	ea4c 0707 	orr.w	r7, ip, r7
 8029bc4:	f849 7b04 	str.w	r7, [r9], #4
 8029bc8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8029bcc:	40cf      	lsrs	r7, r1
 8029bce:	e7da      	b.n	8029b86 <rshift+0x4c>
 8029bd0:	f851 cb04 	ldr.w	ip, [r1], #4
 8029bd4:	f847 cf04 	str.w	ip, [r7, #4]!
 8029bd8:	e7c3      	b.n	8029b62 <rshift+0x28>
 8029bda:	4623      	mov	r3, r4
 8029bdc:	e7e1      	b.n	8029ba2 <rshift+0x68>

08029bde <__hexdig_fun>:
 8029bde:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8029be2:	2b09      	cmp	r3, #9
 8029be4:	d802      	bhi.n	8029bec <__hexdig_fun+0xe>
 8029be6:	3820      	subs	r0, #32
 8029be8:	b2c0      	uxtb	r0, r0
 8029bea:	4770      	bx	lr
 8029bec:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8029bf0:	2b05      	cmp	r3, #5
 8029bf2:	d801      	bhi.n	8029bf8 <__hexdig_fun+0x1a>
 8029bf4:	3847      	subs	r0, #71	; 0x47
 8029bf6:	e7f7      	b.n	8029be8 <__hexdig_fun+0xa>
 8029bf8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8029bfc:	2b05      	cmp	r3, #5
 8029bfe:	d801      	bhi.n	8029c04 <__hexdig_fun+0x26>
 8029c00:	3827      	subs	r0, #39	; 0x27
 8029c02:	e7f1      	b.n	8029be8 <__hexdig_fun+0xa>
 8029c04:	2000      	movs	r0, #0
 8029c06:	4770      	bx	lr

08029c08 <__gethex>:
 8029c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029c0c:	ed2d 8b02 	vpush	{d8}
 8029c10:	b089      	sub	sp, #36	; 0x24
 8029c12:	ee08 0a10 	vmov	s16, r0
 8029c16:	9304      	str	r3, [sp, #16]
 8029c18:	4bbc      	ldr	r3, [pc, #752]	; (8029f0c <__gethex+0x304>)
 8029c1a:	681b      	ldr	r3, [r3, #0]
 8029c1c:	9301      	str	r3, [sp, #4]
 8029c1e:	4618      	mov	r0, r3
 8029c20:	468b      	mov	fp, r1
 8029c22:	4690      	mov	r8, r2
 8029c24:	f7d6 fb0c 	bl	8000240 <strlen>
 8029c28:	9b01      	ldr	r3, [sp, #4]
 8029c2a:	f8db 2000 	ldr.w	r2, [fp]
 8029c2e:	4403      	add	r3, r0
 8029c30:	4682      	mov	sl, r0
 8029c32:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8029c36:	9305      	str	r3, [sp, #20]
 8029c38:	1c93      	adds	r3, r2, #2
 8029c3a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8029c3e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8029c42:	32fe      	adds	r2, #254	; 0xfe
 8029c44:	18d1      	adds	r1, r2, r3
 8029c46:	461f      	mov	r7, r3
 8029c48:	f813 0b01 	ldrb.w	r0, [r3], #1
 8029c4c:	9100      	str	r1, [sp, #0]
 8029c4e:	2830      	cmp	r0, #48	; 0x30
 8029c50:	d0f8      	beq.n	8029c44 <__gethex+0x3c>
 8029c52:	f7ff ffc4 	bl	8029bde <__hexdig_fun>
 8029c56:	4604      	mov	r4, r0
 8029c58:	2800      	cmp	r0, #0
 8029c5a:	d13a      	bne.n	8029cd2 <__gethex+0xca>
 8029c5c:	9901      	ldr	r1, [sp, #4]
 8029c5e:	4652      	mov	r2, sl
 8029c60:	4638      	mov	r0, r7
 8029c62:	f001 fa14 	bl	802b08e <strncmp>
 8029c66:	4605      	mov	r5, r0
 8029c68:	2800      	cmp	r0, #0
 8029c6a:	d168      	bne.n	8029d3e <__gethex+0x136>
 8029c6c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8029c70:	eb07 060a 	add.w	r6, r7, sl
 8029c74:	f7ff ffb3 	bl	8029bde <__hexdig_fun>
 8029c78:	2800      	cmp	r0, #0
 8029c7a:	d062      	beq.n	8029d42 <__gethex+0x13a>
 8029c7c:	4633      	mov	r3, r6
 8029c7e:	7818      	ldrb	r0, [r3, #0]
 8029c80:	2830      	cmp	r0, #48	; 0x30
 8029c82:	461f      	mov	r7, r3
 8029c84:	f103 0301 	add.w	r3, r3, #1
 8029c88:	d0f9      	beq.n	8029c7e <__gethex+0x76>
 8029c8a:	f7ff ffa8 	bl	8029bde <__hexdig_fun>
 8029c8e:	2301      	movs	r3, #1
 8029c90:	fab0 f480 	clz	r4, r0
 8029c94:	0964      	lsrs	r4, r4, #5
 8029c96:	4635      	mov	r5, r6
 8029c98:	9300      	str	r3, [sp, #0]
 8029c9a:	463a      	mov	r2, r7
 8029c9c:	4616      	mov	r6, r2
 8029c9e:	3201      	adds	r2, #1
 8029ca0:	7830      	ldrb	r0, [r6, #0]
 8029ca2:	f7ff ff9c 	bl	8029bde <__hexdig_fun>
 8029ca6:	2800      	cmp	r0, #0
 8029ca8:	d1f8      	bne.n	8029c9c <__gethex+0x94>
 8029caa:	9901      	ldr	r1, [sp, #4]
 8029cac:	4652      	mov	r2, sl
 8029cae:	4630      	mov	r0, r6
 8029cb0:	f001 f9ed 	bl	802b08e <strncmp>
 8029cb4:	b980      	cbnz	r0, 8029cd8 <__gethex+0xd0>
 8029cb6:	b94d      	cbnz	r5, 8029ccc <__gethex+0xc4>
 8029cb8:	eb06 050a 	add.w	r5, r6, sl
 8029cbc:	462a      	mov	r2, r5
 8029cbe:	4616      	mov	r6, r2
 8029cc0:	3201      	adds	r2, #1
 8029cc2:	7830      	ldrb	r0, [r6, #0]
 8029cc4:	f7ff ff8b 	bl	8029bde <__hexdig_fun>
 8029cc8:	2800      	cmp	r0, #0
 8029cca:	d1f8      	bne.n	8029cbe <__gethex+0xb6>
 8029ccc:	1bad      	subs	r5, r5, r6
 8029cce:	00ad      	lsls	r5, r5, #2
 8029cd0:	e004      	b.n	8029cdc <__gethex+0xd4>
 8029cd2:	2400      	movs	r4, #0
 8029cd4:	4625      	mov	r5, r4
 8029cd6:	e7e0      	b.n	8029c9a <__gethex+0x92>
 8029cd8:	2d00      	cmp	r5, #0
 8029cda:	d1f7      	bne.n	8029ccc <__gethex+0xc4>
 8029cdc:	7833      	ldrb	r3, [r6, #0]
 8029cde:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8029ce2:	2b50      	cmp	r3, #80	; 0x50
 8029ce4:	d13b      	bne.n	8029d5e <__gethex+0x156>
 8029ce6:	7873      	ldrb	r3, [r6, #1]
 8029ce8:	2b2b      	cmp	r3, #43	; 0x2b
 8029cea:	d02c      	beq.n	8029d46 <__gethex+0x13e>
 8029cec:	2b2d      	cmp	r3, #45	; 0x2d
 8029cee:	d02e      	beq.n	8029d4e <__gethex+0x146>
 8029cf0:	1c71      	adds	r1, r6, #1
 8029cf2:	f04f 0900 	mov.w	r9, #0
 8029cf6:	7808      	ldrb	r0, [r1, #0]
 8029cf8:	f7ff ff71 	bl	8029bde <__hexdig_fun>
 8029cfc:	1e43      	subs	r3, r0, #1
 8029cfe:	b2db      	uxtb	r3, r3
 8029d00:	2b18      	cmp	r3, #24
 8029d02:	d82c      	bhi.n	8029d5e <__gethex+0x156>
 8029d04:	f1a0 0210 	sub.w	r2, r0, #16
 8029d08:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8029d0c:	f7ff ff67 	bl	8029bde <__hexdig_fun>
 8029d10:	1e43      	subs	r3, r0, #1
 8029d12:	b2db      	uxtb	r3, r3
 8029d14:	2b18      	cmp	r3, #24
 8029d16:	d91d      	bls.n	8029d54 <__gethex+0x14c>
 8029d18:	f1b9 0f00 	cmp.w	r9, #0
 8029d1c:	d000      	beq.n	8029d20 <__gethex+0x118>
 8029d1e:	4252      	negs	r2, r2
 8029d20:	4415      	add	r5, r2
 8029d22:	f8cb 1000 	str.w	r1, [fp]
 8029d26:	b1e4      	cbz	r4, 8029d62 <__gethex+0x15a>
 8029d28:	9b00      	ldr	r3, [sp, #0]
 8029d2a:	2b00      	cmp	r3, #0
 8029d2c:	bf14      	ite	ne
 8029d2e:	2700      	movne	r7, #0
 8029d30:	2706      	moveq	r7, #6
 8029d32:	4638      	mov	r0, r7
 8029d34:	b009      	add	sp, #36	; 0x24
 8029d36:	ecbd 8b02 	vpop	{d8}
 8029d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029d3e:	463e      	mov	r6, r7
 8029d40:	4625      	mov	r5, r4
 8029d42:	2401      	movs	r4, #1
 8029d44:	e7ca      	b.n	8029cdc <__gethex+0xd4>
 8029d46:	f04f 0900 	mov.w	r9, #0
 8029d4a:	1cb1      	adds	r1, r6, #2
 8029d4c:	e7d3      	b.n	8029cf6 <__gethex+0xee>
 8029d4e:	f04f 0901 	mov.w	r9, #1
 8029d52:	e7fa      	b.n	8029d4a <__gethex+0x142>
 8029d54:	230a      	movs	r3, #10
 8029d56:	fb03 0202 	mla	r2, r3, r2, r0
 8029d5a:	3a10      	subs	r2, #16
 8029d5c:	e7d4      	b.n	8029d08 <__gethex+0x100>
 8029d5e:	4631      	mov	r1, r6
 8029d60:	e7df      	b.n	8029d22 <__gethex+0x11a>
 8029d62:	1bf3      	subs	r3, r6, r7
 8029d64:	3b01      	subs	r3, #1
 8029d66:	4621      	mov	r1, r4
 8029d68:	2b07      	cmp	r3, #7
 8029d6a:	dc0b      	bgt.n	8029d84 <__gethex+0x17c>
 8029d6c:	ee18 0a10 	vmov	r0, s16
 8029d70:	f000 faf6 	bl	802a360 <_Balloc>
 8029d74:	4604      	mov	r4, r0
 8029d76:	b940      	cbnz	r0, 8029d8a <__gethex+0x182>
 8029d78:	4b65      	ldr	r3, [pc, #404]	; (8029f10 <__gethex+0x308>)
 8029d7a:	4602      	mov	r2, r0
 8029d7c:	21de      	movs	r1, #222	; 0xde
 8029d7e:	4865      	ldr	r0, [pc, #404]	; (8029f14 <__gethex+0x30c>)
 8029d80:	f7fc fe1e 	bl	80269c0 <__assert_func>
 8029d84:	3101      	adds	r1, #1
 8029d86:	105b      	asrs	r3, r3, #1
 8029d88:	e7ee      	b.n	8029d68 <__gethex+0x160>
 8029d8a:	f100 0914 	add.w	r9, r0, #20
 8029d8e:	f04f 0b00 	mov.w	fp, #0
 8029d92:	f1ca 0301 	rsb	r3, sl, #1
 8029d96:	f8cd 9008 	str.w	r9, [sp, #8]
 8029d9a:	f8cd b000 	str.w	fp, [sp]
 8029d9e:	9306      	str	r3, [sp, #24]
 8029da0:	42b7      	cmp	r7, r6
 8029da2:	d340      	bcc.n	8029e26 <__gethex+0x21e>
 8029da4:	9802      	ldr	r0, [sp, #8]
 8029da6:	9b00      	ldr	r3, [sp, #0]
 8029da8:	f840 3b04 	str.w	r3, [r0], #4
 8029dac:	eba0 0009 	sub.w	r0, r0, r9
 8029db0:	1080      	asrs	r0, r0, #2
 8029db2:	0146      	lsls	r6, r0, #5
 8029db4:	6120      	str	r0, [r4, #16]
 8029db6:	4618      	mov	r0, r3
 8029db8:	f000 fbc8 	bl	802a54c <__hi0bits>
 8029dbc:	1a30      	subs	r0, r6, r0
 8029dbe:	f8d8 6000 	ldr.w	r6, [r8]
 8029dc2:	42b0      	cmp	r0, r6
 8029dc4:	dd63      	ble.n	8029e8e <__gethex+0x286>
 8029dc6:	1b87      	subs	r7, r0, r6
 8029dc8:	4639      	mov	r1, r7
 8029dca:	4620      	mov	r0, r4
 8029dcc:	f000 ff63 	bl	802ac96 <__any_on>
 8029dd0:	4682      	mov	sl, r0
 8029dd2:	b1a8      	cbz	r0, 8029e00 <__gethex+0x1f8>
 8029dd4:	1e7b      	subs	r3, r7, #1
 8029dd6:	1159      	asrs	r1, r3, #5
 8029dd8:	f003 021f 	and.w	r2, r3, #31
 8029ddc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8029de0:	f04f 0a01 	mov.w	sl, #1
 8029de4:	fa0a f202 	lsl.w	r2, sl, r2
 8029de8:	420a      	tst	r2, r1
 8029dea:	d009      	beq.n	8029e00 <__gethex+0x1f8>
 8029dec:	4553      	cmp	r3, sl
 8029dee:	dd05      	ble.n	8029dfc <__gethex+0x1f4>
 8029df0:	1eb9      	subs	r1, r7, #2
 8029df2:	4620      	mov	r0, r4
 8029df4:	f000 ff4f 	bl	802ac96 <__any_on>
 8029df8:	2800      	cmp	r0, #0
 8029dfa:	d145      	bne.n	8029e88 <__gethex+0x280>
 8029dfc:	f04f 0a02 	mov.w	sl, #2
 8029e00:	4639      	mov	r1, r7
 8029e02:	4620      	mov	r0, r4
 8029e04:	f7ff fe99 	bl	8029b3a <rshift>
 8029e08:	443d      	add	r5, r7
 8029e0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8029e0e:	42ab      	cmp	r3, r5
 8029e10:	da4c      	bge.n	8029eac <__gethex+0x2a4>
 8029e12:	ee18 0a10 	vmov	r0, s16
 8029e16:	4621      	mov	r1, r4
 8029e18:	f000 fae2 	bl	802a3e0 <_Bfree>
 8029e1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8029e1e:	2300      	movs	r3, #0
 8029e20:	6013      	str	r3, [r2, #0]
 8029e22:	27a3      	movs	r7, #163	; 0xa3
 8029e24:	e785      	b.n	8029d32 <__gethex+0x12a>
 8029e26:	1e73      	subs	r3, r6, #1
 8029e28:	9a05      	ldr	r2, [sp, #20]
 8029e2a:	9303      	str	r3, [sp, #12]
 8029e2c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8029e30:	4293      	cmp	r3, r2
 8029e32:	d019      	beq.n	8029e68 <__gethex+0x260>
 8029e34:	f1bb 0f20 	cmp.w	fp, #32
 8029e38:	d107      	bne.n	8029e4a <__gethex+0x242>
 8029e3a:	9b02      	ldr	r3, [sp, #8]
 8029e3c:	9a00      	ldr	r2, [sp, #0]
 8029e3e:	f843 2b04 	str.w	r2, [r3], #4
 8029e42:	9302      	str	r3, [sp, #8]
 8029e44:	2300      	movs	r3, #0
 8029e46:	9300      	str	r3, [sp, #0]
 8029e48:	469b      	mov	fp, r3
 8029e4a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8029e4e:	f7ff fec6 	bl	8029bde <__hexdig_fun>
 8029e52:	9b00      	ldr	r3, [sp, #0]
 8029e54:	f000 000f 	and.w	r0, r0, #15
 8029e58:	fa00 f00b 	lsl.w	r0, r0, fp
 8029e5c:	4303      	orrs	r3, r0
 8029e5e:	9300      	str	r3, [sp, #0]
 8029e60:	f10b 0b04 	add.w	fp, fp, #4
 8029e64:	9b03      	ldr	r3, [sp, #12]
 8029e66:	e00d      	b.n	8029e84 <__gethex+0x27c>
 8029e68:	9b03      	ldr	r3, [sp, #12]
 8029e6a:	9a06      	ldr	r2, [sp, #24]
 8029e6c:	4413      	add	r3, r2
 8029e6e:	42bb      	cmp	r3, r7
 8029e70:	d3e0      	bcc.n	8029e34 <__gethex+0x22c>
 8029e72:	4618      	mov	r0, r3
 8029e74:	9901      	ldr	r1, [sp, #4]
 8029e76:	9307      	str	r3, [sp, #28]
 8029e78:	4652      	mov	r2, sl
 8029e7a:	f001 f908 	bl	802b08e <strncmp>
 8029e7e:	9b07      	ldr	r3, [sp, #28]
 8029e80:	2800      	cmp	r0, #0
 8029e82:	d1d7      	bne.n	8029e34 <__gethex+0x22c>
 8029e84:	461e      	mov	r6, r3
 8029e86:	e78b      	b.n	8029da0 <__gethex+0x198>
 8029e88:	f04f 0a03 	mov.w	sl, #3
 8029e8c:	e7b8      	b.n	8029e00 <__gethex+0x1f8>
 8029e8e:	da0a      	bge.n	8029ea6 <__gethex+0x29e>
 8029e90:	1a37      	subs	r7, r6, r0
 8029e92:	4621      	mov	r1, r4
 8029e94:	ee18 0a10 	vmov	r0, s16
 8029e98:	463a      	mov	r2, r7
 8029e9a:	f000 fcbd 	bl	802a818 <__lshift>
 8029e9e:	1bed      	subs	r5, r5, r7
 8029ea0:	4604      	mov	r4, r0
 8029ea2:	f100 0914 	add.w	r9, r0, #20
 8029ea6:	f04f 0a00 	mov.w	sl, #0
 8029eaa:	e7ae      	b.n	8029e0a <__gethex+0x202>
 8029eac:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8029eb0:	42a8      	cmp	r0, r5
 8029eb2:	dd72      	ble.n	8029f9a <__gethex+0x392>
 8029eb4:	1b45      	subs	r5, r0, r5
 8029eb6:	42ae      	cmp	r6, r5
 8029eb8:	dc36      	bgt.n	8029f28 <__gethex+0x320>
 8029eba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8029ebe:	2b02      	cmp	r3, #2
 8029ec0:	d02a      	beq.n	8029f18 <__gethex+0x310>
 8029ec2:	2b03      	cmp	r3, #3
 8029ec4:	d02c      	beq.n	8029f20 <__gethex+0x318>
 8029ec6:	2b01      	cmp	r3, #1
 8029ec8:	d115      	bne.n	8029ef6 <__gethex+0x2ee>
 8029eca:	42ae      	cmp	r6, r5
 8029ecc:	d113      	bne.n	8029ef6 <__gethex+0x2ee>
 8029ece:	2e01      	cmp	r6, #1
 8029ed0:	d10b      	bne.n	8029eea <__gethex+0x2e2>
 8029ed2:	9a04      	ldr	r2, [sp, #16]
 8029ed4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8029ed8:	6013      	str	r3, [r2, #0]
 8029eda:	2301      	movs	r3, #1
 8029edc:	6123      	str	r3, [r4, #16]
 8029ede:	f8c9 3000 	str.w	r3, [r9]
 8029ee2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8029ee4:	2762      	movs	r7, #98	; 0x62
 8029ee6:	601c      	str	r4, [r3, #0]
 8029ee8:	e723      	b.n	8029d32 <__gethex+0x12a>
 8029eea:	1e71      	subs	r1, r6, #1
 8029eec:	4620      	mov	r0, r4
 8029eee:	f000 fed2 	bl	802ac96 <__any_on>
 8029ef2:	2800      	cmp	r0, #0
 8029ef4:	d1ed      	bne.n	8029ed2 <__gethex+0x2ca>
 8029ef6:	ee18 0a10 	vmov	r0, s16
 8029efa:	4621      	mov	r1, r4
 8029efc:	f000 fa70 	bl	802a3e0 <_Bfree>
 8029f00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8029f02:	2300      	movs	r3, #0
 8029f04:	6013      	str	r3, [r2, #0]
 8029f06:	2750      	movs	r7, #80	; 0x50
 8029f08:	e713      	b.n	8029d32 <__gethex+0x12a>
 8029f0a:	bf00      	nop
 8029f0c:	0802f7a4 	.word	0x0802f7a4
 8029f10:	0802f6c4 	.word	0x0802f6c4
 8029f14:	0802f738 	.word	0x0802f738
 8029f18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8029f1a:	2b00      	cmp	r3, #0
 8029f1c:	d1eb      	bne.n	8029ef6 <__gethex+0x2ee>
 8029f1e:	e7d8      	b.n	8029ed2 <__gethex+0x2ca>
 8029f20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8029f22:	2b00      	cmp	r3, #0
 8029f24:	d1d5      	bne.n	8029ed2 <__gethex+0x2ca>
 8029f26:	e7e6      	b.n	8029ef6 <__gethex+0x2ee>
 8029f28:	1e6f      	subs	r7, r5, #1
 8029f2a:	f1ba 0f00 	cmp.w	sl, #0
 8029f2e:	d131      	bne.n	8029f94 <__gethex+0x38c>
 8029f30:	b127      	cbz	r7, 8029f3c <__gethex+0x334>
 8029f32:	4639      	mov	r1, r7
 8029f34:	4620      	mov	r0, r4
 8029f36:	f000 feae 	bl	802ac96 <__any_on>
 8029f3a:	4682      	mov	sl, r0
 8029f3c:	117b      	asrs	r3, r7, #5
 8029f3e:	2101      	movs	r1, #1
 8029f40:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8029f44:	f007 071f 	and.w	r7, r7, #31
 8029f48:	fa01 f707 	lsl.w	r7, r1, r7
 8029f4c:	421f      	tst	r7, r3
 8029f4e:	4629      	mov	r1, r5
 8029f50:	4620      	mov	r0, r4
 8029f52:	bf18      	it	ne
 8029f54:	f04a 0a02 	orrne.w	sl, sl, #2
 8029f58:	1b76      	subs	r6, r6, r5
 8029f5a:	f7ff fdee 	bl	8029b3a <rshift>
 8029f5e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8029f62:	2702      	movs	r7, #2
 8029f64:	f1ba 0f00 	cmp.w	sl, #0
 8029f68:	d048      	beq.n	8029ffc <__gethex+0x3f4>
 8029f6a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8029f6e:	2b02      	cmp	r3, #2
 8029f70:	d015      	beq.n	8029f9e <__gethex+0x396>
 8029f72:	2b03      	cmp	r3, #3
 8029f74:	d017      	beq.n	8029fa6 <__gethex+0x39e>
 8029f76:	2b01      	cmp	r3, #1
 8029f78:	d109      	bne.n	8029f8e <__gethex+0x386>
 8029f7a:	f01a 0f02 	tst.w	sl, #2
 8029f7e:	d006      	beq.n	8029f8e <__gethex+0x386>
 8029f80:	f8d9 0000 	ldr.w	r0, [r9]
 8029f84:	ea4a 0a00 	orr.w	sl, sl, r0
 8029f88:	f01a 0f01 	tst.w	sl, #1
 8029f8c:	d10e      	bne.n	8029fac <__gethex+0x3a4>
 8029f8e:	f047 0710 	orr.w	r7, r7, #16
 8029f92:	e033      	b.n	8029ffc <__gethex+0x3f4>
 8029f94:	f04f 0a01 	mov.w	sl, #1
 8029f98:	e7d0      	b.n	8029f3c <__gethex+0x334>
 8029f9a:	2701      	movs	r7, #1
 8029f9c:	e7e2      	b.n	8029f64 <__gethex+0x35c>
 8029f9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8029fa0:	f1c3 0301 	rsb	r3, r3, #1
 8029fa4:	9315      	str	r3, [sp, #84]	; 0x54
 8029fa6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8029fa8:	2b00      	cmp	r3, #0
 8029faa:	d0f0      	beq.n	8029f8e <__gethex+0x386>
 8029fac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8029fb0:	f104 0314 	add.w	r3, r4, #20
 8029fb4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8029fb8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8029fbc:	f04f 0c00 	mov.w	ip, #0
 8029fc0:	4618      	mov	r0, r3
 8029fc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8029fc6:	f1b2 3fff 	cmp.w	r2, #4294967295
 8029fca:	d01c      	beq.n	802a006 <__gethex+0x3fe>
 8029fcc:	3201      	adds	r2, #1
 8029fce:	6002      	str	r2, [r0, #0]
 8029fd0:	2f02      	cmp	r7, #2
 8029fd2:	f104 0314 	add.w	r3, r4, #20
 8029fd6:	d13f      	bne.n	802a058 <__gethex+0x450>
 8029fd8:	f8d8 2000 	ldr.w	r2, [r8]
 8029fdc:	3a01      	subs	r2, #1
 8029fde:	42b2      	cmp	r2, r6
 8029fe0:	d10a      	bne.n	8029ff8 <__gethex+0x3f0>
 8029fe2:	1171      	asrs	r1, r6, #5
 8029fe4:	2201      	movs	r2, #1
 8029fe6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8029fea:	f006 061f 	and.w	r6, r6, #31
 8029fee:	fa02 f606 	lsl.w	r6, r2, r6
 8029ff2:	421e      	tst	r6, r3
 8029ff4:	bf18      	it	ne
 8029ff6:	4617      	movne	r7, r2
 8029ff8:	f047 0720 	orr.w	r7, r7, #32
 8029ffc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8029ffe:	601c      	str	r4, [r3, #0]
 802a000:	9b04      	ldr	r3, [sp, #16]
 802a002:	601d      	str	r5, [r3, #0]
 802a004:	e695      	b.n	8029d32 <__gethex+0x12a>
 802a006:	4299      	cmp	r1, r3
 802a008:	f843 cc04 	str.w	ip, [r3, #-4]
 802a00c:	d8d8      	bhi.n	8029fc0 <__gethex+0x3b8>
 802a00e:	68a3      	ldr	r3, [r4, #8]
 802a010:	459b      	cmp	fp, r3
 802a012:	db19      	blt.n	802a048 <__gethex+0x440>
 802a014:	6861      	ldr	r1, [r4, #4]
 802a016:	ee18 0a10 	vmov	r0, s16
 802a01a:	3101      	adds	r1, #1
 802a01c:	f000 f9a0 	bl	802a360 <_Balloc>
 802a020:	4681      	mov	r9, r0
 802a022:	b918      	cbnz	r0, 802a02c <__gethex+0x424>
 802a024:	4b1a      	ldr	r3, [pc, #104]	; (802a090 <__gethex+0x488>)
 802a026:	4602      	mov	r2, r0
 802a028:	2184      	movs	r1, #132	; 0x84
 802a02a:	e6a8      	b.n	8029d7e <__gethex+0x176>
 802a02c:	6922      	ldr	r2, [r4, #16]
 802a02e:	3202      	adds	r2, #2
 802a030:	f104 010c 	add.w	r1, r4, #12
 802a034:	0092      	lsls	r2, r2, #2
 802a036:	300c      	adds	r0, #12
 802a038:	f7fc fd40 	bl	8026abc <memcpy>
 802a03c:	4621      	mov	r1, r4
 802a03e:	ee18 0a10 	vmov	r0, s16
 802a042:	f000 f9cd 	bl	802a3e0 <_Bfree>
 802a046:	464c      	mov	r4, r9
 802a048:	6923      	ldr	r3, [r4, #16]
 802a04a:	1c5a      	adds	r2, r3, #1
 802a04c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802a050:	6122      	str	r2, [r4, #16]
 802a052:	2201      	movs	r2, #1
 802a054:	615a      	str	r2, [r3, #20]
 802a056:	e7bb      	b.n	8029fd0 <__gethex+0x3c8>
 802a058:	6922      	ldr	r2, [r4, #16]
 802a05a:	455a      	cmp	r2, fp
 802a05c:	dd0b      	ble.n	802a076 <__gethex+0x46e>
 802a05e:	2101      	movs	r1, #1
 802a060:	4620      	mov	r0, r4
 802a062:	f7ff fd6a 	bl	8029b3a <rshift>
 802a066:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802a06a:	3501      	adds	r5, #1
 802a06c:	42ab      	cmp	r3, r5
 802a06e:	f6ff aed0 	blt.w	8029e12 <__gethex+0x20a>
 802a072:	2701      	movs	r7, #1
 802a074:	e7c0      	b.n	8029ff8 <__gethex+0x3f0>
 802a076:	f016 061f 	ands.w	r6, r6, #31
 802a07a:	d0fa      	beq.n	802a072 <__gethex+0x46a>
 802a07c:	449a      	add	sl, r3
 802a07e:	f1c6 0620 	rsb	r6, r6, #32
 802a082:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 802a086:	f000 fa61 	bl	802a54c <__hi0bits>
 802a08a:	42b0      	cmp	r0, r6
 802a08c:	dbe7      	blt.n	802a05e <__gethex+0x456>
 802a08e:	e7f0      	b.n	802a072 <__gethex+0x46a>
 802a090:	0802f6c4 	.word	0x0802f6c4

0802a094 <L_shift>:
 802a094:	f1c2 0208 	rsb	r2, r2, #8
 802a098:	0092      	lsls	r2, r2, #2
 802a09a:	b570      	push	{r4, r5, r6, lr}
 802a09c:	f1c2 0620 	rsb	r6, r2, #32
 802a0a0:	6843      	ldr	r3, [r0, #4]
 802a0a2:	6804      	ldr	r4, [r0, #0]
 802a0a4:	fa03 f506 	lsl.w	r5, r3, r6
 802a0a8:	432c      	orrs	r4, r5
 802a0aa:	40d3      	lsrs	r3, r2
 802a0ac:	6004      	str	r4, [r0, #0]
 802a0ae:	f840 3f04 	str.w	r3, [r0, #4]!
 802a0b2:	4288      	cmp	r0, r1
 802a0b4:	d3f4      	bcc.n	802a0a0 <L_shift+0xc>
 802a0b6:	bd70      	pop	{r4, r5, r6, pc}

0802a0b8 <__match>:
 802a0b8:	b530      	push	{r4, r5, lr}
 802a0ba:	6803      	ldr	r3, [r0, #0]
 802a0bc:	3301      	adds	r3, #1
 802a0be:	f811 4b01 	ldrb.w	r4, [r1], #1
 802a0c2:	b914      	cbnz	r4, 802a0ca <__match+0x12>
 802a0c4:	6003      	str	r3, [r0, #0]
 802a0c6:	2001      	movs	r0, #1
 802a0c8:	bd30      	pop	{r4, r5, pc}
 802a0ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a0ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 802a0d2:	2d19      	cmp	r5, #25
 802a0d4:	bf98      	it	ls
 802a0d6:	3220      	addls	r2, #32
 802a0d8:	42a2      	cmp	r2, r4
 802a0da:	d0f0      	beq.n	802a0be <__match+0x6>
 802a0dc:	2000      	movs	r0, #0
 802a0de:	e7f3      	b.n	802a0c8 <__match+0x10>

0802a0e0 <__hexnan>:
 802a0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a0e4:	680b      	ldr	r3, [r1, #0]
 802a0e6:	6801      	ldr	r1, [r0, #0]
 802a0e8:	115e      	asrs	r6, r3, #5
 802a0ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802a0ee:	f013 031f 	ands.w	r3, r3, #31
 802a0f2:	b087      	sub	sp, #28
 802a0f4:	bf18      	it	ne
 802a0f6:	3604      	addne	r6, #4
 802a0f8:	2500      	movs	r5, #0
 802a0fa:	1f37      	subs	r7, r6, #4
 802a0fc:	4682      	mov	sl, r0
 802a0fe:	4690      	mov	r8, r2
 802a100:	9301      	str	r3, [sp, #4]
 802a102:	f846 5c04 	str.w	r5, [r6, #-4]
 802a106:	46b9      	mov	r9, r7
 802a108:	463c      	mov	r4, r7
 802a10a:	9502      	str	r5, [sp, #8]
 802a10c:	46ab      	mov	fp, r5
 802a10e:	784a      	ldrb	r2, [r1, #1]
 802a110:	1c4b      	adds	r3, r1, #1
 802a112:	9303      	str	r3, [sp, #12]
 802a114:	b342      	cbz	r2, 802a168 <__hexnan+0x88>
 802a116:	4610      	mov	r0, r2
 802a118:	9105      	str	r1, [sp, #20]
 802a11a:	9204      	str	r2, [sp, #16]
 802a11c:	f7ff fd5f 	bl	8029bde <__hexdig_fun>
 802a120:	2800      	cmp	r0, #0
 802a122:	d14f      	bne.n	802a1c4 <__hexnan+0xe4>
 802a124:	9a04      	ldr	r2, [sp, #16]
 802a126:	9905      	ldr	r1, [sp, #20]
 802a128:	2a20      	cmp	r2, #32
 802a12a:	d818      	bhi.n	802a15e <__hexnan+0x7e>
 802a12c:	9b02      	ldr	r3, [sp, #8]
 802a12e:	459b      	cmp	fp, r3
 802a130:	dd13      	ble.n	802a15a <__hexnan+0x7a>
 802a132:	454c      	cmp	r4, r9
 802a134:	d206      	bcs.n	802a144 <__hexnan+0x64>
 802a136:	2d07      	cmp	r5, #7
 802a138:	dc04      	bgt.n	802a144 <__hexnan+0x64>
 802a13a:	462a      	mov	r2, r5
 802a13c:	4649      	mov	r1, r9
 802a13e:	4620      	mov	r0, r4
 802a140:	f7ff ffa8 	bl	802a094 <L_shift>
 802a144:	4544      	cmp	r4, r8
 802a146:	d950      	bls.n	802a1ea <__hexnan+0x10a>
 802a148:	2300      	movs	r3, #0
 802a14a:	f1a4 0904 	sub.w	r9, r4, #4
 802a14e:	f844 3c04 	str.w	r3, [r4, #-4]
 802a152:	f8cd b008 	str.w	fp, [sp, #8]
 802a156:	464c      	mov	r4, r9
 802a158:	461d      	mov	r5, r3
 802a15a:	9903      	ldr	r1, [sp, #12]
 802a15c:	e7d7      	b.n	802a10e <__hexnan+0x2e>
 802a15e:	2a29      	cmp	r2, #41	; 0x29
 802a160:	d156      	bne.n	802a210 <__hexnan+0x130>
 802a162:	3102      	adds	r1, #2
 802a164:	f8ca 1000 	str.w	r1, [sl]
 802a168:	f1bb 0f00 	cmp.w	fp, #0
 802a16c:	d050      	beq.n	802a210 <__hexnan+0x130>
 802a16e:	454c      	cmp	r4, r9
 802a170:	d206      	bcs.n	802a180 <__hexnan+0xa0>
 802a172:	2d07      	cmp	r5, #7
 802a174:	dc04      	bgt.n	802a180 <__hexnan+0xa0>
 802a176:	462a      	mov	r2, r5
 802a178:	4649      	mov	r1, r9
 802a17a:	4620      	mov	r0, r4
 802a17c:	f7ff ff8a 	bl	802a094 <L_shift>
 802a180:	4544      	cmp	r4, r8
 802a182:	d934      	bls.n	802a1ee <__hexnan+0x10e>
 802a184:	f1a8 0204 	sub.w	r2, r8, #4
 802a188:	4623      	mov	r3, r4
 802a18a:	f853 1b04 	ldr.w	r1, [r3], #4
 802a18e:	f842 1f04 	str.w	r1, [r2, #4]!
 802a192:	429f      	cmp	r7, r3
 802a194:	d2f9      	bcs.n	802a18a <__hexnan+0xaa>
 802a196:	1b3b      	subs	r3, r7, r4
 802a198:	f023 0303 	bic.w	r3, r3, #3
 802a19c:	3304      	adds	r3, #4
 802a19e:	3401      	adds	r4, #1
 802a1a0:	3e03      	subs	r6, #3
 802a1a2:	42b4      	cmp	r4, r6
 802a1a4:	bf88      	it	hi
 802a1a6:	2304      	movhi	r3, #4
 802a1a8:	4443      	add	r3, r8
 802a1aa:	2200      	movs	r2, #0
 802a1ac:	f843 2b04 	str.w	r2, [r3], #4
 802a1b0:	429f      	cmp	r7, r3
 802a1b2:	d2fb      	bcs.n	802a1ac <__hexnan+0xcc>
 802a1b4:	683b      	ldr	r3, [r7, #0]
 802a1b6:	b91b      	cbnz	r3, 802a1c0 <__hexnan+0xe0>
 802a1b8:	4547      	cmp	r7, r8
 802a1ba:	d127      	bne.n	802a20c <__hexnan+0x12c>
 802a1bc:	2301      	movs	r3, #1
 802a1be:	603b      	str	r3, [r7, #0]
 802a1c0:	2005      	movs	r0, #5
 802a1c2:	e026      	b.n	802a212 <__hexnan+0x132>
 802a1c4:	3501      	adds	r5, #1
 802a1c6:	2d08      	cmp	r5, #8
 802a1c8:	f10b 0b01 	add.w	fp, fp, #1
 802a1cc:	dd06      	ble.n	802a1dc <__hexnan+0xfc>
 802a1ce:	4544      	cmp	r4, r8
 802a1d0:	d9c3      	bls.n	802a15a <__hexnan+0x7a>
 802a1d2:	2300      	movs	r3, #0
 802a1d4:	f844 3c04 	str.w	r3, [r4, #-4]
 802a1d8:	2501      	movs	r5, #1
 802a1da:	3c04      	subs	r4, #4
 802a1dc:	6822      	ldr	r2, [r4, #0]
 802a1de:	f000 000f 	and.w	r0, r0, #15
 802a1e2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 802a1e6:	6022      	str	r2, [r4, #0]
 802a1e8:	e7b7      	b.n	802a15a <__hexnan+0x7a>
 802a1ea:	2508      	movs	r5, #8
 802a1ec:	e7b5      	b.n	802a15a <__hexnan+0x7a>
 802a1ee:	9b01      	ldr	r3, [sp, #4]
 802a1f0:	2b00      	cmp	r3, #0
 802a1f2:	d0df      	beq.n	802a1b4 <__hexnan+0xd4>
 802a1f4:	f04f 32ff 	mov.w	r2, #4294967295
 802a1f8:	f1c3 0320 	rsb	r3, r3, #32
 802a1fc:	fa22 f303 	lsr.w	r3, r2, r3
 802a200:	f856 2c04 	ldr.w	r2, [r6, #-4]
 802a204:	401a      	ands	r2, r3
 802a206:	f846 2c04 	str.w	r2, [r6, #-4]
 802a20a:	e7d3      	b.n	802a1b4 <__hexnan+0xd4>
 802a20c:	3f04      	subs	r7, #4
 802a20e:	e7d1      	b.n	802a1b4 <__hexnan+0xd4>
 802a210:	2004      	movs	r0, #4
 802a212:	b007      	add	sp, #28
 802a214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802a218 <_localeconv_r>:
 802a218:	4800      	ldr	r0, [pc, #0]	; (802a21c <_localeconv_r+0x4>)
 802a21a:	4770      	bx	lr
 802a21c:	200001d8 	.word	0x200001d8

0802a220 <__retarget_lock_init_recursive>:
 802a220:	4770      	bx	lr

0802a222 <__retarget_lock_acquire_recursive>:
 802a222:	4770      	bx	lr

0802a224 <__retarget_lock_release>:
 802a224:	4770      	bx	lr

0802a226 <__retarget_lock_release_recursive>:
 802a226:	4770      	bx	lr

0802a228 <__swhatbuf_r>:
 802a228:	b570      	push	{r4, r5, r6, lr}
 802a22a:	460e      	mov	r6, r1
 802a22c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a230:	2900      	cmp	r1, #0
 802a232:	b096      	sub	sp, #88	; 0x58
 802a234:	4614      	mov	r4, r2
 802a236:	461d      	mov	r5, r3
 802a238:	da07      	bge.n	802a24a <__swhatbuf_r+0x22>
 802a23a:	2300      	movs	r3, #0
 802a23c:	602b      	str	r3, [r5, #0]
 802a23e:	89b3      	ldrh	r3, [r6, #12]
 802a240:	061a      	lsls	r2, r3, #24
 802a242:	d410      	bmi.n	802a266 <__swhatbuf_r+0x3e>
 802a244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802a248:	e00e      	b.n	802a268 <__swhatbuf_r+0x40>
 802a24a:	466a      	mov	r2, sp
 802a24c:	f000 ff60 	bl	802b110 <_fstat_r>
 802a250:	2800      	cmp	r0, #0
 802a252:	dbf2      	blt.n	802a23a <__swhatbuf_r+0x12>
 802a254:	9a01      	ldr	r2, [sp, #4]
 802a256:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802a25a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802a25e:	425a      	negs	r2, r3
 802a260:	415a      	adcs	r2, r3
 802a262:	602a      	str	r2, [r5, #0]
 802a264:	e7ee      	b.n	802a244 <__swhatbuf_r+0x1c>
 802a266:	2340      	movs	r3, #64	; 0x40
 802a268:	2000      	movs	r0, #0
 802a26a:	6023      	str	r3, [r4, #0]
 802a26c:	b016      	add	sp, #88	; 0x58
 802a26e:	bd70      	pop	{r4, r5, r6, pc}

0802a270 <__smakebuf_r>:
 802a270:	898b      	ldrh	r3, [r1, #12]
 802a272:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802a274:	079d      	lsls	r5, r3, #30
 802a276:	4606      	mov	r6, r0
 802a278:	460c      	mov	r4, r1
 802a27a:	d507      	bpl.n	802a28c <__smakebuf_r+0x1c>
 802a27c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802a280:	6023      	str	r3, [r4, #0]
 802a282:	6123      	str	r3, [r4, #16]
 802a284:	2301      	movs	r3, #1
 802a286:	6163      	str	r3, [r4, #20]
 802a288:	b002      	add	sp, #8
 802a28a:	bd70      	pop	{r4, r5, r6, pc}
 802a28c:	ab01      	add	r3, sp, #4
 802a28e:	466a      	mov	r2, sp
 802a290:	f7ff ffca 	bl	802a228 <__swhatbuf_r>
 802a294:	9900      	ldr	r1, [sp, #0]
 802a296:	4605      	mov	r5, r0
 802a298:	4630      	mov	r0, r6
 802a29a:	f7fc fc75 	bl	8026b88 <_malloc_r>
 802a29e:	b948      	cbnz	r0, 802a2b4 <__smakebuf_r+0x44>
 802a2a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a2a4:	059a      	lsls	r2, r3, #22
 802a2a6:	d4ef      	bmi.n	802a288 <__smakebuf_r+0x18>
 802a2a8:	f023 0303 	bic.w	r3, r3, #3
 802a2ac:	f043 0302 	orr.w	r3, r3, #2
 802a2b0:	81a3      	strh	r3, [r4, #12]
 802a2b2:	e7e3      	b.n	802a27c <__smakebuf_r+0xc>
 802a2b4:	4b0d      	ldr	r3, [pc, #52]	; (802a2ec <__smakebuf_r+0x7c>)
 802a2b6:	62b3      	str	r3, [r6, #40]	; 0x28
 802a2b8:	89a3      	ldrh	r3, [r4, #12]
 802a2ba:	6020      	str	r0, [r4, #0]
 802a2bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802a2c0:	81a3      	strh	r3, [r4, #12]
 802a2c2:	9b00      	ldr	r3, [sp, #0]
 802a2c4:	6163      	str	r3, [r4, #20]
 802a2c6:	9b01      	ldr	r3, [sp, #4]
 802a2c8:	6120      	str	r0, [r4, #16]
 802a2ca:	b15b      	cbz	r3, 802a2e4 <__smakebuf_r+0x74>
 802a2cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802a2d0:	4630      	mov	r0, r6
 802a2d2:	f000 ff2f 	bl	802b134 <_isatty_r>
 802a2d6:	b128      	cbz	r0, 802a2e4 <__smakebuf_r+0x74>
 802a2d8:	89a3      	ldrh	r3, [r4, #12]
 802a2da:	f023 0303 	bic.w	r3, r3, #3
 802a2de:	f043 0301 	orr.w	r3, r3, #1
 802a2e2:	81a3      	strh	r3, [r4, #12]
 802a2e4:	89a0      	ldrh	r0, [r4, #12]
 802a2e6:	4305      	orrs	r5, r0
 802a2e8:	81a5      	strh	r5, [r4, #12]
 802a2ea:	e7cd      	b.n	802a288 <__smakebuf_r+0x18>
 802a2ec:	08029999 	.word	0x08029999

0802a2f0 <__ascii_mbtowc>:
 802a2f0:	b082      	sub	sp, #8
 802a2f2:	b901      	cbnz	r1, 802a2f6 <__ascii_mbtowc+0x6>
 802a2f4:	a901      	add	r1, sp, #4
 802a2f6:	b142      	cbz	r2, 802a30a <__ascii_mbtowc+0x1a>
 802a2f8:	b14b      	cbz	r3, 802a30e <__ascii_mbtowc+0x1e>
 802a2fa:	7813      	ldrb	r3, [r2, #0]
 802a2fc:	600b      	str	r3, [r1, #0]
 802a2fe:	7812      	ldrb	r2, [r2, #0]
 802a300:	1e10      	subs	r0, r2, #0
 802a302:	bf18      	it	ne
 802a304:	2001      	movne	r0, #1
 802a306:	b002      	add	sp, #8
 802a308:	4770      	bx	lr
 802a30a:	4610      	mov	r0, r2
 802a30c:	e7fb      	b.n	802a306 <__ascii_mbtowc+0x16>
 802a30e:	f06f 0001 	mvn.w	r0, #1
 802a312:	e7f8      	b.n	802a306 <__ascii_mbtowc+0x16>

0802a314 <memmove>:
 802a314:	4288      	cmp	r0, r1
 802a316:	b510      	push	{r4, lr}
 802a318:	eb01 0402 	add.w	r4, r1, r2
 802a31c:	d902      	bls.n	802a324 <memmove+0x10>
 802a31e:	4284      	cmp	r4, r0
 802a320:	4623      	mov	r3, r4
 802a322:	d807      	bhi.n	802a334 <memmove+0x20>
 802a324:	1e43      	subs	r3, r0, #1
 802a326:	42a1      	cmp	r1, r4
 802a328:	d008      	beq.n	802a33c <memmove+0x28>
 802a32a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802a32e:	f803 2f01 	strb.w	r2, [r3, #1]!
 802a332:	e7f8      	b.n	802a326 <memmove+0x12>
 802a334:	4402      	add	r2, r0
 802a336:	4601      	mov	r1, r0
 802a338:	428a      	cmp	r2, r1
 802a33a:	d100      	bne.n	802a33e <memmove+0x2a>
 802a33c:	bd10      	pop	{r4, pc}
 802a33e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802a342:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802a346:	e7f7      	b.n	802a338 <memmove+0x24>

0802a348 <__malloc_lock>:
 802a348:	4801      	ldr	r0, [pc, #4]	; (802a350 <__malloc_lock+0x8>)
 802a34a:	f7ff bf6a 	b.w	802a222 <__retarget_lock_acquire_recursive>
 802a34e:	bf00      	nop
 802a350:	200571d8 	.word	0x200571d8

0802a354 <__malloc_unlock>:
 802a354:	4801      	ldr	r0, [pc, #4]	; (802a35c <__malloc_unlock+0x8>)
 802a356:	f7ff bf66 	b.w	802a226 <__retarget_lock_release_recursive>
 802a35a:	bf00      	nop
 802a35c:	200571d8 	.word	0x200571d8

0802a360 <_Balloc>:
 802a360:	b570      	push	{r4, r5, r6, lr}
 802a362:	6a46      	ldr	r6, [r0, #36]	; 0x24
 802a364:	4604      	mov	r4, r0
 802a366:	460d      	mov	r5, r1
 802a368:	b976      	cbnz	r6, 802a388 <_Balloc+0x28>
 802a36a:	2010      	movs	r0, #16
 802a36c:	f7fc fb96 	bl	8026a9c <malloc>
 802a370:	4602      	mov	r2, r0
 802a372:	6260      	str	r0, [r4, #36]	; 0x24
 802a374:	b920      	cbnz	r0, 802a380 <_Balloc+0x20>
 802a376:	4b18      	ldr	r3, [pc, #96]	; (802a3d8 <_Balloc+0x78>)
 802a378:	4818      	ldr	r0, [pc, #96]	; (802a3dc <_Balloc+0x7c>)
 802a37a:	2166      	movs	r1, #102	; 0x66
 802a37c:	f7fc fb20 	bl	80269c0 <__assert_func>
 802a380:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802a384:	6006      	str	r6, [r0, #0]
 802a386:	60c6      	str	r6, [r0, #12]
 802a388:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802a38a:	68f3      	ldr	r3, [r6, #12]
 802a38c:	b183      	cbz	r3, 802a3b0 <_Balloc+0x50>
 802a38e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802a390:	68db      	ldr	r3, [r3, #12]
 802a392:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802a396:	b9b8      	cbnz	r0, 802a3c8 <_Balloc+0x68>
 802a398:	2101      	movs	r1, #1
 802a39a:	fa01 f605 	lsl.w	r6, r1, r5
 802a39e:	1d72      	adds	r2, r6, #5
 802a3a0:	0092      	lsls	r2, r2, #2
 802a3a2:	4620      	mov	r0, r4
 802a3a4:	f000 fc98 	bl	802acd8 <_calloc_r>
 802a3a8:	b160      	cbz	r0, 802a3c4 <_Balloc+0x64>
 802a3aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802a3ae:	e00e      	b.n	802a3ce <_Balloc+0x6e>
 802a3b0:	2221      	movs	r2, #33	; 0x21
 802a3b2:	2104      	movs	r1, #4
 802a3b4:	4620      	mov	r0, r4
 802a3b6:	f000 fc8f 	bl	802acd8 <_calloc_r>
 802a3ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802a3bc:	60f0      	str	r0, [r6, #12]
 802a3be:	68db      	ldr	r3, [r3, #12]
 802a3c0:	2b00      	cmp	r3, #0
 802a3c2:	d1e4      	bne.n	802a38e <_Balloc+0x2e>
 802a3c4:	2000      	movs	r0, #0
 802a3c6:	bd70      	pop	{r4, r5, r6, pc}
 802a3c8:	6802      	ldr	r2, [r0, #0]
 802a3ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802a3ce:	2300      	movs	r3, #0
 802a3d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802a3d4:	e7f7      	b.n	802a3c6 <_Balloc+0x66>
 802a3d6:	bf00      	nop
 802a3d8:	0802f64e 	.word	0x0802f64e
 802a3dc:	0802f7b8 	.word	0x0802f7b8

0802a3e0 <_Bfree>:
 802a3e0:	b570      	push	{r4, r5, r6, lr}
 802a3e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 802a3e4:	4605      	mov	r5, r0
 802a3e6:	460c      	mov	r4, r1
 802a3e8:	b976      	cbnz	r6, 802a408 <_Bfree+0x28>
 802a3ea:	2010      	movs	r0, #16
 802a3ec:	f7fc fb56 	bl	8026a9c <malloc>
 802a3f0:	4602      	mov	r2, r0
 802a3f2:	6268      	str	r0, [r5, #36]	; 0x24
 802a3f4:	b920      	cbnz	r0, 802a400 <_Bfree+0x20>
 802a3f6:	4b09      	ldr	r3, [pc, #36]	; (802a41c <_Bfree+0x3c>)
 802a3f8:	4809      	ldr	r0, [pc, #36]	; (802a420 <_Bfree+0x40>)
 802a3fa:	218a      	movs	r1, #138	; 0x8a
 802a3fc:	f7fc fae0 	bl	80269c0 <__assert_func>
 802a400:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802a404:	6006      	str	r6, [r0, #0]
 802a406:	60c6      	str	r6, [r0, #12]
 802a408:	b13c      	cbz	r4, 802a41a <_Bfree+0x3a>
 802a40a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 802a40c:	6862      	ldr	r2, [r4, #4]
 802a40e:	68db      	ldr	r3, [r3, #12]
 802a410:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802a414:	6021      	str	r1, [r4, #0]
 802a416:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802a41a:	bd70      	pop	{r4, r5, r6, pc}
 802a41c:	0802f64e 	.word	0x0802f64e
 802a420:	0802f7b8 	.word	0x0802f7b8

0802a424 <__multadd>:
 802a424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a428:	690e      	ldr	r6, [r1, #16]
 802a42a:	4607      	mov	r7, r0
 802a42c:	4698      	mov	r8, r3
 802a42e:	460c      	mov	r4, r1
 802a430:	f101 0014 	add.w	r0, r1, #20
 802a434:	2300      	movs	r3, #0
 802a436:	6805      	ldr	r5, [r0, #0]
 802a438:	b2a9      	uxth	r1, r5
 802a43a:	fb02 8101 	mla	r1, r2, r1, r8
 802a43e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 802a442:	0c2d      	lsrs	r5, r5, #16
 802a444:	fb02 c505 	mla	r5, r2, r5, ip
 802a448:	b289      	uxth	r1, r1
 802a44a:	3301      	adds	r3, #1
 802a44c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 802a450:	429e      	cmp	r6, r3
 802a452:	f840 1b04 	str.w	r1, [r0], #4
 802a456:	ea4f 4815 	mov.w	r8, r5, lsr #16
 802a45a:	dcec      	bgt.n	802a436 <__multadd+0x12>
 802a45c:	f1b8 0f00 	cmp.w	r8, #0
 802a460:	d022      	beq.n	802a4a8 <__multadd+0x84>
 802a462:	68a3      	ldr	r3, [r4, #8]
 802a464:	42b3      	cmp	r3, r6
 802a466:	dc19      	bgt.n	802a49c <__multadd+0x78>
 802a468:	6861      	ldr	r1, [r4, #4]
 802a46a:	4638      	mov	r0, r7
 802a46c:	3101      	adds	r1, #1
 802a46e:	f7ff ff77 	bl	802a360 <_Balloc>
 802a472:	4605      	mov	r5, r0
 802a474:	b928      	cbnz	r0, 802a482 <__multadd+0x5e>
 802a476:	4602      	mov	r2, r0
 802a478:	4b0d      	ldr	r3, [pc, #52]	; (802a4b0 <__multadd+0x8c>)
 802a47a:	480e      	ldr	r0, [pc, #56]	; (802a4b4 <__multadd+0x90>)
 802a47c:	21b5      	movs	r1, #181	; 0xb5
 802a47e:	f7fc fa9f 	bl	80269c0 <__assert_func>
 802a482:	6922      	ldr	r2, [r4, #16]
 802a484:	3202      	adds	r2, #2
 802a486:	f104 010c 	add.w	r1, r4, #12
 802a48a:	0092      	lsls	r2, r2, #2
 802a48c:	300c      	adds	r0, #12
 802a48e:	f7fc fb15 	bl	8026abc <memcpy>
 802a492:	4621      	mov	r1, r4
 802a494:	4638      	mov	r0, r7
 802a496:	f7ff ffa3 	bl	802a3e0 <_Bfree>
 802a49a:	462c      	mov	r4, r5
 802a49c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 802a4a0:	3601      	adds	r6, #1
 802a4a2:	f8c3 8014 	str.w	r8, [r3, #20]
 802a4a6:	6126      	str	r6, [r4, #16]
 802a4a8:	4620      	mov	r0, r4
 802a4aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a4ae:	bf00      	nop
 802a4b0:	0802f6c4 	.word	0x0802f6c4
 802a4b4:	0802f7b8 	.word	0x0802f7b8

0802a4b8 <__s2b>:
 802a4b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a4bc:	460c      	mov	r4, r1
 802a4be:	4615      	mov	r5, r2
 802a4c0:	461f      	mov	r7, r3
 802a4c2:	2209      	movs	r2, #9
 802a4c4:	3308      	adds	r3, #8
 802a4c6:	4606      	mov	r6, r0
 802a4c8:	fb93 f3f2 	sdiv	r3, r3, r2
 802a4cc:	2100      	movs	r1, #0
 802a4ce:	2201      	movs	r2, #1
 802a4d0:	429a      	cmp	r2, r3
 802a4d2:	db09      	blt.n	802a4e8 <__s2b+0x30>
 802a4d4:	4630      	mov	r0, r6
 802a4d6:	f7ff ff43 	bl	802a360 <_Balloc>
 802a4da:	b940      	cbnz	r0, 802a4ee <__s2b+0x36>
 802a4dc:	4602      	mov	r2, r0
 802a4de:	4b19      	ldr	r3, [pc, #100]	; (802a544 <__s2b+0x8c>)
 802a4e0:	4819      	ldr	r0, [pc, #100]	; (802a548 <__s2b+0x90>)
 802a4e2:	21ce      	movs	r1, #206	; 0xce
 802a4e4:	f7fc fa6c 	bl	80269c0 <__assert_func>
 802a4e8:	0052      	lsls	r2, r2, #1
 802a4ea:	3101      	adds	r1, #1
 802a4ec:	e7f0      	b.n	802a4d0 <__s2b+0x18>
 802a4ee:	9b08      	ldr	r3, [sp, #32]
 802a4f0:	6143      	str	r3, [r0, #20]
 802a4f2:	2d09      	cmp	r5, #9
 802a4f4:	f04f 0301 	mov.w	r3, #1
 802a4f8:	6103      	str	r3, [r0, #16]
 802a4fa:	dd16      	ble.n	802a52a <__s2b+0x72>
 802a4fc:	f104 0909 	add.w	r9, r4, #9
 802a500:	46c8      	mov	r8, r9
 802a502:	442c      	add	r4, r5
 802a504:	f818 3b01 	ldrb.w	r3, [r8], #1
 802a508:	4601      	mov	r1, r0
 802a50a:	3b30      	subs	r3, #48	; 0x30
 802a50c:	220a      	movs	r2, #10
 802a50e:	4630      	mov	r0, r6
 802a510:	f7ff ff88 	bl	802a424 <__multadd>
 802a514:	45a0      	cmp	r8, r4
 802a516:	d1f5      	bne.n	802a504 <__s2b+0x4c>
 802a518:	f1a5 0408 	sub.w	r4, r5, #8
 802a51c:	444c      	add	r4, r9
 802a51e:	1b2d      	subs	r5, r5, r4
 802a520:	1963      	adds	r3, r4, r5
 802a522:	42bb      	cmp	r3, r7
 802a524:	db04      	blt.n	802a530 <__s2b+0x78>
 802a526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a52a:	340a      	adds	r4, #10
 802a52c:	2509      	movs	r5, #9
 802a52e:	e7f6      	b.n	802a51e <__s2b+0x66>
 802a530:	f814 3b01 	ldrb.w	r3, [r4], #1
 802a534:	4601      	mov	r1, r0
 802a536:	3b30      	subs	r3, #48	; 0x30
 802a538:	220a      	movs	r2, #10
 802a53a:	4630      	mov	r0, r6
 802a53c:	f7ff ff72 	bl	802a424 <__multadd>
 802a540:	e7ee      	b.n	802a520 <__s2b+0x68>
 802a542:	bf00      	nop
 802a544:	0802f6c4 	.word	0x0802f6c4
 802a548:	0802f7b8 	.word	0x0802f7b8

0802a54c <__hi0bits>:
 802a54c:	0c03      	lsrs	r3, r0, #16
 802a54e:	041b      	lsls	r3, r3, #16
 802a550:	b9d3      	cbnz	r3, 802a588 <__hi0bits+0x3c>
 802a552:	0400      	lsls	r0, r0, #16
 802a554:	2310      	movs	r3, #16
 802a556:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802a55a:	bf04      	itt	eq
 802a55c:	0200      	lsleq	r0, r0, #8
 802a55e:	3308      	addeq	r3, #8
 802a560:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 802a564:	bf04      	itt	eq
 802a566:	0100      	lsleq	r0, r0, #4
 802a568:	3304      	addeq	r3, #4
 802a56a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802a56e:	bf04      	itt	eq
 802a570:	0080      	lsleq	r0, r0, #2
 802a572:	3302      	addeq	r3, #2
 802a574:	2800      	cmp	r0, #0
 802a576:	db05      	blt.n	802a584 <__hi0bits+0x38>
 802a578:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 802a57c:	f103 0301 	add.w	r3, r3, #1
 802a580:	bf08      	it	eq
 802a582:	2320      	moveq	r3, #32
 802a584:	4618      	mov	r0, r3
 802a586:	4770      	bx	lr
 802a588:	2300      	movs	r3, #0
 802a58a:	e7e4      	b.n	802a556 <__hi0bits+0xa>

0802a58c <__lo0bits>:
 802a58c:	6803      	ldr	r3, [r0, #0]
 802a58e:	f013 0207 	ands.w	r2, r3, #7
 802a592:	4601      	mov	r1, r0
 802a594:	d00b      	beq.n	802a5ae <__lo0bits+0x22>
 802a596:	07da      	lsls	r2, r3, #31
 802a598:	d424      	bmi.n	802a5e4 <__lo0bits+0x58>
 802a59a:	0798      	lsls	r0, r3, #30
 802a59c:	bf49      	itett	mi
 802a59e:	085b      	lsrmi	r3, r3, #1
 802a5a0:	089b      	lsrpl	r3, r3, #2
 802a5a2:	2001      	movmi	r0, #1
 802a5a4:	600b      	strmi	r3, [r1, #0]
 802a5a6:	bf5c      	itt	pl
 802a5a8:	600b      	strpl	r3, [r1, #0]
 802a5aa:	2002      	movpl	r0, #2
 802a5ac:	4770      	bx	lr
 802a5ae:	b298      	uxth	r0, r3
 802a5b0:	b9b0      	cbnz	r0, 802a5e0 <__lo0bits+0x54>
 802a5b2:	0c1b      	lsrs	r3, r3, #16
 802a5b4:	2010      	movs	r0, #16
 802a5b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 802a5ba:	bf04      	itt	eq
 802a5bc:	0a1b      	lsreq	r3, r3, #8
 802a5be:	3008      	addeq	r0, #8
 802a5c0:	071a      	lsls	r2, r3, #28
 802a5c2:	bf04      	itt	eq
 802a5c4:	091b      	lsreq	r3, r3, #4
 802a5c6:	3004      	addeq	r0, #4
 802a5c8:	079a      	lsls	r2, r3, #30
 802a5ca:	bf04      	itt	eq
 802a5cc:	089b      	lsreq	r3, r3, #2
 802a5ce:	3002      	addeq	r0, #2
 802a5d0:	07da      	lsls	r2, r3, #31
 802a5d2:	d403      	bmi.n	802a5dc <__lo0bits+0x50>
 802a5d4:	085b      	lsrs	r3, r3, #1
 802a5d6:	f100 0001 	add.w	r0, r0, #1
 802a5da:	d005      	beq.n	802a5e8 <__lo0bits+0x5c>
 802a5dc:	600b      	str	r3, [r1, #0]
 802a5de:	4770      	bx	lr
 802a5e0:	4610      	mov	r0, r2
 802a5e2:	e7e8      	b.n	802a5b6 <__lo0bits+0x2a>
 802a5e4:	2000      	movs	r0, #0
 802a5e6:	4770      	bx	lr
 802a5e8:	2020      	movs	r0, #32
 802a5ea:	4770      	bx	lr

0802a5ec <__i2b>:
 802a5ec:	b510      	push	{r4, lr}
 802a5ee:	460c      	mov	r4, r1
 802a5f0:	2101      	movs	r1, #1
 802a5f2:	f7ff feb5 	bl	802a360 <_Balloc>
 802a5f6:	4602      	mov	r2, r0
 802a5f8:	b928      	cbnz	r0, 802a606 <__i2b+0x1a>
 802a5fa:	4b05      	ldr	r3, [pc, #20]	; (802a610 <__i2b+0x24>)
 802a5fc:	4805      	ldr	r0, [pc, #20]	; (802a614 <__i2b+0x28>)
 802a5fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802a602:	f7fc f9dd 	bl	80269c0 <__assert_func>
 802a606:	2301      	movs	r3, #1
 802a608:	6144      	str	r4, [r0, #20]
 802a60a:	6103      	str	r3, [r0, #16]
 802a60c:	bd10      	pop	{r4, pc}
 802a60e:	bf00      	nop
 802a610:	0802f6c4 	.word	0x0802f6c4
 802a614:	0802f7b8 	.word	0x0802f7b8

0802a618 <__multiply>:
 802a618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a61c:	4614      	mov	r4, r2
 802a61e:	690a      	ldr	r2, [r1, #16]
 802a620:	6923      	ldr	r3, [r4, #16]
 802a622:	429a      	cmp	r2, r3
 802a624:	bfb8      	it	lt
 802a626:	460b      	movlt	r3, r1
 802a628:	460d      	mov	r5, r1
 802a62a:	bfbc      	itt	lt
 802a62c:	4625      	movlt	r5, r4
 802a62e:	461c      	movlt	r4, r3
 802a630:	f8d5 a010 	ldr.w	sl, [r5, #16]
 802a634:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802a638:	68ab      	ldr	r3, [r5, #8]
 802a63a:	6869      	ldr	r1, [r5, #4]
 802a63c:	eb0a 0709 	add.w	r7, sl, r9
 802a640:	42bb      	cmp	r3, r7
 802a642:	b085      	sub	sp, #20
 802a644:	bfb8      	it	lt
 802a646:	3101      	addlt	r1, #1
 802a648:	f7ff fe8a 	bl	802a360 <_Balloc>
 802a64c:	b930      	cbnz	r0, 802a65c <__multiply+0x44>
 802a64e:	4602      	mov	r2, r0
 802a650:	4b42      	ldr	r3, [pc, #264]	; (802a75c <__multiply+0x144>)
 802a652:	4843      	ldr	r0, [pc, #268]	; (802a760 <__multiply+0x148>)
 802a654:	f240 115d 	movw	r1, #349	; 0x15d
 802a658:	f7fc f9b2 	bl	80269c0 <__assert_func>
 802a65c:	f100 0614 	add.w	r6, r0, #20
 802a660:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 802a664:	4633      	mov	r3, r6
 802a666:	2200      	movs	r2, #0
 802a668:	4543      	cmp	r3, r8
 802a66a:	d31e      	bcc.n	802a6aa <__multiply+0x92>
 802a66c:	f105 0c14 	add.w	ip, r5, #20
 802a670:	f104 0314 	add.w	r3, r4, #20
 802a674:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 802a678:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 802a67c:	9202      	str	r2, [sp, #8]
 802a67e:	ebac 0205 	sub.w	r2, ip, r5
 802a682:	3a15      	subs	r2, #21
 802a684:	f022 0203 	bic.w	r2, r2, #3
 802a688:	3204      	adds	r2, #4
 802a68a:	f105 0115 	add.w	r1, r5, #21
 802a68e:	458c      	cmp	ip, r1
 802a690:	bf38      	it	cc
 802a692:	2204      	movcc	r2, #4
 802a694:	9201      	str	r2, [sp, #4]
 802a696:	9a02      	ldr	r2, [sp, #8]
 802a698:	9303      	str	r3, [sp, #12]
 802a69a:	429a      	cmp	r2, r3
 802a69c:	d808      	bhi.n	802a6b0 <__multiply+0x98>
 802a69e:	2f00      	cmp	r7, #0
 802a6a0:	dc55      	bgt.n	802a74e <__multiply+0x136>
 802a6a2:	6107      	str	r7, [r0, #16]
 802a6a4:	b005      	add	sp, #20
 802a6a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a6aa:	f843 2b04 	str.w	r2, [r3], #4
 802a6ae:	e7db      	b.n	802a668 <__multiply+0x50>
 802a6b0:	f8b3 a000 	ldrh.w	sl, [r3]
 802a6b4:	f1ba 0f00 	cmp.w	sl, #0
 802a6b8:	d020      	beq.n	802a6fc <__multiply+0xe4>
 802a6ba:	f105 0e14 	add.w	lr, r5, #20
 802a6be:	46b1      	mov	r9, r6
 802a6c0:	2200      	movs	r2, #0
 802a6c2:	f85e 4b04 	ldr.w	r4, [lr], #4
 802a6c6:	f8d9 b000 	ldr.w	fp, [r9]
 802a6ca:	b2a1      	uxth	r1, r4
 802a6cc:	fa1f fb8b 	uxth.w	fp, fp
 802a6d0:	fb0a b101 	mla	r1, sl, r1, fp
 802a6d4:	4411      	add	r1, r2
 802a6d6:	f8d9 2000 	ldr.w	r2, [r9]
 802a6da:	0c24      	lsrs	r4, r4, #16
 802a6dc:	0c12      	lsrs	r2, r2, #16
 802a6de:	fb0a 2404 	mla	r4, sl, r4, r2
 802a6e2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 802a6e6:	b289      	uxth	r1, r1
 802a6e8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 802a6ec:	45f4      	cmp	ip, lr
 802a6ee:	f849 1b04 	str.w	r1, [r9], #4
 802a6f2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 802a6f6:	d8e4      	bhi.n	802a6c2 <__multiply+0xaa>
 802a6f8:	9901      	ldr	r1, [sp, #4]
 802a6fa:	5072      	str	r2, [r6, r1]
 802a6fc:	9a03      	ldr	r2, [sp, #12]
 802a6fe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802a702:	3304      	adds	r3, #4
 802a704:	f1b9 0f00 	cmp.w	r9, #0
 802a708:	d01f      	beq.n	802a74a <__multiply+0x132>
 802a70a:	6834      	ldr	r4, [r6, #0]
 802a70c:	f105 0114 	add.w	r1, r5, #20
 802a710:	46b6      	mov	lr, r6
 802a712:	f04f 0a00 	mov.w	sl, #0
 802a716:	880a      	ldrh	r2, [r1, #0]
 802a718:	f8be b002 	ldrh.w	fp, [lr, #2]
 802a71c:	fb09 b202 	mla	r2, r9, r2, fp
 802a720:	4492      	add	sl, r2
 802a722:	b2a4      	uxth	r4, r4
 802a724:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 802a728:	f84e 4b04 	str.w	r4, [lr], #4
 802a72c:	f851 4b04 	ldr.w	r4, [r1], #4
 802a730:	f8be 2000 	ldrh.w	r2, [lr]
 802a734:	0c24      	lsrs	r4, r4, #16
 802a736:	fb09 2404 	mla	r4, r9, r4, r2
 802a73a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 802a73e:	458c      	cmp	ip, r1
 802a740:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 802a744:	d8e7      	bhi.n	802a716 <__multiply+0xfe>
 802a746:	9a01      	ldr	r2, [sp, #4]
 802a748:	50b4      	str	r4, [r6, r2]
 802a74a:	3604      	adds	r6, #4
 802a74c:	e7a3      	b.n	802a696 <__multiply+0x7e>
 802a74e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802a752:	2b00      	cmp	r3, #0
 802a754:	d1a5      	bne.n	802a6a2 <__multiply+0x8a>
 802a756:	3f01      	subs	r7, #1
 802a758:	e7a1      	b.n	802a69e <__multiply+0x86>
 802a75a:	bf00      	nop
 802a75c:	0802f6c4 	.word	0x0802f6c4
 802a760:	0802f7b8 	.word	0x0802f7b8

0802a764 <__pow5mult>:
 802a764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a768:	4615      	mov	r5, r2
 802a76a:	f012 0203 	ands.w	r2, r2, #3
 802a76e:	4606      	mov	r6, r0
 802a770:	460f      	mov	r7, r1
 802a772:	d007      	beq.n	802a784 <__pow5mult+0x20>
 802a774:	4c25      	ldr	r4, [pc, #148]	; (802a80c <__pow5mult+0xa8>)
 802a776:	3a01      	subs	r2, #1
 802a778:	2300      	movs	r3, #0
 802a77a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802a77e:	f7ff fe51 	bl	802a424 <__multadd>
 802a782:	4607      	mov	r7, r0
 802a784:	10ad      	asrs	r5, r5, #2
 802a786:	d03d      	beq.n	802a804 <__pow5mult+0xa0>
 802a788:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802a78a:	b97c      	cbnz	r4, 802a7ac <__pow5mult+0x48>
 802a78c:	2010      	movs	r0, #16
 802a78e:	f7fc f985 	bl	8026a9c <malloc>
 802a792:	4602      	mov	r2, r0
 802a794:	6270      	str	r0, [r6, #36]	; 0x24
 802a796:	b928      	cbnz	r0, 802a7a4 <__pow5mult+0x40>
 802a798:	4b1d      	ldr	r3, [pc, #116]	; (802a810 <__pow5mult+0xac>)
 802a79a:	481e      	ldr	r0, [pc, #120]	; (802a814 <__pow5mult+0xb0>)
 802a79c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 802a7a0:	f7fc f90e 	bl	80269c0 <__assert_func>
 802a7a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802a7a8:	6004      	str	r4, [r0, #0]
 802a7aa:	60c4      	str	r4, [r0, #12]
 802a7ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 802a7b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802a7b4:	b94c      	cbnz	r4, 802a7ca <__pow5mult+0x66>
 802a7b6:	f240 2171 	movw	r1, #625	; 0x271
 802a7ba:	4630      	mov	r0, r6
 802a7bc:	f7ff ff16 	bl	802a5ec <__i2b>
 802a7c0:	2300      	movs	r3, #0
 802a7c2:	f8c8 0008 	str.w	r0, [r8, #8]
 802a7c6:	4604      	mov	r4, r0
 802a7c8:	6003      	str	r3, [r0, #0]
 802a7ca:	f04f 0900 	mov.w	r9, #0
 802a7ce:	07eb      	lsls	r3, r5, #31
 802a7d0:	d50a      	bpl.n	802a7e8 <__pow5mult+0x84>
 802a7d2:	4639      	mov	r1, r7
 802a7d4:	4622      	mov	r2, r4
 802a7d6:	4630      	mov	r0, r6
 802a7d8:	f7ff ff1e 	bl	802a618 <__multiply>
 802a7dc:	4639      	mov	r1, r7
 802a7de:	4680      	mov	r8, r0
 802a7e0:	4630      	mov	r0, r6
 802a7e2:	f7ff fdfd 	bl	802a3e0 <_Bfree>
 802a7e6:	4647      	mov	r7, r8
 802a7e8:	106d      	asrs	r5, r5, #1
 802a7ea:	d00b      	beq.n	802a804 <__pow5mult+0xa0>
 802a7ec:	6820      	ldr	r0, [r4, #0]
 802a7ee:	b938      	cbnz	r0, 802a800 <__pow5mult+0x9c>
 802a7f0:	4622      	mov	r2, r4
 802a7f2:	4621      	mov	r1, r4
 802a7f4:	4630      	mov	r0, r6
 802a7f6:	f7ff ff0f 	bl	802a618 <__multiply>
 802a7fa:	6020      	str	r0, [r4, #0]
 802a7fc:	f8c0 9000 	str.w	r9, [r0]
 802a800:	4604      	mov	r4, r0
 802a802:	e7e4      	b.n	802a7ce <__pow5mult+0x6a>
 802a804:	4638      	mov	r0, r7
 802a806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a80a:	bf00      	nop
 802a80c:	0802f908 	.word	0x0802f908
 802a810:	0802f64e 	.word	0x0802f64e
 802a814:	0802f7b8 	.word	0x0802f7b8

0802a818 <__lshift>:
 802a818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a81c:	460c      	mov	r4, r1
 802a81e:	6849      	ldr	r1, [r1, #4]
 802a820:	6923      	ldr	r3, [r4, #16]
 802a822:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802a826:	68a3      	ldr	r3, [r4, #8]
 802a828:	4607      	mov	r7, r0
 802a82a:	4691      	mov	r9, r2
 802a82c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802a830:	f108 0601 	add.w	r6, r8, #1
 802a834:	42b3      	cmp	r3, r6
 802a836:	db0b      	blt.n	802a850 <__lshift+0x38>
 802a838:	4638      	mov	r0, r7
 802a83a:	f7ff fd91 	bl	802a360 <_Balloc>
 802a83e:	4605      	mov	r5, r0
 802a840:	b948      	cbnz	r0, 802a856 <__lshift+0x3e>
 802a842:	4602      	mov	r2, r0
 802a844:	4b28      	ldr	r3, [pc, #160]	; (802a8e8 <__lshift+0xd0>)
 802a846:	4829      	ldr	r0, [pc, #164]	; (802a8ec <__lshift+0xd4>)
 802a848:	f240 11d9 	movw	r1, #473	; 0x1d9
 802a84c:	f7fc f8b8 	bl	80269c0 <__assert_func>
 802a850:	3101      	adds	r1, #1
 802a852:	005b      	lsls	r3, r3, #1
 802a854:	e7ee      	b.n	802a834 <__lshift+0x1c>
 802a856:	2300      	movs	r3, #0
 802a858:	f100 0114 	add.w	r1, r0, #20
 802a85c:	f100 0210 	add.w	r2, r0, #16
 802a860:	4618      	mov	r0, r3
 802a862:	4553      	cmp	r3, sl
 802a864:	db33      	blt.n	802a8ce <__lshift+0xb6>
 802a866:	6920      	ldr	r0, [r4, #16]
 802a868:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802a86c:	f104 0314 	add.w	r3, r4, #20
 802a870:	f019 091f 	ands.w	r9, r9, #31
 802a874:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802a878:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802a87c:	d02b      	beq.n	802a8d6 <__lshift+0xbe>
 802a87e:	f1c9 0e20 	rsb	lr, r9, #32
 802a882:	468a      	mov	sl, r1
 802a884:	2200      	movs	r2, #0
 802a886:	6818      	ldr	r0, [r3, #0]
 802a888:	fa00 f009 	lsl.w	r0, r0, r9
 802a88c:	4302      	orrs	r2, r0
 802a88e:	f84a 2b04 	str.w	r2, [sl], #4
 802a892:	f853 2b04 	ldr.w	r2, [r3], #4
 802a896:	459c      	cmp	ip, r3
 802a898:	fa22 f20e 	lsr.w	r2, r2, lr
 802a89c:	d8f3      	bhi.n	802a886 <__lshift+0x6e>
 802a89e:	ebac 0304 	sub.w	r3, ip, r4
 802a8a2:	3b15      	subs	r3, #21
 802a8a4:	f023 0303 	bic.w	r3, r3, #3
 802a8a8:	3304      	adds	r3, #4
 802a8aa:	f104 0015 	add.w	r0, r4, #21
 802a8ae:	4584      	cmp	ip, r0
 802a8b0:	bf38      	it	cc
 802a8b2:	2304      	movcc	r3, #4
 802a8b4:	50ca      	str	r2, [r1, r3]
 802a8b6:	b10a      	cbz	r2, 802a8bc <__lshift+0xa4>
 802a8b8:	f108 0602 	add.w	r6, r8, #2
 802a8bc:	3e01      	subs	r6, #1
 802a8be:	4638      	mov	r0, r7
 802a8c0:	612e      	str	r6, [r5, #16]
 802a8c2:	4621      	mov	r1, r4
 802a8c4:	f7ff fd8c 	bl	802a3e0 <_Bfree>
 802a8c8:	4628      	mov	r0, r5
 802a8ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a8ce:	f842 0f04 	str.w	r0, [r2, #4]!
 802a8d2:	3301      	adds	r3, #1
 802a8d4:	e7c5      	b.n	802a862 <__lshift+0x4a>
 802a8d6:	3904      	subs	r1, #4
 802a8d8:	f853 2b04 	ldr.w	r2, [r3], #4
 802a8dc:	f841 2f04 	str.w	r2, [r1, #4]!
 802a8e0:	459c      	cmp	ip, r3
 802a8e2:	d8f9      	bhi.n	802a8d8 <__lshift+0xc0>
 802a8e4:	e7ea      	b.n	802a8bc <__lshift+0xa4>
 802a8e6:	bf00      	nop
 802a8e8:	0802f6c4 	.word	0x0802f6c4
 802a8ec:	0802f7b8 	.word	0x0802f7b8

0802a8f0 <__mcmp>:
 802a8f0:	b530      	push	{r4, r5, lr}
 802a8f2:	6902      	ldr	r2, [r0, #16]
 802a8f4:	690c      	ldr	r4, [r1, #16]
 802a8f6:	1b12      	subs	r2, r2, r4
 802a8f8:	d10e      	bne.n	802a918 <__mcmp+0x28>
 802a8fa:	f100 0314 	add.w	r3, r0, #20
 802a8fe:	3114      	adds	r1, #20
 802a900:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 802a904:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 802a908:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802a90c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802a910:	42a5      	cmp	r5, r4
 802a912:	d003      	beq.n	802a91c <__mcmp+0x2c>
 802a914:	d305      	bcc.n	802a922 <__mcmp+0x32>
 802a916:	2201      	movs	r2, #1
 802a918:	4610      	mov	r0, r2
 802a91a:	bd30      	pop	{r4, r5, pc}
 802a91c:	4283      	cmp	r3, r0
 802a91e:	d3f3      	bcc.n	802a908 <__mcmp+0x18>
 802a920:	e7fa      	b.n	802a918 <__mcmp+0x28>
 802a922:	f04f 32ff 	mov.w	r2, #4294967295
 802a926:	e7f7      	b.n	802a918 <__mcmp+0x28>

0802a928 <__mdiff>:
 802a928:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a92c:	460c      	mov	r4, r1
 802a92e:	4606      	mov	r6, r0
 802a930:	4611      	mov	r1, r2
 802a932:	4620      	mov	r0, r4
 802a934:	4617      	mov	r7, r2
 802a936:	f7ff ffdb 	bl	802a8f0 <__mcmp>
 802a93a:	1e05      	subs	r5, r0, #0
 802a93c:	d110      	bne.n	802a960 <__mdiff+0x38>
 802a93e:	4629      	mov	r1, r5
 802a940:	4630      	mov	r0, r6
 802a942:	f7ff fd0d 	bl	802a360 <_Balloc>
 802a946:	b930      	cbnz	r0, 802a956 <__mdiff+0x2e>
 802a948:	4b39      	ldr	r3, [pc, #228]	; (802aa30 <__mdiff+0x108>)
 802a94a:	4602      	mov	r2, r0
 802a94c:	f240 2132 	movw	r1, #562	; 0x232
 802a950:	4838      	ldr	r0, [pc, #224]	; (802aa34 <__mdiff+0x10c>)
 802a952:	f7fc f835 	bl	80269c0 <__assert_func>
 802a956:	2301      	movs	r3, #1
 802a958:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802a95c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a960:	bfa4      	itt	ge
 802a962:	463b      	movge	r3, r7
 802a964:	4627      	movge	r7, r4
 802a966:	4630      	mov	r0, r6
 802a968:	6879      	ldr	r1, [r7, #4]
 802a96a:	bfa6      	itte	ge
 802a96c:	461c      	movge	r4, r3
 802a96e:	2500      	movge	r5, #0
 802a970:	2501      	movlt	r5, #1
 802a972:	f7ff fcf5 	bl	802a360 <_Balloc>
 802a976:	b920      	cbnz	r0, 802a982 <__mdiff+0x5a>
 802a978:	4b2d      	ldr	r3, [pc, #180]	; (802aa30 <__mdiff+0x108>)
 802a97a:	4602      	mov	r2, r0
 802a97c:	f44f 7110 	mov.w	r1, #576	; 0x240
 802a980:	e7e6      	b.n	802a950 <__mdiff+0x28>
 802a982:	693e      	ldr	r6, [r7, #16]
 802a984:	60c5      	str	r5, [r0, #12]
 802a986:	6925      	ldr	r5, [r4, #16]
 802a988:	f107 0114 	add.w	r1, r7, #20
 802a98c:	f104 0914 	add.w	r9, r4, #20
 802a990:	f100 0e14 	add.w	lr, r0, #20
 802a994:	f107 0210 	add.w	r2, r7, #16
 802a998:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 802a99c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 802a9a0:	46f2      	mov	sl, lr
 802a9a2:	2700      	movs	r7, #0
 802a9a4:	f859 3b04 	ldr.w	r3, [r9], #4
 802a9a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 802a9ac:	fa1f f883 	uxth.w	r8, r3
 802a9b0:	fa17 f78b 	uxtah	r7, r7, fp
 802a9b4:	0c1b      	lsrs	r3, r3, #16
 802a9b6:	eba7 0808 	sub.w	r8, r7, r8
 802a9ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802a9be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802a9c2:	fa1f f888 	uxth.w	r8, r8
 802a9c6:	141f      	asrs	r7, r3, #16
 802a9c8:	454d      	cmp	r5, r9
 802a9ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802a9ce:	f84a 3b04 	str.w	r3, [sl], #4
 802a9d2:	d8e7      	bhi.n	802a9a4 <__mdiff+0x7c>
 802a9d4:	1b2b      	subs	r3, r5, r4
 802a9d6:	3b15      	subs	r3, #21
 802a9d8:	f023 0303 	bic.w	r3, r3, #3
 802a9dc:	3304      	adds	r3, #4
 802a9de:	3415      	adds	r4, #21
 802a9e0:	42a5      	cmp	r5, r4
 802a9e2:	bf38      	it	cc
 802a9e4:	2304      	movcc	r3, #4
 802a9e6:	4419      	add	r1, r3
 802a9e8:	4473      	add	r3, lr
 802a9ea:	469e      	mov	lr, r3
 802a9ec:	460d      	mov	r5, r1
 802a9ee:	4565      	cmp	r5, ip
 802a9f0:	d30e      	bcc.n	802aa10 <__mdiff+0xe8>
 802a9f2:	f10c 0203 	add.w	r2, ip, #3
 802a9f6:	1a52      	subs	r2, r2, r1
 802a9f8:	f022 0203 	bic.w	r2, r2, #3
 802a9fc:	3903      	subs	r1, #3
 802a9fe:	458c      	cmp	ip, r1
 802aa00:	bf38      	it	cc
 802aa02:	2200      	movcc	r2, #0
 802aa04:	441a      	add	r2, r3
 802aa06:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802aa0a:	b17b      	cbz	r3, 802aa2c <__mdiff+0x104>
 802aa0c:	6106      	str	r6, [r0, #16]
 802aa0e:	e7a5      	b.n	802a95c <__mdiff+0x34>
 802aa10:	f855 8b04 	ldr.w	r8, [r5], #4
 802aa14:	fa17 f488 	uxtah	r4, r7, r8
 802aa18:	1422      	asrs	r2, r4, #16
 802aa1a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 802aa1e:	b2a4      	uxth	r4, r4
 802aa20:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 802aa24:	f84e 4b04 	str.w	r4, [lr], #4
 802aa28:	1417      	asrs	r7, r2, #16
 802aa2a:	e7e0      	b.n	802a9ee <__mdiff+0xc6>
 802aa2c:	3e01      	subs	r6, #1
 802aa2e:	e7ea      	b.n	802aa06 <__mdiff+0xde>
 802aa30:	0802f6c4 	.word	0x0802f6c4
 802aa34:	0802f7b8 	.word	0x0802f7b8

0802aa38 <__ulp>:
 802aa38:	b082      	sub	sp, #8
 802aa3a:	ed8d 0b00 	vstr	d0, [sp]
 802aa3e:	9b01      	ldr	r3, [sp, #4]
 802aa40:	4912      	ldr	r1, [pc, #72]	; (802aa8c <__ulp+0x54>)
 802aa42:	4019      	ands	r1, r3
 802aa44:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 802aa48:	2900      	cmp	r1, #0
 802aa4a:	dd05      	ble.n	802aa58 <__ulp+0x20>
 802aa4c:	2200      	movs	r2, #0
 802aa4e:	460b      	mov	r3, r1
 802aa50:	ec43 2b10 	vmov	d0, r2, r3
 802aa54:	b002      	add	sp, #8
 802aa56:	4770      	bx	lr
 802aa58:	4249      	negs	r1, r1
 802aa5a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 802aa5e:	ea4f 5021 	mov.w	r0, r1, asr #20
 802aa62:	f04f 0200 	mov.w	r2, #0
 802aa66:	f04f 0300 	mov.w	r3, #0
 802aa6a:	da04      	bge.n	802aa76 <__ulp+0x3e>
 802aa6c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 802aa70:	fa41 f300 	asr.w	r3, r1, r0
 802aa74:	e7ec      	b.n	802aa50 <__ulp+0x18>
 802aa76:	f1a0 0114 	sub.w	r1, r0, #20
 802aa7a:	291e      	cmp	r1, #30
 802aa7c:	bfda      	itte	le
 802aa7e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 802aa82:	fa20 f101 	lsrle.w	r1, r0, r1
 802aa86:	2101      	movgt	r1, #1
 802aa88:	460a      	mov	r2, r1
 802aa8a:	e7e1      	b.n	802aa50 <__ulp+0x18>
 802aa8c:	7ff00000 	.word	0x7ff00000

0802aa90 <__b2d>:
 802aa90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802aa92:	6905      	ldr	r5, [r0, #16]
 802aa94:	f100 0714 	add.w	r7, r0, #20
 802aa98:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 802aa9c:	1f2e      	subs	r6, r5, #4
 802aa9e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 802aaa2:	4620      	mov	r0, r4
 802aaa4:	f7ff fd52 	bl	802a54c <__hi0bits>
 802aaa8:	f1c0 0320 	rsb	r3, r0, #32
 802aaac:	280a      	cmp	r0, #10
 802aaae:	f8df c07c 	ldr.w	ip, [pc, #124]	; 802ab2c <__b2d+0x9c>
 802aab2:	600b      	str	r3, [r1, #0]
 802aab4:	dc14      	bgt.n	802aae0 <__b2d+0x50>
 802aab6:	f1c0 0e0b 	rsb	lr, r0, #11
 802aaba:	fa24 f10e 	lsr.w	r1, r4, lr
 802aabe:	42b7      	cmp	r7, r6
 802aac0:	ea41 030c 	orr.w	r3, r1, ip
 802aac4:	bf34      	ite	cc
 802aac6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 802aaca:	2100      	movcs	r1, #0
 802aacc:	3015      	adds	r0, #21
 802aace:	fa04 f000 	lsl.w	r0, r4, r0
 802aad2:	fa21 f10e 	lsr.w	r1, r1, lr
 802aad6:	ea40 0201 	orr.w	r2, r0, r1
 802aada:	ec43 2b10 	vmov	d0, r2, r3
 802aade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802aae0:	42b7      	cmp	r7, r6
 802aae2:	bf3a      	itte	cc
 802aae4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 802aae8:	f1a5 0608 	subcc.w	r6, r5, #8
 802aaec:	2100      	movcs	r1, #0
 802aaee:	380b      	subs	r0, #11
 802aaf0:	d017      	beq.n	802ab22 <__b2d+0x92>
 802aaf2:	f1c0 0c20 	rsb	ip, r0, #32
 802aaf6:	fa04 f500 	lsl.w	r5, r4, r0
 802aafa:	42be      	cmp	r6, r7
 802aafc:	fa21 f40c 	lsr.w	r4, r1, ip
 802ab00:	ea45 0504 	orr.w	r5, r5, r4
 802ab04:	bf8c      	ite	hi
 802ab06:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 802ab0a:	2400      	movls	r4, #0
 802ab0c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 802ab10:	fa01 f000 	lsl.w	r0, r1, r0
 802ab14:	fa24 f40c 	lsr.w	r4, r4, ip
 802ab18:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802ab1c:	ea40 0204 	orr.w	r2, r0, r4
 802ab20:	e7db      	b.n	802aada <__b2d+0x4a>
 802ab22:	ea44 030c 	orr.w	r3, r4, ip
 802ab26:	460a      	mov	r2, r1
 802ab28:	e7d7      	b.n	802aada <__b2d+0x4a>
 802ab2a:	bf00      	nop
 802ab2c:	3ff00000 	.word	0x3ff00000

0802ab30 <__d2b>:
 802ab30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802ab34:	4689      	mov	r9, r1
 802ab36:	2101      	movs	r1, #1
 802ab38:	ec57 6b10 	vmov	r6, r7, d0
 802ab3c:	4690      	mov	r8, r2
 802ab3e:	f7ff fc0f 	bl	802a360 <_Balloc>
 802ab42:	4604      	mov	r4, r0
 802ab44:	b930      	cbnz	r0, 802ab54 <__d2b+0x24>
 802ab46:	4602      	mov	r2, r0
 802ab48:	4b25      	ldr	r3, [pc, #148]	; (802abe0 <__d2b+0xb0>)
 802ab4a:	4826      	ldr	r0, [pc, #152]	; (802abe4 <__d2b+0xb4>)
 802ab4c:	f240 310a 	movw	r1, #778	; 0x30a
 802ab50:	f7fb ff36 	bl	80269c0 <__assert_func>
 802ab54:	f3c7 550a 	ubfx	r5, r7, #20, #11
 802ab58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802ab5c:	bb35      	cbnz	r5, 802abac <__d2b+0x7c>
 802ab5e:	2e00      	cmp	r6, #0
 802ab60:	9301      	str	r3, [sp, #4]
 802ab62:	d028      	beq.n	802abb6 <__d2b+0x86>
 802ab64:	4668      	mov	r0, sp
 802ab66:	9600      	str	r6, [sp, #0]
 802ab68:	f7ff fd10 	bl	802a58c <__lo0bits>
 802ab6c:	9900      	ldr	r1, [sp, #0]
 802ab6e:	b300      	cbz	r0, 802abb2 <__d2b+0x82>
 802ab70:	9a01      	ldr	r2, [sp, #4]
 802ab72:	f1c0 0320 	rsb	r3, r0, #32
 802ab76:	fa02 f303 	lsl.w	r3, r2, r3
 802ab7a:	430b      	orrs	r3, r1
 802ab7c:	40c2      	lsrs	r2, r0
 802ab7e:	6163      	str	r3, [r4, #20]
 802ab80:	9201      	str	r2, [sp, #4]
 802ab82:	9b01      	ldr	r3, [sp, #4]
 802ab84:	61a3      	str	r3, [r4, #24]
 802ab86:	2b00      	cmp	r3, #0
 802ab88:	bf14      	ite	ne
 802ab8a:	2202      	movne	r2, #2
 802ab8c:	2201      	moveq	r2, #1
 802ab8e:	6122      	str	r2, [r4, #16]
 802ab90:	b1d5      	cbz	r5, 802abc8 <__d2b+0x98>
 802ab92:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802ab96:	4405      	add	r5, r0
 802ab98:	f8c9 5000 	str.w	r5, [r9]
 802ab9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802aba0:	f8c8 0000 	str.w	r0, [r8]
 802aba4:	4620      	mov	r0, r4
 802aba6:	b003      	add	sp, #12
 802aba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802abac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802abb0:	e7d5      	b.n	802ab5e <__d2b+0x2e>
 802abb2:	6161      	str	r1, [r4, #20]
 802abb4:	e7e5      	b.n	802ab82 <__d2b+0x52>
 802abb6:	a801      	add	r0, sp, #4
 802abb8:	f7ff fce8 	bl	802a58c <__lo0bits>
 802abbc:	9b01      	ldr	r3, [sp, #4]
 802abbe:	6163      	str	r3, [r4, #20]
 802abc0:	2201      	movs	r2, #1
 802abc2:	6122      	str	r2, [r4, #16]
 802abc4:	3020      	adds	r0, #32
 802abc6:	e7e3      	b.n	802ab90 <__d2b+0x60>
 802abc8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802abcc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802abd0:	f8c9 0000 	str.w	r0, [r9]
 802abd4:	6918      	ldr	r0, [r3, #16]
 802abd6:	f7ff fcb9 	bl	802a54c <__hi0bits>
 802abda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802abde:	e7df      	b.n	802aba0 <__d2b+0x70>
 802abe0:	0802f6c4 	.word	0x0802f6c4
 802abe4:	0802f7b8 	.word	0x0802f7b8

0802abe8 <__ratio>:
 802abe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802abec:	468a      	mov	sl, r1
 802abee:	4669      	mov	r1, sp
 802abf0:	4683      	mov	fp, r0
 802abf2:	f7ff ff4d 	bl	802aa90 <__b2d>
 802abf6:	a901      	add	r1, sp, #4
 802abf8:	4650      	mov	r0, sl
 802abfa:	ec59 8b10 	vmov	r8, r9, d0
 802abfe:	ee10 6a10 	vmov	r6, s0
 802ac02:	f7ff ff45 	bl	802aa90 <__b2d>
 802ac06:	f8db 3010 	ldr.w	r3, [fp, #16]
 802ac0a:	f8da 2010 	ldr.w	r2, [sl, #16]
 802ac0e:	eba3 0c02 	sub.w	ip, r3, r2
 802ac12:	e9dd 3200 	ldrd	r3, r2, [sp]
 802ac16:	1a9b      	subs	r3, r3, r2
 802ac18:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 802ac1c:	ec55 4b10 	vmov	r4, r5, d0
 802ac20:	2b00      	cmp	r3, #0
 802ac22:	ee10 0a10 	vmov	r0, s0
 802ac26:	bfce      	itee	gt
 802ac28:	464a      	movgt	r2, r9
 802ac2a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802ac2e:	462a      	movle	r2, r5
 802ac30:	464f      	mov	r7, r9
 802ac32:	4629      	mov	r1, r5
 802ac34:	bfcc      	ite	gt
 802ac36:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802ac3a:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 802ac3e:	ec47 6b17 	vmov	d7, r6, r7
 802ac42:	ec41 0b16 	vmov	d6, r0, r1
 802ac46:	ee87 0b06 	vdiv.f64	d0, d7, d6
 802ac4a:	b003      	add	sp, #12
 802ac4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802ac50 <__copybits>:
 802ac50:	3901      	subs	r1, #1
 802ac52:	b570      	push	{r4, r5, r6, lr}
 802ac54:	1149      	asrs	r1, r1, #5
 802ac56:	6914      	ldr	r4, [r2, #16]
 802ac58:	3101      	adds	r1, #1
 802ac5a:	f102 0314 	add.w	r3, r2, #20
 802ac5e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802ac62:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802ac66:	1f05      	subs	r5, r0, #4
 802ac68:	42a3      	cmp	r3, r4
 802ac6a:	d30c      	bcc.n	802ac86 <__copybits+0x36>
 802ac6c:	1aa3      	subs	r3, r4, r2
 802ac6e:	3b11      	subs	r3, #17
 802ac70:	f023 0303 	bic.w	r3, r3, #3
 802ac74:	3211      	adds	r2, #17
 802ac76:	42a2      	cmp	r2, r4
 802ac78:	bf88      	it	hi
 802ac7a:	2300      	movhi	r3, #0
 802ac7c:	4418      	add	r0, r3
 802ac7e:	2300      	movs	r3, #0
 802ac80:	4288      	cmp	r0, r1
 802ac82:	d305      	bcc.n	802ac90 <__copybits+0x40>
 802ac84:	bd70      	pop	{r4, r5, r6, pc}
 802ac86:	f853 6b04 	ldr.w	r6, [r3], #4
 802ac8a:	f845 6f04 	str.w	r6, [r5, #4]!
 802ac8e:	e7eb      	b.n	802ac68 <__copybits+0x18>
 802ac90:	f840 3b04 	str.w	r3, [r0], #4
 802ac94:	e7f4      	b.n	802ac80 <__copybits+0x30>

0802ac96 <__any_on>:
 802ac96:	f100 0214 	add.w	r2, r0, #20
 802ac9a:	6900      	ldr	r0, [r0, #16]
 802ac9c:	114b      	asrs	r3, r1, #5
 802ac9e:	4298      	cmp	r0, r3
 802aca0:	b510      	push	{r4, lr}
 802aca2:	db11      	blt.n	802acc8 <__any_on+0x32>
 802aca4:	dd0a      	ble.n	802acbc <__any_on+0x26>
 802aca6:	f011 011f 	ands.w	r1, r1, #31
 802acaa:	d007      	beq.n	802acbc <__any_on+0x26>
 802acac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802acb0:	fa24 f001 	lsr.w	r0, r4, r1
 802acb4:	fa00 f101 	lsl.w	r1, r0, r1
 802acb8:	428c      	cmp	r4, r1
 802acba:	d10b      	bne.n	802acd4 <__any_on+0x3e>
 802acbc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802acc0:	4293      	cmp	r3, r2
 802acc2:	d803      	bhi.n	802accc <__any_on+0x36>
 802acc4:	2000      	movs	r0, #0
 802acc6:	bd10      	pop	{r4, pc}
 802acc8:	4603      	mov	r3, r0
 802acca:	e7f7      	b.n	802acbc <__any_on+0x26>
 802accc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802acd0:	2900      	cmp	r1, #0
 802acd2:	d0f5      	beq.n	802acc0 <__any_on+0x2a>
 802acd4:	2001      	movs	r0, #1
 802acd6:	e7f6      	b.n	802acc6 <__any_on+0x30>

0802acd8 <_calloc_r>:
 802acd8:	b513      	push	{r0, r1, r4, lr}
 802acda:	434a      	muls	r2, r1
 802acdc:	4611      	mov	r1, r2
 802acde:	9201      	str	r2, [sp, #4]
 802ace0:	f7fb ff52 	bl	8026b88 <_malloc_r>
 802ace4:	4604      	mov	r4, r0
 802ace6:	b118      	cbz	r0, 802acf0 <_calloc_r+0x18>
 802ace8:	9a01      	ldr	r2, [sp, #4]
 802acea:	2100      	movs	r1, #0
 802acec:	f7fb fef4 	bl	8026ad8 <memset>
 802acf0:	4620      	mov	r0, r4
 802acf2:	b002      	add	sp, #8
 802acf4:	bd10      	pop	{r4, pc}

0802acf6 <_realloc_r>:
 802acf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802acf8:	4607      	mov	r7, r0
 802acfa:	4614      	mov	r4, r2
 802acfc:	460e      	mov	r6, r1
 802acfe:	b921      	cbnz	r1, 802ad0a <_realloc_r+0x14>
 802ad00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802ad04:	4611      	mov	r1, r2
 802ad06:	f7fb bf3f 	b.w	8026b88 <_malloc_r>
 802ad0a:	b922      	cbnz	r2, 802ad16 <_realloc_r+0x20>
 802ad0c:	f7fb feec 	bl	8026ae8 <_free_r>
 802ad10:	4625      	mov	r5, r4
 802ad12:	4628      	mov	r0, r5
 802ad14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802ad16:	f000 fa2f 	bl	802b178 <_malloc_usable_size_r>
 802ad1a:	42a0      	cmp	r0, r4
 802ad1c:	d20f      	bcs.n	802ad3e <_realloc_r+0x48>
 802ad1e:	4621      	mov	r1, r4
 802ad20:	4638      	mov	r0, r7
 802ad22:	f7fb ff31 	bl	8026b88 <_malloc_r>
 802ad26:	4605      	mov	r5, r0
 802ad28:	2800      	cmp	r0, #0
 802ad2a:	d0f2      	beq.n	802ad12 <_realloc_r+0x1c>
 802ad2c:	4631      	mov	r1, r6
 802ad2e:	4622      	mov	r2, r4
 802ad30:	f7fb fec4 	bl	8026abc <memcpy>
 802ad34:	4631      	mov	r1, r6
 802ad36:	4638      	mov	r0, r7
 802ad38:	f7fb fed6 	bl	8026ae8 <_free_r>
 802ad3c:	e7e9      	b.n	802ad12 <_realloc_r+0x1c>
 802ad3e:	4635      	mov	r5, r6
 802ad40:	e7e7      	b.n	802ad12 <_realloc_r+0x1c>

0802ad42 <__ssputs_r>:
 802ad42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802ad46:	688e      	ldr	r6, [r1, #8]
 802ad48:	429e      	cmp	r6, r3
 802ad4a:	4682      	mov	sl, r0
 802ad4c:	460c      	mov	r4, r1
 802ad4e:	4690      	mov	r8, r2
 802ad50:	461f      	mov	r7, r3
 802ad52:	d838      	bhi.n	802adc6 <__ssputs_r+0x84>
 802ad54:	898a      	ldrh	r2, [r1, #12]
 802ad56:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802ad5a:	d032      	beq.n	802adc2 <__ssputs_r+0x80>
 802ad5c:	6825      	ldr	r5, [r4, #0]
 802ad5e:	6909      	ldr	r1, [r1, #16]
 802ad60:	eba5 0901 	sub.w	r9, r5, r1
 802ad64:	6965      	ldr	r5, [r4, #20]
 802ad66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802ad6a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802ad6e:	3301      	adds	r3, #1
 802ad70:	444b      	add	r3, r9
 802ad72:	106d      	asrs	r5, r5, #1
 802ad74:	429d      	cmp	r5, r3
 802ad76:	bf38      	it	cc
 802ad78:	461d      	movcc	r5, r3
 802ad7a:	0553      	lsls	r3, r2, #21
 802ad7c:	d531      	bpl.n	802ade2 <__ssputs_r+0xa0>
 802ad7e:	4629      	mov	r1, r5
 802ad80:	f7fb ff02 	bl	8026b88 <_malloc_r>
 802ad84:	4606      	mov	r6, r0
 802ad86:	b950      	cbnz	r0, 802ad9e <__ssputs_r+0x5c>
 802ad88:	230c      	movs	r3, #12
 802ad8a:	f8ca 3000 	str.w	r3, [sl]
 802ad8e:	89a3      	ldrh	r3, [r4, #12]
 802ad90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802ad94:	81a3      	strh	r3, [r4, #12]
 802ad96:	f04f 30ff 	mov.w	r0, #4294967295
 802ad9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ad9e:	6921      	ldr	r1, [r4, #16]
 802ada0:	464a      	mov	r2, r9
 802ada2:	f7fb fe8b 	bl	8026abc <memcpy>
 802ada6:	89a3      	ldrh	r3, [r4, #12]
 802ada8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802adac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802adb0:	81a3      	strh	r3, [r4, #12]
 802adb2:	6126      	str	r6, [r4, #16]
 802adb4:	6165      	str	r5, [r4, #20]
 802adb6:	444e      	add	r6, r9
 802adb8:	eba5 0509 	sub.w	r5, r5, r9
 802adbc:	6026      	str	r6, [r4, #0]
 802adbe:	60a5      	str	r5, [r4, #8]
 802adc0:	463e      	mov	r6, r7
 802adc2:	42be      	cmp	r6, r7
 802adc4:	d900      	bls.n	802adc8 <__ssputs_r+0x86>
 802adc6:	463e      	mov	r6, r7
 802adc8:	4632      	mov	r2, r6
 802adca:	6820      	ldr	r0, [r4, #0]
 802adcc:	4641      	mov	r1, r8
 802adce:	f7ff faa1 	bl	802a314 <memmove>
 802add2:	68a3      	ldr	r3, [r4, #8]
 802add4:	6822      	ldr	r2, [r4, #0]
 802add6:	1b9b      	subs	r3, r3, r6
 802add8:	4432      	add	r2, r6
 802adda:	60a3      	str	r3, [r4, #8]
 802addc:	6022      	str	r2, [r4, #0]
 802adde:	2000      	movs	r0, #0
 802ade0:	e7db      	b.n	802ad9a <__ssputs_r+0x58>
 802ade2:	462a      	mov	r2, r5
 802ade4:	f7ff ff87 	bl	802acf6 <_realloc_r>
 802ade8:	4606      	mov	r6, r0
 802adea:	2800      	cmp	r0, #0
 802adec:	d1e1      	bne.n	802adb2 <__ssputs_r+0x70>
 802adee:	6921      	ldr	r1, [r4, #16]
 802adf0:	4650      	mov	r0, sl
 802adf2:	f7fb fe79 	bl	8026ae8 <_free_r>
 802adf6:	e7c7      	b.n	802ad88 <__ssputs_r+0x46>

0802adf8 <_svfiprintf_r>:
 802adf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802adfc:	4698      	mov	r8, r3
 802adfe:	898b      	ldrh	r3, [r1, #12]
 802ae00:	061b      	lsls	r3, r3, #24
 802ae02:	b09d      	sub	sp, #116	; 0x74
 802ae04:	4607      	mov	r7, r0
 802ae06:	460d      	mov	r5, r1
 802ae08:	4614      	mov	r4, r2
 802ae0a:	d50e      	bpl.n	802ae2a <_svfiprintf_r+0x32>
 802ae0c:	690b      	ldr	r3, [r1, #16]
 802ae0e:	b963      	cbnz	r3, 802ae2a <_svfiprintf_r+0x32>
 802ae10:	2140      	movs	r1, #64	; 0x40
 802ae12:	f7fb feb9 	bl	8026b88 <_malloc_r>
 802ae16:	6028      	str	r0, [r5, #0]
 802ae18:	6128      	str	r0, [r5, #16]
 802ae1a:	b920      	cbnz	r0, 802ae26 <_svfiprintf_r+0x2e>
 802ae1c:	230c      	movs	r3, #12
 802ae1e:	603b      	str	r3, [r7, #0]
 802ae20:	f04f 30ff 	mov.w	r0, #4294967295
 802ae24:	e0d1      	b.n	802afca <_svfiprintf_r+0x1d2>
 802ae26:	2340      	movs	r3, #64	; 0x40
 802ae28:	616b      	str	r3, [r5, #20]
 802ae2a:	2300      	movs	r3, #0
 802ae2c:	9309      	str	r3, [sp, #36]	; 0x24
 802ae2e:	2320      	movs	r3, #32
 802ae30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802ae34:	f8cd 800c 	str.w	r8, [sp, #12]
 802ae38:	2330      	movs	r3, #48	; 0x30
 802ae3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802afe4 <_svfiprintf_r+0x1ec>
 802ae3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802ae42:	f04f 0901 	mov.w	r9, #1
 802ae46:	4623      	mov	r3, r4
 802ae48:	469a      	mov	sl, r3
 802ae4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802ae4e:	b10a      	cbz	r2, 802ae54 <_svfiprintf_r+0x5c>
 802ae50:	2a25      	cmp	r2, #37	; 0x25
 802ae52:	d1f9      	bne.n	802ae48 <_svfiprintf_r+0x50>
 802ae54:	ebba 0b04 	subs.w	fp, sl, r4
 802ae58:	d00b      	beq.n	802ae72 <_svfiprintf_r+0x7a>
 802ae5a:	465b      	mov	r3, fp
 802ae5c:	4622      	mov	r2, r4
 802ae5e:	4629      	mov	r1, r5
 802ae60:	4638      	mov	r0, r7
 802ae62:	f7ff ff6e 	bl	802ad42 <__ssputs_r>
 802ae66:	3001      	adds	r0, #1
 802ae68:	f000 80aa 	beq.w	802afc0 <_svfiprintf_r+0x1c8>
 802ae6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802ae6e:	445a      	add	r2, fp
 802ae70:	9209      	str	r2, [sp, #36]	; 0x24
 802ae72:	f89a 3000 	ldrb.w	r3, [sl]
 802ae76:	2b00      	cmp	r3, #0
 802ae78:	f000 80a2 	beq.w	802afc0 <_svfiprintf_r+0x1c8>
 802ae7c:	2300      	movs	r3, #0
 802ae7e:	f04f 32ff 	mov.w	r2, #4294967295
 802ae82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802ae86:	f10a 0a01 	add.w	sl, sl, #1
 802ae8a:	9304      	str	r3, [sp, #16]
 802ae8c:	9307      	str	r3, [sp, #28]
 802ae8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802ae92:	931a      	str	r3, [sp, #104]	; 0x68
 802ae94:	4654      	mov	r4, sl
 802ae96:	2205      	movs	r2, #5
 802ae98:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ae9c:	4851      	ldr	r0, [pc, #324]	; (802afe4 <_svfiprintf_r+0x1ec>)
 802ae9e:	f7d5 f9d7 	bl	8000250 <memchr>
 802aea2:	9a04      	ldr	r2, [sp, #16]
 802aea4:	b9d8      	cbnz	r0, 802aede <_svfiprintf_r+0xe6>
 802aea6:	06d0      	lsls	r0, r2, #27
 802aea8:	bf44      	itt	mi
 802aeaa:	2320      	movmi	r3, #32
 802aeac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802aeb0:	0711      	lsls	r1, r2, #28
 802aeb2:	bf44      	itt	mi
 802aeb4:	232b      	movmi	r3, #43	; 0x2b
 802aeb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802aeba:	f89a 3000 	ldrb.w	r3, [sl]
 802aebe:	2b2a      	cmp	r3, #42	; 0x2a
 802aec0:	d015      	beq.n	802aeee <_svfiprintf_r+0xf6>
 802aec2:	9a07      	ldr	r2, [sp, #28]
 802aec4:	4654      	mov	r4, sl
 802aec6:	2000      	movs	r0, #0
 802aec8:	f04f 0c0a 	mov.w	ip, #10
 802aecc:	4621      	mov	r1, r4
 802aece:	f811 3b01 	ldrb.w	r3, [r1], #1
 802aed2:	3b30      	subs	r3, #48	; 0x30
 802aed4:	2b09      	cmp	r3, #9
 802aed6:	d94e      	bls.n	802af76 <_svfiprintf_r+0x17e>
 802aed8:	b1b0      	cbz	r0, 802af08 <_svfiprintf_r+0x110>
 802aeda:	9207      	str	r2, [sp, #28]
 802aedc:	e014      	b.n	802af08 <_svfiprintf_r+0x110>
 802aede:	eba0 0308 	sub.w	r3, r0, r8
 802aee2:	fa09 f303 	lsl.w	r3, r9, r3
 802aee6:	4313      	orrs	r3, r2
 802aee8:	9304      	str	r3, [sp, #16]
 802aeea:	46a2      	mov	sl, r4
 802aeec:	e7d2      	b.n	802ae94 <_svfiprintf_r+0x9c>
 802aeee:	9b03      	ldr	r3, [sp, #12]
 802aef0:	1d19      	adds	r1, r3, #4
 802aef2:	681b      	ldr	r3, [r3, #0]
 802aef4:	9103      	str	r1, [sp, #12]
 802aef6:	2b00      	cmp	r3, #0
 802aef8:	bfbb      	ittet	lt
 802aefa:	425b      	neglt	r3, r3
 802aefc:	f042 0202 	orrlt.w	r2, r2, #2
 802af00:	9307      	strge	r3, [sp, #28]
 802af02:	9307      	strlt	r3, [sp, #28]
 802af04:	bfb8      	it	lt
 802af06:	9204      	strlt	r2, [sp, #16]
 802af08:	7823      	ldrb	r3, [r4, #0]
 802af0a:	2b2e      	cmp	r3, #46	; 0x2e
 802af0c:	d10c      	bne.n	802af28 <_svfiprintf_r+0x130>
 802af0e:	7863      	ldrb	r3, [r4, #1]
 802af10:	2b2a      	cmp	r3, #42	; 0x2a
 802af12:	d135      	bne.n	802af80 <_svfiprintf_r+0x188>
 802af14:	9b03      	ldr	r3, [sp, #12]
 802af16:	1d1a      	adds	r2, r3, #4
 802af18:	681b      	ldr	r3, [r3, #0]
 802af1a:	9203      	str	r2, [sp, #12]
 802af1c:	2b00      	cmp	r3, #0
 802af1e:	bfb8      	it	lt
 802af20:	f04f 33ff 	movlt.w	r3, #4294967295
 802af24:	3402      	adds	r4, #2
 802af26:	9305      	str	r3, [sp, #20]
 802af28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802aff4 <_svfiprintf_r+0x1fc>
 802af2c:	7821      	ldrb	r1, [r4, #0]
 802af2e:	2203      	movs	r2, #3
 802af30:	4650      	mov	r0, sl
 802af32:	f7d5 f98d 	bl	8000250 <memchr>
 802af36:	b140      	cbz	r0, 802af4a <_svfiprintf_r+0x152>
 802af38:	2340      	movs	r3, #64	; 0x40
 802af3a:	eba0 000a 	sub.w	r0, r0, sl
 802af3e:	fa03 f000 	lsl.w	r0, r3, r0
 802af42:	9b04      	ldr	r3, [sp, #16]
 802af44:	4303      	orrs	r3, r0
 802af46:	3401      	adds	r4, #1
 802af48:	9304      	str	r3, [sp, #16]
 802af4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802af4e:	4826      	ldr	r0, [pc, #152]	; (802afe8 <_svfiprintf_r+0x1f0>)
 802af50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802af54:	2206      	movs	r2, #6
 802af56:	f7d5 f97b 	bl	8000250 <memchr>
 802af5a:	2800      	cmp	r0, #0
 802af5c:	d038      	beq.n	802afd0 <_svfiprintf_r+0x1d8>
 802af5e:	4b23      	ldr	r3, [pc, #140]	; (802afec <_svfiprintf_r+0x1f4>)
 802af60:	bb1b      	cbnz	r3, 802afaa <_svfiprintf_r+0x1b2>
 802af62:	9b03      	ldr	r3, [sp, #12]
 802af64:	3307      	adds	r3, #7
 802af66:	f023 0307 	bic.w	r3, r3, #7
 802af6a:	3308      	adds	r3, #8
 802af6c:	9303      	str	r3, [sp, #12]
 802af6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802af70:	4433      	add	r3, r6
 802af72:	9309      	str	r3, [sp, #36]	; 0x24
 802af74:	e767      	b.n	802ae46 <_svfiprintf_r+0x4e>
 802af76:	fb0c 3202 	mla	r2, ip, r2, r3
 802af7a:	460c      	mov	r4, r1
 802af7c:	2001      	movs	r0, #1
 802af7e:	e7a5      	b.n	802aecc <_svfiprintf_r+0xd4>
 802af80:	2300      	movs	r3, #0
 802af82:	3401      	adds	r4, #1
 802af84:	9305      	str	r3, [sp, #20]
 802af86:	4619      	mov	r1, r3
 802af88:	f04f 0c0a 	mov.w	ip, #10
 802af8c:	4620      	mov	r0, r4
 802af8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 802af92:	3a30      	subs	r2, #48	; 0x30
 802af94:	2a09      	cmp	r2, #9
 802af96:	d903      	bls.n	802afa0 <_svfiprintf_r+0x1a8>
 802af98:	2b00      	cmp	r3, #0
 802af9a:	d0c5      	beq.n	802af28 <_svfiprintf_r+0x130>
 802af9c:	9105      	str	r1, [sp, #20]
 802af9e:	e7c3      	b.n	802af28 <_svfiprintf_r+0x130>
 802afa0:	fb0c 2101 	mla	r1, ip, r1, r2
 802afa4:	4604      	mov	r4, r0
 802afa6:	2301      	movs	r3, #1
 802afa8:	e7f0      	b.n	802af8c <_svfiprintf_r+0x194>
 802afaa:	ab03      	add	r3, sp, #12
 802afac:	9300      	str	r3, [sp, #0]
 802afae:	462a      	mov	r2, r5
 802afb0:	4b0f      	ldr	r3, [pc, #60]	; (802aff0 <_svfiprintf_r+0x1f8>)
 802afb2:	a904      	add	r1, sp, #16
 802afb4:	4638      	mov	r0, r7
 802afb6:	f7fc f82b 	bl	8027010 <_printf_float>
 802afba:	1c42      	adds	r2, r0, #1
 802afbc:	4606      	mov	r6, r0
 802afbe:	d1d6      	bne.n	802af6e <_svfiprintf_r+0x176>
 802afc0:	89ab      	ldrh	r3, [r5, #12]
 802afc2:	065b      	lsls	r3, r3, #25
 802afc4:	f53f af2c 	bmi.w	802ae20 <_svfiprintf_r+0x28>
 802afc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 802afca:	b01d      	add	sp, #116	; 0x74
 802afcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802afd0:	ab03      	add	r3, sp, #12
 802afd2:	9300      	str	r3, [sp, #0]
 802afd4:	462a      	mov	r2, r5
 802afd6:	4b06      	ldr	r3, [pc, #24]	; (802aff0 <_svfiprintf_r+0x1f8>)
 802afd8:	a904      	add	r1, sp, #16
 802afda:	4638      	mov	r0, r7
 802afdc:	f7fc faa4 	bl	8027528 <_printf_i>
 802afe0:	e7eb      	b.n	802afba <_svfiprintf_r+0x1c2>
 802afe2:	bf00      	nop
 802afe4:	0802f4a4 	.word	0x0802f4a4
 802afe8:	0802f4ae 	.word	0x0802f4ae
 802afec:	08027011 	.word	0x08027011
 802aff0:	0802ad43 	.word	0x0802ad43
 802aff4:	0802f4aa 	.word	0x0802f4aa

0802aff8 <nan>:
 802aff8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 802b000 <nan+0x8>
 802affc:	4770      	bx	lr
 802affe:	bf00      	nop
 802b000:	00000000 	.word	0x00000000
 802b004:	7ff80000 	.word	0x7ff80000

0802b008 <__sread>:
 802b008:	b510      	push	{r4, lr}
 802b00a:	460c      	mov	r4, r1
 802b00c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b010:	f000 f8ba 	bl	802b188 <_read_r>
 802b014:	2800      	cmp	r0, #0
 802b016:	bfab      	itete	ge
 802b018:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802b01a:	89a3      	ldrhlt	r3, [r4, #12]
 802b01c:	181b      	addge	r3, r3, r0
 802b01e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802b022:	bfac      	ite	ge
 802b024:	6563      	strge	r3, [r4, #84]	; 0x54
 802b026:	81a3      	strhlt	r3, [r4, #12]
 802b028:	bd10      	pop	{r4, pc}

0802b02a <__swrite>:
 802b02a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b02e:	461f      	mov	r7, r3
 802b030:	898b      	ldrh	r3, [r1, #12]
 802b032:	05db      	lsls	r3, r3, #23
 802b034:	4605      	mov	r5, r0
 802b036:	460c      	mov	r4, r1
 802b038:	4616      	mov	r6, r2
 802b03a:	d505      	bpl.n	802b048 <__swrite+0x1e>
 802b03c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b040:	2302      	movs	r3, #2
 802b042:	2200      	movs	r2, #0
 802b044:	f000 f886 	bl	802b154 <_lseek_r>
 802b048:	89a3      	ldrh	r3, [r4, #12]
 802b04a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b04e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802b052:	81a3      	strh	r3, [r4, #12]
 802b054:	4632      	mov	r2, r6
 802b056:	463b      	mov	r3, r7
 802b058:	4628      	mov	r0, r5
 802b05a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802b05e:	f000 b835 	b.w	802b0cc <_write_r>

0802b062 <__sseek>:
 802b062:	b510      	push	{r4, lr}
 802b064:	460c      	mov	r4, r1
 802b066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b06a:	f000 f873 	bl	802b154 <_lseek_r>
 802b06e:	1c43      	adds	r3, r0, #1
 802b070:	89a3      	ldrh	r3, [r4, #12]
 802b072:	bf15      	itete	ne
 802b074:	6560      	strne	r0, [r4, #84]	; 0x54
 802b076:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802b07a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802b07e:	81a3      	strheq	r3, [r4, #12]
 802b080:	bf18      	it	ne
 802b082:	81a3      	strhne	r3, [r4, #12]
 802b084:	bd10      	pop	{r4, pc}

0802b086 <__sclose>:
 802b086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b08a:	f000 b831 	b.w	802b0f0 <_close_r>

0802b08e <strncmp>:
 802b08e:	b510      	push	{r4, lr}
 802b090:	b16a      	cbz	r2, 802b0ae <strncmp+0x20>
 802b092:	3901      	subs	r1, #1
 802b094:	1884      	adds	r4, r0, r2
 802b096:	f810 3b01 	ldrb.w	r3, [r0], #1
 802b09a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802b09e:	4293      	cmp	r3, r2
 802b0a0:	d103      	bne.n	802b0aa <strncmp+0x1c>
 802b0a2:	42a0      	cmp	r0, r4
 802b0a4:	d001      	beq.n	802b0aa <strncmp+0x1c>
 802b0a6:	2b00      	cmp	r3, #0
 802b0a8:	d1f5      	bne.n	802b096 <strncmp+0x8>
 802b0aa:	1a98      	subs	r0, r3, r2
 802b0ac:	bd10      	pop	{r4, pc}
 802b0ae:	4610      	mov	r0, r2
 802b0b0:	e7fc      	b.n	802b0ac <strncmp+0x1e>

0802b0b2 <__ascii_wctomb>:
 802b0b2:	b149      	cbz	r1, 802b0c8 <__ascii_wctomb+0x16>
 802b0b4:	2aff      	cmp	r2, #255	; 0xff
 802b0b6:	bf85      	ittet	hi
 802b0b8:	238a      	movhi	r3, #138	; 0x8a
 802b0ba:	6003      	strhi	r3, [r0, #0]
 802b0bc:	700a      	strbls	r2, [r1, #0]
 802b0be:	f04f 30ff 	movhi.w	r0, #4294967295
 802b0c2:	bf98      	it	ls
 802b0c4:	2001      	movls	r0, #1
 802b0c6:	4770      	bx	lr
 802b0c8:	4608      	mov	r0, r1
 802b0ca:	4770      	bx	lr

0802b0cc <_write_r>:
 802b0cc:	b538      	push	{r3, r4, r5, lr}
 802b0ce:	4d07      	ldr	r5, [pc, #28]	; (802b0ec <_write_r+0x20>)
 802b0d0:	4604      	mov	r4, r0
 802b0d2:	4608      	mov	r0, r1
 802b0d4:	4611      	mov	r1, r2
 802b0d6:	2200      	movs	r2, #0
 802b0d8:	602a      	str	r2, [r5, #0]
 802b0da:	461a      	mov	r2, r3
 802b0dc:	f7d7 fefd 	bl	8002eda <_write>
 802b0e0:	1c43      	adds	r3, r0, #1
 802b0e2:	d102      	bne.n	802b0ea <_write_r+0x1e>
 802b0e4:	682b      	ldr	r3, [r5, #0]
 802b0e6:	b103      	cbz	r3, 802b0ea <_write_r+0x1e>
 802b0e8:	6023      	str	r3, [r4, #0]
 802b0ea:	bd38      	pop	{r3, r4, r5, pc}
 802b0ec:	200571e0 	.word	0x200571e0

0802b0f0 <_close_r>:
 802b0f0:	b538      	push	{r3, r4, r5, lr}
 802b0f2:	4d06      	ldr	r5, [pc, #24]	; (802b10c <_close_r+0x1c>)
 802b0f4:	2300      	movs	r3, #0
 802b0f6:	4604      	mov	r4, r0
 802b0f8:	4608      	mov	r0, r1
 802b0fa:	602b      	str	r3, [r5, #0]
 802b0fc:	f7d7 ff09 	bl	8002f12 <_close>
 802b100:	1c43      	adds	r3, r0, #1
 802b102:	d102      	bne.n	802b10a <_close_r+0x1a>
 802b104:	682b      	ldr	r3, [r5, #0]
 802b106:	b103      	cbz	r3, 802b10a <_close_r+0x1a>
 802b108:	6023      	str	r3, [r4, #0]
 802b10a:	bd38      	pop	{r3, r4, r5, pc}
 802b10c:	200571e0 	.word	0x200571e0

0802b110 <_fstat_r>:
 802b110:	b538      	push	{r3, r4, r5, lr}
 802b112:	4d07      	ldr	r5, [pc, #28]	; (802b130 <_fstat_r+0x20>)
 802b114:	2300      	movs	r3, #0
 802b116:	4604      	mov	r4, r0
 802b118:	4608      	mov	r0, r1
 802b11a:	4611      	mov	r1, r2
 802b11c:	602b      	str	r3, [r5, #0]
 802b11e:	f7d7 ff04 	bl	8002f2a <_fstat>
 802b122:	1c43      	adds	r3, r0, #1
 802b124:	d102      	bne.n	802b12c <_fstat_r+0x1c>
 802b126:	682b      	ldr	r3, [r5, #0]
 802b128:	b103      	cbz	r3, 802b12c <_fstat_r+0x1c>
 802b12a:	6023      	str	r3, [r4, #0]
 802b12c:	bd38      	pop	{r3, r4, r5, pc}
 802b12e:	bf00      	nop
 802b130:	200571e0 	.word	0x200571e0

0802b134 <_isatty_r>:
 802b134:	b538      	push	{r3, r4, r5, lr}
 802b136:	4d06      	ldr	r5, [pc, #24]	; (802b150 <_isatty_r+0x1c>)
 802b138:	2300      	movs	r3, #0
 802b13a:	4604      	mov	r4, r0
 802b13c:	4608      	mov	r0, r1
 802b13e:	602b      	str	r3, [r5, #0]
 802b140:	f7d7 ff03 	bl	8002f4a <_isatty>
 802b144:	1c43      	adds	r3, r0, #1
 802b146:	d102      	bne.n	802b14e <_isatty_r+0x1a>
 802b148:	682b      	ldr	r3, [r5, #0]
 802b14a:	b103      	cbz	r3, 802b14e <_isatty_r+0x1a>
 802b14c:	6023      	str	r3, [r4, #0]
 802b14e:	bd38      	pop	{r3, r4, r5, pc}
 802b150:	200571e0 	.word	0x200571e0

0802b154 <_lseek_r>:
 802b154:	b538      	push	{r3, r4, r5, lr}
 802b156:	4d07      	ldr	r5, [pc, #28]	; (802b174 <_lseek_r+0x20>)
 802b158:	4604      	mov	r4, r0
 802b15a:	4608      	mov	r0, r1
 802b15c:	4611      	mov	r1, r2
 802b15e:	2200      	movs	r2, #0
 802b160:	602a      	str	r2, [r5, #0]
 802b162:	461a      	mov	r2, r3
 802b164:	f7d7 fefc 	bl	8002f60 <_lseek>
 802b168:	1c43      	adds	r3, r0, #1
 802b16a:	d102      	bne.n	802b172 <_lseek_r+0x1e>
 802b16c:	682b      	ldr	r3, [r5, #0]
 802b16e:	b103      	cbz	r3, 802b172 <_lseek_r+0x1e>
 802b170:	6023      	str	r3, [r4, #0]
 802b172:	bd38      	pop	{r3, r4, r5, pc}
 802b174:	200571e0 	.word	0x200571e0

0802b178 <_malloc_usable_size_r>:
 802b178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802b17c:	1f18      	subs	r0, r3, #4
 802b17e:	2b00      	cmp	r3, #0
 802b180:	bfbc      	itt	lt
 802b182:	580b      	ldrlt	r3, [r1, r0]
 802b184:	18c0      	addlt	r0, r0, r3
 802b186:	4770      	bx	lr

0802b188 <_read_r>:
 802b188:	b538      	push	{r3, r4, r5, lr}
 802b18a:	4d07      	ldr	r5, [pc, #28]	; (802b1a8 <_read_r+0x20>)
 802b18c:	4604      	mov	r4, r0
 802b18e:	4608      	mov	r0, r1
 802b190:	4611      	mov	r1, r2
 802b192:	2200      	movs	r2, #0
 802b194:	602a      	str	r2, [r5, #0]
 802b196:	461a      	mov	r2, r3
 802b198:	f7d7 fe82 	bl	8002ea0 <_read>
 802b19c:	1c43      	adds	r3, r0, #1
 802b19e:	d102      	bne.n	802b1a6 <_read_r+0x1e>
 802b1a0:	682b      	ldr	r3, [r5, #0]
 802b1a2:	b103      	cbz	r3, 802b1a6 <_read_r+0x1e>
 802b1a4:	6023      	str	r3, [r4, #0]
 802b1a6:	bd38      	pop	{r3, r4, r5, pc}
 802b1a8:	200571e0 	.word	0x200571e0

0802b1ac <_init>:
 802b1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b1ae:	bf00      	nop
 802b1b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802b1b2:	bc08      	pop	{r3}
 802b1b4:	469e      	mov	lr, r3
 802b1b6:	4770      	bx	lr

0802b1b8 <_fini>:
 802b1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b1ba:	bf00      	nop
 802b1bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802b1be:	bc08      	pop	{r3}
 802b1c0:	469e      	mov	lr, r3
 802b1c2:	4770      	bx	lr
