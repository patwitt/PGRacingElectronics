
AT125SF128A_ExternalLoader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000003f4  20000004  20000004  00010004  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .ARM          00000008  200003f8  200003f8  000103f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init_array   00000004  20000400  20000400  00010400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  20000404  20000404  00010404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000078  20000408  20000408  00010408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000090  20000480  20000480  00010480  2**2
                  ALLOC
  6 .text         0000e73c  20000510  20000510  00010510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .Dev_info     000000c8  2000ec4c  2000ec4c  0002ec4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .rodata       00000024  2000ed14  2000ed14  0001ed14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 ._user_heap_stack 00000600  2000ed38  2000ed38  0001ed38  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0002ed14  2**0
                  CONTENTS, READONLY
 11 .debug_info   00011826  00000000  00000000  0002ed42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000033d3  00000000  00000000  00040568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000e38  00000000  00000000  00043940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00029083  00000000  00000000  00044778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000140c5  00000000  00000000  0006d7fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f1f2e  00000000  00000000  000818c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001737ee  2**0
                  CONTENTS, READONLY
 18 .debug_ranges 00000c58  00000000  00000000  00173848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  000036c0  00000000  00000000  001744a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

20000510 <__do_global_dtors_aux>:
20000510:	b510      	push	{r4, lr}
20000512:	4c05      	ldr	r4, [pc, #20]	; (20000528 <__do_global_dtors_aux+0x18>)
20000514:	7823      	ldrb	r3, [r4, #0]
20000516:	b933      	cbnz	r3, 20000526 <__do_global_dtors_aux+0x16>
20000518:	4b04      	ldr	r3, [pc, #16]	; (2000052c <__do_global_dtors_aux+0x1c>)
2000051a:	b113      	cbz	r3, 20000522 <__do_global_dtors_aux+0x12>
2000051c:	4804      	ldr	r0, [pc, #16]	; (20000530 <__do_global_dtors_aux+0x20>)
2000051e:	f3af 8000 	nop.w
20000522:	2301      	movs	r3, #1
20000524:	7023      	strb	r3, [r4, #0]
20000526:	bd10      	pop	{r4, pc}
20000528:	20000480 	.word	0x20000480
2000052c:	00000000 	.word	0x00000000
20000530:	2000ec30 	.word	0x2000ec30

20000534 <frame_dummy>:
20000534:	b508      	push	{r3, lr}
20000536:	4b03      	ldr	r3, [pc, #12]	; (20000544 <frame_dummy+0x10>)
20000538:	b11b      	cbz	r3, 20000542 <frame_dummy+0xe>
2000053a:	4903      	ldr	r1, [pc, #12]	; (20000548 <frame_dummy+0x14>)
2000053c:	4803      	ldr	r0, [pc, #12]	; (2000054c <frame_dummy+0x18>)
2000053e:	f3af 8000 	nop.w
20000542:	bd08      	pop	{r3, pc}
20000544:	00000000 	.word	0x00000000
20000548:	20000484 	.word	0x20000484
2000054c:	2000ec30 	.word	0x2000ec30

20000550 <_stack_init>:
20000550:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
20000554:	4770      	bx	lr
20000556:	bf00      	nop

20000558 <_mainCRTStartup>:
20000558:	4b17      	ldr	r3, [pc, #92]	; (200005b8 <_mainCRTStartup+0x60>)
2000055a:	2b00      	cmp	r3, #0
2000055c:	bf08      	it	eq
2000055e:	4b13      	ldreq	r3, [pc, #76]	; (200005ac <_mainCRTStartup+0x54>)
20000560:	469d      	mov	sp, r3
20000562:	f7ff fff5 	bl	20000550 <_stack_init>
20000566:	2100      	movs	r1, #0
20000568:	468b      	mov	fp, r1
2000056a:	460f      	mov	r7, r1
2000056c:	4813      	ldr	r0, [pc, #76]	; (200005bc <_mainCRTStartup+0x64>)
2000056e:	4a14      	ldr	r2, [pc, #80]	; (200005c0 <_mainCRTStartup+0x68>)
20000570:	1a12      	subs	r2, r2, r0
20000572:	f00e fb55 	bl	2000ec20 <memset>
20000576:	4b0e      	ldr	r3, [pc, #56]	; (200005b0 <_mainCRTStartup+0x58>)
20000578:	2b00      	cmp	r3, #0
2000057a:	d000      	beq.n	2000057e <_mainCRTStartup+0x26>
2000057c:	4798      	blx	r3
2000057e:	4b0d      	ldr	r3, [pc, #52]	; (200005b4 <_mainCRTStartup+0x5c>)
20000580:	2b00      	cmp	r3, #0
20000582:	d000      	beq.n	20000586 <_mainCRTStartup+0x2e>
20000584:	4798      	blx	r3
20000586:	2000      	movs	r0, #0
20000588:	2100      	movs	r1, #0
2000058a:	0004      	movs	r4, r0
2000058c:	000d      	movs	r5, r1
2000058e:	480d      	ldr	r0, [pc, #52]	; (200005c4 <_mainCRTStartup+0x6c>)
20000590:	2800      	cmp	r0, #0
20000592:	d002      	beq.n	2000059a <_mainCRTStartup+0x42>
20000594:	480c      	ldr	r0, [pc, #48]	; (200005c8 <_mainCRTStartup+0x70>)
20000596:	f3af 8000 	nop.w
2000059a:	f00e fb1d 	bl	2000ebd8 <__libc_init_array>
2000059e:	0020      	movs	r0, r4
200005a0:	0029      	movs	r1, r5
200005a2:	f000 ffb1 	bl	20001508 <main>
200005a6:	f00e fb03 	bl	2000ebb0 <exit>
200005aa:	bf00      	nop
200005ac:	00080000 	.word	0x00080000
	...
200005bc:	20000480 	.word	0x20000480
200005c0:	20000510 	.word	0x20000510
	...
200005cc:	20000408 	.word	0x20000408
200005d0:	20000408 	.word	0x20000408
200005d4:	20000480 	.word	0x20000480
200005d8:	20000480 	.word	0x20000480
200005dc:	20000510 	.word	0x20000510

200005e0 <__aeabi_uldivmod>:
200005e0:	b953      	cbnz	r3, 200005f8 <__aeabi_uldivmod+0x18>
200005e2:	b94a      	cbnz	r2, 200005f8 <__aeabi_uldivmod+0x18>
200005e4:	2900      	cmp	r1, #0
200005e6:	bf08      	it	eq
200005e8:	2800      	cmpeq	r0, #0
200005ea:	bf1c      	itt	ne
200005ec:	f04f 31ff 	movne.w	r1, #4294967295
200005f0:	f04f 30ff 	movne.w	r0, #4294967295
200005f4:	f000 b96e 	b.w	200008d4 <__aeabi_idiv0>
200005f8:	f1ad 0c08 	sub.w	ip, sp, #8
200005fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
20000600:	f000 f806 	bl	20000610 <__udivmoddi4>
20000604:	f8dd e004 	ldr.w	lr, [sp, #4]
20000608:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
2000060c:	b004      	add	sp, #16
2000060e:	4770      	bx	lr

20000610 <__udivmoddi4>:
20000610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
20000614:	9d08      	ldr	r5, [sp, #32]
20000616:	4604      	mov	r4, r0
20000618:	468c      	mov	ip, r1
2000061a:	2b00      	cmp	r3, #0
2000061c:	f040 8083 	bne.w	20000726 <__udivmoddi4+0x116>
20000620:	428a      	cmp	r2, r1
20000622:	4617      	mov	r7, r2
20000624:	d947      	bls.n	200006b6 <__udivmoddi4+0xa6>
20000626:	fab2 f282 	clz	r2, r2
2000062a:	b142      	cbz	r2, 2000063e <__udivmoddi4+0x2e>
2000062c:	f1c2 0020 	rsb	r0, r2, #32
20000630:	fa24 f000 	lsr.w	r0, r4, r0
20000634:	4091      	lsls	r1, r2
20000636:	4097      	lsls	r7, r2
20000638:	ea40 0c01 	orr.w	ip, r0, r1
2000063c:	4094      	lsls	r4, r2
2000063e:	ea4f 4817 	mov.w	r8, r7, lsr #16
20000642:	0c23      	lsrs	r3, r4, #16
20000644:	fbbc f6f8 	udiv	r6, ip, r8
20000648:	fa1f fe87 	uxth.w	lr, r7
2000064c:	fb08 c116 	mls	r1, r8, r6, ip
20000650:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
20000654:	fb06 f10e 	mul.w	r1, r6, lr
20000658:	4299      	cmp	r1, r3
2000065a:	d909      	bls.n	20000670 <__udivmoddi4+0x60>
2000065c:	18fb      	adds	r3, r7, r3
2000065e:	f106 30ff 	add.w	r0, r6, #4294967295
20000662:	f080 8119 	bcs.w	20000898 <__udivmoddi4+0x288>
20000666:	4299      	cmp	r1, r3
20000668:	f240 8116 	bls.w	20000898 <__udivmoddi4+0x288>
2000066c:	3e02      	subs	r6, #2
2000066e:	443b      	add	r3, r7
20000670:	1a5b      	subs	r3, r3, r1
20000672:	b2a4      	uxth	r4, r4
20000674:	fbb3 f0f8 	udiv	r0, r3, r8
20000678:	fb08 3310 	mls	r3, r8, r0, r3
2000067c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
20000680:	fb00 fe0e 	mul.w	lr, r0, lr
20000684:	45a6      	cmp	lr, r4
20000686:	d909      	bls.n	2000069c <__udivmoddi4+0x8c>
20000688:	193c      	adds	r4, r7, r4
2000068a:	f100 33ff 	add.w	r3, r0, #4294967295
2000068e:	f080 8105 	bcs.w	2000089c <__udivmoddi4+0x28c>
20000692:	45a6      	cmp	lr, r4
20000694:	f240 8102 	bls.w	2000089c <__udivmoddi4+0x28c>
20000698:	3802      	subs	r0, #2
2000069a:	443c      	add	r4, r7
2000069c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
200006a0:	eba4 040e 	sub.w	r4, r4, lr
200006a4:	2600      	movs	r6, #0
200006a6:	b11d      	cbz	r5, 200006b0 <__udivmoddi4+0xa0>
200006a8:	40d4      	lsrs	r4, r2
200006aa:	2300      	movs	r3, #0
200006ac:	e9c5 4300 	strd	r4, r3, [r5]
200006b0:	4631      	mov	r1, r6
200006b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200006b6:	b902      	cbnz	r2, 200006ba <__udivmoddi4+0xaa>
200006b8:	deff      	udf	#255	; 0xff
200006ba:	fab2 f282 	clz	r2, r2
200006be:	2a00      	cmp	r2, #0
200006c0:	d150      	bne.n	20000764 <__udivmoddi4+0x154>
200006c2:	1bcb      	subs	r3, r1, r7
200006c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
200006c8:	fa1f f887 	uxth.w	r8, r7
200006cc:	2601      	movs	r6, #1
200006ce:	fbb3 fcfe 	udiv	ip, r3, lr
200006d2:	0c21      	lsrs	r1, r4, #16
200006d4:	fb0e 331c 	mls	r3, lr, ip, r3
200006d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
200006dc:	fb08 f30c 	mul.w	r3, r8, ip
200006e0:	428b      	cmp	r3, r1
200006e2:	d907      	bls.n	200006f4 <__udivmoddi4+0xe4>
200006e4:	1879      	adds	r1, r7, r1
200006e6:	f10c 30ff 	add.w	r0, ip, #4294967295
200006ea:	d202      	bcs.n	200006f2 <__udivmoddi4+0xe2>
200006ec:	428b      	cmp	r3, r1
200006ee:	f200 80e9 	bhi.w	200008c4 <__udivmoddi4+0x2b4>
200006f2:	4684      	mov	ip, r0
200006f4:	1ac9      	subs	r1, r1, r3
200006f6:	b2a3      	uxth	r3, r4
200006f8:	fbb1 f0fe 	udiv	r0, r1, lr
200006fc:	fb0e 1110 	mls	r1, lr, r0, r1
20000700:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
20000704:	fb08 f800 	mul.w	r8, r8, r0
20000708:	45a0      	cmp	r8, r4
2000070a:	d907      	bls.n	2000071c <__udivmoddi4+0x10c>
2000070c:	193c      	adds	r4, r7, r4
2000070e:	f100 33ff 	add.w	r3, r0, #4294967295
20000712:	d202      	bcs.n	2000071a <__udivmoddi4+0x10a>
20000714:	45a0      	cmp	r8, r4
20000716:	f200 80d9 	bhi.w	200008cc <__udivmoddi4+0x2bc>
2000071a:	4618      	mov	r0, r3
2000071c:	eba4 0408 	sub.w	r4, r4, r8
20000720:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
20000724:	e7bf      	b.n	200006a6 <__udivmoddi4+0x96>
20000726:	428b      	cmp	r3, r1
20000728:	d909      	bls.n	2000073e <__udivmoddi4+0x12e>
2000072a:	2d00      	cmp	r5, #0
2000072c:	f000 80b1 	beq.w	20000892 <__udivmoddi4+0x282>
20000730:	2600      	movs	r6, #0
20000732:	e9c5 0100 	strd	r0, r1, [r5]
20000736:	4630      	mov	r0, r6
20000738:	4631      	mov	r1, r6
2000073a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000073e:	fab3 f683 	clz	r6, r3
20000742:	2e00      	cmp	r6, #0
20000744:	d14a      	bne.n	200007dc <__udivmoddi4+0x1cc>
20000746:	428b      	cmp	r3, r1
20000748:	d302      	bcc.n	20000750 <__udivmoddi4+0x140>
2000074a:	4282      	cmp	r2, r0
2000074c:	f200 80b8 	bhi.w	200008c0 <__udivmoddi4+0x2b0>
20000750:	1a84      	subs	r4, r0, r2
20000752:	eb61 0103 	sbc.w	r1, r1, r3
20000756:	2001      	movs	r0, #1
20000758:	468c      	mov	ip, r1
2000075a:	2d00      	cmp	r5, #0
2000075c:	d0a8      	beq.n	200006b0 <__udivmoddi4+0xa0>
2000075e:	e9c5 4c00 	strd	r4, ip, [r5]
20000762:	e7a5      	b.n	200006b0 <__udivmoddi4+0xa0>
20000764:	f1c2 0320 	rsb	r3, r2, #32
20000768:	fa20 f603 	lsr.w	r6, r0, r3
2000076c:	4097      	lsls	r7, r2
2000076e:	fa01 f002 	lsl.w	r0, r1, r2
20000772:	ea4f 4e17 	mov.w	lr, r7, lsr #16
20000776:	40d9      	lsrs	r1, r3
20000778:	4330      	orrs	r0, r6
2000077a:	0c03      	lsrs	r3, r0, #16
2000077c:	fbb1 f6fe 	udiv	r6, r1, lr
20000780:	fa1f f887 	uxth.w	r8, r7
20000784:	fb0e 1116 	mls	r1, lr, r6, r1
20000788:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
2000078c:	fb06 f108 	mul.w	r1, r6, r8
20000790:	4299      	cmp	r1, r3
20000792:	fa04 f402 	lsl.w	r4, r4, r2
20000796:	d909      	bls.n	200007ac <__udivmoddi4+0x19c>
20000798:	18fb      	adds	r3, r7, r3
2000079a:	f106 3cff 	add.w	ip, r6, #4294967295
2000079e:	f080 808d 	bcs.w	200008bc <__udivmoddi4+0x2ac>
200007a2:	4299      	cmp	r1, r3
200007a4:	f240 808a 	bls.w	200008bc <__udivmoddi4+0x2ac>
200007a8:	3e02      	subs	r6, #2
200007aa:	443b      	add	r3, r7
200007ac:	1a5b      	subs	r3, r3, r1
200007ae:	b281      	uxth	r1, r0
200007b0:	fbb3 f0fe 	udiv	r0, r3, lr
200007b4:	fb0e 3310 	mls	r3, lr, r0, r3
200007b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
200007bc:	fb00 f308 	mul.w	r3, r0, r8
200007c0:	428b      	cmp	r3, r1
200007c2:	d907      	bls.n	200007d4 <__udivmoddi4+0x1c4>
200007c4:	1879      	adds	r1, r7, r1
200007c6:	f100 3cff 	add.w	ip, r0, #4294967295
200007ca:	d273      	bcs.n	200008b4 <__udivmoddi4+0x2a4>
200007cc:	428b      	cmp	r3, r1
200007ce:	d971      	bls.n	200008b4 <__udivmoddi4+0x2a4>
200007d0:	3802      	subs	r0, #2
200007d2:	4439      	add	r1, r7
200007d4:	1acb      	subs	r3, r1, r3
200007d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
200007da:	e778      	b.n	200006ce <__udivmoddi4+0xbe>
200007dc:	f1c6 0c20 	rsb	ip, r6, #32
200007e0:	fa03 f406 	lsl.w	r4, r3, r6
200007e4:	fa22 f30c 	lsr.w	r3, r2, ip
200007e8:	431c      	orrs	r4, r3
200007ea:	fa20 f70c 	lsr.w	r7, r0, ip
200007ee:	fa01 f306 	lsl.w	r3, r1, r6
200007f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
200007f6:	fa21 f10c 	lsr.w	r1, r1, ip
200007fa:	431f      	orrs	r7, r3
200007fc:	0c3b      	lsrs	r3, r7, #16
200007fe:	fbb1 f9fe 	udiv	r9, r1, lr
20000802:	fa1f f884 	uxth.w	r8, r4
20000806:	fb0e 1119 	mls	r1, lr, r9, r1
2000080a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
2000080e:	fb09 fa08 	mul.w	sl, r9, r8
20000812:	458a      	cmp	sl, r1
20000814:	fa02 f206 	lsl.w	r2, r2, r6
20000818:	fa00 f306 	lsl.w	r3, r0, r6
2000081c:	d908      	bls.n	20000830 <__udivmoddi4+0x220>
2000081e:	1861      	adds	r1, r4, r1
20000820:	f109 30ff 	add.w	r0, r9, #4294967295
20000824:	d248      	bcs.n	200008b8 <__udivmoddi4+0x2a8>
20000826:	458a      	cmp	sl, r1
20000828:	d946      	bls.n	200008b8 <__udivmoddi4+0x2a8>
2000082a:	f1a9 0902 	sub.w	r9, r9, #2
2000082e:	4421      	add	r1, r4
20000830:	eba1 010a 	sub.w	r1, r1, sl
20000834:	b2bf      	uxth	r7, r7
20000836:	fbb1 f0fe 	udiv	r0, r1, lr
2000083a:	fb0e 1110 	mls	r1, lr, r0, r1
2000083e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
20000842:	fb00 f808 	mul.w	r8, r0, r8
20000846:	45b8      	cmp	r8, r7
20000848:	d907      	bls.n	2000085a <__udivmoddi4+0x24a>
2000084a:	19e7      	adds	r7, r4, r7
2000084c:	f100 31ff 	add.w	r1, r0, #4294967295
20000850:	d22e      	bcs.n	200008b0 <__udivmoddi4+0x2a0>
20000852:	45b8      	cmp	r8, r7
20000854:	d92c      	bls.n	200008b0 <__udivmoddi4+0x2a0>
20000856:	3802      	subs	r0, #2
20000858:	4427      	add	r7, r4
2000085a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
2000085e:	eba7 0708 	sub.w	r7, r7, r8
20000862:	fba0 8902 	umull	r8, r9, r0, r2
20000866:	454f      	cmp	r7, r9
20000868:	46c6      	mov	lr, r8
2000086a:	4649      	mov	r1, r9
2000086c:	d31a      	bcc.n	200008a4 <__udivmoddi4+0x294>
2000086e:	d017      	beq.n	200008a0 <__udivmoddi4+0x290>
20000870:	b15d      	cbz	r5, 2000088a <__udivmoddi4+0x27a>
20000872:	ebb3 020e 	subs.w	r2, r3, lr
20000876:	eb67 0701 	sbc.w	r7, r7, r1
2000087a:	fa07 fc0c 	lsl.w	ip, r7, ip
2000087e:	40f2      	lsrs	r2, r6
20000880:	ea4c 0202 	orr.w	r2, ip, r2
20000884:	40f7      	lsrs	r7, r6
20000886:	e9c5 2700 	strd	r2, r7, [r5]
2000088a:	2600      	movs	r6, #0
2000088c:	4631      	mov	r1, r6
2000088e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20000892:	462e      	mov	r6, r5
20000894:	4628      	mov	r0, r5
20000896:	e70b      	b.n	200006b0 <__udivmoddi4+0xa0>
20000898:	4606      	mov	r6, r0
2000089a:	e6e9      	b.n	20000670 <__udivmoddi4+0x60>
2000089c:	4618      	mov	r0, r3
2000089e:	e6fd      	b.n	2000069c <__udivmoddi4+0x8c>
200008a0:	4543      	cmp	r3, r8
200008a2:	d2e5      	bcs.n	20000870 <__udivmoddi4+0x260>
200008a4:	ebb8 0e02 	subs.w	lr, r8, r2
200008a8:	eb69 0104 	sbc.w	r1, r9, r4
200008ac:	3801      	subs	r0, #1
200008ae:	e7df      	b.n	20000870 <__udivmoddi4+0x260>
200008b0:	4608      	mov	r0, r1
200008b2:	e7d2      	b.n	2000085a <__udivmoddi4+0x24a>
200008b4:	4660      	mov	r0, ip
200008b6:	e78d      	b.n	200007d4 <__udivmoddi4+0x1c4>
200008b8:	4681      	mov	r9, r0
200008ba:	e7b9      	b.n	20000830 <__udivmoddi4+0x220>
200008bc:	4666      	mov	r6, ip
200008be:	e775      	b.n	200007ac <__udivmoddi4+0x19c>
200008c0:	4630      	mov	r0, r6
200008c2:	e74a      	b.n	2000075a <__udivmoddi4+0x14a>
200008c4:	f1ac 0c02 	sub.w	ip, ip, #2
200008c8:	4439      	add	r1, r7
200008ca:	e713      	b.n	200006f4 <__udivmoddi4+0xe4>
200008cc:	3802      	subs	r0, #2
200008ce:	443c      	add	r4, r7
200008d0:	e724      	b.n	2000071c <__udivmoddi4+0x10c>
200008d2:	bf00      	nop

200008d4 <__aeabi_idiv0>:
200008d4:	4770      	bx	lr
200008d6:	bf00      	nop

200008d8 <Init>:
 * @param  None
 * @retval  LOADER_OK = 1   : Operation succeeded
 * @retval  LOADER_FAIL = 0 : Operation failed
 */
int
Init(void) {
200008d8:	b580      	push	{r7, lr}
200008da:	b084      	sub	sp, #16
200008dc:	af00      	add	r7, sp, #0

    *(uint32_t*)0xE000EDF0 = 0xA05F0000; //enable interrupts in debug
200008de:	4b23      	ldr	r3, [pc, #140]	; (2000096c <Init+0x94>)
200008e0:	4a23      	ldr	r2, [pc, #140]	; (20000970 <Init+0x98>)
200008e2:	601a      	str	r2, [r3, #0]


    SystemInit();
200008e4:	f001 f8f2 	bl	20001acc <SystemInit>
     * change VTOR setting for other devices
     * SCB->VTOR = 0x20000000 | 0x200;
     *
     * */

    SCB->VTOR = 0x20000000 | 0x200;
200008e8:	4b22      	ldr	r3, [pc, #136]	; (20000974 <Init+0x9c>)
200008ea:	4a23      	ldr	r2, [pc, #140]	; (20000978 <Init+0xa0>)
200008ec:	609a      	str	r2, [r3, #8]
200008ee:	2300      	movs	r3, #0
200008f0:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200008f2:	68fb      	ldr	r3, [r7, #12]
200008f4:	f383 8810 	msr	PRIMASK, r3
}
200008f8:	bf00      	nop

    __set_PRIMASK(0); //enable interrupts

    HAL_Init();
200008fa:	f001 f9a2 	bl	20001c42 <HAL_Init>

    SystemClock_Config();
200008fe:	f000 fe0f 	bl	20001520 <SystemClock_Config>

    MX_GPIO_Init();
20000902:	f000 fddd 	bl	200014c0 <MX_GPIO_Init>
    MX_QUADSPI_Init();
20000906:	f000 fe81 	bl	2000160c <MX_QUADSPI_Init>

    __HAL_RCC_QSPI_FORCE_RESET();  //completely reset peripheral
2000090a:	4b1c      	ldr	r3, [pc, #112]	; (2000097c <Init+0xa4>)
2000090c:	699b      	ldr	r3, [r3, #24]
2000090e:	4a1b      	ldr	r2, [pc, #108]	; (2000097c <Init+0xa4>)
20000910:	f043 0302 	orr.w	r3, r3, #2
20000914:	6193      	str	r3, [r2, #24]
    __HAL_RCC_QSPI_RELEASE_RESET();
20000916:	4b19      	ldr	r3, [pc, #100]	; (2000097c <Init+0xa4>)
20000918:	699b      	ldr	r3, [r3, #24]
2000091a:	4a18      	ldr	r2, [pc, #96]	; (2000097c <Init+0xa4>)
2000091c:	f023 0302 	bic.w	r3, r3, #2
20000920:	6193      	str	r3, [r2, #24]

    if (FLASH_QSPI_Init() != HAL_OK) {
20000922:	f000 fa65 	bl	20000df0 <FLASH_QSPI_Init>
20000926:	4603      	mov	r3, r0
20000928:	2b00      	cmp	r3, #0
2000092a:	d007      	beq.n	2000093c <Init+0x64>
2000092c:	2301      	movs	r3, #1
2000092e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000930:	68bb      	ldr	r3, [r7, #8]
20000932:	f383 8810 	msr	PRIMASK, r3
}
20000936:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
20000938:	2300      	movs	r3, #0
2000093a:	e013      	b.n	20000964 <Init+0x8c>
    }


    if (FLASH_QSPI_EnableMemoryMappedMode() != HAL_OK) {
2000093c:	f000 fd86 	bl	2000144c <FLASH_QSPI_EnableMemoryMappedMode>
20000940:	4603      	mov	r3, r0
20000942:	2b00      	cmp	r3, #0
20000944:	d007      	beq.n	20000956 <Init+0x7e>
20000946:	2301      	movs	r3, #1
20000948:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
2000094a:	687b      	ldr	r3, [r7, #4]
2000094c:	f383 8810 	msr	PRIMASK, r3
}
20000950:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
20000952:	2300      	movs	r3, #0
20000954:	e006      	b.n	20000964 <Init+0x8c>
20000956:	2301      	movs	r3, #1
20000958:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
2000095a:	683b      	ldr	r3, [r7, #0]
2000095c:	f383 8810 	msr	PRIMASK, r3
}
20000960:	bf00      	nop
    }


    __set_PRIMASK(1); //disable interrupts
    return LOADER_OK;
20000962:	2301      	movs	r3, #1
}
20000964:	4618      	mov	r0, r3
20000966:	3710      	adds	r7, #16
20000968:	46bd      	mov	sp, r7
2000096a:	bd80      	pop	{r7, pc}
2000096c:	e000edf0 	.word	0xe000edf0
20000970:	a05f0000 	.word	0xa05f0000
20000974:	e000ed00 	.word	0xe000ed00
20000978:	20000200 	.word	0x20000200
2000097c:	40023800 	.word	0x40023800

20000980 <Write>:
 * @param   Size   : size of data
 * @param   buffer : pointer to data buffer
 * @retval  LOADER_OK = 1       : Operation succeeded
 * @retval  LOADER_FAIL = 0 : Operation failed
 */
int Write(uint32_t Address, uint32_t Size, uint8_t* buffer) {
20000980:	b580      	push	{r7, lr}
20000982:	b088      	sub	sp, #32
20000984:	af00      	add	r7, sp, #0
20000986:	60f8      	str	r0, [r7, #12]
20000988:	60b9      	str	r1, [r7, #8]
2000098a:	607a      	str	r2, [r7, #4]
2000098c:	2300      	movs	r3, #0
2000098e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000990:	69fb      	ldr	r3, [r7, #28]
20000992:	f383 8810 	msr	PRIMASK, r3
}
20000996:	bf00      	nop

    __set_PRIMASK(0); //enable interrupts

    if (HAL_QSPI_Abort(&hqspi) != HAL_OK) {
20000998:	4815      	ldr	r0, [pc, #84]	; (200009f0 <Write+0x70>)
2000099a:	f00b fe89 	bl	2000c6b0 <HAL_QSPI_Abort>
2000099e:	4603      	mov	r3, r0
200009a0:	2b00      	cmp	r3, #0
200009a2:	d007      	beq.n	200009b4 <Write+0x34>
200009a4:	2301      	movs	r3, #1
200009a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200009a8:	69bb      	ldr	r3, [r7, #24]
200009aa:	f383 8810 	msr	PRIMASK, r3
}
200009ae:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
200009b0:	2300      	movs	r3, #0
200009b2:	e019      	b.n	200009e8 <Write+0x68>
    }


    if (FLASH_QSPI_Write((uint8_t*) buffer, (Address & (0x0fffffff)), Size) != HAL_OK) {
200009b4:	68fb      	ldr	r3, [r7, #12]
200009b6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
200009ba:	68ba      	ldr	r2, [r7, #8]
200009bc:	4619      	mov	r1, r3
200009be:	6878      	ldr	r0, [r7, #4]
200009c0:	f000 fc70 	bl	200012a4 <FLASH_QSPI_Write>
200009c4:	4603      	mov	r3, r0
200009c6:	2b00      	cmp	r3, #0
200009c8:	d007      	beq.n	200009da <Write+0x5a>
200009ca:	2301      	movs	r3, #1
200009cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200009ce:	697b      	ldr	r3, [r7, #20]
200009d0:	f383 8810 	msr	PRIMASK, r3
}
200009d4:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
200009d6:	2300      	movs	r3, #0
200009d8:	e006      	b.n	200009e8 <Write+0x68>
200009da:	2301      	movs	r3, #1
200009dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200009de:	693b      	ldr	r3, [r7, #16]
200009e0:	f383 8810 	msr	PRIMASK, r3
}
200009e4:	bf00      	nop
    }

    __set_PRIMASK(1); //disable interrupts
    return LOADER_OK;
200009e6:	2301      	movs	r3, #1
}
200009e8:	4618      	mov	r0, r3
200009ea:	3720      	adds	r7, #32
200009ec:	46bd      	mov	sp, r7
200009ee:	bd80      	pop	{r7, pc}
200009f0:	200004a4 	.word	0x200004a4

200009f4 <SectorErase>:
 * @param   EraseEndAddress   :  erase end address
 * @retval  LOADER_OK = 1       : Operation succeeded
 * @retval  LOADER_FAIL = 0 : Operation failed
 */
int
SectorErase(uint32_t EraseStartAddress, uint32_t EraseEndAddress) {
200009f4:	b580      	push	{r7, lr}
200009f6:	b086      	sub	sp, #24
200009f8:	af00      	add	r7, sp, #0
200009fa:	6078      	str	r0, [r7, #4]
200009fc:	6039      	str	r1, [r7, #0]
200009fe:	2300      	movs	r3, #0
20000a00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000a02:	697b      	ldr	r3, [r7, #20]
20000a04:	f383 8810 	msr	PRIMASK, r3
}
20000a08:	bf00      	nop

    __set_PRIMASK(0); //enable interrupts

    if (HAL_QSPI_Abort(&hqspi) != HAL_OK) {
20000a0a:	4814      	ldr	r0, [pc, #80]	; (20000a5c <SectorErase+0x68>)
20000a0c:	f00b fe50 	bl	2000c6b0 <HAL_QSPI_Abort>
20000a10:	4603      	mov	r3, r0
20000a12:	2b00      	cmp	r3, #0
20000a14:	d007      	beq.n	20000a26 <SectorErase+0x32>
20000a16:	2301      	movs	r3, #1
20000a18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000a1a:	693b      	ldr	r3, [r7, #16]
20000a1c:	f383 8810 	msr	PRIMASK, r3
}
20000a20:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
20000a22:	2300      	movs	r3, #0
20000a24:	e015      	b.n	20000a52 <SectorErase+0x5e>
    }


    if (FLASH_QSPI_EraseSector(EraseStartAddress, EraseEndAddress) != HAL_OK) {
20000a26:	6839      	ldr	r1, [r7, #0]
20000a28:	6878      	ldr	r0, [r7, #4]
20000a2a:	f000 fa53 	bl	20000ed4 <FLASH_QSPI_EraseSector>
20000a2e:	4603      	mov	r3, r0
20000a30:	2b00      	cmp	r3, #0
20000a32:	d007      	beq.n	20000a44 <SectorErase+0x50>
20000a34:	2301      	movs	r3, #1
20000a36:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000a38:	68fb      	ldr	r3, [r7, #12]
20000a3a:	f383 8810 	msr	PRIMASK, r3
}
20000a3e:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
20000a40:	2300      	movs	r3, #0
20000a42:	e006      	b.n	20000a52 <SectorErase+0x5e>
20000a44:	2301      	movs	r3, #1
20000a46:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000a48:	68bb      	ldr	r3, [r7, #8]
20000a4a:	f383 8810 	msr	PRIMASK, r3
}
20000a4e:	bf00      	nop
    }

    __set_PRIMASK(1); //disable interrupts
    return LOADER_OK;
20000a50:	2301      	movs	r3, #1
}
20000a52:	4618      	mov	r0, r3
20000a54:	3718      	adds	r7, #24
20000a56:	46bd      	mov	sp, r7
20000a58:	bd80      	pop	{r7, pc}
20000a5a:	bf00      	nop
20000a5c:	200004a4 	.word	0x200004a4

20000a60 <MassErase>:
 *      none
 * outputs   :
 *     none
 * Note: Optional for all types of device
 */
int MassErase(void) {
20000a60:	b580      	push	{r7, lr}
20000a62:	b084      	sub	sp, #16
20000a64:	af00      	add	r7, sp, #0
20000a66:	2300      	movs	r3, #0
20000a68:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000a6a:	68fb      	ldr	r3, [r7, #12]
20000a6c:	f383 8810 	msr	PRIMASK, r3
}
20000a70:	bf00      	nop

    __set_PRIMASK(0); //enable interrupts

    if (HAL_QSPI_Abort(&hqspi) != HAL_OK) {
20000a72:	4813      	ldr	r0, [pc, #76]	; (20000ac0 <MassErase+0x60>)
20000a74:	f00b fe1c 	bl	2000c6b0 <HAL_QSPI_Abort>
20000a78:	4603      	mov	r3, r0
20000a7a:	2b00      	cmp	r3, #0
20000a7c:	d007      	beq.n	20000a8e <MassErase+0x2e>
20000a7e:	2301      	movs	r3, #1
20000a80:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000a82:	68bb      	ldr	r3, [r7, #8]
20000a84:	f383 8810 	msr	PRIMASK, r3
}
20000a88:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
20000a8a:	2300      	movs	r3, #0
20000a8c:	e013      	b.n	20000ab6 <MassErase+0x56>
    }


    if (FLASH_QSPI_EraseChip() != HAL_OK) {
20000a8e:	f000 f9e5 	bl	20000e5c <FLASH_QSPI_EraseChip>
20000a92:	4603      	mov	r3, r0
20000a94:	2b00      	cmp	r3, #0
20000a96:	d007      	beq.n	20000aa8 <MassErase+0x48>
20000a98:	2301      	movs	r3, #1
20000a9a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000a9c:	687b      	ldr	r3, [r7, #4]
20000a9e:	f383 8810 	msr	PRIMASK, r3
}
20000aa2:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
20000aa4:	2300      	movs	r3, #0
20000aa6:	e006      	b.n	20000ab6 <MassErase+0x56>
20000aa8:	2301      	movs	r3, #1
20000aaa:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000aac:	683b      	ldr	r3, [r7, #0]
20000aae:	f383 8810 	msr	PRIMASK, r3
}
20000ab2:	bf00      	nop
    }

    __set_PRIMASK(1); //disable interrupts
    return LOADER_OK;
20000ab4:	2301      	movs	r3, #1
}
20000ab6:	4618      	mov	r0, r3
20000ab8:	3710      	adds	r7, #16
20000aba:	46bd      	mov	sp, r7
20000abc:	bd80      	pop	{r7, pc}
20000abe:	bf00      	nop
20000ac0:	200004a4 	.word	0x200004a4

20000ac4 <CheckSum>:
 * outputs   :
 *     R0             : Checksum value
 * Note: Optional for all types of device
 */
uint32_t
CheckSum(uint32_t StartAddress, uint32_t Size, uint32_t InitVal) {
20000ac4:	b480      	push	{r7}
20000ac6:	b089      	sub	sp, #36	; 0x24
20000ac8:	af00      	add	r7, sp, #0
20000aca:	60f8      	str	r0, [r7, #12]
20000acc:	60b9      	str	r1, [r7, #8]
20000ace:	607a      	str	r2, [r7, #4]
    uint8_t missalignementAddress = StartAddress % 4;
20000ad0:	68fb      	ldr	r3, [r7, #12]
20000ad2:	b2db      	uxtb	r3, r3
20000ad4:	f003 0303 	and.w	r3, r3, #3
20000ad8:	77fb      	strb	r3, [r7, #31]
    uint8_t missalignementSize = Size;
20000ada:	68bb      	ldr	r3, [r7, #8]
20000adc:	77bb      	strb	r3, [r7, #30]
    int cnt;
    uint32_t Val;

    StartAddress -= StartAddress % 4;
20000ade:	68fb      	ldr	r3, [r7, #12]
20000ae0:	f023 0303 	bic.w	r3, r3, #3
20000ae4:	60fb      	str	r3, [r7, #12]
    Size += (Size % 4 == 0) ? 0 : 4 - (Size % 4);
20000ae6:	68bb      	ldr	r3, [r7, #8]
20000ae8:	f003 0303 	and.w	r3, r3, #3
20000aec:	2b00      	cmp	r3, #0
20000aee:	d005      	beq.n	20000afc <CheckSum+0x38>
20000af0:	68bb      	ldr	r3, [r7, #8]
20000af2:	f003 0303 	and.w	r3, r3, #3
20000af6:	f1c3 0304 	rsb	r3, r3, #4
20000afa:	e000      	b.n	20000afe <CheckSum+0x3a>
20000afc:	2300      	movs	r3, #0
20000afe:	68ba      	ldr	r2, [r7, #8]
20000b00:	4413      	add	r3, r2
20000b02:	60bb      	str	r3, [r7, #8]

    for (cnt = 0; cnt < Size; cnt += 4) {
20000b04:	2300      	movs	r3, #0
20000b06:	61bb      	str	r3, [r7, #24]
20000b08:	e0b3      	b.n	20000c72 <CheckSum+0x1ae>
        Val = *(uint32_t*) StartAddress;
20000b0a:	68fb      	ldr	r3, [r7, #12]
20000b0c:	681b      	ldr	r3, [r3, #0]
20000b0e:	617b      	str	r3, [r7, #20]
        if (missalignementAddress) {
20000b10:	7ffb      	ldrb	r3, [r7, #31]
20000b12:	2b00      	cmp	r3, #0
20000b14:	d040      	beq.n	20000b98 <CheckSum+0xd4>
            switch (missalignementAddress) {
20000b16:	7ffb      	ldrb	r3, [r7, #31]
20000b18:	2b03      	cmp	r3, #3
20000b1a:	d032      	beq.n	20000b82 <CheckSum+0xbe>
20000b1c:	2b03      	cmp	r3, #3
20000b1e:	f300 80a2 	bgt.w	20000c66 <CheckSum+0x1a2>
20000b22:	2b01      	cmp	r3, #1
20000b24:	d002      	beq.n	20000b2c <CheckSum+0x68>
20000b26:	2b02      	cmp	r3, #2
20000b28:	d019      	beq.n	20000b5e <CheckSum+0x9a>
20000b2a:	e09c      	b.n	20000c66 <CheckSum+0x1a2>
                case 1:
                    InitVal += (uint8_t) (Val >> 8 & 0xff);
20000b2c:	697b      	ldr	r3, [r7, #20]
20000b2e:	0a1b      	lsrs	r3, r3, #8
20000b30:	b2db      	uxtb	r3, r3
20000b32:	461a      	mov	r2, r3
20000b34:	687b      	ldr	r3, [r7, #4]
20000b36:	4413      	add	r3, r2
20000b38:	607b      	str	r3, [r7, #4]
                    InitVal += (uint8_t) (Val >> 16 & 0xff);
20000b3a:	697b      	ldr	r3, [r7, #20]
20000b3c:	0c1b      	lsrs	r3, r3, #16
20000b3e:	b2db      	uxtb	r3, r3
20000b40:	461a      	mov	r2, r3
20000b42:	687b      	ldr	r3, [r7, #4]
20000b44:	4413      	add	r3, r2
20000b46:	607b      	str	r3, [r7, #4]
                    InitVal += (uint8_t) (Val >> 24 & 0xff);
20000b48:	697b      	ldr	r3, [r7, #20]
20000b4a:	0e1b      	lsrs	r3, r3, #24
20000b4c:	b2db      	uxtb	r3, r3
20000b4e:	461a      	mov	r2, r3
20000b50:	687b      	ldr	r3, [r7, #4]
20000b52:	4413      	add	r3, r2
20000b54:	607b      	str	r3, [r7, #4]
                    missalignementAddress -= 1;
20000b56:	7ffb      	ldrb	r3, [r7, #31]
20000b58:	3b01      	subs	r3, #1
20000b5a:	77fb      	strb	r3, [r7, #31]
                    break;
20000b5c:	e083      	b.n	20000c66 <CheckSum+0x1a2>
                case 2:
                    InitVal += (uint8_t) (Val >> 16 & 0xff);
20000b5e:	697b      	ldr	r3, [r7, #20]
20000b60:	0c1b      	lsrs	r3, r3, #16
20000b62:	b2db      	uxtb	r3, r3
20000b64:	461a      	mov	r2, r3
20000b66:	687b      	ldr	r3, [r7, #4]
20000b68:	4413      	add	r3, r2
20000b6a:	607b      	str	r3, [r7, #4]
                    InitVal += (uint8_t) (Val >> 24 & 0xff);
20000b6c:	697b      	ldr	r3, [r7, #20]
20000b6e:	0e1b      	lsrs	r3, r3, #24
20000b70:	b2db      	uxtb	r3, r3
20000b72:	461a      	mov	r2, r3
20000b74:	687b      	ldr	r3, [r7, #4]
20000b76:	4413      	add	r3, r2
20000b78:	607b      	str	r3, [r7, #4]
                    missalignementAddress -= 2;
20000b7a:	7ffb      	ldrb	r3, [r7, #31]
20000b7c:	3b02      	subs	r3, #2
20000b7e:	77fb      	strb	r3, [r7, #31]
                    break;
20000b80:	e071      	b.n	20000c66 <CheckSum+0x1a2>
                case 3:
                    InitVal += (uint8_t) (Val >> 24 & 0xff);
20000b82:	697b      	ldr	r3, [r7, #20]
20000b84:	0e1b      	lsrs	r3, r3, #24
20000b86:	b2db      	uxtb	r3, r3
20000b88:	461a      	mov	r2, r3
20000b8a:	687b      	ldr	r3, [r7, #4]
20000b8c:	4413      	add	r3, r2
20000b8e:	607b      	str	r3, [r7, #4]
                    missalignementAddress -= 3;
20000b90:	7ffb      	ldrb	r3, [r7, #31]
20000b92:	3b03      	subs	r3, #3
20000b94:	77fb      	strb	r3, [r7, #31]
                    break;
20000b96:	e066      	b.n	20000c66 <CheckSum+0x1a2>
            }
        } else if ((Size - missalignementSize) % 4 && (Size - cnt) <= 4) {
20000b98:	7fbb      	ldrb	r3, [r7, #30]
20000b9a:	68ba      	ldr	r2, [r7, #8]
20000b9c:	1ad3      	subs	r3, r2, r3
20000b9e:	f003 0303 	and.w	r3, r3, #3
20000ba2:	2b00      	cmp	r3, #0
20000ba4:	d044      	beq.n	20000c30 <CheckSum+0x16c>
20000ba6:	69bb      	ldr	r3, [r7, #24]
20000ba8:	68ba      	ldr	r2, [r7, #8]
20000baa:	1ad3      	subs	r3, r2, r3
20000bac:	2b04      	cmp	r3, #4
20000bae:	d83f      	bhi.n	20000c30 <CheckSum+0x16c>
            switch (Size - missalignementSize) {
20000bb0:	7fbb      	ldrb	r3, [r7, #30]
20000bb2:	68ba      	ldr	r2, [r7, #8]
20000bb4:	1ad3      	subs	r3, r2, r3
20000bb6:	2b03      	cmp	r3, #3
20000bb8:	d02f      	beq.n	20000c1a <CheckSum+0x156>
20000bba:	2b03      	cmp	r3, #3
20000bbc:	d853      	bhi.n	20000c66 <CheckSum+0x1a2>
20000bbe:	2b01      	cmp	r3, #1
20000bc0:	d002      	beq.n	20000bc8 <CheckSum+0x104>
20000bc2:	2b02      	cmp	r3, #2
20000bc4:	d018      	beq.n	20000bf8 <CheckSum+0x134>
20000bc6:	e04e      	b.n	20000c66 <CheckSum+0x1a2>
                case 1:
                    InitVal += (uint8_t) Val;
20000bc8:	697b      	ldr	r3, [r7, #20]
20000bca:	b2db      	uxtb	r3, r3
20000bcc:	461a      	mov	r2, r3
20000bce:	687b      	ldr	r3, [r7, #4]
20000bd0:	4413      	add	r3, r2
20000bd2:	607b      	str	r3, [r7, #4]
                    InitVal += (uint8_t) (Val >> 8 & 0xff);
20000bd4:	697b      	ldr	r3, [r7, #20]
20000bd6:	0a1b      	lsrs	r3, r3, #8
20000bd8:	b2db      	uxtb	r3, r3
20000bda:	461a      	mov	r2, r3
20000bdc:	687b      	ldr	r3, [r7, #4]
20000bde:	4413      	add	r3, r2
20000be0:	607b      	str	r3, [r7, #4]
                    InitVal += (uint8_t) (Val >> 16 & 0xff);
20000be2:	697b      	ldr	r3, [r7, #20]
20000be4:	0c1b      	lsrs	r3, r3, #16
20000be6:	b2db      	uxtb	r3, r3
20000be8:	461a      	mov	r2, r3
20000bea:	687b      	ldr	r3, [r7, #4]
20000bec:	4413      	add	r3, r2
20000bee:	607b      	str	r3, [r7, #4]
                    missalignementSize -= 1;
20000bf0:	7fbb      	ldrb	r3, [r7, #30]
20000bf2:	3b01      	subs	r3, #1
20000bf4:	77bb      	strb	r3, [r7, #30]
                    break;
20000bf6:	e01a      	b.n	20000c2e <CheckSum+0x16a>
                case 2:
                    InitVal += (uint8_t) Val;
20000bf8:	697b      	ldr	r3, [r7, #20]
20000bfa:	b2db      	uxtb	r3, r3
20000bfc:	461a      	mov	r2, r3
20000bfe:	687b      	ldr	r3, [r7, #4]
20000c00:	4413      	add	r3, r2
20000c02:	607b      	str	r3, [r7, #4]
                    InitVal += (uint8_t) (Val >> 8 & 0xff);
20000c04:	697b      	ldr	r3, [r7, #20]
20000c06:	0a1b      	lsrs	r3, r3, #8
20000c08:	b2db      	uxtb	r3, r3
20000c0a:	461a      	mov	r2, r3
20000c0c:	687b      	ldr	r3, [r7, #4]
20000c0e:	4413      	add	r3, r2
20000c10:	607b      	str	r3, [r7, #4]
                    missalignementSize -= 2;
20000c12:	7fbb      	ldrb	r3, [r7, #30]
20000c14:	3b02      	subs	r3, #2
20000c16:	77bb      	strb	r3, [r7, #30]
                    break;
20000c18:	e009      	b.n	20000c2e <CheckSum+0x16a>
                case 3:
                    InitVal += (uint8_t) Val;
20000c1a:	697b      	ldr	r3, [r7, #20]
20000c1c:	b2db      	uxtb	r3, r3
20000c1e:	461a      	mov	r2, r3
20000c20:	687b      	ldr	r3, [r7, #4]
20000c22:	4413      	add	r3, r2
20000c24:	607b      	str	r3, [r7, #4]
                    missalignementSize -= 3;
20000c26:	7fbb      	ldrb	r3, [r7, #30]
20000c28:	3b03      	subs	r3, #3
20000c2a:	77bb      	strb	r3, [r7, #30]
                    break;
20000c2c:	bf00      	nop
            switch (Size - missalignementSize) {
20000c2e:	e01a      	b.n	20000c66 <CheckSum+0x1a2>
            }
        } else {
            InitVal += (uint8_t) Val;
20000c30:	697b      	ldr	r3, [r7, #20]
20000c32:	b2db      	uxtb	r3, r3
20000c34:	461a      	mov	r2, r3
20000c36:	687b      	ldr	r3, [r7, #4]
20000c38:	4413      	add	r3, r2
20000c3a:	607b      	str	r3, [r7, #4]
            InitVal += (uint8_t) (Val >> 8 & 0xff);
20000c3c:	697b      	ldr	r3, [r7, #20]
20000c3e:	0a1b      	lsrs	r3, r3, #8
20000c40:	b2db      	uxtb	r3, r3
20000c42:	461a      	mov	r2, r3
20000c44:	687b      	ldr	r3, [r7, #4]
20000c46:	4413      	add	r3, r2
20000c48:	607b      	str	r3, [r7, #4]
            InitVal += (uint8_t) (Val >> 16 & 0xff);
20000c4a:	697b      	ldr	r3, [r7, #20]
20000c4c:	0c1b      	lsrs	r3, r3, #16
20000c4e:	b2db      	uxtb	r3, r3
20000c50:	461a      	mov	r2, r3
20000c52:	687b      	ldr	r3, [r7, #4]
20000c54:	4413      	add	r3, r2
20000c56:	607b      	str	r3, [r7, #4]
            InitVal += (uint8_t) (Val >> 24 & 0xff);
20000c58:	697b      	ldr	r3, [r7, #20]
20000c5a:	0e1b      	lsrs	r3, r3, #24
20000c5c:	b2db      	uxtb	r3, r3
20000c5e:	461a      	mov	r2, r3
20000c60:	687b      	ldr	r3, [r7, #4]
20000c62:	4413      	add	r3, r2
20000c64:	607b      	str	r3, [r7, #4]
        }
        StartAddress += 4;
20000c66:	68fb      	ldr	r3, [r7, #12]
20000c68:	3304      	adds	r3, #4
20000c6a:	60fb      	str	r3, [r7, #12]
    for (cnt = 0; cnt < Size; cnt += 4) {
20000c6c:	69bb      	ldr	r3, [r7, #24]
20000c6e:	3304      	adds	r3, #4
20000c70:	61bb      	str	r3, [r7, #24]
20000c72:	69bb      	ldr	r3, [r7, #24]
20000c74:	68ba      	ldr	r2, [r7, #8]
20000c76:	429a      	cmp	r2, r3
20000c78:	f63f af47 	bhi.w	20000b0a <CheckSum+0x46>
    }

    return (InitVal);
20000c7c:	687b      	ldr	r3, [r7, #4]
}
20000c7e:	4618      	mov	r0, r3
20000c80:	3724      	adds	r7, #36	; 0x24
20000c82:	46bd      	mov	sp, r7
20000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
20000c88:	4770      	bx	lr

20000c8a <Verify>:
 *     R0             : Operation failed (address of failure)
 *     R1             : Checksum value
 * Note: Optional for all types of device
 */
uint64_t
Verify(uint32_t MemoryAddr, uint32_t RAMBufferAddr, uint32_t Size, uint32_t missalignement) {
20000c8a:	b5b0      	push	{r4, r5, r7, lr}
20000c8c:	b08c      	sub	sp, #48	; 0x30
20000c8e:	af00      	add	r7, sp, #0
20000c90:	60f8      	str	r0, [r7, #12]
20000c92:	60b9      	str	r1, [r7, #8]
20000c94:	607a      	str	r2, [r7, #4]
20000c96:	603b      	str	r3, [r7, #0]
20000c98:	2300      	movs	r3, #0
20000c9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000c9c:	69fb      	ldr	r3, [r7, #28]
20000c9e:	f383 8810 	msr	PRIMASK, r3
}
20000ca2:	bf00      	nop

    __set_PRIMASK(0); //enable interrupts
    uint32_t VerifiedData = 0, InitVal = 0;
20000ca4:	2300      	movs	r3, #0
20000ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
20000ca8:	2300      	movs	r3, #0
20000caa:	62bb      	str	r3, [r7, #40]	; 0x28
    uint64_t checksum;
    Size *= 4;
20000cac:	687b      	ldr	r3, [r7, #4]
20000cae:	009b      	lsls	r3, r3, #2
20000cb0:	607b      	str	r3, [r7, #4]

    if (FLASH_QSPI_EnableMemoryMappedMode() != HAL_OK) {
20000cb2:	f000 fbcb 	bl	2000144c <FLASH_QSPI_EnableMemoryMappedMode>
20000cb6:	4603      	mov	r3, r0
20000cb8:	2b00      	cmp	r3, #0
20000cba:	d00a      	beq.n	20000cd2 <Verify+0x48>
20000cbc:	2301      	movs	r3, #1
20000cbe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000cc0:	69bb      	ldr	r3, [r7, #24]
20000cc2:	f383 8810 	msr	PRIMASK, r3
}
20000cc6:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
20000cc8:	f04f 0400 	mov.w	r4, #0
20000ccc:	f04f 0500 	mov.w	r5, #0
20000cd0:	e04c      	b.n	20000d6c <Verify+0xe2>
    }

    checksum = CheckSum((uint32_t) MemoryAddr + (missalignement & 0xf),
20000cd2:	683b      	ldr	r3, [r7, #0]
20000cd4:	f003 020f 	and.w	r2, r3, #15
20000cd8:	68fb      	ldr	r3, [r7, #12]
20000cda:	18d0      	adds	r0, r2, r3
                        Size - ((missalignement >> 16) & 0xF), InitVal);
20000cdc:	683b      	ldr	r3, [r7, #0]
20000cde:	0c1b      	lsrs	r3, r3, #16
20000ce0:	f003 030f 	and.w	r3, r3, #15
    checksum = CheckSum((uint32_t) MemoryAddr + (missalignement & 0xf),
20000ce4:	687a      	ldr	r2, [r7, #4]
20000ce6:	1ad3      	subs	r3, r2, r3
20000ce8:	6aba      	ldr	r2, [r7, #40]	; 0x28
20000cea:	4619      	mov	r1, r3
20000cec:	f7ff feea 	bl	20000ac4 <CheckSum>
20000cf0:	4603      	mov	r3, r0
20000cf2:	461a      	mov	r2, r3
20000cf4:	f04f 0300 	mov.w	r3, #0
20000cf8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    while (Size > VerifiedData) {
20000cfc:	e024      	b.n	20000d48 <Verify+0xbe>
        if (*(uint8_t*) MemoryAddr++
20000cfe:	68fb      	ldr	r3, [r7, #12]
20000d00:	1c5a      	adds	r2, r3, #1
20000d02:	60fa      	str	r2, [r7, #12]
20000d04:	781a      	ldrb	r2, [r3, #0]
            != *((uint8_t*) RAMBufferAddr + VerifiedData)) {
20000d06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
20000d08:	68bb      	ldr	r3, [r7, #8]
20000d0a:	440b      	add	r3, r1
20000d0c:	781b      	ldrb	r3, [r3, #0]
        if (*(uint8_t*) MemoryAddr++
20000d0e:	429a      	cmp	r2, r3
20000d10:	d017      	beq.n	20000d42 <Verify+0xb8>
20000d12:	2301      	movs	r3, #1
20000d14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000d16:	697b      	ldr	r3, [r7, #20]
20000d18:	f383 8810 	msr	PRIMASK, r3
}
20000d1c:	bf00      	nop
            __set_PRIMASK(1); //disable interrupts
            return ((checksum << 32) + (MemoryAddr + VerifiedData));
20000d1e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
20000d22:	f04f 0200 	mov.w	r2, #0
20000d26:	f04f 0300 	mov.w	r3, #0
20000d2a:	0003      	movs	r3, r0
20000d2c:	2200      	movs	r2, #0
20000d2e:	68f8      	ldr	r0, [r7, #12]
20000d30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
20000d32:	4401      	add	r1, r0
20000d34:	4608      	mov	r0, r1
20000d36:	f04f 0100 	mov.w	r1, #0
20000d3a:	1814      	adds	r4, r2, r0
20000d3c:	eb43 0501 	adc.w	r5, r3, r1
20000d40:	e014      	b.n	20000d6c <Verify+0xe2>
        }
        VerifiedData++;
20000d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000d44:	3301      	adds	r3, #1
20000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (Size > VerifiedData) {
20000d48:	687a      	ldr	r2, [r7, #4]
20000d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000d4c:	429a      	cmp	r2, r3
20000d4e:	d8d6      	bhi.n	20000cfe <Verify+0x74>
20000d50:	2301      	movs	r3, #1
20000d52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000d54:	693b      	ldr	r3, [r7, #16]
20000d56:	f383 8810 	msr	PRIMASK, r3
}
20000d5a:	bf00      	nop
    }

    __set_PRIMASK(1); //disable interrupts
    return (checksum << 32);
20000d5c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
20000d60:	f04f 0400 	mov.w	r4, #0
20000d64:	f04f 0500 	mov.w	r5, #0
20000d68:	0015      	movs	r5, r2
20000d6a:	2400      	movs	r4, #0
20000d6c:	4622      	mov	r2, r4
20000d6e:	462b      	mov	r3, r5
}
20000d70:	4610      	mov	r0, r2
20000d72:	4619      	mov	r1, r3
20000d74:	3730      	adds	r7, #48	; 0x30
20000d76:	46bd      	mov	sp, r7
20000d78:	bdb0      	pop	{r4, r5, r7, pc}
	...

20000d7c <Read>:


int Read (uint32_t Address, uint32_t Size, uint16_t* buffer)
{
20000d7c:	b580      	push	{r7, lr}
20000d7e:	b088      	sub	sp, #32
20000d80:	af00      	add	r7, sp, #0
20000d82:	60f8      	str	r0, [r7, #12]
20000d84:	60b9      	str	r1, [r7, #8]
20000d86:	607a      	str	r2, [r7, #4]
20000d88:	2300      	movs	r3, #0
20000d8a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000d8c:	69fb      	ldr	r3, [r7, #28]
20000d8e:	f383 8810 	msr	PRIMASK, r3
}
20000d92:	bf00      	nop

    __set_PRIMASK(0); //enable interrupts

    if (HAL_QSPI_Abort(&hqspi) != HAL_OK) {
20000d94:	4815      	ldr	r0, [pc, #84]	; (20000dec <Read+0x70>)
20000d96:	f00b fc8b 	bl	2000c6b0 <HAL_QSPI_Abort>
20000d9a:	4603      	mov	r3, r0
20000d9c:	2b00      	cmp	r3, #0
20000d9e:	d007      	beq.n	20000db0 <Read+0x34>
20000da0:	2301      	movs	r3, #1
20000da2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000da4:	69bb      	ldr	r3, [r7, #24]
20000da6:	f383 8810 	msr	PRIMASK, r3
}
20000daa:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
20000dac:	2300      	movs	r3, #0
20000dae:	e019      	b.n	20000de4 <Read+0x68>
    }


    if (FLASH_QSPI_Read((uint8_t*)buffer, (Address & (0x0fffffff)), Size) != HAL_OK) {
20000db0:	68fb      	ldr	r3, [r7, #12]
20000db2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
20000db6:	68ba      	ldr	r2, [r7, #8]
20000db8:	4619      	mov	r1, r3
20000dba:	6878      	ldr	r0, [r7, #4]
20000dbc:	f000 faec 	bl	20001398 <FLASH_QSPI_Read>
20000dc0:	4603      	mov	r3, r0
20000dc2:	2b00      	cmp	r3, #0
20000dc4:	d007      	beq.n	20000dd6 <Read+0x5a>
20000dc6:	2301      	movs	r3, #1
20000dc8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000dca:	697b      	ldr	r3, [r7, #20]
20000dcc:	f383 8810 	msr	PRIMASK, r3
}
20000dd0:	bf00      	nop
        __set_PRIMASK(1); //disable interrupts
        return LOADER_FAIL;
20000dd2:	2300      	movs	r3, #0
20000dd4:	e006      	b.n	20000de4 <Read+0x68>
20000dd6:	2301      	movs	r3, #1
20000dd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000dda:	693b      	ldr	r3, [r7, #16]
20000ddc:	f383 8810 	msr	PRIMASK, r3
}
20000de0:	bf00      	nop
    }

    __set_PRIMASK(1); //disable interrupts
    return LOADER_OK;
20000de2:	2301      	movs	r3, #1

}
20000de4:	4618      	mov	r0, r3
20000de6:	3720      	adds	r7, #32
20000de8:	46bd      	mov	sp, r7
20000dea:	bd80      	pop	{r7, pc}
20000dec:	200004a4 	.word	0x200004a4

20000df0 <FLASH_QSPI_Init>:
static uint8_t FLASH_QSPI_Configuration(void);
static uint8_t FLASH_QSPI_ResetChip(void);
/* USER CODE END 0 */

/* USER CODE BEGIN 1 */
uint8_t FLASH_QSPI_Init(void) {
20000df0:	b580      	push	{r7, lr}
20000df2:	af00      	add	r7, sp, #0
	//prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
20000df4:	4b17      	ldr	r3, [pc, #92]	; (20000e54 <FLASH_QSPI_Init+0x64>)
20000df6:	4a18      	ldr	r2, [pc, #96]	; (20000e58 <FLASH_QSPI_Init+0x68>)
20000df8:	601a      	str	r2, [r3, #0]
	if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
20000dfa:	4816      	ldr	r0, [pc, #88]	; (20000e54 <FLASH_QSPI_Init+0x64>)
20000dfc:	f00a fbca 	bl	2000b594 <HAL_QSPI_DeInit>
20000e00:	4603      	mov	r3, r0
20000e02:	2b00      	cmp	r3, #0
20000e04:	d001      	beq.n	20000e0a <FLASH_QSPI_Init+0x1a>
		return HAL_ERROR;
20000e06:	2301      	movs	r3, #1
20000e08:	e021      	b.n	20000e4e <FLASH_QSPI_Init+0x5e>
	}

	MX_QUADSPI_Init();
20000e0a:	f000 fbff 	bl	2000160c <MX_QUADSPI_Init>

	if (FLASH_QSPI_ResetChip() != HAL_OK) {
20000e0e:	f000 f8f3 	bl	20000ff8 <FLASH_QSPI_ResetChip>
20000e12:	4603      	mov	r3, r0
20000e14:	2b00      	cmp	r3, #0
20000e16:	d001      	beq.n	20000e1c <FLASH_QSPI_Init+0x2c>
		return HAL_ERROR;
20000e18:	2301      	movs	r3, #1
20000e1a:	e018      	b.n	20000e4e <FLASH_QSPI_Init+0x5e>
	}

	HAL_Delay(1);
20000e1c:	2001      	movs	r0, #1
20000e1e:	f000 ffe7 	bl	20001df0 <HAL_Delay>

	if (FLASH_QSPI_AutoPollingMemReady() != HAL_OK) {
20000e22:	f000 f947 	bl	200010b4 <FLASH_QSPI_AutoPollingMemReady>
20000e26:	4603      	mov	r3, r0
20000e28:	2b00      	cmp	r3, #0
20000e2a:	d001      	beq.n	20000e30 <FLASH_QSPI_Init+0x40>
		return HAL_ERROR;
20000e2c:	2301      	movs	r3, #1
20000e2e:	e00e      	b.n	20000e4e <FLASH_QSPI_Init+0x5e>
	}

	if (FLASH_QSPI_WriteEnable() != HAL_OK) {
20000e30:	f000 f978 	bl	20001124 <FLASH_QSPI_WriteEnable>
20000e34:	4603      	mov	r3, r0
20000e36:	2b00      	cmp	r3, #0
20000e38:	d001      	beq.n	20000e3e <FLASH_QSPI_Init+0x4e>

		return HAL_ERROR;
20000e3a:	2301      	movs	r3, #1
20000e3c:	e007      	b.n	20000e4e <FLASH_QSPI_Init+0x5e>
	}

	/* Sets QE bit and starts QUADSPI communication */
	if (FLASH_QSPI_Configuration() != HAL_OK) {
20000e3e:	f000 f9bb 	bl	200011b8 <FLASH_QSPI_Configuration>
20000e42:	4603      	mov	r3, r0
20000e44:	2b00      	cmp	r3, #0
20000e46:	d001      	beq.n	20000e4c <FLASH_QSPI_Init+0x5c>
		return HAL_ERROR;
20000e48:	2301      	movs	r3, #1
20000e4a:	e000      	b.n	20000e4e <FLASH_QSPI_Init+0x5e>
	}

	return HAL_OK;
20000e4c:	2300      	movs	r3, #0
}
20000e4e:	4618      	mov	r0, r3
20000e50:	bd80      	pop	{r7, pc}
20000e52:	bf00      	nop
20000e54:	200004a4 	.word	0x200004a4
20000e58:	a0001000 	.word	0xa0001000

20000e5c <FLASH_QSPI_EraseChip>:

uint8_t FLASH_QSPI_EraseChip(void) {
20000e5c:	b580      	push	{r7, lr}
20000e5e:	b08e      	sub	sp, #56	; 0x38
20000e60:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;

	if (FLASH_QSPI_WriteEnable() != HAL_OK) {
20000e62:	f000 f95f 	bl	20001124 <FLASH_QSPI_WriteEnable>
20000e66:	4603      	mov	r3, r0
20000e68:	2b00      	cmp	r3, #0
20000e6a:	d001      	beq.n	20000e70 <FLASH_QSPI_EraseChip+0x14>
		return HAL_ERROR;
20000e6c:	2301      	movs	r3, #1
20000e6e:	e02b      	b.n	20000ec8 <FLASH_QSPI_EraseChip+0x6c>
	}

	/* Erasing Sequence --------------------------------- */
	sCommand.Instruction = CHIP_ERASE_CMD;
20000e70:	23c7      	movs	r3, #199	; 0xc7
20000e72:	603b      	str	r3, [r7, #0]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
20000e74:	f44f 7380 	mov.w	r3, #256	; 0x100
20000e78:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
20000e7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
20000e7e:	60fb      	str	r3, [r7, #12]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
20000e80:	2300      	movs	r3, #0
20000e82:	623b      	str	r3, [r7, #32]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
20000e84:	2300      	movs	r3, #0
20000e86:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
20000e88:	2300      	movs	r3, #0
20000e8a:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
20000e8c:	2300      	movs	r3, #0
20000e8e:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
20000e90:	2300      	movs	r3, #0
20000e92:	61fb      	str	r3, [r7, #28]
	sCommand.Address = 0;
20000e94:	2300      	movs	r3, #0
20000e96:	607b      	str	r3, [r7, #4]
	sCommand.DataMode = QSPI_DATA_NONE;
20000e98:	2300      	movs	r3, #0
20000e9a:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DummyCycles = 0;
20000e9c:	2300      	movs	r3, #0
20000e9e:	617b      	str	r3, [r7, #20]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
20000ea0:	463b      	mov	r3, r7
20000ea2:	f241 3288 	movw	r2, #5000	; 0x1388
20000ea6:	4619      	mov	r1, r3
20000ea8:	4809      	ldr	r0, [pc, #36]	; (20000ed0 <FLASH_QSPI_EraseChip+0x74>)
20000eaa:	f00a fd65 	bl	2000b978 <HAL_QSPI_Command>
20000eae:	4603      	mov	r3, r0
20000eb0:	2b00      	cmp	r3, #0
20000eb2:	d001      	beq.n	20000eb8 <FLASH_QSPI_EraseChip+0x5c>
			!= HAL_OK) {
		return HAL_ERROR;
20000eb4:	2301      	movs	r3, #1
20000eb6:	e007      	b.n	20000ec8 <FLASH_QSPI_EraseChip+0x6c>
	}

	if (FLASH_QSPI_AutoPollingMemReady() != HAL_OK) {
20000eb8:	f000 f8fc 	bl	200010b4 <FLASH_QSPI_AutoPollingMemReady>
20000ebc:	4603      	mov	r3, r0
20000ebe:	2b00      	cmp	r3, #0
20000ec0:	d001      	beq.n	20000ec6 <FLASH_QSPI_EraseChip+0x6a>
		return HAL_ERROR;
20000ec2:	2301      	movs	r3, #1
20000ec4:	e000      	b.n	20000ec8 <FLASH_QSPI_EraseChip+0x6c>
	}

	return HAL_OK;
20000ec6:	2300      	movs	r3, #0
}
20000ec8:	4618      	mov	r0, r3
20000eca:	3738      	adds	r7, #56	; 0x38
20000ecc:	46bd      	mov	sp, r7
20000ece:	bd80      	pop	{r7, pc}
20000ed0:	200004a4 	.word	0x200004a4

20000ed4 <FLASH_QSPI_EraseSector>:

uint8_t FLASH_QSPI_EraseSector(uint32_t EraseStartAddress,
		uint32_t EraseEndAddress) {
20000ed4:	b580      	push	{r7, lr}
20000ed6:	b090      	sub	sp, #64	; 0x40
20000ed8:	af00      	add	r7, sp, #0
20000eda:	6078      	str	r0, [r7, #4]
20000edc:	6039      	str	r1, [r7, #0]

	QSPI_CommandTypeDef sCommand;

	EraseStartAddress = EraseStartAddress
20000ede:	687a      	ldr	r2, [r7, #4]
20000ee0:	4b23      	ldr	r3, [pc, #140]	; (20000f70 <FLASH_QSPI_EraseSector+0x9c>)
20000ee2:	4013      	ands	r3, r2
20000ee4:	607b      	str	r3, [r7, #4]
			- EraseStartAddress % AT25SF128A_SECTOR_SIZE;

	/* Erasing Sequence -------------------------------------------------- */
	sCommand.Instruction = BLOCK_ERASE_CMD;
20000ee6:	23d8      	movs	r3, #216	; 0xd8
20000ee8:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
20000eea:	f44f 7380 	mov.w	r3, #256	; 0x100
20000eee:	623b      	str	r3, [r7, #32]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
20000ef0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
20000ef4:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
20000ef6:	2300      	movs	r3, #0
20000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
20000efa:	2300      	movs	r3, #0
20000efc:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
20000efe:	2300      	movs	r3, #0
20000f00:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
20000f02:	2300      	movs	r3, #0
20000f04:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
20000f06:	f44f 6380 	mov.w	r3, #1024	; 0x400
20000f0a:	627b      	str	r3, [r7, #36]	; 0x24

	sCommand.DataMode = QSPI_DATA_NONE;
20000f0c:	2300      	movs	r3, #0
20000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
20000f10:	2300      	movs	r3, #0
20000f12:	61fb      	str	r3, [r7, #28]

	while (EraseEndAddress >= EraseStartAddress) {
20000f14:	e022      	b.n	20000f5c <FLASH_QSPI_EraseSector+0x88>
		sCommand.Address = (EraseStartAddress & 0x0FFFFFFF);
20000f16:	687b      	ldr	r3, [r7, #4]
20000f18:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
20000f1c:	60fb      	str	r3, [r7, #12]

		if (FLASH_QSPI_WriteEnable() != HAL_OK) {
20000f1e:	f000 f901 	bl	20001124 <FLASH_QSPI_WriteEnable>
20000f22:	4603      	mov	r3, r0
20000f24:	2b00      	cmp	r3, #0
20000f26:	d001      	beq.n	20000f2c <FLASH_QSPI_EraseSector+0x58>
			return HAL_ERROR;
20000f28:	2301      	movs	r3, #1
20000f2a:	e01c      	b.n	20000f66 <FLASH_QSPI_EraseSector+0x92>
		}

		if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
20000f2c:	f107 0308 	add.w	r3, r7, #8
20000f30:	f241 3288 	movw	r2, #5000	; 0x1388
20000f34:	4619      	mov	r1, r3
20000f36:	480f      	ldr	r0, [pc, #60]	; (20000f74 <FLASH_QSPI_EraseSector+0xa0>)
20000f38:	f00a fd1e 	bl	2000b978 <HAL_QSPI_Command>
20000f3c:	4603      	mov	r3, r0
20000f3e:	2b00      	cmp	r3, #0
20000f40:	d001      	beq.n	20000f46 <FLASH_QSPI_EraseSector+0x72>
				!= HAL_OK) {
			return HAL_ERROR;
20000f42:	2301      	movs	r3, #1
20000f44:	e00f      	b.n	20000f66 <FLASH_QSPI_EraseSector+0x92>
		}
		EraseStartAddress += AT25SF128A_SECTOR_SIZE;
20000f46:	687b      	ldr	r3, [r7, #4]
20000f48:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
20000f4c:	607b      	str	r3, [r7, #4]

		if (FLASH_QSPI_AutoPollingMemReady() != HAL_OK) {
20000f4e:	f000 f8b1 	bl	200010b4 <FLASH_QSPI_AutoPollingMemReady>
20000f52:	4603      	mov	r3, r0
20000f54:	2b00      	cmp	r3, #0
20000f56:	d001      	beq.n	20000f5c <FLASH_QSPI_EraseSector+0x88>
			return HAL_ERROR;
20000f58:	2301      	movs	r3, #1
20000f5a:	e004      	b.n	20000f66 <FLASH_QSPI_EraseSector+0x92>
	while (EraseEndAddress >= EraseStartAddress) {
20000f5c:	683a      	ldr	r2, [r7, #0]
20000f5e:	687b      	ldr	r3, [r7, #4]
20000f60:	429a      	cmp	r2, r3
20000f62:	d2d8      	bcs.n	20000f16 <FLASH_QSPI_EraseSector+0x42>
		}
	}

	return HAL_OK;
20000f64:	2300      	movs	r3, #0
}
20000f66:	4618      	mov	r0, r3
20000f68:	3740      	adds	r7, #64	; 0x40
20000f6a:	46bd      	mov	sp, r7
20000f6c:	bd80      	pop	{r7, pc}
20000f6e:	bf00      	nop
20000f70:	ffff0000 	.word	0xffff0000
20000f74:	200004a4 	.word	0x200004a4

20000f78 <FLASH_QSPI_EraseBlock>:

uint8_t FLASH_QSPI_EraseBlock(uint32_t BlockAddress) {
20000f78:	b580      	push	{r7, lr}
20000f7a:	b090      	sub	sp, #64	; 0x40
20000f7c:	af00      	add	r7, sp, #0
20000f7e:	6078      	str	r0, [r7, #4]
	QSPI_CommandTypeDef s_command;

	/* Initialize the erase command */
	s_command.Instruction = SECTOR_ERASE_CMD;
20000f80:	2320      	movs	r3, #32
20000f82:	60bb      	str	r3, [r7, #8]
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
20000f84:	f44f 7380 	mov.w	r3, #256	; 0x100
20000f88:	623b      	str	r3, [r7, #32]
	s_command.AddressMode = QSPI_ADDRESS_1_LINE;
20000f8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
20000f8e:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.AddressSize = QSPI_ADDRESS_24_BITS;
20000f90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
20000f94:	617b      	str	r3, [r7, #20]
	s_command.Address = BlockAddress;
20000f96:	687b      	ldr	r3, [r7, #4]
20000f98:	60fb      	str	r3, [r7, #12]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
20000f9a:	2300      	movs	r3, #0
20000f9c:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.DataMode = QSPI_DATA_NONE;
20000f9e:	2300      	movs	r3, #0
20000fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.DummyCycles = 0;
20000fa2:	2300      	movs	r3, #0
20000fa4:	61fb      	str	r3, [r7, #28]
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
20000fa6:	2300      	movs	r3, #0
20000fa8:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
20000faa:	2300      	movs	r3, #0
20000fac:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
20000fae:	2300      	movs	r3, #0
20000fb0:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Enable write operations */
	if (FLASH_QSPI_WriteEnable() != HAL_OK) {
20000fb2:	f000 f8b7 	bl	20001124 <FLASH_QSPI_WriteEnable>
20000fb6:	4603      	mov	r3, r0
20000fb8:	2b00      	cmp	r3, #0
20000fba:	d001      	beq.n	20000fc0 <FLASH_QSPI_EraseBlock+0x48>
		return HAL_ERROR;
20000fbc:	2301      	movs	r3, #1
20000fbe:	e014      	b.n	20000fea <FLASH_QSPI_EraseBlock+0x72>
	}

	/* Send the command */
	if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
20000fc0:	f107 0308 	add.w	r3, r7, #8
20000fc4:	f241 3288 	movw	r2, #5000	; 0x1388
20000fc8:	4619      	mov	r1, r3
20000fca:	480a      	ldr	r0, [pc, #40]	; (20000ff4 <FLASH_QSPI_EraseBlock+0x7c>)
20000fcc:	f00a fcd4 	bl	2000b978 <HAL_QSPI_Command>
20000fd0:	4603      	mov	r3, r0
20000fd2:	2b00      	cmp	r3, #0
20000fd4:	d001      	beq.n	20000fda <FLASH_QSPI_EraseBlock+0x62>
			!= HAL_OK) {
		return HAL_ERROR;
20000fd6:	2301      	movs	r3, #1
20000fd8:	e007      	b.n	20000fea <FLASH_QSPI_EraseBlock+0x72>
	}

	/* Configure automatic polling mode to wait for end of erase */
	if (FLASH_QSPI_AutoPollingMemReady() != HAL_OK) {
20000fda:	f000 f86b 	bl	200010b4 <FLASH_QSPI_AutoPollingMemReady>
20000fde:	4603      	mov	r3, r0
20000fe0:	2b00      	cmp	r3, #0
20000fe2:	d001      	beq.n	20000fe8 <FLASH_QSPI_EraseBlock+0x70>
		return HAL_ERROR;
20000fe4:	2301      	movs	r3, #1
20000fe6:	e000      	b.n	20000fea <FLASH_QSPI_EraseBlock+0x72>
	}

	return HAL_OK;
20000fe8:	2300      	movs	r3, #0
}
20000fea:	4618      	mov	r0, r3
20000fec:	3740      	adds	r7, #64	; 0x40
20000fee:	46bd      	mov	sp, r7
20000ff0:	bd80      	pop	{r7, pc}
20000ff2:	bf00      	nop
20000ff4:	200004a4 	.word	0x200004a4

20000ff8 <FLASH_QSPI_ResetChip>:

uint8_t FLASH_QSPI_ResetChip() {
20000ff8:	b580      	push	{r7, lr}
20000ffa:	b090      	sub	sp, #64	; 0x40
20000ffc:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	uint32_t temp = 0;
20000ffe:	2300      	movs	r3, #0
20001000:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Erasing Sequence -------------------------------------------------- */
	sCommand.Instruction = ENABLE_RESET_CMD;
20001002:	2366      	movs	r3, #102	; 0x66
20001004:	607b      	str	r3, [r7, #4]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
20001006:	f44f 7380 	mov.w	r3, #256	; 0x100
2000100a:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
2000100c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
20001010:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
20001012:	2300      	movs	r3, #0
20001014:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
20001016:	2300      	movs	r3, #0
20001018:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
2000101a:	2300      	movs	r3, #0
2000101c:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2000101e:	2300      	movs	r3, #0
20001020:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
20001022:	2300      	movs	r3, #0
20001024:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
20001026:	2300      	movs	r3, #0
20001028:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
2000102a:	2300      	movs	r3, #0
2000102c:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
2000102e:	2300      	movs	r3, #0
20001030:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
20001032:	1d3b      	adds	r3, r7, #4
20001034:	f241 3288 	movw	r2, #5000	; 0x1388
20001038:	4619      	mov	r1, r3
2000103a:	481d      	ldr	r0, [pc, #116]	; (200010b0 <FLASH_QSPI_ResetChip+0xb8>)
2000103c:	f00a fc9c 	bl	2000b978 <HAL_QSPI_Command>
20001040:	4603      	mov	r3, r0
20001042:	2b00      	cmp	r3, #0
20001044:	d001      	beq.n	2000104a <FLASH_QSPI_ResetChip+0x52>
			!= HAL_OK) {
		return HAL_ERROR;
20001046:	2301      	movs	r3, #1
20001048:	e02e      	b.n	200010a8 <FLASH_QSPI_ResetChip+0xb0>
	}
	for (temp = 0; temp < 0x2f; temp++) {
2000104a:	2300      	movs	r3, #0
2000104c:	63fb      	str	r3, [r7, #60]	; 0x3c
2000104e:	e003      	b.n	20001058 <FLASH_QSPI_ResetChip+0x60>
		__NOP();
20001050:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
20001052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
20001054:	3301      	adds	r3, #1
20001056:	63fb      	str	r3, [r7, #60]	; 0x3c
20001058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
2000105a:	2b2e      	cmp	r3, #46	; 0x2e
2000105c:	d9f8      	bls.n	20001050 <FLASH_QSPI_ResetChip+0x58>
	}

	sCommand.Instruction = RESET_DEVICE_CMD;
2000105e:	2399      	movs	r3, #153	; 0x99
20001060:	607b      	str	r3, [r7, #4]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
20001062:	f44f 7380 	mov.w	r3, #256	; 0x100
20001066:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
20001068:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2000106c:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2000106e:	2300      	movs	r3, #0
20001070:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
20001072:	2300      	movs	r3, #0
20001074:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
20001076:	2300      	movs	r3, #0
20001078:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2000107a:	2300      	movs	r3, #0
2000107c:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
2000107e:	2300      	movs	r3, #0
20001080:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
20001082:	2300      	movs	r3, #0
20001084:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
20001086:	2300      	movs	r3, #0
20001088:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
2000108a:	2300      	movs	r3, #0
2000108c:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
2000108e:	1d3b      	adds	r3, r7, #4
20001090:	f241 3288 	movw	r2, #5000	; 0x1388
20001094:	4619      	mov	r1, r3
20001096:	4806      	ldr	r0, [pc, #24]	; (200010b0 <FLASH_QSPI_ResetChip+0xb8>)
20001098:	f00a fc6e 	bl	2000b978 <HAL_QSPI_Command>
2000109c:	4603      	mov	r3, r0
2000109e:	2b00      	cmp	r3, #0
200010a0:	d001      	beq.n	200010a6 <FLASH_QSPI_ResetChip+0xae>
			!= HAL_OK) {
		return HAL_ERROR;
200010a2:	2301      	movs	r3, #1
200010a4:	e000      	b.n	200010a8 <FLASH_QSPI_ResetChip+0xb0>
	}
	return HAL_OK;
200010a6:	2300      	movs	r3, #0
}
200010a8:	4618      	mov	r0, r3
200010aa:	3740      	adds	r7, #64	; 0x40
200010ac:	46bd      	mov	sp, r7
200010ae:	bd80      	pop	{r7, pc}
200010b0:	200004a4 	.word	0x200004a4

200010b4 <FLASH_QSPI_AutoPollingMemReady>:

uint8_t FLASH_QSPI_AutoPollingMemReady(void) {
200010b4:	b580      	push	{r7, lr}
200010b6:	b094      	sub	sp, #80	; 0x50
200010b8:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	/* Configure automatic polling mode to wait for memory ready ------ */
	sCommand.Instruction = READ_STATUS_REG_LOWER_CMD;
200010ba:	2305      	movs	r3, #5
200010bc:	61bb      	str	r3, [r7, #24]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
200010be:	f44f 7380 	mov.w	r3, #256	; 0x100
200010c2:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
200010c4:	2300      	movs	r3, #0
200010c6:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
200010c8:	2300      	movs	r3, #0
200010ca:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_1_LINE;
200010cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
200010d0:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
200010d2:	2300      	movs	r3, #0
200010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
200010d6:	2300      	movs	r3, #0
200010d8:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
200010da:	2300      	movs	r3, #0
200010dc:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
200010de:	2300      	movs	r3, #0
200010e0:	64fb      	str	r3, [r7, #76]	; 0x4c

	sConfig.Match = 0x00;
200010e2:	2300      	movs	r3, #0
200010e4:	603b      	str	r3, [r7, #0]
	sConfig.Mask = AT25SF128A_SR_WIP;
200010e6:	2301      	movs	r3, #1
200010e8:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
200010ea:	2300      	movs	r3, #0
200010ec:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
200010ee:	2301      	movs	r3, #1
200010f0:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
200010f2:	2310      	movs	r3, #16
200010f4:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
200010f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
200010fa:	617b      	str	r3, [r7, #20]

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
200010fc:	463a      	mov	r2, r7
200010fe:	f107 0118 	add.w	r1, r7, #24
20001102:	f241 3388 	movw	r3, #5000	; 0x1388
20001106:	4806      	ldr	r0, [pc, #24]	; (20001120 <FLASH_QSPI_AutoPollingMemReady+0x6c>)
20001108:	f00b f908 	bl	2000c31c <HAL_QSPI_AutoPolling>
2000110c:	4603      	mov	r3, r0
2000110e:	2b00      	cmp	r3, #0
20001110:	d001      	beq.n	20001116 <FLASH_QSPI_AutoPollingMemReady+0x62>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
20001112:	2301      	movs	r3, #1
20001114:	e000      	b.n	20001118 <FLASH_QSPI_AutoPollingMemReady+0x64>
	}

	return HAL_OK;
20001116:	2300      	movs	r3, #0
}
20001118:	4618      	mov	r0, r3
2000111a:	3750      	adds	r7, #80	; 0x50
2000111c:	46bd      	mov	sp, r7
2000111e:	bd80      	pop	{r7, pc}
20001120:	200004a4 	.word	0x200004a4

20001124 <FLASH_QSPI_WriteEnable>:

static uint8_t FLASH_QSPI_WriteEnable(void) {
20001124:	b580      	push	{r7, lr}
20001126:	b094      	sub	sp, #80	; 0x50
20001128:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	/* Enable write operations ------------------------------------------ */
	sCommand.Instruction = WRITE_ENABLE_CMD;
2000112a:	2306      	movs	r3, #6
2000112c:	61bb      	str	r3, [r7, #24]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
2000112e:	f44f 7380 	mov.w	r3, #256	; 0x100
20001132:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
20001134:	2300      	movs	r3, #0
20001136:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
20001138:	2300      	movs	r3, #0
2000113a:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_NONE;
2000113c:	2300      	movs	r3, #0
2000113e:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
20001140:	2300      	movs	r3, #0
20001142:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
20001144:	2300      	movs	r3, #0
20001146:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
20001148:	2300      	movs	r3, #0
2000114a:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2000114c:	2300      	movs	r3, #0
2000114e:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
20001150:	f107 0318 	add.w	r3, r7, #24
20001154:	f241 3288 	movw	r2, #5000	; 0x1388
20001158:	4619      	mov	r1, r3
2000115a:	4816      	ldr	r0, [pc, #88]	; (200011b4 <FLASH_QSPI_WriteEnable+0x90>)
2000115c:	f00a fc0c 	bl	2000b978 <HAL_QSPI_Command>
20001160:	4603      	mov	r3, r0
20001162:	2b00      	cmp	r3, #0
20001164:	d001      	beq.n	2000116a <FLASH_QSPI_WriteEnable+0x46>
			!= HAL_OK) {
		return HAL_ERROR;
20001166:	2301      	movs	r3, #1
20001168:	e01f      	b.n	200011aa <FLASH_QSPI_WriteEnable+0x86>
	}

	/* Configure automatic polling mode to wait for write enabling ---- */
	sConfig.Match = 0x02;
2000116a:	2302      	movs	r3, #2
2000116c:	603b      	str	r3, [r7, #0]
	sConfig.Mask = 0x02;
2000116e:	2302      	movs	r3, #2
20001170:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
20001172:	2300      	movs	r3, #0
20001174:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
20001176:	2301      	movs	r3, #1
20001178:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
2000117a:	2310      	movs	r3, #16
2000117c:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
2000117e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
20001182:	617b      	str	r3, [r7, #20]
	sCommand.Instruction = READ_STATUS_REG_LOWER_CMD;
20001184:	2305      	movs	r3, #5
20001186:	61bb      	str	r3, [r7, #24]
	sCommand.DataMode = QSPI_DATA_1_LINE;
20001188:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2000118c:	63fb      	str	r3, [r7, #60]	; 0x3c

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
2000118e:	463a      	mov	r2, r7
20001190:	f107 0118 	add.w	r1, r7, #24
20001194:	f241 3388 	movw	r3, #5000	; 0x1388
20001198:	4806      	ldr	r0, [pc, #24]	; (200011b4 <FLASH_QSPI_WriteEnable+0x90>)
2000119a:	f00b f8bf 	bl	2000c31c <HAL_QSPI_AutoPolling>
2000119e:	4603      	mov	r3, r0
200011a0:	2b00      	cmp	r3, #0
200011a2:	d001      	beq.n	200011a8 <FLASH_QSPI_WriteEnable+0x84>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
200011a4:	2301      	movs	r3, #1
200011a6:	e000      	b.n	200011aa <FLASH_QSPI_WriteEnable+0x86>
	}

	return HAL_OK;
200011a8:	2300      	movs	r3, #0
}
200011aa:	4618      	mov	r0, r3
200011ac:	3750      	adds	r7, #80	; 0x50
200011ae:	46bd      	mov	sp, r7
200011b0:	bd80      	pop	{r7, pc}
200011b2:	bf00      	nop
200011b4:	200004a4 	.word	0x200004a4

200011b8 <FLASH_QSPI_Configuration>:

/*Enable quad mode and set dummy cycles count*/
uint8_t FLASH_QSPI_Configuration(void) {
200011b8:	b580      	push	{r7, lr}
200011ba:	b090      	sub	sp, #64	; 0x40
200011bc:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	uint8_t reg;

	/*read configuration register*/
	sCommand.Instruction = READ_STATUS_REG_MIDDLE_CMD;
200011be:	2335      	movs	r3, #53	; 0x35
200011c0:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
200011c2:	f44f 7380 	mov.w	r3, #256	; 0x100
200011c6:	623b      	str	r3, [r7, #32]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
200011c8:	2300      	movs	r3, #0
200011ca:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
200011cc:	2300      	movs	r3, #0
200011ce:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DataMode = QSPI_DATA_1_LINE;
200011d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
200011d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
200011d6:	2300      	movs	r3, #0
200011d8:	61fb      	str	r3, [r7, #28]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
200011da:	2300      	movs	r3, #0
200011dc:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
200011de:	2300      	movs	r3, #0
200011e0:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
200011e2:	2300      	movs	r3, #0
200011e4:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.NbData = 1;
200011e6:	2301      	movs	r3, #1
200011e8:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
200011ea:	f107 0308 	add.w	r3, r7, #8
200011ee:	f241 3288 	movw	r2, #5000	; 0x1388
200011f2:	4619      	mov	r1, r3
200011f4:	482a      	ldr	r0, [pc, #168]	; (200012a0 <FLASH_QSPI_Configuration+0xe8>)
200011f6:	f00a fbbf 	bl	2000b978 <HAL_QSPI_Command>
200011fa:	4603      	mov	r3, r0
200011fc:	2b00      	cmp	r3, #0
200011fe:	d001      	beq.n	20001204 <FLASH_QSPI_Configuration+0x4c>
			!= HAL_OK) {
		return HAL_ERROR;
20001200:	2301      	movs	r3, #1
20001202:	e049      	b.n	20001298 <FLASH_QSPI_Configuration+0xe0>
	}

	if (HAL_QSPI_Receive(&hqspi, &reg,
20001204:	1dfb      	adds	r3, r7, #7
20001206:	f241 3288 	movw	r2, #5000	; 0x1388
2000120a:	4619      	mov	r1, r3
2000120c:	4824      	ldr	r0, [pc, #144]	; (200012a0 <FLASH_QSPI_Configuration+0xe8>)
2000120e:	f00a fd04 	bl	2000bc1a <HAL_QSPI_Receive>
20001212:	4603      	mov	r3, r0
20001214:	2b00      	cmp	r3, #0
20001216:	d001      	beq.n	2000121c <FLASH_QSPI_Configuration+0x64>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
20001218:	2301      	movs	r3, #1
2000121a:	e03d      	b.n	20001298 <FLASH_QSPI_Configuration+0xe0>
	}

	if (FLASH_QSPI_WriteEnable() != HAL_OK) {
2000121c:	f7ff ff82 	bl	20001124 <FLASH_QSPI_WriteEnable>
20001220:	4603      	mov	r3, r0
20001222:	2b00      	cmp	r3, #0
20001224:	d001      	beq.n	2000122a <FLASH_QSPI_Configuration+0x72>

		return HAL_ERROR;
20001226:	2301      	movs	r3, #1
20001228:	e036      	b.n	20001298 <FLASH_QSPI_Configuration+0xe0>
	}

	/*set dummy cycles*/
	//MODIFY_REG(reg, 0xF0, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(0xF0)));
	/* Set QE bit in register to enable QUADSPI mode in at25sf128a */
	reg = reg | 0x02;
2000122a:	79fb      	ldrb	r3, [r7, #7]
2000122c:	f043 0302 	orr.w	r3, r3, #2
20001230:	b2db      	uxtb	r3, r3
20001232:	71fb      	strb	r3, [r7, #7]

	sCommand.Instruction = WRITE_STATUS_REG_MIDDLE_CMD;
20001234:	2331      	movs	r3, #49	; 0x31
20001236:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
20001238:	f44f 7380 	mov.w	r3, #256	; 0x100
2000123c:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2000123e:	2300      	movs	r3, #0
20001240:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
20001242:	2300      	movs	r3, #0
20001244:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
20001246:	2300      	movs	r3, #0
20001248:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
2000124a:	2300      	movs	r3, #0
2000124c:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
2000124e:	2300      	movs	r3, #0
20001250:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
20001252:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
20001256:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
20001258:	2300      	movs	r3, #0
2000125a:	61fb      	str	r3, [r7, #28]
	sCommand.NbData = 1;
2000125c:	2301      	movs	r3, #1
2000125e:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
20001260:	f107 0308 	add.w	r3, r7, #8
20001264:	f241 3288 	movw	r2, #5000	; 0x1388
20001268:	4619      	mov	r1, r3
2000126a:	480d      	ldr	r0, [pc, #52]	; (200012a0 <FLASH_QSPI_Configuration+0xe8>)
2000126c:	f00a fb84 	bl	2000b978 <HAL_QSPI_Command>
20001270:	4603      	mov	r3, r0
20001272:	2b00      	cmp	r3, #0
20001274:	d001      	beq.n	2000127a <FLASH_QSPI_Configuration+0xc2>
			!= HAL_OK) {
		return HAL_ERROR;
20001276:	2301      	movs	r3, #1
20001278:	e00e      	b.n	20001298 <FLASH_QSPI_Configuration+0xe0>
	}

	if (HAL_QSPI_Transmit(&hqspi, &reg,
2000127a:	1dfb      	adds	r3, r7, #7
2000127c:	f241 3288 	movw	r2, #5000	; 0x1388
20001280:	4619      	mov	r1, r3
20001282:	4807      	ldr	r0, [pc, #28]	; (200012a0 <FLASH_QSPI_Configuration+0xe8>)
20001284:	f00a fc37 	bl	2000baf6 <HAL_QSPI_Transmit>
20001288:	4603      	mov	r3, r0
2000128a:	2b00      	cmp	r3, #0
2000128c:	d003      	beq.n	20001296 <FLASH_QSPI_Configuration+0xde>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		Error_Handler();
2000128e:	f000 f9b7 	bl	20001600 <Error_Handler>
		return HAL_ERROR;
20001292:	2301      	movs	r3, #1
20001294:	e000      	b.n	20001298 <FLASH_QSPI_Configuration+0xe0>
	}
	return HAL_OK;
20001296:	2300      	movs	r3, #0
}
20001298:	4618      	mov	r0, r3
2000129a:	3740      	adds	r7, #64	; 0x40
2000129c:	46bd      	mov	sp, r7
2000129e:	bd80      	pop	{r7, pc}
200012a0:	200004a4 	.word	0x200004a4

200012a4 <FLASH_QSPI_Write>:

uint8_t FLASH_QSPI_Write(uint8_t *pData, uint32_t WriteAddr, uint32_t Size) {
200012a4:	b580      	push	{r7, lr}
200012a6:	b096      	sub	sp, #88	; 0x58
200012a8:	af00      	add	r7, sp, #0
200012aa:	60f8      	str	r0, [r7, #12]
200012ac:	60b9      	str	r1, [r7, #8]
200012ae:	607a      	str	r2, [r7, #4]
	QSPI_CommandTypeDef s_command;
	uint32_t end_addr, current_size, current_addr;

	/* Calculation of the size between the write address and the end of the page */
	current_size = AT25SF128A_PAGE_SIZE
			- (WriteAddr % AT25SF128A_PAGE_SIZE);
200012b0:	68bb      	ldr	r3, [r7, #8]
200012b2:	b2db      	uxtb	r3, r3
	current_size = AT25SF128A_PAGE_SIZE
200012b4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
200012b8:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check if the size of the data is less than the remaining place in the page */
	if (current_size > Size) {
200012ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
200012bc:	687b      	ldr	r3, [r7, #4]
200012be:	429a      	cmp	r2, r3
200012c0:	d901      	bls.n	200012c6 <FLASH_QSPI_Write+0x22>
		current_size = Size;
200012c2:	687b      	ldr	r3, [r7, #4]
200012c4:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Initialize the adress variables */
	current_addr = WriteAddr;
200012c6:	68bb      	ldr	r3, [r7, #8]
200012c8:	653b      	str	r3, [r7, #80]	; 0x50
	end_addr = WriteAddr + Size;
200012ca:	68ba      	ldr	r2, [r7, #8]
200012cc:	687b      	ldr	r3, [r7, #4]
200012ce:	4413      	add	r3, r2
200012d0:	64fb      	str	r3, [r7, #76]	; 0x4c

	/* Initialize the program command */
	s_command.Instruction = QUAD_PAGE_PROGRAM_CMD;
200012d2:	2332      	movs	r3, #50	; 0x32
200012d4:	617b      	str	r3, [r7, #20]
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
200012d6:	f44f 7380 	mov.w	r3, #256	; 0x100
200012da:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.AddressMode = QSPI_ADDRESS_1_LINE;
200012dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
200012e0:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.AddressSize = QSPI_ADDRESS_24_BITS;
200012e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
200012e6:	623b      	str	r3, [r7, #32]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
200012e8:	2300      	movs	r3, #0
200012ea:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DataMode = QSPI_DATA_4_LINES;
200012ec:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
200012f0:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.DummyCycles = 0;
200012f2:	2300      	movs	r3, #0
200012f4:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
200012f6:	2300      	movs	r3, #0
200012f8:	643b      	str	r3, [r7, #64]	; 0x40
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
200012fa:	2300      	movs	r3, #0
200012fc:	647b      	str	r3, [r7, #68]	; 0x44
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
200012fe:	2300      	movs	r3, #0
20001300:	64bb      	str	r3, [r7, #72]	; 0x48

	/* Perform the write page by page */
	do {
		s_command.Address = current_addr;
20001302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
20001304:	61bb      	str	r3, [r7, #24]
		s_command.NbData = current_size;
20001306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
20001308:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Enable write operations */
		if (FLASH_QSPI_WriteEnable() != HAL_OK) {
2000130a:	f7ff ff0b 	bl	20001124 <FLASH_QSPI_WriteEnable>
2000130e:	4603      	mov	r3, r0
20001310:	2b00      	cmp	r3, #0
20001312:	d001      	beq.n	20001318 <FLASH_QSPI_Write+0x74>
			return HAL_ERROR;
20001314:	2301      	movs	r3, #1
20001316:	e038      	b.n	2000138a <FLASH_QSPI_Write+0xe6>
		}

		/* Configure the command */
		if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
20001318:	f107 0314 	add.w	r3, r7, #20
2000131c:	f241 3288 	movw	r2, #5000	; 0x1388
20001320:	4619      	mov	r1, r3
20001322:	481c      	ldr	r0, [pc, #112]	; (20001394 <FLASH_QSPI_Write+0xf0>)
20001324:	f00a fb28 	bl	2000b978 <HAL_QSPI_Command>
20001328:	4603      	mov	r3, r0
2000132a:	2b00      	cmp	r3, #0
2000132c:	d001      	beq.n	20001332 <FLASH_QSPI_Write+0x8e>
				!= HAL_OK) {
			return HAL_ERROR;
2000132e:	2301      	movs	r3, #1
20001330:	e02b      	b.n	2000138a <FLASH_QSPI_Write+0xe6>
		}

		/* Transmission of the data */
		if (HAL_QSPI_Transmit(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
20001332:	f241 3288 	movw	r2, #5000	; 0x1388
20001336:	68f9      	ldr	r1, [r7, #12]
20001338:	4816      	ldr	r0, [pc, #88]	; (20001394 <FLASH_QSPI_Write+0xf0>)
2000133a:	f00a fbdc 	bl	2000baf6 <HAL_QSPI_Transmit>
2000133e:	4603      	mov	r3, r0
20001340:	2b00      	cmp	r3, #0
20001342:	d001      	beq.n	20001348 <FLASH_QSPI_Write+0xa4>
				!= HAL_OK) {
			return HAL_ERROR;
20001344:	2301      	movs	r3, #1
20001346:	e020      	b.n	2000138a <FLASH_QSPI_Write+0xe6>
		}

		/* Configure automatic polling mode to wait for end of program */
		if (FLASH_QSPI_AutoPollingMemReady() != HAL_OK) {
20001348:	f7ff feb4 	bl	200010b4 <FLASH_QSPI_AutoPollingMemReady>
2000134c:	4603      	mov	r3, r0
2000134e:	2b00      	cmp	r3, #0
20001350:	d001      	beq.n	20001356 <FLASH_QSPI_Write+0xb2>
			return HAL_ERROR;
20001352:	2301      	movs	r3, #1
20001354:	e019      	b.n	2000138a <FLASH_QSPI_Write+0xe6>
		}

		/* Update the address and size variables for next page programming */
		current_addr += current_size;
20001356:	6d3a      	ldr	r2, [r7, #80]	; 0x50
20001358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
2000135a:	4413      	add	r3, r2
2000135c:	653b      	str	r3, [r7, #80]	; 0x50
		pData += current_size;
2000135e:	68fa      	ldr	r2, [r7, #12]
20001360:	6d7b      	ldr	r3, [r7, #84]	; 0x54
20001362:	4413      	add	r3, r2
20001364:	60fb      	str	r3, [r7, #12]
		current_size =
				((current_addr + AT25SF128A_PAGE_SIZE) > end_addr) ?
20001366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
20001368:	f503 7380 	add.w	r3, r3, #256	; 0x100
						(end_addr - current_addr) : AT25SF128A_PAGE_SIZE;
2000136c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
2000136e:	429a      	cmp	r2, r3
20001370:	d203      	bcs.n	2000137a <FLASH_QSPI_Write+0xd6>
20001372:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
20001374:	6d3b      	ldr	r3, [r7, #80]	; 0x50
20001376:	1ad3      	subs	r3, r2, r3
20001378:	e001      	b.n	2000137e <FLASH_QSPI_Write+0xda>
2000137a:	f44f 7380 	mov.w	r3, #256	; 0x100
		current_size =
2000137e:	657b      	str	r3, [r7, #84]	; 0x54
	} while (current_addr < end_addr);
20001380:	6d3a      	ldr	r2, [r7, #80]	; 0x50
20001382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
20001384:	429a      	cmp	r2, r3
20001386:	d3bc      	bcc.n	20001302 <FLASH_QSPI_Write+0x5e>

	return HAL_OK;
20001388:	2300      	movs	r3, #0
}
2000138a:	4618      	mov	r0, r3
2000138c:	3758      	adds	r7, #88	; 0x58
2000138e:	46bd      	mov	sp, r7
20001390:	bd80      	pop	{r7, pc}
20001392:	bf00      	nop
20001394:	200004a4 	.word	0x200004a4

20001398 <FLASH_QSPI_Read>:

uint8_t FLASH_QSPI_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size) {
20001398:	b580      	push	{r7, lr}
2000139a:	b092      	sub	sp, #72	; 0x48
2000139c:	af00      	add	r7, sp, #0
2000139e:	60f8      	str	r0, [r7, #12]
200013a0:	60b9      	str	r1, [r7, #8]
200013a2:	607a      	str	r2, [r7, #4]
	QSPI_CommandTypeDef s_command;

	/* Initialize the read command */
	s_command.Instruction = QUAD_INOUT_FAST_READ_CMD;
200013a4:	23eb      	movs	r3, #235	; 0xeb
200013a6:	613b      	str	r3, [r7, #16]
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
200013a8:	f44f 7380 	mov.w	r3, #256	; 0x100
200013ac:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.AddressMode = QSPI_ADDRESS_4_LINES;
200013ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
200013b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.AddressSize = QSPI_ADDRESS_24_BITS;
200013b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
200013b8:	61fb      	str	r3, [r7, #28]
	s_command.Address = ReadAddr;
200013ba:	68bb      	ldr	r3, [r7, #8]
200013bc:	617b      	str	r3, [r7, #20]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_4_LINES;
200013be:	f44f 4340 	mov.w	r3, #49152	; 0xc000
200013c2:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
200013c4:	2300      	movs	r3, #0
200013c6:	623b      	str	r3, [r7, #32]
	s_command.AlternateBytes = 0x0;//do poprawy
200013c8:	2300      	movs	r3, #0
200013ca:	61bb      	str	r3, [r7, #24]
	s_command.DataMode = QSPI_DATA_4_LINES;
200013cc:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
200013d0:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DummyCycles = 0x4; // do poprawy przez define
200013d2:	2304      	movs	r3, #4
200013d4:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.NbData = Size;
200013d6:	687b      	ldr	r3, [r7, #4]
200013d8:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
200013da:	2300      	movs	r3, #0
200013dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
200013de:	2300      	movs	r3, #0
200013e0:	643b      	str	r3, [r7, #64]	; 0x40
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD; //do zmiany jesli nie działa  usunąć
200013e2:	2300      	movs	r3, #0
200013e4:	647b      	str	r3, [r7, #68]	; 0x44

	      //do poprawy

	/* Configure the command */
	if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
200013e6:	f107 0310 	add.w	r3, r7, #16
200013ea:	f241 3288 	movw	r2, #5000	; 0x1388
200013ee:	4619      	mov	r1, r3
200013f0:	4815      	ldr	r0, [pc, #84]	; (20001448 <FLASH_QSPI_Read+0xb0>)
200013f2:	f00a fac1 	bl	2000b978 <HAL_QSPI_Command>
200013f6:	4603      	mov	r3, r0
200013f8:	2b00      	cmp	r3, #0
200013fa:	d001      	beq.n	20001400 <FLASH_QSPI_Read+0x68>
			!= HAL_OK) {
		return HAL_ERROR;
200013fc:	2301      	movs	r3, #1
200013fe:	e01f      	b.n	20001440 <FLASH_QSPI_Read+0xa8>
	}

	/* Set S# timing for Read command */
	MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT,
20001400:	4b11      	ldr	r3, [pc, #68]	; (20001448 <FLASH_QSPI_Read+0xb0>)
20001402:	681b      	ldr	r3, [r3, #0]
20001404:	685b      	ldr	r3, [r3, #4]
20001406:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
2000140a:	4b0f      	ldr	r3, [pc, #60]	; (20001448 <FLASH_QSPI_Read+0xb0>)
2000140c:	681b      	ldr	r3, [r3, #0]
2000140e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
20001412:	605a      	str	r2, [r3, #4]
			QSPI_CS_HIGH_TIME_3_CYCLE);

	/* Reception of the data */
	if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
20001414:	f241 3288 	movw	r2, #5000	; 0x1388
20001418:	68f9      	ldr	r1, [r7, #12]
2000141a:	480b      	ldr	r0, [pc, #44]	; (20001448 <FLASH_QSPI_Read+0xb0>)
2000141c:	f00a fbfd 	bl	2000bc1a <HAL_QSPI_Receive>
20001420:	4603      	mov	r3, r0
20001422:	2b00      	cmp	r3, #0
20001424:	d001      	beq.n	2000142a <FLASH_QSPI_Read+0x92>
			!= HAL_OK) {
		return HAL_ERROR;
20001426:	2301      	movs	r3, #1
20001428:	e00a      	b.n	20001440 <FLASH_QSPI_Read+0xa8>
	}

	/* Restore S# timing for nonRead commands */
	MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT,
2000142a:	4b07      	ldr	r3, [pc, #28]	; (20001448 <FLASH_QSPI_Read+0xb0>)
2000142c:	681b      	ldr	r3, [r3, #0]
2000142e:	685b      	ldr	r3, [r3, #4]
20001430:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
20001434:	4b04      	ldr	r3, [pc, #16]	; (20001448 <FLASH_QSPI_Read+0xb0>)
20001436:	681b      	ldr	r3, [r3, #0]
20001438:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
2000143c:	605a      	str	r2, [r3, #4]
			QSPI_CS_HIGH_TIME_6_CYCLE);

	return HAL_OK;
2000143e:	2300      	movs	r3, #0
}
20001440:	4618      	mov	r0, r3
20001442:	3748      	adds	r7, #72	; 0x48
20001444:	46bd      	mov	sp, r7
20001446:	bd80      	pop	{r7, pc}
20001448:	200004a4 	.word	0x200004a4

2000144c <FLASH_QSPI_EnableMemoryMappedMode>:

uint8_t FLASH_QSPI_EnableMemoryMappedMode(void) {
2000144c:	b580      	push	{r7, lr}
2000144e:	b090      	sub	sp, #64	; 0x40
20001450:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef s_command;
	QSPI_MemoryMappedTypeDef sMemMappedCfg;

	/* Enable Memory-Mapped mode-------------------------------------------------- */

	s_command.Instruction = QUAD_INOUT_FAST_READ_CMD;
20001452:	23eb      	movs	r3, #235	; 0xeb
20001454:	60bb      	str	r3, [r7, #8]
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
20001456:	f44f 7380 	mov.w	r3, #256	; 0x100
2000145a:	623b      	str	r3, [r7, #32]
	s_command.AddressSize = QSPI_ADDRESS_24_BITS;
2000145c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
20001460:	617b      	str	r3, [r7, #20]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_4_LINES;
20001462:	f44f 4340 	mov.w	r3, #49152	; 0xc000
20001466:	62bb      	str	r3, [r7, #40]	; 0x28
		s_command.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
20001468:	2300      	movs	r3, #0
2000146a:	61bb      	str	r3, [r7, #24]
		s_command.AlternateBytes = 0;
2000146c:	2300      	movs	r3, #0
2000146e:	613b      	str	r3, [r7, #16]
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
20001470:	2300      	movs	r3, #0
20001472:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
20001474:	2300      	movs	r3, #0
20001476:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
20001478:	2300      	movs	r3, #0
2000147a:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.AddressMode = QSPI_ADDRESS_4_LINES;
2000147c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
20001480:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.DataMode = QSPI_DATA_4_LINES;
20001482:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
20001486:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.NbData = 0;
20001488:	2300      	movs	r3, #0
2000148a:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.Address = 0;
2000148c:	2300      	movs	r3, #0
2000148e:	60fb      	str	r3, [r7, #12]
	s_command.DummyCycles = 0x4; //moze 4?
20001490:	2304      	movs	r3, #4
20001492:	61fb      	str	r3, [r7, #28]

	sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
20001494:	2300      	movs	r3, #0
20001496:	607b      	str	r3, [r7, #4]

	if (HAL_QSPI_MemoryMapped(&hqspi, &s_command, &sMemMappedCfg) != HAL_OK) {
20001498:	463a      	mov	r2, r7
2000149a:	f107 0308 	add.w	r3, r7, #8
2000149e:	4619      	mov	r1, r3
200014a0:	4806      	ldr	r0, [pc, #24]	; (200014bc <FLASH_QSPI_EnableMemoryMappedMode+0x70>)
200014a2:	f00b f825 	bl	2000c4f0 <HAL_QSPI_MemoryMapped>
200014a6:	4603      	mov	r3, r0
200014a8:	2b00      	cmp	r3, #0
200014aa:	d001      	beq.n	200014b0 <FLASH_QSPI_EnableMemoryMappedMode+0x64>
		return HAL_ERROR;
200014ac:	2301      	movs	r3, #1
200014ae:	e000      	b.n	200014b2 <FLASH_QSPI_EnableMemoryMappedMode+0x66>
	}
	return HAL_OK;
200014b0:	2300      	movs	r3, #0
}
200014b2:	4618      	mov	r0, r3
200014b4:	3740      	adds	r7, #64	; 0x40
200014b6:	46bd      	mov	sp, r7
200014b8:	bd80      	pop	{r7, pc}
200014ba:	bf00      	nop
200014bc:	200004a4 	.word	0x200004a4

200014c0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
200014c0:	b480      	push	{r7}
200014c2:	b083      	sub	sp, #12
200014c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
200014c6:	4b0f      	ldr	r3, [pc, #60]	; (20001504 <MX_GPIO_Init+0x44>)
200014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200014ca:	4a0e      	ldr	r2, [pc, #56]	; (20001504 <MX_GPIO_Init+0x44>)
200014cc:	f043 0320 	orr.w	r3, r3, #32
200014d0:	6313      	str	r3, [r2, #48]	; 0x30
200014d2:	4b0c      	ldr	r3, [pc, #48]	; (20001504 <MX_GPIO_Init+0x44>)
200014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200014d6:	f003 0320 	and.w	r3, r3, #32
200014da:	607b      	str	r3, [r7, #4]
200014dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
200014de:	4b09      	ldr	r3, [pc, #36]	; (20001504 <MX_GPIO_Init+0x44>)
200014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200014e2:	4a08      	ldr	r2, [pc, #32]	; (20001504 <MX_GPIO_Init+0x44>)
200014e4:	f043 0302 	orr.w	r3, r3, #2
200014e8:	6313      	str	r3, [r2, #48]	; 0x30
200014ea:	4b06      	ldr	r3, [pc, #24]	; (20001504 <MX_GPIO_Init+0x44>)
200014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200014ee:	f003 0302 	and.w	r3, r3, #2
200014f2:	603b      	str	r3, [r7, #0]
200014f4:	683b      	ldr	r3, [r7, #0]

}
200014f6:	bf00      	nop
200014f8:	370c      	adds	r7, #12
200014fa:	46bd      	mov	sp, r7
200014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
20001500:	4770      	bx	lr
20001502:	bf00      	nop
20001504:	40023800 	.word	0x40023800

20001508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
20001508:	b580      	push	{r7, lr}
2000150a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
2000150c:	f000 fb99 	bl	20001c42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
20001510:	f000 f806 	bl	20001520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
20001514:	f7ff ffd4 	bl	200014c0 <MX_GPIO_Init>
  MX_QUADSPI_Init();
20001518:	f000 f878 	bl	2000160c <MX_QUADSPI_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
2000151c:	e7fe      	b.n	2000151c <main+0x14>
	...

20001520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
20001520:	b580      	push	{r7, lr}
20001522:	b094      	sub	sp, #80	; 0x50
20001524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
20001526:	f107 031c 	add.w	r3, r7, #28
2000152a:	2234      	movs	r2, #52	; 0x34
2000152c:	2100      	movs	r1, #0
2000152e:	4618      	mov	r0, r3
20001530:	f00d fb76 	bl	2000ec20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
20001534:	f107 0308 	add.w	r3, r7, #8
20001538:	2200      	movs	r2, #0
2000153a:	601a      	str	r2, [r3, #0]
2000153c:	605a      	str	r2, [r3, #4]
2000153e:	609a      	str	r2, [r3, #8]
20001540:	60da      	str	r2, [r3, #12]
20001542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
20001544:	4b2c      	ldr	r3, [pc, #176]	; (200015f8 <SystemClock_Config+0xd8>)
20001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001548:	4a2b      	ldr	r2, [pc, #172]	; (200015f8 <SystemClock_Config+0xd8>)
2000154a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000154e:	6413      	str	r3, [r2, #64]	; 0x40
20001550:	4b29      	ldr	r3, [pc, #164]	; (200015f8 <SystemClock_Config+0xd8>)
20001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20001558:	607b      	str	r3, [r7, #4]
2000155a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
2000155c:	4b27      	ldr	r3, [pc, #156]	; (200015fc <SystemClock_Config+0xdc>)
2000155e:	681b      	ldr	r3, [r3, #0]
20001560:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
20001564:	4a25      	ldr	r2, [pc, #148]	; (200015fc <SystemClock_Config+0xdc>)
20001566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2000156a:	6013      	str	r3, [r2, #0]
2000156c:	4b23      	ldr	r3, [pc, #140]	; (200015fc <SystemClock_Config+0xdc>)
2000156e:	681b      	ldr	r3, [r3, #0]
20001570:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
20001574:	603b      	str	r3, [r7, #0]
20001576:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
20001578:	2302      	movs	r3, #2
2000157a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
2000157c:	2301      	movs	r3, #1
2000157e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
20001580:	2310      	movs	r3, #16
20001582:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
20001584:	2302      	movs	r3, #2
20001586:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
20001588:	2300      	movs	r3, #0
2000158a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
2000158c:	2308      	movs	r3, #8
2000158e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 108;
20001590:	236c      	movs	r3, #108	; 0x6c
20001592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
20001594:	2302      	movs	r3, #2
20001596:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
20001598:	2302      	movs	r3, #2
2000159a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
2000159c:	2302      	movs	r3, #2
2000159e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
200015a0:	f107 031c 	add.w	r3, r7, #28
200015a4:	4618      	mov	r0, r3
200015a6:	f00b fd57 	bl	2000d058 <HAL_RCC_OscConfig>
200015aa:	4603      	mov	r3, r0
200015ac:	2b00      	cmp	r3, #0
200015ae:	d001      	beq.n	200015b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
200015b0:	f000 f826 	bl	20001600 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
200015b4:	f009 fde4 	bl	2000b180 <HAL_PWREx_EnableOverDrive>
200015b8:	4603      	mov	r3, r0
200015ba:	2b00      	cmp	r3, #0
200015bc:	d001      	beq.n	200015c2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
200015be:	f000 f81f 	bl	20001600 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
200015c2:	230f      	movs	r3, #15
200015c4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
200015c6:	2302      	movs	r3, #2
200015c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
200015ca:	2300      	movs	r3, #0
200015cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
200015ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
200015d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
200015d4:	2300      	movs	r3, #0
200015d6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
200015d8:	f107 0308 	add.w	r3, r7, #8
200015dc:	2103      	movs	r1, #3
200015de:	4618      	mov	r0, r3
200015e0:	f00b ffe8 	bl	2000d5b4 <HAL_RCC_ClockConfig>
200015e4:	4603      	mov	r3, r0
200015e6:	2b00      	cmp	r3, #0
200015e8:	d001      	beq.n	200015ee <SystemClock_Config+0xce>
  {
    Error_Handler();
200015ea:	f000 f809 	bl	20001600 <Error_Handler>
  }
}
200015ee:	bf00      	nop
200015f0:	3750      	adds	r7, #80	; 0x50
200015f2:	46bd      	mov	sp, r7
200015f4:	bd80      	pop	{r7, pc}
200015f6:	bf00      	nop
200015f8:	40023800 	.word	0x40023800
200015fc:	40007000 	.word	0x40007000

20001600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
20001600:	b480      	push	{r7}
20001602:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
20001604:	b672      	cpsid	i
}
20001606:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
20001608:	e7fe      	b.n	20001608 <Error_Handler+0x8>
	...

2000160c <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
2000160c:	b580      	push	{r7, lr}
2000160e:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
20001610:	4b12      	ldr	r3, [pc, #72]	; (2000165c <MX_QUADSPI_Init+0x50>)
20001612:	4a13      	ldr	r2, [pc, #76]	; (20001660 <MX_QUADSPI_Init+0x54>)
20001614:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 7;
20001616:	4b11      	ldr	r3, [pc, #68]	; (2000165c <MX_QUADSPI_Init+0x50>)
20001618:	2207      	movs	r2, #7
2000161a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
2000161c:	4b0f      	ldr	r3, [pc, #60]	; (2000165c <MX_QUADSPI_Init+0x50>)
2000161e:	2201      	movs	r2, #1
20001620:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
20001622:	4b0e      	ldr	r3, [pc, #56]	; (2000165c <MX_QUADSPI_Init+0x50>)
20001624:	2210      	movs	r2, #16
20001626:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
20001628:	4b0c      	ldr	r3, [pc, #48]	; (2000165c <MX_QUADSPI_Init+0x50>)
2000162a:	2217      	movs	r2, #23
2000162c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
2000162e:	4b0b      	ldr	r3, [pc, #44]	; (2000165c <MX_QUADSPI_Init+0x50>)
20001630:	f44f 62a0 	mov.w	r2, #1280	; 0x500
20001634:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
20001636:	4b09      	ldr	r3, [pc, #36]	; (2000165c <MX_QUADSPI_Init+0x50>)
20001638:	2200      	movs	r2, #0
2000163a:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
2000163c:	4b07      	ldr	r3, [pc, #28]	; (2000165c <MX_QUADSPI_Init+0x50>)
2000163e:	2200      	movs	r2, #0
20001640:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
20001642:	4b06      	ldr	r3, [pc, #24]	; (2000165c <MX_QUADSPI_Init+0x50>)
20001644:	2200      	movs	r2, #0
20001646:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
20001648:	4804      	ldr	r0, [pc, #16]	; (2000165c <MX_QUADSPI_Init+0x50>)
2000164a:	f009 ff27 	bl	2000b49c <HAL_QSPI_Init>
2000164e:	4603      	mov	r3, r0
20001650:	2b00      	cmp	r3, #0
20001652:	d001      	beq.n	20001658 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
20001654:	f7ff ffd4 	bl	20001600 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
20001658:	bf00      	nop
2000165a:	bd80      	pop	{r7, pc}
2000165c:	200004a4 	.word	0x200004a4
20001660:	a0001000 	.word	0xa0001000

20001664 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
20001664:	b580      	push	{r7, lr}
20001666:	b08a      	sub	sp, #40	; 0x28
20001668:	af00      	add	r7, sp, #0
2000166a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
2000166c:	f107 0314 	add.w	r3, r7, #20
20001670:	2200      	movs	r2, #0
20001672:	601a      	str	r2, [r3, #0]
20001674:	605a      	str	r2, [r3, #4]
20001676:	609a      	str	r2, [r3, #8]
20001678:	60da      	str	r2, [r3, #12]
2000167a:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
2000167c:	687b      	ldr	r3, [r7, #4]
2000167e:	681b      	ldr	r3, [r3, #0]
20001680:	4a35      	ldr	r2, [pc, #212]	; (20001758 <HAL_QSPI_MspInit+0xf4>)
20001682:	4293      	cmp	r3, r2
20001684:	d164      	bne.n	20001750 <HAL_QSPI_MspInit+0xec>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
20001686:	4b35      	ldr	r3, [pc, #212]	; (2000175c <HAL_QSPI_MspInit+0xf8>)
20001688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000168a:	4a34      	ldr	r2, [pc, #208]	; (2000175c <HAL_QSPI_MspInit+0xf8>)
2000168c:	f043 0302 	orr.w	r3, r3, #2
20001690:	6393      	str	r3, [r2, #56]	; 0x38
20001692:	4b32      	ldr	r3, [pc, #200]	; (2000175c <HAL_QSPI_MspInit+0xf8>)
20001694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001696:	f003 0302 	and.w	r3, r3, #2
2000169a:	613b      	str	r3, [r7, #16]
2000169c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
2000169e:	4b2f      	ldr	r3, [pc, #188]	; (2000175c <HAL_QSPI_MspInit+0xf8>)
200016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200016a2:	4a2e      	ldr	r2, [pc, #184]	; (2000175c <HAL_QSPI_MspInit+0xf8>)
200016a4:	f043 0320 	orr.w	r3, r3, #32
200016a8:	6313      	str	r3, [r2, #48]	; 0x30
200016aa:	4b2c      	ldr	r3, [pc, #176]	; (2000175c <HAL_QSPI_MspInit+0xf8>)
200016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200016ae:	f003 0320 	and.w	r3, r3, #32
200016b2:	60fb      	str	r3, [r7, #12]
200016b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
200016b6:	4b29      	ldr	r3, [pc, #164]	; (2000175c <HAL_QSPI_MspInit+0xf8>)
200016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200016ba:	4a28      	ldr	r2, [pc, #160]	; (2000175c <HAL_QSPI_MspInit+0xf8>)
200016bc:	f043 0302 	orr.w	r3, r3, #2
200016c0:	6313      	str	r3, [r2, #48]	; 0x30
200016c2:	4b26      	ldr	r3, [pc, #152]	; (2000175c <HAL_QSPI_MspInit+0xf8>)
200016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200016c6:	f003 0302 	and.w	r3, r3, #2
200016ca:	60bb      	str	r3, [r7, #8]
200016cc:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
200016ce:	23c0      	movs	r3, #192	; 0xc0
200016d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
200016d2:	2302      	movs	r3, #2
200016d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
200016d6:	2300      	movs	r3, #0
200016d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
200016da:	2303      	movs	r3, #3
200016dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
200016de:	2309      	movs	r3, #9
200016e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
200016e2:	f107 0314 	add.w	r3, r7, #20
200016e6:	4619      	mov	r1, r3
200016e8:	481d      	ldr	r0, [pc, #116]	; (20001760 <HAL_QSPI_MspInit+0xfc>)
200016ea:	f004 f8c7 	bl	2000587c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
200016ee:	f44f 7340 	mov.w	r3, #768	; 0x300
200016f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
200016f4:	2302      	movs	r3, #2
200016f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
200016f8:	2300      	movs	r3, #0
200016fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
200016fc:	2303      	movs	r3, #3
200016fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
20001700:	230a      	movs	r3, #10
20001702:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
20001704:	f107 0314 	add.w	r3, r7, #20
20001708:	4619      	mov	r1, r3
2000170a:	4815      	ldr	r0, [pc, #84]	; (20001760 <HAL_QSPI_MspInit+0xfc>)
2000170c:	f004 f8b6 	bl	2000587c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
20001710:	2304      	movs	r3, #4
20001712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20001714:	2302      	movs	r3, #2
20001716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20001718:	2300      	movs	r3, #0
2000171a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2000171c:	2303      	movs	r3, #3
2000171e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
20001720:	2309      	movs	r3, #9
20001722:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
20001724:	f107 0314 	add.w	r3, r7, #20
20001728:	4619      	mov	r1, r3
2000172a:	480e      	ldr	r0, [pc, #56]	; (20001764 <HAL_QSPI_MspInit+0x100>)
2000172c:	f004 f8a6 	bl	2000587c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
20001730:	2340      	movs	r3, #64	; 0x40
20001732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20001734:	2302      	movs	r3, #2
20001736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20001738:	2300      	movs	r3, #0
2000173a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2000173c:	2303      	movs	r3, #3
2000173e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
20001740:	230a      	movs	r3, #10
20001742:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
20001744:	f107 0314 	add.w	r3, r7, #20
20001748:	4619      	mov	r1, r3
2000174a:	4806      	ldr	r0, [pc, #24]	; (20001764 <HAL_QSPI_MspInit+0x100>)
2000174c:	f004 f896 	bl	2000587c <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
20001750:	bf00      	nop
20001752:	3728      	adds	r7, #40	; 0x28
20001754:	46bd      	mov	sp, r7
20001756:	bd80      	pop	{r7, pc}
20001758:	a0001000 	.word	0xa0001000
2000175c:	40023800 	.word	0x40023800
20001760:	40021400 	.word	0x40021400
20001764:	40020400 	.word	0x40020400

20001768 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
20001768:	b580      	push	{r7, lr}
2000176a:	b082      	sub	sp, #8
2000176c:	af00      	add	r7, sp, #0
2000176e:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
20001770:	687b      	ldr	r3, [r7, #4]
20001772:	681b      	ldr	r3, [r3, #0]
20001774:	4a0a      	ldr	r2, [pc, #40]	; (200017a0 <HAL_QSPI_MspDeInit+0x38>)
20001776:	4293      	cmp	r3, r2
20001778:	d10e      	bne.n	20001798 <HAL_QSPI_MspDeInit+0x30>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
2000177a:	4b0a      	ldr	r3, [pc, #40]	; (200017a4 <HAL_QSPI_MspDeInit+0x3c>)
2000177c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000177e:	4a09      	ldr	r2, [pc, #36]	; (200017a4 <HAL_QSPI_MspDeInit+0x3c>)
20001780:	f023 0302 	bic.w	r3, r3, #2
20001784:	6393      	str	r3, [r2, #56]	; 0x38
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
20001786:	f44f 7170 	mov.w	r1, #960	; 0x3c0
2000178a:	4807      	ldr	r0, [pc, #28]	; (200017a8 <HAL_QSPI_MspDeInit+0x40>)
2000178c:	f004 fa22 	bl	20005bd4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2|GPIO_PIN_6);
20001790:	2144      	movs	r1, #68	; 0x44
20001792:	4806      	ldr	r0, [pc, #24]	; (200017ac <HAL_QSPI_MspDeInit+0x44>)
20001794:	f004 fa1e 	bl	20005bd4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
20001798:	bf00      	nop
2000179a:	3708      	adds	r7, #8
2000179c:	46bd      	mov	sp, r7
2000179e:	bd80      	pop	{r7, pc}
200017a0:	a0001000 	.word	0xa0001000
200017a4:	40023800 	.word	0x40023800
200017a8:	40021400 	.word	0x40021400
200017ac:	40020400 	.word	0x40020400

200017b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
200017b0:	b480      	push	{r7}
200017b2:	b083      	sub	sp, #12
200017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
200017b6:	4b0f      	ldr	r3, [pc, #60]	; (200017f4 <HAL_MspInit+0x44>)
200017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200017ba:	4a0e      	ldr	r2, [pc, #56]	; (200017f4 <HAL_MspInit+0x44>)
200017bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
200017c0:	6413      	str	r3, [r2, #64]	; 0x40
200017c2:	4b0c      	ldr	r3, [pc, #48]	; (200017f4 <HAL_MspInit+0x44>)
200017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200017c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
200017ca:	607b      	str	r3, [r7, #4]
200017cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
200017ce:	4b09      	ldr	r3, [pc, #36]	; (200017f4 <HAL_MspInit+0x44>)
200017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
200017d2:	4a08      	ldr	r2, [pc, #32]	; (200017f4 <HAL_MspInit+0x44>)
200017d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
200017d8:	6453      	str	r3, [r2, #68]	; 0x44
200017da:	4b06      	ldr	r3, [pc, #24]	; (200017f4 <HAL_MspInit+0x44>)
200017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
200017de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
200017e2:	603b      	str	r3, [r7, #0]
200017e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
200017e6:	bf00      	nop
200017e8:	370c      	adds	r7, #12
200017ea:	46bd      	mov	sp, r7
200017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
200017f0:	4770      	bx	lr
200017f2:	bf00      	nop
200017f4:	40023800 	.word	0x40023800

200017f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
200017f8:	b480      	push	{r7}
200017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
200017fc:	e7fe      	b.n	200017fc <NMI_Handler+0x4>

200017fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
200017fe:	b480      	push	{r7}
20001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
20001802:	e7fe      	b.n	20001802 <HardFault_Handler+0x4>

20001804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
20001804:	b480      	push	{r7}
20001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
20001808:	e7fe      	b.n	20001808 <MemManage_Handler+0x4>

2000180a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
2000180a:	b480      	push	{r7}
2000180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
2000180e:	e7fe      	b.n	2000180e <BusFault_Handler+0x4>

20001810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
20001810:	b480      	push	{r7}
20001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
20001814:	e7fe      	b.n	20001814 <UsageFault_Handler+0x4>

20001816 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
20001816:	b480      	push	{r7}
20001818:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
2000181a:	bf00      	nop
2000181c:	46bd      	mov	sp, r7
2000181e:	f85d 7b04 	ldr.w	r7, [sp], #4
20001822:	4770      	bx	lr

20001824 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
20001824:	b480      	push	{r7}
20001826:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
20001828:	bf00      	nop
2000182a:	46bd      	mov	sp, r7
2000182c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001830:	4770      	bx	lr

20001832 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
20001832:	b480      	push	{r7}
20001834:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
20001836:	bf00      	nop
20001838:	46bd      	mov	sp, r7
2000183a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000183e:	4770      	bx	lr

20001840 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
20001840:	b580      	push	{r7, lr}
20001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
20001844:	f000 fa74 	bl	20001d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
20001848:	bf00      	nop
2000184a:	bd80      	pop	{r7, pc}

2000184c <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
2000184c:	b480      	push	{r7}
2000184e:	af00      	add	r7, sp, #0
}
20001850:	bf00      	nop
20001852:	46bd      	mov	sp, r7
20001854:	f85d 7b04 	ldr.w	r7, [sp], #4
20001858:	4770      	bx	lr

2000185a <_getpid>:

int _getpid(void)
{
2000185a:	b480      	push	{r7}
2000185c:	af00      	add	r7, sp, #0
	return 1;
2000185e:	2301      	movs	r3, #1
}
20001860:	4618      	mov	r0, r3
20001862:	46bd      	mov	sp, r7
20001864:	f85d 7b04 	ldr.w	r7, [sp], #4
20001868:	4770      	bx	lr

2000186a <_kill>:

int _kill(int pid, int sig)
{
2000186a:	b580      	push	{r7, lr}
2000186c:	b082      	sub	sp, #8
2000186e:	af00      	add	r7, sp, #0
20001870:	6078      	str	r0, [r7, #4]
20001872:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
20001874:	f00d f996 	bl	2000eba4 <__errno>
20001878:	4603      	mov	r3, r0
2000187a:	2216      	movs	r2, #22
2000187c:	601a      	str	r2, [r3, #0]
	return -1;
2000187e:	f04f 33ff 	mov.w	r3, #4294967295
}
20001882:	4618      	mov	r0, r3
20001884:	3708      	adds	r7, #8
20001886:	46bd      	mov	sp, r7
20001888:	bd80      	pop	{r7, pc}

2000188a <_exit>:

void _exit (int status)
{
2000188a:	b580      	push	{r7, lr}
2000188c:	b082      	sub	sp, #8
2000188e:	af00      	add	r7, sp, #0
20001890:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
20001892:	f04f 31ff 	mov.w	r1, #4294967295
20001896:	6878      	ldr	r0, [r7, #4]
20001898:	f7ff ffe7 	bl	2000186a <_kill>
	while (1) {}		/* Make sure we hang here */
2000189c:	e7fe      	b.n	2000189c <_exit+0x12>

2000189e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
2000189e:	b580      	push	{r7, lr}
200018a0:	b086      	sub	sp, #24
200018a2:	af00      	add	r7, sp, #0
200018a4:	60f8      	str	r0, [r7, #12]
200018a6:	60b9      	str	r1, [r7, #8]
200018a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
200018aa:	2300      	movs	r3, #0
200018ac:	617b      	str	r3, [r7, #20]
200018ae:	e00a      	b.n	200018c6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
200018b0:	f3af 8000 	nop.w
200018b4:	4601      	mov	r1, r0
200018b6:	68bb      	ldr	r3, [r7, #8]
200018b8:	1c5a      	adds	r2, r3, #1
200018ba:	60ba      	str	r2, [r7, #8]
200018bc:	b2ca      	uxtb	r2, r1
200018be:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
200018c0:	697b      	ldr	r3, [r7, #20]
200018c2:	3301      	adds	r3, #1
200018c4:	617b      	str	r3, [r7, #20]
200018c6:	697a      	ldr	r2, [r7, #20]
200018c8:	687b      	ldr	r3, [r7, #4]
200018ca:	429a      	cmp	r2, r3
200018cc:	dbf0      	blt.n	200018b0 <_read+0x12>
	}

return len;
200018ce:	687b      	ldr	r3, [r7, #4]
}
200018d0:	4618      	mov	r0, r3
200018d2:	3718      	adds	r7, #24
200018d4:	46bd      	mov	sp, r7
200018d6:	bd80      	pop	{r7, pc}

200018d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
200018d8:	b580      	push	{r7, lr}
200018da:	b086      	sub	sp, #24
200018dc:	af00      	add	r7, sp, #0
200018de:	60f8      	str	r0, [r7, #12]
200018e0:	60b9      	str	r1, [r7, #8]
200018e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
200018e4:	2300      	movs	r3, #0
200018e6:	617b      	str	r3, [r7, #20]
200018e8:	e009      	b.n	200018fe <_write+0x26>
	{
		__io_putchar(*ptr++);
200018ea:	68bb      	ldr	r3, [r7, #8]
200018ec:	1c5a      	adds	r2, r3, #1
200018ee:	60ba      	str	r2, [r7, #8]
200018f0:	781b      	ldrb	r3, [r3, #0]
200018f2:	4618      	mov	r0, r3
200018f4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
200018f8:	697b      	ldr	r3, [r7, #20]
200018fa:	3301      	adds	r3, #1
200018fc:	617b      	str	r3, [r7, #20]
200018fe:	697a      	ldr	r2, [r7, #20]
20001900:	687b      	ldr	r3, [r7, #4]
20001902:	429a      	cmp	r2, r3
20001904:	dbf1      	blt.n	200018ea <_write+0x12>
	}
	return len;
20001906:	687b      	ldr	r3, [r7, #4]
}
20001908:	4618      	mov	r0, r3
2000190a:	3718      	adds	r7, #24
2000190c:	46bd      	mov	sp, r7
2000190e:	bd80      	pop	{r7, pc}

20001910 <_close>:

int _close(int file)
{
20001910:	b480      	push	{r7}
20001912:	b083      	sub	sp, #12
20001914:	af00      	add	r7, sp, #0
20001916:	6078      	str	r0, [r7, #4]
	return -1;
20001918:	f04f 33ff 	mov.w	r3, #4294967295
}
2000191c:	4618      	mov	r0, r3
2000191e:	370c      	adds	r7, #12
20001920:	46bd      	mov	sp, r7
20001922:	f85d 7b04 	ldr.w	r7, [sp], #4
20001926:	4770      	bx	lr

20001928 <_fstat>:


int _fstat(int file, struct stat *st)
{
20001928:	b480      	push	{r7}
2000192a:	b083      	sub	sp, #12
2000192c:	af00      	add	r7, sp, #0
2000192e:	6078      	str	r0, [r7, #4]
20001930:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
20001932:	683b      	ldr	r3, [r7, #0]
20001934:	f44f 5200 	mov.w	r2, #8192	; 0x2000
20001938:	605a      	str	r2, [r3, #4]
	return 0;
2000193a:	2300      	movs	r3, #0
}
2000193c:	4618      	mov	r0, r3
2000193e:	370c      	adds	r7, #12
20001940:	46bd      	mov	sp, r7
20001942:	f85d 7b04 	ldr.w	r7, [sp], #4
20001946:	4770      	bx	lr

20001948 <_isatty>:

int _isatty(int file)
{
20001948:	b480      	push	{r7}
2000194a:	b083      	sub	sp, #12
2000194c:	af00      	add	r7, sp, #0
2000194e:	6078      	str	r0, [r7, #4]
	return 1;
20001950:	2301      	movs	r3, #1
}
20001952:	4618      	mov	r0, r3
20001954:	370c      	adds	r7, #12
20001956:	46bd      	mov	sp, r7
20001958:	f85d 7b04 	ldr.w	r7, [sp], #4
2000195c:	4770      	bx	lr

2000195e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
2000195e:	b480      	push	{r7}
20001960:	b085      	sub	sp, #20
20001962:	af00      	add	r7, sp, #0
20001964:	60f8      	str	r0, [r7, #12]
20001966:	60b9      	str	r1, [r7, #8]
20001968:	607a      	str	r2, [r7, #4]
	return 0;
2000196a:	2300      	movs	r3, #0
}
2000196c:	4618      	mov	r0, r3
2000196e:	3714      	adds	r7, #20
20001970:	46bd      	mov	sp, r7
20001972:	f85d 7b04 	ldr.w	r7, [sp], #4
20001976:	4770      	bx	lr

20001978 <_open>:

int _open(char *path, int flags, ...)
{
20001978:	b40e      	push	{r1, r2, r3}
2000197a:	b480      	push	{r7}
2000197c:	b082      	sub	sp, #8
2000197e:	af00      	add	r7, sp, #0
20001980:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
20001982:	f04f 33ff 	mov.w	r3, #4294967295
}
20001986:	4618      	mov	r0, r3
20001988:	3708      	adds	r7, #8
2000198a:	46bd      	mov	sp, r7
2000198c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001990:	b003      	add	sp, #12
20001992:	4770      	bx	lr

20001994 <_wait>:

int _wait(int *status)
{
20001994:	b580      	push	{r7, lr}
20001996:	b082      	sub	sp, #8
20001998:	af00      	add	r7, sp, #0
2000199a:	6078      	str	r0, [r7, #4]
	errno = ECHILD;
2000199c:	f00d f902 	bl	2000eba4 <__errno>
200019a0:	4603      	mov	r3, r0
200019a2:	220a      	movs	r2, #10
200019a4:	601a      	str	r2, [r3, #0]
	return -1;
200019a6:	f04f 33ff 	mov.w	r3, #4294967295
}
200019aa:	4618      	mov	r0, r3
200019ac:	3708      	adds	r7, #8
200019ae:	46bd      	mov	sp, r7
200019b0:	bd80      	pop	{r7, pc}

200019b2 <_unlink>:

int _unlink(char *name)
{
200019b2:	b580      	push	{r7, lr}
200019b4:	b082      	sub	sp, #8
200019b6:	af00      	add	r7, sp, #0
200019b8:	6078      	str	r0, [r7, #4]
	errno = ENOENT;
200019ba:	f00d f8f3 	bl	2000eba4 <__errno>
200019be:	4603      	mov	r3, r0
200019c0:	2202      	movs	r2, #2
200019c2:	601a      	str	r2, [r3, #0]
	return -1;
200019c4:	f04f 33ff 	mov.w	r3, #4294967295
}
200019c8:	4618      	mov	r0, r3
200019ca:	3708      	adds	r7, #8
200019cc:	46bd      	mov	sp, r7
200019ce:	bd80      	pop	{r7, pc}

200019d0 <_times>:

int _times(struct tms *buf)
{
200019d0:	b480      	push	{r7}
200019d2:	b083      	sub	sp, #12
200019d4:	af00      	add	r7, sp, #0
200019d6:	6078      	str	r0, [r7, #4]
	return -1;
200019d8:	f04f 33ff 	mov.w	r3, #4294967295
}
200019dc:	4618      	mov	r0, r3
200019de:	370c      	adds	r7, #12
200019e0:	46bd      	mov	sp, r7
200019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
200019e6:	4770      	bx	lr

200019e8 <_stat>:

int _stat(char *file, struct stat *st)
{
200019e8:	b480      	push	{r7}
200019ea:	b083      	sub	sp, #12
200019ec:	af00      	add	r7, sp, #0
200019ee:	6078      	str	r0, [r7, #4]
200019f0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
200019f2:	683b      	ldr	r3, [r7, #0]
200019f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
200019f8:	605a      	str	r2, [r3, #4]
	return 0;
200019fa:	2300      	movs	r3, #0
}
200019fc:	4618      	mov	r0, r3
200019fe:	370c      	adds	r7, #12
20001a00:	46bd      	mov	sp, r7
20001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
20001a06:	4770      	bx	lr

20001a08 <_link>:

int _link(char *old, char *new)
{
20001a08:	b580      	push	{r7, lr}
20001a0a:	b082      	sub	sp, #8
20001a0c:	af00      	add	r7, sp, #0
20001a0e:	6078      	str	r0, [r7, #4]
20001a10:	6039      	str	r1, [r7, #0]
	errno = EMLINK;
20001a12:	f00d f8c7 	bl	2000eba4 <__errno>
20001a16:	4603      	mov	r3, r0
20001a18:	221f      	movs	r2, #31
20001a1a:	601a      	str	r2, [r3, #0]
	return -1;
20001a1c:	f04f 33ff 	mov.w	r3, #4294967295
}
20001a20:	4618      	mov	r0, r3
20001a22:	3708      	adds	r7, #8
20001a24:	46bd      	mov	sp, r7
20001a26:	bd80      	pop	{r7, pc}

20001a28 <_fork>:

int _fork(void)
{
20001a28:	b580      	push	{r7, lr}
20001a2a:	af00      	add	r7, sp, #0
	errno = EAGAIN;
20001a2c:	f00d f8ba 	bl	2000eba4 <__errno>
20001a30:	4603      	mov	r3, r0
20001a32:	220b      	movs	r2, #11
20001a34:	601a      	str	r2, [r3, #0]
	return -1;
20001a36:	f04f 33ff 	mov.w	r3, #4294967295
}
20001a3a:	4618      	mov	r0, r3
20001a3c:	bd80      	pop	{r7, pc}

20001a3e <_execve>:

int _execve(char *name, char **argv, char **env)
{
20001a3e:	b580      	push	{r7, lr}
20001a40:	b084      	sub	sp, #16
20001a42:	af00      	add	r7, sp, #0
20001a44:	60f8      	str	r0, [r7, #12]
20001a46:	60b9      	str	r1, [r7, #8]
20001a48:	607a      	str	r2, [r7, #4]
	errno = ENOMEM;
20001a4a:	f00d f8ab 	bl	2000eba4 <__errno>
20001a4e:	4603      	mov	r3, r0
20001a50:	220c      	movs	r2, #12
20001a52:	601a      	str	r2, [r3, #0]
	return -1;
20001a54:	f04f 33ff 	mov.w	r3, #4294967295
}
20001a58:	4618      	mov	r0, r3
20001a5a:	3710      	adds	r7, #16
20001a5c:	46bd      	mov	sp, r7
20001a5e:	bd80      	pop	{r7, pc}

20001a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
20001a60:	b580      	push	{r7, lr}
20001a62:	b086      	sub	sp, #24
20001a64:	af00      	add	r7, sp, #0
20001a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
20001a68:	4a14      	ldr	r2, [pc, #80]	; (20001abc <_sbrk+0x5c>)
20001a6a:	4b15      	ldr	r3, [pc, #84]	; (20001ac0 <_sbrk+0x60>)
20001a6c:	1ad3      	subs	r3, r2, r3
20001a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
20001a70:	697b      	ldr	r3, [r7, #20]
20001a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
20001a74:	4b13      	ldr	r3, [pc, #76]	; (20001ac4 <_sbrk+0x64>)
20001a76:	681b      	ldr	r3, [r3, #0]
20001a78:	2b00      	cmp	r3, #0
20001a7a:	d102      	bne.n	20001a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
20001a7c:	4b11      	ldr	r3, [pc, #68]	; (20001ac4 <_sbrk+0x64>)
20001a7e:	4a12      	ldr	r2, [pc, #72]	; (20001ac8 <_sbrk+0x68>)
20001a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
20001a82:	4b10      	ldr	r3, [pc, #64]	; (20001ac4 <_sbrk+0x64>)
20001a84:	681a      	ldr	r2, [r3, #0]
20001a86:	687b      	ldr	r3, [r7, #4]
20001a88:	4413      	add	r3, r2
20001a8a:	693a      	ldr	r2, [r7, #16]
20001a8c:	429a      	cmp	r2, r3
20001a8e:	d207      	bcs.n	20001aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
20001a90:	f00d f888 	bl	2000eba4 <__errno>
20001a94:	4603      	mov	r3, r0
20001a96:	220c      	movs	r2, #12
20001a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
20001a9a:	f04f 33ff 	mov.w	r3, #4294967295
20001a9e:	e009      	b.n	20001ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
20001aa0:	4b08      	ldr	r3, [pc, #32]	; (20001ac4 <_sbrk+0x64>)
20001aa2:	681b      	ldr	r3, [r3, #0]
20001aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
20001aa6:	4b07      	ldr	r3, [pc, #28]	; (20001ac4 <_sbrk+0x64>)
20001aa8:	681a      	ldr	r2, [r3, #0]
20001aaa:	687b      	ldr	r3, [r7, #4]
20001aac:	4413      	add	r3, r2
20001aae:	4a05      	ldr	r2, [pc, #20]	; (20001ac4 <_sbrk+0x64>)
20001ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
20001ab2:	68fb      	ldr	r3, [r7, #12]
}
20001ab4:	4618      	mov	r0, r3
20001ab6:	3718      	adds	r7, #24
20001ab8:	46bd      	mov	sp, r7
20001aba:	bd80      	pop	{r7, pc}
20001abc:	20080004 	.word	0x20080004
20001ac0:	00000400 	.word	0x00000400
20001ac4:	200004a0 	.word	0x200004a0
20001ac8:	2000ed38 	.word	0x2000ed38

20001acc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
20001acc:	b480      	push	{r7}
20001ace:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
20001ad0:	4b06      	ldr	r3, [pc, #24]	; (20001aec <SystemInit+0x20>)
20001ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
20001ad6:	4a05      	ldr	r2, [pc, #20]	; (20001aec <SystemInit+0x20>)
20001ad8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
20001adc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
20001ae0:	bf00      	nop
20001ae2:	46bd      	mov	sp, r7
20001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
20001ae8:	4770      	bx	lr
20001aea:	bf00      	nop
20001aec:	e000ed00 	.word	0xe000ed00

20001af0 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
20001af0:	b480      	push	{r7}
20001af2:	b087      	sub	sp, #28
20001af4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
20001af6:	2300      	movs	r3, #0
20001af8:	613b      	str	r3, [r7, #16]
20001afa:	2300      	movs	r3, #0
20001afc:	617b      	str	r3, [r7, #20]
20001afe:	2302      	movs	r3, #2
20001b00:	60fb      	str	r3, [r7, #12]
20001b02:	2300      	movs	r3, #0
20001b04:	60bb      	str	r3, [r7, #8]
20001b06:	2302      	movs	r3, #2
20001b08:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
20001b0a:	4b34      	ldr	r3, [pc, #208]	; (20001bdc <SystemCoreClockUpdate+0xec>)
20001b0c:	689b      	ldr	r3, [r3, #8]
20001b0e:	f003 030c 	and.w	r3, r3, #12
20001b12:	613b      	str	r3, [r7, #16]

  switch (tmp)
20001b14:	693b      	ldr	r3, [r7, #16]
20001b16:	2b08      	cmp	r3, #8
20001b18:	d011      	beq.n	20001b3e <SystemCoreClockUpdate+0x4e>
20001b1a:	693b      	ldr	r3, [r7, #16]
20001b1c:	2b08      	cmp	r3, #8
20001b1e:	d844      	bhi.n	20001baa <SystemCoreClockUpdate+0xba>
20001b20:	693b      	ldr	r3, [r7, #16]
20001b22:	2b00      	cmp	r3, #0
20001b24:	d003      	beq.n	20001b2e <SystemCoreClockUpdate+0x3e>
20001b26:	693b      	ldr	r3, [r7, #16]
20001b28:	2b04      	cmp	r3, #4
20001b2a:	d004      	beq.n	20001b36 <SystemCoreClockUpdate+0x46>
20001b2c:	e03d      	b.n	20001baa <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
20001b2e:	4b2c      	ldr	r3, [pc, #176]	; (20001be0 <SystemCoreClockUpdate+0xf0>)
20001b30:	4a2c      	ldr	r2, [pc, #176]	; (20001be4 <SystemCoreClockUpdate+0xf4>)
20001b32:	601a      	str	r2, [r3, #0]
      break;
20001b34:	e03d      	b.n	20001bb2 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
20001b36:	4b2a      	ldr	r3, [pc, #168]	; (20001be0 <SystemCoreClockUpdate+0xf0>)
20001b38:	4a2b      	ldr	r2, [pc, #172]	; (20001be8 <SystemCoreClockUpdate+0xf8>)
20001b3a:	601a      	str	r2, [r3, #0]
      break;
20001b3c:	e039      	b.n	20001bb2 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
20001b3e:	4b27      	ldr	r3, [pc, #156]	; (20001bdc <SystemCoreClockUpdate+0xec>)
20001b40:	685b      	ldr	r3, [r3, #4]
20001b42:	0d9b      	lsrs	r3, r3, #22
20001b44:	f003 0301 	and.w	r3, r3, #1
20001b48:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20001b4a:	4b24      	ldr	r3, [pc, #144]	; (20001bdc <SystemCoreClockUpdate+0xec>)
20001b4c:	685b      	ldr	r3, [r3, #4]
20001b4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20001b52:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
20001b54:	68bb      	ldr	r3, [r7, #8]
20001b56:	2b00      	cmp	r3, #0
20001b58:	d00c      	beq.n	20001b74 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
20001b5a:	4a23      	ldr	r2, [pc, #140]	; (20001be8 <SystemCoreClockUpdate+0xf8>)
20001b5c:	687b      	ldr	r3, [r7, #4]
20001b5e:	fbb2 f3f3 	udiv	r3, r2, r3
20001b62:	4a1e      	ldr	r2, [pc, #120]	; (20001bdc <SystemCoreClockUpdate+0xec>)
20001b64:	6852      	ldr	r2, [r2, #4]
20001b66:	0992      	lsrs	r2, r2, #6
20001b68:	f3c2 0208 	ubfx	r2, r2, #0, #9
20001b6c:	fb02 f303 	mul.w	r3, r2, r3
20001b70:	617b      	str	r3, [r7, #20]
20001b72:	e00b      	b.n	20001b8c <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
20001b74:	4a1b      	ldr	r2, [pc, #108]	; (20001be4 <SystemCoreClockUpdate+0xf4>)
20001b76:	687b      	ldr	r3, [r7, #4]
20001b78:	fbb2 f3f3 	udiv	r3, r2, r3
20001b7c:	4a17      	ldr	r2, [pc, #92]	; (20001bdc <SystemCoreClockUpdate+0xec>)
20001b7e:	6852      	ldr	r2, [r2, #4]
20001b80:	0992      	lsrs	r2, r2, #6
20001b82:	f3c2 0208 	ubfx	r2, r2, #0, #9
20001b86:	fb02 f303 	mul.w	r3, r2, r3
20001b8a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
20001b8c:	4b13      	ldr	r3, [pc, #76]	; (20001bdc <SystemCoreClockUpdate+0xec>)
20001b8e:	685b      	ldr	r3, [r3, #4]
20001b90:	0c1b      	lsrs	r3, r3, #16
20001b92:	f003 0303 	and.w	r3, r3, #3
20001b96:	3301      	adds	r3, #1
20001b98:	005b      	lsls	r3, r3, #1
20001b9a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
20001b9c:	697a      	ldr	r2, [r7, #20]
20001b9e:	68fb      	ldr	r3, [r7, #12]
20001ba0:	fbb2 f3f3 	udiv	r3, r2, r3
20001ba4:	4a0e      	ldr	r2, [pc, #56]	; (20001be0 <SystemCoreClockUpdate+0xf0>)
20001ba6:	6013      	str	r3, [r2, #0]
      break;
20001ba8:	e003      	b.n	20001bb2 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
20001baa:	4b0d      	ldr	r3, [pc, #52]	; (20001be0 <SystemCoreClockUpdate+0xf0>)
20001bac:	4a0d      	ldr	r2, [pc, #52]	; (20001be4 <SystemCoreClockUpdate+0xf4>)
20001bae:	601a      	str	r2, [r3, #0]
      break;
20001bb0:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
20001bb2:	4b0a      	ldr	r3, [pc, #40]	; (20001bdc <SystemCoreClockUpdate+0xec>)
20001bb4:	689b      	ldr	r3, [r3, #8]
20001bb6:	091b      	lsrs	r3, r3, #4
20001bb8:	f003 030f 	and.w	r3, r3, #15
20001bbc:	4a0b      	ldr	r2, [pc, #44]	; (20001bec <SystemCoreClockUpdate+0xfc>)
20001bbe:	5cd3      	ldrb	r3, [r2, r3]
20001bc0:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
20001bc2:	4b07      	ldr	r3, [pc, #28]	; (20001be0 <SystemCoreClockUpdate+0xf0>)
20001bc4:	681a      	ldr	r2, [r3, #0]
20001bc6:	693b      	ldr	r3, [r7, #16]
20001bc8:	fa22 f303 	lsr.w	r3, r2, r3
20001bcc:	4a04      	ldr	r2, [pc, #16]	; (20001be0 <SystemCoreClockUpdate+0xf0>)
20001bce:	6013      	str	r3, [r2, #0]
}
20001bd0:	bf00      	nop
20001bd2:	371c      	adds	r7, #28
20001bd4:	46bd      	mov	sp, r7
20001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
20001bda:	4770      	bx	lr
20001bdc:	40023800 	.word	0x40023800
20001be0:	20000410 	.word	0x20000410
20001be4:	00f42400 	.word	0x00f42400
20001be8:	017d7840 	.word	0x017d7840
20001bec:	2000ed14 	.word	0x2000ed14

20001bf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
20001bf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 20001c28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
20001bf4:	480d      	ldr	r0, [pc, #52]	; (20001c2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
20001bf6:	490e      	ldr	r1, [pc, #56]	; (20001c30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
20001bf8:	4a0e      	ldr	r2, [pc, #56]	; (20001c34 <LoopFillZerobss+0x1e>)
  movs r3, #0
20001bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
20001bfc:	e002      	b.n	20001c04 <LoopCopyDataInit>

20001bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
20001bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
20001c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
20001c02:	3304      	adds	r3, #4

20001c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
20001c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
20001c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
20001c08:	d3f9      	bcc.n	20001bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
20001c0a:	4a0b      	ldr	r2, [pc, #44]	; (20001c38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
20001c0c:	4c0b      	ldr	r4, [pc, #44]	; (20001c3c <LoopFillZerobss+0x26>)
  movs r3, #0
20001c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
20001c10:	e001      	b.n	20001c16 <LoopFillZerobss>

20001c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
20001c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
20001c14:	3204      	adds	r2, #4

20001c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
20001c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
20001c18:	d3fb      	bcc.n	20001c12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
20001c1a:	f7ff ff57 	bl	20001acc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
20001c1e:	f00c ffdb 	bl	2000ebd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
20001c22:	f7ff fc71 	bl	20001508 <main>
  bx  lr    
20001c26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
20001c28:	20080004 	.word	0x20080004
  ldr r0, =_sdata
20001c2c:	20000408 	.word	0x20000408
  ldr r1, =_edata
20001c30:	20000480 	.word	0x20000480
  ldr r2, =_sidata
20001c34:	20000408 	.word	0x20000408
  ldr r2, =_sbss
20001c38:	20000480 	.word	0x20000480
  ldr r4, =_ebss
20001c3c:	20000510 	.word	0x20000510

20001c40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
20001c40:	e7fe      	b.n	20001c40 <ADC_IRQHandler>

20001c42 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
20001c42:	b580      	push	{r7, lr}
20001c44:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
20001c46:	2003      	movs	r0, #3
20001c48:	f000 fc06 	bl	20002458 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
20001c4c:	200f      	movs	r0, #15
20001c4e:	f000 f83f 	bl	20001cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
20001c52:	f7ff fdad 	bl	200017b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
20001c56:	2300      	movs	r3, #0
}
20001c58:	4618      	mov	r0, r3
20001c5a:	bd80      	pop	{r7, pc}

20001c5c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
20001c5c:	b580      	push	{r7, lr}
20001c5e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
20001c60:	4b13      	ldr	r3, [pc, #76]	; (20001cb0 <HAL_DeInit+0x54>)
20001c62:	f04f 32ff 	mov.w	r2, #4294967295
20001c66:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
20001c68:	4b11      	ldr	r3, [pc, #68]	; (20001cb0 <HAL_DeInit+0x54>)
20001c6a:	2200      	movs	r2, #0
20001c6c:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
20001c6e:	4b10      	ldr	r3, [pc, #64]	; (20001cb0 <HAL_DeInit+0x54>)
20001c70:	f04f 32ff 	mov.w	r2, #4294967295
20001c74:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
20001c76:	4b0e      	ldr	r3, [pc, #56]	; (20001cb0 <HAL_DeInit+0x54>)
20001c78:	2200      	movs	r2, #0
20001c7a:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
20001c7c:	4b0c      	ldr	r3, [pc, #48]	; (20001cb0 <HAL_DeInit+0x54>)
20001c7e:	f04f 32ff 	mov.w	r2, #4294967295
20001c82:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
20001c84:	4b0a      	ldr	r3, [pc, #40]	; (20001cb0 <HAL_DeInit+0x54>)
20001c86:	2200      	movs	r2, #0
20001c88:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
20001c8a:	4b09      	ldr	r3, [pc, #36]	; (20001cb0 <HAL_DeInit+0x54>)
20001c8c:	f04f 32ff 	mov.w	r2, #4294967295
20001c90:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
20001c92:	4b07      	ldr	r3, [pc, #28]	; (20001cb0 <HAL_DeInit+0x54>)
20001c94:	2200      	movs	r2, #0
20001c96:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
20001c98:	4b05      	ldr	r3, [pc, #20]	; (20001cb0 <HAL_DeInit+0x54>)
20001c9a:	f04f 32ff 	mov.w	r2, #4294967295
20001c9e:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
20001ca0:	4b03      	ldr	r3, [pc, #12]	; (20001cb0 <HAL_DeInit+0x54>)
20001ca2:	2200      	movs	r2, #0
20001ca4:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
20001ca6:	f000 f80c 	bl	20001cc2 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
20001caa:	2300      	movs	r3, #0
}
20001cac:	4618      	mov	r0, r3
20001cae:	bd80      	pop	{r7, pc}
20001cb0:	40023800 	.word	0x40023800
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
20001cb4:	b480      	push	{r7}
20001cb6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
20001cb8:	bf00      	nop
20001cba:	46bd      	mov	sp, r7
20001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
20001cc0:	4770      	bx	lr

20001cc2 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
20001cc2:	b480      	push	{r7}
20001cc4:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
20001cc6:	bf00      	nop
20001cc8:	46bd      	mov	sp, r7
20001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
20001cce:	4770      	bx	lr

20001cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
20001cd0:	b580      	push	{r7, lr}
20001cd2:	b082      	sub	sp, #8
20001cd4:	af00      	add	r7, sp, #0
20001cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
20001cd8:	4b12      	ldr	r3, [pc, #72]	; (20001d24 <HAL_InitTick+0x54>)
20001cda:	681a      	ldr	r2, [r3, #0]
20001cdc:	4b12      	ldr	r3, [pc, #72]	; (20001d28 <HAL_InitTick+0x58>)
20001cde:	781b      	ldrb	r3, [r3, #0]
20001ce0:	4619      	mov	r1, r3
20001ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
20001ce6:	fbb3 f3f1 	udiv	r3, r3, r1
20001cea:	fbb2 f3f3 	udiv	r3, r2, r3
20001cee:	4618      	mov	r0, r3
20001cf0:	f000 fbf9 	bl	200024e6 <HAL_SYSTICK_Config>
20001cf4:	4603      	mov	r3, r0
20001cf6:	2b00      	cmp	r3, #0
20001cf8:	d001      	beq.n	20001cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
20001cfa:	2301      	movs	r3, #1
20001cfc:	e00e      	b.n	20001d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
20001cfe:	687b      	ldr	r3, [r7, #4]
20001d00:	2b0f      	cmp	r3, #15
20001d02:	d80a      	bhi.n	20001d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
20001d04:	2200      	movs	r2, #0
20001d06:	6879      	ldr	r1, [r7, #4]
20001d08:	f04f 30ff 	mov.w	r0, #4294967295
20001d0c:	f000 fbaf 	bl	2000246e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
20001d10:	4a06      	ldr	r2, [pc, #24]	; (20001d2c <HAL_InitTick+0x5c>)
20001d12:	687b      	ldr	r3, [r7, #4]
20001d14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
20001d16:	2300      	movs	r3, #0
20001d18:	e000      	b.n	20001d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
20001d1a:	2301      	movs	r3, #1
}
20001d1c:	4618      	mov	r0, r3
20001d1e:	3708      	adds	r7, #8
20001d20:	46bd      	mov	sp, r7
20001d22:	bd80      	pop	{r7, pc}
20001d24:	20000410 	.word	0x20000410
20001d28:	20000418 	.word	0x20000418
20001d2c:	20000414 	.word	0x20000414

20001d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
20001d30:	b480      	push	{r7}
20001d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
20001d34:	4b06      	ldr	r3, [pc, #24]	; (20001d50 <HAL_IncTick+0x20>)
20001d36:	781b      	ldrb	r3, [r3, #0]
20001d38:	461a      	mov	r2, r3
20001d3a:	4b06      	ldr	r3, [pc, #24]	; (20001d54 <HAL_IncTick+0x24>)
20001d3c:	681b      	ldr	r3, [r3, #0]
20001d3e:	4413      	add	r3, r2
20001d40:	4a04      	ldr	r2, [pc, #16]	; (20001d54 <HAL_IncTick+0x24>)
20001d42:	6013      	str	r3, [r2, #0]
}
20001d44:	bf00      	nop
20001d46:	46bd      	mov	sp, r7
20001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
20001d4c:	4770      	bx	lr
20001d4e:	bf00      	nop
20001d50:	20000418 	.word	0x20000418
20001d54:	200004f0 	.word	0x200004f0

20001d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
20001d58:	b480      	push	{r7}
20001d5a:	af00      	add	r7, sp, #0
  return uwTick;
20001d5c:	4b03      	ldr	r3, [pc, #12]	; (20001d6c <HAL_GetTick+0x14>)
20001d5e:	681b      	ldr	r3, [r3, #0]
}
20001d60:	4618      	mov	r0, r3
20001d62:	46bd      	mov	sp, r7
20001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
20001d68:	4770      	bx	lr
20001d6a:	bf00      	nop
20001d6c:	200004f0 	.word	0x200004f0

20001d70 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
20001d70:	b480      	push	{r7}
20001d72:	af00      	add	r7, sp, #0
  return uwTickPrio;
20001d74:	4b03      	ldr	r3, [pc, #12]	; (20001d84 <HAL_GetTickPrio+0x14>)
20001d76:	681b      	ldr	r3, [r3, #0]
}
20001d78:	4618      	mov	r0, r3
20001d7a:	46bd      	mov	sp, r7
20001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001d80:	4770      	bx	lr
20001d82:	bf00      	nop
20001d84:	20000414 	.word	0x20000414

20001d88 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
20001d88:	b580      	push	{r7, lr}
20001d8a:	b084      	sub	sp, #16
20001d8c:	af00      	add	r7, sp, #0
20001d8e:	4603      	mov	r3, r0
20001d90:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
20001d92:	2300      	movs	r3, #0
20001d94:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
20001d96:	4b0e      	ldr	r3, [pc, #56]	; (20001dd0 <HAL_SetTickFreq+0x48>)
20001d98:	781b      	ldrb	r3, [r3, #0]
20001d9a:	79fa      	ldrb	r2, [r7, #7]
20001d9c:	429a      	cmp	r2, r3
20001d9e:	d012      	beq.n	20001dc6 <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
20001da0:	4b0b      	ldr	r3, [pc, #44]	; (20001dd0 <HAL_SetTickFreq+0x48>)
20001da2:	781b      	ldrb	r3, [r3, #0]
20001da4:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
20001da6:	4a0a      	ldr	r2, [pc, #40]	; (20001dd0 <HAL_SetTickFreq+0x48>)
20001da8:	79fb      	ldrb	r3, [r7, #7]
20001daa:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
20001dac:	4b09      	ldr	r3, [pc, #36]	; (20001dd4 <HAL_SetTickFreq+0x4c>)
20001dae:	681b      	ldr	r3, [r3, #0]
20001db0:	4618      	mov	r0, r3
20001db2:	f7ff ff8d 	bl	20001cd0 <HAL_InitTick>
20001db6:	4603      	mov	r3, r0
20001db8:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
20001dba:	7bfb      	ldrb	r3, [r7, #15]
20001dbc:	2b00      	cmp	r3, #0
20001dbe:	d002      	beq.n	20001dc6 <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
20001dc0:	4a03      	ldr	r2, [pc, #12]	; (20001dd0 <HAL_SetTickFreq+0x48>)
20001dc2:	7bbb      	ldrb	r3, [r7, #14]
20001dc4:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
20001dc6:	7bfb      	ldrb	r3, [r7, #15]
}
20001dc8:	4618      	mov	r0, r3
20001dca:	3710      	adds	r7, #16
20001dcc:	46bd      	mov	sp, r7
20001dce:	bd80      	pop	{r7, pc}
20001dd0:	20000418 	.word	0x20000418
20001dd4:	20000414 	.word	0x20000414

20001dd8 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
20001dd8:	b480      	push	{r7}
20001dda:	af00      	add	r7, sp, #0
  return uwTickFreq;
20001ddc:	4b03      	ldr	r3, [pc, #12]	; (20001dec <HAL_GetTickFreq+0x14>)
20001dde:	781b      	ldrb	r3, [r3, #0]
}
20001de0:	4618      	mov	r0, r3
20001de2:	46bd      	mov	sp, r7
20001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
20001de8:	4770      	bx	lr
20001dea:	bf00      	nop
20001dec:	20000418 	.word	0x20000418

20001df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
20001df0:	b580      	push	{r7, lr}
20001df2:	b084      	sub	sp, #16
20001df4:	af00      	add	r7, sp, #0
20001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
20001df8:	f7ff ffae 	bl	20001d58 <HAL_GetTick>
20001dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
20001dfe:	687b      	ldr	r3, [r7, #4]
20001e00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
20001e02:	68fb      	ldr	r3, [r7, #12]
20001e04:	f1b3 3fff 	cmp.w	r3, #4294967295
20001e08:	d005      	beq.n	20001e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
20001e0a:	4b0a      	ldr	r3, [pc, #40]	; (20001e34 <HAL_Delay+0x44>)
20001e0c:	781b      	ldrb	r3, [r3, #0]
20001e0e:	461a      	mov	r2, r3
20001e10:	68fb      	ldr	r3, [r7, #12]
20001e12:	4413      	add	r3, r2
20001e14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
20001e16:	bf00      	nop
20001e18:	f7ff ff9e 	bl	20001d58 <HAL_GetTick>
20001e1c:	4602      	mov	r2, r0
20001e1e:	68bb      	ldr	r3, [r7, #8]
20001e20:	1ad3      	subs	r3, r2, r3
20001e22:	68fa      	ldr	r2, [r7, #12]
20001e24:	429a      	cmp	r2, r3
20001e26:	d8f7      	bhi.n	20001e18 <HAL_Delay+0x28>
  {
  }
}
20001e28:	bf00      	nop
20001e2a:	bf00      	nop
20001e2c:	3710      	adds	r7, #16
20001e2e:	46bd      	mov	sp, r7
20001e30:	bd80      	pop	{r7, pc}
20001e32:	bf00      	nop
20001e34:	20000418 	.word	0x20000418

20001e38 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
20001e38:	b480      	push	{r7}
20001e3a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
20001e3c:	4b05      	ldr	r3, [pc, #20]	; (20001e54 <HAL_SuspendTick+0x1c>)
20001e3e:	681b      	ldr	r3, [r3, #0]
20001e40:	4a04      	ldr	r2, [pc, #16]	; (20001e54 <HAL_SuspendTick+0x1c>)
20001e42:	f023 0302 	bic.w	r3, r3, #2
20001e46:	6013      	str	r3, [r2, #0]
}
20001e48:	bf00      	nop
20001e4a:	46bd      	mov	sp, r7
20001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001e50:	4770      	bx	lr
20001e52:	bf00      	nop
20001e54:	e000e010 	.word	0xe000e010

20001e58 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
20001e58:	b480      	push	{r7}
20001e5a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
20001e5c:	4b05      	ldr	r3, [pc, #20]	; (20001e74 <HAL_ResumeTick+0x1c>)
20001e5e:	681b      	ldr	r3, [r3, #0]
20001e60:	4a04      	ldr	r2, [pc, #16]	; (20001e74 <HAL_ResumeTick+0x1c>)
20001e62:	f043 0302 	orr.w	r3, r3, #2
20001e66:	6013      	str	r3, [r2, #0]
}
20001e68:	bf00      	nop
20001e6a:	46bd      	mov	sp, r7
20001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001e70:	4770      	bx	lr
20001e72:	bf00      	nop
20001e74:	e000e010 	.word	0xe000e010

20001e78 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
20001e78:	b480      	push	{r7}
20001e7a:	af00      	add	r7, sp, #0
  return __STM32F7xx_HAL_VERSION;
20001e7c:	4b02      	ldr	r3, [pc, #8]	; (20001e88 <HAL_GetHalVersion+0x10>)
}
20001e7e:	4618      	mov	r0, r3
20001e80:	46bd      	mov	sp, r7
20001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
20001e86:	4770      	bx	lr
20001e88:	01020a00 	.word	0x01020a00

20001e8c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
20001e8c:	b480      	push	{r7}
20001e8e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
20001e90:	4b03      	ldr	r3, [pc, #12]	; (20001ea0 <HAL_GetREVID+0x14>)
20001e92:	681b      	ldr	r3, [r3, #0]
20001e94:	0c1b      	lsrs	r3, r3, #16
}
20001e96:	4618      	mov	r0, r3
20001e98:	46bd      	mov	sp, r7
20001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
20001e9e:	4770      	bx	lr
20001ea0:	e0042000 	.word	0xe0042000

20001ea4 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
20001ea4:	b480      	push	{r7}
20001ea6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
20001ea8:	4b04      	ldr	r3, [pc, #16]	; (20001ebc <HAL_GetDEVID+0x18>)
20001eaa:	681b      	ldr	r3, [r3, #0]
20001eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
20001eb0:	4618      	mov	r0, r3
20001eb2:	46bd      	mov	sp, r7
20001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
20001eb8:	4770      	bx	lr
20001eba:	bf00      	nop
20001ebc:	e0042000 	.word	0xe0042000

20001ec0 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
20001ec0:	b480      	push	{r7}
20001ec2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
20001ec4:	4b03      	ldr	r3, [pc, #12]	; (20001ed4 <HAL_GetUIDw0+0x14>)
20001ec6:	681b      	ldr	r3, [r3, #0]
}
20001ec8:	4618      	mov	r0, r3
20001eca:	46bd      	mov	sp, r7
20001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
20001ed0:	4770      	bx	lr
20001ed2:	bf00      	nop
20001ed4:	1ff0f420 	.word	0x1ff0f420

20001ed8 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
20001ed8:	b480      	push	{r7}
20001eda:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
20001edc:	4b03      	ldr	r3, [pc, #12]	; (20001eec <HAL_GetUIDw1+0x14>)
20001ede:	681b      	ldr	r3, [r3, #0]
}
20001ee0:	4618      	mov	r0, r3
20001ee2:	46bd      	mov	sp, r7
20001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
20001ee8:	4770      	bx	lr
20001eea:	bf00      	nop
20001eec:	1ff0f424 	.word	0x1ff0f424

20001ef0 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
20001ef0:	b480      	push	{r7}
20001ef2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
20001ef4:	4b03      	ldr	r3, [pc, #12]	; (20001f04 <HAL_GetUIDw2+0x14>)
20001ef6:	681b      	ldr	r3, [r3, #0]
}
20001ef8:	4618      	mov	r0, r3
20001efa:	46bd      	mov	sp, r7
20001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
20001f00:	4770      	bx	lr
20001f02:	bf00      	nop
20001f04:	1ff0f428 	.word	0x1ff0f428

20001f08 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
20001f08:	b480      	push	{r7}
20001f0a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
20001f0c:	4b05      	ldr	r3, [pc, #20]	; (20001f24 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
20001f0e:	685b      	ldr	r3, [r3, #4]
20001f10:	4a04      	ldr	r2, [pc, #16]	; (20001f24 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
20001f12:	f043 0301 	orr.w	r3, r3, #1
20001f16:	6053      	str	r3, [r2, #4]
}
20001f18:	bf00      	nop
20001f1a:	46bd      	mov	sp, r7
20001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001f20:	4770      	bx	lr
20001f22:	bf00      	nop
20001f24:	e0042000 	.word	0xe0042000

20001f28 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
20001f28:	b480      	push	{r7}
20001f2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
20001f2c:	4b05      	ldr	r3, [pc, #20]	; (20001f44 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
20001f2e:	685b      	ldr	r3, [r3, #4]
20001f30:	4a04      	ldr	r2, [pc, #16]	; (20001f44 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
20001f32:	f023 0301 	bic.w	r3, r3, #1
20001f36:	6053      	str	r3, [r2, #4]
}
20001f38:	bf00      	nop
20001f3a:	46bd      	mov	sp, r7
20001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001f40:	4770      	bx	lr
20001f42:	bf00      	nop
20001f44:	e0042000 	.word	0xe0042000

20001f48 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
20001f48:	b480      	push	{r7}
20001f4a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
20001f4c:	4b05      	ldr	r3, [pc, #20]	; (20001f64 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
20001f4e:	685b      	ldr	r3, [r3, #4]
20001f50:	4a04      	ldr	r2, [pc, #16]	; (20001f64 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
20001f52:	f043 0302 	orr.w	r3, r3, #2
20001f56:	6053      	str	r3, [r2, #4]
}
20001f58:	bf00      	nop
20001f5a:	46bd      	mov	sp, r7
20001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001f60:	4770      	bx	lr
20001f62:	bf00      	nop
20001f64:	e0042000 	.word	0xe0042000

20001f68 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
20001f68:	b480      	push	{r7}
20001f6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
20001f6c:	4b05      	ldr	r3, [pc, #20]	; (20001f84 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
20001f6e:	685b      	ldr	r3, [r3, #4]
20001f70:	4a04      	ldr	r2, [pc, #16]	; (20001f84 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
20001f72:	f023 0302 	bic.w	r3, r3, #2
20001f76:	6053      	str	r3, [r2, #4]
}
20001f78:	bf00      	nop
20001f7a:	46bd      	mov	sp, r7
20001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001f80:	4770      	bx	lr
20001f82:	bf00      	nop
20001f84:	e0042000 	.word	0xe0042000

20001f88 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
20001f88:	b480      	push	{r7}
20001f8a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
20001f8c:	4b05      	ldr	r3, [pc, #20]	; (20001fa4 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
20001f8e:	685b      	ldr	r3, [r3, #4]
20001f90:	4a04      	ldr	r2, [pc, #16]	; (20001fa4 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
20001f92:	f043 0304 	orr.w	r3, r3, #4
20001f96:	6053      	str	r3, [r2, #4]
}
20001f98:	bf00      	nop
20001f9a:	46bd      	mov	sp, r7
20001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001fa0:	4770      	bx	lr
20001fa2:	bf00      	nop
20001fa4:	e0042000 	.word	0xe0042000

20001fa8 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
20001fa8:	b480      	push	{r7}
20001faa:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
20001fac:	4b05      	ldr	r3, [pc, #20]	; (20001fc4 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
20001fae:	685b      	ldr	r3, [r3, #4]
20001fb0:	4a04      	ldr	r2, [pc, #16]	; (20001fc4 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
20001fb2:	f023 0304 	bic.w	r3, r3, #4
20001fb6:	6053      	str	r3, [r2, #4]
}
20001fb8:	bf00      	nop
20001fba:	46bd      	mov	sp, r7
20001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
20001fc0:	4770      	bx	lr
20001fc2:	bf00      	nop
20001fc4:	e0042000 	.word	0xe0042000

20001fc8 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
20001fc8:	b480      	push	{r7}
20001fca:	af00      	add	r7, sp, #0
  SYSCFG->CMPCR |= SYSCFG_CMPCR_CMP_PD;
20001fcc:	4b05      	ldr	r3, [pc, #20]	; (20001fe4 <HAL_EnableCompensationCell+0x1c>)
20001fce:	6a1b      	ldr	r3, [r3, #32]
20001fd0:	4a04      	ldr	r2, [pc, #16]	; (20001fe4 <HAL_EnableCompensationCell+0x1c>)
20001fd2:	f043 0301 	orr.w	r3, r3, #1
20001fd6:	6213      	str	r3, [r2, #32]
}
20001fd8:	bf00      	nop
20001fda:	46bd      	mov	sp, r7
20001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
20001fe0:	4770      	bx	lr
20001fe2:	bf00      	nop
20001fe4:	40013800 	.word	0x40013800

20001fe8 <HAL_DisableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
20001fe8:	b480      	push	{r7}
20001fea:	af00      	add	r7, sp, #0
  SYSCFG->CMPCR &= (uint32_t)~((uint32_t)SYSCFG_CMPCR_CMP_PD);
20001fec:	4b05      	ldr	r3, [pc, #20]	; (20002004 <HAL_DisableCompensationCell+0x1c>)
20001fee:	6a1b      	ldr	r3, [r3, #32]
20001ff0:	4a04      	ldr	r2, [pc, #16]	; (20002004 <HAL_DisableCompensationCell+0x1c>)
20001ff2:	f023 0301 	bic.w	r3, r3, #1
20001ff6:	6213      	str	r3, [r2, #32]
}
20001ff8:	bf00      	nop
20001ffa:	46bd      	mov	sp, r7
20001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
20002000:	4770      	bx	lr
20002002:	bf00      	nop
20002004:	40013800 	.word	0x40013800

20002008 <HAL_EnableFMCMemorySwapping>:
  *         and NOR/RAM is accessible at 0xC0000000   
  *
  * @retval None
  */
void HAL_EnableFMCMemorySwapping(void)
{
20002008:	b480      	push	{r7}
2000200a:	af00      	add	r7, sp, #0
  SYSCFG->MEMRMP |= SYSCFG_MEMRMP_SWP_FMC_0;
2000200c:	4b05      	ldr	r3, [pc, #20]	; (20002024 <HAL_EnableFMCMemorySwapping+0x1c>)
2000200e:	681b      	ldr	r3, [r3, #0]
20002010:	4a04      	ldr	r2, [pc, #16]	; (20002024 <HAL_EnableFMCMemorySwapping+0x1c>)
20002012:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
20002016:	6013      	str	r3, [r2, #0]
}
20002018:	bf00      	nop
2000201a:	46bd      	mov	sp, r7
2000201c:	f85d 7b04 	ldr.w	r7, [sp], #4
20002020:	4770      	bx	lr
20002022:	bf00      	nop
20002024:	40013800 	.word	0x40013800

20002028 <HAL_DisableFMCMemorySwapping>:
  *         and NOR/RAM is accessible at 0x60000000 (default mapping)    
  *           
  * @retval None
  */
void HAL_DisableFMCMemorySwapping(void)
{
20002028:	b480      	push	{r7}
2000202a:	af00      	add	r7, sp, #0
  SYSCFG->MEMRMP &= (uint32_t)~((uint32_t)SYSCFG_MEMRMP_SWP_FMC);
2000202c:	4b05      	ldr	r3, [pc, #20]	; (20002044 <HAL_DisableFMCMemorySwapping+0x1c>)
2000202e:	681b      	ldr	r3, [r3, #0]
20002030:	4a04      	ldr	r2, [pc, #16]	; (20002044 <HAL_DisableFMCMemorySwapping+0x1c>)
20002032:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
20002036:	6013      	str	r3, [r2, #0]
}
20002038:	bf00      	nop
2000203a:	46bd      	mov	sp, r7
2000203c:	f85d 7b04 	ldr.w	r7, [sp], #4
20002040:	4770      	bx	lr
20002042:	bf00      	nop
20002044:	40013800 	.word	0x40013800

20002048 <HAL_EnableMemorySwappingBank>:
*         and Flash Bank1 mapped at 0x08100000 (AXI) (aliased at 0x00300000 (TCM))   
*
* @retval None
*/
void HAL_EnableMemorySwappingBank(void)
{
20002048:	b480      	push	{r7}
2000204a:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_SWP_FB);
2000204c:	4b05      	ldr	r3, [pc, #20]	; (20002064 <HAL_EnableMemorySwappingBank+0x1c>)
2000204e:	681b      	ldr	r3, [r3, #0]
20002050:	4a04      	ldr	r2, [pc, #16]	; (20002064 <HAL_EnableMemorySwappingBank+0x1c>)
20002052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20002056:	6013      	str	r3, [r2, #0]
}
20002058:	bf00      	nop
2000205a:	46bd      	mov	sp, r7
2000205c:	f85d 7b04 	ldr.w	r7, [sp], #4
20002060:	4770      	bx	lr
20002062:	bf00      	nop
20002064:	40013800 	.word	0x40013800

20002068 <HAL_DisableMemorySwappingBank>:
*         and Flash Bank2 mapped at 0x08100000 (AXI)( aliased at 0x00300000 (TCM)) 
*           
* @retval None
*/
void HAL_DisableMemorySwappingBank(void)
{
20002068:	b480      	push	{r7}
2000206a:	af00      	add	r7, sp, #0
  CLEAR_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_SWP_FB);
2000206c:	4b05      	ldr	r3, [pc, #20]	; (20002084 <HAL_DisableMemorySwappingBank+0x1c>)
2000206e:	681b      	ldr	r3, [r3, #0]
20002070:	4a04      	ldr	r2, [pc, #16]	; (20002084 <HAL_DisableMemorySwappingBank+0x1c>)
20002072:	f423 7380 	bic.w	r3, r3, #256	; 0x100
20002076:	6013      	str	r3, [r2, #0]
}
20002078:	bf00      	nop
2000207a:	46bd      	mov	sp, r7
2000207c:	f85d 7b04 	ldr.w	r7, [sp], #4
20002080:	4770      	bx	lr
20002082:	bf00      	nop
20002084:	40013800 	.word	0x40013800

20002088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
20002088:	b480      	push	{r7}
2000208a:	b085      	sub	sp, #20
2000208c:	af00      	add	r7, sp, #0
2000208e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
20002090:	687b      	ldr	r3, [r7, #4]
20002092:	f003 0307 	and.w	r3, r3, #7
20002096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
20002098:	4b0b      	ldr	r3, [pc, #44]	; (200020c8 <__NVIC_SetPriorityGrouping+0x40>)
2000209a:	68db      	ldr	r3, [r3, #12]
2000209c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
2000209e:	68ba      	ldr	r2, [r7, #8]
200020a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
200020a4:	4013      	ands	r3, r2
200020a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
200020a8:	68fb      	ldr	r3, [r7, #12]
200020aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
200020ac:	68bb      	ldr	r3, [r7, #8]
200020ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
200020b0:	4b06      	ldr	r3, [pc, #24]	; (200020cc <__NVIC_SetPriorityGrouping+0x44>)
200020b2:	4313      	orrs	r3, r2
200020b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
200020b6:	4a04      	ldr	r2, [pc, #16]	; (200020c8 <__NVIC_SetPriorityGrouping+0x40>)
200020b8:	68bb      	ldr	r3, [r7, #8]
200020ba:	60d3      	str	r3, [r2, #12]
}
200020bc:	bf00      	nop
200020be:	3714      	adds	r7, #20
200020c0:	46bd      	mov	sp, r7
200020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
200020c6:	4770      	bx	lr
200020c8:	e000ed00 	.word	0xe000ed00
200020cc:	05fa0000 	.word	0x05fa0000

200020d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
200020d0:	b480      	push	{r7}
200020d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
200020d4:	4b04      	ldr	r3, [pc, #16]	; (200020e8 <__NVIC_GetPriorityGrouping+0x18>)
200020d6:	68db      	ldr	r3, [r3, #12]
200020d8:	0a1b      	lsrs	r3, r3, #8
200020da:	f003 0307 	and.w	r3, r3, #7
}
200020de:	4618      	mov	r0, r3
200020e0:	46bd      	mov	sp, r7
200020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
200020e6:	4770      	bx	lr
200020e8:	e000ed00 	.word	0xe000ed00

200020ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
200020ec:	b480      	push	{r7}
200020ee:	b083      	sub	sp, #12
200020f0:	af00      	add	r7, sp, #0
200020f2:	4603      	mov	r3, r0
200020f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
200020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
200020fa:	2b00      	cmp	r3, #0
200020fc:	db0b      	blt.n	20002116 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
200020fe:	79fb      	ldrb	r3, [r7, #7]
20002100:	f003 021f 	and.w	r2, r3, #31
20002104:	4907      	ldr	r1, [pc, #28]	; (20002124 <__NVIC_EnableIRQ+0x38>)
20002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000210a:	095b      	lsrs	r3, r3, #5
2000210c:	2001      	movs	r0, #1
2000210e:	fa00 f202 	lsl.w	r2, r0, r2
20002112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
20002116:	bf00      	nop
20002118:	370c      	adds	r7, #12
2000211a:	46bd      	mov	sp, r7
2000211c:	f85d 7b04 	ldr.w	r7, [sp], #4
20002120:	4770      	bx	lr
20002122:	bf00      	nop
20002124:	e000e100 	.word	0xe000e100

20002128 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
20002128:	b480      	push	{r7}
2000212a:	b083      	sub	sp, #12
2000212c:	af00      	add	r7, sp, #0
2000212e:	4603      	mov	r3, r0
20002130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002136:	2b00      	cmp	r3, #0
20002138:	db12      	blt.n	20002160 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
2000213a:	79fb      	ldrb	r3, [r7, #7]
2000213c:	f003 021f 	and.w	r2, r3, #31
20002140:	490a      	ldr	r1, [pc, #40]	; (2000216c <__NVIC_DisableIRQ+0x44>)
20002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002146:	095b      	lsrs	r3, r3, #5
20002148:	2001      	movs	r0, #1
2000214a:	fa00 f202 	lsl.w	r2, r0, r2
2000214e:	3320      	adds	r3, #32
20002150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
20002154:	f3bf 8f4f 	dsb	sy
}
20002158:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
2000215a:	f3bf 8f6f 	isb	sy
}
2000215e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
20002160:	bf00      	nop
20002162:	370c      	adds	r7, #12
20002164:	46bd      	mov	sp, r7
20002166:	f85d 7b04 	ldr.w	r7, [sp], #4
2000216a:	4770      	bx	lr
2000216c:	e000e100 	.word	0xe000e100

20002170 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
20002170:	b480      	push	{r7}
20002172:	b083      	sub	sp, #12
20002174:	af00      	add	r7, sp, #0
20002176:	4603      	mov	r3, r0
20002178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
2000217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000217e:	2b00      	cmp	r3, #0
20002180:	db0e      	blt.n	200021a0 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
20002182:	4a0b      	ldr	r2, [pc, #44]	; (200021b0 <__NVIC_GetPendingIRQ+0x40>)
20002184:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002188:	095b      	lsrs	r3, r3, #5
2000218a:	3340      	adds	r3, #64	; 0x40
2000218c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
20002190:	79fb      	ldrb	r3, [r7, #7]
20002192:	f003 031f 	and.w	r3, r3, #31
20002196:	fa22 f303 	lsr.w	r3, r2, r3
2000219a:	f003 0301 	and.w	r3, r3, #1
2000219e:	e000      	b.n	200021a2 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
200021a0:	2300      	movs	r3, #0
  }
}
200021a2:	4618      	mov	r0, r3
200021a4:	370c      	adds	r7, #12
200021a6:	46bd      	mov	sp, r7
200021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
200021ac:	4770      	bx	lr
200021ae:	bf00      	nop
200021b0:	e000e100 	.word	0xe000e100

200021b4 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
200021b4:	b480      	push	{r7}
200021b6:	b083      	sub	sp, #12
200021b8:	af00      	add	r7, sp, #0
200021ba:	4603      	mov	r3, r0
200021bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
200021be:	f997 3007 	ldrsb.w	r3, [r7, #7]
200021c2:	2b00      	cmp	r3, #0
200021c4:	db0c      	blt.n	200021e0 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
200021c6:	79fb      	ldrb	r3, [r7, #7]
200021c8:	f003 021f 	and.w	r2, r3, #31
200021cc:	4907      	ldr	r1, [pc, #28]	; (200021ec <__NVIC_SetPendingIRQ+0x38>)
200021ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
200021d2:	095b      	lsrs	r3, r3, #5
200021d4:	2001      	movs	r0, #1
200021d6:	fa00 f202 	lsl.w	r2, r0, r2
200021da:	3340      	adds	r3, #64	; 0x40
200021dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
200021e0:	bf00      	nop
200021e2:	370c      	adds	r7, #12
200021e4:	46bd      	mov	sp, r7
200021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
200021ea:	4770      	bx	lr
200021ec:	e000e100 	.word	0xe000e100

200021f0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
200021f0:	b480      	push	{r7}
200021f2:	b083      	sub	sp, #12
200021f4:	af00      	add	r7, sp, #0
200021f6:	4603      	mov	r3, r0
200021f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
200021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
200021fe:	2b00      	cmp	r3, #0
20002200:	db0c      	blt.n	2000221c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
20002202:	79fb      	ldrb	r3, [r7, #7]
20002204:	f003 021f 	and.w	r2, r3, #31
20002208:	4907      	ldr	r1, [pc, #28]	; (20002228 <__NVIC_ClearPendingIRQ+0x38>)
2000220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000220e:	095b      	lsrs	r3, r3, #5
20002210:	2001      	movs	r0, #1
20002212:	fa00 f202 	lsl.w	r2, r0, r2
20002216:	3360      	adds	r3, #96	; 0x60
20002218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
2000221c:	bf00      	nop
2000221e:	370c      	adds	r7, #12
20002220:	46bd      	mov	sp, r7
20002222:	f85d 7b04 	ldr.w	r7, [sp], #4
20002226:	4770      	bx	lr
20002228:	e000e100 	.word	0xe000e100

2000222c <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
2000222c:	b480      	push	{r7}
2000222e:	b083      	sub	sp, #12
20002230:	af00      	add	r7, sp, #0
20002232:	4603      	mov	r3, r0
20002234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000223a:	2b00      	cmp	r3, #0
2000223c:	db0e      	blt.n	2000225c <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
2000223e:	4a0b      	ldr	r2, [pc, #44]	; (2000226c <__NVIC_GetActive+0x40>)
20002240:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002244:	095b      	lsrs	r3, r3, #5
20002246:	3380      	adds	r3, #128	; 0x80
20002248:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
2000224c:	79fb      	ldrb	r3, [r7, #7]
2000224e:	f003 031f 	and.w	r3, r3, #31
20002252:	fa22 f303 	lsr.w	r3, r2, r3
20002256:	f003 0301 	and.w	r3, r3, #1
2000225a:	e000      	b.n	2000225e <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
2000225c:	2300      	movs	r3, #0
  }
}
2000225e:	4618      	mov	r0, r3
20002260:	370c      	adds	r7, #12
20002262:	46bd      	mov	sp, r7
20002264:	f85d 7b04 	ldr.w	r7, [sp], #4
20002268:	4770      	bx	lr
2000226a:	bf00      	nop
2000226c:	e000e100 	.word	0xe000e100

20002270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20002270:	b480      	push	{r7}
20002272:	b083      	sub	sp, #12
20002274:	af00      	add	r7, sp, #0
20002276:	4603      	mov	r3, r0
20002278:	6039      	str	r1, [r7, #0]
2000227a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
2000227c:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002280:	2b00      	cmp	r3, #0
20002282:	db0a      	blt.n	2000229a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20002284:	683b      	ldr	r3, [r7, #0]
20002286:	b2da      	uxtb	r2, r3
20002288:	490c      	ldr	r1, [pc, #48]	; (200022bc <__NVIC_SetPriority+0x4c>)
2000228a:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000228e:	0112      	lsls	r2, r2, #4
20002290:	b2d2      	uxtb	r2, r2
20002292:	440b      	add	r3, r1
20002294:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20002298:	e00a      	b.n	200022b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000229a:	683b      	ldr	r3, [r7, #0]
2000229c:	b2da      	uxtb	r2, r3
2000229e:	4908      	ldr	r1, [pc, #32]	; (200022c0 <__NVIC_SetPriority+0x50>)
200022a0:	79fb      	ldrb	r3, [r7, #7]
200022a2:	f003 030f 	and.w	r3, r3, #15
200022a6:	3b04      	subs	r3, #4
200022a8:	0112      	lsls	r2, r2, #4
200022aa:	b2d2      	uxtb	r2, r2
200022ac:	440b      	add	r3, r1
200022ae:	761a      	strb	r2, [r3, #24]
}
200022b0:	bf00      	nop
200022b2:	370c      	adds	r7, #12
200022b4:	46bd      	mov	sp, r7
200022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
200022ba:	4770      	bx	lr
200022bc:	e000e100 	.word	0xe000e100
200022c0:	e000ed00 	.word	0xe000ed00

200022c4 <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
200022c4:	b480      	push	{r7}
200022c6:	b083      	sub	sp, #12
200022c8:	af00      	add	r7, sp, #0
200022ca:	4603      	mov	r3, r0
200022cc:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) >= 0)
200022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
200022d2:	2b00      	cmp	r3, #0
200022d4:	db09      	blt.n	200022ea <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]                >> (8U - __NVIC_PRIO_BITS)));
200022d6:	4a0d      	ldr	r2, [pc, #52]	; (2000230c <__NVIC_GetPriority+0x48>)
200022d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
200022dc:	4413      	add	r3, r2
200022de:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
200022e2:	b2db      	uxtb	r3, r3
200022e4:	091b      	lsrs	r3, r3, #4
200022e6:	b2db      	uxtb	r3, r3
200022e8:	e009      	b.n	200022fe <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
200022ea:	4a09      	ldr	r2, [pc, #36]	; (20002310 <__NVIC_GetPriority+0x4c>)
200022ec:	79fb      	ldrb	r3, [r7, #7]
200022ee:	f003 030f 	and.w	r3, r3, #15
200022f2:	3b04      	subs	r3, #4
200022f4:	4413      	add	r3, r2
200022f6:	7e1b      	ldrb	r3, [r3, #24]
200022f8:	b2db      	uxtb	r3, r3
200022fa:	091b      	lsrs	r3, r3, #4
200022fc:	b2db      	uxtb	r3, r3
  }
}
200022fe:	4618      	mov	r0, r3
20002300:	370c      	adds	r7, #12
20002302:	46bd      	mov	sp, r7
20002304:	f85d 7b04 	ldr.w	r7, [sp], #4
20002308:	4770      	bx	lr
2000230a:	bf00      	nop
2000230c:	e000e100 	.word	0xe000e100
20002310:	e000ed00 	.word	0xe000ed00

20002314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
20002314:	b480      	push	{r7}
20002316:	b089      	sub	sp, #36	; 0x24
20002318:	af00      	add	r7, sp, #0
2000231a:	60f8      	str	r0, [r7, #12]
2000231c:	60b9      	str	r1, [r7, #8]
2000231e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
20002320:	68fb      	ldr	r3, [r7, #12]
20002322:	f003 0307 	and.w	r3, r3, #7
20002326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
20002328:	69fb      	ldr	r3, [r7, #28]
2000232a:	f1c3 0307 	rsb	r3, r3, #7
2000232e:	2b04      	cmp	r3, #4
20002330:	bf28      	it	cs
20002332:	2304      	movcs	r3, #4
20002334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
20002336:	69fb      	ldr	r3, [r7, #28]
20002338:	3304      	adds	r3, #4
2000233a:	2b06      	cmp	r3, #6
2000233c:	d902      	bls.n	20002344 <NVIC_EncodePriority+0x30>
2000233e:	69fb      	ldr	r3, [r7, #28]
20002340:	3b03      	subs	r3, #3
20002342:	e000      	b.n	20002346 <NVIC_EncodePriority+0x32>
20002344:	2300      	movs	r3, #0
20002346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20002348:	f04f 32ff 	mov.w	r2, #4294967295
2000234c:	69bb      	ldr	r3, [r7, #24]
2000234e:	fa02 f303 	lsl.w	r3, r2, r3
20002352:	43da      	mvns	r2, r3
20002354:	68bb      	ldr	r3, [r7, #8]
20002356:	401a      	ands	r2, r3
20002358:	697b      	ldr	r3, [r7, #20]
2000235a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
2000235c:	f04f 31ff 	mov.w	r1, #4294967295
20002360:	697b      	ldr	r3, [r7, #20]
20002362:	fa01 f303 	lsl.w	r3, r1, r3
20002366:	43d9      	mvns	r1, r3
20002368:	687b      	ldr	r3, [r7, #4]
2000236a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
2000236c:	4313      	orrs	r3, r2
         );
}
2000236e:	4618      	mov	r0, r3
20002370:	3724      	adds	r7, #36	; 0x24
20002372:	46bd      	mov	sp, r7
20002374:	f85d 7b04 	ldr.w	r7, [sp], #4
20002378:	4770      	bx	lr

2000237a <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
2000237a:	b480      	push	{r7}
2000237c:	b089      	sub	sp, #36	; 0x24
2000237e:	af00      	add	r7, sp, #0
20002380:	60f8      	str	r0, [r7, #12]
20002382:	60b9      	str	r1, [r7, #8]
20002384:	607a      	str	r2, [r7, #4]
20002386:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
20002388:	68bb      	ldr	r3, [r7, #8]
2000238a:	f003 0307 	and.w	r3, r3, #7
2000238e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
20002390:	69fb      	ldr	r3, [r7, #28]
20002392:	f1c3 0307 	rsb	r3, r3, #7
20002396:	2b04      	cmp	r3, #4
20002398:	bf28      	it	cs
2000239a:	2304      	movcs	r3, #4
2000239c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
2000239e:	69fb      	ldr	r3, [r7, #28]
200023a0:	3304      	adds	r3, #4
200023a2:	2b06      	cmp	r3, #6
200023a4:	d902      	bls.n	200023ac <NVIC_DecodePriority+0x32>
200023a6:	69fb      	ldr	r3, [r7, #28]
200023a8:	3b03      	subs	r3, #3
200023aa:	e000      	b.n	200023ae <NVIC_DecodePriority+0x34>
200023ac:	2300      	movs	r3, #0
200023ae:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
200023b0:	68fa      	ldr	r2, [r7, #12]
200023b2:	697b      	ldr	r3, [r7, #20]
200023b4:	40da      	lsrs	r2, r3
200023b6:	f04f 31ff 	mov.w	r1, #4294967295
200023ba:	69bb      	ldr	r3, [r7, #24]
200023bc:	fa01 f303 	lsl.w	r3, r1, r3
200023c0:	43db      	mvns	r3, r3
200023c2:	401a      	ands	r2, r3
200023c4:	687b      	ldr	r3, [r7, #4]
200023c6:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
200023c8:	f04f 32ff 	mov.w	r2, #4294967295
200023cc:	697b      	ldr	r3, [r7, #20]
200023ce:	fa02 f303 	lsl.w	r3, r2, r3
200023d2:	43da      	mvns	r2, r3
200023d4:	68fb      	ldr	r3, [r7, #12]
200023d6:	401a      	ands	r2, r3
200023d8:	683b      	ldr	r3, [r7, #0]
200023da:	601a      	str	r2, [r3, #0]
}
200023dc:	bf00      	nop
200023de:	3724      	adds	r7, #36	; 0x24
200023e0:	46bd      	mov	sp, r7
200023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
200023e6:	4770      	bx	lr

200023e8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
200023e8:	b480      	push	{r7}
200023ea:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
200023ec:	f3bf 8f4f 	dsb	sy
}
200023f0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
200023f2:	4b06      	ldr	r3, [pc, #24]	; (2000240c <__NVIC_SystemReset+0x24>)
200023f4:	68db      	ldr	r3, [r3, #12]
200023f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
200023fa:	4904      	ldr	r1, [pc, #16]	; (2000240c <__NVIC_SystemReset+0x24>)
200023fc:	4b04      	ldr	r3, [pc, #16]	; (20002410 <__NVIC_SystemReset+0x28>)
200023fe:	4313      	orrs	r3, r2
20002400:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
20002402:	f3bf 8f4f 	dsb	sy
}
20002406:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
20002408:	bf00      	nop
2000240a:	e7fd      	b.n	20002408 <__NVIC_SystemReset+0x20>
2000240c:	e000ed00 	.word	0xe000ed00
20002410:	05fa0004 	.word	0x05fa0004

20002414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
20002414:	b580      	push	{r7, lr}
20002416:	b082      	sub	sp, #8
20002418:	af00      	add	r7, sp, #0
2000241a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
2000241c:	687b      	ldr	r3, [r7, #4]
2000241e:	3b01      	subs	r3, #1
20002420:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
20002424:	d301      	bcc.n	2000242a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
20002426:	2301      	movs	r3, #1
20002428:	e00f      	b.n	2000244a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
2000242a:	4a0a      	ldr	r2, [pc, #40]	; (20002454 <SysTick_Config+0x40>)
2000242c:	687b      	ldr	r3, [r7, #4]
2000242e:	3b01      	subs	r3, #1
20002430:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
20002432:	210f      	movs	r1, #15
20002434:	f04f 30ff 	mov.w	r0, #4294967295
20002438:	f7ff ff1a 	bl	20002270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
2000243c:	4b05      	ldr	r3, [pc, #20]	; (20002454 <SysTick_Config+0x40>)
2000243e:	2200      	movs	r2, #0
20002440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
20002442:	4b04      	ldr	r3, [pc, #16]	; (20002454 <SysTick_Config+0x40>)
20002444:	2207      	movs	r2, #7
20002446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
20002448:	2300      	movs	r3, #0
}
2000244a:	4618      	mov	r0, r3
2000244c:	3708      	adds	r7, #8
2000244e:	46bd      	mov	sp, r7
20002450:	bd80      	pop	{r7, pc}
20002452:	bf00      	nop
20002454:	e000e010 	.word	0xe000e010

20002458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
20002458:	b580      	push	{r7, lr}
2000245a:	b082      	sub	sp, #8
2000245c:	af00      	add	r7, sp, #0
2000245e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
20002460:	6878      	ldr	r0, [r7, #4]
20002462:	f7ff fe11 	bl	20002088 <__NVIC_SetPriorityGrouping>
}
20002466:	bf00      	nop
20002468:	3708      	adds	r7, #8
2000246a:	46bd      	mov	sp, r7
2000246c:	bd80      	pop	{r7, pc}

2000246e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
2000246e:	b580      	push	{r7, lr}
20002470:	b086      	sub	sp, #24
20002472:	af00      	add	r7, sp, #0
20002474:	4603      	mov	r3, r0
20002476:	60b9      	str	r1, [r7, #8]
20002478:	607a      	str	r2, [r7, #4]
2000247a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
2000247c:	2300      	movs	r3, #0
2000247e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
20002480:	f7ff fe26 	bl	200020d0 <__NVIC_GetPriorityGrouping>
20002484:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
20002486:	687a      	ldr	r2, [r7, #4]
20002488:	68b9      	ldr	r1, [r7, #8]
2000248a:	6978      	ldr	r0, [r7, #20]
2000248c:	f7ff ff42 	bl	20002314 <NVIC_EncodePriority>
20002490:	4602      	mov	r2, r0
20002492:	f997 300f 	ldrsb.w	r3, [r7, #15]
20002496:	4611      	mov	r1, r2
20002498:	4618      	mov	r0, r3
2000249a:	f7ff fee9 	bl	20002270 <__NVIC_SetPriority>
}
2000249e:	bf00      	nop
200024a0:	3718      	adds	r7, #24
200024a2:	46bd      	mov	sp, r7
200024a4:	bd80      	pop	{r7, pc}

200024a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
200024a6:	b580      	push	{r7, lr}
200024a8:	b082      	sub	sp, #8
200024aa:	af00      	add	r7, sp, #0
200024ac:	4603      	mov	r3, r0
200024ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
200024b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
200024b4:	4618      	mov	r0, r3
200024b6:	f7ff fe19 	bl	200020ec <__NVIC_EnableIRQ>
}
200024ba:	bf00      	nop
200024bc:	3708      	adds	r7, #8
200024be:	46bd      	mov	sp, r7
200024c0:	bd80      	pop	{r7, pc}

200024c2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
200024c2:	b580      	push	{r7, lr}
200024c4:	b082      	sub	sp, #8
200024c6:	af00      	add	r7, sp, #0
200024c8:	4603      	mov	r3, r0
200024ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
200024cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
200024d0:	4618      	mov	r0, r3
200024d2:	f7ff fe29 	bl	20002128 <__NVIC_DisableIRQ>
}
200024d6:	bf00      	nop
200024d8:	3708      	adds	r7, #8
200024da:	46bd      	mov	sp, r7
200024dc:	bd80      	pop	{r7, pc}

200024de <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
200024de:	b580      	push	{r7, lr}
200024e0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
200024e2:	f7ff ff81 	bl	200023e8 <__NVIC_SystemReset>

200024e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
200024e6:	b580      	push	{r7, lr}
200024e8:	b082      	sub	sp, #8
200024ea:	af00      	add	r7, sp, #0
200024ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
200024ee:	6878      	ldr	r0, [r7, #4]
200024f0:	f7ff ff90 	bl	20002414 <SysTick_Config>
200024f4:	4603      	mov	r3, r0
}
200024f6:	4618      	mov	r0, r3
200024f8:	3708      	adds	r7, #8
200024fa:	46bd      	mov	sp, r7
200024fc:	bd80      	pop	{r7, pc}
	...

20002500 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
20002500:	b480      	push	{r7}
20002502:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
20002504:	f3bf 8f5f 	dmb	sy
}
20002508:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
2000250a:	4b07      	ldr	r3, [pc, #28]	; (20002528 <HAL_MPU_Disable+0x28>)
2000250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000250e:	4a06      	ldr	r2, [pc, #24]	; (20002528 <HAL_MPU_Disable+0x28>)
20002510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20002514:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
20002516:	4b05      	ldr	r3, [pc, #20]	; (2000252c <HAL_MPU_Disable+0x2c>)
20002518:	2200      	movs	r2, #0
2000251a:	605a      	str	r2, [r3, #4]
}
2000251c:	bf00      	nop
2000251e:	46bd      	mov	sp, r7
20002520:	f85d 7b04 	ldr.w	r7, [sp], #4
20002524:	4770      	bx	lr
20002526:	bf00      	nop
20002528:	e000ed00 	.word	0xe000ed00
2000252c:	e000ed90 	.word	0xe000ed90

20002530 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
20002530:	b480      	push	{r7}
20002532:	b083      	sub	sp, #12
20002534:	af00      	add	r7, sp, #0
20002536:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
20002538:	4a0b      	ldr	r2, [pc, #44]	; (20002568 <HAL_MPU_Enable+0x38>)
2000253a:	687b      	ldr	r3, [r7, #4]
2000253c:	f043 0301 	orr.w	r3, r3, #1
20002540:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
20002542:	4b0a      	ldr	r3, [pc, #40]	; (2000256c <HAL_MPU_Enable+0x3c>)
20002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20002546:	4a09      	ldr	r2, [pc, #36]	; (2000256c <HAL_MPU_Enable+0x3c>)
20002548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000254c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
2000254e:	f3bf 8f4f 	dsb	sy
}
20002552:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
20002554:	f3bf 8f6f 	isb	sy
}
20002558:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
2000255a:	bf00      	nop
2000255c:	370c      	adds	r7, #12
2000255e:	46bd      	mov	sp, r7
20002560:	f85d 7b04 	ldr.w	r7, [sp], #4
20002564:	4770      	bx	lr
20002566:	bf00      	nop
20002568:	e000ed90 	.word	0xe000ed90
2000256c:	e000ed00 	.word	0xe000ed00

20002570 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
20002570:	b480      	push	{r7}
20002572:	b083      	sub	sp, #12
20002574:	af00      	add	r7, sp, #0
20002576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
20002578:	687b      	ldr	r3, [r7, #4]
2000257a:	785a      	ldrb	r2, [r3, #1]
2000257c:	4b1d      	ldr	r3, [pc, #116]	; (200025f4 <HAL_MPU_ConfigRegion+0x84>)
2000257e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
20002580:	687b      	ldr	r3, [r7, #4]
20002582:	781b      	ldrb	r3, [r3, #0]
20002584:	2b00      	cmp	r3, #0
20002586:	d029      	beq.n	200025dc <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
20002588:	4a1a      	ldr	r2, [pc, #104]	; (200025f4 <HAL_MPU_ConfigRegion+0x84>)
2000258a:	687b      	ldr	r3, [r7, #4]
2000258c:	685b      	ldr	r3, [r3, #4]
2000258e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
20002590:	687b      	ldr	r3, [r7, #4]
20002592:	7b1b      	ldrb	r3, [r3, #12]
20002594:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
20002596:	687b      	ldr	r3, [r7, #4]
20002598:	7adb      	ldrb	r3, [r3, #11]
2000259a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
2000259c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
2000259e:	687b      	ldr	r3, [r7, #4]
200025a0:	7a9b      	ldrb	r3, [r3, #10]
200025a2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
200025a4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
200025a6:	687b      	ldr	r3, [r7, #4]
200025a8:	7b5b      	ldrb	r3, [r3, #13]
200025aa:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
200025ac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
200025ae:	687b      	ldr	r3, [r7, #4]
200025b0:	7b9b      	ldrb	r3, [r3, #14]
200025b2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
200025b4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
200025b6:	687b      	ldr	r3, [r7, #4]
200025b8:	7bdb      	ldrb	r3, [r3, #15]
200025ba:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
200025bc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
200025be:	687b      	ldr	r3, [r7, #4]
200025c0:	7a5b      	ldrb	r3, [r3, #9]
200025c2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
200025c4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
200025c6:	687b      	ldr	r3, [r7, #4]
200025c8:	7a1b      	ldrb	r3, [r3, #8]
200025ca:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
200025cc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
200025ce:	687a      	ldr	r2, [r7, #4]
200025d0:	7812      	ldrb	r2, [r2, #0]
200025d2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
200025d4:	4a07      	ldr	r2, [pc, #28]	; (200025f4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
200025d6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
200025d8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
200025da:	e005      	b.n	200025e8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
200025dc:	4b05      	ldr	r3, [pc, #20]	; (200025f4 <HAL_MPU_ConfigRegion+0x84>)
200025de:	2200      	movs	r2, #0
200025e0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
200025e2:	4b04      	ldr	r3, [pc, #16]	; (200025f4 <HAL_MPU_ConfigRegion+0x84>)
200025e4:	2200      	movs	r2, #0
200025e6:	611a      	str	r2, [r3, #16]
}
200025e8:	bf00      	nop
200025ea:	370c      	adds	r7, #12
200025ec:	46bd      	mov	sp, r7
200025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
200025f2:	4770      	bx	lr
200025f4:	e000ed90 	.word	0xe000ed90

200025f8 <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
200025f8:	b580      	push	{r7, lr}
200025fa:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
200025fc:	f7ff fd68 	bl	200020d0 <__NVIC_GetPriorityGrouping>
20002600:	4603      	mov	r3, r0
}
20002602:	4618      	mov	r0, r3
20002604:	bd80      	pop	{r7, pc}

20002606 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
20002606:	b580      	push	{r7, lr}
20002608:	b084      	sub	sp, #16
2000260a:	af00      	add	r7, sp, #0
2000260c:	60b9      	str	r1, [r7, #8]
2000260e:	607a      	str	r2, [r7, #4]
20002610:	603b      	str	r3, [r7, #0]
20002612:	4603      	mov	r3, r0
20002614:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
20002616:	f997 300f 	ldrsb.w	r3, [r7, #15]
2000261a:	4618      	mov	r0, r3
2000261c:	f7ff fe52 	bl	200022c4 <__NVIC_GetPriority>
20002620:	683b      	ldr	r3, [r7, #0]
20002622:	687a      	ldr	r2, [r7, #4]
20002624:	68b9      	ldr	r1, [r7, #8]
20002626:	f7ff fea8 	bl	2000237a <NVIC_DecodePriority>
}
2000262a:	bf00      	nop
2000262c:	3710      	adds	r7, #16
2000262e:	46bd      	mov	sp, r7
20002630:	bd80      	pop	{r7, pc}

20002632 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
20002632:	b580      	push	{r7, lr}
20002634:	b082      	sub	sp, #8
20002636:	af00      	add	r7, sp, #0
20002638:	4603      	mov	r3, r0
2000263a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
2000263c:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002640:	4618      	mov	r0, r3
20002642:	f7ff fdb7 	bl	200021b4 <__NVIC_SetPendingIRQ>
}
20002646:	bf00      	nop
20002648:	3708      	adds	r7, #8
2000264a:	46bd      	mov	sp, r7
2000264c:	bd80      	pop	{r7, pc}

2000264e <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
2000264e:	b580      	push	{r7, lr}
20002650:	b082      	sub	sp, #8
20002652:	af00      	add	r7, sp, #0
20002654:	4603      	mov	r3, r0
20002656:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
20002658:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000265c:	4618      	mov	r0, r3
2000265e:	f7ff fd87 	bl	20002170 <__NVIC_GetPendingIRQ>
20002662:	4603      	mov	r3, r0
}
20002664:	4618      	mov	r0, r3
20002666:	3708      	adds	r7, #8
20002668:	46bd      	mov	sp, r7
2000266a:	bd80      	pop	{r7, pc}

2000266c <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
2000266c:	b580      	push	{r7, lr}
2000266e:	b082      	sub	sp, #8
20002670:	af00      	add	r7, sp, #0
20002672:	4603      	mov	r3, r0
20002674:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
20002676:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000267a:	4618      	mov	r0, r3
2000267c:	f7ff fdb8 	bl	200021f0 <__NVIC_ClearPendingIRQ>
}
20002680:	bf00      	nop
20002682:	3708      	adds	r7, #8
20002684:	46bd      	mov	sp, r7
20002686:	bd80      	pop	{r7, pc}

20002688 <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
20002688:	b580      	push	{r7, lr}
2000268a:	b082      	sub	sp, #8
2000268c:	af00      	add	r7, sp, #0
2000268e:	4603      	mov	r3, r0
20002690:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
20002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002696:	4618      	mov	r0, r3
20002698:	f7ff fdc8 	bl	2000222c <__NVIC_GetActive>
2000269c:	4603      	mov	r3, r0
}
2000269e:	4618      	mov	r0, r3
200026a0:	3708      	adds	r7, #8
200026a2:	46bd      	mov	sp, r7
200026a4:	bd80      	pop	{r7, pc}
	...

200026a8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
200026a8:	b480      	push	{r7}
200026aa:	b083      	sub	sp, #12
200026ac:	af00      	add	r7, sp, #0
200026ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
200026b0:	687b      	ldr	r3, [r7, #4]
200026b2:	2b04      	cmp	r3, #4
200026b4:	d106      	bne.n	200026c4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
200026b6:	4b09      	ldr	r3, [pc, #36]	; (200026dc <HAL_SYSTICK_CLKSourceConfig+0x34>)
200026b8:	681b      	ldr	r3, [r3, #0]
200026ba:	4a08      	ldr	r2, [pc, #32]	; (200026dc <HAL_SYSTICK_CLKSourceConfig+0x34>)
200026bc:	f043 0304 	orr.w	r3, r3, #4
200026c0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
200026c2:	e005      	b.n	200026d0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
200026c4:	4b05      	ldr	r3, [pc, #20]	; (200026dc <HAL_SYSTICK_CLKSourceConfig+0x34>)
200026c6:	681b      	ldr	r3, [r3, #0]
200026c8:	4a04      	ldr	r2, [pc, #16]	; (200026dc <HAL_SYSTICK_CLKSourceConfig+0x34>)
200026ca:	f023 0304 	bic.w	r3, r3, #4
200026ce:	6013      	str	r3, [r2, #0]
}
200026d0:	bf00      	nop
200026d2:	370c      	adds	r7, #12
200026d4:	46bd      	mov	sp, r7
200026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
200026da:	4770      	bx	lr
200026dc:	e000e010 	.word	0xe000e010

200026e0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
200026e0:	b580      	push	{r7, lr}
200026e2:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
200026e4:	f000 f802 	bl	200026ec <HAL_SYSTICK_Callback>
}
200026e8:	bf00      	nop
200026ea:	bd80      	pop	{r7, pc}

200026ec <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
200026ec:	b480      	push	{r7}
200026ee:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
200026f0:	bf00      	nop
200026f2:	46bd      	mov	sp, r7
200026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
200026f8:	4770      	bx	lr
	...

200026fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
200026fc:	b580      	push	{r7, lr}
200026fe:	b086      	sub	sp, #24
20002700:	af00      	add	r7, sp, #0
20002702:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
20002704:	2300      	movs	r3, #0
20002706:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
20002708:	f7ff fb26 	bl	20001d58 <HAL_GetTick>
2000270c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
2000270e:	687b      	ldr	r3, [r7, #4]
20002710:	2b00      	cmp	r3, #0
20002712:	d101      	bne.n	20002718 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
20002714:	2301      	movs	r3, #1
20002716:	e099      	b.n	2000284c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
20002718:	687b      	ldr	r3, [r7, #4]
2000271a:	2202      	movs	r2, #2
2000271c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
20002720:	687b      	ldr	r3, [r7, #4]
20002722:	2200      	movs	r2, #0
20002724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
20002728:	687b      	ldr	r3, [r7, #4]
2000272a:	681b      	ldr	r3, [r3, #0]
2000272c:	681a      	ldr	r2, [r3, #0]
2000272e:	687b      	ldr	r3, [r7, #4]
20002730:	681b      	ldr	r3, [r3, #0]
20002732:	f022 0201 	bic.w	r2, r2, #1
20002736:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
20002738:	e00f      	b.n	2000275a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
2000273a:	f7ff fb0d 	bl	20001d58 <HAL_GetTick>
2000273e:	4602      	mov	r2, r0
20002740:	693b      	ldr	r3, [r7, #16]
20002742:	1ad3      	subs	r3, r2, r3
20002744:	2b05      	cmp	r3, #5
20002746:	d908      	bls.n	2000275a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
20002748:	687b      	ldr	r3, [r7, #4]
2000274a:	2220      	movs	r2, #32
2000274c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
2000274e:	687b      	ldr	r3, [r7, #4]
20002750:	2203      	movs	r2, #3
20002752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
20002756:	2303      	movs	r3, #3
20002758:	e078      	b.n	2000284c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
2000275a:	687b      	ldr	r3, [r7, #4]
2000275c:	681b      	ldr	r3, [r3, #0]
2000275e:	681b      	ldr	r3, [r3, #0]
20002760:	f003 0301 	and.w	r3, r3, #1
20002764:	2b00      	cmp	r3, #0
20002766:	d1e8      	bne.n	2000273a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
20002768:	687b      	ldr	r3, [r7, #4]
2000276a:	681b      	ldr	r3, [r3, #0]
2000276c:	681b      	ldr	r3, [r3, #0]
2000276e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
20002770:	697a      	ldr	r2, [r7, #20]
20002772:	4b38      	ldr	r3, [pc, #224]	; (20002854 <HAL_DMA_Init+0x158>)
20002774:	4013      	ands	r3, r2
20002776:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
20002778:	687b      	ldr	r3, [r7, #4]
2000277a:	685a      	ldr	r2, [r3, #4]
2000277c:	687b      	ldr	r3, [r7, #4]
2000277e:	689b      	ldr	r3, [r3, #8]
20002780:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
20002782:	687b      	ldr	r3, [r7, #4]
20002784:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
20002786:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
20002788:	687b      	ldr	r3, [r7, #4]
2000278a:	691b      	ldr	r3, [r3, #16]
2000278c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
2000278e:	687b      	ldr	r3, [r7, #4]
20002790:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
20002792:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
20002794:	687b      	ldr	r3, [r7, #4]
20002796:	699b      	ldr	r3, [r3, #24]
20002798:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
2000279a:	687b      	ldr	r3, [r7, #4]
2000279c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
2000279e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
200027a0:	687b      	ldr	r3, [r7, #4]
200027a2:	6a1b      	ldr	r3, [r3, #32]
200027a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
200027a6:	697a      	ldr	r2, [r7, #20]
200027a8:	4313      	orrs	r3, r2
200027aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
200027ac:	687b      	ldr	r3, [r7, #4]
200027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200027b0:	2b04      	cmp	r3, #4
200027b2:	d107      	bne.n	200027c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
200027b4:	687b      	ldr	r3, [r7, #4]
200027b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200027b8:	687b      	ldr	r3, [r7, #4]
200027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200027bc:	4313      	orrs	r3, r2
200027be:	697a      	ldr	r2, [r7, #20]
200027c0:	4313      	orrs	r3, r2
200027c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
200027c4:	687b      	ldr	r3, [r7, #4]
200027c6:	681b      	ldr	r3, [r3, #0]
200027c8:	697a      	ldr	r2, [r7, #20]
200027ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
200027cc:	687b      	ldr	r3, [r7, #4]
200027ce:	681b      	ldr	r3, [r3, #0]
200027d0:	695b      	ldr	r3, [r3, #20]
200027d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
200027d4:	697b      	ldr	r3, [r7, #20]
200027d6:	f023 0307 	bic.w	r3, r3, #7
200027da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
200027dc:	687b      	ldr	r3, [r7, #4]
200027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200027e0:	697a      	ldr	r2, [r7, #20]
200027e2:	4313      	orrs	r3, r2
200027e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
200027e6:	687b      	ldr	r3, [r7, #4]
200027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200027ea:	2b04      	cmp	r3, #4
200027ec:	d117      	bne.n	2000281e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
200027ee:	687b      	ldr	r3, [r7, #4]
200027f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
200027f2:	697a      	ldr	r2, [r7, #20]
200027f4:	4313      	orrs	r3, r2
200027f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
200027f8:	687b      	ldr	r3, [r7, #4]
200027fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200027fc:	2b00      	cmp	r3, #0
200027fe:	d00e      	beq.n	2000281e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
20002800:	6878      	ldr	r0, [r7, #4]
20002802:	f000 fd59 	bl	200032b8 <DMA_CheckFifoParam>
20002806:	4603      	mov	r3, r0
20002808:	2b00      	cmp	r3, #0
2000280a:	d008      	beq.n	2000281e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
2000280c:	687b      	ldr	r3, [r7, #4]
2000280e:	2240      	movs	r2, #64	; 0x40
20002810:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
20002812:	687b      	ldr	r3, [r7, #4]
20002814:	2201      	movs	r2, #1
20002816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
2000281a:	2301      	movs	r3, #1
2000281c:	e016      	b.n	2000284c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
2000281e:	687b      	ldr	r3, [r7, #4]
20002820:	681b      	ldr	r3, [r3, #0]
20002822:	697a      	ldr	r2, [r7, #20]
20002824:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
20002826:	6878      	ldr	r0, [r7, #4]
20002828:	f000 fd10 	bl	2000324c <DMA_CalcBaseAndBitshift>
2000282c:	4603      	mov	r3, r0
2000282e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
20002830:	687b      	ldr	r3, [r7, #4]
20002832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002834:	223f      	movs	r2, #63	; 0x3f
20002836:	409a      	lsls	r2, r3
20002838:	68fb      	ldr	r3, [r7, #12]
2000283a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
2000283c:	687b      	ldr	r3, [r7, #4]
2000283e:	2200      	movs	r2, #0
20002840:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
20002842:	687b      	ldr	r3, [r7, #4]
20002844:	2201      	movs	r2, #1
20002846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
2000284a:	2300      	movs	r3, #0
}
2000284c:	4618      	mov	r0, r3
2000284e:	3718      	adds	r7, #24
20002850:	46bd      	mov	sp, r7
20002852:	bd80      	pop	{r7, pc}
20002854:	e010803f 	.word	0xe010803f

20002858 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
20002858:	b580      	push	{r7, lr}
2000285a:	b084      	sub	sp, #16
2000285c:	af00      	add	r7, sp, #0
2000285e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
20002860:	687b      	ldr	r3, [r7, #4]
20002862:	2b00      	cmp	r3, #0
20002864:	d101      	bne.n	2000286a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
20002866:	2301      	movs	r3, #1
20002868:	e050      	b.n	2000290c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
2000286a:	687b      	ldr	r3, [r7, #4]
2000286c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20002870:	b2db      	uxtb	r3, r3
20002872:	2b02      	cmp	r3, #2
20002874:	d101      	bne.n	2000287a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
20002876:	2302      	movs	r3, #2
20002878:	e048      	b.n	2000290c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
2000287a:	687b      	ldr	r3, [r7, #4]
2000287c:	681b      	ldr	r3, [r3, #0]
2000287e:	681a      	ldr	r2, [r3, #0]
20002880:	687b      	ldr	r3, [r7, #4]
20002882:	681b      	ldr	r3, [r3, #0]
20002884:	f022 0201 	bic.w	r2, r2, #1
20002888:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
2000288a:	687b      	ldr	r3, [r7, #4]
2000288c:	681b      	ldr	r3, [r3, #0]
2000288e:	2200      	movs	r2, #0
20002890:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
20002892:	687b      	ldr	r3, [r7, #4]
20002894:	681b      	ldr	r3, [r3, #0]
20002896:	2200      	movs	r2, #0
20002898:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
2000289a:	687b      	ldr	r3, [r7, #4]
2000289c:	681b      	ldr	r3, [r3, #0]
2000289e:	2200      	movs	r2, #0
200028a0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
200028a2:	687b      	ldr	r3, [r7, #4]
200028a4:	681b      	ldr	r3, [r3, #0]
200028a6:	2200      	movs	r2, #0
200028a8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
200028aa:	687b      	ldr	r3, [r7, #4]
200028ac:	681b      	ldr	r3, [r3, #0]
200028ae:	2200      	movs	r2, #0
200028b0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
200028b2:	687b      	ldr	r3, [r7, #4]
200028b4:	681b      	ldr	r3, [r3, #0]
200028b6:	2221      	movs	r2, #33	; 0x21
200028b8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
200028ba:	6878      	ldr	r0, [r7, #4]
200028bc:	f000 fcc6 	bl	2000324c <DMA_CalcBaseAndBitshift>
200028c0:	4603      	mov	r3, r0
200028c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
200028c4:	687b      	ldr	r3, [r7, #4]
200028c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
200028c8:	223f      	movs	r2, #63	; 0x3f
200028ca:	409a      	lsls	r2, r3
200028cc:	68fb      	ldr	r3, [r7, #12]
200028ce:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
200028d0:	687b      	ldr	r3, [r7, #4]
200028d2:	2200      	movs	r2, #0
200028d4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
200028d6:	687b      	ldr	r3, [r7, #4]
200028d8:	2200      	movs	r2, #0
200028da:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
200028dc:	687b      	ldr	r3, [r7, #4]
200028de:	2200      	movs	r2, #0
200028e0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
200028e2:	687b      	ldr	r3, [r7, #4]
200028e4:	2200      	movs	r2, #0
200028e6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
200028e8:	687b      	ldr	r3, [r7, #4]
200028ea:	2200      	movs	r2, #0
200028ec:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
200028ee:	687b      	ldr	r3, [r7, #4]
200028f0:	2200      	movs	r2, #0
200028f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
200028f4:	687b      	ldr	r3, [r7, #4]
200028f6:	2200      	movs	r2, #0
200028f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
200028fa:	687b      	ldr	r3, [r7, #4]
200028fc:	2200      	movs	r2, #0
200028fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
20002902:	687b      	ldr	r3, [r7, #4]
20002904:	2200      	movs	r2, #0
20002906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
2000290a:	2300      	movs	r3, #0
}
2000290c:	4618      	mov	r0, r3
2000290e:	3710      	adds	r7, #16
20002910:	46bd      	mov	sp, r7
20002912:	bd80      	pop	{r7, pc}

20002914 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
20002914:	b580      	push	{r7, lr}
20002916:	b086      	sub	sp, #24
20002918:	af00      	add	r7, sp, #0
2000291a:	60f8      	str	r0, [r7, #12]
2000291c:	60b9      	str	r1, [r7, #8]
2000291e:	607a      	str	r2, [r7, #4]
20002920:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
20002922:	2300      	movs	r3, #0
20002924:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
20002926:	68fb      	ldr	r3, [r7, #12]
20002928:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
2000292c:	2b01      	cmp	r3, #1
2000292e:	d101      	bne.n	20002934 <HAL_DMA_Start+0x20>
20002930:	2302      	movs	r3, #2
20002932:	e026      	b.n	20002982 <HAL_DMA_Start+0x6e>
20002934:	68fb      	ldr	r3, [r7, #12]
20002936:	2201      	movs	r2, #1
20002938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
2000293c:	68fb      	ldr	r3, [r7, #12]
2000293e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20002942:	b2db      	uxtb	r3, r3
20002944:	2b01      	cmp	r3, #1
20002946:	d115      	bne.n	20002974 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
20002948:	68fb      	ldr	r3, [r7, #12]
2000294a:	2202      	movs	r2, #2
2000294c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
20002950:	68fb      	ldr	r3, [r7, #12]
20002952:	2200      	movs	r2, #0
20002954:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
20002956:	683b      	ldr	r3, [r7, #0]
20002958:	687a      	ldr	r2, [r7, #4]
2000295a:	68b9      	ldr	r1, [r7, #8]
2000295c:	68f8      	ldr	r0, [r7, #12]
2000295e:	f000 fc47 	bl	200031f0 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
20002962:	68fb      	ldr	r3, [r7, #12]
20002964:	681b      	ldr	r3, [r3, #0]
20002966:	681a      	ldr	r2, [r3, #0]
20002968:	68fb      	ldr	r3, [r7, #12]
2000296a:	681b      	ldr	r3, [r3, #0]
2000296c:	f042 0201 	orr.w	r2, r2, #1
20002970:	601a      	str	r2, [r3, #0]
20002972:	e005      	b.n	20002980 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
20002974:	68fb      	ldr	r3, [r7, #12]
20002976:	2200      	movs	r2, #0
20002978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
2000297c:	2302      	movs	r3, #2
2000297e:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
20002980:	7dfb      	ldrb	r3, [r7, #23]
}
20002982:	4618      	mov	r0, r3
20002984:	3718      	adds	r7, #24
20002986:	46bd      	mov	sp, r7
20002988:	bd80      	pop	{r7, pc}

2000298a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
2000298a:	b580      	push	{r7, lr}
2000298c:	b086      	sub	sp, #24
2000298e:	af00      	add	r7, sp, #0
20002990:	60f8      	str	r0, [r7, #12]
20002992:	60b9      	str	r1, [r7, #8]
20002994:	607a      	str	r2, [r7, #4]
20002996:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
20002998:	2300      	movs	r3, #0
2000299a:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
2000299c:	68fb      	ldr	r3, [r7, #12]
2000299e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
200029a0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
200029a2:	68fb      	ldr	r3, [r7, #12]
200029a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
200029a8:	2b01      	cmp	r3, #1
200029aa:	d101      	bne.n	200029b0 <HAL_DMA_Start_IT+0x26>
200029ac:	2302      	movs	r3, #2
200029ae:	e048      	b.n	20002a42 <HAL_DMA_Start_IT+0xb8>
200029b0:	68fb      	ldr	r3, [r7, #12]
200029b2:	2201      	movs	r2, #1
200029b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
200029b8:	68fb      	ldr	r3, [r7, #12]
200029ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
200029be:	b2db      	uxtb	r3, r3
200029c0:	2b01      	cmp	r3, #1
200029c2:	d137      	bne.n	20002a34 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
200029c4:	68fb      	ldr	r3, [r7, #12]
200029c6:	2202      	movs	r2, #2
200029c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
200029cc:	68fb      	ldr	r3, [r7, #12]
200029ce:	2200      	movs	r2, #0
200029d0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
200029d2:	683b      	ldr	r3, [r7, #0]
200029d4:	687a      	ldr	r2, [r7, #4]
200029d6:	68b9      	ldr	r1, [r7, #8]
200029d8:	68f8      	ldr	r0, [r7, #12]
200029da:	f000 fc09 	bl	200031f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
200029de:	68fb      	ldr	r3, [r7, #12]
200029e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
200029e2:	223f      	movs	r2, #63	; 0x3f
200029e4:	409a      	lsls	r2, r3
200029e6:	693b      	ldr	r3, [r7, #16]
200029e8:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
200029ea:	68fb      	ldr	r3, [r7, #12]
200029ec:	681b      	ldr	r3, [r3, #0]
200029ee:	681a      	ldr	r2, [r3, #0]
200029f0:	68fb      	ldr	r3, [r7, #12]
200029f2:	681b      	ldr	r3, [r3, #0]
200029f4:	f042 0216 	orr.w	r2, r2, #22
200029f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
200029fa:	68fb      	ldr	r3, [r7, #12]
200029fc:	681b      	ldr	r3, [r3, #0]
200029fe:	695a      	ldr	r2, [r3, #20]
20002a00:	68fb      	ldr	r3, [r7, #12]
20002a02:	681b      	ldr	r3, [r3, #0]
20002a04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
20002a08:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
20002a0a:	68fb      	ldr	r3, [r7, #12]
20002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002a0e:	2b00      	cmp	r3, #0
20002a10:	d007      	beq.n	20002a22 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
20002a12:	68fb      	ldr	r3, [r7, #12]
20002a14:	681b      	ldr	r3, [r3, #0]
20002a16:	681a      	ldr	r2, [r3, #0]
20002a18:	68fb      	ldr	r3, [r7, #12]
20002a1a:	681b      	ldr	r3, [r3, #0]
20002a1c:	f042 0208 	orr.w	r2, r2, #8
20002a20:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
20002a22:	68fb      	ldr	r3, [r7, #12]
20002a24:	681b      	ldr	r3, [r3, #0]
20002a26:	681a      	ldr	r2, [r3, #0]
20002a28:	68fb      	ldr	r3, [r7, #12]
20002a2a:	681b      	ldr	r3, [r3, #0]
20002a2c:	f042 0201 	orr.w	r2, r2, #1
20002a30:	601a      	str	r2, [r3, #0]
20002a32:	e005      	b.n	20002a40 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
20002a34:	68fb      	ldr	r3, [r7, #12]
20002a36:	2200      	movs	r2, #0
20002a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
20002a3c:	2302      	movs	r3, #2
20002a3e:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
20002a40:	7dfb      	ldrb	r3, [r7, #23]
}
20002a42:	4618      	mov	r0, r3
20002a44:	3718      	adds	r7, #24
20002a46:	46bd      	mov	sp, r7
20002a48:	bd80      	pop	{r7, pc}

20002a4a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
20002a4a:	b580      	push	{r7, lr}
20002a4c:	b084      	sub	sp, #16
20002a4e:	af00      	add	r7, sp, #0
20002a50:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
20002a52:	687b      	ldr	r3, [r7, #4]
20002a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
20002a56:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
20002a58:	f7ff f97e 	bl	20001d58 <HAL_GetTick>
20002a5c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
20002a5e:	687b      	ldr	r3, [r7, #4]
20002a60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20002a64:	b2db      	uxtb	r3, r3
20002a66:	2b02      	cmp	r3, #2
20002a68:	d008      	beq.n	20002a7c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
20002a6a:	687b      	ldr	r3, [r7, #4]
20002a6c:	2280      	movs	r2, #128	; 0x80
20002a6e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
20002a70:	687b      	ldr	r3, [r7, #4]
20002a72:	2200      	movs	r2, #0
20002a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
20002a78:	2301      	movs	r3, #1
20002a7a:	e052      	b.n	20002b22 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
20002a7c:	687b      	ldr	r3, [r7, #4]
20002a7e:	681b      	ldr	r3, [r3, #0]
20002a80:	681a      	ldr	r2, [r3, #0]
20002a82:	687b      	ldr	r3, [r7, #4]
20002a84:	681b      	ldr	r3, [r3, #0]
20002a86:	f022 0216 	bic.w	r2, r2, #22
20002a8a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
20002a8c:	687b      	ldr	r3, [r7, #4]
20002a8e:	681b      	ldr	r3, [r3, #0]
20002a90:	695a      	ldr	r2, [r3, #20]
20002a92:	687b      	ldr	r3, [r7, #4]
20002a94:	681b      	ldr	r3, [r3, #0]
20002a96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
20002a9a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
20002a9c:	687b      	ldr	r3, [r7, #4]
20002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002aa0:	2b00      	cmp	r3, #0
20002aa2:	d103      	bne.n	20002aac <HAL_DMA_Abort+0x62>
20002aa4:	687b      	ldr	r3, [r7, #4]
20002aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20002aa8:	2b00      	cmp	r3, #0
20002aaa:	d007      	beq.n	20002abc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
20002aac:	687b      	ldr	r3, [r7, #4]
20002aae:	681b      	ldr	r3, [r3, #0]
20002ab0:	681a      	ldr	r2, [r3, #0]
20002ab2:	687b      	ldr	r3, [r7, #4]
20002ab4:	681b      	ldr	r3, [r3, #0]
20002ab6:	f022 0208 	bic.w	r2, r2, #8
20002aba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
20002abc:	687b      	ldr	r3, [r7, #4]
20002abe:	681b      	ldr	r3, [r3, #0]
20002ac0:	681a      	ldr	r2, [r3, #0]
20002ac2:	687b      	ldr	r3, [r7, #4]
20002ac4:	681b      	ldr	r3, [r3, #0]
20002ac6:	f022 0201 	bic.w	r2, r2, #1
20002aca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
20002acc:	e013      	b.n	20002af6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
20002ace:	f7ff f943 	bl	20001d58 <HAL_GetTick>
20002ad2:	4602      	mov	r2, r0
20002ad4:	68bb      	ldr	r3, [r7, #8]
20002ad6:	1ad3      	subs	r3, r2, r3
20002ad8:	2b05      	cmp	r3, #5
20002ada:	d90c      	bls.n	20002af6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
20002adc:	687b      	ldr	r3, [r7, #4]
20002ade:	2220      	movs	r2, #32
20002ae0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
20002ae2:	687b      	ldr	r3, [r7, #4]
20002ae4:	2203      	movs	r2, #3
20002ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
20002aea:	687b      	ldr	r3, [r7, #4]
20002aec:	2200      	movs	r2, #0
20002aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
20002af2:	2303      	movs	r3, #3
20002af4:	e015      	b.n	20002b22 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
20002af6:	687b      	ldr	r3, [r7, #4]
20002af8:	681b      	ldr	r3, [r3, #0]
20002afa:	681b      	ldr	r3, [r3, #0]
20002afc:	f003 0301 	and.w	r3, r3, #1
20002b00:	2b00      	cmp	r3, #0
20002b02:	d1e4      	bne.n	20002ace <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
20002b04:	687b      	ldr	r3, [r7, #4]
20002b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002b08:	223f      	movs	r2, #63	; 0x3f
20002b0a:	409a      	lsls	r2, r3
20002b0c:	68fb      	ldr	r3, [r7, #12]
20002b0e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
20002b10:	687b      	ldr	r3, [r7, #4]
20002b12:	2201      	movs	r2, #1
20002b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
20002b18:	687b      	ldr	r3, [r7, #4]
20002b1a:	2200      	movs	r2, #0
20002b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
20002b20:	2300      	movs	r3, #0
}
20002b22:	4618      	mov	r0, r3
20002b24:	3710      	adds	r7, #16
20002b26:	46bd      	mov	sp, r7
20002b28:	bd80      	pop	{r7, pc}

20002b2a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
20002b2a:	b480      	push	{r7}
20002b2c:	b083      	sub	sp, #12
20002b2e:	af00      	add	r7, sp, #0
20002b30:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
20002b32:	687b      	ldr	r3, [r7, #4]
20002b34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20002b38:	b2db      	uxtb	r3, r3
20002b3a:	2b02      	cmp	r3, #2
20002b3c:	d004      	beq.n	20002b48 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
20002b3e:	687b      	ldr	r3, [r7, #4]
20002b40:	2280      	movs	r2, #128	; 0x80
20002b42:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
20002b44:	2301      	movs	r3, #1
20002b46:	e00c      	b.n	20002b62 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
20002b48:	687b      	ldr	r3, [r7, #4]
20002b4a:	2205      	movs	r2, #5
20002b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
20002b50:	687b      	ldr	r3, [r7, #4]
20002b52:	681b      	ldr	r3, [r3, #0]
20002b54:	681a      	ldr	r2, [r3, #0]
20002b56:	687b      	ldr	r3, [r7, #4]
20002b58:	681b      	ldr	r3, [r3, #0]
20002b5a:	f022 0201 	bic.w	r2, r2, #1
20002b5e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
20002b60:	2300      	movs	r3, #0
}
20002b62:	4618      	mov	r0, r3
20002b64:	370c      	adds	r7, #12
20002b66:	46bd      	mov	sp, r7
20002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
20002b6c:	4770      	bx	lr

20002b6e <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
20002b6e:	b580      	push	{r7, lr}
20002b70:	b08a      	sub	sp, #40	; 0x28
20002b72:	af00      	add	r7, sp, #0
20002b74:	60f8      	str	r0, [r7, #12]
20002b76:	460b      	mov	r3, r1
20002b78:	607a      	str	r2, [r7, #4]
20002b7a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
20002b7c:	2300      	movs	r3, #0
20002b7e:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
20002b80:	f7ff f8ea 	bl	20001d58 <HAL_GetTick>
20002b84:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
20002b86:	68fb      	ldr	r3, [r7, #12]
20002b88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20002b8c:	b2db      	uxtb	r3, r3
20002b8e:	2b02      	cmp	r3, #2
20002b90:	d008      	beq.n	20002ba4 <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
20002b92:	68fb      	ldr	r3, [r7, #12]
20002b94:	2280      	movs	r2, #128	; 0x80
20002b96:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
20002b98:	68fb      	ldr	r3, [r7, #12]
20002b9a:	2200      	movs	r2, #0
20002b9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
20002ba0:	2301      	movs	r3, #1
20002ba2:	e0bf      	b.n	20002d24 <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
20002ba4:	68fb      	ldr	r3, [r7, #12]
20002ba6:	681b      	ldr	r3, [r3, #0]
20002ba8:	681b      	ldr	r3, [r3, #0]
20002baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
20002bae:	2b00      	cmp	r3, #0
20002bb0:	d005      	beq.n	20002bbe <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
20002bb2:	68fb      	ldr	r3, [r7, #12]
20002bb4:	f44f 7280 	mov.w	r2, #256	; 0x100
20002bb8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
20002bba:	2301      	movs	r3, #1
20002bbc:	e0b2      	b.n	20002d24 <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
20002bbe:	7afb      	ldrb	r3, [r7, #11]
20002bc0:	2b00      	cmp	r3, #0
20002bc2:	d106      	bne.n	20002bd2 <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
20002bc4:	68fb      	ldr	r3, [r7, #12]
20002bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002bc8:	2220      	movs	r2, #32
20002bca:	fa02 f303 	lsl.w	r3, r2, r3
20002bce:	627b      	str	r3, [r7, #36]	; 0x24
20002bd0:	e005      	b.n	20002bde <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
20002bd2:	68fb      	ldr	r3, [r7, #12]
20002bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002bd6:	2210      	movs	r2, #16
20002bd8:	fa02 f303 	lsl.w	r3, r2, r3
20002bdc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
20002bde:	68fb      	ldr	r3, [r7, #12]
20002be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
20002be2:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
20002be4:	697b      	ldr	r3, [r7, #20]
20002be6:	681b      	ldr	r3, [r3, #0]
20002be8:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
20002bea:	e05a      	b.n	20002ca2 <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
20002bec:	687b      	ldr	r3, [r7, #4]
20002bee:	f1b3 3fff 	cmp.w	r3, #4294967295
20002bf2:	d017      	beq.n	20002c24 <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
20002bf4:	687b      	ldr	r3, [r7, #4]
20002bf6:	2b00      	cmp	r3, #0
20002bf8:	d007      	beq.n	20002c0a <HAL_DMA_PollForTransfer+0x9c>
20002bfa:	f7ff f8ad 	bl	20001d58 <HAL_GetTick>
20002bfe:	4602      	mov	r2, r0
20002c00:	69bb      	ldr	r3, [r7, #24]
20002c02:	1ad3      	subs	r3, r2, r3
20002c04:	687a      	ldr	r2, [r7, #4]
20002c06:	429a      	cmp	r2, r3
20002c08:	d20c      	bcs.n	20002c24 <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
20002c0a:	68fb      	ldr	r3, [r7, #12]
20002c0c:	2220      	movs	r2, #32
20002c0e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
20002c10:	68fb      	ldr	r3, [r7, #12]
20002c12:	2201      	movs	r2, #1
20002c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
20002c18:	68fb      	ldr	r3, [r7, #12]
20002c1a:	2200      	movs	r2, #0
20002c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
20002c20:	2303      	movs	r3, #3
20002c22:	e07f      	b.n	20002d24 <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
20002c24:	697b      	ldr	r3, [r7, #20]
20002c26:	681b      	ldr	r3, [r3, #0]
20002c28:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
20002c2a:	68fb      	ldr	r3, [r7, #12]
20002c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002c2e:	2208      	movs	r2, #8
20002c30:	409a      	lsls	r2, r3
20002c32:	6a3b      	ldr	r3, [r7, #32]
20002c34:	4013      	ands	r3, r2
20002c36:	2b00      	cmp	r3, #0
20002c38:	d00b      	beq.n	20002c52 <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
20002c3a:	68fb      	ldr	r3, [r7, #12]
20002c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002c3e:	f043 0201 	orr.w	r2, r3, #1
20002c42:	68fb      	ldr	r3, [r7, #12]
20002c44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
20002c46:	68fb      	ldr	r3, [r7, #12]
20002c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002c4a:	2208      	movs	r2, #8
20002c4c:	409a      	lsls	r2, r3
20002c4e:	697b      	ldr	r3, [r7, #20]
20002c50:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
20002c52:	68fb      	ldr	r3, [r7, #12]
20002c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002c56:	2201      	movs	r2, #1
20002c58:	409a      	lsls	r2, r3
20002c5a:	6a3b      	ldr	r3, [r7, #32]
20002c5c:	4013      	ands	r3, r2
20002c5e:	2b00      	cmp	r3, #0
20002c60:	d00b      	beq.n	20002c7a <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
20002c62:	68fb      	ldr	r3, [r7, #12]
20002c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002c66:	f043 0202 	orr.w	r2, r3, #2
20002c6a:	68fb      	ldr	r3, [r7, #12]
20002c6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
20002c6e:	68fb      	ldr	r3, [r7, #12]
20002c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002c72:	2201      	movs	r2, #1
20002c74:	409a      	lsls	r2, r3
20002c76:	697b      	ldr	r3, [r7, #20]
20002c78:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
20002c7a:	68fb      	ldr	r3, [r7, #12]
20002c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002c7e:	2204      	movs	r2, #4
20002c80:	409a      	lsls	r2, r3
20002c82:	6a3b      	ldr	r3, [r7, #32]
20002c84:	4013      	ands	r3, r2
20002c86:	2b00      	cmp	r3, #0
20002c88:	d00b      	beq.n	20002ca2 <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
20002c8a:	68fb      	ldr	r3, [r7, #12]
20002c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002c8e:	f043 0204 	orr.w	r2, r3, #4
20002c92:	68fb      	ldr	r3, [r7, #12]
20002c94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
20002c96:	68fb      	ldr	r3, [r7, #12]
20002c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002c9a:	2204      	movs	r2, #4
20002c9c:	409a      	lsls	r2, r3
20002c9e:	697b      	ldr	r3, [r7, #20]
20002ca0:	609a      	str	r2, [r3, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
20002ca2:	6a3a      	ldr	r2, [r7, #32]
20002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002ca6:	4013      	ands	r3, r2
20002ca8:	2b00      	cmp	r3, #0
20002caa:	d105      	bne.n	20002cb8 <HAL_DMA_PollForTransfer+0x14a>
20002cac:	68fb      	ldr	r3, [r7, #12]
20002cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002cb0:	f003 0301 	and.w	r3, r3, #1
20002cb4:	2b00      	cmp	r3, #0
20002cb6:	d099      	beq.n	20002bec <HAL_DMA_PollForTransfer+0x7e>
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
20002cb8:	68fb      	ldr	r3, [r7, #12]
20002cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002cbc:	2b00      	cmp	r3, #0
20002cbe:	d018      	beq.n	20002cf2 <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
20002cc0:	68fb      	ldr	r3, [r7, #12]
20002cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002cc4:	f003 0301 	and.w	r3, r3, #1
20002cc8:	2b00      	cmp	r3, #0
20002cca:	d012      	beq.n	20002cf2 <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
20002ccc:	68f8      	ldr	r0, [r7, #12]
20002cce:	f7ff febc 	bl	20002a4a <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
20002cd2:	68fb      	ldr	r3, [r7, #12]
20002cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002cd6:	2230      	movs	r2, #48	; 0x30
20002cd8:	409a      	lsls	r2, r3
20002cda:	697b      	ldr	r3, [r7, #20]
20002cdc:	609a      	str	r2, [r3, #8]
    
      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
20002cde:	68fb      	ldr	r3, [r7, #12]
20002ce0:	2201      	movs	r2, #1
20002ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
20002ce6:	68fb      	ldr	r3, [r7, #12]
20002ce8:	2200      	movs	r2, #0
20002cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_ERROR;
20002cee:	2301      	movs	r3, #1
20002cf0:	e018      	b.n	20002d24 <HAL_DMA_PollForTransfer+0x1b6>
   }
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
20002cf2:	7afb      	ldrb	r3, [r7, #11]
20002cf4:	2b00      	cmp	r3, #0
20002cf6:	d10e      	bne.n	20002d16 <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
20002cf8:	68fb      	ldr	r3, [r7, #12]
20002cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002cfc:	2230      	movs	r2, #48	; 0x30
20002cfe:	409a      	lsls	r2, r3
20002d00:	697b      	ldr	r3, [r7, #20]
20002d02:	609a      	str	r2, [r3, #8]
    
    hdma->State = HAL_DMA_STATE_READY;
20002d04:	68fb      	ldr	r3, [r7, #12]
20002d06:	2201      	movs	r2, #1
20002d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
20002d0c:	68fb      	ldr	r3, [r7, #12]
20002d0e:	2200      	movs	r2, #0
20002d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
20002d14:	e005      	b.n	20002d22 <HAL_DMA_PollForTransfer+0x1b4>

  }
  else
  {
    /* Clear the half transfer flag */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
20002d16:	68fb      	ldr	r3, [r7, #12]
20002d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002d1a:	2210      	movs	r2, #16
20002d1c:	409a      	lsls	r2, r3
20002d1e:	697b      	ldr	r3, [r7, #20]
20002d20:	609a      	str	r2, [r3, #8]
  }
  
  return status;
20002d22:	7ffb      	ldrb	r3, [r7, #31]
}
20002d24:	4618      	mov	r0, r3
20002d26:	3728      	adds	r7, #40	; 0x28
20002d28:	46bd      	mov	sp, r7
20002d2a:	bd80      	pop	{r7, pc}

20002d2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
20002d2c:	b580      	push	{r7, lr}
20002d2e:	b086      	sub	sp, #24
20002d30:	af00      	add	r7, sp, #0
20002d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
20002d34:	2300      	movs	r3, #0
20002d36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
20002d38:	4b92      	ldr	r3, [pc, #584]	; (20002f84 <HAL_DMA_IRQHandler+0x258>)
20002d3a:	681b      	ldr	r3, [r3, #0]
20002d3c:	4a92      	ldr	r2, [pc, #584]	; (20002f88 <HAL_DMA_IRQHandler+0x25c>)
20002d3e:	fba2 2303 	umull	r2, r3, r2, r3
20002d42:	0a9b      	lsrs	r3, r3, #10
20002d44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
20002d46:	687b      	ldr	r3, [r7, #4]
20002d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
20002d4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
20002d4c:	693b      	ldr	r3, [r7, #16]
20002d4e:	681b      	ldr	r3, [r3, #0]
20002d50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
20002d52:	687b      	ldr	r3, [r7, #4]
20002d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002d56:	2208      	movs	r2, #8
20002d58:	409a      	lsls	r2, r3
20002d5a:	68fb      	ldr	r3, [r7, #12]
20002d5c:	4013      	ands	r3, r2
20002d5e:	2b00      	cmp	r3, #0
20002d60:	d01a      	beq.n	20002d98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
20002d62:	687b      	ldr	r3, [r7, #4]
20002d64:	681b      	ldr	r3, [r3, #0]
20002d66:	681b      	ldr	r3, [r3, #0]
20002d68:	f003 0304 	and.w	r3, r3, #4
20002d6c:	2b00      	cmp	r3, #0
20002d6e:	d013      	beq.n	20002d98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
20002d70:	687b      	ldr	r3, [r7, #4]
20002d72:	681b      	ldr	r3, [r3, #0]
20002d74:	681a      	ldr	r2, [r3, #0]
20002d76:	687b      	ldr	r3, [r7, #4]
20002d78:	681b      	ldr	r3, [r3, #0]
20002d7a:	f022 0204 	bic.w	r2, r2, #4
20002d7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
20002d80:	687b      	ldr	r3, [r7, #4]
20002d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002d84:	2208      	movs	r2, #8
20002d86:	409a      	lsls	r2, r3
20002d88:	693b      	ldr	r3, [r7, #16]
20002d8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
20002d8c:	687b      	ldr	r3, [r7, #4]
20002d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002d90:	f043 0201 	orr.w	r2, r3, #1
20002d94:	687b      	ldr	r3, [r7, #4]
20002d96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
20002d98:	687b      	ldr	r3, [r7, #4]
20002d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002d9c:	2201      	movs	r2, #1
20002d9e:	409a      	lsls	r2, r3
20002da0:	68fb      	ldr	r3, [r7, #12]
20002da2:	4013      	ands	r3, r2
20002da4:	2b00      	cmp	r3, #0
20002da6:	d012      	beq.n	20002dce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
20002da8:	687b      	ldr	r3, [r7, #4]
20002daa:	681b      	ldr	r3, [r3, #0]
20002dac:	695b      	ldr	r3, [r3, #20]
20002dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
20002db2:	2b00      	cmp	r3, #0
20002db4:	d00b      	beq.n	20002dce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
20002db6:	687b      	ldr	r3, [r7, #4]
20002db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002dba:	2201      	movs	r2, #1
20002dbc:	409a      	lsls	r2, r3
20002dbe:	693b      	ldr	r3, [r7, #16]
20002dc0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
20002dc2:	687b      	ldr	r3, [r7, #4]
20002dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002dc6:	f043 0202 	orr.w	r2, r3, #2
20002dca:	687b      	ldr	r3, [r7, #4]
20002dcc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
20002dce:	687b      	ldr	r3, [r7, #4]
20002dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002dd2:	2204      	movs	r2, #4
20002dd4:	409a      	lsls	r2, r3
20002dd6:	68fb      	ldr	r3, [r7, #12]
20002dd8:	4013      	ands	r3, r2
20002dda:	2b00      	cmp	r3, #0
20002ddc:	d012      	beq.n	20002e04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
20002dde:	687b      	ldr	r3, [r7, #4]
20002de0:	681b      	ldr	r3, [r3, #0]
20002de2:	681b      	ldr	r3, [r3, #0]
20002de4:	f003 0302 	and.w	r3, r3, #2
20002de8:	2b00      	cmp	r3, #0
20002dea:	d00b      	beq.n	20002e04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
20002dec:	687b      	ldr	r3, [r7, #4]
20002dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002df0:	2204      	movs	r2, #4
20002df2:	409a      	lsls	r2, r3
20002df4:	693b      	ldr	r3, [r7, #16]
20002df6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
20002df8:	687b      	ldr	r3, [r7, #4]
20002dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002dfc:	f043 0204 	orr.w	r2, r3, #4
20002e00:	687b      	ldr	r3, [r7, #4]
20002e02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
20002e04:	687b      	ldr	r3, [r7, #4]
20002e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002e08:	2210      	movs	r2, #16
20002e0a:	409a      	lsls	r2, r3
20002e0c:	68fb      	ldr	r3, [r7, #12]
20002e0e:	4013      	ands	r3, r2
20002e10:	2b00      	cmp	r3, #0
20002e12:	d043      	beq.n	20002e9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
20002e14:	687b      	ldr	r3, [r7, #4]
20002e16:	681b      	ldr	r3, [r3, #0]
20002e18:	681b      	ldr	r3, [r3, #0]
20002e1a:	f003 0308 	and.w	r3, r3, #8
20002e1e:	2b00      	cmp	r3, #0
20002e20:	d03c      	beq.n	20002e9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
20002e22:	687b      	ldr	r3, [r7, #4]
20002e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002e26:	2210      	movs	r2, #16
20002e28:	409a      	lsls	r2, r3
20002e2a:	693b      	ldr	r3, [r7, #16]
20002e2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
20002e2e:	687b      	ldr	r3, [r7, #4]
20002e30:	681b      	ldr	r3, [r3, #0]
20002e32:	681b      	ldr	r3, [r3, #0]
20002e34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
20002e38:	2b00      	cmp	r3, #0
20002e3a:	d018      	beq.n	20002e6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
20002e3c:	687b      	ldr	r3, [r7, #4]
20002e3e:	681b      	ldr	r3, [r3, #0]
20002e40:	681b      	ldr	r3, [r3, #0]
20002e42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
20002e46:	2b00      	cmp	r3, #0
20002e48:	d108      	bne.n	20002e5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
20002e4a:	687b      	ldr	r3, [r7, #4]
20002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002e4e:	2b00      	cmp	r3, #0
20002e50:	d024      	beq.n	20002e9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
20002e52:	687b      	ldr	r3, [r7, #4]
20002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002e56:	6878      	ldr	r0, [r7, #4]
20002e58:	4798      	blx	r3
20002e5a:	e01f      	b.n	20002e9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
20002e5c:	687b      	ldr	r3, [r7, #4]
20002e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20002e60:	2b00      	cmp	r3, #0
20002e62:	d01b      	beq.n	20002e9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
20002e64:	687b      	ldr	r3, [r7, #4]
20002e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20002e68:	6878      	ldr	r0, [r7, #4]
20002e6a:	4798      	blx	r3
20002e6c:	e016      	b.n	20002e9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
20002e6e:	687b      	ldr	r3, [r7, #4]
20002e70:	681b      	ldr	r3, [r3, #0]
20002e72:	681b      	ldr	r3, [r3, #0]
20002e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
20002e78:	2b00      	cmp	r3, #0
20002e7a:	d107      	bne.n	20002e8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
20002e7c:	687b      	ldr	r3, [r7, #4]
20002e7e:	681b      	ldr	r3, [r3, #0]
20002e80:	681a      	ldr	r2, [r3, #0]
20002e82:	687b      	ldr	r3, [r7, #4]
20002e84:	681b      	ldr	r3, [r3, #0]
20002e86:	f022 0208 	bic.w	r2, r2, #8
20002e8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
20002e8c:	687b      	ldr	r3, [r7, #4]
20002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002e90:	2b00      	cmp	r3, #0
20002e92:	d003      	beq.n	20002e9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
20002e94:	687b      	ldr	r3, [r7, #4]
20002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002e98:	6878      	ldr	r0, [r7, #4]
20002e9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
20002e9c:	687b      	ldr	r3, [r7, #4]
20002e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002ea0:	2220      	movs	r2, #32
20002ea2:	409a      	lsls	r2, r3
20002ea4:	68fb      	ldr	r3, [r7, #12]
20002ea6:	4013      	ands	r3, r2
20002ea8:	2b00      	cmp	r3, #0
20002eaa:	f000 808e 	beq.w	20002fca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
20002eae:	687b      	ldr	r3, [r7, #4]
20002eb0:	681b      	ldr	r3, [r3, #0]
20002eb2:	681b      	ldr	r3, [r3, #0]
20002eb4:	f003 0310 	and.w	r3, r3, #16
20002eb8:	2b00      	cmp	r3, #0
20002eba:	f000 8086 	beq.w	20002fca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
20002ebe:	687b      	ldr	r3, [r7, #4]
20002ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002ec2:	2220      	movs	r2, #32
20002ec4:	409a      	lsls	r2, r3
20002ec6:	693b      	ldr	r3, [r7, #16]
20002ec8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
20002eca:	687b      	ldr	r3, [r7, #4]
20002ecc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20002ed0:	b2db      	uxtb	r3, r3
20002ed2:	2b05      	cmp	r3, #5
20002ed4:	d136      	bne.n	20002f44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
20002ed6:	687b      	ldr	r3, [r7, #4]
20002ed8:	681b      	ldr	r3, [r3, #0]
20002eda:	681a      	ldr	r2, [r3, #0]
20002edc:	687b      	ldr	r3, [r7, #4]
20002ede:	681b      	ldr	r3, [r3, #0]
20002ee0:	f022 0216 	bic.w	r2, r2, #22
20002ee4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
20002ee6:	687b      	ldr	r3, [r7, #4]
20002ee8:	681b      	ldr	r3, [r3, #0]
20002eea:	695a      	ldr	r2, [r3, #20]
20002eec:	687b      	ldr	r3, [r7, #4]
20002eee:	681b      	ldr	r3, [r3, #0]
20002ef0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
20002ef4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
20002ef6:	687b      	ldr	r3, [r7, #4]
20002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002efa:	2b00      	cmp	r3, #0
20002efc:	d103      	bne.n	20002f06 <HAL_DMA_IRQHandler+0x1da>
20002efe:	687b      	ldr	r3, [r7, #4]
20002f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20002f02:	2b00      	cmp	r3, #0
20002f04:	d007      	beq.n	20002f16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
20002f06:	687b      	ldr	r3, [r7, #4]
20002f08:	681b      	ldr	r3, [r3, #0]
20002f0a:	681a      	ldr	r2, [r3, #0]
20002f0c:	687b      	ldr	r3, [r7, #4]
20002f0e:	681b      	ldr	r3, [r3, #0]
20002f10:	f022 0208 	bic.w	r2, r2, #8
20002f14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
20002f16:	687b      	ldr	r3, [r7, #4]
20002f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002f1a:	223f      	movs	r2, #63	; 0x3f
20002f1c:	409a      	lsls	r2, r3
20002f1e:	693b      	ldr	r3, [r7, #16]
20002f20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
20002f22:	687b      	ldr	r3, [r7, #4]
20002f24:	2201      	movs	r2, #1
20002f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
20002f2a:	687b      	ldr	r3, [r7, #4]
20002f2c:	2200      	movs	r2, #0
20002f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
20002f32:	687b      	ldr	r3, [r7, #4]
20002f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20002f36:	2b00      	cmp	r3, #0
20002f38:	d07d      	beq.n	20003036 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
20002f3a:	687b      	ldr	r3, [r7, #4]
20002f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20002f3e:	6878      	ldr	r0, [r7, #4]
20002f40:	4798      	blx	r3
        }
        return;
20002f42:	e078      	b.n	20003036 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
20002f44:	687b      	ldr	r3, [r7, #4]
20002f46:	681b      	ldr	r3, [r3, #0]
20002f48:	681b      	ldr	r3, [r3, #0]
20002f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
20002f4e:	2b00      	cmp	r3, #0
20002f50:	d01c      	beq.n	20002f8c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
20002f52:	687b      	ldr	r3, [r7, #4]
20002f54:	681b      	ldr	r3, [r3, #0]
20002f56:	681b      	ldr	r3, [r3, #0]
20002f58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
20002f5c:	2b00      	cmp	r3, #0
20002f5e:	d108      	bne.n	20002f72 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
20002f60:	687b      	ldr	r3, [r7, #4]
20002f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20002f64:	2b00      	cmp	r3, #0
20002f66:	d030      	beq.n	20002fca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
20002f68:	687b      	ldr	r3, [r7, #4]
20002f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20002f6c:	6878      	ldr	r0, [r7, #4]
20002f6e:	4798      	blx	r3
20002f70:	e02b      	b.n	20002fca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
20002f72:	687b      	ldr	r3, [r7, #4]
20002f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20002f76:	2b00      	cmp	r3, #0
20002f78:	d027      	beq.n	20002fca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
20002f7a:	687b      	ldr	r3, [r7, #4]
20002f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20002f7e:	6878      	ldr	r0, [r7, #4]
20002f80:	4798      	blx	r3
20002f82:	e022      	b.n	20002fca <HAL_DMA_IRQHandler+0x29e>
20002f84:	20000410 	.word	0x20000410
20002f88:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
20002f8c:	687b      	ldr	r3, [r7, #4]
20002f8e:	681b      	ldr	r3, [r3, #0]
20002f90:	681b      	ldr	r3, [r3, #0]
20002f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
20002f96:	2b00      	cmp	r3, #0
20002f98:	d10f      	bne.n	20002fba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
20002f9a:	687b      	ldr	r3, [r7, #4]
20002f9c:	681b      	ldr	r3, [r3, #0]
20002f9e:	681a      	ldr	r2, [r3, #0]
20002fa0:	687b      	ldr	r3, [r7, #4]
20002fa2:	681b      	ldr	r3, [r3, #0]
20002fa4:	f022 0210 	bic.w	r2, r2, #16
20002fa8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
20002faa:	687b      	ldr	r3, [r7, #4]
20002fac:	2201      	movs	r2, #1
20002fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
20002fb2:	687b      	ldr	r3, [r7, #4]
20002fb4:	2200      	movs	r2, #0
20002fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
20002fba:	687b      	ldr	r3, [r7, #4]
20002fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20002fbe:	2b00      	cmp	r3, #0
20002fc0:	d003      	beq.n	20002fca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
20002fc2:	687b      	ldr	r3, [r7, #4]
20002fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20002fc6:	6878      	ldr	r0, [r7, #4]
20002fc8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
20002fca:	687b      	ldr	r3, [r7, #4]
20002fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002fce:	2b00      	cmp	r3, #0
20002fd0:	d032      	beq.n	20003038 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
20002fd2:	687b      	ldr	r3, [r7, #4]
20002fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002fd6:	f003 0301 	and.w	r3, r3, #1
20002fda:	2b00      	cmp	r3, #0
20002fdc:	d022      	beq.n	20003024 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
20002fde:	687b      	ldr	r3, [r7, #4]
20002fe0:	2205      	movs	r2, #5
20002fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
20002fe6:	687b      	ldr	r3, [r7, #4]
20002fe8:	681b      	ldr	r3, [r3, #0]
20002fea:	681a      	ldr	r2, [r3, #0]
20002fec:	687b      	ldr	r3, [r7, #4]
20002fee:	681b      	ldr	r3, [r3, #0]
20002ff0:	f022 0201 	bic.w	r2, r2, #1
20002ff4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
20002ff6:	68bb      	ldr	r3, [r7, #8]
20002ff8:	3301      	adds	r3, #1
20002ffa:	60bb      	str	r3, [r7, #8]
20002ffc:	697a      	ldr	r2, [r7, #20]
20002ffe:	429a      	cmp	r2, r3
20003000:	d307      	bcc.n	20003012 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
20003002:	687b      	ldr	r3, [r7, #4]
20003004:	681b      	ldr	r3, [r3, #0]
20003006:	681b      	ldr	r3, [r3, #0]
20003008:	f003 0301 	and.w	r3, r3, #1
2000300c:	2b00      	cmp	r3, #0
2000300e:	d1f2      	bne.n	20002ff6 <HAL_DMA_IRQHandler+0x2ca>
20003010:	e000      	b.n	20003014 <HAL_DMA_IRQHandler+0x2e8>
          break;
20003012:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
20003014:	687b      	ldr	r3, [r7, #4]
20003016:	2201      	movs	r2, #1
20003018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
2000301c:	687b      	ldr	r3, [r7, #4]
2000301e:	2200      	movs	r2, #0
20003020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
20003024:	687b      	ldr	r3, [r7, #4]
20003026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20003028:	2b00      	cmp	r3, #0
2000302a:	d005      	beq.n	20003038 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
2000302c:	687b      	ldr	r3, [r7, #4]
2000302e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20003030:	6878      	ldr	r0, [r7, #4]
20003032:	4798      	blx	r3
20003034:	e000      	b.n	20003038 <HAL_DMA_IRQHandler+0x30c>
        return;
20003036:	bf00      	nop
    }
  }
}
20003038:	3718      	adds	r7, #24
2000303a:	46bd      	mov	sp, r7
2000303c:	bd80      	pop	{r7, pc}
2000303e:	bf00      	nop

20003040 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
20003040:	b480      	push	{r7}
20003042:	b087      	sub	sp, #28
20003044:	af00      	add	r7, sp, #0
20003046:	60f8      	str	r0, [r7, #12]
20003048:	460b      	mov	r3, r1
2000304a:	607a      	str	r2, [r7, #4]
2000304c:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
2000304e:	2300      	movs	r3, #0
20003050:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
20003052:	68fb      	ldr	r3, [r7, #12]
20003054:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
20003058:	2b01      	cmp	r3, #1
2000305a:	d101      	bne.n	20003060 <HAL_DMA_RegisterCallback+0x20>
2000305c:	2302      	movs	r3, #2
2000305e:	e03d      	b.n	200030dc <HAL_DMA_RegisterCallback+0x9c>
20003060:	68fb      	ldr	r3, [r7, #12]
20003062:	2201      	movs	r2, #1
20003064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
20003068:	68fb      	ldr	r3, [r7, #12]
2000306a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
2000306e:	b2db      	uxtb	r3, r3
20003070:	2b01      	cmp	r3, #1
20003072:	d12c      	bne.n	200030ce <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
20003074:	7afb      	ldrb	r3, [r7, #11]
20003076:	2b05      	cmp	r3, #5
20003078:	d826      	bhi.n	200030c8 <HAL_DMA_RegisterCallback+0x88>
2000307a:	a201      	add	r2, pc, #4	; (adr r2, 20003080 <HAL_DMA_RegisterCallback+0x40>)
2000307c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20003080:	20003099 	.word	0x20003099
20003084:	200030a1 	.word	0x200030a1
20003088:	200030a9 	.word	0x200030a9
2000308c:	200030b1 	.word	0x200030b1
20003090:	200030b9 	.word	0x200030b9
20003094:	200030c1 	.word	0x200030c1
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
20003098:	68fb      	ldr	r3, [r7, #12]
2000309a:	687a      	ldr	r2, [r7, #4]
2000309c:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
2000309e:	e018      	b.n	200030d2 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
200030a0:	68fb      	ldr	r3, [r7, #12]
200030a2:	687a      	ldr	r2, [r7, #4]
200030a4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
200030a6:	e014      	b.n	200030d2 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
200030a8:	68fb      	ldr	r3, [r7, #12]
200030aa:	687a      	ldr	r2, [r7, #4]
200030ac:	645a      	str	r2, [r3, #68]	; 0x44
      break;
200030ae:	e010      	b.n	200030d2 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
200030b0:	68fb      	ldr	r3, [r7, #12]
200030b2:	687a      	ldr	r2, [r7, #4]
200030b4:	649a      	str	r2, [r3, #72]	; 0x48
      break;
200030b6:	e00c      	b.n	200030d2 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
200030b8:	68fb      	ldr	r3, [r7, #12]
200030ba:	687a      	ldr	r2, [r7, #4]
200030bc:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
200030be:	e008      	b.n	200030d2 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
200030c0:	68fb      	ldr	r3, [r7, #12]
200030c2:	687a      	ldr	r2, [r7, #4]
200030c4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
200030c6:	e004      	b.n	200030d2 <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
200030c8:	2301      	movs	r3, #1
200030ca:	75fb      	strb	r3, [r7, #23]
      break;
200030cc:	e001      	b.n	200030d2 <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
200030ce:	2301      	movs	r3, #1
200030d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
200030d2:	68fb      	ldr	r3, [r7, #12]
200030d4:	2200      	movs	r2, #0
200030d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
200030da:	7dfb      	ldrb	r3, [r7, #23]
}
200030dc:	4618      	mov	r0, r3
200030de:	371c      	adds	r7, #28
200030e0:	46bd      	mov	sp, r7
200030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
200030e6:	4770      	bx	lr

200030e8 <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifier
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
200030e8:	b480      	push	{r7}
200030ea:	b085      	sub	sp, #20
200030ec:	af00      	add	r7, sp, #0
200030ee:	6078      	str	r0, [r7, #4]
200030f0:	460b      	mov	r3, r1
200030f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
200030f4:	2300      	movs	r3, #0
200030f6:	73fb      	strb	r3, [r7, #15]
  
  /* Process locked */
  __HAL_LOCK(hdma);
200030f8:	687b      	ldr	r3, [r7, #4]
200030fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
200030fe:	2b01      	cmp	r3, #1
20003100:	d101      	bne.n	20003106 <HAL_DMA_UnRegisterCallback+0x1e>
20003102:	2302      	movs	r3, #2
20003104:	e053      	b.n	200031ae <HAL_DMA_UnRegisterCallback+0xc6>
20003106:	687b      	ldr	r3, [r7, #4]
20003108:	2201      	movs	r2, #1
2000310a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
2000310e:	687b      	ldr	r3, [r7, #4]
20003110:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20003114:	b2db      	uxtb	r3, r3
20003116:	2b01      	cmp	r3, #1
20003118:	d142      	bne.n	200031a0 <HAL_DMA_UnRegisterCallback+0xb8>
  {
    switch (CallbackID)
2000311a:	78fb      	ldrb	r3, [r7, #3]
2000311c:	2b06      	cmp	r3, #6
2000311e:	d83c      	bhi.n	2000319a <HAL_DMA_UnRegisterCallback+0xb2>
20003120:	a201      	add	r2, pc, #4	; (adr r2, 20003128 <HAL_DMA_UnRegisterCallback+0x40>)
20003122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20003126:	bf00      	nop
20003128:	20003145 	.word	0x20003145
2000312c:	2000314d 	.word	0x2000314d
20003130:	20003155 	.word	0x20003155
20003134:	2000315d 	.word	0x2000315d
20003138:	20003165 	.word	0x20003165
2000313c:	2000316d 	.word	0x2000316d
20003140:	20003175 	.word	0x20003175
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
20003144:	687b      	ldr	r3, [r7, #4]
20003146:	2200      	movs	r2, #0
20003148:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
2000314a:	e02b      	b.n	200031a4 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
2000314c:	687b      	ldr	r3, [r7, #4]
2000314e:	2200      	movs	r2, #0
20003150:	641a      	str	r2, [r3, #64]	; 0x40
      break;
20003152:	e027      	b.n	200031a4 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
20003154:	687b      	ldr	r3, [r7, #4]
20003156:	2200      	movs	r2, #0
20003158:	645a      	str	r2, [r3, #68]	; 0x44
      break;
2000315a:	e023      	b.n	200031a4 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
2000315c:	687b      	ldr	r3, [r7, #4]
2000315e:	2200      	movs	r2, #0
20003160:	649a      	str	r2, [r3, #72]	; 0x48
      break;
20003162:	e01f      	b.n	200031a4 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
20003164:	687b      	ldr	r3, [r7, #4]
20003166:	2200      	movs	r2, #0
20003168:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
2000316a:	e01b      	b.n	200031a4 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
2000316c:	687b      	ldr	r3, [r7, #4]
2000316e:	2200      	movs	r2, #0
20003170:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
20003172:	e017      	b.n	200031a4 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
20003174:	687b      	ldr	r3, [r7, #4]
20003176:	2200      	movs	r2, #0
20003178:	63da      	str	r2, [r3, #60]	; 0x3c
      hdma->XferHalfCpltCallback = NULL;
2000317a:	687b      	ldr	r3, [r7, #4]
2000317c:	2200      	movs	r2, #0
2000317e:	641a      	str	r2, [r3, #64]	; 0x40
      hdma->XferM1CpltCallback = NULL;
20003180:	687b      	ldr	r3, [r7, #4]
20003182:	2200      	movs	r2, #0
20003184:	645a      	str	r2, [r3, #68]	; 0x44
      hdma->XferM1HalfCpltCallback = NULL;
20003186:	687b      	ldr	r3, [r7, #4]
20003188:	2200      	movs	r2, #0
2000318a:	649a      	str	r2, [r3, #72]	; 0x48
      hdma->XferErrorCallback = NULL;
2000318c:	687b      	ldr	r3, [r7, #4]
2000318e:	2200      	movs	r2, #0
20003190:	64da      	str	r2, [r3, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
20003192:	687b      	ldr	r3, [r7, #4]
20003194:	2200      	movs	r2, #0
20003196:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
20003198:	e004      	b.n	200031a4 <HAL_DMA_UnRegisterCallback+0xbc>
      
    default:
      status = HAL_ERROR;
2000319a:	2301      	movs	r3, #1
2000319c:	73fb      	strb	r3, [r7, #15]
      break;
2000319e:	e001      	b.n	200031a4 <HAL_DMA_UnRegisterCallback+0xbc>
    }
  }
  else
  {
    status = HAL_ERROR;
200031a0:	2301      	movs	r3, #1
200031a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
200031a4:	687b      	ldr	r3, [r7, #4]
200031a6:	2200      	movs	r2, #0
200031a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
200031ac:	7bfb      	ldrb	r3, [r7, #15]
}
200031ae:	4618      	mov	r0, r3
200031b0:	3714      	adds	r7, #20
200031b2:	46bd      	mov	sp, r7
200031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
200031b8:	4770      	bx	lr
200031ba:	bf00      	nop

200031bc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
200031bc:	b480      	push	{r7}
200031be:	b083      	sub	sp, #12
200031c0:	af00      	add	r7, sp, #0
200031c2:	6078      	str	r0, [r7, #4]
  return hdma->State;
200031c4:	687b      	ldr	r3, [r7, #4]
200031c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
200031ca:	b2db      	uxtb	r3, r3
}
200031cc:	4618      	mov	r0, r3
200031ce:	370c      	adds	r7, #12
200031d0:	46bd      	mov	sp, r7
200031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
200031d6:	4770      	bx	lr

200031d8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
200031d8:	b480      	push	{r7}
200031da:	b083      	sub	sp, #12
200031dc:	af00      	add	r7, sp, #0
200031de:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
200031e0:	687b      	ldr	r3, [r7, #4]
200031e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
200031e4:	4618      	mov	r0, r3
200031e6:	370c      	adds	r7, #12
200031e8:	46bd      	mov	sp, r7
200031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
200031ee:	4770      	bx	lr

200031f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
200031f0:	b480      	push	{r7}
200031f2:	b085      	sub	sp, #20
200031f4:	af00      	add	r7, sp, #0
200031f6:	60f8      	str	r0, [r7, #12]
200031f8:	60b9      	str	r1, [r7, #8]
200031fa:	607a      	str	r2, [r7, #4]
200031fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
200031fe:	68fb      	ldr	r3, [r7, #12]
20003200:	681b      	ldr	r3, [r3, #0]
20003202:	681a      	ldr	r2, [r3, #0]
20003204:	68fb      	ldr	r3, [r7, #12]
20003206:	681b      	ldr	r3, [r3, #0]
20003208:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
2000320c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
2000320e:	68fb      	ldr	r3, [r7, #12]
20003210:	681b      	ldr	r3, [r3, #0]
20003212:	683a      	ldr	r2, [r7, #0]
20003214:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
20003216:	68fb      	ldr	r3, [r7, #12]
20003218:	689b      	ldr	r3, [r3, #8]
2000321a:	2b40      	cmp	r3, #64	; 0x40
2000321c:	d108      	bne.n	20003230 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
2000321e:	68fb      	ldr	r3, [r7, #12]
20003220:	681b      	ldr	r3, [r3, #0]
20003222:	687a      	ldr	r2, [r7, #4]
20003224:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
20003226:	68fb      	ldr	r3, [r7, #12]
20003228:	681b      	ldr	r3, [r3, #0]
2000322a:	68ba      	ldr	r2, [r7, #8]
2000322c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
2000322e:	e007      	b.n	20003240 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
20003230:	68fb      	ldr	r3, [r7, #12]
20003232:	681b      	ldr	r3, [r3, #0]
20003234:	68ba      	ldr	r2, [r7, #8]
20003236:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
20003238:	68fb      	ldr	r3, [r7, #12]
2000323a:	681b      	ldr	r3, [r3, #0]
2000323c:	687a      	ldr	r2, [r7, #4]
2000323e:	60da      	str	r2, [r3, #12]
}
20003240:	bf00      	nop
20003242:	3714      	adds	r7, #20
20003244:	46bd      	mov	sp, r7
20003246:	f85d 7b04 	ldr.w	r7, [sp], #4
2000324a:	4770      	bx	lr

2000324c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
2000324c:	b480      	push	{r7}
2000324e:	b085      	sub	sp, #20
20003250:	af00      	add	r7, sp, #0
20003252:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
20003254:	687b      	ldr	r3, [r7, #4]
20003256:	681b      	ldr	r3, [r3, #0]
20003258:	b2db      	uxtb	r3, r3
2000325a:	3b10      	subs	r3, #16
2000325c:	4a13      	ldr	r2, [pc, #76]	; (200032ac <DMA_CalcBaseAndBitshift+0x60>)
2000325e:	fba2 2303 	umull	r2, r3, r2, r3
20003262:	091b      	lsrs	r3, r3, #4
20003264:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
20003266:	4a12      	ldr	r2, [pc, #72]	; (200032b0 <DMA_CalcBaseAndBitshift+0x64>)
20003268:	68fb      	ldr	r3, [r7, #12]
2000326a:	4413      	add	r3, r2
2000326c:	781b      	ldrb	r3, [r3, #0]
2000326e:	461a      	mov	r2, r3
20003270:	687b      	ldr	r3, [r7, #4]
20003272:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
20003274:	68fb      	ldr	r3, [r7, #12]
20003276:	2b03      	cmp	r3, #3
20003278:	d908      	bls.n	2000328c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
2000327a:	687b      	ldr	r3, [r7, #4]
2000327c:	681b      	ldr	r3, [r3, #0]
2000327e:	461a      	mov	r2, r3
20003280:	4b0c      	ldr	r3, [pc, #48]	; (200032b4 <DMA_CalcBaseAndBitshift+0x68>)
20003282:	4013      	ands	r3, r2
20003284:	1d1a      	adds	r2, r3, #4
20003286:	687b      	ldr	r3, [r7, #4]
20003288:	659a      	str	r2, [r3, #88]	; 0x58
2000328a:	e006      	b.n	2000329a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
2000328c:	687b      	ldr	r3, [r7, #4]
2000328e:	681b      	ldr	r3, [r3, #0]
20003290:	461a      	mov	r2, r3
20003292:	4b08      	ldr	r3, [pc, #32]	; (200032b4 <DMA_CalcBaseAndBitshift+0x68>)
20003294:	4013      	ands	r3, r2
20003296:	687a      	ldr	r2, [r7, #4]
20003298:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
2000329a:	687b      	ldr	r3, [r7, #4]
2000329c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
2000329e:	4618      	mov	r0, r3
200032a0:	3714      	adds	r7, #20
200032a2:	46bd      	mov	sp, r7
200032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
200032a8:	4770      	bx	lr
200032aa:	bf00      	nop
200032ac:	aaaaaaab 	.word	0xaaaaaaab
200032b0:	2000ed2c 	.word	0x2000ed2c
200032b4:	fffffc00 	.word	0xfffffc00

200032b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
200032b8:	b480      	push	{r7}
200032ba:	b085      	sub	sp, #20
200032bc:	af00      	add	r7, sp, #0
200032be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
200032c0:	2300      	movs	r3, #0
200032c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
200032c4:	687b      	ldr	r3, [r7, #4]
200032c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
200032c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
200032ca:	687b      	ldr	r3, [r7, #4]
200032cc:	699b      	ldr	r3, [r3, #24]
200032ce:	2b00      	cmp	r3, #0
200032d0:	d11f      	bne.n	20003312 <DMA_CheckFifoParam+0x5a>
200032d2:	68bb      	ldr	r3, [r7, #8]
200032d4:	2b03      	cmp	r3, #3
200032d6:	d856      	bhi.n	20003386 <DMA_CheckFifoParam+0xce>
200032d8:	a201      	add	r2, pc, #4	; (adr r2, 200032e0 <DMA_CheckFifoParam+0x28>)
200032da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200032de:	bf00      	nop
200032e0:	200032f1 	.word	0x200032f1
200032e4:	20003303 	.word	0x20003303
200032e8:	200032f1 	.word	0x200032f1
200032ec:	20003387 	.word	0x20003387
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
200032f0:	687b      	ldr	r3, [r7, #4]
200032f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200032f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
200032f8:	2b00      	cmp	r3, #0
200032fa:	d046      	beq.n	2000338a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
200032fc:	2301      	movs	r3, #1
200032fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
20003300:	e043      	b.n	2000338a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
20003302:	687b      	ldr	r3, [r7, #4]
20003304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20003306:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
2000330a:	d140      	bne.n	2000338e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
2000330c:	2301      	movs	r3, #1
2000330e:	73fb      	strb	r3, [r7, #15]
      }
      break;
20003310:	e03d      	b.n	2000338e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
20003312:	687b      	ldr	r3, [r7, #4]
20003314:	699b      	ldr	r3, [r3, #24]
20003316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2000331a:	d121      	bne.n	20003360 <DMA_CheckFifoParam+0xa8>
2000331c:	68bb      	ldr	r3, [r7, #8]
2000331e:	2b03      	cmp	r3, #3
20003320:	d837      	bhi.n	20003392 <DMA_CheckFifoParam+0xda>
20003322:	a201      	add	r2, pc, #4	; (adr r2, 20003328 <DMA_CheckFifoParam+0x70>)
20003324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20003328:	20003339 	.word	0x20003339
2000332c:	2000333f 	.word	0x2000333f
20003330:	20003339 	.word	0x20003339
20003334:	20003351 	.word	0x20003351
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
20003338:	2301      	movs	r3, #1
2000333a:	73fb      	strb	r3, [r7, #15]
      break;
2000333c:	e030      	b.n	200033a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
2000333e:	687b      	ldr	r3, [r7, #4]
20003340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20003342:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
20003346:	2b00      	cmp	r3, #0
20003348:	d025      	beq.n	20003396 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
2000334a:	2301      	movs	r3, #1
2000334c:	73fb      	strb	r3, [r7, #15]
      }
      break;
2000334e:	e022      	b.n	20003396 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
20003350:	687b      	ldr	r3, [r7, #4]
20003352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20003354:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
20003358:	d11f      	bne.n	2000339a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
2000335a:	2301      	movs	r3, #1
2000335c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
2000335e:	e01c      	b.n	2000339a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
20003360:	68bb      	ldr	r3, [r7, #8]
20003362:	2b02      	cmp	r3, #2
20003364:	d903      	bls.n	2000336e <DMA_CheckFifoParam+0xb6>
20003366:	68bb      	ldr	r3, [r7, #8]
20003368:	2b03      	cmp	r3, #3
2000336a:	d003      	beq.n	20003374 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
2000336c:	e018      	b.n	200033a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
2000336e:	2301      	movs	r3, #1
20003370:	73fb      	strb	r3, [r7, #15]
      break;
20003372:	e015      	b.n	200033a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
20003374:	687b      	ldr	r3, [r7, #4]
20003376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20003378:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2000337c:	2b00      	cmp	r3, #0
2000337e:	d00e      	beq.n	2000339e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
20003380:	2301      	movs	r3, #1
20003382:	73fb      	strb	r3, [r7, #15]
      break;
20003384:	e00b      	b.n	2000339e <DMA_CheckFifoParam+0xe6>
      break;
20003386:	bf00      	nop
20003388:	e00a      	b.n	200033a0 <DMA_CheckFifoParam+0xe8>
      break;
2000338a:	bf00      	nop
2000338c:	e008      	b.n	200033a0 <DMA_CheckFifoParam+0xe8>
      break;
2000338e:	bf00      	nop
20003390:	e006      	b.n	200033a0 <DMA_CheckFifoParam+0xe8>
      break;
20003392:	bf00      	nop
20003394:	e004      	b.n	200033a0 <DMA_CheckFifoParam+0xe8>
      break;
20003396:	bf00      	nop
20003398:	e002      	b.n	200033a0 <DMA_CheckFifoParam+0xe8>
      break;   
2000339a:	bf00      	nop
2000339c:	e000      	b.n	200033a0 <DMA_CheckFifoParam+0xe8>
      break;
2000339e:	bf00      	nop
    }
  } 
  
  return status; 
200033a0:	7bfb      	ldrb	r3, [r7, #15]
}
200033a2:	4618      	mov	r0, r3
200033a4:	3714      	adds	r7, #20
200033a6:	46bd      	mov	sp, r7
200033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
200033ac:	4770      	bx	lr
200033ae:	bf00      	nop

200033b0 <HAL_DMAEx_MultiBufferStart>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
200033b0:	b580      	push	{r7, lr}
200033b2:	b086      	sub	sp, #24
200033b4:	af00      	add	r7, sp, #0
200033b6:	60f8      	str	r0, [r7, #12]
200033b8:	60b9      	str	r1, [r7, #8]
200033ba:	607a      	str	r2, [r7, #4]
200033bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
200033be:	2300      	movs	r3, #0
200033c0:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
200033c2:	68fb      	ldr	r3, [r7, #12]
200033c4:	689b      	ldr	r3, [r3, #8]
200033c6:	2b80      	cmp	r3, #128	; 0x80
200033c8:	d106      	bne.n	200033d8 <HAL_DMAEx_MultiBufferStart+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
200033ca:	68fb      	ldr	r3, [r7, #12]
200033cc:	f44f 7280 	mov.w	r2, #256	; 0x100
200033d0:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
200033d2:	2301      	movs	r3, #1
200033d4:	75fb      	strb	r3, [r7, #23]
200033d6:	e031      	b.n	2000343c <HAL_DMAEx_MultiBufferStart+0x8c>
  }
  else
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
200033d8:	68fb      	ldr	r3, [r7, #12]
200033da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
200033de:	2b01      	cmp	r3, #1
200033e0:	d101      	bne.n	200033e6 <HAL_DMAEx_MultiBufferStart+0x36>
200033e2:	2302      	movs	r3, #2
200033e4:	e02b      	b.n	2000343e <HAL_DMAEx_MultiBufferStart+0x8e>
200033e6:	68fb      	ldr	r3, [r7, #12]
200033e8:	2201      	movs	r2, #1
200033ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    if(HAL_DMA_STATE_READY == hdma->State)
200033ee:	68fb      	ldr	r3, [r7, #12]
200033f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
200033f4:	b2db      	uxtb	r3, r3
200033f6:	2b01      	cmp	r3, #1
200033f8:	d11e      	bne.n	20003438 <HAL_DMAEx_MultiBufferStart+0x88>
    {
      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_BUSY; 
200033fa:	68fb      	ldr	r3, [r7, #12]
200033fc:	2202      	movs	r2, #2
200033fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      /* Enable the double buffer mode */
      hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
20003402:	68fb      	ldr	r3, [r7, #12]
20003404:	681b      	ldr	r3, [r3, #0]
20003406:	681a      	ldr	r2, [r3, #0]
20003408:	68fb      	ldr	r3, [r7, #12]
2000340a:	681b      	ldr	r3, [r3, #0]
2000340c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
20003410:	601a      	str	r2, [r3, #0]
      
      /* Configure DMA Stream destination address */
      hdma->Instance->M1AR = SecondMemAddress;
20003412:	68fb      	ldr	r3, [r7, #12]
20003414:	681b      	ldr	r3, [r3, #0]
20003416:	683a      	ldr	r2, [r7, #0]
20003418:	611a      	str	r2, [r3, #16]
      
      /* Configure the source, destination address and the data length */
      DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
2000341a:	6a3b      	ldr	r3, [r7, #32]
2000341c:	687a      	ldr	r2, [r7, #4]
2000341e:	68b9      	ldr	r1, [r7, #8]
20003420:	68f8      	ldr	r0, [r7, #12]
20003422:	f001 f961 	bl	200046e8 <DMA_MultiBufferSetConfig>
      
      /* Enable the peripheral */
      __HAL_DMA_ENABLE(hdma);
20003426:	68fb      	ldr	r3, [r7, #12]
20003428:	681b      	ldr	r3, [r3, #0]
2000342a:	681a      	ldr	r2, [r3, #0]
2000342c:	68fb      	ldr	r3, [r7, #12]
2000342e:	681b      	ldr	r3, [r3, #0]
20003430:	f042 0201 	orr.w	r2, r2, #1
20003434:	601a      	str	r2, [r3, #0]
20003436:	e001      	b.n	2000343c <HAL_DMAEx_MultiBufferStart+0x8c>
    }
    else
    {
      /* Return error status */
      status = HAL_BUSY;
20003438:	2302      	movs	r3, #2
2000343a:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
2000343c:	7dfb      	ldrb	r3, [r7, #23]
}
2000343e:	4618      	mov	r0, r3
20003440:	3718      	adds	r7, #24
20003442:	46bd      	mov	sp, r7
20003444:	bd80      	pop	{r7, pc}
	...

20003448 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
20003448:	b580      	push	{r7, lr}
2000344a:	b086      	sub	sp, #24
2000344c:	af00      	add	r7, sp, #0
2000344e:	60f8      	str	r0, [r7, #12]
20003450:	60b9      	str	r1, [r7, #8]
20003452:	607a      	str	r2, [r7, #4]
20003454:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
20003456:	2300      	movs	r3, #0
20003458:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
2000345a:	68fb      	ldr	r3, [r7, #12]
2000345c:	689b      	ldr	r3, [r3, #8]
2000345e:	2b80      	cmp	r3, #128	; 0x80
20003460:	d106      	bne.n	20003470 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
20003462:	68fb      	ldr	r3, [r7, #12]
20003464:	f44f 7280 	mov.w	r2, #256	; 0x100
20003468:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
2000346a:	2301      	movs	r3, #1
2000346c:	f001 b901 	b.w	20004672 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
20003470:	68fb      	ldr	r3, [r7, #12]
20003472:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
20003476:	2b01      	cmp	r3, #1
20003478:	d102      	bne.n	20003480 <HAL_DMAEx_MultiBufferStart_IT+0x38>
2000347a:	2302      	movs	r3, #2
2000347c:	f001 b8f9 	b.w	20004672 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
20003480:	68fb      	ldr	r3, [r7, #12]
20003482:	2201      	movs	r2, #1
20003484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
20003488:	68fb      	ldr	r3, [r7, #12]
2000348a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
2000348e:	b2db      	uxtb	r3, r3
20003490:	2b01      	cmp	r3, #1
20003492:	f041 80e7 	bne.w	20004664 <HAL_DMAEx_MultiBufferStart_IT+0x121c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
20003496:	68fb      	ldr	r3, [r7, #12]
20003498:	2202      	movs	r2, #2
2000349a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
2000349e:	68fb      	ldr	r3, [r7, #12]
200034a0:	2200      	movs	r2, #0
200034a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
200034a4:	68fb      	ldr	r3, [r7, #12]
200034a6:	681b      	ldr	r3, [r3, #0]
200034a8:	681a      	ldr	r2, [r3, #0]
200034aa:	68fb      	ldr	r3, [r7, #12]
200034ac:	681b      	ldr	r3, [r3, #0]
200034ae:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
200034b2:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
200034b4:	68fb      	ldr	r3, [r7, #12]
200034b6:	681b      	ldr	r3, [r3, #0]
200034b8:	683a      	ldr	r2, [r7, #0]
200034ba:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
200034bc:	6a3b      	ldr	r3, [r7, #32]
200034be:	687a      	ldr	r2, [r7, #4]
200034c0:	68b9      	ldr	r1, [r7, #8]
200034c2:	68f8      	ldr	r0, [r7, #12]
200034c4:	f001 f910 	bl	200046e8 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
200034c8:	68fb      	ldr	r3, [r7, #12]
200034ca:	681b      	ldr	r3, [r3, #0]
200034cc:	461a      	mov	r2, r3
200034ce:	4b99      	ldr	r3, [pc, #612]	; (20003734 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
200034d0:	429a      	cmp	r2, r3
200034d2:	d960      	bls.n	20003596 <HAL_DMAEx_MultiBufferStart_IT+0x14e>
200034d4:	68fb      	ldr	r3, [r7, #12]
200034d6:	681b      	ldr	r3, [r3, #0]
200034d8:	4a97      	ldr	r2, [pc, #604]	; (20003738 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
200034da:	4293      	cmp	r3, r2
200034dc:	d057      	beq.n	2000358e <HAL_DMAEx_MultiBufferStart_IT+0x146>
200034de:	68fb      	ldr	r3, [r7, #12]
200034e0:	681b      	ldr	r3, [r3, #0]
200034e2:	4a96      	ldr	r2, [pc, #600]	; (2000373c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
200034e4:	4293      	cmp	r3, r2
200034e6:	d050      	beq.n	2000358a <HAL_DMAEx_MultiBufferStart_IT+0x142>
200034e8:	68fb      	ldr	r3, [r7, #12]
200034ea:	681b      	ldr	r3, [r3, #0]
200034ec:	4a94      	ldr	r2, [pc, #592]	; (20003740 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
200034ee:	4293      	cmp	r3, r2
200034f0:	d049      	beq.n	20003586 <HAL_DMAEx_MultiBufferStart_IT+0x13e>
200034f2:	68fb      	ldr	r3, [r7, #12]
200034f4:	681b      	ldr	r3, [r3, #0]
200034f6:	4a93      	ldr	r2, [pc, #588]	; (20003744 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
200034f8:	4293      	cmp	r3, r2
200034fa:	d042      	beq.n	20003582 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
200034fc:	68fb      	ldr	r3, [r7, #12]
200034fe:	681b      	ldr	r3, [r3, #0]
20003500:	4a91      	ldr	r2, [pc, #580]	; (20003748 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
20003502:	4293      	cmp	r3, r2
20003504:	d03a      	beq.n	2000357c <HAL_DMAEx_MultiBufferStart_IT+0x134>
20003506:	68fb      	ldr	r3, [r7, #12]
20003508:	681b      	ldr	r3, [r3, #0]
2000350a:	4a90      	ldr	r2, [pc, #576]	; (2000374c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
2000350c:	4293      	cmp	r3, r2
2000350e:	d032      	beq.n	20003576 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
20003510:	68fb      	ldr	r3, [r7, #12]
20003512:	681b      	ldr	r3, [r3, #0]
20003514:	4a8e      	ldr	r2, [pc, #568]	; (20003750 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
20003516:	4293      	cmp	r3, r2
20003518:	d02a      	beq.n	20003570 <HAL_DMAEx_MultiBufferStart_IT+0x128>
2000351a:	68fb      	ldr	r3, [r7, #12]
2000351c:	681b      	ldr	r3, [r3, #0]
2000351e:	4a8d      	ldr	r2, [pc, #564]	; (20003754 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
20003520:	4293      	cmp	r3, r2
20003522:	d022      	beq.n	2000356a <HAL_DMAEx_MultiBufferStart_IT+0x122>
20003524:	68fb      	ldr	r3, [r7, #12]
20003526:	681b      	ldr	r3, [r3, #0]
20003528:	4a8b      	ldr	r2, [pc, #556]	; (20003758 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
2000352a:	4293      	cmp	r3, r2
2000352c:	d01a      	beq.n	20003564 <HAL_DMAEx_MultiBufferStart_IT+0x11c>
2000352e:	68fb      	ldr	r3, [r7, #12]
20003530:	681b      	ldr	r3, [r3, #0]
20003532:	4a8a      	ldr	r2, [pc, #552]	; (2000375c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
20003534:	4293      	cmp	r3, r2
20003536:	d012      	beq.n	2000355e <HAL_DMAEx_MultiBufferStart_IT+0x116>
20003538:	68fb      	ldr	r3, [r7, #12]
2000353a:	681b      	ldr	r3, [r3, #0]
2000353c:	4a88      	ldr	r2, [pc, #544]	; (20003760 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
2000353e:	4293      	cmp	r3, r2
20003540:	d00a      	beq.n	20003558 <HAL_DMAEx_MultiBufferStart_IT+0x110>
20003542:	68fb      	ldr	r3, [r7, #12]
20003544:	681b      	ldr	r3, [r3, #0]
20003546:	4a87      	ldr	r2, [pc, #540]	; (20003764 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
20003548:	4293      	cmp	r3, r2
2000354a:	d102      	bne.n	20003552 <HAL_DMAEx_MultiBufferStart_IT+0x10a>
2000354c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
20003550:	e01e      	b.n	20003590 <HAL_DMAEx_MultiBufferStart_IT+0x148>
20003552:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
20003556:	e01b      	b.n	20003590 <HAL_DMAEx_MultiBufferStart_IT+0x148>
20003558:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2000355c:	e018      	b.n	20003590 <HAL_DMAEx_MultiBufferStart_IT+0x148>
2000355e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
20003562:	e015      	b.n	20003590 <HAL_DMAEx_MultiBufferStart_IT+0x148>
20003564:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
20003568:	e012      	b.n	20003590 <HAL_DMAEx_MultiBufferStart_IT+0x148>
2000356a:	f44f 6300 	mov.w	r3, #2048	; 0x800
2000356e:	e00f      	b.n	20003590 <HAL_DMAEx_MultiBufferStart_IT+0x148>
20003570:	f44f 6300 	mov.w	r3, #2048	; 0x800
20003574:	e00c      	b.n	20003590 <HAL_DMAEx_MultiBufferStart_IT+0x148>
20003576:	f44f 6300 	mov.w	r3, #2048	; 0x800
2000357a:	e009      	b.n	20003590 <HAL_DMAEx_MultiBufferStart_IT+0x148>
2000357c:	f44f 6300 	mov.w	r3, #2048	; 0x800
20003580:	e006      	b.n	20003590 <HAL_DMAEx_MultiBufferStart_IT+0x148>
20003582:	2320      	movs	r3, #32
20003584:	e004      	b.n	20003590 <HAL_DMAEx_MultiBufferStart_IT+0x148>
20003586:	2320      	movs	r3, #32
20003588:	e002      	b.n	20003590 <HAL_DMAEx_MultiBufferStart_IT+0x148>
2000358a:	2320      	movs	r3, #32
2000358c:	e000      	b.n	20003590 <HAL_DMAEx_MultiBufferStart_IT+0x148>
2000358e:	2320      	movs	r3, #32
20003590:	4a75      	ldr	r2, [pc, #468]	; (20003768 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
20003592:	60d3      	str	r3, [r2, #12]
20003594:	e150      	b.n	20003838 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
20003596:	68fb      	ldr	r3, [r7, #12]
20003598:	681b      	ldr	r3, [r3, #0]
2000359a:	461a      	mov	r2, r3
2000359c:	4b73      	ldr	r3, [pc, #460]	; (2000376c <HAL_DMAEx_MultiBufferStart_IT+0x324>)
2000359e:	429a      	cmp	r2, r3
200035a0:	d960      	bls.n	20003664 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
200035a2:	68fb      	ldr	r3, [r7, #12]
200035a4:	681b      	ldr	r3, [r3, #0]
200035a6:	4a64      	ldr	r2, [pc, #400]	; (20003738 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
200035a8:	4293      	cmp	r3, r2
200035aa:	d057      	beq.n	2000365c <HAL_DMAEx_MultiBufferStart_IT+0x214>
200035ac:	68fb      	ldr	r3, [r7, #12]
200035ae:	681b      	ldr	r3, [r3, #0]
200035b0:	4a62      	ldr	r2, [pc, #392]	; (2000373c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
200035b2:	4293      	cmp	r3, r2
200035b4:	d050      	beq.n	20003658 <HAL_DMAEx_MultiBufferStart_IT+0x210>
200035b6:	68fb      	ldr	r3, [r7, #12]
200035b8:	681b      	ldr	r3, [r3, #0]
200035ba:	4a61      	ldr	r2, [pc, #388]	; (20003740 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
200035bc:	4293      	cmp	r3, r2
200035be:	d049      	beq.n	20003654 <HAL_DMAEx_MultiBufferStart_IT+0x20c>
200035c0:	68fb      	ldr	r3, [r7, #12]
200035c2:	681b      	ldr	r3, [r3, #0]
200035c4:	4a5f      	ldr	r2, [pc, #380]	; (20003744 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
200035c6:	4293      	cmp	r3, r2
200035c8:	d042      	beq.n	20003650 <HAL_DMAEx_MultiBufferStart_IT+0x208>
200035ca:	68fb      	ldr	r3, [r7, #12]
200035cc:	681b      	ldr	r3, [r3, #0]
200035ce:	4a5e      	ldr	r2, [pc, #376]	; (20003748 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
200035d0:	4293      	cmp	r3, r2
200035d2:	d03a      	beq.n	2000364a <HAL_DMAEx_MultiBufferStart_IT+0x202>
200035d4:	68fb      	ldr	r3, [r7, #12]
200035d6:	681b      	ldr	r3, [r3, #0]
200035d8:	4a5c      	ldr	r2, [pc, #368]	; (2000374c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
200035da:	4293      	cmp	r3, r2
200035dc:	d032      	beq.n	20003644 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
200035de:	68fb      	ldr	r3, [r7, #12]
200035e0:	681b      	ldr	r3, [r3, #0]
200035e2:	4a5b      	ldr	r2, [pc, #364]	; (20003750 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
200035e4:	4293      	cmp	r3, r2
200035e6:	d02a      	beq.n	2000363e <HAL_DMAEx_MultiBufferStart_IT+0x1f6>
200035e8:	68fb      	ldr	r3, [r7, #12]
200035ea:	681b      	ldr	r3, [r3, #0]
200035ec:	4a59      	ldr	r2, [pc, #356]	; (20003754 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
200035ee:	4293      	cmp	r3, r2
200035f0:	d022      	beq.n	20003638 <HAL_DMAEx_MultiBufferStart_IT+0x1f0>
200035f2:	68fb      	ldr	r3, [r7, #12]
200035f4:	681b      	ldr	r3, [r3, #0]
200035f6:	4a58      	ldr	r2, [pc, #352]	; (20003758 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
200035f8:	4293      	cmp	r3, r2
200035fa:	d01a      	beq.n	20003632 <HAL_DMAEx_MultiBufferStart_IT+0x1ea>
200035fc:	68fb      	ldr	r3, [r7, #12]
200035fe:	681b      	ldr	r3, [r3, #0]
20003600:	4a56      	ldr	r2, [pc, #344]	; (2000375c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
20003602:	4293      	cmp	r3, r2
20003604:	d012      	beq.n	2000362c <HAL_DMAEx_MultiBufferStart_IT+0x1e4>
20003606:	68fb      	ldr	r3, [r7, #12]
20003608:	681b      	ldr	r3, [r3, #0]
2000360a:	4a55      	ldr	r2, [pc, #340]	; (20003760 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
2000360c:	4293      	cmp	r3, r2
2000360e:	d00a      	beq.n	20003626 <HAL_DMAEx_MultiBufferStart_IT+0x1de>
20003610:	68fb      	ldr	r3, [r7, #12]
20003612:	681b      	ldr	r3, [r3, #0]
20003614:	4a53      	ldr	r2, [pc, #332]	; (20003764 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
20003616:	4293      	cmp	r3, r2
20003618:	d102      	bne.n	20003620 <HAL_DMAEx_MultiBufferStart_IT+0x1d8>
2000361a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2000361e:	e01e      	b.n	2000365e <HAL_DMAEx_MultiBufferStart_IT+0x216>
20003620:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
20003624:	e01b      	b.n	2000365e <HAL_DMAEx_MultiBufferStart_IT+0x216>
20003626:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2000362a:	e018      	b.n	2000365e <HAL_DMAEx_MultiBufferStart_IT+0x216>
2000362c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
20003630:	e015      	b.n	2000365e <HAL_DMAEx_MultiBufferStart_IT+0x216>
20003632:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
20003636:	e012      	b.n	2000365e <HAL_DMAEx_MultiBufferStart_IT+0x216>
20003638:	f44f 6300 	mov.w	r3, #2048	; 0x800
2000363c:	e00f      	b.n	2000365e <HAL_DMAEx_MultiBufferStart_IT+0x216>
2000363e:	f44f 6300 	mov.w	r3, #2048	; 0x800
20003642:	e00c      	b.n	2000365e <HAL_DMAEx_MultiBufferStart_IT+0x216>
20003644:	f44f 6300 	mov.w	r3, #2048	; 0x800
20003648:	e009      	b.n	2000365e <HAL_DMAEx_MultiBufferStart_IT+0x216>
2000364a:	f44f 6300 	mov.w	r3, #2048	; 0x800
2000364e:	e006      	b.n	2000365e <HAL_DMAEx_MultiBufferStart_IT+0x216>
20003650:	2320      	movs	r3, #32
20003652:	e004      	b.n	2000365e <HAL_DMAEx_MultiBufferStart_IT+0x216>
20003654:	2320      	movs	r3, #32
20003656:	e002      	b.n	2000365e <HAL_DMAEx_MultiBufferStart_IT+0x216>
20003658:	2320      	movs	r3, #32
2000365a:	e000      	b.n	2000365e <HAL_DMAEx_MultiBufferStart_IT+0x216>
2000365c:	2320      	movs	r3, #32
2000365e:	4a42      	ldr	r2, [pc, #264]	; (20003768 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
20003660:	6093      	str	r3, [r2, #8]
20003662:	e0e9      	b.n	20003838 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
20003664:	68fb      	ldr	r3, [r7, #12]
20003666:	681b      	ldr	r3, [r3, #0]
20003668:	461a      	mov	r2, r3
2000366a:	4b41      	ldr	r3, [pc, #260]	; (20003770 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
2000366c:	429a      	cmp	r2, r3
2000366e:	f240 8083 	bls.w	20003778 <HAL_DMAEx_MultiBufferStart_IT+0x330>
20003672:	68fb      	ldr	r3, [r7, #12]
20003674:	681b      	ldr	r3, [r3, #0]
20003676:	4a30      	ldr	r2, [pc, #192]	; (20003738 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
20003678:	4293      	cmp	r3, r2
2000367a:	d057      	beq.n	2000372c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
2000367c:	68fb      	ldr	r3, [r7, #12]
2000367e:	681b      	ldr	r3, [r3, #0]
20003680:	4a2e      	ldr	r2, [pc, #184]	; (2000373c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
20003682:	4293      	cmp	r3, r2
20003684:	d050      	beq.n	20003728 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>
20003686:	68fb      	ldr	r3, [r7, #12]
20003688:	681b      	ldr	r3, [r3, #0]
2000368a:	4a2d      	ldr	r2, [pc, #180]	; (20003740 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
2000368c:	4293      	cmp	r3, r2
2000368e:	d049      	beq.n	20003724 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>
20003690:	68fb      	ldr	r3, [r7, #12]
20003692:	681b      	ldr	r3, [r3, #0]
20003694:	4a2b      	ldr	r2, [pc, #172]	; (20003744 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
20003696:	4293      	cmp	r3, r2
20003698:	d042      	beq.n	20003720 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
2000369a:	68fb      	ldr	r3, [r7, #12]
2000369c:	681b      	ldr	r3, [r3, #0]
2000369e:	4a2a      	ldr	r2, [pc, #168]	; (20003748 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
200036a0:	4293      	cmp	r3, r2
200036a2:	d03a      	beq.n	2000371a <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
200036a4:	68fb      	ldr	r3, [r7, #12]
200036a6:	681b      	ldr	r3, [r3, #0]
200036a8:	4a28      	ldr	r2, [pc, #160]	; (2000374c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
200036aa:	4293      	cmp	r3, r2
200036ac:	d032      	beq.n	20003714 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
200036ae:	68fb      	ldr	r3, [r7, #12]
200036b0:	681b      	ldr	r3, [r3, #0]
200036b2:	4a27      	ldr	r2, [pc, #156]	; (20003750 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
200036b4:	4293      	cmp	r3, r2
200036b6:	d02a      	beq.n	2000370e <HAL_DMAEx_MultiBufferStart_IT+0x2c6>
200036b8:	68fb      	ldr	r3, [r7, #12]
200036ba:	681b      	ldr	r3, [r3, #0]
200036bc:	4a25      	ldr	r2, [pc, #148]	; (20003754 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
200036be:	4293      	cmp	r3, r2
200036c0:	d022      	beq.n	20003708 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>
200036c2:	68fb      	ldr	r3, [r7, #12]
200036c4:	681b      	ldr	r3, [r3, #0]
200036c6:	4a24      	ldr	r2, [pc, #144]	; (20003758 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
200036c8:	4293      	cmp	r3, r2
200036ca:	d01a      	beq.n	20003702 <HAL_DMAEx_MultiBufferStart_IT+0x2ba>
200036cc:	68fb      	ldr	r3, [r7, #12]
200036ce:	681b      	ldr	r3, [r3, #0]
200036d0:	4a22      	ldr	r2, [pc, #136]	; (2000375c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
200036d2:	4293      	cmp	r3, r2
200036d4:	d012      	beq.n	200036fc <HAL_DMAEx_MultiBufferStart_IT+0x2b4>
200036d6:	68fb      	ldr	r3, [r7, #12]
200036d8:	681b      	ldr	r3, [r3, #0]
200036da:	4a21      	ldr	r2, [pc, #132]	; (20003760 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
200036dc:	4293      	cmp	r3, r2
200036de:	d00a      	beq.n	200036f6 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
200036e0:	68fb      	ldr	r3, [r7, #12]
200036e2:	681b      	ldr	r3, [r3, #0]
200036e4:	4a1f      	ldr	r2, [pc, #124]	; (20003764 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
200036e6:	4293      	cmp	r3, r2
200036e8:	d102      	bne.n	200036f0 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>
200036ea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
200036ee:	e01e      	b.n	2000372e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
200036f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
200036f4:	e01b      	b.n	2000372e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
200036f6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
200036fa:	e018      	b.n	2000372e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
200036fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
20003700:	e015      	b.n	2000372e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
20003702:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
20003706:	e012      	b.n	2000372e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
20003708:	f44f 6300 	mov.w	r3, #2048	; 0x800
2000370c:	e00f      	b.n	2000372e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
2000370e:	f44f 6300 	mov.w	r3, #2048	; 0x800
20003712:	e00c      	b.n	2000372e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
20003714:	f44f 6300 	mov.w	r3, #2048	; 0x800
20003718:	e009      	b.n	2000372e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
2000371a:	f44f 6300 	mov.w	r3, #2048	; 0x800
2000371e:	e006      	b.n	2000372e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
20003720:	2320      	movs	r3, #32
20003722:	e004      	b.n	2000372e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
20003724:	2320      	movs	r3, #32
20003726:	e002      	b.n	2000372e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
20003728:	2320      	movs	r3, #32
2000372a:	e000      	b.n	2000372e <HAL_DMAEx_MultiBufferStart_IT+0x2e6>
2000372c:	2320      	movs	r3, #32
2000372e:	4a11      	ldr	r2, [pc, #68]	; (20003774 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
20003730:	60d3      	str	r3, [r2, #12]
20003732:	e081      	b.n	20003838 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
20003734:	40026458 	.word	0x40026458
20003738:	40026010 	.word	0x40026010
2000373c:	40026410 	.word	0x40026410
20003740:	40026070 	.word	0x40026070
20003744:	40026470 	.word	0x40026470
20003748:	40026028 	.word	0x40026028
2000374c:	40026428 	.word	0x40026428
20003750:	40026088 	.word	0x40026088
20003754:	40026488 	.word	0x40026488
20003758:	40026040 	.word	0x40026040
2000375c:	40026440 	.word	0x40026440
20003760:	400260a0 	.word	0x400260a0
20003764:	400264a0 	.word	0x400264a0
20003768:	40026400 	.word	0x40026400
2000376c:	400260b8 	.word	0x400260b8
20003770:	40026058 	.word	0x40026058
20003774:	40026000 	.word	0x40026000
20003778:	68fb      	ldr	r3, [r7, #12]
2000377a:	681b      	ldr	r3, [r3, #0]
2000377c:	4a96      	ldr	r2, [pc, #600]	; (200039d8 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
2000377e:	4293      	cmp	r3, r2
20003780:	d057      	beq.n	20003832 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
20003782:	68fb      	ldr	r3, [r7, #12]
20003784:	681b      	ldr	r3, [r3, #0]
20003786:	4a95      	ldr	r2, [pc, #596]	; (200039dc <HAL_DMAEx_MultiBufferStart_IT+0x594>)
20003788:	4293      	cmp	r3, r2
2000378a:	d050      	beq.n	2000382e <HAL_DMAEx_MultiBufferStart_IT+0x3e6>
2000378c:	68fb      	ldr	r3, [r7, #12]
2000378e:	681b      	ldr	r3, [r3, #0]
20003790:	4a93      	ldr	r2, [pc, #588]	; (200039e0 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
20003792:	4293      	cmp	r3, r2
20003794:	d049      	beq.n	2000382a <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
20003796:	68fb      	ldr	r3, [r7, #12]
20003798:	681b      	ldr	r3, [r3, #0]
2000379a:	4a92      	ldr	r2, [pc, #584]	; (200039e4 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
2000379c:	4293      	cmp	r3, r2
2000379e:	d042      	beq.n	20003826 <HAL_DMAEx_MultiBufferStart_IT+0x3de>
200037a0:	68fb      	ldr	r3, [r7, #12]
200037a2:	681b      	ldr	r3, [r3, #0]
200037a4:	4a90      	ldr	r2, [pc, #576]	; (200039e8 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
200037a6:	4293      	cmp	r3, r2
200037a8:	d03a      	beq.n	20003820 <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
200037aa:	68fb      	ldr	r3, [r7, #12]
200037ac:	681b      	ldr	r3, [r3, #0]
200037ae:	4a8f      	ldr	r2, [pc, #572]	; (200039ec <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
200037b0:	4293      	cmp	r3, r2
200037b2:	d032      	beq.n	2000381a <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
200037b4:	68fb      	ldr	r3, [r7, #12]
200037b6:	681b      	ldr	r3, [r3, #0]
200037b8:	4a8d      	ldr	r2, [pc, #564]	; (200039f0 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
200037ba:	4293      	cmp	r3, r2
200037bc:	d02a      	beq.n	20003814 <HAL_DMAEx_MultiBufferStart_IT+0x3cc>
200037be:	68fb      	ldr	r3, [r7, #12]
200037c0:	681b      	ldr	r3, [r3, #0]
200037c2:	4a8c      	ldr	r2, [pc, #560]	; (200039f4 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
200037c4:	4293      	cmp	r3, r2
200037c6:	d022      	beq.n	2000380e <HAL_DMAEx_MultiBufferStart_IT+0x3c6>
200037c8:	68fb      	ldr	r3, [r7, #12]
200037ca:	681b      	ldr	r3, [r3, #0]
200037cc:	4a8a      	ldr	r2, [pc, #552]	; (200039f8 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
200037ce:	4293      	cmp	r3, r2
200037d0:	d01a      	beq.n	20003808 <HAL_DMAEx_MultiBufferStart_IT+0x3c0>
200037d2:	68fb      	ldr	r3, [r7, #12]
200037d4:	681b      	ldr	r3, [r3, #0]
200037d6:	4a89      	ldr	r2, [pc, #548]	; (200039fc <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
200037d8:	4293      	cmp	r3, r2
200037da:	d012      	beq.n	20003802 <HAL_DMAEx_MultiBufferStart_IT+0x3ba>
200037dc:	68fb      	ldr	r3, [r7, #12]
200037de:	681b      	ldr	r3, [r3, #0]
200037e0:	4a87      	ldr	r2, [pc, #540]	; (20003a00 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
200037e2:	4293      	cmp	r3, r2
200037e4:	d00a      	beq.n	200037fc <HAL_DMAEx_MultiBufferStart_IT+0x3b4>
200037e6:	68fb      	ldr	r3, [r7, #12]
200037e8:	681b      	ldr	r3, [r3, #0]
200037ea:	4a86      	ldr	r2, [pc, #536]	; (20003a04 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
200037ec:	4293      	cmp	r3, r2
200037ee:	d102      	bne.n	200037f6 <HAL_DMAEx_MultiBufferStart_IT+0x3ae>
200037f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
200037f4:	e01e      	b.n	20003834 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
200037f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
200037fa:	e01b      	b.n	20003834 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
200037fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
20003800:	e018      	b.n	20003834 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
20003802:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
20003806:	e015      	b.n	20003834 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
20003808:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2000380c:	e012      	b.n	20003834 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
2000380e:	f44f 6300 	mov.w	r3, #2048	; 0x800
20003812:	e00f      	b.n	20003834 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
20003814:	f44f 6300 	mov.w	r3, #2048	; 0x800
20003818:	e00c      	b.n	20003834 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
2000381a:	f44f 6300 	mov.w	r3, #2048	; 0x800
2000381e:	e009      	b.n	20003834 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
20003820:	f44f 6300 	mov.w	r3, #2048	; 0x800
20003824:	e006      	b.n	20003834 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
20003826:	2320      	movs	r3, #32
20003828:	e004      	b.n	20003834 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
2000382a:	2320      	movs	r3, #32
2000382c:	e002      	b.n	20003834 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
2000382e:	2320      	movs	r3, #32
20003830:	e000      	b.n	20003834 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>
20003832:	2320      	movs	r3, #32
20003834:	4a74      	ldr	r2, [pc, #464]	; (20003a08 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
20003836:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
20003838:	68fb      	ldr	r3, [r7, #12]
2000383a:	681b      	ldr	r3, [r3, #0]
2000383c:	461a      	mov	r2, r3
2000383e:	4b73      	ldr	r3, [pc, #460]	; (20003a0c <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
20003840:	429a      	cmp	r2, r3
20003842:	d960      	bls.n	20003906 <HAL_DMAEx_MultiBufferStart_IT+0x4be>
20003844:	68fb      	ldr	r3, [r7, #12]
20003846:	681b      	ldr	r3, [r3, #0]
20003848:	4a63      	ldr	r2, [pc, #396]	; (200039d8 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
2000384a:	4293      	cmp	r3, r2
2000384c:	d057      	beq.n	200038fe <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
2000384e:	68fb      	ldr	r3, [r7, #12]
20003850:	681b      	ldr	r3, [r3, #0]
20003852:	4a62      	ldr	r2, [pc, #392]	; (200039dc <HAL_DMAEx_MultiBufferStart_IT+0x594>)
20003854:	4293      	cmp	r3, r2
20003856:	d050      	beq.n	200038fa <HAL_DMAEx_MultiBufferStart_IT+0x4b2>
20003858:	68fb      	ldr	r3, [r7, #12]
2000385a:	681b      	ldr	r3, [r3, #0]
2000385c:	4a60      	ldr	r2, [pc, #384]	; (200039e0 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
2000385e:	4293      	cmp	r3, r2
20003860:	d049      	beq.n	200038f6 <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
20003862:	68fb      	ldr	r3, [r7, #12]
20003864:	681b      	ldr	r3, [r3, #0]
20003866:	4a5f      	ldr	r2, [pc, #380]	; (200039e4 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
20003868:	4293      	cmp	r3, r2
2000386a:	d042      	beq.n	200038f2 <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
2000386c:	68fb      	ldr	r3, [r7, #12]
2000386e:	681b      	ldr	r3, [r3, #0]
20003870:	4a5d      	ldr	r2, [pc, #372]	; (200039e8 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
20003872:	4293      	cmp	r3, r2
20003874:	d03a      	beq.n	200038ec <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
20003876:	68fb      	ldr	r3, [r7, #12]
20003878:	681b      	ldr	r3, [r3, #0]
2000387a:	4a5c      	ldr	r2, [pc, #368]	; (200039ec <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
2000387c:	4293      	cmp	r3, r2
2000387e:	d032      	beq.n	200038e6 <HAL_DMAEx_MultiBufferStart_IT+0x49e>
20003880:	68fb      	ldr	r3, [r7, #12]
20003882:	681b      	ldr	r3, [r3, #0]
20003884:	4a5a      	ldr	r2, [pc, #360]	; (200039f0 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
20003886:	4293      	cmp	r3, r2
20003888:	d02a      	beq.n	200038e0 <HAL_DMAEx_MultiBufferStart_IT+0x498>
2000388a:	68fb      	ldr	r3, [r7, #12]
2000388c:	681b      	ldr	r3, [r3, #0]
2000388e:	4a59      	ldr	r2, [pc, #356]	; (200039f4 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
20003890:	4293      	cmp	r3, r2
20003892:	d022      	beq.n	200038da <HAL_DMAEx_MultiBufferStart_IT+0x492>
20003894:	68fb      	ldr	r3, [r7, #12]
20003896:	681b      	ldr	r3, [r3, #0]
20003898:	4a57      	ldr	r2, [pc, #348]	; (200039f8 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
2000389a:	4293      	cmp	r3, r2
2000389c:	d01a      	beq.n	200038d4 <HAL_DMAEx_MultiBufferStart_IT+0x48c>
2000389e:	68fb      	ldr	r3, [r7, #12]
200038a0:	681b      	ldr	r3, [r3, #0]
200038a2:	4a56      	ldr	r2, [pc, #344]	; (200039fc <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
200038a4:	4293      	cmp	r3, r2
200038a6:	d012      	beq.n	200038ce <HAL_DMAEx_MultiBufferStart_IT+0x486>
200038a8:	68fb      	ldr	r3, [r7, #12]
200038aa:	681b      	ldr	r3, [r3, #0]
200038ac:	4a54      	ldr	r2, [pc, #336]	; (20003a00 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
200038ae:	4293      	cmp	r3, r2
200038b0:	d00a      	beq.n	200038c8 <HAL_DMAEx_MultiBufferStart_IT+0x480>
200038b2:	68fb      	ldr	r3, [r7, #12]
200038b4:	681b      	ldr	r3, [r3, #0]
200038b6:	4a53      	ldr	r2, [pc, #332]	; (20003a04 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
200038b8:	4293      	cmp	r3, r2
200038ba:	d102      	bne.n	200038c2 <HAL_DMAEx_MultiBufferStart_IT+0x47a>
200038bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
200038c0:	e01e      	b.n	20003900 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
200038c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
200038c6:	e01b      	b.n	20003900 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
200038c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
200038cc:	e018      	b.n	20003900 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
200038ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
200038d2:	e015      	b.n	20003900 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
200038d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
200038d8:	e012      	b.n	20003900 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
200038da:	f44f 6380 	mov.w	r3, #1024	; 0x400
200038de:	e00f      	b.n	20003900 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
200038e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
200038e4:	e00c      	b.n	20003900 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
200038e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
200038ea:	e009      	b.n	20003900 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
200038ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
200038f0:	e006      	b.n	20003900 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
200038f2:	2310      	movs	r3, #16
200038f4:	e004      	b.n	20003900 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
200038f6:	2310      	movs	r3, #16
200038f8:	e002      	b.n	20003900 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
200038fa:	2310      	movs	r3, #16
200038fc:	e000      	b.n	20003900 <HAL_DMAEx_MultiBufferStart_IT+0x4b8>
200038fe:	2310      	movs	r3, #16
20003900:	4a43      	ldr	r2, [pc, #268]	; (20003a10 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
20003902:	60d3      	str	r3, [r2, #12]
20003904:	e14f      	b.n	20003ba6 <HAL_DMAEx_MultiBufferStart_IT+0x75e>
20003906:	68fb      	ldr	r3, [r7, #12]
20003908:	681b      	ldr	r3, [r3, #0]
2000390a:	461a      	mov	r2, r3
2000390c:	4b41      	ldr	r3, [pc, #260]	; (20003a14 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
2000390e:	429a      	cmp	r2, r3
20003910:	f240 8082 	bls.w	20003a18 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>
20003914:	68fb      	ldr	r3, [r7, #12]
20003916:	681b      	ldr	r3, [r3, #0]
20003918:	4a2f      	ldr	r2, [pc, #188]	; (200039d8 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
2000391a:	4293      	cmp	r3, r2
2000391c:	d057      	beq.n	200039ce <HAL_DMAEx_MultiBufferStart_IT+0x586>
2000391e:	68fb      	ldr	r3, [r7, #12]
20003920:	681b      	ldr	r3, [r3, #0]
20003922:	4a2e      	ldr	r2, [pc, #184]	; (200039dc <HAL_DMAEx_MultiBufferStart_IT+0x594>)
20003924:	4293      	cmp	r3, r2
20003926:	d050      	beq.n	200039ca <HAL_DMAEx_MultiBufferStart_IT+0x582>
20003928:	68fb      	ldr	r3, [r7, #12]
2000392a:	681b      	ldr	r3, [r3, #0]
2000392c:	4a2c      	ldr	r2, [pc, #176]	; (200039e0 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
2000392e:	4293      	cmp	r3, r2
20003930:	d049      	beq.n	200039c6 <HAL_DMAEx_MultiBufferStart_IT+0x57e>
20003932:	68fb      	ldr	r3, [r7, #12]
20003934:	681b      	ldr	r3, [r3, #0]
20003936:	4a2b      	ldr	r2, [pc, #172]	; (200039e4 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
20003938:	4293      	cmp	r3, r2
2000393a:	d042      	beq.n	200039c2 <HAL_DMAEx_MultiBufferStart_IT+0x57a>
2000393c:	68fb      	ldr	r3, [r7, #12]
2000393e:	681b      	ldr	r3, [r3, #0]
20003940:	4a29      	ldr	r2, [pc, #164]	; (200039e8 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
20003942:	4293      	cmp	r3, r2
20003944:	d03a      	beq.n	200039bc <HAL_DMAEx_MultiBufferStart_IT+0x574>
20003946:	68fb      	ldr	r3, [r7, #12]
20003948:	681b      	ldr	r3, [r3, #0]
2000394a:	4a28      	ldr	r2, [pc, #160]	; (200039ec <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
2000394c:	4293      	cmp	r3, r2
2000394e:	d032      	beq.n	200039b6 <HAL_DMAEx_MultiBufferStart_IT+0x56e>
20003950:	68fb      	ldr	r3, [r7, #12]
20003952:	681b      	ldr	r3, [r3, #0]
20003954:	4a26      	ldr	r2, [pc, #152]	; (200039f0 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
20003956:	4293      	cmp	r3, r2
20003958:	d02a      	beq.n	200039b0 <HAL_DMAEx_MultiBufferStart_IT+0x568>
2000395a:	68fb      	ldr	r3, [r7, #12]
2000395c:	681b      	ldr	r3, [r3, #0]
2000395e:	4a25      	ldr	r2, [pc, #148]	; (200039f4 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
20003960:	4293      	cmp	r3, r2
20003962:	d022      	beq.n	200039aa <HAL_DMAEx_MultiBufferStart_IT+0x562>
20003964:	68fb      	ldr	r3, [r7, #12]
20003966:	681b      	ldr	r3, [r3, #0]
20003968:	4a23      	ldr	r2, [pc, #140]	; (200039f8 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
2000396a:	4293      	cmp	r3, r2
2000396c:	d01a      	beq.n	200039a4 <HAL_DMAEx_MultiBufferStart_IT+0x55c>
2000396e:	68fb      	ldr	r3, [r7, #12]
20003970:	681b      	ldr	r3, [r3, #0]
20003972:	4a22      	ldr	r2, [pc, #136]	; (200039fc <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
20003974:	4293      	cmp	r3, r2
20003976:	d012      	beq.n	2000399e <HAL_DMAEx_MultiBufferStart_IT+0x556>
20003978:	68fb      	ldr	r3, [r7, #12]
2000397a:	681b      	ldr	r3, [r3, #0]
2000397c:	4a20      	ldr	r2, [pc, #128]	; (20003a00 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
2000397e:	4293      	cmp	r3, r2
20003980:	d00a      	beq.n	20003998 <HAL_DMAEx_MultiBufferStart_IT+0x550>
20003982:	68fb      	ldr	r3, [r7, #12]
20003984:	681b      	ldr	r3, [r3, #0]
20003986:	4a1f      	ldr	r2, [pc, #124]	; (20003a04 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
20003988:	4293      	cmp	r3, r2
2000398a:	d102      	bne.n	20003992 <HAL_DMAEx_MultiBufferStart_IT+0x54a>
2000398c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20003990:	e01e      	b.n	200039d0 <HAL_DMAEx_MultiBufferStart_IT+0x588>
20003992:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
20003996:	e01b      	b.n	200039d0 <HAL_DMAEx_MultiBufferStart_IT+0x588>
20003998:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2000399c:	e018      	b.n	200039d0 <HAL_DMAEx_MultiBufferStart_IT+0x588>
2000399e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
200039a2:	e015      	b.n	200039d0 <HAL_DMAEx_MultiBufferStart_IT+0x588>
200039a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
200039a8:	e012      	b.n	200039d0 <HAL_DMAEx_MultiBufferStart_IT+0x588>
200039aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
200039ae:	e00f      	b.n	200039d0 <HAL_DMAEx_MultiBufferStart_IT+0x588>
200039b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
200039b4:	e00c      	b.n	200039d0 <HAL_DMAEx_MultiBufferStart_IT+0x588>
200039b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
200039ba:	e009      	b.n	200039d0 <HAL_DMAEx_MultiBufferStart_IT+0x588>
200039bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
200039c0:	e006      	b.n	200039d0 <HAL_DMAEx_MultiBufferStart_IT+0x588>
200039c2:	2310      	movs	r3, #16
200039c4:	e004      	b.n	200039d0 <HAL_DMAEx_MultiBufferStart_IT+0x588>
200039c6:	2310      	movs	r3, #16
200039c8:	e002      	b.n	200039d0 <HAL_DMAEx_MultiBufferStart_IT+0x588>
200039ca:	2310      	movs	r3, #16
200039cc:	e000      	b.n	200039d0 <HAL_DMAEx_MultiBufferStart_IT+0x588>
200039ce:	2310      	movs	r3, #16
200039d0:	4a0f      	ldr	r2, [pc, #60]	; (20003a10 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
200039d2:	6093      	str	r3, [r2, #8]
200039d4:	e0e7      	b.n	20003ba6 <HAL_DMAEx_MultiBufferStart_IT+0x75e>
200039d6:	bf00      	nop
200039d8:	40026010 	.word	0x40026010
200039dc:	40026410 	.word	0x40026410
200039e0:	40026070 	.word	0x40026070
200039e4:	40026470 	.word	0x40026470
200039e8:	40026028 	.word	0x40026028
200039ec:	40026428 	.word	0x40026428
200039f0:	40026088 	.word	0x40026088
200039f4:	40026488 	.word	0x40026488
200039f8:	40026040 	.word	0x40026040
200039fc:	40026440 	.word	0x40026440
20003a00:	400260a0 	.word	0x400260a0
20003a04:	400264a0 	.word	0x400264a0
20003a08:	40026000 	.word	0x40026000
20003a0c:	40026458 	.word	0x40026458
20003a10:	40026400 	.word	0x40026400
20003a14:	400260b8 	.word	0x400260b8
20003a18:	68fb      	ldr	r3, [r7, #12]
20003a1a:	681b      	ldr	r3, [r3, #0]
20003a1c:	461a      	mov	r2, r3
20003a1e:	4b96      	ldr	r3, [pc, #600]	; (20003c78 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
20003a20:	429a      	cmp	r2, r3
20003a22:	d960      	bls.n	20003ae6 <HAL_DMAEx_MultiBufferStart_IT+0x69e>
20003a24:	68fb      	ldr	r3, [r7, #12]
20003a26:	681b      	ldr	r3, [r3, #0]
20003a28:	4a94      	ldr	r2, [pc, #592]	; (20003c7c <HAL_DMAEx_MultiBufferStart_IT+0x834>)
20003a2a:	4293      	cmp	r3, r2
20003a2c:	d057      	beq.n	20003ade <HAL_DMAEx_MultiBufferStart_IT+0x696>
20003a2e:	68fb      	ldr	r3, [r7, #12]
20003a30:	681b      	ldr	r3, [r3, #0]
20003a32:	4a93      	ldr	r2, [pc, #588]	; (20003c80 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
20003a34:	4293      	cmp	r3, r2
20003a36:	d050      	beq.n	20003ada <HAL_DMAEx_MultiBufferStart_IT+0x692>
20003a38:	68fb      	ldr	r3, [r7, #12]
20003a3a:	681b      	ldr	r3, [r3, #0]
20003a3c:	4a91      	ldr	r2, [pc, #580]	; (20003c84 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
20003a3e:	4293      	cmp	r3, r2
20003a40:	d049      	beq.n	20003ad6 <HAL_DMAEx_MultiBufferStart_IT+0x68e>
20003a42:	68fb      	ldr	r3, [r7, #12]
20003a44:	681b      	ldr	r3, [r3, #0]
20003a46:	4a90      	ldr	r2, [pc, #576]	; (20003c88 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
20003a48:	4293      	cmp	r3, r2
20003a4a:	d042      	beq.n	20003ad2 <HAL_DMAEx_MultiBufferStart_IT+0x68a>
20003a4c:	68fb      	ldr	r3, [r7, #12]
20003a4e:	681b      	ldr	r3, [r3, #0]
20003a50:	4a8e      	ldr	r2, [pc, #568]	; (20003c8c <HAL_DMAEx_MultiBufferStart_IT+0x844>)
20003a52:	4293      	cmp	r3, r2
20003a54:	d03a      	beq.n	20003acc <HAL_DMAEx_MultiBufferStart_IT+0x684>
20003a56:	68fb      	ldr	r3, [r7, #12]
20003a58:	681b      	ldr	r3, [r3, #0]
20003a5a:	4a8d      	ldr	r2, [pc, #564]	; (20003c90 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
20003a5c:	4293      	cmp	r3, r2
20003a5e:	d032      	beq.n	20003ac6 <HAL_DMAEx_MultiBufferStart_IT+0x67e>
20003a60:	68fb      	ldr	r3, [r7, #12]
20003a62:	681b      	ldr	r3, [r3, #0]
20003a64:	4a8b      	ldr	r2, [pc, #556]	; (20003c94 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
20003a66:	4293      	cmp	r3, r2
20003a68:	d02a      	beq.n	20003ac0 <HAL_DMAEx_MultiBufferStart_IT+0x678>
20003a6a:	68fb      	ldr	r3, [r7, #12]
20003a6c:	681b      	ldr	r3, [r3, #0]
20003a6e:	4a8a      	ldr	r2, [pc, #552]	; (20003c98 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
20003a70:	4293      	cmp	r3, r2
20003a72:	d022      	beq.n	20003aba <HAL_DMAEx_MultiBufferStart_IT+0x672>
20003a74:	68fb      	ldr	r3, [r7, #12]
20003a76:	681b      	ldr	r3, [r3, #0]
20003a78:	4a88      	ldr	r2, [pc, #544]	; (20003c9c <HAL_DMAEx_MultiBufferStart_IT+0x854>)
20003a7a:	4293      	cmp	r3, r2
20003a7c:	d01a      	beq.n	20003ab4 <HAL_DMAEx_MultiBufferStart_IT+0x66c>
20003a7e:	68fb      	ldr	r3, [r7, #12]
20003a80:	681b      	ldr	r3, [r3, #0]
20003a82:	4a87      	ldr	r2, [pc, #540]	; (20003ca0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
20003a84:	4293      	cmp	r3, r2
20003a86:	d012      	beq.n	20003aae <HAL_DMAEx_MultiBufferStart_IT+0x666>
20003a88:	68fb      	ldr	r3, [r7, #12]
20003a8a:	681b      	ldr	r3, [r3, #0]
20003a8c:	4a85      	ldr	r2, [pc, #532]	; (20003ca4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
20003a8e:	4293      	cmp	r3, r2
20003a90:	d00a      	beq.n	20003aa8 <HAL_DMAEx_MultiBufferStart_IT+0x660>
20003a92:	68fb      	ldr	r3, [r7, #12]
20003a94:	681b      	ldr	r3, [r3, #0]
20003a96:	4a84      	ldr	r2, [pc, #528]	; (20003ca8 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
20003a98:	4293      	cmp	r3, r2
20003a9a:	d102      	bne.n	20003aa2 <HAL_DMAEx_MultiBufferStart_IT+0x65a>
20003a9c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20003aa0:	e01e      	b.n	20003ae0 <HAL_DMAEx_MultiBufferStart_IT+0x698>
20003aa2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
20003aa6:	e01b      	b.n	20003ae0 <HAL_DMAEx_MultiBufferStart_IT+0x698>
20003aa8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20003aac:	e018      	b.n	20003ae0 <HAL_DMAEx_MultiBufferStart_IT+0x698>
20003aae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20003ab2:	e015      	b.n	20003ae0 <HAL_DMAEx_MultiBufferStart_IT+0x698>
20003ab4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20003ab8:	e012      	b.n	20003ae0 <HAL_DMAEx_MultiBufferStart_IT+0x698>
20003aba:	f44f 6380 	mov.w	r3, #1024	; 0x400
20003abe:	e00f      	b.n	20003ae0 <HAL_DMAEx_MultiBufferStart_IT+0x698>
20003ac0:	f44f 6380 	mov.w	r3, #1024	; 0x400
20003ac4:	e00c      	b.n	20003ae0 <HAL_DMAEx_MultiBufferStart_IT+0x698>
20003ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
20003aca:	e009      	b.n	20003ae0 <HAL_DMAEx_MultiBufferStart_IT+0x698>
20003acc:	f44f 6380 	mov.w	r3, #1024	; 0x400
20003ad0:	e006      	b.n	20003ae0 <HAL_DMAEx_MultiBufferStart_IT+0x698>
20003ad2:	2310      	movs	r3, #16
20003ad4:	e004      	b.n	20003ae0 <HAL_DMAEx_MultiBufferStart_IT+0x698>
20003ad6:	2310      	movs	r3, #16
20003ad8:	e002      	b.n	20003ae0 <HAL_DMAEx_MultiBufferStart_IT+0x698>
20003ada:	2310      	movs	r3, #16
20003adc:	e000      	b.n	20003ae0 <HAL_DMAEx_MultiBufferStart_IT+0x698>
20003ade:	2310      	movs	r3, #16
20003ae0:	4a72      	ldr	r2, [pc, #456]	; (20003cac <HAL_DMAEx_MultiBufferStart_IT+0x864>)
20003ae2:	60d3      	str	r3, [r2, #12]
20003ae4:	e05f      	b.n	20003ba6 <HAL_DMAEx_MultiBufferStart_IT+0x75e>
20003ae6:	68fb      	ldr	r3, [r7, #12]
20003ae8:	681b      	ldr	r3, [r3, #0]
20003aea:	4a64      	ldr	r2, [pc, #400]	; (20003c7c <HAL_DMAEx_MultiBufferStart_IT+0x834>)
20003aec:	4293      	cmp	r3, r2
20003aee:	d057      	beq.n	20003ba0 <HAL_DMAEx_MultiBufferStart_IT+0x758>
20003af0:	68fb      	ldr	r3, [r7, #12]
20003af2:	681b      	ldr	r3, [r3, #0]
20003af4:	4a62      	ldr	r2, [pc, #392]	; (20003c80 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
20003af6:	4293      	cmp	r3, r2
20003af8:	d050      	beq.n	20003b9c <HAL_DMAEx_MultiBufferStart_IT+0x754>
20003afa:	68fb      	ldr	r3, [r7, #12]
20003afc:	681b      	ldr	r3, [r3, #0]
20003afe:	4a61      	ldr	r2, [pc, #388]	; (20003c84 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
20003b00:	4293      	cmp	r3, r2
20003b02:	d049      	beq.n	20003b98 <HAL_DMAEx_MultiBufferStart_IT+0x750>
20003b04:	68fb      	ldr	r3, [r7, #12]
20003b06:	681b      	ldr	r3, [r3, #0]
20003b08:	4a5f      	ldr	r2, [pc, #380]	; (20003c88 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
20003b0a:	4293      	cmp	r3, r2
20003b0c:	d042      	beq.n	20003b94 <HAL_DMAEx_MultiBufferStart_IT+0x74c>
20003b0e:	68fb      	ldr	r3, [r7, #12]
20003b10:	681b      	ldr	r3, [r3, #0]
20003b12:	4a5e      	ldr	r2, [pc, #376]	; (20003c8c <HAL_DMAEx_MultiBufferStart_IT+0x844>)
20003b14:	4293      	cmp	r3, r2
20003b16:	d03a      	beq.n	20003b8e <HAL_DMAEx_MultiBufferStart_IT+0x746>
20003b18:	68fb      	ldr	r3, [r7, #12]
20003b1a:	681b      	ldr	r3, [r3, #0]
20003b1c:	4a5c      	ldr	r2, [pc, #368]	; (20003c90 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
20003b1e:	4293      	cmp	r3, r2
20003b20:	d032      	beq.n	20003b88 <HAL_DMAEx_MultiBufferStart_IT+0x740>
20003b22:	68fb      	ldr	r3, [r7, #12]
20003b24:	681b      	ldr	r3, [r3, #0]
20003b26:	4a5b      	ldr	r2, [pc, #364]	; (20003c94 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
20003b28:	4293      	cmp	r3, r2
20003b2a:	d02a      	beq.n	20003b82 <HAL_DMAEx_MultiBufferStart_IT+0x73a>
20003b2c:	68fb      	ldr	r3, [r7, #12]
20003b2e:	681b      	ldr	r3, [r3, #0]
20003b30:	4a59      	ldr	r2, [pc, #356]	; (20003c98 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
20003b32:	4293      	cmp	r3, r2
20003b34:	d022      	beq.n	20003b7c <HAL_DMAEx_MultiBufferStart_IT+0x734>
20003b36:	68fb      	ldr	r3, [r7, #12]
20003b38:	681b      	ldr	r3, [r3, #0]
20003b3a:	4a58      	ldr	r2, [pc, #352]	; (20003c9c <HAL_DMAEx_MultiBufferStart_IT+0x854>)
20003b3c:	4293      	cmp	r3, r2
20003b3e:	d01a      	beq.n	20003b76 <HAL_DMAEx_MultiBufferStart_IT+0x72e>
20003b40:	68fb      	ldr	r3, [r7, #12]
20003b42:	681b      	ldr	r3, [r3, #0]
20003b44:	4a56      	ldr	r2, [pc, #344]	; (20003ca0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
20003b46:	4293      	cmp	r3, r2
20003b48:	d012      	beq.n	20003b70 <HAL_DMAEx_MultiBufferStart_IT+0x728>
20003b4a:	68fb      	ldr	r3, [r7, #12]
20003b4c:	681b      	ldr	r3, [r3, #0]
20003b4e:	4a55      	ldr	r2, [pc, #340]	; (20003ca4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
20003b50:	4293      	cmp	r3, r2
20003b52:	d00a      	beq.n	20003b6a <HAL_DMAEx_MultiBufferStart_IT+0x722>
20003b54:	68fb      	ldr	r3, [r7, #12]
20003b56:	681b      	ldr	r3, [r3, #0]
20003b58:	4a53      	ldr	r2, [pc, #332]	; (20003ca8 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
20003b5a:	4293      	cmp	r3, r2
20003b5c:	d102      	bne.n	20003b64 <HAL_DMAEx_MultiBufferStart_IT+0x71c>
20003b5e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20003b62:	e01e      	b.n	20003ba2 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
20003b64:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
20003b68:	e01b      	b.n	20003ba2 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
20003b6a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20003b6e:	e018      	b.n	20003ba2 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
20003b70:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20003b74:	e015      	b.n	20003ba2 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
20003b76:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20003b7a:	e012      	b.n	20003ba2 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
20003b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20003b80:	e00f      	b.n	20003ba2 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
20003b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
20003b86:	e00c      	b.n	20003ba2 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
20003b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
20003b8c:	e009      	b.n	20003ba2 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
20003b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
20003b92:	e006      	b.n	20003ba2 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
20003b94:	2310      	movs	r3, #16
20003b96:	e004      	b.n	20003ba2 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
20003b98:	2310      	movs	r3, #16
20003b9a:	e002      	b.n	20003ba2 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
20003b9c:	2310      	movs	r3, #16
20003b9e:	e000      	b.n	20003ba2 <HAL_DMAEx_MultiBufferStart_IT+0x75a>
20003ba0:	2310      	movs	r3, #16
20003ba2:	4a42      	ldr	r2, [pc, #264]	; (20003cac <HAL_DMAEx_MultiBufferStart_IT+0x864>)
20003ba4:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
20003ba6:	68fb      	ldr	r3, [r7, #12]
20003ba8:	681b      	ldr	r3, [r3, #0]
20003baa:	461a      	mov	r2, r3
20003bac:	4b40      	ldr	r3, [pc, #256]	; (20003cb0 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
20003bae:	429a      	cmp	r2, r3
20003bb0:	f240 8082 	bls.w	20003cb8 <HAL_DMAEx_MultiBufferStart_IT+0x870>
20003bb4:	68fb      	ldr	r3, [r7, #12]
20003bb6:	681b      	ldr	r3, [r3, #0]
20003bb8:	4a30      	ldr	r2, [pc, #192]	; (20003c7c <HAL_DMAEx_MultiBufferStart_IT+0x834>)
20003bba:	4293      	cmp	r3, r2
20003bbc:	d057      	beq.n	20003c6e <HAL_DMAEx_MultiBufferStart_IT+0x826>
20003bbe:	68fb      	ldr	r3, [r7, #12]
20003bc0:	681b      	ldr	r3, [r3, #0]
20003bc2:	4a2f      	ldr	r2, [pc, #188]	; (20003c80 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
20003bc4:	4293      	cmp	r3, r2
20003bc6:	d050      	beq.n	20003c6a <HAL_DMAEx_MultiBufferStart_IT+0x822>
20003bc8:	68fb      	ldr	r3, [r7, #12]
20003bca:	681b      	ldr	r3, [r3, #0]
20003bcc:	4a2d      	ldr	r2, [pc, #180]	; (20003c84 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
20003bce:	4293      	cmp	r3, r2
20003bd0:	d049      	beq.n	20003c66 <HAL_DMAEx_MultiBufferStart_IT+0x81e>
20003bd2:	68fb      	ldr	r3, [r7, #12]
20003bd4:	681b      	ldr	r3, [r3, #0]
20003bd6:	4a2c      	ldr	r2, [pc, #176]	; (20003c88 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
20003bd8:	4293      	cmp	r3, r2
20003bda:	d042      	beq.n	20003c62 <HAL_DMAEx_MultiBufferStart_IT+0x81a>
20003bdc:	68fb      	ldr	r3, [r7, #12]
20003bde:	681b      	ldr	r3, [r3, #0]
20003be0:	4a2a      	ldr	r2, [pc, #168]	; (20003c8c <HAL_DMAEx_MultiBufferStart_IT+0x844>)
20003be2:	4293      	cmp	r3, r2
20003be4:	d03a      	beq.n	20003c5c <HAL_DMAEx_MultiBufferStart_IT+0x814>
20003be6:	68fb      	ldr	r3, [r7, #12]
20003be8:	681b      	ldr	r3, [r3, #0]
20003bea:	4a29      	ldr	r2, [pc, #164]	; (20003c90 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
20003bec:	4293      	cmp	r3, r2
20003bee:	d032      	beq.n	20003c56 <HAL_DMAEx_MultiBufferStart_IT+0x80e>
20003bf0:	68fb      	ldr	r3, [r7, #12]
20003bf2:	681b      	ldr	r3, [r3, #0]
20003bf4:	4a27      	ldr	r2, [pc, #156]	; (20003c94 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
20003bf6:	4293      	cmp	r3, r2
20003bf8:	d02a      	beq.n	20003c50 <HAL_DMAEx_MultiBufferStart_IT+0x808>
20003bfa:	68fb      	ldr	r3, [r7, #12]
20003bfc:	681b      	ldr	r3, [r3, #0]
20003bfe:	4a26      	ldr	r2, [pc, #152]	; (20003c98 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
20003c00:	4293      	cmp	r3, r2
20003c02:	d022      	beq.n	20003c4a <HAL_DMAEx_MultiBufferStart_IT+0x802>
20003c04:	68fb      	ldr	r3, [r7, #12]
20003c06:	681b      	ldr	r3, [r3, #0]
20003c08:	4a24      	ldr	r2, [pc, #144]	; (20003c9c <HAL_DMAEx_MultiBufferStart_IT+0x854>)
20003c0a:	4293      	cmp	r3, r2
20003c0c:	d01a      	beq.n	20003c44 <HAL_DMAEx_MultiBufferStart_IT+0x7fc>
20003c0e:	68fb      	ldr	r3, [r7, #12]
20003c10:	681b      	ldr	r3, [r3, #0]
20003c12:	4a23      	ldr	r2, [pc, #140]	; (20003ca0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
20003c14:	4293      	cmp	r3, r2
20003c16:	d012      	beq.n	20003c3e <HAL_DMAEx_MultiBufferStart_IT+0x7f6>
20003c18:	68fb      	ldr	r3, [r7, #12]
20003c1a:	681b      	ldr	r3, [r3, #0]
20003c1c:	4a21      	ldr	r2, [pc, #132]	; (20003ca4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
20003c1e:	4293      	cmp	r3, r2
20003c20:	d00a      	beq.n	20003c38 <HAL_DMAEx_MultiBufferStart_IT+0x7f0>
20003c22:	68fb      	ldr	r3, [r7, #12]
20003c24:	681b      	ldr	r3, [r3, #0]
20003c26:	4a20      	ldr	r2, [pc, #128]	; (20003ca8 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
20003c28:	4293      	cmp	r3, r2
20003c2a:	d102      	bne.n	20003c32 <HAL_DMAEx_MultiBufferStart_IT+0x7ea>
20003c2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003c30:	e01e      	b.n	20003c70 <HAL_DMAEx_MultiBufferStart_IT+0x828>
20003c32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
20003c36:	e01b      	b.n	20003c70 <HAL_DMAEx_MultiBufferStart_IT+0x828>
20003c38:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003c3c:	e018      	b.n	20003c70 <HAL_DMAEx_MultiBufferStart_IT+0x828>
20003c3e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003c42:	e015      	b.n	20003c70 <HAL_DMAEx_MultiBufferStart_IT+0x828>
20003c44:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003c48:	e012      	b.n	20003c70 <HAL_DMAEx_MultiBufferStart_IT+0x828>
20003c4a:	f44f 7300 	mov.w	r3, #512	; 0x200
20003c4e:	e00f      	b.n	20003c70 <HAL_DMAEx_MultiBufferStart_IT+0x828>
20003c50:	f44f 7300 	mov.w	r3, #512	; 0x200
20003c54:	e00c      	b.n	20003c70 <HAL_DMAEx_MultiBufferStart_IT+0x828>
20003c56:	f44f 7300 	mov.w	r3, #512	; 0x200
20003c5a:	e009      	b.n	20003c70 <HAL_DMAEx_MultiBufferStart_IT+0x828>
20003c5c:	f44f 7300 	mov.w	r3, #512	; 0x200
20003c60:	e006      	b.n	20003c70 <HAL_DMAEx_MultiBufferStart_IT+0x828>
20003c62:	2308      	movs	r3, #8
20003c64:	e004      	b.n	20003c70 <HAL_DMAEx_MultiBufferStart_IT+0x828>
20003c66:	2308      	movs	r3, #8
20003c68:	e002      	b.n	20003c70 <HAL_DMAEx_MultiBufferStart_IT+0x828>
20003c6a:	2308      	movs	r3, #8
20003c6c:	e000      	b.n	20003c70 <HAL_DMAEx_MultiBufferStart_IT+0x828>
20003c6e:	2308      	movs	r3, #8
20003c70:	4a10      	ldr	r2, [pc, #64]	; (20003cb4 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
20003c72:	60d3      	str	r3, [r2, #12]
20003c74:	e16f      	b.n	20003f56 <HAL_DMAEx_MultiBufferStart_IT+0xb0e>
20003c76:	bf00      	nop
20003c78:	40026058 	.word	0x40026058
20003c7c:	40026010 	.word	0x40026010
20003c80:	40026410 	.word	0x40026410
20003c84:	40026070 	.word	0x40026070
20003c88:	40026470 	.word	0x40026470
20003c8c:	40026028 	.word	0x40026028
20003c90:	40026428 	.word	0x40026428
20003c94:	40026088 	.word	0x40026088
20003c98:	40026488 	.word	0x40026488
20003c9c:	40026040 	.word	0x40026040
20003ca0:	40026440 	.word	0x40026440
20003ca4:	400260a0 	.word	0x400260a0
20003ca8:	400264a0 	.word	0x400264a0
20003cac:	40026000 	.word	0x40026000
20003cb0:	40026458 	.word	0x40026458
20003cb4:	40026400 	.word	0x40026400
20003cb8:	68fb      	ldr	r3, [r7, #12]
20003cba:	681b      	ldr	r3, [r3, #0]
20003cbc:	461a      	mov	r2, r3
20003cbe:	4b94      	ldr	r3, [pc, #592]	; (20003f10 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
20003cc0:	429a      	cmp	r2, r3
20003cc2:	d960      	bls.n	20003d86 <HAL_DMAEx_MultiBufferStart_IT+0x93e>
20003cc4:	68fb      	ldr	r3, [r7, #12]
20003cc6:	681b      	ldr	r3, [r3, #0]
20003cc8:	4a92      	ldr	r2, [pc, #584]	; (20003f14 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
20003cca:	4293      	cmp	r3, r2
20003ccc:	d057      	beq.n	20003d7e <HAL_DMAEx_MultiBufferStart_IT+0x936>
20003cce:	68fb      	ldr	r3, [r7, #12]
20003cd0:	681b      	ldr	r3, [r3, #0]
20003cd2:	4a91      	ldr	r2, [pc, #580]	; (20003f18 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
20003cd4:	4293      	cmp	r3, r2
20003cd6:	d050      	beq.n	20003d7a <HAL_DMAEx_MultiBufferStart_IT+0x932>
20003cd8:	68fb      	ldr	r3, [r7, #12]
20003cda:	681b      	ldr	r3, [r3, #0]
20003cdc:	4a8f      	ldr	r2, [pc, #572]	; (20003f1c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
20003cde:	4293      	cmp	r3, r2
20003ce0:	d049      	beq.n	20003d76 <HAL_DMAEx_MultiBufferStart_IT+0x92e>
20003ce2:	68fb      	ldr	r3, [r7, #12]
20003ce4:	681b      	ldr	r3, [r3, #0]
20003ce6:	4a8e      	ldr	r2, [pc, #568]	; (20003f20 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
20003ce8:	4293      	cmp	r3, r2
20003cea:	d042      	beq.n	20003d72 <HAL_DMAEx_MultiBufferStart_IT+0x92a>
20003cec:	68fb      	ldr	r3, [r7, #12]
20003cee:	681b      	ldr	r3, [r3, #0]
20003cf0:	4a8c      	ldr	r2, [pc, #560]	; (20003f24 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
20003cf2:	4293      	cmp	r3, r2
20003cf4:	d03a      	beq.n	20003d6c <HAL_DMAEx_MultiBufferStart_IT+0x924>
20003cf6:	68fb      	ldr	r3, [r7, #12]
20003cf8:	681b      	ldr	r3, [r3, #0]
20003cfa:	4a8b      	ldr	r2, [pc, #556]	; (20003f28 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
20003cfc:	4293      	cmp	r3, r2
20003cfe:	d032      	beq.n	20003d66 <HAL_DMAEx_MultiBufferStart_IT+0x91e>
20003d00:	68fb      	ldr	r3, [r7, #12]
20003d02:	681b      	ldr	r3, [r3, #0]
20003d04:	4a89      	ldr	r2, [pc, #548]	; (20003f2c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
20003d06:	4293      	cmp	r3, r2
20003d08:	d02a      	beq.n	20003d60 <HAL_DMAEx_MultiBufferStart_IT+0x918>
20003d0a:	68fb      	ldr	r3, [r7, #12]
20003d0c:	681b      	ldr	r3, [r3, #0]
20003d0e:	4a88      	ldr	r2, [pc, #544]	; (20003f30 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
20003d10:	4293      	cmp	r3, r2
20003d12:	d022      	beq.n	20003d5a <HAL_DMAEx_MultiBufferStart_IT+0x912>
20003d14:	68fb      	ldr	r3, [r7, #12]
20003d16:	681b      	ldr	r3, [r3, #0]
20003d18:	4a86      	ldr	r2, [pc, #536]	; (20003f34 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
20003d1a:	4293      	cmp	r3, r2
20003d1c:	d01a      	beq.n	20003d54 <HAL_DMAEx_MultiBufferStart_IT+0x90c>
20003d1e:	68fb      	ldr	r3, [r7, #12]
20003d20:	681b      	ldr	r3, [r3, #0]
20003d22:	4a85      	ldr	r2, [pc, #532]	; (20003f38 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
20003d24:	4293      	cmp	r3, r2
20003d26:	d012      	beq.n	20003d4e <HAL_DMAEx_MultiBufferStart_IT+0x906>
20003d28:	68fb      	ldr	r3, [r7, #12]
20003d2a:	681b      	ldr	r3, [r3, #0]
20003d2c:	4a83      	ldr	r2, [pc, #524]	; (20003f3c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
20003d2e:	4293      	cmp	r3, r2
20003d30:	d00a      	beq.n	20003d48 <HAL_DMAEx_MultiBufferStart_IT+0x900>
20003d32:	68fb      	ldr	r3, [r7, #12]
20003d34:	681b      	ldr	r3, [r3, #0]
20003d36:	4a82      	ldr	r2, [pc, #520]	; (20003f40 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
20003d38:	4293      	cmp	r3, r2
20003d3a:	d102      	bne.n	20003d42 <HAL_DMAEx_MultiBufferStart_IT+0x8fa>
20003d3c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003d40:	e01e      	b.n	20003d80 <HAL_DMAEx_MultiBufferStart_IT+0x938>
20003d42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
20003d46:	e01b      	b.n	20003d80 <HAL_DMAEx_MultiBufferStart_IT+0x938>
20003d48:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003d4c:	e018      	b.n	20003d80 <HAL_DMAEx_MultiBufferStart_IT+0x938>
20003d4e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003d52:	e015      	b.n	20003d80 <HAL_DMAEx_MultiBufferStart_IT+0x938>
20003d54:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003d58:	e012      	b.n	20003d80 <HAL_DMAEx_MultiBufferStart_IT+0x938>
20003d5a:	f44f 7300 	mov.w	r3, #512	; 0x200
20003d5e:	e00f      	b.n	20003d80 <HAL_DMAEx_MultiBufferStart_IT+0x938>
20003d60:	f44f 7300 	mov.w	r3, #512	; 0x200
20003d64:	e00c      	b.n	20003d80 <HAL_DMAEx_MultiBufferStart_IT+0x938>
20003d66:	f44f 7300 	mov.w	r3, #512	; 0x200
20003d6a:	e009      	b.n	20003d80 <HAL_DMAEx_MultiBufferStart_IT+0x938>
20003d6c:	f44f 7300 	mov.w	r3, #512	; 0x200
20003d70:	e006      	b.n	20003d80 <HAL_DMAEx_MultiBufferStart_IT+0x938>
20003d72:	2308      	movs	r3, #8
20003d74:	e004      	b.n	20003d80 <HAL_DMAEx_MultiBufferStart_IT+0x938>
20003d76:	2308      	movs	r3, #8
20003d78:	e002      	b.n	20003d80 <HAL_DMAEx_MultiBufferStart_IT+0x938>
20003d7a:	2308      	movs	r3, #8
20003d7c:	e000      	b.n	20003d80 <HAL_DMAEx_MultiBufferStart_IT+0x938>
20003d7e:	2308      	movs	r3, #8
20003d80:	4a70      	ldr	r2, [pc, #448]	; (20003f44 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
20003d82:	6093      	str	r3, [r2, #8]
20003d84:	e0e7      	b.n	20003f56 <HAL_DMAEx_MultiBufferStart_IT+0xb0e>
20003d86:	68fb      	ldr	r3, [r7, #12]
20003d88:	681b      	ldr	r3, [r3, #0]
20003d8a:	461a      	mov	r2, r3
20003d8c:	4b6e      	ldr	r3, [pc, #440]	; (20003f48 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
20003d8e:	429a      	cmp	r2, r3
20003d90:	d960      	bls.n	20003e54 <HAL_DMAEx_MultiBufferStart_IT+0xa0c>
20003d92:	68fb      	ldr	r3, [r7, #12]
20003d94:	681b      	ldr	r3, [r3, #0]
20003d96:	4a5f      	ldr	r2, [pc, #380]	; (20003f14 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
20003d98:	4293      	cmp	r3, r2
20003d9a:	d057      	beq.n	20003e4c <HAL_DMAEx_MultiBufferStart_IT+0xa04>
20003d9c:	68fb      	ldr	r3, [r7, #12]
20003d9e:	681b      	ldr	r3, [r3, #0]
20003da0:	4a5d      	ldr	r2, [pc, #372]	; (20003f18 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
20003da2:	4293      	cmp	r3, r2
20003da4:	d050      	beq.n	20003e48 <HAL_DMAEx_MultiBufferStart_IT+0xa00>
20003da6:	68fb      	ldr	r3, [r7, #12]
20003da8:	681b      	ldr	r3, [r3, #0]
20003daa:	4a5c      	ldr	r2, [pc, #368]	; (20003f1c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
20003dac:	4293      	cmp	r3, r2
20003dae:	d049      	beq.n	20003e44 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
20003db0:	68fb      	ldr	r3, [r7, #12]
20003db2:	681b      	ldr	r3, [r3, #0]
20003db4:	4a5a      	ldr	r2, [pc, #360]	; (20003f20 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
20003db6:	4293      	cmp	r3, r2
20003db8:	d042      	beq.n	20003e40 <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
20003dba:	68fb      	ldr	r3, [r7, #12]
20003dbc:	681b      	ldr	r3, [r3, #0]
20003dbe:	4a59      	ldr	r2, [pc, #356]	; (20003f24 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
20003dc0:	4293      	cmp	r3, r2
20003dc2:	d03a      	beq.n	20003e3a <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
20003dc4:	68fb      	ldr	r3, [r7, #12]
20003dc6:	681b      	ldr	r3, [r3, #0]
20003dc8:	4a57      	ldr	r2, [pc, #348]	; (20003f28 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
20003dca:	4293      	cmp	r3, r2
20003dcc:	d032      	beq.n	20003e34 <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
20003dce:	68fb      	ldr	r3, [r7, #12]
20003dd0:	681b      	ldr	r3, [r3, #0]
20003dd2:	4a56      	ldr	r2, [pc, #344]	; (20003f2c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
20003dd4:	4293      	cmp	r3, r2
20003dd6:	d02a      	beq.n	20003e2e <HAL_DMAEx_MultiBufferStart_IT+0x9e6>
20003dd8:	68fb      	ldr	r3, [r7, #12]
20003dda:	681b      	ldr	r3, [r3, #0]
20003ddc:	4a54      	ldr	r2, [pc, #336]	; (20003f30 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
20003dde:	4293      	cmp	r3, r2
20003de0:	d022      	beq.n	20003e28 <HAL_DMAEx_MultiBufferStart_IT+0x9e0>
20003de2:	68fb      	ldr	r3, [r7, #12]
20003de4:	681b      	ldr	r3, [r3, #0]
20003de6:	4a53      	ldr	r2, [pc, #332]	; (20003f34 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
20003de8:	4293      	cmp	r3, r2
20003dea:	d01a      	beq.n	20003e22 <HAL_DMAEx_MultiBufferStart_IT+0x9da>
20003dec:	68fb      	ldr	r3, [r7, #12]
20003dee:	681b      	ldr	r3, [r3, #0]
20003df0:	4a51      	ldr	r2, [pc, #324]	; (20003f38 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
20003df2:	4293      	cmp	r3, r2
20003df4:	d012      	beq.n	20003e1c <HAL_DMAEx_MultiBufferStart_IT+0x9d4>
20003df6:	68fb      	ldr	r3, [r7, #12]
20003df8:	681b      	ldr	r3, [r3, #0]
20003dfa:	4a50      	ldr	r2, [pc, #320]	; (20003f3c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
20003dfc:	4293      	cmp	r3, r2
20003dfe:	d00a      	beq.n	20003e16 <HAL_DMAEx_MultiBufferStart_IT+0x9ce>
20003e00:	68fb      	ldr	r3, [r7, #12]
20003e02:	681b      	ldr	r3, [r3, #0]
20003e04:	4a4e      	ldr	r2, [pc, #312]	; (20003f40 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
20003e06:	4293      	cmp	r3, r2
20003e08:	d102      	bne.n	20003e10 <HAL_DMAEx_MultiBufferStart_IT+0x9c8>
20003e0a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003e0e:	e01e      	b.n	20003e4e <HAL_DMAEx_MultiBufferStart_IT+0xa06>
20003e10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
20003e14:	e01b      	b.n	20003e4e <HAL_DMAEx_MultiBufferStart_IT+0xa06>
20003e16:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003e1a:	e018      	b.n	20003e4e <HAL_DMAEx_MultiBufferStart_IT+0xa06>
20003e1c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003e20:	e015      	b.n	20003e4e <HAL_DMAEx_MultiBufferStart_IT+0xa06>
20003e22:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003e26:	e012      	b.n	20003e4e <HAL_DMAEx_MultiBufferStart_IT+0xa06>
20003e28:	f44f 7300 	mov.w	r3, #512	; 0x200
20003e2c:	e00f      	b.n	20003e4e <HAL_DMAEx_MultiBufferStart_IT+0xa06>
20003e2e:	f44f 7300 	mov.w	r3, #512	; 0x200
20003e32:	e00c      	b.n	20003e4e <HAL_DMAEx_MultiBufferStart_IT+0xa06>
20003e34:	f44f 7300 	mov.w	r3, #512	; 0x200
20003e38:	e009      	b.n	20003e4e <HAL_DMAEx_MultiBufferStart_IT+0xa06>
20003e3a:	f44f 7300 	mov.w	r3, #512	; 0x200
20003e3e:	e006      	b.n	20003e4e <HAL_DMAEx_MultiBufferStart_IT+0xa06>
20003e40:	2308      	movs	r3, #8
20003e42:	e004      	b.n	20003e4e <HAL_DMAEx_MultiBufferStart_IT+0xa06>
20003e44:	2308      	movs	r3, #8
20003e46:	e002      	b.n	20003e4e <HAL_DMAEx_MultiBufferStart_IT+0xa06>
20003e48:	2308      	movs	r3, #8
20003e4a:	e000      	b.n	20003e4e <HAL_DMAEx_MultiBufferStart_IT+0xa06>
20003e4c:	2308      	movs	r3, #8
20003e4e:	4a3f      	ldr	r2, [pc, #252]	; (20003f4c <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
20003e50:	60d3      	str	r3, [r2, #12]
20003e52:	e080      	b.n	20003f56 <HAL_DMAEx_MultiBufferStart_IT+0xb0e>
20003e54:	68fb      	ldr	r3, [r7, #12]
20003e56:	681b      	ldr	r3, [r3, #0]
20003e58:	4a2e      	ldr	r2, [pc, #184]	; (20003f14 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
20003e5a:	4293      	cmp	r3, r2
20003e5c:	d078      	beq.n	20003f50 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
20003e5e:	68fb      	ldr	r3, [r7, #12]
20003e60:	681b      	ldr	r3, [r3, #0]
20003e62:	4a2d      	ldr	r2, [pc, #180]	; (20003f18 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
20003e64:	4293      	cmp	r3, r2
20003e66:	d050      	beq.n	20003f0a <HAL_DMAEx_MultiBufferStart_IT+0xac2>
20003e68:	68fb      	ldr	r3, [r7, #12]
20003e6a:	681b      	ldr	r3, [r3, #0]
20003e6c:	4a2b      	ldr	r2, [pc, #172]	; (20003f1c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
20003e6e:	4293      	cmp	r3, r2
20003e70:	d049      	beq.n	20003f06 <HAL_DMAEx_MultiBufferStart_IT+0xabe>
20003e72:	68fb      	ldr	r3, [r7, #12]
20003e74:	681b      	ldr	r3, [r3, #0]
20003e76:	4a2a      	ldr	r2, [pc, #168]	; (20003f20 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
20003e78:	4293      	cmp	r3, r2
20003e7a:	d042      	beq.n	20003f02 <HAL_DMAEx_MultiBufferStart_IT+0xaba>
20003e7c:	68fb      	ldr	r3, [r7, #12]
20003e7e:	681b      	ldr	r3, [r3, #0]
20003e80:	4a28      	ldr	r2, [pc, #160]	; (20003f24 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
20003e82:	4293      	cmp	r3, r2
20003e84:	d03a      	beq.n	20003efc <HAL_DMAEx_MultiBufferStart_IT+0xab4>
20003e86:	68fb      	ldr	r3, [r7, #12]
20003e88:	681b      	ldr	r3, [r3, #0]
20003e8a:	4a27      	ldr	r2, [pc, #156]	; (20003f28 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
20003e8c:	4293      	cmp	r3, r2
20003e8e:	d032      	beq.n	20003ef6 <HAL_DMAEx_MultiBufferStart_IT+0xaae>
20003e90:	68fb      	ldr	r3, [r7, #12]
20003e92:	681b      	ldr	r3, [r3, #0]
20003e94:	4a25      	ldr	r2, [pc, #148]	; (20003f2c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
20003e96:	4293      	cmp	r3, r2
20003e98:	d02a      	beq.n	20003ef0 <HAL_DMAEx_MultiBufferStart_IT+0xaa8>
20003e9a:	68fb      	ldr	r3, [r7, #12]
20003e9c:	681b      	ldr	r3, [r3, #0]
20003e9e:	4a24      	ldr	r2, [pc, #144]	; (20003f30 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
20003ea0:	4293      	cmp	r3, r2
20003ea2:	d022      	beq.n	20003eea <HAL_DMAEx_MultiBufferStart_IT+0xaa2>
20003ea4:	68fb      	ldr	r3, [r7, #12]
20003ea6:	681b      	ldr	r3, [r3, #0]
20003ea8:	4a22      	ldr	r2, [pc, #136]	; (20003f34 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
20003eaa:	4293      	cmp	r3, r2
20003eac:	d01a      	beq.n	20003ee4 <HAL_DMAEx_MultiBufferStart_IT+0xa9c>
20003eae:	68fb      	ldr	r3, [r7, #12]
20003eb0:	681b      	ldr	r3, [r3, #0]
20003eb2:	4a21      	ldr	r2, [pc, #132]	; (20003f38 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
20003eb4:	4293      	cmp	r3, r2
20003eb6:	d012      	beq.n	20003ede <HAL_DMAEx_MultiBufferStart_IT+0xa96>
20003eb8:	68fb      	ldr	r3, [r7, #12]
20003eba:	681b      	ldr	r3, [r3, #0]
20003ebc:	4a1f      	ldr	r2, [pc, #124]	; (20003f3c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
20003ebe:	4293      	cmp	r3, r2
20003ec0:	d00a      	beq.n	20003ed8 <HAL_DMAEx_MultiBufferStart_IT+0xa90>
20003ec2:	68fb      	ldr	r3, [r7, #12]
20003ec4:	681b      	ldr	r3, [r3, #0]
20003ec6:	4a1e      	ldr	r2, [pc, #120]	; (20003f40 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
20003ec8:	4293      	cmp	r3, r2
20003eca:	d102      	bne.n	20003ed2 <HAL_DMAEx_MultiBufferStart_IT+0xa8a>
20003ecc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003ed0:	e03f      	b.n	20003f52 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
20003ed2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
20003ed6:	e03c      	b.n	20003f52 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
20003ed8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003edc:	e039      	b.n	20003f52 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
20003ede:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003ee2:	e036      	b.n	20003f52 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
20003ee4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003ee8:	e033      	b.n	20003f52 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
20003eea:	f44f 7300 	mov.w	r3, #512	; 0x200
20003eee:	e030      	b.n	20003f52 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
20003ef0:	f44f 7300 	mov.w	r3, #512	; 0x200
20003ef4:	e02d      	b.n	20003f52 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
20003ef6:	f44f 7300 	mov.w	r3, #512	; 0x200
20003efa:	e02a      	b.n	20003f52 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
20003efc:	f44f 7300 	mov.w	r3, #512	; 0x200
20003f00:	e027      	b.n	20003f52 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
20003f02:	2308      	movs	r3, #8
20003f04:	e025      	b.n	20003f52 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
20003f06:	2308      	movs	r3, #8
20003f08:	e023      	b.n	20003f52 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
20003f0a:	2308      	movs	r3, #8
20003f0c:	e021      	b.n	20003f52 <HAL_DMAEx_MultiBufferStart_IT+0xb0a>
20003f0e:	bf00      	nop
20003f10:	400260b8 	.word	0x400260b8
20003f14:	40026010 	.word	0x40026010
20003f18:	40026410 	.word	0x40026410
20003f1c:	40026070 	.word	0x40026070
20003f20:	40026470 	.word	0x40026470
20003f24:	40026028 	.word	0x40026028
20003f28:	40026428 	.word	0x40026428
20003f2c:	40026088 	.word	0x40026088
20003f30:	40026488 	.word	0x40026488
20003f34:	40026040 	.word	0x40026040
20003f38:	40026440 	.word	0x40026440
20003f3c:	400260a0 	.word	0x400260a0
20003f40:	400264a0 	.word	0x400264a0
20003f44:	40026400 	.word	0x40026400
20003f48:	40026058 	.word	0x40026058
20003f4c:	40026000 	.word	0x40026000
20003f50:	2308      	movs	r3, #8
20003f52:	4a9a      	ldr	r2, [pc, #616]	; (200041bc <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
20003f54:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
20003f56:	68fb      	ldr	r3, [r7, #12]
20003f58:	681b      	ldr	r3, [r3, #0]
20003f5a:	461a      	mov	r2, r3
20003f5c:	4b98      	ldr	r3, [pc, #608]	; (200041c0 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
20003f5e:	429a      	cmp	r2, r3
20003f60:	d960      	bls.n	20004024 <HAL_DMAEx_MultiBufferStart_IT+0xbdc>
20003f62:	68fb      	ldr	r3, [r7, #12]
20003f64:	681b      	ldr	r3, [r3, #0]
20003f66:	4a97      	ldr	r2, [pc, #604]	; (200041c4 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
20003f68:	4293      	cmp	r3, r2
20003f6a:	d057      	beq.n	2000401c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
20003f6c:	68fb      	ldr	r3, [r7, #12]
20003f6e:	681b      	ldr	r3, [r3, #0]
20003f70:	4a95      	ldr	r2, [pc, #596]	; (200041c8 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
20003f72:	4293      	cmp	r3, r2
20003f74:	d050      	beq.n	20004018 <HAL_DMAEx_MultiBufferStart_IT+0xbd0>
20003f76:	68fb      	ldr	r3, [r7, #12]
20003f78:	681b      	ldr	r3, [r3, #0]
20003f7a:	4a94      	ldr	r2, [pc, #592]	; (200041cc <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
20003f7c:	4293      	cmp	r3, r2
20003f7e:	d049      	beq.n	20004014 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
20003f80:	68fb      	ldr	r3, [r7, #12]
20003f82:	681b      	ldr	r3, [r3, #0]
20003f84:	4a92      	ldr	r2, [pc, #584]	; (200041d0 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
20003f86:	4293      	cmp	r3, r2
20003f88:	d042      	beq.n	20004010 <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
20003f8a:	68fb      	ldr	r3, [r7, #12]
20003f8c:	681b      	ldr	r3, [r3, #0]
20003f8e:	4a91      	ldr	r2, [pc, #580]	; (200041d4 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
20003f90:	4293      	cmp	r3, r2
20003f92:	d03a      	beq.n	2000400a <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
20003f94:	68fb      	ldr	r3, [r7, #12]
20003f96:	681b      	ldr	r3, [r3, #0]
20003f98:	4a8f      	ldr	r2, [pc, #572]	; (200041d8 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
20003f9a:	4293      	cmp	r3, r2
20003f9c:	d032      	beq.n	20004004 <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
20003f9e:	68fb      	ldr	r3, [r7, #12]
20003fa0:	681b      	ldr	r3, [r3, #0]
20003fa2:	4a8e      	ldr	r2, [pc, #568]	; (200041dc <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
20003fa4:	4293      	cmp	r3, r2
20003fa6:	d02a      	beq.n	20003ffe <HAL_DMAEx_MultiBufferStart_IT+0xbb6>
20003fa8:	68fb      	ldr	r3, [r7, #12]
20003faa:	681b      	ldr	r3, [r3, #0]
20003fac:	4a8c      	ldr	r2, [pc, #560]	; (200041e0 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
20003fae:	4293      	cmp	r3, r2
20003fb0:	d022      	beq.n	20003ff8 <HAL_DMAEx_MultiBufferStart_IT+0xbb0>
20003fb2:	68fb      	ldr	r3, [r7, #12]
20003fb4:	681b      	ldr	r3, [r3, #0]
20003fb6:	4a8b      	ldr	r2, [pc, #556]	; (200041e4 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
20003fb8:	4293      	cmp	r3, r2
20003fba:	d01a      	beq.n	20003ff2 <HAL_DMAEx_MultiBufferStart_IT+0xbaa>
20003fbc:	68fb      	ldr	r3, [r7, #12]
20003fbe:	681b      	ldr	r3, [r3, #0]
20003fc0:	4a89      	ldr	r2, [pc, #548]	; (200041e8 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
20003fc2:	4293      	cmp	r3, r2
20003fc4:	d012      	beq.n	20003fec <HAL_DMAEx_MultiBufferStart_IT+0xba4>
20003fc6:	68fb      	ldr	r3, [r7, #12]
20003fc8:	681b      	ldr	r3, [r3, #0]
20003fca:	4a88      	ldr	r2, [pc, #544]	; (200041ec <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
20003fcc:	4293      	cmp	r3, r2
20003fce:	d00a      	beq.n	20003fe6 <HAL_DMAEx_MultiBufferStart_IT+0xb9e>
20003fd0:	68fb      	ldr	r3, [r7, #12]
20003fd2:	681b      	ldr	r3, [r3, #0]
20003fd4:	4a86      	ldr	r2, [pc, #536]	; (200041f0 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
20003fd6:	4293      	cmp	r3, r2
20003fd8:	d102      	bne.n	20003fe0 <HAL_DMAEx_MultiBufferStart_IT+0xb98>
20003fda:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20003fde:	e01e      	b.n	2000401e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
20003fe0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
20003fe4:	e01b      	b.n	2000401e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
20003fe6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20003fea:	e018      	b.n	2000401e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
20003fec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20003ff0:	e015      	b.n	2000401e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
20003ff2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20003ff6:	e012      	b.n	2000401e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
20003ff8:	f44f 7380 	mov.w	r3, #256	; 0x100
20003ffc:	e00f      	b.n	2000401e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
20003ffe:	f44f 7380 	mov.w	r3, #256	; 0x100
20004002:	e00c      	b.n	2000401e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
20004004:	f44f 7380 	mov.w	r3, #256	; 0x100
20004008:	e009      	b.n	2000401e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
2000400a:	f44f 7380 	mov.w	r3, #256	; 0x100
2000400e:	e006      	b.n	2000401e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
20004010:	2304      	movs	r3, #4
20004012:	e004      	b.n	2000401e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
20004014:	2304      	movs	r3, #4
20004016:	e002      	b.n	2000401e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
20004018:	2304      	movs	r3, #4
2000401a:	e000      	b.n	2000401e <HAL_DMAEx_MultiBufferStart_IT+0xbd6>
2000401c:	2304      	movs	r3, #4
2000401e:	4a75      	ldr	r2, [pc, #468]	; (200041f4 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
20004020:	60d3      	str	r3, [r2, #12]
20004022:	e151      	b.n	200042c8 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
20004024:	68fb      	ldr	r3, [r7, #12]
20004026:	681b      	ldr	r3, [r3, #0]
20004028:	461a      	mov	r2, r3
2000402a:	4b73      	ldr	r3, [pc, #460]	; (200041f8 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
2000402c:	429a      	cmp	r2, r3
2000402e:	d960      	bls.n	200040f2 <HAL_DMAEx_MultiBufferStart_IT+0xcaa>
20004030:	68fb      	ldr	r3, [r7, #12]
20004032:	681b      	ldr	r3, [r3, #0]
20004034:	4a63      	ldr	r2, [pc, #396]	; (200041c4 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
20004036:	4293      	cmp	r3, r2
20004038:	d057      	beq.n	200040ea <HAL_DMAEx_MultiBufferStart_IT+0xca2>
2000403a:	68fb      	ldr	r3, [r7, #12]
2000403c:	681b      	ldr	r3, [r3, #0]
2000403e:	4a62      	ldr	r2, [pc, #392]	; (200041c8 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
20004040:	4293      	cmp	r3, r2
20004042:	d050      	beq.n	200040e6 <HAL_DMAEx_MultiBufferStart_IT+0xc9e>
20004044:	68fb      	ldr	r3, [r7, #12]
20004046:	681b      	ldr	r3, [r3, #0]
20004048:	4a60      	ldr	r2, [pc, #384]	; (200041cc <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
2000404a:	4293      	cmp	r3, r2
2000404c:	d049      	beq.n	200040e2 <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
2000404e:	68fb      	ldr	r3, [r7, #12]
20004050:	681b      	ldr	r3, [r3, #0]
20004052:	4a5f      	ldr	r2, [pc, #380]	; (200041d0 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
20004054:	4293      	cmp	r3, r2
20004056:	d042      	beq.n	200040de <HAL_DMAEx_MultiBufferStart_IT+0xc96>
20004058:	68fb      	ldr	r3, [r7, #12]
2000405a:	681b      	ldr	r3, [r3, #0]
2000405c:	4a5d      	ldr	r2, [pc, #372]	; (200041d4 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
2000405e:	4293      	cmp	r3, r2
20004060:	d03a      	beq.n	200040d8 <HAL_DMAEx_MultiBufferStart_IT+0xc90>
20004062:	68fb      	ldr	r3, [r7, #12]
20004064:	681b      	ldr	r3, [r3, #0]
20004066:	4a5c      	ldr	r2, [pc, #368]	; (200041d8 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
20004068:	4293      	cmp	r3, r2
2000406a:	d032      	beq.n	200040d2 <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
2000406c:	68fb      	ldr	r3, [r7, #12]
2000406e:	681b      	ldr	r3, [r3, #0]
20004070:	4a5a      	ldr	r2, [pc, #360]	; (200041dc <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
20004072:	4293      	cmp	r3, r2
20004074:	d02a      	beq.n	200040cc <HAL_DMAEx_MultiBufferStart_IT+0xc84>
20004076:	68fb      	ldr	r3, [r7, #12]
20004078:	681b      	ldr	r3, [r3, #0]
2000407a:	4a59      	ldr	r2, [pc, #356]	; (200041e0 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
2000407c:	4293      	cmp	r3, r2
2000407e:	d022      	beq.n	200040c6 <HAL_DMAEx_MultiBufferStart_IT+0xc7e>
20004080:	68fb      	ldr	r3, [r7, #12]
20004082:	681b      	ldr	r3, [r3, #0]
20004084:	4a57      	ldr	r2, [pc, #348]	; (200041e4 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
20004086:	4293      	cmp	r3, r2
20004088:	d01a      	beq.n	200040c0 <HAL_DMAEx_MultiBufferStart_IT+0xc78>
2000408a:	68fb      	ldr	r3, [r7, #12]
2000408c:	681b      	ldr	r3, [r3, #0]
2000408e:	4a56      	ldr	r2, [pc, #344]	; (200041e8 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
20004090:	4293      	cmp	r3, r2
20004092:	d012      	beq.n	200040ba <HAL_DMAEx_MultiBufferStart_IT+0xc72>
20004094:	68fb      	ldr	r3, [r7, #12]
20004096:	681b      	ldr	r3, [r3, #0]
20004098:	4a54      	ldr	r2, [pc, #336]	; (200041ec <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
2000409a:	4293      	cmp	r3, r2
2000409c:	d00a      	beq.n	200040b4 <HAL_DMAEx_MultiBufferStart_IT+0xc6c>
2000409e:	68fb      	ldr	r3, [r7, #12]
200040a0:	681b      	ldr	r3, [r3, #0]
200040a2:	4a53      	ldr	r2, [pc, #332]	; (200041f0 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
200040a4:	4293      	cmp	r3, r2
200040a6:	d102      	bne.n	200040ae <HAL_DMAEx_MultiBufferStart_IT+0xc66>
200040a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
200040ac:	e01e      	b.n	200040ec <HAL_DMAEx_MultiBufferStart_IT+0xca4>
200040ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
200040b2:	e01b      	b.n	200040ec <HAL_DMAEx_MultiBufferStart_IT+0xca4>
200040b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
200040b8:	e018      	b.n	200040ec <HAL_DMAEx_MultiBufferStart_IT+0xca4>
200040ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
200040be:	e015      	b.n	200040ec <HAL_DMAEx_MultiBufferStart_IT+0xca4>
200040c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
200040c4:	e012      	b.n	200040ec <HAL_DMAEx_MultiBufferStart_IT+0xca4>
200040c6:	f44f 7380 	mov.w	r3, #256	; 0x100
200040ca:	e00f      	b.n	200040ec <HAL_DMAEx_MultiBufferStart_IT+0xca4>
200040cc:	f44f 7380 	mov.w	r3, #256	; 0x100
200040d0:	e00c      	b.n	200040ec <HAL_DMAEx_MultiBufferStart_IT+0xca4>
200040d2:	f44f 7380 	mov.w	r3, #256	; 0x100
200040d6:	e009      	b.n	200040ec <HAL_DMAEx_MultiBufferStart_IT+0xca4>
200040d8:	f44f 7380 	mov.w	r3, #256	; 0x100
200040dc:	e006      	b.n	200040ec <HAL_DMAEx_MultiBufferStart_IT+0xca4>
200040de:	2304      	movs	r3, #4
200040e0:	e004      	b.n	200040ec <HAL_DMAEx_MultiBufferStart_IT+0xca4>
200040e2:	2304      	movs	r3, #4
200040e4:	e002      	b.n	200040ec <HAL_DMAEx_MultiBufferStart_IT+0xca4>
200040e6:	2304      	movs	r3, #4
200040e8:	e000      	b.n	200040ec <HAL_DMAEx_MultiBufferStart_IT+0xca4>
200040ea:	2304      	movs	r3, #4
200040ec:	4a41      	ldr	r2, [pc, #260]	; (200041f4 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
200040ee:	6093      	str	r3, [r2, #8]
200040f0:	e0ea      	b.n	200042c8 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
200040f2:	68fb      	ldr	r3, [r7, #12]
200040f4:	681b      	ldr	r3, [r3, #0]
200040f6:	461a      	mov	r2, r3
200040f8:	4b40      	ldr	r3, [pc, #256]	; (200041fc <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
200040fa:	429a      	cmp	r2, r3
200040fc:	f240 8084 	bls.w	20004208 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
20004100:	68fb      	ldr	r3, [r7, #12]
20004102:	681b      	ldr	r3, [r3, #0]
20004104:	4a2f      	ldr	r2, [pc, #188]	; (200041c4 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
20004106:	4293      	cmp	r3, r2
20004108:	d07a      	beq.n	20004200 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>
2000410a:	68fb      	ldr	r3, [r7, #12]
2000410c:	681b      	ldr	r3, [r3, #0]
2000410e:	4a2e      	ldr	r2, [pc, #184]	; (200041c8 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
20004110:	4293      	cmp	r3, r2
20004112:	d050      	beq.n	200041b6 <HAL_DMAEx_MultiBufferStart_IT+0xd6e>
20004114:	68fb      	ldr	r3, [r7, #12]
20004116:	681b      	ldr	r3, [r3, #0]
20004118:	4a2c      	ldr	r2, [pc, #176]	; (200041cc <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
2000411a:	4293      	cmp	r3, r2
2000411c:	d049      	beq.n	200041b2 <HAL_DMAEx_MultiBufferStart_IT+0xd6a>
2000411e:	68fb      	ldr	r3, [r7, #12]
20004120:	681b      	ldr	r3, [r3, #0]
20004122:	4a2b      	ldr	r2, [pc, #172]	; (200041d0 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
20004124:	4293      	cmp	r3, r2
20004126:	d042      	beq.n	200041ae <HAL_DMAEx_MultiBufferStart_IT+0xd66>
20004128:	68fb      	ldr	r3, [r7, #12]
2000412a:	681b      	ldr	r3, [r3, #0]
2000412c:	4a29      	ldr	r2, [pc, #164]	; (200041d4 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
2000412e:	4293      	cmp	r3, r2
20004130:	d03a      	beq.n	200041a8 <HAL_DMAEx_MultiBufferStart_IT+0xd60>
20004132:	68fb      	ldr	r3, [r7, #12]
20004134:	681b      	ldr	r3, [r3, #0]
20004136:	4a28      	ldr	r2, [pc, #160]	; (200041d8 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
20004138:	4293      	cmp	r3, r2
2000413a:	d032      	beq.n	200041a2 <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
2000413c:	68fb      	ldr	r3, [r7, #12]
2000413e:	681b      	ldr	r3, [r3, #0]
20004140:	4a26      	ldr	r2, [pc, #152]	; (200041dc <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
20004142:	4293      	cmp	r3, r2
20004144:	d02a      	beq.n	2000419c <HAL_DMAEx_MultiBufferStart_IT+0xd54>
20004146:	68fb      	ldr	r3, [r7, #12]
20004148:	681b      	ldr	r3, [r3, #0]
2000414a:	4a25      	ldr	r2, [pc, #148]	; (200041e0 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
2000414c:	4293      	cmp	r3, r2
2000414e:	d022      	beq.n	20004196 <HAL_DMAEx_MultiBufferStart_IT+0xd4e>
20004150:	68fb      	ldr	r3, [r7, #12]
20004152:	681b      	ldr	r3, [r3, #0]
20004154:	4a23      	ldr	r2, [pc, #140]	; (200041e4 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
20004156:	4293      	cmp	r3, r2
20004158:	d01a      	beq.n	20004190 <HAL_DMAEx_MultiBufferStart_IT+0xd48>
2000415a:	68fb      	ldr	r3, [r7, #12]
2000415c:	681b      	ldr	r3, [r3, #0]
2000415e:	4a22      	ldr	r2, [pc, #136]	; (200041e8 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
20004160:	4293      	cmp	r3, r2
20004162:	d012      	beq.n	2000418a <HAL_DMAEx_MultiBufferStart_IT+0xd42>
20004164:	68fb      	ldr	r3, [r7, #12]
20004166:	681b      	ldr	r3, [r3, #0]
20004168:	4a20      	ldr	r2, [pc, #128]	; (200041ec <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
2000416a:	4293      	cmp	r3, r2
2000416c:	d00a      	beq.n	20004184 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>
2000416e:	68fb      	ldr	r3, [r7, #12]
20004170:	681b      	ldr	r3, [r3, #0]
20004172:	4a1f      	ldr	r2, [pc, #124]	; (200041f0 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
20004174:	4293      	cmp	r3, r2
20004176:	d102      	bne.n	2000417e <HAL_DMAEx_MultiBufferStart_IT+0xd36>
20004178:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2000417c:	e041      	b.n	20004202 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
2000417e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
20004182:	e03e      	b.n	20004202 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
20004184:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20004188:	e03b      	b.n	20004202 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
2000418a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2000418e:	e038      	b.n	20004202 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
20004190:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20004194:	e035      	b.n	20004202 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
20004196:	f44f 7380 	mov.w	r3, #256	; 0x100
2000419a:	e032      	b.n	20004202 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
2000419c:	f44f 7380 	mov.w	r3, #256	; 0x100
200041a0:	e02f      	b.n	20004202 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
200041a2:	f44f 7380 	mov.w	r3, #256	; 0x100
200041a6:	e02c      	b.n	20004202 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
200041a8:	f44f 7380 	mov.w	r3, #256	; 0x100
200041ac:	e029      	b.n	20004202 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
200041ae:	2304      	movs	r3, #4
200041b0:	e027      	b.n	20004202 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
200041b2:	2304      	movs	r3, #4
200041b4:	e025      	b.n	20004202 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
200041b6:	2304      	movs	r3, #4
200041b8:	e023      	b.n	20004202 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
200041ba:	bf00      	nop
200041bc:	40026000 	.word	0x40026000
200041c0:	40026458 	.word	0x40026458
200041c4:	40026010 	.word	0x40026010
200041c8:	40026410 	.word	0x40026410
200041cc:	40026070 	.word	0x40026070
200041d0:	40026470 	.word	0x40026470
200041d4:	40026028 	.word	0x40026028
200041d8:	40026428 	.word	0x40026428
200041dc:	40026088 	.word	0x40026088
200041e0:	40026488 	.word	0x40026488
200041e4:	40026040 	.word	0x40026040
200041e8:	40026440 	.word	0x40026440
200041ec:	400260a0 	.word	0x400260a0
200041f0:	400264a0 	.word	0x400264a0
200041f4:	40026400 	.word	0x40026400
200041f8:	400260b8 	.word	0x400260b8
200041fc:	40026058 	.word	0x40026058
20004200:	2304      	movs	r3, #4
20004202:	4a94      	ldr	r2, [pc, #592]	; (20004454 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
20004204:	60d3      	str	r3, [r2, #12]
20004206:	e05f      	b.n	200042c8 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
20004208:	68fb      	ldr	r3, [r7, #12]
2000420a:	681b      	ldr	r3, [r3, #0]
2000420c:	4a92      	ldr	r2, [pc, #584]	; (20004458 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
2000420e:	4293      	cmp	r3, r2
20004210:	d057      	beq.n	200042c2 <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
20004212:	68fb      	ldr	r3, [r7, #12]
20004214:	681b      	ldr	r3, [r3, #0]
20004216:	4a91      	ldr	r2, [pc, #580]	; (2000445c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
20004218:	4293      	cmp	r3, r2
2000421a:	d050      	beq.n	200042be <HAL_DMAEx_MultiBufferStart_IT+0xe76>
2000421c:	68fb      	ldr	r3, [r7, #12]
2000421e:	681b      	ldr	r3, [r3, #0]
20004220:	4a8f      	ldr	r2, [pc, #572]	; (20004460 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
20004222:	4293      	cmp	r3, r2
20004224:	d049      	beq.n	200042ba <HAL_DMAEx_MultiBufferStart_IT+0xe72>
20004226:	68fb      	ldr	r3, [r7, #12]
20004228:	681b      	ldr	r3, [r3, #0]
2000422a:	4a8e      	ldr	r2, [pc, #568]	; (20004464 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
2000422c:	4293      	cmp	r3, r2
2000422e:	d042      	beq.n	200042b6 <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
20004230:	68fb      	ldr	r3, [r7, #12]
20004232:	681b      	ldr	r3, [r3, #0]
20004234:	4a8c      	ldr	r2, [pc, #560]	; (20004468 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
20004236:	4293      	cmp	r3, r2
20004238:	d03a      	beq.n	200042b0 <HAL_DMAEx_MultiBufferStart_IT+0xe68>
2000423a:	68fb      	ldr	r3, [r7, #12]
2000423c:	681b      	ldr	r3, [r3, #0]
2000423e:	4a8b      	ldr	r2, [pc, #556]	; (2000446c <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
20004240:	4293      	cmp	r3, r2
20004242:	d032      	beq.n	200042aa <HAL_DMAEx_MultiBufferStart_IT+0xe62>
20004244:	68fb      	ldr	r3, [r7, #12]
20004246:	681b      	ldr	r3, [r3, #0]
20004248:	4a89      	ldr	r2, [pc, #548]	; (20004470 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
2000424a:	4293      	cmp	r3, r2
2000424c:	d02a      	beq.n	200042a4 <HAL_DMAEx_MultiBufferStart_IT+0xe5c>
2000424e:	68fb      	ldr	r3, [r7, #12]
20004250:	681b      	ldr	r3, [r3, #0]
20004252:	4a88      	ldr	r2, [pc, #544]	; (20004474 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
20004254:	4293      	cmp	r3, r2
20004256:	d022      	beq.n	2000429e <HAL_DMAEx_MultiBufferStart_IT+0xe56>
20004258:	68fb      	ldr	r3, [r7, #12]
2000425a:	681b      	ldr	r3, [r3, #0]
2000425c:	4a86      	ldr	r2, [pc, #536]	; (20004478 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
2000425e:	4293      	cmp	r3, r2
20004260:	d01a      	beq.n	20004298 <HAL_DMAEx_MultiBufferStart_IT+0xe50>
20004262:	68fb      	ldr	r3, [r7, #12]
20004264:	681b      	ldr	r3, [r3, #0]
20004266:	4a85      	ldr	r2, [pc, #532]	; (2000447c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
20004268:	4293      	cmp	r3, r2
2000426a:	d012      	beq.n	20004292 <HAL_DMAEx_MultiBufferStart_IT+0xe4a>
2000426c:	68fb      	ldr	r3, [r7, #12]
2000426e:	681b      	ldr	r3, [r3, #0]
20004270:	4a83      	ldr	r2, [pc, #524]	; (20004480 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
20004272:	4293      	cmp	r3, r2
20004274:	d00a      	beq.n	2000428c <HAL_DMAEx_MultiBufferStart_IT+0xe44>
20004276:	68fb      	ldr	r3, [r7, #12]
20004278:	681b      	ldr	r3, [r3, #0]
2000427a:	4a82      	ldr	r2, [pc, #520]	; (20004484 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
2000427c:	4293      	cmp	r3, r2
2000427e:	d102      	bne.n	20004286 <HAL_DMAEx_MultiBufferStart_IT+0xe3e>
20004280:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20004284:	e01e      	b.n	200042c4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
20004286:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2000428a:	e01b      	b.n	200042c4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
2000428c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20004290:	e018      	b.n	200042c4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
20004292:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20004296:	e015      	b.n	200042c4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
20004298:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2000429c:	e012      	b.n	200042c4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
2000429e:	f44f 7380 	mov.w	r3, #256	; 0x100
200042a2:	e00f      	b.n	200042c4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
200042a4:	f44f 7380 	mov.w	r3, #256	; 0x100
200042a8:	e00c      	b.n	200042c4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
200042aa:	f44f 7380 	mov.w	r3, #256	; 0x100
200042ae:	e009      	b.n	200042c4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
200042b0:	f44f 7380 	mov.w	r3, #256	; 0x100
200042b4:	e006      	b.n	200042c4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
200042b6:	2304      	movs	r3, #4
200042b8:	e004      	b.n	200042c4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
200042ba:	2304      	movs	r3, #4
200042bc:	e002      	b.n	200042c4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
200042be:	2304      	movs	r3, #4
200042c0:	e000      	b.n	200042c4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
200042c2:	2304      	movs	r3, #4
200042c4:	4a63      	ldr	r2, [pc, #396]	; (20004454 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
200042c6:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
200042c8:	68fb      	ldr	r3, [r7, #12]
200042ca:	681b      	ldr	r3, [r3, #0]
200042cc:	461a      	mov	r2, r3
200042ce:	4b6e      	ldr	r3, [pc, #440]	; (20004488 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
200042d0:	429a      	cmp	r2, r3
200042d2:	d95c      	bls.n	2000438e <HAL_DMAEx_MultiBufferStart_IT+0xf46>
200042d4:	68fb      	ldr	r3, [r7, #12]
200042d6:	681b      	ldr	r3, [r3, #0]
200042d8:	4a5f      	ldr	r2, [pc, #380]	; (20004458 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
200042da:	4293      	cmp	r3, r2
200042dc:	d053      	beq.n	20004386 <HAL_DMAEx_MultiBufferStart_IT+0xf3e>
200042de:	68fb      	ldr	r3, [r7, #12]
200042e0:	681b      	ldr	r3, [r3, #0]
200042e2:	4a5e      	ldr	r2, [pc, #376]	; (2000445c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
200042e4:	4293      	cmp	r3, r2
200042e6:	d04c      	beq.n	20004382 <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
200042e8:	68fb      	ldr	r3, [r7, #12]
200042ea:	681b      	ldr	r3, [r3, #0]
200042ec:	4a5c      	ldr	r2, [pc, #368]	; (20004460 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
200042ee:	4293      	cmp	r3, r2
200042f0:	d045      	beq.n	2000437e <HAL_DMAEx_MultiBufferStart_IT+0xf36>
200042f2:	68fb      	ldr	r3, [r7, #12]
200042f4:	681b      	ldr	r3, [r3, #0]
200042f6:	4a5b      	ldr	r2, [pc, #364]	; (20004464 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
200042f8:	4293      	cmp	r3, r2
200042fa:	d03e      	beq.n	2000437a <HAL_DMAEx_MultiBufferStart_IT+0xf32>
200042fc:	68fb      	ldr	r3, [r7, #12]
200042fe:	681b      	ldr	r3, [r3, #0]
20004300:	4a59      	ldr	r2, [pc, #356]	; (20004468 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
20004302:	4293      	cmp	r3, r2
20004304:	d037      	beq.n	20004376 <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
20004306:	68fb      	ldr	r3, [r7, #12]
20004308:	681b      	ldr	r3, [r3, #0]
2000430a:	4a58      	ldr	r2, [pc, #352]	; (2000446c <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
2000430c:	4293      	cmp	r3, r2
2000430e:	d030      	beq.n	20004372 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
20004310:	68fb      	ldr	r3, [r7, #12]
20004312:	681b      	ldr	r3, [r3, #0]
20004314:	4a56      	ldr	r2, [pc, #344]	; (20004470 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
20004316:	4293      	cmp	r3, r2
20004318:	d029      	beq.n	2000436e <HAL_DMAEx_MultiBufferStart_IT+0xf26>
2000431a:	68fb      	ldr	r3, [r7, #12]
2000431c:	681b      	ldr	r3, [r3, #0]
2000431e:	4a55      	ldr	r2, [pc, #340]	; (20004474 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
20004320:	4293      	cmp	r3, r2
20004322:	d022      	beq.n	2000436a <HAL_DMAEx_MultiBufferStart_IT+0xf22>
20004324:	68fb      	ldr	r3, [r7, #12]
20004326:	681b      	ldr	r3, [r3, #0]
20004328:	4a53      	ldr	r2, [pc, #332]	; (20004478 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
2000432a:	4293      	cmp	r3, r2
2000432c:	d01a      	beq.n	20004364 <HAL_DMAEx_MultiBufferStart_IT+0xf1c>
2000432e:	68fb      	ldr	r3, [r7, #12]
20004330:	681b      	ldr	r3, [r3, #0]
20004332:	4a52      	ldr	r2, [pc, #328]	; (2000447c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
20004334:	4293      	cmp	r3, r2
20004336:	d012      	beq.n	2000435e <HAL_DMAEx_MultiBufferStart_IT+0xf16>
20004338:	68fb      	ldr	r3, [r7, #12]
2000433a:	681b      	ldr	r3, [r3, #0]
2000433c:	4a50      	ldr	r2, [pc, #320]	; (20004480 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
2000433e:	4293      	cmp	r3, r2
20004340:	d00a      	beq.n	20004358 <HAL_DMAEx_MultiBufferStart_IT+0xf10>
20004342:	68fb      	ldr	r3, [r7, #12]
20004344:	681b      	ldr	r3, [r3, #0]
20004346:	4a4f      	ldr	r2, [pc, #316]	; (20004484 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
20004348:	4293      	cmp	r3, r2
2000434a:	d102      	bne.n	20004352 <HAL_DMAEx_MultiBufferStart_IT+0xf0a>
2000434c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20004350:	e01a      	b.n	20004388 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
20004352:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
20004356:	e017      	b.n	20004388 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
20004358:	f44f 3380 	mov.w	r3, #65536	; 0x10000
2000435c:	e014      	b.n	20004388 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
2000435e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20004362:	e011      	b.n	20004388 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
20004364:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20004368:	e00e      	b.n	20004388 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
2000436a:	2340      	movs	r3, #64	; 0x40
2000436c:	e00c      	b.n	20004388 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
2000436e:	2340      	movs	r3, #64	; 0x40
20004370:	e00a      	b.n	20004388 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
20004372:	2340      	movs	r3, #64	; 0x40
20004374:	e008      	b.n	20004388 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
20004376:	2340      	movs	r3, #64	; 0x40
20004378:	e006      	b.n	20004388 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
2000437a:	2301      	movs	r3, #1
2000437c:	e004      	b.n	20004388 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
2000437e:	2301      	movs	r3, #1
20004380:	e002      	b.n	20004388 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
20004382:	2301      	movs	r3, #1
20004384:	e000      	b.n	20004388 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
20004386:	2301      	movs	r3, #1
20004388:	4a40      	ldr	r2, [pc, #256]	; (2000448c <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
2000438a:	60d3      	str	r3, [r2, #12]
2000438c:	e141      	b.n	20004612 <HAL_DMAEx_MultiBufferStart_IT+0x11ca>
2000438e:	68fb      	ldr	r3, [r7, #12]
20004390:	681b      	ldr	r3, [r3, #0]
20004392:	461a      	mov	r2, r3
20004394:	4b3e      	ldr	r3, [pc, #248]	; (20004490 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
20004396:	429a      	cmp	r2, r3
20004398:	d97c      	bls.n	20004494 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
2000439a:	68fb      	ldr	r3, [r7, #12]
2000439c:	681b      	ldr	r3, [r3, #0]
2000439e:	4a2e      	ldr	r2, [pc, #184]	; (20004458 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
200043a0:	4293      	cmp	r3, r2
200043a2:	d053      	beq.n	2000444c <HAL_DMAEx_MultiBufferStart_IT+0x1004>
200043a4:	68fb      	ldr	r3, [r7, #12]
200043a6:	681b      	ldr	r3, [r3, #0]
200043a8:	4a2c      	ldr	r2, [pc, #176]	; (2000445c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
200043aa:	4293      	cmp	r3, r2
200043ac:	d04c      	beq.n	20004448 <HAL_DMAEx_MultiBufferStart_IT+0x1000>
200043ae:	68fb      	ldr	r3, [r7, #12]
200043b0:	681b      	ldr	r3, [r3, #0]
200043b2:	4a2b      	ldr	r2, [pc, #172]	; (20004460 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
200043b4:	4293      	cmp	r3, r2
200043b6:	d045      	beq.n	20004444 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
200043b8:	68fb      	ldr	r3, [r7, #12]
200043ba:	681b      	ldr	r3, [r3, #0]
200043bc:	4a29      	ldr	r2, [pc, #164]	; (20004464 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
200043be:	4293      	cmp	r3, r2
200043c0:	d03e      	beq.n	20004440 <HAL_DMAEx_MultiBufferStart_IT+0xff8>
200043c2:	68fb      	ldr	r3, [r7, #12]
200043c4:	681b      	ldr	r3, [r3, #0]
200043c6:	4a28      	ldr	r2, [pc, #160]	; (20004468 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
200043c8:	4293      	cmp	r3, r2
200043ca:	d037      	beq.n	2000443c <HAL_DMAEx_MultiBufferStart_IT+0xff4>
200043cc:	68fb      	ldr	r3, [r7, #12]
200043ce:	681b      	ldr	r3, [r3, #0]
200043d0:	4a26      	ldr	r2, [pc, #152]	; (2000446c <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
200043d2:	4293      	cmp	r3, r2
200043d4:	d030      	beq.n	20004438 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
200043d6:	68fb      	ldr	r3, [r7, #12]
200043d8:	681b      	ldr	r3, [r3, #0]
200043da:	4a25      	ldr	r2, [pc, #148]	; (20004470 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
200043dc:	4293      	cmp	r3, r2
200043de:	d029      	beq.n	20004434 <HAL_DMAEx_MultiBufferStart_IT+0xfec>
200043e0:	68fb      	ldr	r3, [r7, #12]
200043e2:	681b      	ldr	r3, [r3, #0]
200043e4:	4a23      	ldr	r2, [pc, #140]	; (20004474 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
200043e6:	4293      	cmp	r3, r2
200043e8:	d022      	beq.n	20004430 <HAL_DMAEx_MultiBufferStart_IT+0xfe8>
200043ea:	68fb      	ldr	r3, [r7, #12]
200043ec:	681b      	ldr	r3, [r3, #0]
200043ee:	4a22      	ldr	r2, [pc, #136]	; (20004478 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
200043f0:	4293      	cmp	r3, r2
200043f2:	d01a      	beq.n	2000442a <HAL_DMAEx_MultiBufferStart_IT+0xfe2>
200043f4:	68fb      	ldr	r3, [r7, #12]
200043f6:	681b      	ldr	r3, [r3, #0]
200043f8:	4a20      	ldr	r2, [pc, #128]	; (2000447c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
200043fa:	4293      	cmp	r3, r2
200043fc:	d012      	beq.n	20004424 <HAL_DMAEx_MultiBufferStart_IT+0xfdc>
200043fe:	68fb      	ldr	r3, [r7, #12]
20004400:	681b      	ldr	r3, [r3, #0]
20004402:	4a1f      	ldr	r2, [pc, #124]	; (20004480 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
20004404:	4293      	cmp	r3, r2
20004406:	d00a      	beq.n	2000441e <HAL_DMAEx_MultiBufferStart_IT+0xfd6>
20004408:	68fb      	ldr	r3, [r7, #12]
2000440a:	681b      	ldr	r3, [r3, #0]
2000440c:	4a1d      	ldr	r2, [pc, #116]	; (20004484 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
2000440e:	4293      	cmp	r3, r2
20004410:	d102      	bne.n	20004418 <HAL_DMAEx_MultiBufferStart_IT+0xfd0>
20004412:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20004416:	e01a      	b.n	2000444e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
20004418:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2000441c:	e017      	b.n	2000444e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
2000441e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20004422:	e014      	b.n	2000444e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
20004424:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20004428:	e011      	b.n	2000444e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
2000442a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
2000442e:	e00e      	b.n	2000444e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
20004430:	2340      	movs	r3, #64	; 0x40
20004432:	e00c      	b.n	2000444e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
20004434:	2340      	movs	r3, #64	; 0x40
20004436:	e00a      	b.n	2000444e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
20004438:	2340      	movs	r3, #64	; 0x40
2000443a:	e008      	b.n	2000444e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
2000443c:	2340      	movs	r3, #64	; 0x40
2000443e:	e006      	b.n	2000444e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
20004440:	2301      	movs	r3, #1
20004442:	e004      	b.n	2000444e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
20004444:	2301      	movs	r3, #1
20004446:	e002      	b.n	2000444e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
20004448:	2301      	movs	r3, #1
2000444a:	e000      	b.n	2000444e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
2000444c:	2301      	movs	r3, #1
2000444e:	4a0f      	ldr	r2, [pc, #60]	; (2000448c <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
20004450:	6093      	str	r3, [r2, #8]
20004452:	e0de      	b.n	20004612 <HAL_DMAEx_MultiBufferStart_IT+0x11ca>
20004454:	40026000 	.word	0x40026000
20004458:	40026010 	.word	0x40026010
2000445c:	40026410 	.word	0x40026410
20004460:	40026070 	.word	0x40026070
20004464:	40026470 	.word	0x40026470
20004468:	40026028 	.word	0x40026028
2000446c:	40026428 	.word	0x40026428
20004470:	40026088 	.word	0x40026088
20004474:	40026488 	.word	0x40026488
20004478:	40026040 	.word	0x40026040
2000447c:	40026440 	.word	0x40026440
20004480:	400260a0 	.word	0x400260a0
20004484:	400264a0 	.word	0x400264a0
20004488:	40026458 	.word	0x40026458
2000448c:	40026400 	.word	0x40026400
20004490:	400260b8 	.word	0x400260b8
20004494:	68fb      	ldr	r3, [r7, #12]
20004496:	681b      	ldr	r3, [r3, #0]
20004498:	461a      	mov	r2, r3
2000449a:	4b78      	ldr	r3, [pc, #480]	; (2000467c <HAL_DMAEx_MultiBufferStart_IT+0x1234>)
2000449c:	429a      	cmp	r2, r3
2000449e:	d95c      	bls.n	2000455a <HAL_DMAEx_MultiBufferStart_IT+0x1112>
200044a0:	68fb      	ldr	r3, [r7, #12]
200044a2:	681b      	ldr	r3, [r3, #0]
200044a4:	4a76      	ldr	r2, [pc, #472]	; (20004680 <HAL_DMAEx_MultiBufferStart_IT+0x1238>)
200044a6:	4293      	cmp	r3, r2
200044a8:	d053      	beq.n	20004552 <HAL_DMAEx_MultiBufferStart_IT+0x110a>
200044aa:	68fb      	ldr	r3, [r7, #12]
200044ac:	681b      	ldr	r3, [r3, #0]
200044ae:	4a75      	ldr	r2, [pc, #468]	; (20004684 <HAL_DMAEx_MultiBufferStart_IT+0x123c>)
200044b0:	4293      	cmp	r3, r2
200044b2:	d04c      	beq.n	2000454e <HAL_DMAEx_MultiBufferStart_IT+0x1106>
200044b4:	68fb      	ldr	r3, [r7, #12]
200044b6:	681b      	ldr	r3, [r3, #0]
200044b8:	4a73      	ldr	r2, [pc, #460]	; (20004688 <HAL_DMAEx_MultiBufferStart_IT+0x1240>)
200044ba:	4293      	cmp	r3, r2
200044bc:	d045      	beq.n	2000454a <HAL_DMAEx_MultiBufferStart_IT+0x1102>
200044be:	68fb      	ldr	r3, [r7, #12]
200044c0:	681b      	ldr	r3, [r3, #0]
200044c2:	4a72      	ldr	r2, [pc, #456]	; (2000468c <HAL_DMAEx_MultiBufferStart_IT+0x1244>)
200044c4:	4293      	cmp	r3, r2
200044c6:	d03e      	beq.n	20004546 <HAL_DMAEx_MultiBufferStart_IT+0x10fe>
200044c8:	68fb      	ldr	r3, [r7, #12]
200044ca:	681b      	ldr	r3, [r3, #0]
200044cc:	4a70      	ldr	r2, [pc, #448]	; (20004690 <HAL_DMAEx_MultiBufferStart_IT+0x1248>)
200044ce:	4293      	cmp	r3, r2
200044d0:	d037      	beq.n	20004542 <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
200044d2:	68fb      	ldr	r3, [r7, #12]
200044d4:	681b      	ldr	r3, [r3, #0]
200044d6:	4a6f      	ldr	r2, [pc, #444]	; (20004694 <HAL_DMAEx_MultiBufferStart_IT+0x124c>)
200044d8:	4293      	cmp	r3, r2
200044da:	d030      	beq.n	2000453e <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
200044dc:	68fb      	ldr	r3, [r7, #12]
200044de:	681b      	ldr	r3, [r3, #0]
200044e0:	4a6d      	ldr	r2, [pc, #436]	; (20004698 <HAL_DMAEx_MultiBufferStart_IT+0x1250>)
200044e2:	4293      	cmp	r3, r2
200044e4:	d029      	beq.n	2000453a <HAL_DMAEx_MultiBufferStart_IT+0x10f2>
200044e6:	68fb      	ldr	r3, [r7, #12]
200044e8:	681b      	ldr	r3, [r3, #0]
200044ea:	4a6c      	ldr	r2, [pc, #432]	; (2000469c <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
200044ec:	4293      	cmp	r3, r2
200044ee:	d022      	beq.n	20004536 <HAL_DMAEx_MultiBufferStart_IT+0x10ee>
200044f0:	68fb      	ldr	r3, [r7, #12]
200044f2:	681b      	ldr	r3, [r3, #0]
200044f4:	4a6a      	ldr	r2, [pc, #424]	; (200046a0 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
200044f6:	4293      	cmp	r3, r2
200044f8:	d01a      	beq.n	20004530 <HAL_DMAEx_MultiBufferStart_IT+0x10e8>
200044fa:	68fb      	ldr	r3, [r7, #12]
200044fc:	681b      	ldr	r3, [r3, #0]
200044fe:	4a69      	ldr	r2, [pc, #420]	; (200046a4 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
20004500:	4293      	cmp	r3, r2
20004502:	d012      	beq.n	2000452a <HAL_DMAEx_MultiBufferStart_IT+0x10e2>
20004504:	68fb      	ldr	r3, [r7, #12]
20004506:	681b      	ldr	r3, [r3, #0]
20004508:	4a67      	ldr	r2, [pc, #412]	; (200046a8 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
2000450a:	4293      	cmp	r3, r2
2000450c:	d00a      	beq.n	20004524 <HAL_DMAEx_MultiBufferStart_IT+0x10dc>
2000450e:	68fb      	ldr	r3, [r7, #12]
20004510:	681b      	ldr	r3, [r3, #0]
20004512:	4a66      	ldr	r2, [pc, #408]	; (200046ac <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
20004514:	4293      	cmp	r3, r2
20004516:	d102      	bne.n	2000451e <HAL_DMAEx_MultiBufferStart_IT+0x10d6>
20004518:	f44f 3380 	mov.w	r3, #65536	; 0x10000
2000451c:	e01a      	b.n	20004554 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
2000451e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
20004522:	e017      	b.n	20004554 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
20004524:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20004528:	e014      	b.n	20004554 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
2000452a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
2000452e:	e011      	b.n	20004554 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
20004530:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20004534:	e00e      	b.n	20004554 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
20004536:	2340      	movs	r3, #64	; 0x40
20004538:	e00c      	b.n	20004554 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
2000453a:	2340      	movs	r3, #64	; 0x40
2000453c:	e00a      	b.n	20004554 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
2000453e:	2340      	movs	r3, #64	; 0x40
20004540:	e008      	b.n	20004554 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
20004542:	2340      	movs	r3, #64	; 0x40
20004544:	e006      	b.n	20004554 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
20004546:	2301      	movs	r3, #1
20004548:	e004      	b.n	20004554 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
2000454a:	2301      	movs	r3, #1
2000454c:	e002      	b.n	20004554 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
2000454e:	2301      	movs	r3, #1
20004550:	e000      	b.n	20004554 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
20004552:	2301      	movs	r3, #1
20004554:	4a56      	ldr	r2, [pc, #344]	; (200046b0 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
20004556:	60d3      	str	r3, [r2, #12]
20004558:	e05b      	b.n	20004612 <HAL_DMAEx_MultiBufferStart_IT+0x11ca>
2000455a:	68fb      	ldr	r3, [r7, #12]
2000455c:	681b      	ldr	r3, [r3, #0]
2000455e:	4a48      	ldr	r2, [pc, #288]	; (20004680 <HAL_DMAEx_MultiBufferStart_IT+0x1238>)
20004560:	4293      	cmp	r3, r2
20004562:	d053      	beq.n	2000460c <HAL_DMAEx_MultiBufferStart_IT+0x11c4>
20004564:	68fb      	ldr	r3, [r7, #12]
20004566:	681b      	ldr	r3, [r3, #0]
20004568:	4a46      	ldr	r2, [pc, #280]	; (20004684 <HAL_DMAEx_MultiBufferStart_IT+0x123c>)
2000456a:	4293      	cmp	r3, r2
2000456c:	d04c      	beq.n	20004608 <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
2000456e:	68fb      	ldr	r3, [r7, #12]
20004570:	681b      	ldr	r3, [r3, #0]
20004572:	4a45      	ldr	r2, [pc, #276]	; (20004688 <HAL_DMAEx_MultiBufferStart_IT+0x1240>)
20004574:	4293      	cmp	r3, r2
20004576:	d045      	beq.n	20004604 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
20004578:	68fb      	ldr	r3, [r7, #12]
2000457a:	681b      	ldr	r3, [r3, #0]
2000457c:	4a43      	ldr	r2, [pc, #268]	; (2000468c <HAL_DMAEx_MultiBufferStart_IT+0x1244>)
2000457e:	4293      	cmp	r3, r2
20004580:	d03e      	beq.n	20004600 <HAL_DMAEx_MultiBufferStart_IT+0x11b8>
20004582:	68fb      	ldr	r3, [r7, #12]
20004584:	681b      	ldr	r3, [r3, #0]
20004586:	4a42      	ldr	r2, [pc, #264]	; (20004690 <HAL_DMAEx_MultiBufferStart_IT+0x1248>)
20004588:	4293      	cmp	r3, r2
2000458a:	d037      	beq.n	200045fc <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
2000458c:	68fb      	ldr	r3, [r7, #12]
2000458e:	681b      	ldr	r3, [r3, #0]
20004590:	4a40      	ldr	r2, [pc, #256]	; (20004694 <HAL_DMAEx_MultiBufferStart_IT+0x124c>)
20004592:	4293      	cmp	r3, r2
20004594:	d030      	beq.n	200045f8 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
20004596:	68fb      	ldr	r3, [r7, #12]
20004598:	681b      	ldr	r3, [r3, #0]
2000459a:	4a3f      	ldr	r2, [pc, #252]	; (20004698 <HAL_DMAEx_MultiBufferStart_IT+0x1250>)
2000459c:	4293      	cmp	r3, r2
2000459e:	d029      	beq.n	200045f4 <HAL_DMAEx_MultiBufferStart_IT+0x11ac>
200045a0:	68fb      	ldr	r3, [r7, #12]
200045a2:	681b      	ldr	r3, [r3, #0]
200045a4:	4a3d      	ldr	r2, [pc, #244]	; (2000469c <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
200045a6:	4293      	cmp	r3, r2
200045a8:	d022      	beq.n	200045f0 <HAL_DMAEx_MultiBufferStart_IT+0x11a8>
200045aa:	68fb      	ldr	r3, [r7, #12]
200045ac:	681b      	ldr	r3, [r3, #0]
200045ae:	4a3c      	ldr	r2, [pc, #240]	; (200046a0 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
200045b0:	4293      	cmp	r3, r2
200045b2:	d01a      	beq.n	200045ea <HAL_DMAEx_MultiBufferStart_IT+0x11a2>
200045b4:	68fb      	ldr	r3, [r7, #12]
200045b6:	681b      	ldr	r3, [r3, #0]
200045b8:	4a3a      	ldr	r2, [pc, #232]	; (200046a4 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
200045ba:	4293      	cmp	r3, r2
200045bc:	d012      	beq.n	200045e4 <HAL_DMAEx_MultiBufferStart_IT+0x119c>
200045be:	68fb      	ldr	r3, [r7, #12]
200045c0:	681b      	ldr	r3, [r3, #0]
200045c2:	4a39      	ldr	r2, [pc, #228]	; (200046a8 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
200045c4:	4293      	cmp	r3, r2
200045c6:	d00a      	beq.n	200045de <HAL_DMAEx_MultiBufferStart_IT+0x1196>
200045c8:	68fb      	ldr	r3, [r7, #12]
200045ca:	681b      	ldr	r3, [r3, #0]
200045cc:	4a37      	ldr	r2, [pc, #220]	; (200046ac <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
200045ce:	4293      	cmp	r3, r2
200045d0:	d102      	bne.n	200045d8 <HAL_DMAEx_MultiBufferStart_IT+0x1190>
200045d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
200045d6:	e01a      	b.n	2000460e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
200045d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
200045dc:	e017      	b.n	2000460e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
200045de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
200045e2:	e014      	b.n	2000460e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
200045e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
200045e8:	e011      	b.n	2000460e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
200045ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
200045ee:	e00e      	b.n	2000460e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
200045f0:	2340      	movs	r3, #64	; 0x40
200045f2:	e00c      	b.n	2000460e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
200045f4:	2340      	movs	r3, #64	; 0x40
200045f6:	e00a      	b.n	2000460e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
200045f8:	2340      	movs	r3, #64	; 0x40
200045fa:	e008      	b.n	2000460e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
200045fc:	2340      	movs	r3, #64	; 0x40
200045fe:	e006      	b.n	2000460e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
20004600:	2301      	movs	r3, #1
20004602:	e004      	b.n	2000460e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
20004604:	2301      	movs	r3, #1
20004606:	e002      	b.n	2000460e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
20004608:	2301      	movs	r3, #1
2000460a:	e000      	b.n	2000460e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
2000460c:	2301      	movs	r3, #1
2000460e:	4a28      	ldr	r2, [pc, #160]	; (200046b0 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
20004610:	6093      	str	r3, [r2, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
20004612:	68fb      	ldr	r3, [r7, #12]
20004614:	681b      	ldr	r3, [r3, #0]
20004616:	681a      	ldr	r2, [r3, #0]
20004618:	68fb      	ldr	r3, [r7, #12]
2000461a:	681b      	ldr	r3, [r3, #0]
2000461c:	f042 0216 	orr.w	r2, r2, #22
20004620:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
20004622:	68fb      	ldr	r3, [r7, #12]
20004624:	681b      	ldr	r3, [r3, #0]
20004626:	695a      	ldr	r2, [r3, #20]
20004628:	68fb      	ldr	r3, [r7, #12]
2000462a:	681b      	ldr	r3, [r3, #0]
2000462c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
20004630:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
20004632:	68fb      	ldr	r3, [r7, #12]
20004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20004636:	2b00      	cmp	r3, #0
20004638:	d103      	bne.n	20004642 <HAL_DMAEx_MultiBufferStart_IT+0x11fa>
2000463a:	68fb      	ldr	r3, [r7, #12]
2000463c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000463e:	2b00      	cmp	r3, #0
20004640:	d007      	beq.n	20004652 <HAL_DMAEx_MultiBufferStart_IT+0x120a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
20004642:	68fb      	ldr	r3, [r7, #12]
20004644:	681b      	ldr	r3, [r3, #0]
20004646:	681a      	ldr	r2, [r3, #0]
20004648:	68fb      	ldr	r3, [r7, #12]
2000464a:	681b      	ldr	r3, [r3, #0]
2000464c:	f042 0208 	orr.w	r2, r2, #8
20004650:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
20004652:	68fb      	ldr	r3, [r7, #12]
20004654:	681b      	ldr	r3, [r3, #0]
20004656:	681a      	ldr	r2, [r3, #0]
20004658:	68fb      	ldr	r3, [r7, #12]
2000465a:	681b      	ldr	r3, [r3, #0]
2000465c:	f042 0201 	orr.w	r2, r2, #1
20004660:	601a      	str	r2, [r3, #0]
20004662:	e005      	b.n	20004670 <HAL_DMAEx_MultiBufferStart_IT+0x1228>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
20004664:	68fb      	ldr	r3, [r7, #12]
20004666:	2200      	movs	r2, #0
20004668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
2000466c:	2302      	movs	r3, #2
2000466e:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
20004670:	7dfb      	ldrb	r3, [r7, #23]
}
20004672:	4618      	mov	r0, r3
20004674:	3718      	adds	r7, #24
20004676:	46bd      	mov	sp, r7
20004678:	bd80      	pop	{r7, pc}
2000467a:	bf00      	nop
2000467c:	40026058 	.word	0x40026058
20004680:	40026010 	.word	0x40026010
20004684:	40026410 	.word	0x40026410
20004688:	40026070 	.word	0x40026070
2000468c:	40026470 	.word	0x40026470
20004690:	40026028 	.word	0x40026028
20004694:	40026428 	.word	0x40026428
20004698:	40026088 	.word	0x40026088
2000469c:	40026488 	.word	0x40026488
200046a0:	40026040 	.word	0x40026040
200046a4:	40026440 	.word	0x40026440
200046a8:	400260a0 	.word	0x400260a0
200046ac:	400264a0 	.word	0x400264a0
200046b0:	40026000 	.word	0x40026000

200046b4 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
200046b4:	b480      	push	{r7}
200046b6:	b085      	sub	sp, #20
200046b8:	af00      	add	r7, sp, #0
200046ba:	60f8      	str	r0, [r7, #12]
200046bc:	60b9      	str	r1, [r7, #8]
200046be:	4613      	mov	r3, r2
200046c0:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
200046c2:	79fb      	ldrb	r3, [r7, #7]
200046c4:	2b00      	cmp	r3, #0
200046c6:	d104      	bne.n	200046d2 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
200046c8:	68fb      	ldr	r3, [r7, #12]
200046ca:	681b      	ldr	r3, [r3, #0]
200046cc:	68ba      	ldr	r2, [r7, #8]
200046ce:	60da      	str	r2, [r3, #12]
200046d0:	e003      	b.n	200046da <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
200046d2:	68fb      	ldr	r3, [r7, #12]
200046d4:	681b      	ldr	r3, [r3, #0]
200046d6:	68ba      	ldr	r2, [r7, #8]
200046d8:	611a      	str	r2, [r3, #16]
  }
  
  return HAL_OK;
200046da:	2300      	movs	r3, #0
}
200046dc:	4618      	mov	r0, r3
200046de:	3714      	adds	r7, #20
200046e0:	46bd      	mov	sp, r7
200046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
200046e6:	4770      	bx	lr

200046e8 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
200046e8:	b480      	push	{r7}
200046ea:	b085      	sub	sp, #20
200046ec:	af00      	add	r7, sp, #0
200046ee:	60f8      	str	r0, [r7, #12]
200046f0:	60b9      	str	r1, [r7, #8]
200046f2:	607a      	str	r2, [r7, #4]
200046f4:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
200046f6:	68fb      	ldr	r3, [r7, #12]
200046f8:	681b      	ldr	r3, [r3, #0]
200046fa:	683a      	ldr	r2, [r7, #0]
200046fc:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
200046fe:	68fb      	ldr	r3, [r7, #12]
20004700:	689b      	ldr	r3, [r3, #8]
20004702:	2b40      	cmp	r3, #64	; 0x40
20004704:	d108      	bne.n	20004718 <DMA_MultiBufferSetConfig+0x30>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
20004706:	68fb      	ldr	r3, [r7, #12]
20004708:	681b      	ldr	r3, [r3, #0]
2000470a:	687a      	ldr	r2, [r7, #4]
2000470c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
2000470e:	68fb      	ldr	r3, [r7, #12]
20004710:	681b      	ldr	r3, [r3, #0]
20004712:	68ba      	ldr	r2, [r7, #8]
20004714:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
20004716:	e007      	b.n	20004728 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
20004718:	68fb      	ldr	r3, [r7, #12]
2000471a:	681b      	ldr	r3, [r3, #0]
2000471c:	68ba      	ldr	r2, [r7, #8]
2000471e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
20004720:	68fb      	ldr	r3, [r7, #12]
20004722:	681b      	ldr	r3, [r3, #0]
20004724:	687a      	ldr	r2, [r7, #4]
20004726:	60da      	str	r2, [r3, #12]
}
20004728:	bf00      	nop
2000472a:	3714      	adds	r7, #20
2000472c:	46bd      	mov	sp, r7
2000472e:	f85d 7b04 	ldr.w	r7, [sp], #4
20004732:	4770      	bx	lr

20004734 <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
20004734:	b480      	push	{r7}
20004736:	b087      	sub	sp, #28
20004738:	af00      	add	r7, sp, #0
2000473a:	6078      	str	r0, [r7, #4]
2000473c:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
2000473e:	687b      	ldr	r3, [r7, #4]
20004740:	2b00      	cmp	r3, #0
20004742:	d002      	beq.n	2000474a <HAL_EXTI_SetConfigLine+0x16>
20004744:	683b      	ldr	r3, [r7, #0]
20004746:	2b00      	cmp	r3, #0
20004748:	d101      	bne.n	2000474e <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
2000474a:	2301      	movs	r3, #1
2000474c:	e08f      	b.n	2000486e <HAL_EXTI_SetConfigLine+0x13a>
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
2000474e:	683b      	ldr	r3, [r7, #0]
20004750:	681a      	ldr	r2, [r3, #0]
20004752:	687b      	ldr	r3, [r7, #4]
20004754:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
20004756:	683b      	ldr	r3, [r7, #0]
20004758:	681b      	ldr	r3, [r3, #0]
2000475a:	f003 031f 	and.w	r3, r3, #31
2000475e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
20004760:	2201      	movs	r2, #1
20004762:	697b      	ldr	r3, [r7, #20]
20004764:	fa02 f303 	lsl.w	r3, r2, r3
20004768:	613b      	str	r3, [r7, #16]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
2000476a:	683b      	ldr	r3, [r7, #0]
2000476c:	681b      	ldr	r3, [r3, #0]
2000476e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20004772:	2b00      	cmp	r3, #0
20004774:	d052      	beq.n	2000481c <HAL_EXTI_SetConfigLine+0xe8>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
20004776:	683b      	ldr	r3, [r7, #0]
20004778:	689b      	ldr	r3, [r3, #8]
2000477a:	f003 0301 	and.w	r3, r3, #1
2000477e:	2b00      	cmp	r3, #0
20004780:	d006      	beq.n	20004790 <HAL_EXTI_SetConfigLine+0x5c>
    {
      EXTI->RTSR |= maskline;
20004782:	4b3e      	ldr	r3, [pc, #248]	; (2000487c <HAL_EXTI_SetConfigLine+0x148>)
20004784:	689a      	ldr	r2, [r3, #8]
20004786:	493d      	ldr	r1, [pc, #244]	; (2000487c <HAL_EXTI_SetConfigLine+0x148>)
20004788:	693b      	ldr	r3, [r7, #16]
2000478a:	4313      	orrs	r3, r2
2000478c:	608b      	str	r3, [r1, #8]
2000478e:	e006      	b.n	2000479e <HAL_EXTI_SetConfigLine+0x6a>
    }
    else
    {
      EXTI->RTSR &= ~maskline;
20004790:	4b3a      	ldr	r3, [pc, #232]	; (2000487c <HAL_EXTI_SetConfigLine+0x148>)
20004792:	689a      	ldr	r2, [r3, #8]
20004794:	693b      	ldr	r3, [r7, #16]
20004796:	43db      	mvns	r3, r3
20004798:	4938      	ldr	r1, [pc, #224]	; (2000487c <HAL_EXTI_SetConfigLine+0x148>)
2000479a:	4013      	ands	r3, r2
2000479c:	608b      	str	r3, [r1, #8]
    }

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
2000479e:	683b      	ldr	r3, [r7, #0]
200047a0:	689b      	ldr	r3, [r3, #8]
200047a2:	f003 0302 	and.w	r3, r3, #2
200047a6:	2b00      	cmp	r3, #0
200047a8:	d006      	beq.n	200047b8 <HAL_EXTI_SetConfigLine+0x84>
    {
      EXTI->FTSR |= maskline;
200047aa:	4b34      	ldr	r3, [pc, #208]	; (2000487c <HAL_EXTI_SetConfigLine+0x148>)
200047ac:	68da      	ldr	r2, [r3, #12]
200047ae:	4933      	ldr	r1, [pc, #204]	; (2000487c <HAL_EXTI_SetConfigLine+0x148>)
200047b0:	693b      	ldr	r3, [r7, #16]
200047b2:	4313      	orrs	r3, r2
200047b4:	60cb      	str	r3, [r1, #12]
200047b6:	e006      	b.n	200047c6 <HAL_EXTI_SetConfigLine+0x92>
    }
    else
    {
      EXTI->FTSR &= ~maskline;
200047b8:	4b30      	ldr	r3, [pc, #192]	; (2000487c <HAL_EXTI_SetConfigLine+0x148>)
200047ba:	68da      	ldr	r2, [r3, #12]
200047bc:	693b      	ldr	r3, [r7, #16]
200047be:	43db      	mvns	r3, r3
200047c0:	492e      	ldr	r1, [pc, #184]	; (2000487c <HAL_EXTI_SetConfigLine+0x148>)
200047c2:	4013      	ands	r3, r2
200047c4:	60cb      	str	r3, [r1, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
200047c6:	683b      	ldr	r3, [r7, #0]
200047c8:	681b      	ldr	r3, [r3, #0]
200047ca:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
200047ce:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
200047d2:	d123      	bne.n	2000481c <HAL_EXTI_SetConfigLine+0xe8>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
200047d4:	4a2a      	ldr	r2, [pc, #168]	; (20004880 <HAL_EXTI_SetConfigLine+0x14c>)
200047d6:	697b      	ldr	r3, [r7, #20]
200047d8:	089b      	lsrs	r3, r3, #2
200047da:	3302      	adds	r3, #2
200047dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
200047e0:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
200047e2:	697b      	ldr	r3, [r7, #20]
200047e4:	f003 0303 	and.w	r3, r3, #3
200047e8:	009b      	lsls	r3, r3, #2
200047ea:	220f      	movs	r2, #15
200047ec:	fa02 f303 	lsl.w	r3, r2, r3
200047f0:	43db      	mvns	r3, r3
200047f2:	68fa      	ldr	r2, [r7, #12]
200047f4:	4013      	ands	r3, r2
200047f6:	60fb      	str	r3, [r7, #12]
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
200047f8:	683b      	ldr	r3, [r7, #0]
200047fa:	68da      	ldr	r2, [r3, #12]
200047fc:	697b      	ldr	r3, [r7, #20]
200047fe:	f003 0303 	and.w	r3, r3, #3
20004802:	009b      	lsls	r3, r3, #2
20004804:	fa02 f303 	lsl.w	r3, r2, r3
20004808:	68fa      	ldr	r2, [r7, #12]
2000480a:	4313      	orrs	r3, r2
2000480c:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
2000480e:	491c      	ldr	r1, [pc, #112]	; (20004880 <HAL_EXTI_SetConfigLine+0x14c>)
20004810:	697b      	ldr	r3, [r7, #20]
20004812:	089b      	lsrs	r3, r3, #2
20004814:	3302      	adds	r3, #2
20004816:	68fa      	ldr	r2, [r7, #12]
20004818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
2000481c:	683b      	ldr	r3, [r7, #0]
2000481e:	685b      	ldr	r3, [r3, #4]
20004820:	f003 0301 	and.w	r3, r3, #1
20004824:	2b00      	cmp	r3, #0
20004826:	d006      	beq.n	20004836 <HAL_EXTI_SetConfigLine+0x102>
  {
    EXTI->IMR |= maskline;
20004828:	4b14      	ldr	r3, [pc, #80]	; (2000487c <HAL_EXTI_SetConfigLine+0x148>)
2000482a:	681a      	ldr	r2, [r3, #0]
2000482c:	4913      	ldr	r1, [pc, #76]	; (2000487c <HAL_EXTI_SetConfigLine+0x148>)
2000482e:	693b      	ldr	r3, [r7, #16]
20004830:	4313      	orrs	r3, r2
20004832:	600b      	str	r3, [r1, #0]
20004834:	e006      	b.n	20004844 <HAL_EXTI_SetConfigLine+0x110>
  }
  else
  {
    EXTI->IMR &= ~maskline;
20004836:	4b11      	ldr	r3, [pc, #68]	; (2000487c <HAL_EXTI_SetConfigLine+0x148>)
20004838:	681a      	ldr	r2, [r3, #0]
2000483a:	693b      	ldr	r3, [r7, #16]
2000483c:	43db      	mvns	r3, r3
2000483e:	490f      	ldr	r1, [pc, #60]	; (2000487c <HAL_EXTI_SetConfigLine+0x148>)
20004840:	4013      	ands	r3, r2
20004842:	600b      	str	r3, [r1, #0]
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
20004844:	683b      	ldr	r3, [r7, #0]
20004846:	685b      	ldr	r3, [r3, #4]
20004848:	f003 0302 	and.w	r3, r3, #2
2000484c:	2b00      	cmp	r3, #0
2000484e:	d006      	beq.n	2000485e <HAL_EXTI_SetConfigLine+0x12a>
  {
    EXTI->EMR |= maskline;
20004850:	4b0a      	ldr	r3, [pc, #40]	; (2000487c <HAL_EXTI_SetConfigLine+0x148>)
20004852:	685a      	ldr	r2, [r3, #4]
20004854:	4909      	ldr	r1, [pc, #36]	; (2000487c <HAL_EXTI_SetConfigLine+0x148>)
20004856:	693b      	ldr	r3, [r7, #16]
20004858:	4313      	orrs	r3, r2
2000485a:	604b      	str	r3, [r1, #4]
2000485c:	e006      	b.n	2000486c <HAL_EXTI_SetConfigLine+0x138>
  }
  else
  {
    EXTI->EMR &= ~maskline;
2000485e:	4b07      	ldr	r3, [pc, #28]	; (2000487c <HAL_EXTI_SetConfigLine+0x148>)
20004860:	685a      	ldr	r2, [r3, #4]
20004862:	693b      	ldr	r3, [r7, #16]
20004864:	43db      	mvns	r3, r3
20004866:	4905      	ldr	r1, [pc, #20]	; (2000487c <HAL_EXTI_SetConfigLine+0x148>)
20004868:	4013      	ands	r3, r2
2000486a:	604b      	str	r3, [r1, #4]
  }

  return HAL_OK;
2000486c:	2300      	movs	r3, #0
}
2000486e:	4618      	mov	r0, r3
20004870:	371c      	adds	r7, #28
20004872:	46bd      	mov	sp, r7
20004874:	f85d 7b04 	ldr.w	r7, [sp], #4
20004878:	4770      	bx	lr
2000487a:	bf00      	nop
2000487c:	40013c00 	.word	0x40013c00
20004880:	40013800 	.word	0x40013800

20004884 <HAL_EXTI_GetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on structure to store Exti configuration.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
20004884:	b480      	push	{r7}
20004886:	b087      	sub	sp, #28
20004888:	af00      	add	r7, sp, #0
2000488a:	6078      	str	r0, [r7, #4]
2000488c:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
2000488e:	687b      	ldr	r3, [r7, #4]
20004890:	2b00      	cmp	r3, #0
20004892:	d002      	beq.n	2000489a <HAL_EXTI_GetConfigLine+0x16>
20004894:	683b      	ldr	r3, [r7, #0]
20004896:	2b00      	cmp	r3, #0
20004898:	d101      	bne.n	2000489e <HAL_EXTI_GetConfigLine+0x1a>
  {
    return HAL_ERROR;
2000489a:	2301      	movs	r3, #1
2000489c:	e061      	b.n	20004962 <HAL_EXTI_GetConfigLine+0xde>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* Store handle line number to configuration structure */
  pExtiConfig->Line = hexti->Line;
2000489e:	687b      	ldr	r3, [r7, #4]
200048a0:	681a      	ldr	r2, [r3, #0]
200048a2:	683b      	ldr	r3, [r7, #0]
200048a4:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
200048a6:	683b      	ldr	r3, [r7, #0]
200048a8:	681b      	ldr	r3, [r3, #0]
200048aa:	f003 031f 	and.w	r3, r3, #31
200048ae:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
200048b0:	2201      	movs	r2, #1
200048b2:	697b      	ldr	r3, [r7, #20]
200048b4:	fa02 f303 	lsl.w	r3, r2, r3
200048b8:	613b      	str	r3, [r7, #16]

  /* 1] Get core mode : interrupt */

  /* Check if selected line is enable */
  if ((EXTI->IMR & maskline) != 0x00u)
200048ba:	4b2d      	ldr	r3, [pc, #180]	; (20004970 <HAL_EXTI_GetConfigLine+0xec>)
200048bc:	681a      	ldr	r2, [r3, #0]
200048be:	693b      	ldr	r3, [r7, #16]
200048c0:	4013      	ands	r3, r2
200048c2:	2b00      	cmp	r3, #0
200048c4:	d003      	beq.n	200048ce <HAL_EXTI_GetConfigLine+0x4a>
  {
    pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
200048c6:	683b      	ldr	r3, [r7, #0]
200048c8:	2201      	movs	r2, #1
200048ca:	605a      	str	r2, [r3, #4]
200048cc:	e002      	b.n	200048d4 <HAL_EXTI_GetConfigLine+0x50>
  }
  else
  {
    pExtiConfig->Mode = EXTI_MODE_NONE;
200048ce:	683b      	ldr	r3, [r7, #0]
200048d0:	2200      	movs	r2, #0
200048d2:	605a      	str	r2, [r3, #4]
  }

  /* Get event mode */
  /* Check if selected line is enable */
  if ((EXTI->EMR & maskline) != 0x00u)
200048d4:	4b26      	ldr	r3, [pc, #152]	; (20004970 <HAL_EXTI_GetConfigLine+0xec>)
200048d6:	685a      	ldr	r2, [r3, #4]
200048d8:	693b      	ldr	r3, [r7, #16]
200048da:	4013      	ands	r3, r2
200048dc:	2b00      	cmp	r3, #0
200048de:	d005      	beq.n	200048ec <HAL_EXTI_GetConfigLine+0x68>
  {
    pExtiConfig->Mode |= EXTI_MODE_EVENT;
200048e0:	683b      	ldr	r3, [r7, #0]
200048e2:	685b      	ldr	r3, [r3, #4]
200048e4:	f043 0202 	orr.w	r2, r3, #2
200048e8:	683b      	ldr	r3, [r7, #0]
200048ea:	605a      	str	r2, [r3, #4]
  }

  /* Get default Trigger and GPIOSel configuration */
  pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
200048ec:	683b      	ldr	r3, [r7, #0]
200048ee:	2200      	movs	r2, #0
200048f0:	609a      	str	r2, [r3, #8]
  pExtiConfig->GPIOSel = 0x00u;
200048f2:	683b      	ldr	r3, [r7, #0]
200048f4:	2200      	movs	r2, #0
200048f6:	60da      	str	r2, [r3, #12]

  /* 2] Get trigger for configurable lines : rising */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
200048f8:	683b      	ldr	r3, [r7, #0]
200048fa:	681b      	ldr	r3, [r3, #0]
200048fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20004900:	2b00      	cmp	r3, #0
20004902:	d02d      	beq.n	20004960 <HAL_EXTI_GetConfigLine+0xdc>
  {
    /* Check if configuration of selected line is enable */
    if ((EXTI->RTSR & maskline) != 0x00u)
20004904:	4b1a      	ldr	r3, [pc, #104]	; (20004970 <HAL_EXTI_GetConfigLine+0xec>)
20004906:	689a      	ldr	r2, [r3, #8]
20004908:	693b      	ldr	r3, [r7, #16]
2000490a:	4013      	ands	r3, r2
2000490c:	2b00      	cmp	r3, #0
2000490e:	d002      	beq.n	20004916 <HAL_EXTI_GetConfigLine+0x92>
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
20004910:	683b      	ldr	r3, [r7, #0]
20004912:	2201      	movs	r2, #1
20004914:	609a      	str	r2, [r3, #8]
    }

    /* Get falling configuration */
    /* Check if configuration of selected line is enable */
    if ((EXTI->FTSR & maskline) != 0x00u)
20004916:	4b16      	ldr	r3, [pc, #88]	; (20004970 <HAL_EXTI_GetConfigLine+0xec>)
20004918:	68da      	ldr	r2, [r3, #12]
2000491a:	693b      	ldr	r3, [r7, #16]
2000491c:	4013      	ands	r3, r2
2000491e:	2b00      	cmp	r3, #0
20004920:	d005      	beq.n	2000492e <HAL_EXTI_GetConfigLine+0xaa>
    {
      pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
20004922:	683b      	ldr	r3, [r7, #0]
20004924:	689b      	ldr	r3, [r3, #8]
20004926:	f043 0202 	orr.w	r2, r3, #2
2000492a:	683b      	ldr	r3, [r7, #0]
2000492c:	609a      	str	r2, [r3, #8]
    }

    /* Get Gpio port selection for gpio lines */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
2000492e:	683b      	ldr	r3, [r7, #0]
20004930:	681b      	ldr	r3, [r3, #0]
20004932:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
20004936:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
2000493a:	d111      	bne.n	20004960 <HAL_EXTI_GetConfigLine+0xdc>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
2000493c:	4a0d      	ldr	r2, [pc, #52]	; (20004974 <HAL_EXTI_GetConfigLine+0xf0>)
2000493e:	697b      	ldr	r3, [r7, #20]
20004940:	089b      	lsrs	r3, r3, #2
20004942:	3302      	adds	r3, #2
20004944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20004948:	60fb      	str	r3, [r7, #12]
      pExtiConfig->GPIOSel = ((regval << (SYSCFG_EXTICR1_EXTI1_Pos * (3uL - (linepos & 0x03u)))) >> 24);
2000494a:	697b      	ldr	r3, [r7, #20]
2000494c:	43db      	mvns	r3, r3
2000494e:	f003 0303 	and.w	r3, r3, #3
20004952:	009b      	lsls	r3, r3, #2
20004954:	68fa      	ldr	r2, [r7, #12]
20004956:	fa02 f303 	lsl.w	r3, r2, r3
2000495a:	0e1a      	lsrs	r2, r3, #24
2000495c:	683b      	ldr	r3, [r7, #0]
2000495e:	60da      	str	r2, [r3, #12]
    }
  }

  return HAL_OK;
20004960:	2300      	movs	r3, #0
}
20004962:	4618      	mov	r0, r3
20004964:	371c      	adds	r7, #28
20004966:	46bd      	mov	sp, r7
20004968:	f85d 7b04 	ldr.w	r7, [sp], #4
2000496c:	4770      	bx	lr
2000496e:	bf00      	nop
20004970:	40013c00 	.word	0x40013c00
20004974:	40013800 	.word	0x40013800

20004978 <HAL_EXTI_ClearConfigLine>:
  * @brief  Clear whole configuration of a dedicated Exti line.
  * @param  hexti Exti handle.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_ClearConfigLine(EXTI_HandleTypeDef *hexti)
{
20004978:	b480      	push	{r7}
2000497a:	b087      	sub	sp, #28
2000497c:	af00      	add	r7, sp, #0
2000497e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if (hexti == NULL)
20004980:	687b      	ldr	r3, [r7, #4]
20004982:	2b00      	cmp	r3, #0
20004984:	d101      	bne.n	2000498a <HAL_EXTI_ClearConfigLine+0x12>
  {
    return HAL_ERROR;
20004986:	2301      	movs	r3, #1
20004988:	e04c      	b.n	20004a24 <HAL_EXTI_ClearConfigLine+0xac>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
2000498a:	687b      	ldr	r3, [r7, #4]
2000498c:	681b      	ldr	r3, [r3, #0]
2000498e:	f003 031f 	and.w	r3, r3, #31
20004992:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
20004994:	2201      	movs	r2, #1
20004996:	697b      	ldr	r3, [r7, #20]
20004998:	fa02 f303 	lsl.w	r3, r2, r3
2000499c:	613b      	str	r3, [r7, #16]

  /* 1] Clear interrupt mode */
  EXTI->IMR = (EXTI->IMR & ~maskline);
2000499e:	4b24      	ldr	r3, [pc, #144]	; (20004a30 <HAL_EXTI_ClearConfigLine+0xb8>)
200049a0:	681a      	ldr	r2, [r3, #0]
200049a2:	693b      	ldr	r3, [r7, #16]
200049a4:	43db      	mvns	r3, r3
200049a6:	4922      	ldr	r1, [pc, #136]	; (20004a30 <HAL_EXTI_ClearConfigLine+0xb8>)
200049a8:	4013      	ands	r3, r2
200049aa:	600b      	str	r3, [r1, #0]

  /* 2] Clear event mode */
  EXTI->EMR = (EXTI->EMR & ~maskline);
200049ac:	4b20      	ldr	r3, [pc, #128]	; (20004a30 <HAL_EXTI_ClearConfigLine+0xb8>)
200049ae:	685a      	ldr	r2, [r3, #4]
200049b0:	693b      	ldr	r3, [r7, #16]
200049b2:	43db      	mvns	r3, r3
200049b4:	491e      	ldr	r1, [pc, #120]	; (20004a30 <HAL_EXTI_ClearConfigLine+0xb8>)
200049b6:	4013      	ands	r3, r2
200049b8:	604b      	str	r3, [r1, #4]

  /* 3] Clear triggers in case of configurable lines */
  if ((hexti->Line & EXTI_CONFIG) != 0x00u)
200049ba:	687b      	ldr	r3, [r7, #4]
200049bc:	681b      	ldr	r3, [r3, #0]
200049be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
200049c2:	2b00      	cmp	r3, #0
200049c4:	d02d      	beq.n	20004a22 <HAL_EXTI_ClearConfigLine+0xaa>
  {
    EXTI->RTSR = (EXTI->RTSR & ~maskline);
200049c6:	4b1a      	ldr	r3, [pc, #104]	; (20004a30 <HAL_EXTI_ClearConfigLine+0xb8>)
200049c8:	689a      	ldr	r2, [r3, #8]
200049ca:	693b      	ldr	r3, [r7, #16]
200049cc:	43db      	mvns	r3, r3
200049ce:	4918      	ldr	r1, [pc, #96]	; (20004a30 <HAL_EXTI_ClearConfigLine+0xb8>)
200049d0:	4013      	ands	r3, r2
200049d2:	608b      	str	r3, [r1, #8]
    EXTI->FTSR = (EXTI->FTSR & ~maskline);
200049d4:	4b16      	ldr	r3, [pc, #88]	; (20004a30 <HAL_EXTI_ClearConfigLine+0xb8>)
200049d6:	68da      	ldr	r2, [r3, #12]
200049d8:	693b      	ldr	r3, [r7, #16]
200049da:	43db      	mvns	r3, r3
200049dc:	4914      	ldr	r1, [pc, #80]	; (20004a30 <HAL_EXTI_ClearConfigLine+0xb8>)
200049de:	4013      	ands	r3, r2
200049e0:	60cb      	str	r3, [r1, #12]

    /* Get Gpio port selection for gpio lines */
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
200049e2:	687b      	ldr	r3, [r7, #4]
200049e4:	681b      	ldr	r3, [r3, #0]
200049e6:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
200049ea:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
200049ee:	d118      	bne.n	20004a22 <HAL_EXTI_ClearConfigLine+0xaa>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
200049f0:	4a10      	ldr	r2, [pc, #64]	; (20004a34 <HAL_EXTI_ClearConfigLine+0xbc>)
200049f2:	697b      	ldr	r3, [r7, #20]
200049f4:	089b      	lsrs	r3, r3, #2
200049f6:	3302      	adds	r3, #2
200049f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
200049fc:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
200049fe:	697b      	ldr	r3, [r7, #20]
20004a00:	f003 0303 	and.w	r3, r3, #3
20004a04:	009b      	lsls	r3, r3, #2
20004a06:	220f      	movs	r2, #15
20004a08:	fa02 f303 	lsl.w	r3, r2, r3
20004a0c:	43db      	mvns	r3, r3
20004a0e:	68fa      	ldr	r2, [r7, #12]
20004a10:	4013      	ands	r3, r2
20004a12:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
20004a14:	4907      	ldr	r1, [pc, #28]	; (20004a34 <HAL_EXTI_ClearConfigLine+0xbc>)
20004a16:	697b      	ldr	r3, [r7, #20]
20004a18:	089b      	lsrs	r3, r3, #2
20004a1a:	3302      	adds	r3, #2
20004a1c:	68fa      	ldr	r2, [r7, #12]
20004a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  return HAL_OK;
20004a22:	2300      	movs	r3, #0
}
20004a24:	4618      	mov	r0, r3
20004a26:	371c      	adds	r7, #28
20004a28:	46bd      	mov	sp, r7
20004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
20004a2e:	4770      	bx	lr
20004a30:	40013c00 	.word	0x40013c00
20004a34:	40013800 	.word	0x40013800

20004a38 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
20004a38:	b480      	push	{r7}
20004a3a:	b087      	sub	sp, #28
20004a3c:	af00      	add	r7, sp, #0
20004a3e:	60f8      	str	r0, [r7, #12]
20004a40:	460b      	mov	r3, r1
20004a42:	607a      	str	r2, [r7, #4]
20004a44:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
20004a46:	2300      	movs	r3, #0
20004a48:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
20004a4a:	7afb      	ldrb	r3, [r7, #11]
20004a4c:	2b00      	cmp	r3, #0
20004a4e:	d103      	bne.n	20004a58 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
20004a50:	68fb      	ldr	r3, [r7, #12]
20004a52:	687a      	ldr	r2, [r7, #4]
20004a54:	605a      	str	r2, [r3, #4]
      break;
20004a56:	e002      	b.n	20004a5e <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
20004a58:	2301      	movs	r3, #1
20004a5a:	75fb      	strb	r3, [r7, #23]
      break;
20004a5c:	bf00      	nop
  }

  return status;
20004a5e:	7dfb      	ldrb	r3, [r7, #23]
}
20004a60:	4618      	mov	r0, r3
20004a62:	371c      	adds	r7, #28
20004a64:	46bd      	mov	sp, r7
20004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
20004a6a:	4770      	bx	lr

20004a6c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
20004a6c:	b480      	push	{r7}
20004a6e:	b083      	sub	sp, #12
20004a70:	af00      	add	r7, sp, #0
20004a72:	6078      	str	r0, [r7, #4]
20004a74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
20004a76:	687b      	ldr	r3, [r7, #4]
20004a78:	2b00      	cmp	r3, #0
20004a7a:	d101      	bne.n	20004a80 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
20004a7c:	2301      	movs	r3, #1
20004a7e:	e003      	b.n	20004a88 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
20004a80:	687b      	ldr	r3, [r7, #4]
20004a82:	683a      	ldr	r2, [r7, #0]
20004a84:	601a      	str	r2, [r3, #0]

    return HAL_OK;
20004a86:	2300      	movs	r3, #0
  }
}
20004a88:	4618      	mov	r0, r3
20004a8a:	370c      	adds	r7, #12
20004a8c:	46bd      	mov	sp, r7
20004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
20004a92:	4770      	bx	lr

20004a94 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
20004a94:	b580      	push	{r7, lr}
20004a96:	b084      	sub	sp, #16
20004a98:	af00      	add	r7, sp, #0
20004a9a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
20004a9c:	687b      	ldr	r3, [r7, #4]
20004a9e:	681b      	ldr	r3, [r3, #0]
20004aa0:	f003 031f 	and.w	r3, r3, #31
20004aa4:	2201      	movs	r2, #1
20004aa6:	fa02 f303 	lsl.w	r3, r2, r3
20004aaa:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
20004aac:	4b0a      	ldr	r3, [pc, #40]	; (20004ad8 <HAL_EXTI_IRQHandler+0x44>)
20004aae:	695b      	ldr	r3, [r3, #20]
20004ab0:	68fa      	ldr	r2, [r7, #12]
20004ab2:	4013      	ands	r3, r2
20004ab4:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
20004ab6:	68bb      	ldr	r3, [r7, #8]
20004ab8:	2b00      	cmp	r3, #0
20004aba:	d009      	beq.n	20004ad0 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
20004abc:	4a06      	ldr	r2, [pc, #24]	; (20004ad8 <HAL_EXTI_IRQHandler+0x44>)
20004abe:	68fb      	ldr	r3, [r7, #12]
20004ac0:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
20004ac2:	687b      	ldr	r3, [r7, #4]
20004ac4:	685b      	ldr	r3, [r3, #4]
20004ac6:	2b00      	cmp	r3, #0
20004ac8:	d002      	beq.n	20004ad0 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
20004aca:	687b      	ldr	r3, [r7, #4]
20004acc:	685b      	ldr	r3, [r3, #4]
20004ace:	4798      	blx	r3
    }
  }
}
20004ad0:	bf00      	nop
20004ad2:	3710      	adds	r7, #16
20004ad4:	46bd      	mov	sp, r7
20004ad6:	bd80      	pop	{r7, pc}
20004ad8:	40013c00 	.word	0x40013c00

20004adc <HAL_EXTI_GetPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval 1 if interrupt is pending else 0.
  */
uint32_t HAL_EXTI_GetPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
20004adc:	b480      	push	{r7}
20004ade:	b087      	sub	sp, #28
20004ae0:	af00      	add	r7, sp, #0
20004ae2:	6078      	str	r0, [r7, #4]
20004ae4:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
20004ae6:	687b      	ldr	r3, [r7, #4]
20004ae8:	681b      	ldr	r3, [r3, #0]
20004aea:	f003 031f 	and.w	r3, r3, #31
20004aee:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
20004af0:	2201      	movs	r2, #1
20004af2:	697b      	ldr	r3, [r7, #20]
20004af4:	fa02 f303 	lsl.w	r3, r2, r3
20004af8:	613b      	str	r3, [r7, #16]

  /* return 1 if bit is set else 0 */
  regval = ((EXTI->PR & maskline) >> linepos);
20004afa:	4b07      	ldr	r3, [pc, #28]	; (20004b18 <HAL_EXTI_GetPending+0x3c>)
20004afc:	695a      	ldr	r2, [r3, #20]
20004afe:	693b      	ldr	r3, [r7, #16]
20004b00:	401a      	ands	r2, r3
20004b02:	697b      	ldr	r3, [r7, #20]
20004b04:	fa22 f303 	lsr.w	r3, r2, r3
20004b08:	60fb      	str	r3, [r7, #12]
  return regval;
20004b0a:	68fb      	ldr	r3, [r7, #12]
}
20004b0c:	4618      	mov	r0, r3
20004b0e:	371c      	adds	r7, #28
20004b10:	46bd      	mov	sp, r7
20004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
20004b16:	4770      	bx	lr
20004b18:	40013c00 	.word	0x40013c00

20004b1c <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
20004b1c:	b480      	push	{r7}
20004b1e:	b085      	sub	sp, #20
20004b20:	af00      	add	r7, sp, #0
20004b22:	6078      	str	r0, [r7, #4]
20004b24:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
20004b26:	687b      	ldr	r3, [r7, #4]
20004b28:	681b      	ldr	r3, [r3, #0]
20004b2a:	f003 031f 	and.w	r3, r3, #31
20004b2e:	2201      	movs	r2, #1
20004b30:	fa02 f303 	lsl.w	r3, r2, r3
20004b34:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
20004b36:	4a04      	ldr	r2, [pc, #16]	; (20004b48 <HAL_EXTI_ClearPending+0x2c>)
20004b38:	68fb      	ldr	r3, [r7, #12]
20004b3a:	6153      	str	r3, [r2, #20]
}
20004b3c:	bf00      	nop
20004b3e:	3714      	adds	r7, #20
20004b40:	46bd      	mov	sp, r7
20004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
20004b46:	4770      	bx	lr
20004b48:	40013c00 	.word	0x40013c00

20004b4c <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
20004b4c:	b480      	push	{r7}
20004b4e:	b085      	sub	sp, #20
20004b50:	af00      	add	r7, sp, #0
20004b52:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
20004b54:	687b      	ldr	r3, [r7, #4]
20004b56:	681b      	ldr	r3, [r3, #0]
20004b58:	f003 031f 	and.w	r3, r3, #31
20004b5c:	2201      	movs	r2, #1
20004b5e:	fa02 f303 	lsl.w	r3, r2, r3
20004b62:	60fb      	str	r3, [r7, #12]

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
20004b64:	4a04      	ldr	r2, [pc, #16]	; (20004b78 <HAL_EXTI_GenerateSWI+0x2c>)
20004b66:	68fb      	ldr	r3, [r7, #12]
20004b68:	6113      	str	r3, [r2, #16]
}
20004b6a:	bf00      	nop
20004b6c:	3714      	adds	r7, #20
20004b6e:	46bd      	mov	sp, r7
20004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
20004b74:	4770      	bx	lr
20004b76:	bf00      	nop
20004b78:	40013c00 	.word	0x40013c00

20004b7c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
20004b7c:	b580      	push	{r7, lr}
20004b7e:	b086      	sub	sp, #24
20004b80:	af00      	add	r7, sp, #0
20004b82:	60f8      	str	r0, [r7, #12]
20004b84:	60b9      	str	r1, [r7, #8]
20004b86:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
20004b8a:	2301      	movs	r3, #1
20004b8c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
20004b8e:	4b27      	ldr	r3, [pc, #156]	; (20004c2c <HAL_FLASH_Program+0xb0>)
20004b90:	7d1b      	ldrb	r3, [r3, #20]
20004b92:	2b01      	cmp	r3, #1
20004b94:	d101      	bne.n	20004b9a <HAL_FLASH_Program+0x1e>
20004b96:	2302      	movs	r3, #2
20004b98:	e043      	b.n	20004c22 <HAL_FLASH_Program+0xa6>
20004b9a:	4b24      	ldr	r3, [pc, #144]	; (20004c2c <HAL_FLASH_Program+0xb0>)
20004b9c:	2201      	movs	r2, #1
20004b9e:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20004ba0:	f24c 3050 	movw	r0, #50000	; 0xc350
20004ba4:	f000 f9e6 	bl	20004f74 <FLASH_WaitForLastOperation>
20004ba8:	4603      	mov	r3, r0
20004baa:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
20004bac:	7dfb      	ldrb	r3, [r7, #23]
20004bae:	2b00      	cmp	r3, #0
20004bb0:	d133      	bne.n	20004c1a <HAL_FLASH_Program+0x9e>
20004bb2:	68fb      	ldr	r3, [r7, #12]
20004bb4:	2b03      	cmp	r3, #3
20004bb6:	d823      	bhi.n	20004c00 <HAL_FLASH_Program+0x84>
20004bb8:	a201      	add	r2, pc, #4	; (adr r2, 20004bc0 <HAL_FLASH_Program+0x44>)
20004bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20004bbe:	bf00      	nop
20004bc0:	20004bd1 	.word	0x20004bd1
20004bc4:	20004bdd 	.word	0x20004bdd
20004bc8:	20004be9 	.word	0x20004be9
20004bcc:	20004bf5 	.word	0x20004bf5
    switch(TypeProgram)
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
20004bd0:	783b      	ldrb	r3, [r7, #0]
20004bd2:	4619      	mov	r1, r3
20004bd4:	68b8      	ldr	r0, [r7, #8]
20004bd6:	f000 fa8f 	bl	200050f8 <FLASH_Program_Byte>
        break;
20004bda:	e012      	b.n	20004c02 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
20004bdc:	883b      	ldrh	r3, [r7, #0]
20004bde:	4619      	mov	r1, r3
20004be0:	68b8      	ldr	r0, [r7, #8]
20004be2:	f000 fa63 	bl	200050ac <FLASH_Program_HalfWord>
        break;
20004be6:	e00c      	b.n	20004c02 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
20004be8:	683b      	ldr	r3, [r7, #0]
20004bea:	4619      	mov	r1, r3
20004bec:	68b8      	ldr	r0, [r7, #8]
20004bee:	f000 fa37 	bl	20005060 <FLASH_Program_Word>
        break;
20004bf2:	e006      	b.n	20004c02 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
20004bf4:	e9d7 2300 	ldrd	r2, r3, [r7]
20004bf8:	68b8      	ldr	r0, [r7, #8]
20004bfa:	f000 f9fb 	bl	20004ff4 <FLASH_Program_DoubleWord>
        break;
20004bfe:	e000      	b.n	20004c02 <HAL_FLASH_Program+0x86>
      }
      default :
        break;
20004c00:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20004c02:	f24c 3050 	movw	r0, #50000	; 0xc350
20004c06:	f000 f9b5 	bl	20004f74 <FLASH_WaitForLastOperation>
20004c0a:	4603      	mov	r3, r0
20004c0c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
20004c0e:	4b08      	ldr	r3, [pc, #32]	; (20004c30 <HAL_FLASH_Program+0xb4>)
20004c10:	691b      	ldr	r3, [r3, #16]
20004c12:	4a07      	ldr	r2, [pc, #28]	; (20004c30 <HAL_FLASH_Program+0xb4>)
20004c14:	f023 0301 	bic.w	r3, r3, #1
20004c18:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
20004c1a:	4b04      	ldr	r3, [pc, #16]	; (20004c2c <HAL_FLASH_Program+0xb0>)
20004c1c:	2200      	movs	r2, #0
20004c1e:	751a      	strb	r2, [r3, #20]

  return status;
20004c20:	7dfb      	ldrb	r3, [r7, #23]
}
20004c22:	4618      	mov	r0, r3
20004c24:	3718      	adds	r7, #24
20004c26:	46bd      	mov	sp, r7
20004c28:	bd80      	pop	{r7, pc}
20004c2a:	bf00      	nop
20004c2c:	200004f4 	.word	0x200004f4
20004c30:	40023c00 	.word	0x40023c00

20004c34 <HAL_FLASH_Program_IT>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
20004c34:	b580      	push	{r7, lr}
20004c36:	b086      	sub	sp, #24
20004c38:	af00      	add	r7, sp, #0
20004c3a:	60f8      	str	r0, [r7, #12]
20004c3c:	60b9      	str	r1, [r7, #8]
20004c3e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_OK;
20004c42:	2300      	movs	r3, #0
20004c44:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
20004c46:	4b25      	ldr	r3, [pc, #148]	; (20004cdc <HAL_FLASH_Program_IT+0xa8>)
20004c48:	7d1b      	ldrb	r3, [r3, #20]
20004c4a:	2b01      	cmp	r3, #1
20004c4c:	d101      	bne.n	20004c52 <HAL_FLASH_Program_IT+0x1e>
20004c4e:	2302      	movs	r3, #2
20004c50:	e040      	b.n	20004cd4 <HAL_FLASH_Program_IT+0xa0>
20004c52:	4b22      	ldr	r3, [pc, #136]	; (20004cdc <HAL_FLASH_Program_IT+0xa8>)
20004c54:	2201      	movs	r2, #1
20004c56:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
20004c58:	4b21      	ldr	r3, [pc, #132]	; (20004ce0 <HAL_FLASH_Program_IT+0xac>)
20004c5a:	691b      	ldr	r3, [r3, #16]
20004c5c:	4a20      	ldr	r2, [pc, #128]	; (20004ce0 <HAL_FLASH_Program_IT+0xac>)
20004c5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
20004c62:	6113      	str	r3, [r2, #16]
  
  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
20004c64:	4b1e      	ldr	r3, [pc, #120]	; (20004ce0 <HAL_FLASH_Program_IT+0xac>)
20004c66:	691b      	ldr	r3, [r3, #16]
20004c68:	4a1d      	ldr	r2, [pc, #116]	; (20004ce0 <HAL_FLASH_Program_IT+0xac>)
20004c6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
20004c6e:	6113      	str	r3, [r2, #16]
  
  /* Clear pending flags (if any) */  
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |\
20004c70:	4b1b      	ldr	r3, [pc, #108]	; (20004ce0 <HAL_FLASH_Program_IT+0xac>)
20004c72:	22f3      	movs	r2, #243	; 0xf3
20004c74:	60da      	str	r2, [r3, #12]
                         FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR| FLASH_FLAG_ERSERR);  

  pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
20004c76:	4b19      	ldr	r3, [pc, #100]	; (20004cdc <HAL_FLASH_Program_IT+0xa8>)
20004c78:	2203      	movs	r2, #3
20004c7a:	701a      	strb	r2, [r3, #0]
  pFlash.Address = Address;
20004c7c:	4a17      	ldr	r2, [pc, #92]	; (20004cdc <HAL_FLASH_Program_IT+0xa8>)
20004c7e:	68bb      	ldr	r3, [r7, #8]
20004c80:	6113      	str	r3, [r2, #16]
20004c82:	68fb      	ldr	r3, [r7, #12]
20004c84:	2b03      	cmp	r3, #3
20004c86:	d823      	bhi.n	20004cd0 <HAL_FLASH_Program_IT+0x9c>
20004c88:	a201      	add	r2, pc, #4	; (adr r2, 20004c90 <HAL_FLASH_Program_IT+0x5c>)
20004c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20004c8e:	bf00      	nop
20004c90:	20004ca1 	.word	0x20004ca1
20004c94:	20004cad 	.word	0x20004cad
20004c98:	20004cb9 	.word	0x20004cb9
20004c9c:	20004cc5 	.word	0x20004cc5
  switch(TypeProgram)
  {
    case FLASH_TYPEPROGRAM_BYTE :
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
20004ca0:	783b      	ldrb	r3, [r7, #0]
20004ca2:	4619      	mov	r1, r3
20004ca4:	68b8      	ldr	r0, [r7, #8]
20004ca6:	f000 fa27 	bl	200050f8 <FLASH_Program_Byte>
      break;
20004caa:	e012      	b.n	20004cd2 <HAL_FLASH_Program_IT+0x9e>
    }
    
    case FLASH_TYPEPROGRAM_HALFWORD :
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
20004cac:	883b      	ldrh	r3, [r7, #0]
20004cae:	4619      	mov	r1, r3
20004cb0:	68b8      	ldr	r0, [r7, #8]
20004cb2:	f000 f9fb 	bl	200050ac <FLASH_Program_HalfWord>
      break;
20004cb6:	e00c      	b.n	20004cd2 <HAL_FLASH_Program_IT+0x9e>
    }
    
    case FLASH_TYPEPROGRAM_WORD :
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
20004cb8:	683b      	ldr	r3, [r7, #0]
20004cba:	4619      	mov	r1, r3
20004cbc:	68b8      	ldr	r0, [r7, #8]
20004cbe:	f000 f9cf 	bl	20005060 <FLASH_Program_Word>
      break;
20004cc2:	e006      	b.n	20004cd2 <HAL_FLASH_Program_IT+0x9e>
    }
    
    case FLASH_TYPEPROGRAM_DOUBLEWORD :
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
20004cc4:	e9d7 2300 	ldrd	r2, r3, [r7]
20004cc8:	68b8      	ldr	r0, [r7, #8]
20004cca:	f000 f993 	bl	20004ff4 <FLASH_Program_DoubleWord>
      break;
20004cce:	e000      	b.n	20004cd2 <HAL_FLASH_Program_IT+0x9e>
    }
    default :
      break;
20004cd0:	bf00      	nop
  }
  return status;
20004cd2:	7dfb      	ldrb	r3, [r7, #23]
}
20004cd4:	4618      	mov	r0, r3
20004cd6:	3718      	adds	r7, #24
20004cd8:	46bd      	mov	sp, r7
20004cda:	bd80      	pop	{r7, pc}
20004cdc:	200004f4 	.word	0x200004f4
20004ce0:	40023c00 	.word	0x40023c00

20004ce4 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
20004ce4:	b580      	push	{r7, lr}
20004ce6:	b082      	sub	sp, #8
20004ce8:	af00      	add	r7, sp, #0
  uint32_t temp = 0;
20004cea:	2300      	movs	r3, #0
20004cec:	607b      	str	r3, [r7, #4]
  
  /* If the program operation is completed, disable the PG Bit */
  FLASH->CR &= (~FLASH_CR_PG);
20004cee:	4b56      	ldr	r3, [pc, #344]	; (20004e48 <HAL_FLASH_IRQHandler+0x164>)
20004cf0:	691b      	ldr	r3, [r3, #16]
20004cf2:	4a55      	ldr	r2, [pc, #340]	; (20004e48 <HAL_FLASH_IRQHandler+0x164>)
20004cf4:	f023 0301 	bic.w	r3, r3, #1
20004cf8:	6113      	str	r3, [r2, #16]

  /* If the erase operation is completed, disable the SER Bit */
  FLASH->CR &= (~FLASH_CR_SER);
20004cfa:	4b53      	ldr	r3, [pc, #332]	; (20004e48 <HAL_FLASH_IRQHandler+0x164>)
20004cfc:	691b      	ldr	r3, [r3, #16]
20004cfe:	4a52      	ldr	r2, [pc, #328]	; (20004e48 <HAL_FLASH_IRQHandler+0x164>)
20004d00:	f023 0302 	bic.w	r3, r3, #2
20004d04:	6113      	str	r3, [r2, #16]
  FLASH->CR &= SECTOR_MASK; 
20004d06:	4b50      	ldr	r3, [pc, #320]	; (20004e48 <HAL_FLASH_IRQHandler+0x164>)
20004d08:	691b      	ldr	r3, [r3, #16]
20004d0a:	4a4f      	ldr	r2, [pc, #316]	; (20004e48 <HAL_FLASH_IRQHandler+0x164>)
20004d0c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
20004d10:	6113      	str	r3, [r2, #16]

  /* if the erase operation is completed, disable the MER Bit */
  FLASH->CR &= (~FLASH_MER_BIT);
20004d12:	4b4d      	ldr	r3, [pc, #308]	; (20004e48 <HAL_FLASH_IRQHandler+0x164>)
20004d14:	691a      	ldr	r2, [r3, #16]
20004d16:	494c      	ldr	r1, [pc, #304]	; (20004e48 <HAL_FLASH_IRQHandler+0x164>)
20004d18:	4b4c      	ldr	r3, [pc, #304]	; (20004e4c <HAL_FLASH_IRQHandler+0x168>)
20004d1a:	4013      	ands	r3, r2
20004d1c:	610b      	str	r3, [r1, #16]

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
20004d1e:	4b4a      	ldr	r3, [pc, #296]	; (20004e48 <HAL_FLASH_IRQHandler+0x164>)
20004d20:	68db      	ldr	r3, [r3, #12]
20004d22:	f003 0301 	and.w	r3, r3, #1
20004d26:	2b00      	cmp	r3, #0
20004d28:	d048      	beq.n	20004dbc <HAL_FLASH_IRQHandler+0xd8>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
20004d2a:	4b47      	ldr	r3, [pc, #284]	; (20004e48 <HAL_FLASH_IRQHandler+0x164>)
20004d2c:	2201      	movs	r2, #1
20004d2e:	60da      	str	r2, [r3, #12]
    
    switch (pFlash.ProcedureOnGoing)
20004d30:	4b47      	ldr	r3, [pc, #284]	; (20004e50 <HAL_FLASH_IRQHandler+0x16c>)
20004d32:	781b      	ldrb	r3, [r3, #0]
20004d34:	b2db      	uxtb	r3, r3
20004d36:	2b03      	cmp	r3, #3
20004d38:	d037      	beq.n	20004daa <HAL_FLASH_IRQHandler+0xc6>
20004d3a:	2b03      	cmp	r3, #3
20004d3c:	dc40      	bgt.n	20004dc0 <HAL_FLASH_IRQHandler+0xdc>
20004d3e:	2b01      	cmp	r3, #1
20004d40:	d002      	beq.n	20004d48 <HAL_FLASH_IRQHandler+0x64>
20004d42:	2b02      	cmp	r3, #2
20004d44:	d02a      	beq.n	20004d9c <HAL_FLASH_IRQHandler+0xb8>
        /* Programming procedure is completed */
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
        break;
      }
      default :
        break;
20004d46:	e03b      	b.n	20004dc0 <HAL_FLASH_IRQHandler+0xdc>
        pFlash.NbSectorsToErase--;
20004d48:	4b41      	ldr	r3, [pc, #260]	; (20004e50 <HAL_FLASH_IRQHandler+0x16c>)
20004d4a:	685b      	ldr	r3, [r3, #4]
20004d4c:	3b01      	subs	r3, #1
20004d4e:	4a40      	ldr	r2, [pc, #256]	; (20004e50 <HAL_FLASH_IRQHandler+0x16c>)
20004d50:	6053      	str	r3, [r2, #4]
        if(pFlash.NbSectorsToErase != 0)
20004d52:	4b3f      	ldr	r3, [pc, #252]	; (20004e50 <HAL_FLASH_IRQHandler+0x16c>)
20004d54:	685b      	ldr	r3, [r3, #4]
20004d56:	2b00      	cmp	r3, #0
20004d58:	d013      	beq.n	20004d82 <HAL_FLASH_IRQHandler+0x9e>
          temp = pFlash.Sector;
20004d5a:	4b3d      	ldr	r3, [pc, #244]	; (20004e50 <HAL_FLASH_IRQHandler+0x16c>)
20004d5c:	68db      	ldr	r3, [r3, #12]
20004d5e:	607b      	str	r3, [r7, #4]
          HAL_FLASH_EndOfOperationCallback(temp);
20004d60:	6878      	ldr	r0, [r7, #4]
20004d62:	f000 f877 	bl	20004e54 <HAL_FLASH_EndOfOperationCallback>
          temp = ++pFlash.Sector;
20004d66:	4b3a      	ldr	r3, [pc, #232]	; (20004e50 <HAL_FLASH_IRQHandler+0x16c>)
20004d68:	68db      	ldr	r3, [r3, #12]
20004d6a:	3301      	adds	r3, #1
20004d6c:	4a38      	ldr	r2, [pc, #224]	; (20004e50 <HAL_FLASH_IRQHandler+0x16c>)
20004d6e:	60d3      	str	r3, [r2, #12]
20004d70:	607b      	str	r3, [r7, #4]
          FLASH_Erase_Sector(temp, pFlash.VoltageForErase);
20004d72:	4b37      	ldr	r3, [pc, #220]	; (20004e50 <HAL_FLASH_IRQHandler+0x16c>)
20004d74:	7a1b      	ldrb	r3, [r3, #8]
20004d76:	b2db      	uxtb	r3, r3
20004d78:	4619      	mov	r1, r3
20004d7a:	6878      	ldr	r0, [r7, #4]
20004d7c:	f000 fbf0 	bl	20005560 <FLASH_Erase_Sector>
        break;
20004d80:	e01f      	b.n	20004dc2 <HAL_FLASH_IRQHandler+0xde>
          pFlash.Sector = temp = 0xFFFFFFFFU;
20004d82:	f04f 33ff 	mov.w	r3, #4294967295
20004d86:	607b      	str	r3, [r7, #4]
20004d88:	4a31      	ldr	r2, [pc, #196]	; (20004e50 <HAL_FLASH_IRQHandler+0x16c>)
20004d8a:	687b      	ldr	r3, [r7, #4]
20004d8c:	60d3      	str	r3, [r2, #12]
          HAL_FLASH_EndOfOperationCallback(temp);
20004d8e:	6878      	ldr	r0, [r7, #4]
20004d90:	f000 f860 	bl	20004e54 <HAL_FLASH_EndOfOperationCallback>
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
20004d94:	4b2e      	ldr	r3, [pc, #184]	; (20004e50 <HAL_FLASH_IRQHandler+0x16c>)
20004d96:	2200      	movs	r2, #0
20004d98:	701a      	strb	r2, [r3, #0]
        break;
20004d9a:	e012      	b.n	20004dc2 <HAL_FLASH_IRQHandler+0xde>
        HAL_FLASH_EndOfOperationCallback(0);
20004d9c:	2000      	movs	r0, #0
20004d9e:	f000 f859 	bl	20004e54 <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
20004da2:	4b2b      	ldr	r3, [pc, #172]	; (20004e50 <HAL_FLASH_IRQHandler+0x16c>)
20004da4:	2200      	movs	r2, #0
20004da6:	701a      	strb	r2, [r3, #0]
        break;
20004da8:	e00b      	b.n	20004dc2 <HAL_FLASH_IRQHandler+0xde>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
20004daa:	4b29      	ldr	r3, [pc, #164]	; (20004e50 <HAL_FLASH_IRQHandler+0x16c>)
20004dac:	691b      	ldr	r3, [r3, #16]
20004dae:	4618      	mov	r0, r3
20004db0:	f000 f850 	bl	20004e54 <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
20004db4:	4b26      	ldr	r3, [pc, #152]	; (20004e50 <HAL_FLASH_IRQHandler+0x16c>)
20004db6:	2200      	movs	r2, #0
20004db8:	701a      	strb	r2, [r3, #0]
        break;
20004dba:	e002      	b.n	20004dc2 <HAL_FLASH_IRQHandler+0xde>
    }
  }
20004dbc:	bf00      	nop
20004dbe:	e000      	b.n	20004dc2 <HAL_FLASH_IRQHandler+0xde>
        break;
20004dc0:	bf00      	nop
  
  /* Check FLASH operation error flags */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
20004dc2:	4b21      	ldr	r3, [pc, #132]	; (20004e48 <HAL_FLASH_IRQHandler+0x164>)
20004dc4:	68db      	ldr	r3, [r3, #12]
20004dc6:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
20004dca:	2b00      	cmp	r3, #0
20004dcc:	d023      	beq.n	20004e16 <HAL_FLASH_IRQHandler+0x132>
  {
    switch (pFlash.ProcedureOnGoing)
20004dce:	4b20      	ldr	r3, [pc, #128]	; (20004e50 <HAL_FLASH_IRQHandler+0x16c>)
20004dd0:	781b      	ldrb	r3, [r3, #0]
20004dd2:	b2db      	uxtb	r3, r3
20004dd4:	2b03      	cmp	r3, #3
20004dd6:	d011      	beq.n	20004dfc <HAL_FLASH_IRQHandler+0x118>
20004dd8:	2b03      	cmp	r3, #3
20004dda:	dc13      	bgt.n	20004e04 <HAL_FLASH_IRQHandler+0x120>
20004ddc:	2b01      	cmp	r3, #1
20004dde:	d002      	beq.n	20004de6 <HAL_FLASH_IRQHandler+0x102>
20004de0:	2b02      	cmp	r3, #2
20004de2:	d008      	beq.n	20004df6 <HAL_FLASH_IRQHandler+0x112>
        /*return the faulty address*/
        temp = pFlash.Address;
        break;
      }
    default :
      break;
20004de4:	e00e      	b.n	20004e04 <HAL_FLASH_IRQHandler+0x120>
        temp = pFlash.Sector;
20004de6:	4b1a      	ldr	r3, [pc, #104]	; (20004e50 <HAL_FLASH_IRQHandler+0x16c>)
20004de8:	68db      	ldr	r3, [r3, #12]
20004dea:	607b      	str	r3, [r7, #4]
        pFlash.Sector = 0xFFFFFFFFU;
20004dec:	4b18      	ldr	r3, [pc, #96]	; (20004e50 <HAL_FLASH_IRQHandler+0x16c>)
20004dee:	f04f 32ff 	mov.w	r2, #4294967295
20004df2:	60da      	str	r2, [r3, #12]
        break;
20004df4:	e007      	b.n	20004e06 <HAL_FLASH_IRQHandler+0x122>
        temp = 0;
20004df6:	2300      	movs	r3, #0
20004df8:	607b      	str	r3, [r7, #4]
        break;
20004dfa:	e004      	b.n	20004e06 <HAL_FLASH_IRQHandler+0x122>
        temp = pFlash.Address;
20004dfc:	4b14      	ldr	r3, [pc, #80]	; (20004e50 <HAL_FLASH_IRQHandler+0x16c>)
20004dfe:	691b      	ldr	r3, [r3, #16]
20004e00:	607b      	str	r3, [r7, #4]
        break;
20004e02:	e000      	b.n	20004e06 <HAL_FLASH_IRQHandler+0x122>
      break;
20004e04:	bf00      	nop
    }
    /*Save the Error code*/
    FLASH_SetErrorCode();
20004e06:	f000 f99b 	bl	20005140 <FLASH_SetErrorCode>

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(temp);
20004e0a:	6878      	ldr	r0, [r7, #4]
20004e0c:	f000 f82c 	bl	20004e68 <HAL_FLASH_OperationErrorCallback>

    /*Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
20004e10:	4b0f      	ldr	r3, [pc, #60]	; (20004e50 <HAL_FLASH_IRQHandler+0x16c>)
20004e12:	2200      	movs	r2, #0
20004e14:	701a      	strb	r2, [r3, #0]
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
20004e16:	4b0e      	ldr	r3, [pc, #56]	; (20004e50 <HAL_FLASH_IRQHandler+0x16c>)
20004e18:	781b      	ldrb	r3, [r3, #0]
20004e1a:	b2db      	uxtb	r3, r3
20004e1c:	2b00      	cmp	r3, #0
20004e1e:	d10e      	bne.n	20004e3e <HAL_FLASH_IRQHandler+0x15a>
  {
    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
20004e20:	4b09      	ldr	r3, [pc, #36]	; (20004e48 <HAL_FLASH_IRQHandler+0x164>)
20004e22:	691b      	ldr	r3, [r3, #16]
20004e24:	4a08      	ldr	r2, [pc, #32]	; (20004e48 <HAL_FLASH_IRQHandler+0x164>)
20004e26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
20004e2a:	6113      	str	r3, [r2, #16]

    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
20004e2c:	4b06      	ldr	r3, [pc, #24]	; (20004e48 <HAL_FLASH_IRQHandler+0x164>)
20004e2e:	691b      	ldr	r3, [r3, #16]
20004e30:	4a05      	ldr	r2, [pc, #20]	; (20004e48 <HAL_FLASH_IRQHandler+0x164>)
20004e32:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
20004e36:	6113      	str	r3, [r2, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
20004e38:	4b05      	ldr	r3, [pc, #20]	; (20004e50 <HAL_FLASH_IRQHandler+0x16c>)
20004e3a:	2200      	movs	r2, #0
20004e3c:	751a      	strb	r2, [r3, #20]
  }
  
}
20004e3e:	bf00      	nop
20004e40:	3708      	adds	r7, #8
20004e42:	46bd      	mov	sp, r7
20004e44:	bd80      	pop	{r7, pc}
20004e46:	bf00      	nop
20004e48:	40023c00 	.word	0x40023c00
20004e4c:	ffff7ffb 	.word	0xffff7ffb
20004e50:	200004f4 	.word	0x200004f4

20004e54 <HAL_FLASH_EndOfOperationCallback>:
  *                 - Program      : Address which was selected for data program
  *                 - Mass Erase   : No return value expected
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
20004e54:	b480      	push	{r7}
20004e56:	b083      	sub	sp, #12
20004e58:	af00      	add	r7, sp, #0
20004e5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
  */ 
}
20004e5c:	bf00      	nop
20004e5e:	370c      	adds	r7, #12
20004e60:	46bd      	mov	sp, r7
20004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
20004e66:	4770      	bx	lr

20004e68 <HAL_FLASH_OperationErrorCallback>:
  *                 - Program      : Address which was selected for data program
  *                 - Mass Erase   : No return value expected
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
20004e68:	b480      	push	{r7}
20004e6a:	b083      	sub	sp, #12
20004e6c:	af00      	add	r7, sp, #0
20004e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
20004e70:	bf00      	nop
20004e72:	370c      	adds	r7, #12
20004e74:	46bd      	mov	sp, r7
20004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
20004e7a:	4770      	bx	lr

20004e7c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
20004e7c:	b480      	push	{r7}
20004e7e:	b083      	sub	sp, #12
20004e80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
20004e82:	2300      	movs	r3, #0
20004e84:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
20004e86:	4b0b      	ldr	r3, [pc, #44]	; (20004eb4 <HAL_FLASH_Unlock+0x38>)
20004e88:	691b      	ldr	r3, [r3, #16]
20004e8a:	2b00      	cmp	r3, #0
20004e8c:	da0b      	bge.n	20004ea6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
20004e8e:	4b09      	ldr	r3, [pc, #36]	; (20004eb4 <HAL_FLASH_Unlock+0x38>)
20004e90:	4a09      	ldr	r2, [pc, #36]	; (20004eb8 <HAL_FLASH_Unlock+0x3c>)
20004e92:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
20004e94:	4b07      	ldr	r3, [pc, #28]	; (20004eb4 <HAL_FLASH_Unlock+0x38>)
20004e96:	4a09      	ldr	r2, [pc, #36]	; (20004ebc <HAL_FLASH_Unlock+0x40>)
20004e98:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
20004e9a:	4b06      	ldr	r3, [pc, #24]	; (20004eb4 <HAL_FLASH_Unlock+0x38>)
20004e9c:	691b      	ldr	r3, [r3, #16]
20004e9e:	2b00      	cmp	r3, #0
20004ea0:	da01      	bge.n	20004ea6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
20004ea2:	2301      	movs	r3, #1
20004ea4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
20004ea6:	79fb      	ldrb	r3, [r7, #7]
}
20004ea8:	4618      	mov	r0, r3
20004eaa:	370c      	adds	r7, #12
20004eac:	46bd      	mov	sp, r7
20004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
20004eb2:	4770      	bx	lr
20004eb4:	40023c00 	.word	0x40023c00
20004eb8:	45670123 	.word	0x45670123
20004ebc:	cdef89ab 	.word	0xcdef89ab

20004ec0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
20004ec0:	b480      	push	{r7}
20004ec2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
20004ec4:	4b05      	ldr	r3, [pc, #20]	; (20004edc <HAL_FLASH_Lock+0x1c>)
20004ec6:	691b      	ldr	r3, [r3, #16]
20004ec8:	4a04      	ldr	r2, [pc, #16]	; (20004edc <HAL_FLASH_Lock+0x1c>)
20004eca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
20004ece:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
20004ed0:	2300      	movs	r3, #0
}
20004ed2:	4618      	mov	r0, r3
20004ed4:	46bd      	mov	sp, r7
20004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
20004eda:	4770      	bx	lr
20004edc:	40023c00 	.word	0x40023c00

20004ee0 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
20004ee0:	b480      	push	{r7}
20004ee2:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
20004ee4:	4b09      	ldr	r3, [pc, #36]	; (20004f0c <HAL_FLASH_OB_Unlock+0x2c>)
20004ee6:	695b      	ldr	r3, [r3, #20]
20004ee8:	f003 0301 	and.w	r3, r3, #1
20004eec:	2b00      	cmp	r3, #0
20004eee:	d007      	beq.n	20004f00 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
20004ef0:	4b06      	ldr	r3, [pc, #24]	; (20004f0c <HAL_FLASH_OB_Unlock+0x2c>)
20004ef2:	4a07      	ldr	r2, [pc, #28]	; (20004f10 <HAL_FLASH_OB_Unlock+0x30>)
20004ef4:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
20004ef6:	4b05      	ldr	r3, [pc, #20]	; (20004f0c <HAL_FLASH_OB_Unlock+0x2c>)
20004ef8:	4a06      	ldr	r2, [pc, #24]	; (20004f14 <HAL_FLASH_OB_Unlock+0x34>)
20004efa:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
20004efc:	2300      	movs	r3, #0
20004efe:	e000      	b.n	20004f02 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
20004f00:	2301      	movs	r3, #1
}
20004f02:	4618      	mov	r0, r3
20004f04:	46bd      	mov	sp, r7
20004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
20004f0a:	4770      	bx	lr
20004f0c:	40023c00 	.word	0x40023c00
20004f10:	08192a3b 	.word	0x08192a3b
20004f14:	4c5d6e7f 	.word	0x4c5d6e7f

20004f18 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
20004f18:	b480      	push	{r7}
20004f1a:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
20004f1c:	4b05      	ldr	r3, [pc, #20]	; (20004f34 <HAL_FLASH_OB_Lock+0x1c>)
20004f1e:	695b      	ldr	r3, [r3, #20]
20004f20:	4a04      	ldr	r2, [pc, #16]	; (20004f34 <HAL_FLASH_OB_Lock+0x1c>)
20004f22:	f043 0301 	orr.w	r3, r3, #1
20004f26:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
20004f28:	2300      	movs	r3, #0
}
20004f2a:	4618      	mov	r0, r3
20004f2c:	46bd      	mov	sp, r7
20004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
20004f32:	4770      	bx	lr
20004f34:	40023c00 	.word	0x40023c00

20004f38 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
20004f38:	b580      	push	{r7, lr}
20004f3a:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  FLASH->OPTCR |= FLASH_OPTCR_OPTSTRT;
20004f3c:	4b06      	ldr	r3, [pc, #24]	; (20004f58 <HAL_FLASH_OB_Launch+0x20>)
20004f3e:	695b      	ldr	r3, [r3, #20]
20004f40:	4a05      	ldr	r2, [pc, #20]	; (20004f58 <HAL_FLASH_OB_Launch+0x20>)
20004f42:	f043 0302 	orr.w	r3, r3, #2
20004f46:	6153      	str	r3, [r2, #20]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
20004f48:	f24c 3050 	movw	r0, #50000	; 0xc350
20004f4c:	f000 f812 	bl	20004f74 <FLASH_WaitForLastOperation>
20004f50:	4603      	mov	r3, r0
}
20004f52:	4618      	mov	r0, r3
20004f54:	bd80      	pop	{r7, pc}
20004f56:	bf00      	nop
20004f58:	40023c00 	.word	0x40023c00

20004f5c <HAL_FLASH_GetError>:
  *            @arg FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
20004f5c:	b480      	push	{r7}
20004f5e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
20004f60:	4b03      	ldr	r3, [pc, #12]	; (20004f70 <HAL_FLASH_GetError+0x14>)
20004f62:	699b      	ldr	r3, [r3, #24]
}  
20004f64:	4618      	mov	r0, r3
20004f66:	46bd      	mov	sp, r7
20004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
20004f6c:	4770      	bx	lr
20004f6e:	bf00      	nop
20004f70:	200004f4 	.word	0x200004f4

20004f74 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
20004f74:	b580      	push	{r7, lr}
20004f76:	b084      	sub	sp, #16
20004f78:	af00      	add	r7, sp, #0
20004f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
20004f7c:	2300      	movs	r3, #0
20004f7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
20004f80:	4b1a      	ldr	r3, [pc, #104]	; (20004fec <FLASH_WaitForLastOperation+0x78>)
20004f82:	2200      	movs	r2, #0
20004f84:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
20004f86:	f7fc fee7 	bl	20001d58 <HAL_GetTick>
20004f8a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
20004f8c:	e010      	b.n	20004fb0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
20004f8e:	687b      	ldr	r3, [r7, #4]
20004f90:	f1b3 3fff 	cmp.w	r3, #4294967295
20004f94:	d00c      	beq.n	20004fb0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
20004f96:	687b      	ldr	r3, [r7, #4]
20004f98:	2b00      	cmp	r3, #0
20004f9a:	d007      	beq.n	20004fac <FLASH_WaitForLastOperation+0x38>
20004f9c:	f7fc fedc 	bl	20001d58 <HAL_GetTick>
20004fa0:	4602      	mov	r2, r0
20004fa2:	68fb      	ldr	r3, [r7, #12]
20004fa4:	1ad3      	subs	r3, r2, r3
20004fa6:	687a      	ldr	r2, [r7, #4]
20004fa8:	429a      	cmp	r2, r3
20004faa:	d201      	bcs.n	20004fb0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
20004fac:	2303      	movs	r3, #3
20004fae:	e019      	b.n	20004fe4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
20004fb0:	4b0f      	ldr	r3, [pc, #60]	; (20004ff0 <FLASH_WaitForLastOperation+0x7c>)
20004fb2:	68db      	ldr	r3, [r3, #12]
20004fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20004fb8:	2b00      	cmp	r3, #0
20004fba:	d1e8      	bne.n	20004f8e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
20004fbc:	4b0c      	ldr	r3, [pc, #48]	; (20004ff0 <FLASH_WaitForLastOperation+0x7c>)
20004fbe:	68db      	ldr	r3, [r3, #12]
20004fc0:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
20004fc4:	2b00      	cmp	r3, #0
20004fc6:	d003      	beq.n	20004fd0 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
20004fc8:	f000 f8ba 	bl	20005140 <FLASH_SetErrorCode>
    return HAL_ERROR;
20004fcc:	2301      	movs	r3, #1
20004fce:	e009      	b.n	20004fe4 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
20004fd0:	4b07      	ldr	r3, [pc, #28]	; (20004ff0 <FLASH_WaitForLastOperation+0x7c>)
20004fd2:	68db      	ldr	r3, [r3, #12]
20004fd4:	f003 0301 	and.w	r3, r3, #1
20004fd8:	2b00      	cmp	r3, #0
20004fda:	d002      	beq.n	20004fe2 <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
20004fdc:	4b04      	ldr	r3, [pc, #16]	; (20004ff0 <FLASH_WaitForLastOperation+0x7c>)
20004fde:	2201      	movs	r2, #1
20004fe0:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
20004fe2:	2300      	movs	r3, #0
  
}  
20004fe4:	4618      	mov	r0, r3
20004fe6:	3710      	adds	r7, #16
20004fe8:	46bd      	mov	sp, r7
20004fea:	bd80      	pop	{r7, pc}
20004fec:	200004f4 	.word	0x200004f4
20004ff0:	40023c00 	.word	0x40023c00

20004ff4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
20004ff4:	b480      	push	{r7}
20004ff6:	b085      	sub	sp, #20
20004ff8:	af00      	add	r7, sp, #0
20004ffa:	60f8      	str	r0, [r7, #12]
20004ffc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
20005000:	4b16      	ldr	r3, [pc, #88]	; (2000505c <FLASH_Program_DoubleWord+0x68>)
20005002:	691b      	ldr	r3, [r3, #16]
20005004:	4a15      	ldr	r2, [pc, #84]	; (2000505c <FLASH_Program_DoubleWord+0x68>)
20005006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
2000500a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
2000500c:	4b13      	ldr	r3, [pc, #76]	; (2000505c <FLASH_Program_DoubleWord+0x68>)
2000500e:	691b      	ldr	r3, [r3, #16]
20005010:	4a12      	ldr	r2, [pc, #72]	; (2000505c <FLASH_Program_DoubleWord+0x68>)
20005012:	f443 7340 	orr.w	r3, r3, #768	; 0x300
20005016:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
20005018:	4b10      	ldr	r3, [pc, #64]	; (2000505c <FLASH_Program_DoubleWord+0x68>)
2000501a:	691b      	ldr	r3, [r3, #16]
2000501c:	4a0f      	ldr	r2, [pc, #60]	; (2000505c <FLASH_Program_DoubleWord+0x68>)
2000501e:	f043 0301 	orr.w	r3, r3, #1
20005022:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
20005024:	68fb      	ldr	r3, [r7, #12]
20005026:	683a      	ldr	r2, [r7, #0]
20005028:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
2000502a:	f3bf 8f6f 	isb	sy
}
2000502e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
20005030:	e9d7 0100 	ldrd	r0, r1, [r7]
20005034:	f04f 0200 	mov.w	r2, #0
20005038:	f04f 0300 	mov.w	r3, #0
2000503c:	000a      	movs	r2, r1
2000503e:	2300      	movs	r3, #0
20005040:	68f9      	ldr	r1, [r7, #12]
20005042:	3104      	adds	r1, #4
20005044:	4613      	mov	r3, r2
20005046:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
20005048:	f3bf 8f4f 	dsb	sy
}
2000504c:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
2000504e:	bf00      	nop
20005050:	3714      	adds	r7, #20
20005052:	46bd      	mov	sp, r7
20005054:	f85d 7b04 	ldr.w	r7, [sp], #4
20005058:	4770      	bx	lr
2000505a:	bf00      	nop
2000505c:	40023c00 	.word	0x40023c00

20005060 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
20005060:	b480      	push	{r7}
20005062:	b083      	sub	sp, #12
20005064:	af00      	add	r7, sp, #0
20005066:	6078      	str	r0, [r7, #4]
20005068:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
2000506a:	4b0f      	ldr	r3, [pc, #60]	; (200050a8 <FLASH_Program_Word+0x48>)
2000506c:	691b      	ldr	r3, [r3, #16]
2000506e:	4a0e      	ldr	r2, [pc, #56]	; (200050a8 <FLASH_Program_Word+0x48>)
20005070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20005074:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
20005076:	4b0c      	ldr	r3, [pc, #48]	; (200050a8 <FLASH_Program_Word+0x48>)
20005078:	691b      	ldr	r3, [r3, #16]
2000507a:	4a0b      	ldr	r2, [pc, #44]	; (200050a8 <FLASH_Program_Word+0x48>)
2000507c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
20005080:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
20005082:	4b09      	ldr	r3, [pc, #36]	; (200050a8 <FLASH_Program_Word+0x48>)
20005084:	691b      	ldr	r3, [r3, #16]
20005086:	4a08      	ldr	r2, [pc, #32]	; (200050a8 <FLASH_Program_Word+0x48>)
20005088:	f043 0301 	orr.w	r3, r3, #1
2000508c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
2000508e:	687b      	ldr	r3, [r7, #4]
20005090:	683a      	ldr	r2, [r7, #0]
20005092:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
20005094:	f3bf 8f4f 	dsb	sy
}
20005098:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
2000509a:	bf00      	nop
2000509c:	370c      	adds	r7, #12
2000509e:	46bd      	mov	sp, r7
200050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
200050a4:	4770      	bx	lr
200050a6:	bf00      	nop
200050a8:	40023c00 	.word	0x40023c00

200050ac <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
200050ac:	b480      	push	{r7}
200050ae:	b083      	sub	sp, #12
200050b0:	af00      	add	r7, sp, #0
200050b2:	6078      	str	r0, [r7, #4]
200050b4:	460b      	mov	r3, r1
200050b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
200050b8:	4b0e      	ldr	r3, [pc, #56]	; (200050f4 <FLASH_Program_HalfWord+0x48>)
200050ba:	691b      	ldr	r3, [r3, #16]
200050bc:	4a0d      	ldr	r2, [pc, #52]	; (200050f4 <FLASH_Program_HalfWord+0x48>)
200050be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
200050c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
200050c4:	4b0b      	ldr	r3, [pc, #44]	; (200050f4 <FLASH_Program_HalfWord+0x48>)
200050c6:	691b      	ldr	r3, [r3, #16]
200050c8:	4a0a      	ldr	r2, [pc, #40]	; (200050f4 <FLASH_Program_HalfWord+0x48>)
200050ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
200050ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
200050d0:	4b08      	ldr	r3, [pc, #32]	; (200050f4 <FLASH_Program_HalfWord+0x48>)
200050d2:	691b      	ldr	r3, [r3, #16]
200050d4:	4a07      	ldr	r2, [pc, #28]	; (200050f4 <FLASH_Program_HalfWord+0x48>)
200050d6:	f043 0301 	orr.w	r3, r3, #1
200050da:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
200050dc:	687b      	ldr	r3, [r7, #4]
200050de:	887a      	ldrh	r2, [r7, #2]
200050e0:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
200050e2:	f3bf 8f4f 	dsb	sy
}
200050e6:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
200050e8:	bf00      	nop
200050ea:	370c      	adds	r7, #12
200050ec:	46bd      	mov	sp, r7
200050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
200050f2:	4770      	bx	lr
200050f4:	40023c00 	.word	0x40023c00

200050f8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
200050f8:	b480      	push	{r7}
200050fa:	b083      	sub	sp, #12
200050fc:	af00      	add	r7, sp, #0
200050fe:	6078      	str	r0, [r7, #4]
20005100:	460b      	mov	r3, r1
20005102:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
20005104:	4b0d      	ldr	r3, [pc, #52]	; (2000513c <FLASH_Program_Byte+0x44>)
20005106:	691b      	ldr	r3, [r3, #16]
20005108:	4a0c      	ldr	r2, [pc, #48]	; (2000513c <FLASH_Program_Byte+0x44>)
2000510a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
2000510e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
20005110:	4b0a      	ldr	r3, [pc, #40]	; (2000513c <FLASH_Program_Byte+0x44>)
20005112:	4a0a      	ldr	r2, [pc, #40]	; (2000513c <FLASH_Program_Byte+0x44>)
20005114:	691b      	ldr	r3, [r3, #16]
20005116:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
20005118:	4b08      	ldr	r3, [pc, #32]	; (2000513c <FLASH_Program_Byte+0x44>)
2000511a:	691b      	ldr	r3, [r3, #16]
2000511c:	4a07      	ldr	r2, [pc, #28]	; (2000513c <FLASH_Program_Byte+0x44>)
2000511e:	f043 0301 	orr.w	r3, r3, #1
20005122:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
20005124:	687b      	ldr	r3, [r7, #4]
20005126:	78fa      	ldrb	r2, [r7, #3]
20005128:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
2000512a:	f3bf 8f4f 	dsb	sy
}
2000512e:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
20005130:	bf00      	nop
20005132:	370c      	adds	r7, #12
20005134:	46bd      	mov	sp, r7
20005136:	f85d 7b04 	ldr.w	r7, [sp], #4
2000513a:	4770      	bx	lr
2000513c:	40023c00 	.word	0x40023c00

20005140 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
20005140:	b480      	push	{r7}
20005142:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
20005144:	4b21      	ldr	r3, [pc, #132]	; (200051cc <FLASH_SetErrorCode+0x8c>)
20005146:	68db      	ldr	r3, [r3, #12]
20005148:	f003 0302 	and.w	r3, r3, #2
2000514c:	2b00      	cmp	r3, #0
2000514e:	d005      	beq.n	2000515c <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
20005150:	4b1f      	ldr	r3, [pc, #124]	; (200051d0 <FLASH_SetErrorCode+0x90>)
20005152:	699b      	ldr	r3, [r3, #24]
20005154:	f043 0320 	orr.w	r3, r3, #32
20005158:	4a1d      	ldr	r2, [pc, #116]	; (200051d0 <FLASH_SetErrorCode+0x90>)
2000515a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
2000515c:	4b1b      	ldr	r3, [pc, #108]	; (200051cc <FLASH_SetErrorCode+0x8c>)
2000515e:	68db      	ldr	r3, [r3, #12]
20005160:	f003 0310 	and.w	r3, r3, #16
20005164:	2b00      	cmp	r3, #0
20005166:	d005      	beq.n	20005174 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
20005168:	4b19      	ldr	r3, [pc, #100]	; (200051d0 <FLASH_SetErrorCode+0x90>)
2000516a:	699b      	ldr	r3, [r3, #24]
2000516c:	f043 0310 	orr.w	r3, r3, #16
20005170:	4a17      	ldr	r2, [pc, #92]	; (200051d0 <FLASH_SetErrorCode+0x90>)
20005172:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
20005174:	4b15      	ldr	r3, [pc, #84]	; (200051cc <FLASH_SetErrorCode+0x8c>)
20005176:	68db      	ldr	r3, [r3, #12]
20005178:	f003 0320 	and.w	r3, r3, #32
2000517c:	2b00      	cmp	r3, #0
2000517e:	d005      	beq.n	2000518c <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
20005180:	4b13      	ldr	r3, [pc, #76]	; (200051d0 <FLASH_SetErrorCode+0x90>)
20005182:	699b      	ldr	r3, [r3, #24]
20005184:	f043 0308 	orr.w	r3, r3, #8
20005188:	4a11      	ldr	r2, [pc, #68]	; (200051d0 <FLASH_SetErrorCode+0x90>)
2000518a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
2000518c:	4b0f      	ldr	r3, [pc, #60]	; (200051cc <FLASH_SetErrorCode+0x8c>)
2000518e:	68db      	ldr	r3, [r3, #12]
20005190:	f003 0340 	and.w	r3, r3, #64	; 0x40
20005194:	2b00      	cmp	r3, #0
20005196:	d005      	beq.n	200051a4 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
20005198:	4b0d      	ldr	r3, [pc, #52]	; (200051d0 <FLASH_SetErrorCode+0x90>)
2000519a:	699b      	ldr	r3, [r3, #24]
2000519c:	f043 0304 	orr.w	r3, r3, #4
200051a0:	4a0b      	ldr	r2, [pc, #44]	; (200051d0 <FLASH_SetErrorCode+0x90>)
200051a2:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
200051a4:	4b09      	ldr	r3, [pc, #36]	; (200051cc <FLASH_SetErrorCode+0x8c>)
200051a6:	68db      	ldr	r3, [r3, #12]
200051a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
200051ac:	2b00      	cmp	r3, #0
200051ae:	d005      	beq.n	200051bc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
200051b0:	4b07      	ldr	r3, [pc, #28]	; (200051d0 <FLASH_SetErrorCode+0x90>)
200051b2:	699b      	ldr	r3, [r3, #24]
200051b4:	f043 0302 	orr.w	r3, r3, #2
200051b8:	4a05      	ldr	r2, [pc, #20]	; (200051d0 <FLASH_SetErrorCode+0x90>)
200051ba:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
200051bc:	4b03      	ldr	r3, [pc, #12]	; (200051cc <FLASH_SetErrorCode+0x8c>)
200051be:	22f2      	movs	r2, #242	; 0xf2
200051c0:	60da      	str	r2, [r3, #12]
}
200051c2:	bf00      	nop
200051c4:	46bd      	mov	sp, r7
200051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
200051ca:	4770      	bx	lr
200051cc:	40023c00 	.word	0x40023c00
200051d0:	200004f4 	.word	0x200004f4

200051d4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
200051d4:	b580      	push	{r7, lr}
200051d6:	b084      	sub	sp, #16
200051d8:	af00      	add	r7, sp, #0
200051da:	6078      	str	r0, [r7, #4]
200051dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
200051de:	2301      	movs	r3, #1
200051e0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
200051e2:	2300      	movs	r3, #0
200051e4:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
200051e6:	4b30      	ldr	r3, [pc, #192]	; (200052a8 <HAL_FLASHEx_Erase+0xd4>)
200051e8:	7d1b      	ldrb	r3, [r3, #20]
200051ea:	2b01      	cmp	r3, #1
200051ec:	d101      	bne.n	200051f2 <HAL_FLASHEx_Erase+0x1e>
200051ee:	2302      	movs	r3, #2
200051f0:	e056      	b.n	200052a0 <HAL_FLASHEx_Erase+0xcc>
200051f2:	4b2d      	ldr	r3, [pc, #180]	; (200052a8 <HAL_FLASHEx_Erase+0xd4>)
200051f4:	2201      	movs	r2, #1
200051f6:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
200051f8:	f24c 3050 	movw	r0, #50000	; 0xc350
200051fc:	f7ff feba 	bl	20004f74 <FLASH_WaitForLastOperation>
20005200:	4603      	mov	r3, r0
20005202:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
20005204:	7bfb      	ldrb	r3, [r7, #15]
20005206:	2b00      	cmp	r3, #0
20005208:	d146      	bne.n	20005298 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
2000520a:	683b      	ldr	r3, [r7, #0]
2000520c:	f04f 32ff 	mov.w	r2, #4294967295
20005210:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
20005212:	687b      	ldr	r3, [r7, #4]
20005214:	681b      	ldr	r3, [r3, #0]
20005216:	2b01      	cmp	r3, #1
20005218:	d115      	bne.n	20005246 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
2000521a:	687b      	ldr	r3, [r7, #4]
2000521c:	691b      	ldr	r3, [r3, #16]
2000521e:	b2da      	uxtb	r2, r3
20005220:	687b      	ldr	r3, [r7, #4]
20005222:	685b      	ldr	r3, [r3, #4]
20005224:	4619      	mov	r1, r3
20005226:	4610      	mov	r0, r2
20005228:	f000 f95e 	bl	200054e8 <FLASH_MassErase>
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
2000522c:	f24c 3050 	movw	r0, #50000	; 0xc350
20005230:	f7ff fea0 	bl	20004f74 <FLASH_WaitForLastOperation>
20005234:	4603      	mov	r3, r0
20005236:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
20005238:	4b1c      	ldr	r3, [pc, #112]	; (200052ac <HAL_FLASHEx_Erase+0xd8>)
2000523a:	691a      	ldr	r2, [r3, #16]
2000523c:	491b      	ldr	r1, [pc, #108]	; (200052ac <HAL_FLASHEx_Erase+0xd8>)
2000523e:	4b1c      	ldr	r3, [pc, #112]	; (200052b0 <HAL_FLASHEx_Erase+0xdc>)
20005240:	4013      	ands	r3, r2
20005242:	610b      	str	r3, [r1, #16]
20005244:	e028      	b.n	20005298 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
20005246:	687b      	ldr	r3, [r7, #4]
20005248:	689b      	ldr	r3, [r3, #8]
2000524a:	60bb      	str	r3, [r7, #8]
2000524c:	e01c      	b.n	20005288 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
2000524e:	687b      	ldr	r3, [r7, #4]
20005250:	691b      	ldr	r3, [r3, #16]
20005252:	b2db      	uxtb	r3, r3
20005254:	4619      	mov	r1, r3
20005256:	68b8      	ldr	r0, [r7, #8]
20005258:	f000 f982 	bl	20005560 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
2000525c:	f24c 3050 	movw	r0, #50000	; 0xc350
20005260:	f7ff fe88 	bl	20004f74 <FLASH_WaitForLastOperation>
20005264:	4603      	mov	r3, r0
20005266:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
20005268:	4b10      	ldr	r3, [pc, #64]	; (200052ac <HAL_FLASHEx_Erase+0xd8>)
2000526a:	691b      	ldr	r3, [r3, #16]
2000526c:	4a0f      	ldr	r2, [pc, #60]	; (200052ac <HAL_FLASHEx_Erase+0xd8>)
2000526e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
20005272:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
20005274:	7bfb      	ldrb	r3, [r7, #15]
20005276:	2b00      	cmp	r3, #0
20005278:	d003      	beq.n	20005282 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
2000527a:	683b      	ldr	r3, [r7, #0]
2000527c:	68ba      	ldr	r2, [r7, #8]
2000527e:	601a      	str	r2, [r3, #0]
          break;
20005280:	e00a      	b.n	20005298 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
20005282:	68bb      	ldr	r3, [r7, #8]
20005284:	3301      	adds	r3, #1
20005286:	60bb      	str	r3, [r7, #8]
20005288:	687b      	ldr	r3, [r7, #4]
2000528a:	68da      	ldr	r2, [r3, #12]
2000528c:	687b      	ldr	r3, [r7, #4]
2000528e:	689b      	ldr	r3, [r3, #8]
20005290:	4413      	add	r3, r2
20005292:	68ba      	ldr	r2, [r7, #8]
20005294:	429a      	cmp	r2, r3
20005296:	d3da      	bcc.n	2000524e <HAL_FLASHEx_Erase+0x7a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
20005298:	4b03      	ldr	r3, [pc, #12]	; (200052a8 <HAL_FLASHEx_Erase+0xd4>)
2000529a:	2200      	movs	r2, #0
2000529c:	751a      	strb	r2, [r3, #20]

  return status;
2000529e:	7bfb      	ldrb	r3, [r7, #15]
}
200052a0:	4618      	mov	r0, r3
200052a2:	3710      	adds	r7, #16
200052a4:	46bd      	mov	sp, r7
200052a6:	bd80      	pop	{r7, pc}
200052a8:	200004f4 	.word	0x200004f4
200052ac:	40023c00 	.word	0x40023c00
200052b0:	ffff7ffb 	.word	0xffff7ffb

200052b4 <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
200052b4:	b580      	push	{r7, lr}
200052b6:	b084      	sub	sp, #16
200052b8:	af00      	add	r7, sp, #0
200052ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
200052bc:	2300      	movs	r3, #0
200052be:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
200052c0:	4b23      	ldr	r3, [pc, #140]	; (20005350 <HAL_FLASHEx_Erase_IT+0x9c>)
200052c2:	7d1b      	ldrb	r3, [r3, #20]
200052c4:	2b01      	cmp	r3, #1
200052c6:	d101      	bne.n	200052cc <HAL_FLASHEx_Erase_IT+0x18>
200052c8:	2302      	movs	r3, #2
200052ca:	e03c      	b.n	20005346 <HAL_FLASHEx_Erase_IT+0x92>
200052cc:	4b20      	ldr	r3, [pc, #128]	; (20005350 <HAL_FLASHEx_Erase_IT+0x9c>)
200052ce:	2201      	movs	r2, #1
200052d0:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
200052d2:	4b20      	ldr	r3, [pc, #128]	; (20005354 <HAL_FLASHEx_Erase_IT+0xa0>)
200052d4:	691b      	ldr	r3, [r3, #16]
200052d6:	4a1f      	ldr	r2, [pc, #124]	; (20005354 <HAL_FLASHEx_Erase_IT+0xa0>)
200052d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
200052dc:	6113      	str	r3, [r2, #16]
  
  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
200052de:	4b1d      	ldr	r3, [pc, #116]	; (20005354 <HAL_FLASHEx_Erase_IT+0xa0>)
200052e0:	691b      	ldr	r3, [r3, #16]
200052e2:	4a1c      	ldr	r2, [pc, #112]	; (20005354 <HAL_FLASHEx_Erase_IT+0xa0>)
200052e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
200052e8:	6113      	str	r3, [r2, #16]
  
  /* Clear pending flags (if any) */  
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |\
200052ea:	4b1a      	ldr	r3, [pc, #104]	; (20005354 <HAL_FLASHEx_Erase_IT+0xa0>)
200052ec:	22f3      	movs	r2, #243	; 0xf3
200052ee:	60da      	str	r2, [r3, #12]
                         FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR| FLASH_FLAG_ERSERR);  
  
  if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
200052f0:	687b      	ldr	r3, [r7, #4]
200052f2:	681b      	ldr	r3, [r3, #0]
200052f4:	2b01      	cmp	r3, #1
200052f6:	d10c      	bne.n	20005312 <HAL_FLASHEx_Erase_IT+0x5e>
  {
    /*Mass erase to be done*/
    pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
200052f8:	4b15      	ldr	r3, [pc, #84]	; (20005350 <HAL_FLASHEx_Erase_IT+0x9c>)
200052fa:	2202      	movs	r2, #2
200052fc:	701a      	strb	r2, [r3, #0]
#if defined (FLASH_OPTCR_nDBANK)    
    FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
200052fe:	687b      	ldr	r3, [r7, #4]
20005300:	691b      	ldr	r3, [r3, #16]
20005302:	b2da      	uxtb	r2, r3
20005304:	687b      	ldr	r3, [r7, #4]
20005306:	685b      	ldr	r3, [r3, #4]
20005308:	4619      	mov	r1, r3
2000530a:	4610      	mov	r0, r2
2000530c:	f000 f8ec 	bl	200054e8 <FLASH_MassErase>
20005310:	e018      	b.n	20005344 <HAL_FLASHEx_Erase_IT+0x90>
    /* Erase by sector to be done*/

    /* Check the parameters */
    assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

    pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE;
20005312:	4b0f      	ldr	r3, [pc, #60]	; (20005350 <HAL_FLASHEx_Erase_IT+0x9c>)
20005314:	2201      	movs	r2, #1
20005316:	701a      	strb	r2, [r3, #0]
    pFlash.NbSectorsToErase = pEraseInit->NbSectors;
20005318:	687b      	ldr	r3, [r7, #4]
2000531a:	68db      	ldr	r3, [r3, #12]
2000531c:	4a0c      	ldr	r2, [pc, #48]	; (20005350 <HAL_FLASHEx_Erase_IT+0x9c>)
2000531e:	6053      	str	r3, [r2, #4]
    pFlash.Sector = pEraseInit->Sector;
20005320:	687b      	ldr	r3, [r7, #4]
20005322:	689b      	ldr	r3, [r3, #8]
20005324:	4a0a      	ldr	r2, [pc, #40]	; (20005350 <HAL_FLASHEx_Erase_IT+0x9c>)
20005326:	60d3      	str	r3, [r2, #12]
    pFlash.VoltageForErase = (uint8_t)pEraseInit->VoltageRange;
20005328:	687b      	ldr	r3, [r7, #4]
2000532a:	691b      	ldr	r3, [r3, #16]
2000532c:	b2da      	uxtb	r2, r3
2000532e:	4b08      	ldr	r3, [pc, #32]	; (20005350 <HAL_FLASHEx_Erase_IT+0x9c>)
20005330:	721a      	strb	r2, [r3, #8]

    /*Erase 1st sector and wait for IT*/
    FLASH_Erase_Sector(pEraseInit->Sector, pEraseInit->VoltageRange);
20005332:	687b      	ldr	r3, [r7, #4]
20005334:	689a      	ldr	r2, [r3, #8]
20005336:	687b      	ldr	r3, [r7, #4]
20005338:	691b      	ldr	r3, [r3, #16]
2000533a:	b2db      	uxtb	r3, r3
2000533c:	4619      	mov	r1, r3
2000533e:	4610      	mov	r0, r2
20005340:	f000 f90e 	bl	20005560 <FLASH_Erase_Sector>
  }

  return status;
20005344:	7bfb      	ldrb	r3, [r7, #15]
}
20005346:	4618      	mov	r0, r3
20005348:	3710      	adds	r7, #16
2000534a:	46bd      	mov	sp, r7
2000534c:	bd80      	pop	{r7, pc}
2000534e:	bf00      	nop
20005350:	200004f4 	.word	0x200004f4
20005354:	40023c00 	.word	0x40023c00

20005358 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
20005358:	b5f0      	push	{r4, r5, r6, r7, lr}
2000535a:	b089      	sub	sp, #36	; 0x24
2000535c:	af04      	add	r7, sp, #16
2000535e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
20005360:	2301      	movs	r3, #1
20005362:	73fb      	strb	r3, [r7, #15]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
20005364:	4b49      	ldr	r3, [pc, #292]	; (2000548c <HAL_FLASHEx_OBProgram+0x134>)
20005366:	7d1b      	ldrb	r3, [r3, #20]
20005368:	2b01      	cmp	r3, #1
2000536a:	d101      	bne.n	20005370 <HAL_FLASHEx_OBProgram+0x18>
2000536c:	2302      	movs	r3, #2
2000536e:	e089      	b.n	20005484 <HAL_FLASHEx_OBProgram+0x12c>
20005370:	4b46      	ldr	r3, [pc, #280]	; (2000548c <HAL_FLASHEx_OBProgram+0x134>)
20005372:	2201      	movs	r2, #1
20005374:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
20005376:	687b      	ldr	r3, [r7, #4]
20005378:	681b      	ldr	r3, [r3, #0]
2000537a:	f003 0301 	and.w	r3, r3, #1
2000537e:	2b00      	cmp	r3, #0
20005380:	d012      	beq.n	200053a8 <HAL_FLASHEx_OBProgram+0x50>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
20005382:	687b      	ldr	r3, [r7, #4]
20005384:	685b      	ldr	r3, [r3, #4]
20005386:	2b01      	cmp	r3, #1
20005388:	d107      	bne.n	2000539a <HAL_FLASHEx_OBProgram+0x42>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector);
2000538a:	687b      	ldr	r3, [r7, #4]
2000538c:	689b      	ldr	r3, [r3, #8]
2000538e:	4618      	mov	r0, r3
20005390:	f000 f992 	bl	200056b8 <FLASH_OB_EnableWRP>
20005394:	4603      	mov	r3, r0
20005396:	73fb      	strb	r3, [r7, #15]
20005398:	e006      	b.n	200053a8 <HAL_FLASHEx_OBProgram+0x50>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector);
2000539a:	687b      	ldr	r3, [r7, #4]
2000539c:	689b      	ldr	r3, [r3, #8]
2000539e:	4618      	mov	r0, r3
200053a0:	f000 f9a8 	bl	200056f4 <FLASH_OB_DisableWRP>
200053a4:	4603      	mov	r3, r0
200053a6:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
200053a8:	687b      	ldr	r3, [r7, #4]
200053aa:	681b      	ldr	r3, [r3, #0]
200053ac:	f003 0302 	and.w	r3, r3, #2
200053b0:	2b00      	cmp	r3, #0
200053b2:	d007      	beq.n	200053c4 <HAL_FLASHEx_OBProgram+0x6c>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
200053b4:	687b      	ldr	r3, [r7, #4]
200053b6:	68db      	ldr	r3, [r3, #12]
200053b8:	b2db      	uxtb	r3, r3
200053ba:	4618      	mov	r0, r3
200053bc:	f000 f9b6 	bl	2000572c <FLASH_OB_RDP_LevelConfig>
200053c0:	4603      	mov	r3, r0
200053c2:	73fb      	strb	r3, [r7, #15]
  }

  /* USER  configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
200053c4:	687b      	ldr	r3, [r7, #4]
200053c6:	681b      	ldr	r3, [r3, #0]
200053c8:	f003 0304 	and.w	r3, r3, #4
200053cc:	2b00      	cmp	r3, #0
200053ce:	d02b      	beq.n	20005428 <HAL_FLASHEx_OBProgram+0xd0>
  {
#if defined (FLASH_OPTCR_nDBANK)
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_WWDG_SW, 
200053d0:	687b      	ldr	r3, [r7, #4]
200053d2:	695b      	ldr	r3, [r3, #20]
200053d4:	f003 0410 	and.w	r4, r3, #16
                                 pOBInit->USERConfig & OB_IWDG_SW,
200053d8:	687b      	ldr	r3, [r7, #4]
200053da:	695b      	ldr	r3, [r3, #20]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_WWDG_SW, 
200053dc:	f003 0520 	and.w	r5, r3, #32
                                 pOBInit->USERConfig & OB_STOP_NO_RST,
200053e0:	687b      	ldr	r3, [r7, #4]
200053e2:	695b      	ldr	r3, [r3, #20]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_WWDG_SW, 
200053e4:	f003 0640 	and.w	r6, r3, #64	; 0x40
                                 pOBInit->USERConfig & OB_STDBY_NO_RST, 
200053e8:	687b      	ldr	r3, [r7, #4]
200053ea:	695b      	ldr	r3, [r3, #20]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_WWDG_SW, 
200053ec:	f003 0c80 	and.w	ip, r3, #128	; 0x80
                                 pOBInit->USERConfig & OB_IWDG_STOP_ACTIVE,
200053f0:	687b      	ldr	r3, [r7, #4]
200053f2:	695b      	ldr	r3, [r3, #20]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_WWDG_SW, 
200053f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
                                 pOBInit->USERConfig & OB_IWDG_STDBY_ACTIVE,
200053f8:	687a      	ldr	r2, [r7, #4]
200053fa:	6952      	ldr	r2, [r2, #20]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_WWDG_SW, 
200053fc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
                                 pOBInit->USERConfig & OB_NDBANK_SINGLE_BANK,
20005400:	6879      	ldr	r1, [r7, #4]
20005402:	6949      	ldr	r1, [r1, #20]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_WWDG_SW, 
20005404:	f001 5100 	and.w	r1, r1, #536870912	; 0x20000000
                                 pOBInit->USERConfig & OB_DUAL_BOOT_DISABLE);
20005408:	6878      	ldr	r0, [r7, #4]
2000540a:	6940      	ldr	r0, [r0, #20]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_WWDG_SW, 
2000540c:	f000 5080 	and.w	r0, r0, #268435456	; 0x10000000
20005410:	9003      	str	r0, [sp, #12]
20005412:	9102      	str	r1, [sp, #8]
20005414:	9201      	str	r2, [sp, #4]
20005416:	9300      	str	r3, [sp, #0]
20005418:	4663      	mov	r3, ip
2000541a:	4632      	mov	r2, r6
2000541c:	4629      	mov	r1, r5
2000541e:	4620      	mov	r0, r4
20005420:	f000 f900 	bl	20005624 <FLASH_OB_UserConfig>
20005424:	4603      	mov	r3, r0
20005426:	73fb      	strb	r3, [r7, #15]
                                 pOBInit->USERConfig & OB_IWDG_STDBY_ACTIVE);    
#endif /* FLASH_OPTCR_nDBANK */
  }
  
  /* BOR Level  configuration */
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
20005428:	687b      	ldr	r3, [r7, #4]
2000542a:	681b      	ldr	r3, [r3, #0]
2000542c:	f003 0308 	and.w	r3, r3, #8
20005430:	2b00      	cmp	r3, #0
20005432:	d007      	beq.n	20005444 <HAL_FLASHEx_OBProgram+0xec>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
20005434:	687b      	ldr	r3, [r7, #4]
20005436:	691b      	ldr	r3, [r3, #16]
20005438:	b2db      	uxtb	r3, r3
2000543a:	4618      	mov	r0, r3
2000543c:	f000 f990 	bl	20005760 <FLASH_OB_BOR_LevelConfig>
20005440:	4603      	mov	r3, r0
20005442:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Boot 0 Address configuration */
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_0) == OPTIONBYTE_BOOTADDR_0)
20005444:	687b      	ldr	r3, [r7, #4]
20005446:	681b      	ldr	r3, [r3, #0]
20005448:	f003 0310 	and.w	r3, r3, #16
2000544c:	2b00      	cmp	r3, #0
2000544e:	d007      	beq.n	20005460 <HAL_FLASHEx_OBProgram+0x108>
  {
    status = FLASH_OB_BootAddressConfig(OPTIONBYTE_BOOTADDR_0, pOBInit->BootAddr0);
20005450:	687b      	ldr	r3, [r7, #4]
20005452:	699b      	ldr	r3, [r3, #24]
20005454:	4619      	mov	r1, r3
20005456:	2010      	movs	r0, #16
20005458:	f000 f998 	bl	2000578c <FLASH_OB_BootAddressConfig>
2000545c:	4603      	mov	r3, r0
2000545e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Boot 1 Address configuration */
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_1) == OPTIONBYTE_BOOTADDR_1)
20005460:	687b      	ldr	r3, [r7, #4]
20005462:	681b      	ldr	r3, [r3, #0]
20005464:	f003 0320 	and.w	r3, r3, #32
20005468:	2b00      	cmp	r3, #0
2000546a:	d007      	beq.n	2000547c <HAL_FLASHEx_OBProgram+0x124>
  {
    status = FLASH_OB_BootAddressConfig(OPTIONBYTE_BOOTADDR_1, pOBInit->BootAddr1);
2000546c:	687b      	ldr	r3, [r7, #4]
2000546e:	69db      	ldr	r3, [r3, #28]
20005470:	4619      	mov	r1, r3
20005472:	2020      	movs	r0, #32
20005474:	f000 f98a 	bl	2000578c <FLASH_OB_BootAddressConfig>
20005478:	4603      	mov	r3, r0
2000547a:	73fb      	strb	r3, [r7, #15]
    status = FLASH_OB_PCROP_RDP_Config(pOBInit->PCROPRdp);
  }
#endif /* FLASH_OPTCR2_PCROP */

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
2000547c:	4b03      	ldr	r3, [pc, #12]	; (2000548c <HAL_FLASHEx_OBProgram+0x134>)
2000547e:	2200      	movs	r2, #0
20005480:	751a      	strb	r2, [r3, #20]

  return status;
20005482:	7bfb      	ldrb	r3, [r7, #15]
}
20005484:	4618      	mov	r0, r3
20005486:	3714      	adds	r7, #20
20005488:	46bd      	mov	sp, r7
2000548a:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000548c:	200004f4 	.word	0x200004f4

20005490 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  * 
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
20005490:	b580      	push	{r7, lr}
20005492:	b082      	sub	sp, #8
20005494:	af00      	add	r7, sp, #0
20005496:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER |\
20005498:	687b      	ldr	r3, [r7, #4]
2000549a:	223f      	movs	r2, #63	; 0x3f
2000549c:	601a      	str	r2, [r3, #0]
	                OPTIONBYTE_BOR | OPTIONBYTE_BOOTADDR_0 | OPTIONBYTE_BOOTADDR_1;

  /*Get WRP*/
  pOBInit->WRPSector = FLASH_OB_GetWRP();
2000549e:	f000 f8b1 	bl	20005604 <FLASH_OB_GetWRP>
200054a2:	4602      	mov	r2, r0
200054a4:	687b      	ldr	r3, [r7, #4]
200054a6:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
200054a8:	f000 f99e 	bl	200057e8 <FLASH_OB_GetRDP>
200054ac:	4603      	mov	r3, r0
200054ae:	461a      	mov	r2, r3
200054b0:	687b      	ldr	r3, [r7, #4]
200054b2:	60da      	str	r2, [r3, #12]

  /*Get USER*/
  pOBInit->USERConfig = FLASH_OB_GetUser();
200054b4:	f000 f8f0 	bl	20005698 <FLASH_OB_GetUser>
200054b8:	4602      	mov	r2, r0
200054ba:	687b      	ldr	r3, [r7, #4]
200054bc:	615a      	str	r2, [r3, #20]

  /*Get BOR Level*/
  pOBInit->BORLevel = FLASH_OB_GetBOR();
200054be:	f000 f9b3 	bl	20005828 <FLASH_OB_GetBOR>
200054c2:	4602      	mov	r2, r0
200054c4:	687b      	ldr	r3, [r7, #4]
200054c6:	611a      	str	r2, [r3, #16]
  
  /*Get Boot Address when Boot pin = 0 */
  pOBInit->BootAddr0 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_0);
200054c8:	2010      	movs	r0, #16
200054ca:	f000 f9bb 	bl	20005844 <FLASH_OB_GetBootAddress>
200054ce:	4602      	mov	r2, r0
200054d0:	687b      	ldr	r3, [r7, #4]
200054d2:	619a      	str	r2, [r3, #24]
  
  /*Get Boot Address when Boot pin = 1 */
  pOBInit->BootAddr1 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_1);
200054d4:	2020      	movs	r0, #32
200054d6:	f000 f9b5 	bl	20005844 <FLASH_OB_GetBootAddress>
200054da:	4602      	mov	r2, r0
200054dc:	687b      	ldr	r3, [r7, #4]
200054de:	61da      	str	r2, [r3, #28]
  pOBInit->PCROPSector = FLASH_OB_GetPCROP();
  
  /*Get PCROP_RDP Value */
  pOBInit->PCROPRdp = FLASH_OB_GetPCROPRDP();
#endif /* FLASH_OPTCR2_PCROP */
}
200054e0:	bf00      	nop
200054e2:	3708      	adds	r7, #8
200054e4:	46bd      	mov	sp, r7
200054e6:	bd80      	pop	{r7, pc}

200054e8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
200054e8:	b480      	push	{r7}
200054ea:	b083      	sub	sp, #12
200054ec:	af00      	add	r7, sp, #0
200054ee:	4603      	mov	r3, r0
200054f0:	6039      	str	r1, [r7, #0]
200054f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
200054f4:	4b19      	ldr	r3, [pc, #100]	; (2000555c <FLASH_MassErase+0x74>)
200054f6:	691b      	ldr	r3, [r3, #16]
200054f8:	4a18      	ldr	r2, [pc, #96]	; (2000555c <FLASH_MassErase+0x74>)
200054fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
200054fe:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
20005500:	683b      	ldr	r3, [r7, #0]
20005502:	2b03      	cmp	r3, #3
20005504:	d107      	bne.n	20005516 <FLASH_MassErase+0x2e>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
20005506:	4b15      	ldr	r3, [pc, #84]	; (2000555c <FLASH_MassErase+0x74>)
20005508:	691a      	ldr	r2, [r3, #16]
2000550a:	4914      	ldr	r1, [pc, #80]	; (2000555c <FLASH_MassErase+0x74>)
2000550c:	f248 0304 	movw	r3, #32772	; 0x8004
20005510:	4313      	orrs	r3, r2
20005512:	610b      	str	r3, [r1, #16]
20005514:	e00f      	b.n	20005536 <FLASH_MassErase+0x4e>
  }
  else if(Banks == FLASH_BANK_2)
20005516:	683b      	ldr	r3, [r7, #0]
20005518:	2b02      	cmp	r3, #2
2000551a:	d106      	bne.n	2000552a <FLASH_MassErase+0x42>
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
2000551c:	4b0f      	ldr	r3, [pc, #60]	; (2000555c <FLASH_MassErase+0x74>)
2000551e:	691b      	ldr	r3, [r3, #16]
20005520:	4a0e      	ldr	r2, [pc, #56]	; (2000555c <FLASH_MassErase+0x74>)
20005522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
20005526:	6113      	str	r3, [r2, #16]
20005528:	e005      	b.n	20005536 <FLASH_MassErase+0x4e>
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
2000552a:	4b0c      	ldr	r3, [pc, #48]	; (2000555c <FLASH_MassErase+0x74>)
2000552c:	691b      	ldr	r3, [r3, #16]
2000552e:	4a0b      	ldr	r2, [pc, #44]	; (2000555c <FLASH_MassErase+0x74>)
20005530:	f043 0304 	orr.w	r3, r3, #4
20005534:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
20005536:	4b09      	ldr	r3, [pc, #36]	; (2000555c <FLASH_MassErase+0x74>)
20005538:	691a      	ldr	r2, [r3, #16]
2000553a:	79fb      	ldrb	r3, [r7, #7]
2000553c:	021b      	lsls	r3, r3, #8
2000553e:	4313      	orrs	r3, r2
20005540:	4a06      	ldr	r2, [pc, #24]	; (2000555c <FLASH_MassErase+0x74>)
20005542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20005546:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
20005548:	f3bf 8f4f 	dsb	sy
}
2000554c:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
2000554e:	bf00      	nop
20005550:	370c      	adds	r7, #12
20005552:	46bd      	mov	sp, r7
20005554:	f85d 7b04 	ldr.w	r7, [sp], #4
20005558:	4770      	bx	lr
2000555a:	bf00      	nop
2000555c:	40023c00 	.word	0x40023c00

20005560 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
20005560:	b480      	push	{r7}
20005562:	b085      	sub	sp, #20
20005564:	af00      	add	r7, sp, #0
20005566:	6078      	str	r0, [r7, #4]
20005568:	460b      	mov	r3, r1
2000556a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
2000556c:	2300      	movs	r3, #0
2000556e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
20005570:	78fb      	ldrb	r3, [r7, #3]
20005572:	2b00      	cmp	r3, #0
20005574:	d102      	bne.n	2000557c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
20005576:	2300      	movs	r3, #0
20005578:	60fb      	str	r3, [r7, #12]
2000557a:	e010      	b.n	2000559e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
2000557c:	78fb      	ldrb	r3, [r7, #3]
2000557e:	2b01      	cmp	r3, #1
20005580:	d103      	bne.n	2000558a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
20005582:	f44f 7380 	mov.w	r3, #256	; 0x100
20005586:	60fb      	str	r3, [r7, #12]
20005588:	e009      	b.n	2000559e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
2000558a:	78fb      	ldrb	r3, [r7, #3]
2000558c:	2b02      	cmp	r3, #2
2000558e:	d103      	bne.n	20005598 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
20005590:	f44f 7300 	mov.w	r3, #512	; 0x200
20005594:	60fb      	str	r3, [r7, #12]
20005596:	e002      	b.n	2000559e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
20005598:	f44f 7340 	mov.w	r3, #768	; 0x300
2000559c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
2000559e:	687b      	ldr	r3, [r7, #4]
200055a0:	2b0b      	cmp	r3, #11
200055a2:	d902      	bls.n	200055aa <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
200055a4:	687b      	ldr	r3, [r7, #4]
200055a6:	3304      	adds	r3, #4
200055a8:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
200055aa:	4b15      	ldr	r3, [pc, #84]	; (20005600 <FLASH_Erase_Sector+0xa0>)
200055ac:	691b      	ldr	r3, [r3, #16]
200055ae:	4a14      	ldr	r2, [pc, #80]	; (20005600 <FLASH_Erase_Sector+0xa0>)
200055b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
200055b4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
200055b6:	4b12      	ldr	r3, [pc, #72]	; (20005600 <FLASH_Erase_Sector+0xa0>)
200055b8:	691a      	ldr	r2, [r3, #16]
200055ba:	4911      	ldr	r1, [pc, #68]	; (20005600 <FLASH_Erase_Sector+0xa0>)
200055bc:	68fb      	ldr	r3, [r7, #12]
200055be:	4313      	orrs	r3, r2
200055c0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
200055c2:	4b0f      	ldr	r3, [pc, #60]	; (20005600 <FLASH_Erase_Sector+0xa0>)
200055c4:	691b      	ldr	r3, [r3, #16]
200055c6:	4a0e      	ldr	r2, [pc, #56]	; (20005600 <FLASH_Erase_Sector+0xa0>)
200055c8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
200055cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
200055ce:	4b0c      	ldr	r3, [pc, #48]	; (20005600 <FLASH_Erase_Sector+0xa0>)
200055d0:	691a      	ldr	r2, [r3, #16]
200055d2:	687b      	ldr	r3, [r7, #4]
200055d4:	00db      	lsls	r3, r3, #3
200055d6:	4313      	orrs	r3, r2
200055d8:	4a09      	ldr	r2, [pc, #36]	; (20005600 <FLASH_Erase_Sector+0xa0>)
200055da:	f043 0302 	orr.w	r3, r3, #2
200055de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
200055e0:	4b07      	ldr	r3, [pc, #28]	; (20005600 <FLASH_Erase_Sector+0xa0>)
200055e2:	691b      	ldr	r3, [r3, #16]
200055e4:	4a06      	ldr	r2, [pc, #24]	; (20005600 <FLASH_Erase_Sector+0xa0>)
200055e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
200055ea:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
200055ec:	f3bf 8f4f 	dsb	sy
}
200055f0:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
200055f2:	bf00      	nop
200055f4:	3714      	adds	r7, #20
200055f6:	46bd      	mov	sp, r7
200055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
200055fc:	4770      	bx	lr
200055fe:	bf00      	nop
20005600:	40023c00 	.word	0x40023c00

20005604 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint32_t FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
20005604:	b480      	push	{r7}
20005606:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
20005608:	4b04      	ldr	r3, [pc, #16]	; (2000561c <FLASH_OB_GetWRP+0x18>)
2000560a:	695a      	ldr	r2, [r3, #20]
2000560c:	4b04      	ldr	r3, [pc, #16]	; (20005620 <FLASH_OB_GetWRP+0x1c>)
2000560e:	4013      	ands	r3, r2
}
20005610:	4618      	mov	r0, r3
20005612:	46bd      	mov	sp, r7
20005614:	f85d 7b04 	ldr.w	r7, [sp], #4
20005618:	4770      	bx	lr
2000561a:	bf00      	nop
2000561c:	40023c00 	.word	0x40023c00
20005620:	0fff0000 	.word	0x0fff0000

20005624 <FLASH_OB_UserConfig>:

  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint32_t Wwdg, uint32_t Iwdg, uint32_t Stop, uint32_t Stdby, uint32_t Iwdgstop, \
                                             uint32_t Iwdgstdby, uint32_t NDBank, uint32_t NDBoot)
{
20005624:	b580      	push	{r7, lr}
20005626:	b088      	sub	sp, #32
20005628:	af00      	add	r7, sp, #0
2000562a:	60f8      	str	r0, [r7, #12]
2000562c:	60b9      	str	r1, [r7, #8]
2000562e:	607a      	str	r2, [r7, #4]
20005630:	603b      	str	r3, [r7, #0]
  uint32_t useroptionmask = 0x00;
20005632:	2300      	movs	r3, #0
20005634:	61fb      	str	r3, [r7, #28]
  uint32_t useroptionvalue = 0x00;
20005636:	2300      	movs	r3, #0
20005638:	61bb      	str	r3, [r7, #24]

  HAL_StatusTypeDef status = HAL_OK;
2000563a:	2300      	movs	r3, #0
2000563c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_OB_IWDG_STDBY_FREEZE(Iwdgstdby));
  assert_param(IS_OB_NDBANK(NDBank));
  assert_param(IS_OB_NDBOOT(NDBoot));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
2000563e:	f24c 3050 	movw	r0, #50000	; 0xc350
20005642:	f7ff fc97 	bl	20004f74 <FLASH_WaitForLastOperation>
20005646:	4603      	mov	r3, r0
20005648:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
2000564a:	7dfb      	ldrb	r3, [r7, #23]
2000564c:	2b00      	cmp	r3, #0
2000564e:	d11a      	bne.n	20005686 <FLASH_OB_UserConfig+0x62>
  {
    useroptionmask = (FLASH_OPTCR_WWDG_SW | FLASH_OPTCR_IWDG_SW | FLASH_OPTCR_nRST_STOP | \
20005650:	4b0f      	ldr	r3, [pc, #60]	; (20005690 <FLASH_OB_UserConfig+0x6c>)
20005652:	61fb      	str	r3, [r7, #28]
                      FLASH_OPTCR_nRST_STDBY | FLASH_OPTCR_IWDG_STOP | FLASH_OPTCR_IWDG_STDBY | \
                      FLASH_OPTCR_nDBOOT | FLASH_OPTCR_nDBANK);
                      
    useroptionvalue = (Iwdg | Wwdg | Stop | Stdby | Iwdgstop | Iwdgstdby | NDBoot | NDBank);
20005654:	68ba      	ldr	r2, [r7, #8]
20005656:	68fb      	ldr	r3, [r7, #12]
20005658:	431a      	orrs	r2, r3
2000565a:	687b      	ldr	r3, [r7, #4]
2000565c:	431a      	orrs	r2, r3
2000565e:	683b      	ldr	r3, [r7, #0]
20005660:	431a      	orrs	r2, r3
20005662:	6abb      	ldr	r3, [r7, #40]	; 0x28
20005664:	431a      	orrs	r2, r3
20005666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20005668:	431a      	orrs	r2, r3
2000566a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2000566c:	4313      	orrs	r3, r2
2000566e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20005670:	4313      	orrs	r3, r2
20005672:	61bb      	str	r3, [r7, #24]
        
    /* Update User Option Byte */               
    MODIFY_REG(FLASH->OPTCR, useroptionmask, useroptionvalue);
20005674:	4b07      	ldr	r3, [pc, #28]	; (20005694 <FLASH_OB_UserConfig+0x70>)
20005676:	695a      	ldr	r2, [r3, #20]
20005678:	69fb      	ldr	r3, [r7, #28]
2000567a:	43db      	mvns	r3, r3
2000567c:	401a      	ands	r2, r3
2000567e:	4905      	ldr	r1, [pc, #20]	; (20005694 <FLASH_OB_UserConfig+0x70>)
20005680:	69bb      	ldr	r3, [r7, #24]
20005682:	4313      	orrs	r3, r2
20005684:	614b      	str	r3, [r1, #20]
  }
  
  return status; 
20005686:	7dfb      	ldrb	r3, [r7, #23]
}
20005688:	4618      	mov	r0, r3
2000568a:	3720      	adds	r7, #32
2000568c:	46bd      	mov	sp, r7
2000568e:	bd80      	pop	{r7, pc}
20005690:	f00000f0 	.word	0xf00000f0
20005694:	40023c00 	.word	0x40023c00

20005698 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint32_t FLASH User Option Bytes values: WWDG_SW(Bit4), IWDG_SW(Bit5), nRST_STOP(Bit6), 
  *         nRST_STDBY(Bit7), nDBOOT(Bit28), nDBANK(Bit29), IWDG_STDBY(Bit30) and IWDG_STOP(Bit31).
  */
static uint32_t FLASH_OB_GetUser(void)
{
20005698:	b480      	push	{r7}
2000569a:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint32_t)(FLASH->OPTCR & 0xF00000F0U));
2000569c:	4b04      	ldr	r3, [pc, #16]	; (200056b0 <FLASH_OB_GetUser+0x18>)
2000569e:	695a      	ldr	r2, [r3, #20]
200056a0:	4b04      	ldr	r3, [pc, #16]	; (200056b4 <FLASH_OB_GetUser+0x1c>)
200056a2:	4013      	ands	r3, r2
}
200056a4:	4618      	mov	r0, r3
200056a6:	46bd      	mov	sp, r7
200056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
200056ac:	4770      	bx	lr
200056ae:	bf00      	nop
200056b0:	40023c00 	.word	0x40023c00
200056b4:	f00000f0 	.word	0xf00000f0

200056b8 <FLASH_OB_EnableWRP>:
  *            @arg OB_WRP_SECTOR_All
  *
  * @retval HAL FLASH State   
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector)
{
200056b8:	b580      	push	{r7, lr}
200056ba:	b084      	sub	sp, #16
200056bc:	af00      	add	r7, sp, #0
200056be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
200056c0:	2300      	movs	r3, #0
200056c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
200056c4:	f24c 3050 	movw	r0, #50000	; 0xc350
200056c8:	f7ff fc54 	bl	20004f74 <FLASH_WaitForLastOperation>
200056cc:	4603      	mov	r3, r0
200056ce:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
200056d0:	7bfb      	ldrb	r3, [r7, #15]
200056d2:	2b00      	cmp	r3, #0
200056d4:	d106      	bne.n	200056e4 <FLASH_OB_EnableWRP+0x2c>
  {
    /*Write protection enabled on sectors */
    FLASH->OPTCR &= (~WRPSector);  
200056d6:	4b06      	ldr	r3, [pc, #24]	; (200056f0 <FLASH_OB_EnableWRP+0x38>)
200056d8:	695a      	ldr	r2, [r3, #20]
200056da:	687b      	ldr	r3, [r7, #4]
200056dc:	43db      	mvns	r3, r3
200056de:	4904      	ldr	r1, [pc, #16]	; (200056f0 <FLASH_OB_EnableWRP+0x38>)
200056e0:	4013      	ands	r3, r2
200056e2:	614b      	str	r3, [r1, #20]
  }
  
  return status;
200056e4:	7bfb      	ldrb	r3, [r7, #15]
}
200056e6:	4618      	mov	r0, r3
200056e8:	3710      	adds	r7, #16
200056ea:	46bd      	mov	sp, r7
200056ec:	bd80      	pop	{r7, pc}
200056ee:	bf00      	nop
200056f0:	40023c00 	.word	0x40023c00

200056f4 <FLASH_OB_DisableWRP>:
  *
  *
  * @retval HAL Status   
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector)
{
200056f4:	b580      	push	{r7, lr}
200056f6:	b084      	sub	sp, #16
200056f8:	af00      	add	r7, sp, #0
200056fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
200056fc:	2300      	movs	r3, #0
200056fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20005700:	f24c 3050 	movw	r0, #50000	; 0xc350
20005704:	f7ff fc36 	bl	20004f74 <FLASH_WaitForLastOperation>
20005708:	4603      	mov	r3, r0
2000570a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
2000570c:	7bfb      	ldrb	r3, [r7, #15]
2000570e:	2b00      	cmp	r3, #0
20005710:	d105      	bne.n	2000571e <FLASH_OB_DisableWRP+0x2a>
  {
    /* Write protection disabled on sectors */
    FLASH->OPTCR |= (WRPSector); 
20005712:	4b05      	ldr	r3, [pc, #20]	; (20005728 <FLASH_OB_DisableWRP+0x34>)
20005714:	695a      	ldr	r2, [r3, #20]
20005716:	4904      	ldr	r1, [pc, #16]	; (20005728 <FLASH_OB_DisableWRP+0x34>)
20005718:	687b      	ldr	r3, [r7, #4]
2000571a:	4313      	orrs	r3, r2
2000571c:	614b      	str	r3, [r1, #20]
  }

  return status;
2000571e:	7bfb      	ldrb	r3, [r7, #15]
}
20005720:	4618      	mov	r0, r3
20005722:	3710      	adds	r7, #16
20005724:	46bd      	mov	sp, r7
20005726:	bd80      	pop	{r7, pc}
20005728:	40023c00 	.word	0x40023c00

2000572c <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
2000572c:	b580      	push	{r7, lr}
2000572e:	b084      	sub	sp, #16
20005730:	af00      	add	r7, sp, #0
20005732:	4603      	mov	r3, r0
20005734:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
20005736:	2300      	movs	r3, #0
20005738:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
2000573a:	f24c 3050 	movw	r0, #50000	; 0xc350
2000573e:	f7ff fc19 	bl	20004f74 <FLASH_WaitForLastOperation>
20005742:	4603      	mov	r3, r0
20005744:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
20005746:	7bfb      	ldrb	r3, [r7, #15]
20005748:	2b00      	cmp	r3, #0
2000574a:	d102      	bne.n	20005752 <FLASH_OB_RDP_LevelConfig+0x26>
  { 
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
2000574c:	4a03      	ldr	r2, [pc, #12]	; (2000575c <FLASH_OB_RDP_LevelConfig+0x30>)
2000574e:	79fb      	ldrb	r3, [r7, #7]
20005750:	7013      	strb	r3, [r2, #0]
  }
  
  return status;
20005752:	7bfb      	ldrb	r3, [r7, #15]
}
20005754:	4618      	mov	r0, r3
20005756:	3710      	adds	r7, #16
20005758:	46bd      	mov	sp, r7
2000575a:	bd80      	pop	{r7, pc}
2000575c:	40023c15 	.word	0x40023c15

20005760 <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
20005760:	b480      	push	{r7}
20005762:	b083      	sub	sp, #12
20005764:	af00      	add	r7, sp, #0
20005766:	4603      	mov	r3, r0
20005768:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  MODIFY_REG(FLASH->OPTCR, FLASH_OPTCR_BOR_LEV, Level);
2000576a:	4b07      	ldr	r3, [pc, #28]	; (20005788 <FLASH_OB_BOR_LevelConfig+0x28>)
2000576c:	695b      	ldr	r3, [r3, #20]
2000576e:	f023 020c 	bic.w	r2, r3, #12
20005772:	79fb      	ldrb	r3, [r7, #7]
20005774:	4904      	ldr	r1, [pc, #16]	; (20005788 <FLASH_OB_BOR_LevelConfig+0x28>)
20005776:	4313      	orrs	r3, r2
20005778:	614b      	str	r3, [r1, #20]
  
  return HAL_OK;
2000577a:	2300      	movs	r3, #0
  
}
2000577c:	4618      	mov	r0, r3
2000577e:	370c      	adds	r7, #12
20005780:	46bd      	mov	sp, r7
20005782:	f85d 7b04 	ldr.w	r7, [sp], #4
20005786:	4770      	bx	lr
20005788:	40023c00 	.word	0x40023c00

2000578c <FLASH_OB_BootAddressConfig>:
  *            @arg OB_BOOTADDR_SRAM2 : Boot from SRAM2 (0x2004C000)              
  *    
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BootAddressConfig(uint32_t BootOption, uint32_t Address)
{
2000578c:	b580      	push	{r7, lr}
2000578e:	b084      	sub	sp, #16
20005790:	af00      	add	r7, sp, #0
20005792:	6078      	str	r0, [r7, #4]
20005794:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
20005796:	2300      	movs	r3, #0
20005798:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_BOOT_ADDRESS(Address));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
2000579a:	f24c 3050 	movw	r0, #50000	; 0xc350
2000579e:	f7ff fbe9 	bl	20004f74 <FLASH_WaitForLastOperation>
200057a2:	4603      	mov	r3, r0
200057a4:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
200057a6:	7bfb      	ldrb	r3, [r7, #15]
200057a8:	2b00      	cmp	r3, #0
200057aa:	d113      	bne.n	200057d4 <FLASH_OB_BootAddressConfig+0x48>
  {
    if(BootOption == OPTIONBYTE_BOOTADDR_0)
200057ac:	687b      	ldr	r3, [r7, #4]
200057ae:	2b10      	cmp	r3, #16
200057b0:	d108      	bne.n	200057c4 <FLASH_OB_BootAddressConfig+0x38>
    {			
      MODIFY_REG(FLASH->OPTCR1, FLASH_OPTCR1_BOOT_ADD0, Address);
200057b2:	4b0b      	ldr	r3, [pc, #44]	; (200057e0 <FLASH_OB_BootAddressConfig+0x54>)
200057b4:	699a      	ldr	r2, [r3, #24]
200057b6:	4b0b      	ldr	r3, [pc, #44]	; (200057e4 <FLASH_OB_BootAddressConfig+0x58>)
200057b8:	4013      	ands	r3, r2
200057ba:	4909      	ldr	r1, [pc, #36]	; (200057e0 <FLASH_OB_BootAddressConfig+0x54>)
200057bc:	683a      	ldr	r2, [r7, #0]
200057be:	4313      	orrs	r3, r2
200057c0:	618b      	str	r3, [r1, #24]
200057c2:	e007      	b.n	200057d4 <FLASH_OB_BootAddressConfig+0x48>
    }
    else
    {
      MODIFY_REG(FLASH->OPTCR1, FLASH_OPTCR1_BOOT_ADD1, (Address << 16));
200057c4:	4b06      	ldr	r3, [pc, #24]	; (200057e0 <FLASH_OB_BootAddressConfig+0x54>)
200057c6:	699b      	ldr	r3, [r3, #24]
200057c8:	b29a      	uxth	r2, r3
200057ca:	683b      	ldr	r3, [r7, #0]
200057cc:	041b      	lsls	r3, r3, #16
200057ce:	4904      	ldr	r1, [pc, #16]	; (200057e0 <FLASH_OB_BootAddressConfig+0x54>)
200057d0:	4313      	orrs	r3, r2
200057d2:	618b      	str	r3, [r1, #24]
    }
  }
  
  return status;
200057d4:	7bfb      	ldrb	r3, [r7, #15]
}
200057d6:	4618      	mov	r0, r3
200057d8:	3710      	adds	r7, #16
200057da:	46bd      	mov	sp, r7
200057dc:	bd80      	pop	{r7, pc}
200057de:	bf00      	nop
200057e0:	40023c00 	.word	0x40023c00
200057e4:	ffff0000 	.word	0xffff0000

200057e8 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
200057e8:	b480      	push	{r7}
200057ea:	b083      	sub	sp, #12
200057ec:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
200057ee:	23aa      	movs	r3, #170	; 0xaa
200057f0:	71fb      	strb	r3, [r7, #7]
  
  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_0)
200057f2:	4b0c      	ldr	r3, [pc, #48]	; (20005824 <FLASH_OB_GetRDP+0x3c>)
200057f4:	781b      	ldrb	r3, [r3, #0]
200057f6:	b2db      	uxtb	r3, r3
200057f8:	2baa      	cmp	r3, #170	; 0xaa
200057fa:	d102      	bne.n	20005802 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_0;
200057fc:	23aa      	movs	r3, #170	; 0xaa
200057fe:	71fb      	strb	r3, [r7, #7]
20005800:	e009      	b.n	20005816 <FLASH_OB_GetRDP+0x2e>
  }
  else if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_2)
20005802:	4b08      	ldr	r3, [pc, #32]	; (20005824 <FLASH_OB_GetRDP+0x3c>)
20005804:	781b      	ldrb	r3, [r3, #0]
20005806:	b2db      	uxtb	r3, r3
20005808:	2bcc      	cmp	r3, #204	; 0xcc
2000580a:	d102      	bne.n	20005812 <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_2;
2000580c:	23cc      	movs	r3, #204	; 0xcc
2000580e:	71fb      	strb	r3, [r7, #7]
20005810:	e001      	b.n	20005816 <FLASH_OB_GetRDP+0x2e>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_1;
20005812:	2355      	movs	r3, #85	; 0x55
20005814:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
20005816:	79fb      	ldrb	r3, [r7, #7]
}
20005818:	4618      	mov	r0, r3
2000581a:	370c      	adds	r7, #12
2000581c:	46bd      	mov	sp, r7
2000581e:	f85d 7b04 	ldr.w	r7, [sp], #4
20005822:	4770      	bx	lr
20005824:	40023c15 	.word	0x40023c15

20005828 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint32_t FLASH_OB_GetBOR(void)
{
20005828:	b480      	push	{r7}
2000582a:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return ((uint32_t)(FLASH->OPTCR & 0x0C));
2000582c:	4b04      	ldr	r3, [pc, #16]	; (20005840 <FLASH_OB_GetBOR+0x18>)
2000582e:	695b      	ldr	r3, [r3, #20]
20005830:	f003 030c 	and.w	r3, r3, #12
}
20005834:	4618      	mov	r0, r3
20005836:	46bd      	mov	sp, r7
20005838:	f85d 7b04 	ldr.w	r7, [sp], #4
2000583c:	4770      	bx	lr
2000583e:	bf00      	nop
20005840:	40023c00 	.word	0x40023c00

20005844 <FLASH_OB_GetBootAddress>:
  *            - OB_BOOTADDR_DTCM_RAM : Boot from DTCM RAM (0x20000000)                 
  *            - OB_BOOTADDR_SRAM1 : Boot from SRAM1 (0x20010000)                    
  *            - OB_BOOTADDR_SRAM2 : Boot from SRAM2 (0x2004C000) 
  */
static uint32_t FLASH_OB_GetBootAddress(uint32_t BootOption)
{  
20005844:	b480      	push	{r7}
20005846:	b085      	sub	sp, #20
20005848:	af00      	add	r7, sp, #0
2000584a:	6078      	str	r0, [r7, #4]
  uint32_t Address = 0;
2000584c:	2300      	movs	r3, #0
2000584e:	60fb      	str	r3, [r7, #12]
    
	/* Return the Boot base Address */
  if(BootOption == OPTIONBYTE_BOOTADDR_0)
20005850:	687b      	ldr	r3, [r7, #4]
20005852:	2b10      	cmp	r3, #16
20005854:	d104      	bne.n	20005860 <FLASH_OB_GetBootAddress+0x1c>
  {			
    Address = FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD0;
20005856:	4b08      	ldr	r3, [pc, #32]	; (20005878 <FLASH_OB_GetBootAddress+0x34>)
20005858:	699b      	ldr	r3, [r3, #24]
2000585a:	b29b      	uxth	r3, r3
2000585c:	60fb      	str	r3, [r7, #12]
2000585e:	e004      	b.n	2000586a <FLASH_OB_GetBootAddress+0x26>
	}
  else
	{
		Address = ((FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD1) >> 16);
20005860:	4b05      	ldr	r3, [pc, #20]	; (20005878 <FLASH_OB_GetBootAddress+0x34>)
20005862:	699b      	ldr	r3, [r3, #24]
20005864:	0c1b      	lsrs	r3, r3, #16
20005866:	b29b      	uxth	r3, r3
20005868:	60fb      	str	r3, [r7, #12]
	}

  return Address;
2000586a:	68fb      	ldr	r3, [r7, #12]
}
2000586c:	4618      	mov	r0, r3
2000586e:	3714      	adds	r7, #20
20005870:	46bd      	mov	sp, r7
20005872:	f85d 7b04 	ldr.w	r7, [sp], #4
20005876:	4770      	bx	lr
20005878:	40023c00 	.word	0x40023c00

2000587c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
2000587c:	b480      	push	{r7}
2000587e:	b089      	sub	sp, #36	; 0x24
20005880:	af00      	add	r7, sp, #0
20005882:	6078      	str	r0, [r7, #4]
20005884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
20005886:	2300      	movs	r3, #0
20005888:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
2000588a:	2300      	movs	r3, #0
2000588c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
2000588e:	2300      	movs	r3, #0
20005890:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
20005892:	2300      	movs	r3, #0
20005894:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
20005896:	2300      	movs	r3, #0
20005898:	61fb      	str	r3, [r7, #28]
2000589a:	e175      	b.n	20005b88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
2000589c:	2201      	movs	r2, #1
2000589e:	69fb      	ldr	r3, [r7, #28]
200058a0:	fa02 f303 	lsl.w	r3, r2, r3
200058a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
200058a6:	683b      	ldr	r3, [r7, #0]
200058a8:	681b      	ldr	r3, [r3, #0]
200058aa:	697a      	ldr	r2, [r7, #20]
200058ac:	4013      	ands	r3, r2
200058ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
200058b0:	693a      	ldr	r2, [r7, #16]
200058b2:	697b      	ldr	r3, [r7, #20]
200058b4:	429a      	cmp	r2, r3
200058b6:	f040 8164 	bne.w	20005b82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
200058ba:	683b      	ldr	r3, [r7, #0]
200058bc:	685b      	ldr	r3, [r3, #4]
200058be:	f003 0303 	and.w	r3, r3, #3
200058c2:	2b01      	cmp	r3, #1
200058c4:	d005      	beq.n	200058d2 <HAL_GPIO_Init+0x56>
200058c6:	683b      	ldr	r3, [r7, #0]
200058c8:	685b      	ldr	r3, [r3, #4]
200058ca:	f003 0303 	and.w	r3, r3, #3
200058ce:	2b02      	cmp	r3, #2
200058d0:	d130      	bne.n	20005934 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
200058d2:	687b      	ldr	r3, [r7, #4]
200058d4:	689b      	ldr	r3, [r3, #8]
200058d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
200058d8:	69fb      	ldr	r3, [r7, #28]
200058da:	005b      	lsls	r3, r3, #1
200058dc:	2203      	movs	r2, #3
200058de:	fa02 f303 	lsl.w	r3, r2, r3
200058e2:	43db      	mvns	r3, r3
200058e4:	69ba      	ldr	r2, [r7, #24]
200058e6:	4013      	ands	r3, r2
200058e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
200058ea:	683b      	ldr	r3, [r7, #0]
200058ec:	68da      	ldr	r2, [r3, #12]
200058ee:	69fb      	ldr	r3, [r7, #28]
200058f0:	005b      	lsls	r3, r3, #1
200058f2:	fa02 f303 	lsl.w	r3, r2, r3
200058f6:	69ba      	ldr	r2, [r7, #24]
200058f8:	4313      	orrs	r3, r2
200058fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
200058fc:	687b      	ldr	r3, [r7, #4]
200058fe:	69ba      	ldr	r2, [r7, #24]
20005900:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
20005902:	687b      	ldr	r3, [r7, #4]
20005904:	685b      	ldr	r3, [r3, #4]
20005906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
20005908:	2201      	movs	r2, #1
2000590a:	69fb      	ldr	r3, [r7, #28]
2000590c:	fa02 f303 	lsl.w	r3, r2, r3
20005910:	43db      	mvns	r3, r3
20005912:	69ba      	ldr	r2, [r7, #24]
20005914:	4013      	ands	r3, r2
20005916:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
20005918:	683b      	ldr	r3, [r7, #0]
2000591a:	685b      	ldr	r3, [r3, #4]
2000591c:	091b      	lsrs	r3, r3, #4
2000591e:	f003 0201 	and.w	r2, r3, #1
20005922:	69fb      	ldr	r3, [r7, #28]
20005924:	fa02 f303 	lsl.w	r3, r2, r3
20005928:	69ba      	ldr	r2, [r7, #24]
2000592a:	4313      	orrs	r3, r2
2000592c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
2000592e:	687b      	ldr	r3, [r7, #4]
20005930:	69ba      	ldr	r2, [r7, #24]
20005932:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
20005934:	683b      	ldr	r3, [r7, #0]
20005936:	685b      	ldr	r3, [r3, #4]
20005938:	f003 0303 	and.w	r3, r3, #3
2000593c:	2b03      	cmp	r3, #3
2000593e:	d017      	beq.n	20005970 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
20005940:	687b      	ldr	r3, [r7, #4]
20005942:	68db      	ldr	r3, [r3, #12]
20005944:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
20005946:	69fb      	ldr	r3, [r7, #28]
20005948:	005b      	lsls	r3, r3, #1
2000594a:	2203      	movs	r2, #3
2000594c:	fa02 f303 	lsl.w	r3, r2, r3
20005950:	43db      	mvns	r3, r3
20005952:	69ba      	ldr	r2, [r7, #24]
20005954:	4013      	ands	r3, r2
20005956:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
20005958:	683b      	ldr	r3, [r7, #0]
2000595a:	689a      	ldr	r2, [r3, #8]
2000595c:	69fb      	ldr	r3, [r7, #28]
2000595e:	005b      	lsls	r3, r3, #1
20005960:	fa02 f303 	lsl.w	r3, r2, r3
20005964:	69ba      	ldr	r2, [r7, #24]
20005966:	4313      	orrs	r3, r2
20005968:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
2000596a:	687b      	ldr	r3, [r7, #4]
2000596c:	69ba      	ldr	r2, [r7, #24]
2000596e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
20005970:	683b      	ldr	r3, [r7, #0]
20005972:	685b      	ldr	r3, [r3, #4]
20005974:	f003 0303 	and.w	r3, r3, #3
20005978:	2b02      	cmp	r3, #2
2000597a:	d123      	bne.n	200059c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
2000597c:	69fb      	ldr	r3, [r7, #28]
2000597e:	08da      	lsrs	r2, r3, #3
20005980:	687b      	ldr	r3, [r7, #4]
20005982:	3208      	adds	r2, #8
20005984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20005988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
2000598a:	69fb      	ldr	r3, [r7, #28]
2000598c:	f003 0307 	and.w	r3, r3, #7
20005990:	009b      	lsls	r3, r3, #2
20005992:	220f      	movs	r2, #15
20005994:	fa02 f303 	lsl.w	r3, r2, r3
20005998:	43db      	mvns	r3, r3
2000599a:	69ba      	ldr	r2, [r7, #24]
2000599c:	4013      	ands	r3, r2
2000599e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
200059a0:	683b      	ldr	r3, [r7, #0]
200059a2:	691a      	ldr	r2, [r3, #16]
200059a4:	69fb      	ldr	r3, [r7, #28]
200059a6:	f003 0307 	and.w	r3, r3, #7
200059aa:	009b      	lsls	r3, r3, #2
200059ac:	fa02 f303 	lsl.w	r3, r2, r3
200059b0:	69ba      	ldr	r2, [r7, #24]
200059b2:	4313      	orrs	r3, r2
200059b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
200059b6:	69fb      	ldr	r3, [r7, #28]
200059b8:	08da      	lsrs	r2, r3, #3
200059ba:	687b      	ldr	r3, [r7, #4]
200059bc:	3208      	adds	r2, #8
200059be:	69b9      	ldr	r1, [r7, #24]
200059c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
200059c4:	687b      	ldr	r3, [r7, #4]
200059c6:	681b      	ldr	r3, [r3, #0]
200059c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
200059ca:	69fb      	ldr	r3, [r7, #28]
200059cc:	005b      	lsls	r3, r3, #1
200059ce:	2203      	movs	r2, #3
200059d0:	fa02 f303 	lsl.w	r3, r2, r3
200059d4:	43db      	mvns	r3, r3
200059d6:	69ba      	ldr	r2, [r7, #24]
200059d8:	4013      	ands	r3, r2
200059da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
200059dc:	683b      	ldr	r3, [r7, #0]
200059de:	685b      	ldr	r3, [r3, #4]
200059e0:	f003 0203 	and.w	r2, r3, #3
200059e4:	69fb      	ldr	r3, [r7, #28]
200059e6:	005b      	lsls	r3, r3, #1
200059e8:	fa02 f303 	lsl.w	r3, r2, r3
200059ec:	69ba      	ldr	r2, [r7, #24]
200059ee:	4313      	orrs	r3, r2
200059f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
200059f2:	687b      	ldr	r3, [r7, #4]
200059f4:	69ba      	ldr	r2, [r7, #24]
200059f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
200059f8:	683b      	ldr	r3, [r7, #0]
200059fa:	685b      	ldr	r3, [r3, #4]
200059fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
20005a00:	2b00      	cmp	r3, #0
20005a02:	f000 80be 	beq.w	20005b82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
20005a06:	4b66      	ldr	r3, [pc, #408]	; (20005ba0 <HAL_GPIO_Init+0x324>)
20005a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20005a0a:	4a65      	ldr	r2, [pc, #404]	; (20005ba0 <HAL_GPIO_Init+0x324>)
20005a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
20005a10:	6453      	str	r3, [r2, #68]	; 0x44
20005a12:	4b63      	ldr	r3, [pc, #396]	; (20005ba0 <HAL_GPIO_Init+0x324>)
20005a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20005a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
20005a1a:	60fb      	str	r3, [r7, #12]
20005a1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
20005a1e:	4a61      	ldr	r2, [pc, #388]	; (20005ba4 <HAL_GPIO_Init+0x328>)
20005a20:	69fb      	ldr	r3, [r7, #28]
20005a22:	089b      	lsrs	r3, r3, #2
20005a24:	3302      	adds	r3, #2
20005a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20005a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
20005a2c:	69fb      	ldr	r3, [r7, #28]
20005a2e:	f003 0303 	and.w	r3, r3, #3
20005a32:	009b      	lsls	r3, r3, #2
20005a34:	220f      	movs	r2, #15
20005a36:	fa02 f303 	lsl.w	r3, r2, r3
20005a3a:	43db      	mvns	r3, r3
20005a3c:	69ba      	ldr	r2, [r7, #24]
20005a3e:	4013      	ands	r3, r2
20005a40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
20005a42:	687b      	ldr	r3, [r7, #4]
20005a44:	4a58      	ldr	r2, [pc, #352]	; (20005ba8 <HAL_GPIO_Init+0x32c>)
20005a46:	4293      	cmp	r3, r2
20005a48:	d037      	beq.n	20005aba <HAL_GPIO_Init+0x23e>
20005a4a:	687b      	ldr	r3, [r7, #4]
20005a4c:	4a57      	ldr	r2, [pc, #348]	; (20005bac <HAL_GPIO_Init+0x330>)
20005a4e:	4293      	cmp	r3, r2
20005a50:	d031      	beq.n	20005ab6 <HAL_GPIO_Init+0x23a>
20005a52:	687b      	ldr	r3, [r7, #4]
20005a54:	4a56      	ldr	r2, [pc, #344]	; (20005bb0 <HAL_GPIO_Init+0x334>)
20005a56:	4293      	cmp	r3, r2
20005a58:	d02b      	beq.n	20005ab2 <HAL_GPIO_Init+0x236>
20005a5a:	687b      	ldr	r3, [r7, #4]
20005a5c:	4a55      	ldr	r2, [pc, #340]	; (20005bb4 <HAL_GPIO_Init+0x338>)
20005a5e:	4293      	cmp	r3, r2
20005a60:	d025      	beq.n	20005aae <HAL_GPIO_Init+0x232>
20005a62:	687b      	ldr	r3, [r7, #4]
20005a64:	4a54      	ldr	r2, [pc, #336]	; (20005bb8 <HAL_GPIO_Init+0x33c>)
20005a66:	4293      	cmp	r3, r2
20005a68:	d01f      	beq.n	20005aaa <HAL_GPIO_Init+0x22e>
20005a6a:	687b      	ldr	r3, [r7, #4]
20005a6c:	4a53      	ldr	r2, [pc, #332]	; (20005bbc <HAL_GPIO_Init+0x340>)
20005a6e:	4293      	cmp	r3, r2
20005a70:	d019      	beq.n	20005aa6 <HAL_GPIO_Init+0x22a>
20005a72:	687b      	ldr	r3, [r7, #4]
20005a74:	4a52      	ldr	r2, [pc, #328]	; (20005bc0 <HAL_GPIO_Init+0x344>)
20005a76:	4293      	cmp	r3, r2
20005a78:	d013      	beq.n	20005aa2 <HAL_GPIO_Init+0x226>
20005a7a:	687b      	ldr	r3, [r7, #4]
20005a7c:	4a51      	ldr	r2, [pc, #324]	; (20005bc4 <HAL_GPIO_Init+0x348>)
20005a7e:	4293      	cmp	r3, r2
20005a80:	d00d      	beq.n	20005a9e <HAL_GPIO_Init+0x222>
20005a82:	687b      	ldr	r3, [r7, #4]
20005a84:	4a50      	ldr	r2, [pc, #320]	; (20005bc8 <HAL_GPIO_Init+0x34c>)
20005a86:	4293      	cmp	r3, r2
20005a88:	d007      	beq.n	20005a9a <HAL_GPIO_Init+0x21e>
20005a8a:	687b      	ldr	r3, [r7, #4]
20005a8c:	4a4f      	ldr	r2, [pc, #316]	; (20005bcc <HAL_GPIO_Init+0x350>)
20005a8e:	4293      	cmp	r3, r2
20005a90:	d101      	bne.n	20005a96 <HAL_GPIO_Init+0x21a>
20005a92:	2309      	movs	r3, #9
20005a94:	e012      	b.n	20005abc <HAL_GPIO_Init+0x240>
20005a96:	230a      	movs	r3, #10
20005a98:	e010      	b.n	20005abc <HAL_GPIO_Init+0x240>
20005a9a:	2308      	movs	r3, #8
20005a9c:	e00e      	b.n	20005abc <HAL_GPIO_Init+0x240>
20005a9e:	2307      	movs	r3, #7
20005aa0:	e00c      	b.n	20005abc <HAL_GPIO_Init+0x240>
20005aa2:	2306      	movs	r3, #6
20005aa4:	e00a      	b.n	20005abc <HAL_GPIO_Init+0x240>
20005aa6:	2305      	movs	r3, #5
20005aa8:	e008      	b.n	20005abc <HAL_GPIO_Init+0x240>
20005aaa:	2304      	movs	r3, #4
20005aac:	e006      	b.n	20005abc <HAL_GPIO_Init+0x240>
20005aae:	2303      	movs	r3, #3
20005ab0:	e004      	b.n	20005abc <HAL_GPIO_Init+0x240>
20005ab2:	2302      	movs	r3, #2
20005ab4:	e002      	b.n	20005abc <HAL_GPIO_Init+0x240>
20005ab6:	2301      	movs	r3, #1
20005ab8:	e000      	b.n	20005abc <HAL_GPIO_Init+0x240>
20005aba:	2300      	movs	r3, #0
20005abc:	69fa      	ldr	r2, [r7, #28]
20005abe:	f002 0203 	and.w	r2, r2, #3
20005ac2:	0092      	lsls	r2, r2, #2
20005ac4:	4093      	lsls	r3, r2
20005ac6:	69ba      	ldr	r2, [r7, #24]
20005ac8:	4313      	orrs	r3, r2
20005aca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
20005acc:	4935      	ldr	r1, [pc, #212]	; (20005ba4 <HAL_GPIO_Init+0x328>)
20005ace:	69fb      	ldr	r3, [r7, #28]
20005ad0:	089b      	lsrs	r3, r3, #2
20005ad2:	3302      	adds	r3, #2
20005ad4:	69ba      	ldr	r2, [r7, #24]
20005ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
20005ada:	4b3d      	ldr	r3, [pc, #244]	; (20005bd0 <HAL_GPIO_Init+0x354>)
20005adc:	689b      	ldr	r3, [r3, #8]
20005ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20005ae0:	693b      	ldr	r3, [r7, #16]
20005ae2:	43db      	mvns	r3, r3
20005ae4:	69ba      	ldr	r2, [r7, #24]
20005ae6:	4013      	ands	r3, r2
20005ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
20005aea:	683b      	ldr	r3, [r7, #0]
20005aec:	685b      	ldr	r3, [r3, #4]
20005aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
20005af2:	2b00      	cmp	r3, #0
20005af4:	d003      	beq.n	20005afe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
20005af6:	69ba      	ldr	r2, [r7, #24]
20005af8:	693b      	ldr	r3, [r7, #16]
20005afa:	4313      	orrs	r3, r2
20005afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
20005afe:	4a34      	ldr	r2, [pc, #208]	; (20005bd0 <HAL_GPIO_Init+0x354>)
20005b00:	69bb      	ldr	r3, [r7, #24]
20005b02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
20005b04:	4b32      	ldr	r3, [pc, #200]	; (20005bd0 <HAL_GPIO_Init+0x354>)
20005b06:	68db      	ldr	r3, [r3, #12]
20005b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20005b0a:	693b      	ldr	r3, [r7, #16]
20005b0c:	43db      	mvns	r3, r3
20005b0e:	69ba      	ldr	r2, [r7, #24]
20005b10:	4013      	ands	r3, r2
20005b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
20005b14:	683b      	ldr	r3, [r7, #0]
20005b16:	685b      	ldr	r3, [r3, #4]
20005b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
20005b1c:	2b00      	cmp	r3, #0
20005b1e:	d003      	beq.n	20005b28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
20005b20:	69ba      	ldr	r2, [r7, #24]
20005b22:	693b      	ldr	r3, [r7, #16]
20005b24:	4313      	orrs	r3, r2
20005b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
20005b28:	4a29      	ldr	r2, [pc, #164]	; (20005bd0 <HAL_GPIO_Init+0x354>)
20005b2a:	69bb      	ldr	r3, [r7, #24]
20005b2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
20005b2e:	4b28      	ldr	r3, [pc, #160]	; (20005bd0 <HAL_GPIO_Init+0x354>)
20005b30:	685b      	ldr	r3, [r3, #4]
20005b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20005b34:	693b      	ldr	r3, [r7, #16]
20005b36:	43db      	mvns	r3, r3
20005b38:	69ba      	ldr	r2, [r7, #24]
20005b3a:	4013      	ands	r3, r2
20005b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
20005b3e:	683b      	ldr	r3, [r7, #0]
20005b40:	685b      	ldr	r3, [r3, #4]
20005b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20005b46:	2b00      	cmp	r3, #0
20005b48:	d003      	beq.n	20005b52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
20005b4a:	69ba      	ldr	r2, [r7, #24]
20005b4c:	693b      	ldr	r3, [r7, #16]
20005b4e:	4313      	orrs	r3, r2
20005b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
20005b52:	4a1f      	ldr	r2, [pc, #124]	; (20005bd0 <HAL_GPIO_Init+0x354>)
20005b54:	69bb      	ldr	r3, [r7, #24]
20005b56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
20005b58:	4b1d      	ldr	r3, [pc, #116]	; (20005bd0 <HAL_GPIO_Init+0x354>)
20005b5a:	681b      	ldr	r3, [r3, #0]
20005b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20005b5e:	693b      	ldr	r3, [r7, #16]
20005b60:	43db      	mvns	r3, r3
20005b62:	69ba      	ldr	r2, [r7, #24]
20005b64:	4013      	ands	r3, r2
20005b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
20005b68:	683b      	ldr	r3, [r7, #0]
20005b6a:	685b      	ldr	r3, [r3, #4]
20005b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20005b70:	2b00      	cmp	r3, #0
20005b72:	d003      	beq.n	20005b7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
20005b74:	69ba      	ldr	r2, [r7, #24]
20005b76:	693b      	ldr	r3, [r7, #16]
20005b78:	4313      	orrs	r3, r2
20005b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
20005b7c:	4a14      	ldr	r2, [pc, #80]	; (20005bd0 <HAL_GPIO_Init+0x354>)
20005b7e:	69bb      	ldr	r3, [r7, #24]
20005b80:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
20005b82:	69fb      	ldr	r3, [r7, #28]
20005b84:	3301      	adds	r3, #1
20005b86:	61fb      	str	r3, [r7, #28]
20005b88:	69fb      	ldr	r3, [r7, #28]
20005b8a:	2b0f      	cmp	r3, #15
20005b8c:	f67f ae86 	bls.w	2000589c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
20005b90:	bf00      	nop
20005b92:	bf00      	nop
20005b94:	3724      	adds	r7, #36	; 0x24
20005b96:	46bd      	mov	sp, r7
20005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
20005b9c:	4770      	bx	lr
20005b9e:	bf00      	nop
20005ba0:	40023800 	.word	0x40023800
20005ba4:	40013800 	.word	0x40013800
20005ba8:	40020000 	.word	0x40020000
20005bac:	40020400 	.word	0x40020400
20005bb0:	40020800 	.word	0x40020800
20005bb4:	40020c00 	.word	0x40020c00
20005bb8:	40021000 	.word	0x40021000
20005bbc:	40021400 	.word	0x40021400
20005bc0:	40021800 	.word	0x40021800
20005bc4:	40021c00 	.word	0x40021c00
20005bc8:	40022000 	.word	0x40022000
20005bcc:	40022400 	.word	0x40022400
20005bd0:	40013c00 	.word	0x40013c00

20005bd4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
20005bd4:	b480      	push	{r7}
20005bd6:	b087      	sub	sp, #28
20005bd8:	af00      	add	r7, sp, #0
20005bda:	6078      	str	r0, [r7, #4]
20005bdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
20005bde:	2300      	movs	r3, #0
20005be0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
20005be2:	2300      	movs	r3, #0
20005be4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
20005be6:	2300      	movs	r3, #0
20005be8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
20005bea:	2300      	movs	r3, #0
20005bec:	617b      	str	r3, [r7, #20]
20005bee:	e0d9      	b.n	20005da4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
20005bf0:	2201      	movs	r2, #1
20005bf2:	697b      	ldr	r3, [r7, #20]
20005bf4:	fa02 f303 	lsl.w	r3, r2, r3
20005bf8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
20005bfa:	683a      	ldr	r2, [r7, #0]
20005bfc:	693b      	ldr	r3, [r7, #16]
20005bfe:	4013      	ands	r3, r2
20005c00:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
20005c02:	68fa      	ldr	r2, [r7, #12]
20005c04:	693b      	ldr	r3, [r7, #16]
20005c06:	429a      	cmp	r2, r3
20005c08:	f040 80c9 	bne.w	20005d9e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
20005c0c:	4a6b      	ldr	r2, [pc, #428]	; (20005dbc <HAL_GPIO_DeInit+0x1e8>)
20005c0e:	697b      	ldr	r3, [r7, #20]
20005c10:	089b      	lsrs	r3, r3, #2
20005c12:	3302      	adds	r3, #2
20005c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20005c18:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
20005c1a:	697b      	ldr	r3, [r7, #20]
20005c1c:	f003 0303 	and.w	r3, r3, #3
20005c20:	009b      	lsls	r3, r3, #2
20005c22:	220f      	movs	r2, #15
20005c24:	fa02 f303 	lsl.w	r3, r2, r3
20005c28:	68ba      	ldr	r2, [r7, #8]
20005c2a:	4013      	ands	r3, r2
20005c2c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
20005c2e:	687b      	ldr	r3, [r7, #4]
20005c30:	4a63      	ldr	r2, [pc, #396]	; (20005dc0 <HAL_GPIO_DeInit+0x1ec>)
20005c32:	4293      	cmp	r3, r2
20005c34:	d037      	beq.n	20005ca6 <HAL_GPIO_DeInit+0xd2>
20005c36:	687b      	ldr	r3, [r7, #4]
20005c38:	4a62      	ldr	r2, [pc, #392]	; (20005dc4 <HAL_GPIO_DeInit+0x1f0>)
20005c3a:	4293      	cmp	r3, r2
20005c3c:	d031      	beq.n	20005ca2 <HAL_GPIO_DeInit+0xce>
20005c3e:	687b      	ldr	r3, [r7, #4]
20005c40:	4a61      	ldr	r2, [pc, #388]	; (20005dc8 <HAL_GPIO_DeInit+0x1f4>)
20005c42:	4293      	cmp	r3, r2
20005c44:	d02b      	beq.n	20005c9e <HAL_GPIO_DeInit+0xca>
20005c46:	687b      	ldr	r3, [r7, #4]
20005c48:	4a60      	ldr	r2, [pc, #384]	; (20005dcc <HAL_GPIO_DeInit+0x1f8>)
20005c4a:	4293      	cmp	r3, r2
20005c4c:	d025      	beq.n	20005c9a <HAL_GPIO_DeInit+0xc6>
20005c4e:	687b      	ldr	r3, [r7, #4]
20005c50:	4a5f      	ldr	r2, [pc, #380]	; (20005dd0 <HAL_GPIO_DeInit+0x1fc>)
20005c52:	4293      	cmp	r3, r2
20005c54:	d01f      	beq.n	20005c96 <HAL_GPIO_DeInit+0xc2>
20005c56:	687b      	ldr	r3, [r7, #4]
20005c58:	4a5e      	ldr	r2, [pc, #376]	; (20005dd4 <HAL_GPIO_DeInit+0x200>)
20005c5a:	4293      	cmp	r3, r2
20005c5c:	d019      	beq.n	20005c92 <HAL_GPIO_DeInit+0xbe>
20005c5e:	687b      	ldr	r3, [r7, #4]
20005c60:	4a5d      	ldr	r2, [pc, #372]	; (20005dd8 <HAL_GPIO_DeInit+0x204>)
20005c62:	4293      	cmp	r3, r2
20005c64:	d013      	beq.n	20005c8e <HAL_GPIO_DeInit+0xba>
20005c66:	687b      	ldr	r3, [r7, #4]
20005c68:	4a5c      	ldr	r2, [pc, #368]	; (20005ddc <HAL_GPIO_DeInit+0x208>)
20005c6a:	4293      	cmp	r3, r2
20005c6c:	d00d      	beq.n	20005c8a <HAL_GPIO_DeInit+0xb6>
20005c6e:	687b      	ldr	r3, [r7, #4]
20005c70:	4a5b      	ldr	r2, [pc, #364]	; (20005de0 <HAL_GPIO_DeInit+0x20c>)
20005c72:	4293      	cmp	r3, r2
20005c74:	d007      	beq.n	20005c86 <HAL_GPIO_DeInit+0xb2>
20005c76:	687b      	ldr	r3, [r7, #4]
20005c78:	4a5a      	ldr	r2, [pc, #360]	; (20005de4 <HAL_GPIO_DeInit+0x210>)
20005c7a:	4293      	cmp	r3, r2
20005c7c:	d101      	bne.n	20005c82 <HAL_GPIO_DeInit+0xae>
20005c7e:	2309      	movs	r3, #9
20005c80:	e012      	b.n	20005ca8 <HAL_GPIO_DeInit+0xd4>
20005c82:	230a      	movs	r3, #10
20005c84:	e010      	b.n	20005ca8 <HAL_GPIO_DeInit+0xd4>
20005c86:	2308      	movs	r3, #8
20005c88:	e00e      	b.n	20005ca8 <HAL_GPIO_DeInit+0xd4>
20005c8a:	2307      	movs	r3, #7
20005c8c:	e00c      	b.n	20005ca8 <HAL_GPIO_DeInit+0xd4>
20005c8e:	2306      	movs	r3, #6
20005c90:	e00a      	b.n	20005ca8 <HAL_GPIO_DeInit+0xd4>
20005c92:	2305      	movs	r3, #5
20005c94:	e008      	b.n	20005ca8 <HAL_GPIO_DeInit+0xd4>
20005c96:	2304      	movs	r3, #4
20005c98:	e006      	b.n	20005ca8 <HAL_GPIO_DeInit+0xd4>
20005c9a:	2303      	movs	r3, #3
20005c9c:	e004      	b.n	20005ca8 <HAL_GPIO_DeInit+0xd4>
20005c9e:	2302      	movs	r3, #2
20005ca0:	e002      	b.n	20005ca8 <HAL_GPIO_DeInit+0xd4>
20005ca2:	2301      	movs	r3, #1
20005ca4:	e000      	b.n	20005ca8 <HAL_GPIO_DeInit+0xd4>
20005ca6:	2300      	movs	r3, #0
20005ca8:	697a      	ldr	r2, [r7, #20]
20005caa:	f002 0203 	and.w	r2, r2, #3
20005cae:	0092      	lsls	r2, r2, #2
20005cb0:	4093      	lsls	r3, r2
20005cb2:	68ba      	ldr	r2, [r7, #8]
20005cb4:	429a      	cmp	r2, r3
20005cb6:	d132      	bne.n	20005d1e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
20005cb8:	4b4b      	ldr	r3, [pc, #300]	; (20005de8 <HAL_GPIO_DeInit+0x214>)
20005cba:	681a      	ldr	r2, [r3, #0]
20005cbc:	68fb      	ldr	r3, [r7, #12]
20005cbe:	43db      	mvns	r3, r3
20005cc0:	4949      	ldr	r1, [pc, #292]	; (20005de8 <HAL_GPIO_DeInit+0x214>)
20005cc2:	4013      	ands	r3, r2
20005cc4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
20005cc6:	4b48      	ldr	r3, [pc, #288]	; (20005de8 <HAL_GPIO_DeInit+0x214>)
20005cc8:	685a      	ldr	r2, [r3, #4]
20005cca:	68fb      	ldr	r3, [r7, #12]
20005ccc:	43db      	mvns	r3, r3
20005cce:	4946      	ldr	r1, [pc, #280]	; (20005de8 <HAL_GPIO_DeInit+0x214>)
20005cd0:	4013      	ands	r3, r2
20005cd2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
20005cd4:	4b44      	ldr	r3, [pc, #272]	; (20005de8 <HAL_GPIO_DeInit+0x214>)
20005cd6:	68da      	ldr	r2, [r3, #12]
20005cd8:	68fb      	ldr	r3, [r7, #12]
20005cda:	43db      	mvns	r3, r3
20005cdc:	4942      	ldr	r1, [pc, #264]	; (20005de8 <HAL_GPIO_DeInit+0x214>)
20005cde:	4013      	ands	r3, r2
20005ce0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
20005ce2:	4b41      	ldr	r3, [pc, #260]	; (20005de8 <HAL_GPIO_DeInit+0x214>)
20005ce4:	689a      	ldr	r2, [r3, #8]
20005ce6:	68fb      	ldr	r3, [r7, #12]
20005ce8:	43db      	mvns	r3, r3
20005cea:	493f      	ldr	r1, [pc, #252]	; (20005de8 <HAL_GPIO_DeInit+0x214>)
20005cec:	4013      	ands	r3, r2
20005cee:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
20005cf0:	697b      	ldr	r3, [r7, #20]
20005cf2:	f003 0303 	and.w	r3, r3, #3
20005cf6:	009b      	lsls	r3, r3, #2
20005cf8:	220f      	movs	r2, #15
20005cfa:	fa02 f303 	lsl.w	r3, r2, r3
20005cfe:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
20005d00:	4a2e      	ldr	r2, [pc, #184]	; (20005dbc <HAL_GPIO_DeInit+0x1e8>)
20005d02:	697b      	ldr	r3, [r7, #20]
20005d04:	089b      	lsrs	r3, r3, #2
20005d06:	3302      	adds	r3, #2
20005d08:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
20005d0c:	68bb      	ldr	r3, [r7, #8]
20005d0e:	43da      	mvns	r2, r3
20005d10:	482a      	ldr	r0, [pc, #168]	; (20005dbc <HAL_GPIO_DeInit+0x1e8>)
20005d12:	697b      	ldr	r3, [r7, #20]
20005d14:	089b      	lsrs	r3, r3, #2
20005d16:	400a      	ands	r2, r1
20005d18:	3302      	adds	r3, #2
20005d1a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
20005d1e:	687b      	ldr	r3, [r7, #4]
20005d20:	681a      	ldr	r2, [r3, #0]
20005d22:	697b      	ldr	r3, [r7, #20]
20005d24:	005b      	lsls	r3, r3, #1
20005d26:	2103      	movs	r1, #3
20005d28:	fa01 f303 	lsl.w	r3, r1, r3
20005d2c:	43db      	mvns	r3, r3
20005d2e:	401a      	ands	r2, r3
20005d30:	687b      	ldr	r3, [r7, #4]
20005d32:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
20005d34:	697b      	ldr	r3, [r7, #20]
20005d36:	08da      	lsrs	r2, r3, #3
20005d38:	687b      	ldr	r3, [r7, #4]
20005d3a:	3208      	adds	r2, #8
20005d3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
20005d40:	697b      	ldr	r3, [r7, #20]
20005d42:	f003 0307 	and.w	r3, r3, #7
20005d46:	009b      	lsls	r3, r3, #2
20005d48:	220f      	movs	r2, #15
20005d4a:	fa02 f303 	lsl.w	r3, r2, r3
20005d4e:	43db      	mvns	r3, r3
20005d50:	697a      	ldr	r2, [r7, #20]
20005d52:	08d2      	lsrs	r2, r2, #3
20005d54:	4019      	ands	r1, r3
20005d56:	687b      	ldr	r3, [r7, #4]
20005d58:	3208      	adds	r2, #8
20005d5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
20005d5e:	687b      	ldr	r3, [r7, #4]
20005d60:	68da      	ldr	r2, [r3, #12]
20005d62:	697b      	ldr	r3, [r7, #20]
20005d64:	005b      	lsls	r3, r3, #1
20005d66:	2103      	movs	r1, #3
20005d68:	fa01 f303 	lsl.w	r3, r1, r3
20005d6c:	43db      	mvns	r3, r3
20005d6e:	401a      	ands	r2, r3
20005d70:	687b      	ldr	r3, [r7, #4]
20005d72:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
20005d74:	687b      	ldr	r3, [r7, #4]
20005d76:	685a      	ldr	r2, [r3, #4]
20005d78:	2101      	movs	r1, #1
20005d7a:	697b      	ldr	r3, [r7, #20]
20005d7c:	fa01 f303 	lsl.w	r3, r1, r3
20005d80:	43db      	mvns	r3, r3
20005d82:	401a      	ands	r2, r3
20005d84:	687b      	ldr	r3, [r7, #4]
20005d86:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
20005d88:	687b      	ldr	r3, [r7, #4]
20005d8a:	689a      	ldr	r2, [r3, #8]
20005d8c:	697b      	ldr	r3, [r7, #20]
20005d8e:	005b      	lsls	r3, r3, #1
20005d90:	2103      	movs	r1, #3
20005d92:	fa01 f303 	lsl.w	r3, r1, r3
20005d96:	43db      	mvns	r3, r3
20005d98:	401a      	ands	r2, r3
20005d9a:	687b      	ldr	r3, [r7, #4]
20005d9c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
20005d9e:	697b      	ldr	r3, [r7, #20]
20005da0:	3301      	adds	r3, #1
20005da2:	617b      	str	r3, [r7, #20]
20005da4:	697b      	ldr	r3, [r7, #20]
20005da6:	2b0f      	cmp	r3, #15
20005da8:	f67f af22 	bls.w	20005bf0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
20005dac:	bf00      	nop
20005dae:	bf00      	nop
20005db0:	371c      	adds	r7, #28
20005db2:	46bd      	mov	sp, r7
20005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
20005db8:	4770      	bx	lr
20005dba:	bf00      	nop
20005dbc:	40013800 	.word	0x40013800
20005dc0:	40020000 	.word	0x40020000
20005dc4:	40020400 	.word	0x40020400
20005dc8:	40020800 	.word	0x40020800
20005dcc:	40020c00 	.word	0x40020c00
20005dd0:	40021000 	.word	0x40021000
20005dd4:	40021400 	.word	0x40021400
20005dd8:	40021800 	.word	0x40021800
20005ddc:	40021c00 	.word	0x40021c00
20005de0:	40022000 	.word	0x40022000
20005de4:	40022400 	.word	0x40022400
20005de8:	40013c00 	.word	0x40013c00

20005dec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20005dec:	b480      	push	{r7}
20005dee:	b085      	sub	sp, #20
20005df0:	af00      	add	r7, sp, #0
20005df2:	6078      	str	r0, [r7, #4]
20005df4:	460b      	mov	r3, r1
20005df6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
20005df8:	687b      	ldr	r3, [r7, #4]
20005dfa:	691a      	ldr	r2, [r3, #16]
20005dfc:	887b      	ldrh	r3, [r7, #2]
20005dfe:	4013      	ands	r3, r2
20005e00:	2b00      	cmp	r3, #0
20005e02:	d002      	beq.n	20005e0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
20005e04:	2301      	movs	r3, #1
20005e06:	73fb      	strb	r3, [r7, #15]
20005e08:	e001      	b.n	20005e0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
20005e0a:	2300      	movs	r3, #0
20005e0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
20005e0e:	7bfb      	ldrb	r3, [r7, #15]
}
20005e10:	4618      	mov	r0, r3
20005e12:	3714      	adds	r7, #20
20005e14:	46bd      	mov	sp, r7
20005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
20005e1a:	4770      	bx	lr

20005e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
20005e1c:	b480      	push	{r7}
20005e1e:	b083      	sub	sp, #12
20005e20:	af00      	add	r7, sp, #0
20005e22:	6078      	str	r0, [r7, #4]
20005e24:	460b      	mov	r3, r1
20005e26:	807b      	strh	r3, [r7, #2]
20005e28:	4613      	mov	r3, r2
20005e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
20005e2c:	787b      	ldrb	r3, [r7, #1]
20005e2e:	2b00      	cmp	r3, #0
20005e30:	d003      	beq.n	20005e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
20005e32:	887a      	ldrh	r2, [r7, #2]
20005e34:	687b      	ldr	r3, [r7, #4]
20005e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
20005e38:	e003      	b.n	20005e42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
20005e3a:	887b      	ldrh	r3, [r7, #2]
20005e3c:	041a      	lsls	r2, r3, #16
20005e3e:	687b      	ldr	r3, [r7, #4]
20005e40:	619a      	str	r2, [r3, #24]
}
20005e42:	bf00      	nop
20005e44:	370c      	adds	r7, #12
20005e46:	46bd      	mov	sp, r7
20005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
20005e4c:	4770      	bx	lr

20005e4e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20005e4e:	b480      	push	{r7}
20005e50:	b085      	sub	sp, #20
20005e52:	af00      	add	r7, sp, #0
20005e54:	6078      	str	r0, [r7, #4]
20005e56:	460b      	mov	r3, r1
20005e58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
20005e5a:	687b      	ldr	r3, [r7, #4]
20005e5c:	695b      	ldr	r3, [r3, #20]
20005e5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
20005e60:	887a      	ldrh	r2, [r7, #2]
20005e62:	68fb      	ldr	r3, [r7, #12]
20005e64:	4013      	ands	r3, r2
20005e66:	041a      	lsls	r2, r3, #16
20005e68:	68fb      	ldr	r3, [r7, #12]
20005e6a:	43d9      	mvns	r1, r3
20005e6c:	887b      	ldrh	r3, [r7, #2]
20005e6e:	400b      	ands	r3, r1
20005e70:	431a      	orrs	r2, r3
20005e72:	687b      	ldr	r3, [r7, #4]
20005e74:	619a      	str	r2, [r3, #24]
}
20005e76:	bf00      	nop
20005e78:	3714      	adds	r7, #20
20005e7a:	46bd      	mov	sp, r7
20005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
20005e80:	4770      	bx	lr

20005e82 <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20005e82:	b480      	push	{r7}
20005e84:	b085      	sub	sp, #20
20005e86:	af00      	add	r7, sp, #0
20005e88:	6078      	str	r0, [r7, #4]
20005e8a:	460b      	mov	r3, r1
20005e8c:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
20005e8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20005e92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
20005e94:	887a      	ldrh	r2, [r7, #2]
20005e96:	68fb      	ldr	r3, [r7, #12]
20005e98:	4313      	orrs	r3, r2
20005e9a:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
20005e9c:	68fa      	ldr	r2, [r7, #12]
20005e9e:	687b      	ldr	r3, [r7, #4]
20005ea0:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
20005ea2:	887a      	ldrh	r2, [r7, #2]
20005ea4:	687b      	ldr	r3, [r7, #4]
20005ea6:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
20005ea8:	68fa      	ldr	r2, [r7, #12]
20005eaa:	687b      	ldr	r3, [r7, #4]
20005eac:	61da      	str	r2, [r3, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
20005eae:	687b      	ldr	r3, [r7, #4]
20005eb0:	69db      	ldr	r3, [r3, #28]
20005eb2:	60fb      	str	r3, [r7, #12]

  /* Read again in order to confirm lock is active */
  if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
20005eb4:	687b      	ldr	r3, [r7, #4]
20005eb6:	69db      	ldr	r3, [r3, #28]
20005eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20005ebc:	2b00      	cmp	r3, #0
20005ebe:	d001      	beq.n	20005ec4 <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
20005ec0:	2300      	movs	r3, #0
20005ec2:	e000      	b.n	20005ec6 <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
20005ec4:	2301      	movs	r3, #1
  }
}
20005ec6:	4618      	mov	r0, r3
20005ec8:	3714      	adds	r7, #20
20005eca:	46bd      	mov	sp, r7
20005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
20005ed0:	4770      	bx	lr
	...

20005ed4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
20005ed4:	b580      	push	{r7, lr}
20005ed6:	b082      	sub	sp, #8
20005ed8:	af00      	add	r7, sp, #0
20005eda:	4603      	mov	r3, r0
20005edc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
20005ede:	4b08      	ldr	r3, [pc, #32]	; (20005f00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
20005ee0:	695a      	ldr	r2, [r3, #20]
20005ee2:	88fb      	ldrh	r3, [r7, #6]
20005ee4:	4013      	ands	r3, r2
20005ee6:	2b00      	cmp	r3, #0
20005ee8:	d006      	beq.n	20005ef8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
20005eea:	4a05      	ldr	r2, [pc, #20]	; (20005f00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
20005eec:	88fb      	ldrh	r3, [r7, #6]
20005eee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
20005ef0:	88fb      	ldrh	r3, [r7, #6]
20005ef2:	4618      	mov	r0, r3
20005ef4:	f000 f806 	bl	20005f04 <HAL_GPIO_EXTI_Callback>
  }
}
20005ef8:	bf00      	nop
20005efa:	3708      	adds	r7, #8
20005efc:	46bd      	mov	sp, r7
20005efe:	bd80      	pop	{r7, pc}
20005f00:	40013c00 	.word	0x40013c00

20005f04 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
20005f04:	b480      	push	{r7}
20005f06:	b083      	sub	sp, #12
20005f08:	af00      	add	r7, sp, #0
20005f0a:	4603      	mov	r3, r0
20005f0c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
20005f0e:	bf00      	nop
20005f10:	370c      	adds	r7, #12
20005f12:	46bd      	mov	sp, r7
20005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
20005f18:	4770      	bx	lr
	...

20005f1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
20005f1c:	b580      	push	{r7, lr}
20005f1e:	b082      	sub	sp, #8
20005f20:	af00      	add	r7, sp, #0
20005f22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
20005f24:	687b      	ldr	r3, [r7, #4]
20005f26:	2b00      	cmp	r3, #0
20005f28:	d101      	bne.n	20005f2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
20005f2a:	2301      	movs	r3, #1
20005f2c:	e07f      	b.n	2000602e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
20005f2e:	687b      	ldr	r3, [r7, #4]
20005f30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20005f34:	b2db      	uxtb	r3, r3
20005f36:	2b00      	cmp	r3, #0
20005f38:	d106      	bne.n	20005f48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
20005f3a:	687b      	ldr	r3, [r7, #4]
20005f3c:	2200      	movs	r2, #0
20005f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
20005f42:	6878      	ldr	r0, [r7, #4]
20005f44:	f000 f8a9 	bl	2000609a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
20005f48:	687b      	ldr	r3, [r7, #4]
20005f4a:	2224      	movs	r2, #36	; 0x24
20005f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
20005f50:	687b      	ldr	r3, [r7, #4]
20005f52:	681b      	ldr	r3, [r3, #0]
20005f54:	681a      	ldr	r2, [r3, #0]
20005f56:	687b      	ldr	r3, [r7, #4]
20005f58:	681b      	ldr	r3, [r3, #0]
20005f5a:	f022 0201 	bic.w	r2, r2, #1
20005f5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
20005f60:	687b      	ldr	r3, [r7, #4]
20005f62:	685a      	ldr	r2, [r3, #4]
20005f64:	687b      	ldr	r3, [r7, #4]
20005f66:	681b      	ldr	r3, [r3, #0]
20005f68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
20005f6c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
20005f6e:	687b      	ldr	r3, [r7, #4]
20005f70:	681b      	ldr	r3, [r3, #0]
20005f72:	689a      	ldr	r2, [r3, #8]
20005f74:	687b      	ldr	r3, [r7, #4]
20005f76:	681b      	ldr	r3, [r3, #0]
20005f78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
20005f7c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
20005f7e:	687b      	ldr	r3, [r7, #4]
20005f80:	68db      	ldr	r3, [r3, #12]
20005f82:	2b01      	cmp	r3, #1
20005f84:	d107      	bne.n	20005f96 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
20005f86:	687b      	ldr	r3, [r7, #4]
20005f88:	689a      	ldr	r2, [r3, #8]
20005f8a:	687b      	ldr	r3, [r7, #4]
20005f8c:	681b      	ldr	r3, [r3, #0]
20005f8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
20005f92:	609a      	str	r2, [r3, #8]
20005f94:	e006      	b.n	20005fa4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
20005f96:	687b      	ldr	r3, [r7, #4]
20005f98:	689a      	ldr	r2, [r3, #8]
20005f9a:	687b      	ldr	r3, [r7, #4]
20005f9c:	681b      	ldr	r3, [r3, #0]
20005f9e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
20005fa2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
20005fa4:	687b      	ldr	r3, [r7, #4]
20005fa6:	68db      	ldr	r3, [r3, #12]
20005fa8:	2b02      	cmp	r3, #2
20005faa:	d104      	bne.n	20005fb6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
20005fac:	687b      	ldr	r3, [r7, #4]
20005fae:	681b      	ldr	r3, [r3, #0]
20005fb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
20005fb4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
20005fb6:	687b      	ldr	r3, [r7, #4]
20005fb8:	681b      	ldr	r3, [r3, #0]
20005fba:	6859      	ldr	r1, [r3, #4]
20005fbc:	687b      	ldr	r3, [r7, #4]
20005fbe:	681a      	ldr	r2, [r3, #0]
20005fc0:	4b1d      	ldr	r3, [pc, #116]	; (20006038 <HAL_I2C_Init+0x11c>)
20005fc2:	430b      	orrs	r3, r1
20005fc4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
20005fc6:	687b      	ldr	r3, [r7, #4]
20005fc8:	681b      	ldr	r3, [r3, #0]
20005fca:	68da      	ldr	r2, [r3, #12]
20005fcc:	687b      	ldr	r3, [r7, #4]
20005fce:	681b      	ldr	r3, [r3, #0]
20005fd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
20005fd4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
20005fd6:	687b      	ldr	r3, [r7, #4]
20005fd8:	691a      	ldr	r2, [r3, #16]
20005fda:	687b      	ldr	r3, [r7, #4]
20005fdc:	695b      	ldr	r3, [r3, #20]
20005fde:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
20005fe2:	687b      	ldr	r3, [r7, #4]
20005fe4:	699b      	ldr	r3, [r3, #24]
20005fe6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
20005fe8:	687b      	ldr	r3, [r7, #4]
20005fea:	681b      	ldr	r3, [r3, #0]
20005fec:	430a      	orrs	r2, r1
20005fee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
20005ff0:	687b      	ldr	r3, [r7, #4]
20005ff2:	69d9      	ldr	r1, [r3, #28]
20005ff4:	687b      	ldr	r3, [r7, #4]
20005ff6:	6a1a      	ldr	r2, [r3, #32]
20005ff8:	687b      	ldr	r3, [r7, #4]
20005ffa:	681b      	ldr	r3, [r3, #0]
20005ffc:	430a      	orrs	r2, r1
20005ffe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
20006000:	687b      	ldr	r3, [r7, #4]
20006002:	681b      	ldr	r3, [r3, #0]
20006004:	681a      	ldr	r2, [r3, #0]
20006006:	687b      	ldr	r3, [r7, #4]
20006008:	681b      	ldr	r3, [r3, #0]
2000600a:	f042 0201 	orr.w	r2, r2, #1
2000600e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
20006010:	687b      	ldr	r3, [r7, #4]
20006012:	2200      	movs	r2, #0
20006014:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
20006016:	687b      	ldr	r3, [r7, #4]
20006018:	2220      	movs	r2, #32
2000601a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
2000601e:	687b      	ldr	r3, [r7, #4]
20006020:	2200      	movs	r2, #0
20006022:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
20006024:	687b      	ldr	r3, [r7, #4]
20006026:	2200      	movs	r2, #0
20006028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
2000602c:	2300      	movs	r3, #0
}
2000602e:	4618      	mov	r0, r3
20006030:	3708      	adds	r7, #8
20006032:	46bd      	mov	sp, r7
20006034:	bd80      	pop	{r7, pc}
20006036:	bf00      	nop
20006038:	02008000 	.word	0x02008000

2000603c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
2000603c:	b580      	push	{r7, lr}
2000603e:	b082      	sub	sp, #8
20006040:	af00      	add	r7, sp, #0
20006042:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
20006044:	687b      	ldr	r3, [r7, #4]
20006046:	2b00      	cmp	r3, #0
20006048:	d101      	bne.n	2000604e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
2000604a:	2301      	movs	r3, #1
2000604c:	e021      	b.n	20006092 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
2000604e:	687b      	ldr	r3, [r7, #4]
20006050:	2224      	movs	r2, #36	; 0x24
20006052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
20006056:	687b      	ldr	r3, [r7, #4]
20006058:	681b      	ldr	r3, [r3, #0]
2000605a:	681a      	ldr	r2, [r3, #0]
2000605c:	687b      	ldr	r3, [r7, #4]
2000605e:	681b      	ldr	r3, [r3, #0]
20006060:	f022 0201 	bic.w	r2, r2, #1
20006064:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
20006066:	6878      	ldr	r0, [r7, #4]
20006068:	f000 f821 	bl	200060ae <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2000606c:	687b      	ldr	r3, [r7, #4]
2000606e:	2200      	movs	r2, #0
20006070:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
20006072:	687b      	ldr	r3, [r7, #4]
20006074:	2200      	movs	r2, #0
20006076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
2000607a:	687b      	ldr	r3, [r7, #4]
2000607c:	2200      	movs	r2, #0
2000607e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
20006080:	687b      	ldr	r3, [r7, #4]
20006082:	2200      	movs	r2, #0
20006084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
20006088:	687b      	ldr	r3, [r7, #4]
2000608a:	2200      	movs	r2, #0
2000608c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
20006090:	2300      	movs	r3, #0
}
20006092:	4618      	mov	r0, r3
20006094:	3708      	adds	r7, #8
20006096:	46bd      	mov	sp, r7
20006098:	bd80      	pop	{r7, pc}

2000609a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
2000609a:	b480      	push	{r7}
2000609c:	b083      	sub	sp, #12
2000609e:	af00      	add	r7, sp, #0
200060a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
200060a2:	bf00      	nop
200060a4:	370c      	adds	r7, #12
200060a6:	46bd      	mov	sp, r7
200060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
200060ac:	4770      	bx	lr

200060ae <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
200060ae:	b480      	push	{r7}
200060b0:	b083      	sub	sp, #12
200060b2:	af00      	add	r7, sp, #0
200060b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
200060b6:	bf00      	nop
200060b8:	370c      	adds	r7, #12
200060ba:	46bd      	mov	sp, r7
200060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
200060c0:	4770      	bx	lr
	...

200060c4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
200060c4:	b580      	push	{r7, lr}
200060c6:	b088      	sub	sp, #32
200060c8:	af02      	add	r7, sp, #8
200060ca:	60f8      	str	r0, [r7, #12]
200060cc:	607a      	str	r2, [r7, #4]
200060ce:	461a      	mov	r2, r3
200060d0:	460b      	mov	r3, r1
200060d2:	817b      	strh	r3, [r7, #10]
200060d4:	4613      	mov	r3, r2
200060d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
200060d8:	68fb      	ldr	r3, [r7, #12]
200060da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
200060de:	b2db      	uxtb	r3, r3
200060e0:	2b20      	cmp	r3, #32
200060e2:	f040 80da 	bne.w	2000629a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
200060e6:	68fb      	ldr	r3, [r7, #12]
200060e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
200060ec:	2b01      	cmp	r3, #1
200060ee:	d101      	bne.n	200060f4 <HAL_I2C_Master_Transmit+0x30>
200060f0:	2302      	movs	r3, #2
200060f2:	e0d3      	b.n	2000629c <HAL_I2C_Master_Transmit+0x1d8>
200060f4:	68fb      	ldr	r3, [r7, #12]
200060f6:	2201      	movs	r2, #1
200060f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
200060fc:	f7fb fe2c 	bl	20001d58 <HAL_GetTick>
20006100:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
20006102:	697b      	ldr	r3, [r7, #20]
20006104:	9300      	str	r3, [sp, #0]
20006106:	2319      	movs	r3, #25
20006108:	2201      	movs	r2, #1
2000610a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2000610e:	68f8      	ldr	r0, [r7, #12]
20006110:	f004 f9bc 	bl	2000a48c <I2C_WaitOnFlagUntilTimeout>
20006114:	4603      	mov	r3, r0
20006116:	2b00      	cmp	r3, #0
20006118:	d001      	beq.n	2000611e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
2000611a:	2301      	movs	r3, #1
2000611c:	e0be      	b.n	2000629c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
2000611e:	68fb      	ldr	r3, [r7, #12]
20006120:	2221      	movs	r2, #33	; 0x21
20006122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
20006126:	68fb      	ldr	r3, [r7, #12]
20006128:	2210      	movs	r2, #16
2000612a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2000612e:	68fb      	ldr	r3, [r7, #12]
20006130:	2200      	movs	r2, #0
20006132:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
20006134:	68fb      	ldr	r3, [r7, #12]
20006136:	687a      	ldr	r2, [r7, #4]
20006138:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
2000613a:	68fb      	ldr	r3, [r7, #12]
2000613c:	893a      	ldrh	r2, [r7, #8]
2000613e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
20006140:	68fb      	ldr	r3, [r7, #12]
20006142:	2200      	movs	r2, #0
20006144:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
20006146:	68fb      	ldr	r3, [r7, #12]
20006148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2000614a:	b29b      	uxth	r3, r3
2000614c:	2bff      	cmp	r3, #255	; 0xff
2000614e:	d90e      	bls.n	2000616e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
20006150:	68fb      	ldr	r3, [r7, #12]
20006152:	22ff      	movs	r2, #255	; 0xff
20006154:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
20006156:	68fb      	ldr	r3, [r7, #12]
20006158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2000615a:	b2da      	uxtb	r2, r3
2000615c:	8979      	ldrh	r1, [r7, #10]
2000615e:	4b51      	ldr	r3, [pc, #324]	; (200062a4 <HAL_I2C_Master_Transmit+0x1e0>)
20006160:	9300      	str	r3, [sp, #0]
20006162:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
20006166:	68f8      	ldr	r0, [r7, #12]
20006168:	f004 fbb2 	bl	2000a8d0 <I2C_TransferConfig>
2000616c:	e06c      	b.n	20006248 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2000616e:	68fb      	ldr	r3, [r7, #12]
20006170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20006172:	b29a      	uxth	r2, r3
20006174:	68fb      	ldr	r3, [r7, #12]
20006176:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
20006178:	68fb      	ldr	r3, [r7, #12]
2000617a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2000617c:	b2da      	uxtb	r2, r3
2000617e:	8979      	ldrh	r1, [r7, #10]
20006180:	4b48      	ldr	r3, [pc, #288]	; (200062a4 <HAL_I2C_Master_Transmit+0x1e0>)
20006182:	9300      	str	r3, [sp, #0]
20006184:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
20006188:	68f8      	ldr	r0, [r7, #12]
2000618a:	f004 fba1 	bl	2000a8d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
2000618e:	e05b      	b.n	20006248 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
20006190:	697a      	ldr	r2, [r7, #20]
20006192:	6a39      	ldr	r1, [r7, #32]
20006194:	68f8      	ldr	r0, [r7, #12]
20006196:	f004 f9b9 	bl	2000a50c <I2C_WaitOnTXISFlagUntilTimeout>
2000619a:	4603      	mov	r3, r0
2000619c:	2b00      	cmp	r3, #0
2000619e:	d001      	beq.n	200061a4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
200061a0:	2301      	movs	r3, #1
200061a2:	e07b      	b.n	2000629c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
200061a4:	68fb      	ldr	r3, [r7, #12]
200061a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200061a8:	781a      	ldrb	r2, [r3, #0]
200061aa:	68fb      	ldr	r3, [r7, #12]
200061ac:	681b      	ldr	r3, [r3, #0]
200061ae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
200061b0:	68fb      	ldr	r3, [r7, #12]
200061b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200061b4:	1c5a      	adds	r2, r3, #1
200061b6:	68fb      	ldr	r3, [r7, #12]
200061b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
200061ba:	68fb      	ldr	r3, [r7, #12]
200061bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
200061be:	b29b      	uxth	r3, r3
200061c0:	3b01      	subs	r3, #1
200061c2:	b29a      	uxth	r2, r3
200061c4:	68fb      	ldr	r3, [r7, #12]
200061c6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
200061c8:	68fb      	ldr	r3, [r7, #12]
200061ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
200061cc:	3b01      	subs	r3, #1
200061ce:	b29a      	uxth	r2, r3
200061d0:	68fb      	ldr	r3, [r7, #12]
200061d2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
200061d4:	68fb      	ldr	r3, [r7, #12]
200061d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
200061d8:	b29b      	uxth	r3, r3
200061da:	2b00      	cmp	r3, #0
200061dc:	d034      	beq.n	20006248 <HAL_I2C_Master_Transmit+0x184>
200061de:	68fb      	ldr	r3, [r7, #12]
200061e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
200061e2:	2b00      	cmp	r3, #0
200061e4:	d130      	bne.n	20006248 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
200061e6:	697b      	ldr	r3, [r7, #20]
200061e8:	9300      	str	r3, [sp, #0]
200061ea:	6a3b      	ldr	r3, [r7, #32]
200061ec:	2200      	movs	r2, #0
200061ee:	2180      	movs	r1, #128	; 0x80
200061f0:	68f8      	ldr	r0, [r7, #12]
200061f2:	f004 f94b 	bl	2000a48c <I2C_WaitOnFlagUntilTimeout>
200061f6:	4603      	mov	r3, r0
200061f8:	2b00      	cmp	r3, #0
200061fa:	d001      	beq.n	20006200 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
200061fc:	2301      	movs	r3, #1
200061fe:	e04d      	b.n	2000629c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
20006200:	68fb      	ldr	r3, [r7, #12]
20006202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20006204:	b29b      	uxth	r3, r3
20006206:	2bff      	cmp	r3, #255	; 0xff
20006208:	d90e      	bls.n	20006228 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
2000620a:	68fb      	ldr	r3, [r7, #12]
2000620c:	22ff      	movs	r2, #255	; 0xff
2000620e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
20006210:	68fb      	ldr	r3, [r7, #12]
20006212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20006214:	b2da      	uxtb	r2, r3
20006216:	8979      	ldrh	r1, [r7, #10]
20006218:	2300      	movs	r3, #0
2000621a:	9300      	str	r3, [sp, #0]
2000621c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
20006220:	68f8      	ldr	r0, [r7, #12]
20006222:	f004 fb55 	bl	2000a8d0 <I2C_TransferConfig>
20006226:	e00f      	b.n	20006248 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
20006228:	68fb      	ldr	r3, [r7, #12]
2000622a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2000622c:	b29a      	uxth	r2, r3
2000622e:	68fb      	ldr	r3, [r7, #12]
20006230:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
20006232:	68fb      	ldr	r3, [r7, #12]
20006234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20006236:	b2da      	uxtb	r2, r3
20006238:	8979      	ldrh	r1, [r7, #10]
2000623a:	2300      	movs	r3, #0
2000623c:	9300      	str	r3, [sp, #0]
2000623e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
20006242:	68f8      	ldr	r0, [r7, #12]
20006244:	f004 fb44 	bl	2000a8d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
20006248:	68fb      	ldr	r3, [r7, #12]
2000624a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2000624c:	b29b      	uxth	r3, r3
2000624e:	2b00      	cmp	r3, #0
20006250:	d19e      	bne.n	20006190 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
20006252:	697a      	ldr	r2, [r7, #20]
20006254:	6a39      	ldr	r1, [r7, #32]
20006256:	68f8      	ldr	r0, [r7, #12]
20006258:	f004 f998 	bl	2000a58c <I2C_WaitOnSTOPFlagUntilTimeout>
2000625c:	4603      	mov	r3, r0
2000625e:	2b00      	cmp	r3, #0
20006260:	d001      	beq.n	20006266 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
20006262:	2301      	movs	r3, #1
20006264:	e01a      	b.n	2000629c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
20006266:	68fb      	ldr	r3, [r7, #12]
20006268:	681b      	ldr	r3, [r3, #0]
2000626a:	2220      	movs	r2, #32
2000626c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2000626e:	68fb      	ldr	r3, [r7, #12]
20006270:	681b      	ldr	r3, [r3, #0]
20006272:	6859      	ldr	r1, [r3, #4]
20006274:	68fb      	ldr	r3, [r7, #12]
20006276:	681a      	ldr	r2, [r3, #0]
20006278:	4b0b      	ldr	r3, [pc, #44]	; (200062a8 <HAL_I2C_Master_Transmit+0x1e4>)
2000627a:	400b      	ands	r3, r1
2000627c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2000627e:	68fb      	ldr	r3, [r7, #12]
20006280:	2220      	movs	r2, #32
20006282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
20006286:	68fb      	ldr	r3, [r7, #12]
20006288:	2200      	movs	r2, #0
2000628a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2000628e:	68fb      	ldr	r3, [r7, #12]
20006290:	2200      	movs	r2, #0
20006292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
20006296:	2300      	movs	r3, #0
20006298:	e000      	b.n	2000629c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
2000629a:	2302      	movs	r3, #2
  }
}
2000629c:	4618      	mov	r0, r3
2000629e:	3718      	adds	r7, #24
200062a0:	46bd      	mov	sp, r7
200062a2:	bd80      	pop	{r7, pc}
200062a4:	80002000 	.word	0x80002000
200062a8:	fe00e800 	.word	0xfe00e800

200062ac <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
200062ac:	b580      	push	{r7, lr}
200062ae:	b088      	sub	sp, #32
200062b0:	af02      	add	r7, sp, #8
200062b2:	60f8      	str	r0, [r7, #12]
200062b4:	607a      	str	r2, [r7, #4]
200062b6:	461a      	mov	r2, r3
200062b8:	460b      	mov	r3, r1
200062ba:	817b      	strh	r3, [r7, #10]
200062bc:	4613      	mov	r3, r2
200062be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
200062c0:	68fb      	ldr	r3, [r7, #12]
200062c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
200062c6:	b2db      	uxtb	r3, r3
200062c8:	2b20      	cmp	r3, #32
200062ca:	f040 80db 	bne.w	20006484 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
200062ce:	68fb      	ldr	r3, [r7, #12]
200062d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
200062d4:	2b01      	cmp	r3, #1
200062d6:	d101      	bne.n	200062dc <HAL_I2C_Master_Receive+0x30>
200062d8:	2302      	movs	r3, #2
200062da:	e0d4      	b.n	20006486 <HAL_I2C_Master_Receive+0x1da>
200062dc:	68fb      	ldr	r3, [r7, #12]
200062de:	2201      	movs	r2, #1
200062e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
200062e4:	f7fb fd38 	bl	20001d58 <HAL_GetTick>
200062e8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
200062ea:	697b      	ldr	r3, [r7, #20]
200062ec:	9300      	str	r3, [sp, #0]
200062ee:	2319      	movs	r3, #25
200062f0:	2201      	movs	r2, #1
200062f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
200062f6:	68f8      	ldr	r0, [r7, #12]
200062f8:	f004 f8c8 	bl	2000a48c <I2C_WaitOnFlagUntilTimeout>
200062fc:	4603      	mov	r3, r0
200062fe:	2b00      	cmp	r3, #0
20006300:	d001      	beq.n	20006306 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
20006302:	2301      	movs	r3, #1
20006304:	e0bf      	b.n	20006486 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
20006306:	68fb      	ldr	r3, [r7, #12]
20006308:	2222      	movs	r2, #34	; 0x22
2000630a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2000630e:	68fb      	ldr	r3, [r7, #12]
20006310:	2210      	movs	r2, #16
20006312:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
20006316:	68fb      	ldr	r3, [r7, #12]
20006318:	2200      	movs	r2, #0
2000631a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2000631c:	68fb      	ldr	r3, [r7, #12]
2000631e:	687a      	ldr	r2, [r7, #4]
20006320:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
20006322:	68fb      	ldr	r3, [r7, #12]
20006324:	893a      	ldrh	r2, [r7, #8]
20006326:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
20006328:	68fb      	ldr	r3, [r7, #12]
2000632a:	2200      	movs	r2, #0
2000632c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000632e:	68fb      	ldr	r3, [r7, #12]
20006330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20006332:	b29b      	uxth	r3, r3
20006334:	2bff      	cmp	r3, #255	; 0xff
20006336:	d90e      	bls.n	20006356 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
20006338:	68fb      	ldr	r3, [r7, #12]
2000633a:	22ff      	movs	r2, #255	; 0xff
2000633c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2000633e:	68fb      	ldr	r3, [r7, #12]
20006340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20006342:	b2da      	uxtb	r2, r3
20006344:	8979      	ldrh	r1, [r7, #10]
20006346:	4b52      	ldr	r3, [pc, #328]	; (20006490 <HAL_I2C_Master_Receive+0x1e4>)
20006348:	9300      	str	r3, [sp, #0]
2000634a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2000634e:	68f8      	ldr	r0, [r7, #12]
20006350:	f004 fabe 	bl	2000a8d0 <I2C_TransferConfig>
20006354:	e06d      	b.n	20006432 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
20006356:	68fb      	ldr	r3, [r7, #12]
20006358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2000635a:	b29a      	uxth	r2, r3
2000635c:	68fb      	ldr	r3, [r7, #12]
2000635e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
20006360:	68fb      	ldr	r3, [r7, #12]
20006362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20006364:	b2da      	uxtb	r2, r3
20006366:	8979      	ldrh	r1, [r7, #10]
20006368:	4b49      	ldr	r3, [pc, #292]	; (20006490 <HAL_I2C_Master_Receive+0x1e4>)
2000636a:	9300      	str	r3, [sp, #0]
2000636c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
20006370:	68f8      	ldr	r0, [r7, #12]
20006372:	f004 faad 	bl	2000a8d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
20006376:	e05c      	b.n	20006432 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
20006378:	697a      	ldr	r2, [r7, #20]
2000637a:	6a39      	ldr	r1, [r7, #32]
2000637c:	68f8      	ldr	r0, [r7, #12]
2000637e:	f004 f941 	bl	2000a604 <I2C_WaitOnRXNEFlagUntilTimeout>
20006382:	4603      	mov	r3, r0
20006384:	2b00      	cmp	r3, #0
20006386:	d001      	beq.n	2000638c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
20006388:	2301      	movs	r3, #1
2000638a:	e07c      	b.n	20006486 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2000638c:	68fb      	ldr	r3, [r7, #12]
2000638e:	681b      	ldr	r3, [r3, #0]
20006390:	6a5a      	ldr	r2, [r3, #36]	; 0x24
20006392:	68fb      	ldr	r3, [r7, #12]
20006394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20006396:	b2d2      	uxtb	r2, r2
20006398:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2000639a:	68fb      	ldr	r3, [r7, #12]
2000639c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000639e:	1c5a      	adds	r2, r3, #1
200063a0:	68fb      	ldr	r3, [r7, #12]
200063a2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
200063a4:	68fb      	ldr	r3, [r7, #12]
200063a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
200063a8:	3b01      	subs	r3, #1
200063aa:	b29a      	uxth	r2, r3
200063ac:	68fb      	ldr	r3, [r7, #12]
200063ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
200063b0:	68fb      	ldr	r3, [r7, #12]
200063b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
200063b4:	b29b      	uxth	r3, r3
200063b6:	3b01      	subs	r3, #1
200063b8:	b29a      	uxth	r2, r3
200063ba:	68fb      	ldr	r3, [r7, #12]
200063bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
200063be:	68fb      	ldr	r3, [r7, #12]
200063c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
200063c2:	b29b      	uxth	r3, r3
200063c4:	2b00      	cmp	r3, #0
200063c6:	d034      	beq.n	20006432 <HAL_I2C_Master_Receive+0x186>
200063c8:	68fb      	ldr	r3, [r7, #12]
200063ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
200063cc:	2b00      	cmp	r3, #0
200063ce:	d130      	bne.n	20006432 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
200063d0:	697b      	ldr	r3, [r7, #20]
200063d2:	9300      	str	r3, [sp, #0]
200063d4:	6a3b      	ldr	r3, [r7, #32]
200063d6:	2200      	movs	r2, #0
200063d8:	2180      	movs	r1, #128	; 0x80
200063da:	68f8      	ldr	r0, [r7, #12]
200063dc:	f004 f856 	bl	2000a48c <I2C_WaitOnFlagUntilTimeout>
200063e0:	4603      	mov	r3, r0
200063e2:	2b00      	cmp	r3, #0
200063e4:	d001      	beq.n	200063ea <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
200063e6:	2301      	movs	r3, #1
200063e8:	e04d      	b.n	20006486 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
200063ea:	68fb      	ldr	r3, [r7, #12]
200063ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
200063ee:	b29b      	uxth	r3, r3
200063f0:	2bff      	cmp	r3, #255	; 0xff
200063f2:	d90e      	bls.n	20006412 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
200063f4:	68fb      	ldr	r3, [r7, #12]
200063f6:	22ff      	movs	r2, #255	; 0xff
200063f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
200063fa:	68fb      	ldr	r3, [r7, #12]
200063fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
200063fe:	b2da      	uxtb	r2, r3
20006400:	8979      	ldrh	r1, [r7, #10]
20006402:	2300      	movs	r3, #0
20006404:	9300      	str	r3, [sp, #0]
20006406:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2000640a:	68f8      	ldr	r0, [r7, #12]
2000640c:	f004 fa60 	bl	2000a8d0 <I2C_TransferConfig>
20006410:	e00f      	b.n	20006432 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
20006412:	68fb      	ldr	r3, [r7, #12]
20006414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20006416:	b29a      	uxth	r2, r3
20006418:	68fb      	ldr	r3, [r7, #12]
2000641a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2000641c:	68fb      	ldr	r3, [r7, #12]
2000641e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20006420:	b2da      	uxtb	r2, r3
20006422:	8979      	ldrh	r1, [r7, #10]
20006424:	2300      	movs	r3, #0
20006426:	9300      	str	r3, [sp, #0]
20006428:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2000642c:	68f8      	ldr	r0, [r7, #12]
2000642e:	f004 fa4f 	bl	2000a8d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
20006432:	68fb      	ldr	r3, [r7, #12]
20006434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20006436:	b29b      	uxth	r3, r3
20006438:	2b00      	cmp	r3, #0
2000643a:	d19d      	bne.n	20006378 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2000643c:	697a      	ldr	r2, [r7, #20]
2000643e:	6a39      	ldr	r1, [r7, #32]
20006440:	68f8      	ldr	r0, [r7, #12]
20006442:	f004 f8a3 	bl	2000a58c <I2C_WaitOnSTOPFlagUntilTimeout>
20006446:	4603      	mov	r3, r0
20006448:	2b00      	cmp	r3, #0
2000644a:	d001      	beq.n	20006450 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
2000644c:	2301      	movs	r3, #1
2000644e:	e01a      	b.n	20006486 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
20006450:	68fb      	ldr	r3, [r7, #12]
20006452:	681b      	ldr	r3, [r3, #0]
20006454:	2220      	movs	r2, #32
20006456:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
20006458:	68fb      	ldr	r3, [r7, #12]
2000645a:	681b      	ldr	r3, [r3, #0]
2000645c:	6859      	ldr	r1, [r3, #4]
2000645e:	68fb      	ldr	r3, [r7, #12]
20006460:	681a      	ldr	r2, [r3, #0]
20006462:	4b0c      	ldr	r3, [pc, #48]	; (20006494 <HAL_I2C_Master_Receive+0x1e8>)
20006464:	400b      	ands	r3, r1
20006466:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
20006468:	68fb      	ldr	r3, [r7, #12]
2000646a:	2220      	movs	r2, #32
2000646c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
20006470:	68fb      	ldr	r3, [r7, #12]
20006472:	2200      	movs	r2, #0
20006474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
20006478:	68fb      	ldr	r3, [r7, #12]
2000647a:	2200      	movs	r2, #0
2000647c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
20006480:	2300      	movs	r3, #0
20006482:	e000      	b.n	20006486 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
20006484:	2302      	movs	r3, #2
  }
}
20006486:	4618      	mov	r0, r3
20006488:	3718      	adds	r7, #24
2000648a:	46bd      	mov	sp, r7
2000648c:	bd80      	pop	{r7, pc}
2000648e:	bf00      	nop
20006490:	80002400 	.word	0x80002400
20006494:	fe00e800 	.word	0xfe00e800

20006498 <HAL_I2C_Slave_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
20006498:	b580      	push	{r7, lr}
2000649a:	b088      	sub	sp, #32
2000649c:	af02      	add	r7, sp, #8
2000649e:	60f8      	str	r0, [r7, #12]
200064a0:	60b9      	str	r1, [r7, #8]
200064a2:	603b      	str	r3, [r7, #0]
200064a4:	4613      	mov	r3, r2
200064a6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
200064a8:	68fb      	ldr	r3, [r7, #12]
200064aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
200064ae:	b2db      	uxtb	r3, r3
200064b0:	2b20      	cmp	r3, #32
200064b2:	f040 8109 	bne.w	200066c8 <HAL_I2C_Slave_Transmit+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
200064b6:	68bb      	ldr	r3, [r7, #8]
200064b8:	2b00      	cmp	r3, #0
200064ba:	d002      	beq.n	200064c2 <HAL_I2C_Slave_Transmit+0x2a>
200064bc:	88fb      	ldrh	r3, [r7, #6]
200064be:	2b00      	cmp	r3, #0
200064c0:	d105      	bne.n	200064ce <HAL_I2C_Slave_Transmit+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
200064c2:	68fb      	ldr	r3, [r7, #12]
200064c4:	f44f 7200 	mov.w	r2, #512	; 0x200
200064c8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
200064ca:	2301      	movs	r3, #1
200064cc:	e0fd      	b.n	200066ca <HAL_I2C_Slave_Transmit+0x232>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
200064ce:	68fb      	ldr	r3, [r7, #12]
200064d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
200064d4:	2b01      	cmp	r3, #1
200064d6:	d101      	bne.n	200064dc <HAL_I2C_Slave_Transmit+0x44>
200064d8:	2302      	movs	r3, #2
200064da:	e0f6      	b.n	200066ca <HAL_I2C_Slave_Transmit+0x232>
200064dc:	68fb      	ldr	r3, [r7, #12]
200064de:	2201      	movs	r2, #1
200064e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
200064e4:	f7fb fc38 	bl	20001d58 <HAL_GetTick>
200064e8:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
200064ea:	68fb      	ldr	r3, [r7, #12]
200064ec:	2221      	movs	r2, #33	; 0x21
200064ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
200064f2:	68fb      	ldr	r3, [r7, #12]
200064f4:	2220      	movs	r2, #32
200064f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
200064fa:	68fb      	ldr	r3, [r7, #12]
200064fc:	2200      	movs	r2, #0
200064fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
20006500:	68fb      	ldr	r3, [r7, #12]
20006502:	68ba      	ldr	r2, [r7, #8]
20006504:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
20006506:	68fb      	ldr	r3, [r7, #12]
20006508:	88fa      	ldrh	r2, [r7, #6]
2000650a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
2000650c:	68fb      	ldr	r3, [r7, #12]
2000650e:	2200      	movs	r2, #0
20006510:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
20006512:	68fb      	ldr	r3, [r7, #12]
20006514:	681b      	ldr	r3, [r3, #0]
20006516:	685a      	ldr	r2, [r3, #4]
20006518:	68fb      	ldr	r3, [r7, #12]
2000651a:	681b      	ldr	r3, [r3, #0]
2000651c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
20006520:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
20006522:	697b      	ldr	r3, [r7, #20]
20006524:	9300      	str	r3, [sp, #0]
20006526:	683b      	ldr	r3, [r7, #0]
20006528:	2200      	movs	r2, #0
2000652a:	2108      	movs	r1, #8
2000652c:	68f8      	ldr	r0, [r7, #12]
2000652e:	f003 ffad 	bl	2000a48c <I2C_WaitOnFlagUntilTimeout>
20006532:	4603      	mov	r3, r0
20006534:	2b00      	cmp	r3, #0
20006536:	d009      	beq.n	2000654c <HAL_I2C_Slave_Transmit+0xb4>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
20006538:	68fb      	ldr	r3, [r7, #12]
2000653a:	681b      	ldr	r3, [r3, #0]
2000653c:	685a      	ldr	r2, [r3, #4]
2000653e:	68fb      	ldr	r3, [r7, #12]
20006540:	681b      	ldr	r3, [r3, #0]
20006542:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
20006546:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
20006548:	2301      	movs	r3, #1
2000654a:	e0be      	b.n	200066ca <HAL_I2C_Slave_Transmit+0x232>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2000654c:	68fb      	ldr	r3, [r7, #12]
2000654e:	681b      	ldr	r3, [r3, #0]
20006550:	2208      	movs	r2, #8
20006552:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
20006554:	68fb      	ldr	r3, [r7, #12]
20006556:	68db      	ldr	r3, [r3, #12]
20006558:	2b02      	cmp	r3, #2
2000655a:	d118      	bne.n	2000658e <HAL_I2C_Slave_Transmit+0xf6>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
2000655c:	697b      	ldr	r3, [r7, #20]
2000655e:	9300      	str	r3, [sp, #0]
20006560:	683b      	ldr	r3, [r7, #0]
20006562:	2200      	movs	r2, #0
20006564:	2108      	movs	r1, #8
20006566:	68f8      	ldr	r0, [r7, #12]
20006568:	f003 ff90 	bl	2000a48c <I2C_WaitOnFlagUntilTimeout>
2000656c:	4603      	mov	r3, r0
2000656e:	2b00      	cmp	r3, #0
20006570:	d009      	beq.n	20006586 <HAL_I2C_Slave_Transmit+0xee>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
20006572:	68fb      	ldr	r3, [r7, #12]
20006574:	681b      	ldr	r3, [r3, #0]
20006576:	685a      	ldr	r2, [r3, #4]
20006578:	68fb      	ldr	r3, [r7, #12]
2000657a:	681b      	ldr	r3, [r3, #0]
2000657c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
20006580:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
20006582:	2301      	movs	r3, #1
20006584:	e0a1      	b.n	200066ca <HAL_I2C_Slave_Transmit+0x232>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
20006586:	68fb      	ldr	r3, [r7, #12]
20006588:	681b      	ldr	r3, [r3, #0]
2000658a:	2208      	movs	r2, #8
2000658c:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
2000658e:	697b      	ldr	r3, [r7, #20]
20006590:	9300      	str	r3, [sp, #0]
20006592:	683b      	ldr	r3, [r7, #0]
20006594:	2200      	movs	r2, #0
20006596:	f44f 3180 	mov.w	r1, #65536	; 0x10000
2000659a:	68f8      	ldr	r0, [r7, #12]
2000659c:	f003 ff76 	bl	2000a48c <I2C_WaitOnFlagUntilTimeout>
200065a0:	4603      	mov	r3, r0
200065a2:	2b00      	cmp	r3, #0
200065a4:	d02d      	beq.n	20006602 <HAL_I2C_Slave_Transmit+0x16a>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
200065a6:	68fb      	ldr	r3, [r7, #12]
200065a8:	681b      	ldr	r3, [r3, #0]
200065aa:	685a      	ldr	r2, [r3, #4]
200065ac:	68fb      	ldr	r3, [r7, #12]
200065ae:	681b      	ldr	r3, [r3, #0]
200065b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
200065b4:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
200065b6:	2301      	movs	r3, #1
200065b8:	e087      	b.n	200066ca <HAL_I2C_Slave_Transmit+0x232>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
200065ba:	697a      	ldr	r2, [r7, #20]
200065bc:	6839      	ldr	r1, [r7, #0]
200065be:	68f8      	ldr	r0, [r7, #12]
200065c0:	f003 ffa4 	bl	2000a50c <I2C_WaitOnTXISFlagUntilTimeout>
200065c4:	4603      	mov	r3, r0
200065c6:	2b00      	cmp	r3, #0
200065c8:	d009      	beq.n	200065de <HAL_I2C_Slave_Transmit+0x146>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
200065ca:	68fb      	ldr	r3, [r7, #12]
200065cc:	681b      	ldr	r3, [r3, #0]
200065ce:	685a      	ldr	r2, [r3, #4]
200065d0:	68fb      	ldr	r3, [r7, #12]
200065d2:	681b      	ldr	r3, [r3, #0]
200065d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
200065d8:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
200065da:	2301      	movs	r3, #1
200065dc:	e075      	b.n	200066ca <HAL_I2C_Slave_Transmit+0x232>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
200065de:	68fb      	ldr	r3, [r7, #12]
200065e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200065e2:	781a      	ldrb	r2, [r3, #0]
200065e4:	68fb      	ldr	r3, [r7, #12]
200065e6:	681b      	ldr	r3, [r3, #0]
200065e8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
200065ea:	68fb      	ldr	r3, [r7, #12]
200065ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200065ee:	1c5a      	adds	r2, r3, #1
200065f0:	68fb      	ldr	r3, [r7, #12]
200065f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
200065f4:	68fb      	ldr	r3, [r7, #12]
200065f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
200065f8:	b29b      	uxth	r3, r3
200065fa:	3b01      	subs	r3, #1
200065fc:	b29a      	uxth	r2, r3
200065fe:	68fb      	ldr	r3, [r7, #12]
20006600:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
20006602:	68fb      	ldr	r3, [r7, #12]
20006604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20006606:	b29b      	uxth	r3, r3
20006608:	2b00      	cmp	r3, #0
2000660a:	d1d6      	bne.n	200065ba <HAL_I2C_Slave_Transmit+0x122>
    }

    /* Wait until AF flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
2000660c:	697b      	ldr	r3, [r7, #20]
2000660e:	9300      	str	r3, [sp, #0]
20006610:	683b      	ldr	r3, [r7, #0]
20006612:	2200      	movs	r2, #0
20006614:	2110      	movs	r1, #16
20006616:	68f8      	ldr	r0, [r7, #12]
20006618:	f003 ff38 	bl	2000a48c <I2C_WaitOnFlagUntilTimeout>
2000661c:	4603      	mov	r3, r0
2000661e:	2b00      	cmp	r3, #0
20006620:	d009      	beq.n	20006636 <HAL_I2C_Slave_Transmit+0x19e>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
20006622:	68fb      	ldr	r3, [r7, #12]
20006624:	681b      	ldr	r3, [r3, #0]
20006626:	685a      	ldr	r2, [r3, #4]
20006628:	68fb      	ldr	r3, [r7, #12]
2000662a:	681b      	ldr	r3, [r3, #0]
2000662c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
20006630:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
20006632:	2301      	movs	r3, #1
20006634:	e049      	b.n	200066ca <HAL_I2C_Slave_Transmit+0x232>
    }

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
20006636:	68f8      	ldr	r0, [r7, #12]
20006638:	f003 fdd3 	bl	2000a1e2 <I2C_Flush_TXDR>

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2000663c:	68fb      	ldr	r3, [r7, #12]
2000663e:	681b      	ldr	r3, [r3, #0]
20006640:	2210      	movs	r2, #16
20006642:	61da      	str	r2, [r3, #28]

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
20006644:	697a      	ldr	r2, [r7, #20]
20006646:	6839      	ldr	r1, [r7, #0]
20006648:	68f8      	ldr	r0, [r7, #12]
2000664a:	f003 ff9f 	bl	2000a58c <I2C_WaitOnSTOPFlagUntilTimeout>
2000664e:	4603      	mov	r3, r0
20006650:	2b00      	cmp	r3, #0
20006652:	d009      	beq.n	20006668 <HAL_I2C_Slave_Transmit+0x1d0>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
20006654:	68fb      	ldr	r3, [r7, #12]
20006656:	681b      	ldr	r3, [r3, #0]
20006658:	685a      	ldr	r2, [r3, #4]
2000665a:	68fb      	ldr	r3, [r7, #12]
2000665c:	681b      	ldr	r3, [r3, #0]
2000665e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
20006662:	605a      	str	r2, [r3, #4]

      return HAL_ERROR;
20006664:	2301      	movs	r3, #1
20006666:	e030      	b.n	200066ca <HAL_I2C_Slave_Transmit+0x232>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
20006668:	68fb      	ldr	r3, [r7, #12]
2000666a:	681b      	ldr	r3, [r3, #0]
2000666c:	2220      	movs	r2, #32
2000666e:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
20006670:	697b      	ldr	r3, [r7, #20]
20006672:	9300      	str	r3, [sp, #0]
20006674:	683b      	ldr	r3, [r7, #0]
20006676:	2201      	movs	r2, #1
20006678:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2000667c:	68f8      	ldr	r0, [r7, #12]
2000667e:	f003 ff05 	bl	2000a48c <I2C_WaitOnFlagUntilTimeout>
20006682:	4603      	mov	r3, r0
20006684:	2b00      	cmp	r3, #0
20006686:	d009      	beq.n	2000669c <HAL_I2C_Slave_Transmit+0x204>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
20006688:	68fb      	ldr	r3, [r7, #12]
2000668a:	681b      	ldr	r3, [r3, #0]
2000668c:	685a      	ldr	r2, [r3, #4]
2000668e:	68fb      	ldr	r3, [r7, #12]
20006690:	681b      	ldr	r3, [r3, #0]
20006692:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
20006696:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
20006698:	2301      	movs	r3, #1
2000669a:	e016      	b.n	200066ca <HAL_I2C_Slave_Transmit+0x232>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
2000669c:	68fb      	ldr	r3, [r7, #12]
2000669e:	681b      	ldr	r3, [r3, #0]
200066a0:	685a      	ldr	r2, [r3, #4]
200066a2:	68fb      	ldr	r3, [r7, #12]
200066a4:	681b      	ldr	r3, [r3, #0]
200066a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
200066aa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
200066ac:	68fb      	ldr	r3, [r7, #12]
200066ae:	2220      	movs	r2, #32
200066b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
200066b4:	68fb      	ldr	r3, [r7, #12]
200066b6:	2200      	movs	r2, #0
200066b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
200066bc:	68fb      	ldr	r3, [r7, #12]
200066be:	2200      	movs	r2, #0
200066c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
200066c4:	2300      	movs	r3, #0
200066c6:	e000      	b.n	200066ca <HAL_I2C_Slave_Transmit+0x232>
  }
  else
  {
    return HAL_BUSY;
200066c8:	2302      	movs	r3, #2
  }
}
200066ca:	4618      	mov	r0, r3
200066cc:	3718      	adds	r7, #24
200066ce:	46bd      	mov	sp, r7
200066d0:	bd80      	pop	{r7, pc}

200066d2 <HAL_I2C_Slave_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                        uint32_t Timeout)
{
200066d2:	b580      	push	{r7, lr}
200066d4:	b088      	sub	sp, #32
200066d6:	af02      	add	r7, sp, #8
200066d8:	60f8      	str	r0, [r7, #12]
200066da:	60b9      	str	r1, [r7, #8]
200066dc:	603b      	str	r3, [r7, #0]
200066de:	4613      	mov	r3, r2
200066e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
200066e2:	68fb      	ldr	r3, [r7, #12]
200066e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
200066e8:	b2db      	uxtb	r3, r3
200066ea:	2b20      	cmp	r3, #32
200066ec:	f040 80fc 	bne.w	200068e8 <HAL_I2C_Slave_Receive+0x216>
  {
    if ((pData == NULL) || (Size == 0U))
200066f0:	68bb      	ldr	r3, [r7, #8]
200066f2:	2b00      	cmp	r3, #0
200066f4:	d002      	beq.n	200066fc <HAL_I2C_Slave_Receive+0x2a>
200066f6:	88fb      	ldrh	r3, [r7, #6]
200066f8:	2b00      	cmp	r3, #0
200066fa:	d105      	bne.n	20006708 <HAL_I2C_Slave_Receive+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
200066fc:	68fb      	ldr	r3, [r7, #12]
200066fe:	f44f 7200 	mov.w	r2, #512	; 0x200
20006702:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
20006704:	2301      	movs	r3, #1
20006706:	e0f0      	b.n	200068ea <HAL_I2C_Slave_Receive+0x218>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
20006708:	68fb      	ldr	r3, [r7, #12]
2000670a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2000670e:	2b01      	cmp	r3, #1
20006710:	d101      	bne.n	20006716 <HAL_I2C_Slave_Receive+0x44>
20006712:	2302      	movs	r3, #2
20006714:	e0e9      	b.n	200068ea <HAL_I2C_Slave_Receive+0x218>
20006716:	68fb      	ldr	r3, [r7, #12]
20006718:	2201      	movs	r2, #1
2000671a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2000671e:	f7fb fb1b 	bl	20001d58 <HAL_GetTick>
20006722:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
20006724:	68fb      	ldr	r3, [r7, #12]
20006726:	2222      	movs	r2, #34	; 0x22
20006728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2000672c:	68fb      	ldr	r3, [r7, #12]
2000672e:	2220      	movs	r2, #32
20006730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
20006734:	68fb      	ldr	r3, [r7, #12]
20006736:	2200      	movs	r2, #0
20006738:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2000673a:	68fb      	ldr	r3, [r7, #12]
2000673c:	68ba      	ldr	r2, [r7, #8]
2000673e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
20006740:	68fb      	ldr	r3, [r7, #12]
20006742:	88fa      	ldrh	r2, [r7, #6]
20006744:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize = hi2c->XferCount;
20006746:	68fb      	ldr	r3, [r7, #12]
20006748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2000674a:	b29a      	uxth	r2, r3
2000674c:	68fb      	ldr	r3, [r7, #12]
2000674e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferISR   = NULL;
20006750:	68fb      	ldr	r3, [r7, #12]
20006752:	2200      	movs	r2, #0
20006754:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
20006756:	68fb      	ldr	r3, [r7, #12]
20006758:	681b      	ldr	r3, [r3, #0]
2000675a:	685a      	ldr	r2, [r3, #4]
2000675c:	68fb      	ldr	r3, [r7, #12]
2000675e:	681b      	ldr	r3, [r3, #0]
20006760:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
20006764:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
20006766:	697b      	ldr	r3, [r7, #20]
20006768:	9300      	str	r3, [sp, #0]
2000676a:	683b      	ldr	r3, [r7, #0]
2000676c:	2200      	movs	r2, #0
2000676e:	2108      	movs	r1, #8
20006770:	68f8      	ldr	r0, [r7, #12]
20006772:	f003 fe8b 	bl	2000a48c <I2C_WaitOnFlagUntilTimeout>
20006776:	4603      	mov	r3, r0
20006778:	2b00      	cmp	r3, #0
2000677a:	d009      	beq.n	20006790 <HAL_I2C_Slave_Receive+0xbe>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2000677c:	68fb      	ldr	r3, [r7, #12]
2000677e:	681b      	ldr	r3, [r3, #0]
20006780:	685a      	ldr	r2, [r3, #4]
20006782:	68fb      	ldr	r3, [r7, #12]
20006784:	681b      	ldr	r3, [r3, #0]
20006786:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2000678a:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2000678c:	2301      	movs	r3, #1
2000678e:	e0ac      	b.n	200068ea <HAL_I2C_Slave_Receive+0x218>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
20006790:	68fb      	ldr	r3, [r7, #12]
20006792:	681b      	ldr	r3, [r3, #0]
20006794:	2208      	movs	r2, #8
20006796:	61da      	str	r2, [r3, #28]

    /* Wait until DIR flag is reset Receiver mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
20006798:	697b      	ldr	r3, [r7, #20]
2000679a:	9300      	str	r3, [sp, #0]
2000679c:	683b      	ldr	r3, [r7, #0]
2000679e:	2201      	movs	r2, #1
200067a0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
200067a4:	68f8      	ldr	r0, [r7, #12]
200067a6:	f003 fe71 	bl	2000a48c <I2C_WaitOnFlagUntilTimeout>
200067aa:	4603      	mov	r3, r0
200067ac:	2b00      	cmp	r3, #0
200067ae:	d054      	beq.n	2000685a <HAL_I2C_Slave_Receive+0x188>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
200067b0:	68fb      	ldr	r3, [r7, #12]
200067b2:	681b      	ldr	r3, [r3, #0]
200067b4:	685a      	ldr	r2, [r3, #4]
200067b6:	68fb      	ldr	r3, [r7, #12]
200067b8:	681b      	ldr	r3, [r3, #0]
200067ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
200067be:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
200067c0:	2301      	movs	r3, #1
200067c2:	e092      	b.n	200068ea <HAL_I2C_Slave_Receive+0x218>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
200067c4:	697a      	ldr	r2, [r7, #20]
200067c6:	6839      	ldr	r1, [r7, #0]
200067c8:	68f8      	ldr	r0, [r7, #12]
200067ca:	f003 ff1b 	bl	2000a604 <I2C_WaitOnRXNEFlagUntilTimeout>
200067ce:	4603      	mov	r3, r0
200067d0:	2b00      	cmp	r3, #0
200067d2:	d029      	beq.n	20006828 <HAL_I2C_Slave_Receive+0x156>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
200067d4:	68fb      	ldr	r3, [r7, #12]
200067d6:	681b      	ldr	r3, [r3, #0]
200067d8:	685a      	ldr	r2, [r3, #4]
200067da:	68fb      	ldr	r3, [r7, #12]
200067dc:	681b      	ldr	r3, [r3, #0]
200067de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
200067e2:	605a      	str	r2, [r3, #4]

        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
200067e4:	68fb      	ldr	r3, [r7, #12]
200067e6:	681b      	ldr	r3, [r3, #0]
200067e8:	699b      	ldr	r3, [r3, #24]
200067ea:	f003 0304 	and.w	r3, r3, #4
200067ee:	2b04      	cmp	r3, #4
200067f0:	d118      	bne.n	20006824 <HAL_I2C_Slave_Receive+0x152>
        {
          /* Read data from RXDR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
200067f2:	68fb      	ldr	r3, [r7, #12]
200067f4:	681b      	ldr	r3, [r3, #0]
200067f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
200067f8:	68fb      	ldr	r3, [r7, #12]
200067fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200067fc:	b2d2      	uxtb	r2, r2
200067fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
20006800:	68fb      	ldr	r3, [r7, #12]
20006802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20006804:	1c5a      	adds	r2, r3, #1
20006806:	68fb      	ldr	r3, [r7, #12]
20006808:	625a      	str	r2, [r3, #36]	; 0x24

          hi2c->XferCount--;
2000680a:	68fb      	ldr	r3, [r7, #12]
2000680c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2000680e:	b29b      	uxth	r3, r3
20006810:	3b01      	subs	r3, #1
20006812:	b29a      	uxth	r2, r3
20006814:	68fb      	ldr	r3, [r7, #12]
20006816:	855a      	strh	r2, [r3, #42]	; 0x2a
          hi2c->XferSize--;
20006818:	68fb      	ldr	r3, [r7, #12]
2000681a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2000681c:	3b01      	subs	r3, #1
2000681e:	b29a      	uxth	r2, r3
20006820:	68fb      	ldr	r3, [r7, #12]
20006822:	851a      	strh	r2, [r3, #40]	; 0x28
        }

        return HAL_ERROR;
20006824:	2301      	movs	r3, #1
20006826:	e060      	b.n	200068ea <HAL_I2C_Slave_Receive+0x218>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
20006828:	68fb      	ldr	r3, [r7, #12]
2000682a:	681b      	ldr	r3, [r3, #0]
2000682c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2000682e:	68fb      	ldr	r3, [r7, #12]
20006830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20006832:	b2d2      	uxtb	r2, r2
20006834:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
20006836:	68fb      	ldr	r3, [r7, #12]
20006838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000683a:	1c5a      	adds	r2, r3, #1
2000683c:	68fb      	ldr	r3, [r7, #12]
2000683e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
20006840:	68fb      	ldr	r3, [r7, #12]
20006842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20006844:	b29b      	uxth	r3, r3
20006846:	3b01      	subs	r3, #1
20006848:	b29a      	uxth	r2, r3
2000684a:	68fb      	ldr	r3, [r7, #12]
2000684c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
2000684e:	68fb      	ldr	r3, [r7, #12]
20006850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20006852:	3b01      	subs	r3, #1
20006854:	b29a      	uxth	r2, r3
20006856:	68fb      	ldr	r3, [r7, #12]
20006858:	851a      	strh	r2, [r3, #40]	; 0x28
    while (hi2c->XferCount > 0U)
2000685a:	68fb      	ldr	r3, [r7, #12]
2000685c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2000685e:	b29b      	uxth	r3, r3
20006860:	2b00      	cmp	r3, #0
20006862:	d1af      	bne.n	200067c4 <HAL_I2C_Slave_Receive+0xf2>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
20006864:	697a      	ldr	r2, [r7, #20]
20006866:	6839      	ldr	r1, [r7, #0]
20006868:	68f8      	ldr	r0, [r7, #12]
2000686a:	f003 fe8f 	bl	2000a58c <I2C_WaitOnSTOPFlagUntilTimeout>
2000686e:	4603      	mov	r3, r0
20006870:	2b00      	cmp	r3, #0
20006872:	d009      	beq.n	20006888 <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
20006874:	68fb      	ldr	r3, [r7, #12]
20006876:	681b      	ldr	r3, [r3, #0]
20006878:	685a      	ldr	r2, [r3, #4]
2000687a:	68fb      	ldr	r3, [r7, #12]
2000687c:	681b      	ldr	r3, [r3, #0]
2000687e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
20006882:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
20006884:	2301      	movs	r3, #1
20006886:	e030      	b.n	200068ea <HAL_I2C_Slave_Receive+0x218>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
20006888:	68fb      	ldr	r3, [r7, #12]
2000688a:	681b      	ldr	r3, [r3, #0]
2000688c:	2220      	movs	r2, #32
2000688e:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
20006890:	697b      	ldr	r3, [r7, #20]
20006892:	9300      	str	r3, [sp, #0]
20006894:	683b      	ldr	r3, [r7, #0]
20006896:	2201      	movs	r2, #1
20006898:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2000689c:	68f8      	ldr	r0, [r7, #12]
2000689e:	f003 fdf5 	bl	2000a48c <I2C_WaitOnFlagUntilTimeout>
200068a2:	4603      	mov	r3, r0
200068a4:	2b00      	cmp	r3, #0
200068a6:	d009      	beq.n	200068bc <HAL_I2C_Slave_Receive+0x1ea>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
200068a8:	68fb      	ldr	r3, [r7, #12]
200068aa:	681b      	ldr	r3, [r3, #0]
200068ac:	685a      	ldr	r2, [r3, #4]
200068ae:	68fb      	ldr	r3, [r7, #12]
200068b0:	681b      	ldr	r3, [r3, #0]
200068b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
200068b6:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
200068b8:	2301      	movs	r3, #1
200068ba:	e016      	b.n	200068ea <HAL_I2C_Slave_Receive+0x218>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
200068bc:	68fb      	ldr	r3, [r7, #12]
200068be:	681b      	ldr	r3, [r3, #0]
200068c0:	685a      	ldr	r2, [r3, #4]
200068c2:	68fb      	ldr	r3, [r7, #12]
200068c4:	681b      	ldr	r3, [r3, #0]
200068c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
200068ca:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
200068cc:	68fb      	ldr	r3, [r7, #12]
200068ce:	2220      	movs	r2, #32
200068d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
200068d4:	68fb      	ldr	r3, [r7, #12]
200068d6:	2200      	movs	r2, #0
200068d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
200068dc:	68fb      	ldr	r3, [r7, #12]
200068de:	2200      	movs	r2, #0
200068e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
200068e4:	2300      	movs	r3, #0
200068e6:	e000      	b.n	200068ea <HAL_I2C_Slave_Receive+0x218>
  }
  else
  {
    return HAL_BUSY;
200068e8:	2302      	movs	r3, #2
  }
}
200068ea:	4618      	mov	r0, r3
200068ec:	3718      	adds	r7, #24
200068ee:	46bd      	mov	sp, r7
200068f0:	bd80      	pop	{r7, pc}
	...

200068f4 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
200068f4:	b580      	push	{r7, lr}
200068f6:	b088      	sub	sp, #32
200068f8:	af02      	add	r7, sp, #8
200068fa:	60f8      	str	r0, [r7, #12]
200068fc:	607a      	str	r2, [r7, #4]
200068fe:	461a      	mov	r2, r3
20006900:	460b      	mov	r3, r1
20006902:	817b      	strh	r3, [r7, #10]
20006904:	4613      	mov	r3, r2
20006906:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
20006908:	68fb      	ldr	r3, [r7, #12]
2000690a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000690e:	b2db      	uxtb	r3, r3
20006910:	2b20      	cmp	r3, #32
20006912:	d153      	bne.n	200069bc <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
20006914:	68fb      	ldr	r3, [r7, #12]
20006916:	681b      	ldr	r3, [r3, #0]
20006918:	699b      	ldr	r3, [r3, #24]
2000691a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2000691e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20006922:	d101      	bne.n	20006928 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
20006924:	2302      	movs	r3, #2
20006926:	e04a      	b.n	200069be <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
20006928:	68fb      	ldr	r3, [r7, #12]
2000692a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2000692e:	2b01      	cmp	r3, #1
20006930:	d101      	bne.n	20006936 <HAL_I2C_Master_Transmit_IT+0x42>
20006932:	2302      	movs	r3, #2
20006934:	e043      	b.n	200069be <HAL_I2C_Master_Transmit_IT+0xca>
20006936:	68fb      	ldr	r3, [r7, #12]
20006938:	2201      	movs	r2, #1
2000693a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2000693e:	68fb      	ldr	r3, [r7, #12]
20006940:	2221      	movs	r2, #33	; 0x21
20006942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
20006946:	68fb      	ldr	r3, [r7, #12]
20006948:	2210      	movs	r2, #16
2000694a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2000694e:	68fb      	ldr	r3, [r7, #12]
20006950:	2200      	movs	r2, #0
20006952:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
20006954:	68fb      	ldr	r3, [r7, #12]
20006956:	687a      	ldr	r2, [r7, #4]
20006958:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2000695a:	68fb      	ldr	r3, [r7, #12]
2000695c:	893a      	ldrh	r2, [r7, #8]
2000695e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
20006960:	68fb      	ldr	r3, [r7, #12]
20006962:	4a19      	ldr	r2, [pc, #100]	; (200069c8 <HAL_I2C_Master_Transmit_IT+0xd4>)
20006964:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
20006966:	68fb      	ldr	r3, [r7, #12]
20006968:	4a18      	ldr	r2, [pc, #96]	; (200069cc <HAL_I2C_Master_Transmit_IT+0xd8>)
2000696a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000696c:	68fb      	ldr	r3, [r7, #12]
2000696e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20006970:	b29b      	uxth	r3, r3
20006972:	2bff      	cmp	r3, #255	; 0xff
20006974:	d906      	bls.n	20006984 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
20006976:	68fb      	ldr	r3, [r7, #12]
20006978:	22ff      	movs	r2, #255	; 0xff
2000697a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
2000697c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
20006980:	617b      	str	r3, [r7, #20]
20006982:	e007      	b.n	20006994 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
20006984:	68fb      	ldr	r3, [r7, #12]
20006986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20006988:	b29a      	uxth	r2, r3
2000698a:	68fb      	ldr	r3, [r7, #12]
2000698c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
2000698e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
20006992:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
20006994:	68fb      	ldr	r3, [r7, #12]
20006996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20006998:	b2da      	uxtb	r2, r3
2000699a:	8979      	ldrh	r1, [r7, #10]
2000699c:	4b0c      	ldr	r3, [pc, #48]	; (200069d0 <HAL_I2C_Master_Transmit_IT+0xdc>)
2000699e:	9300      	str	r3, [sp, #0]
200069a0:	697b      	ldr	r3, [r7, #20]
200069a2:	68f8      	ldr	r0, [r7, #12]
200069a4:	f003 ff94 	bl	2000a8d0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
200069a8:	68fb      	ldr	r3, [r7, #12]
200069aa:	2200      	movs	r2, #0
200069ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
200069b0:	2101      	movs	r1, #1
200069b2:	68f8      	ldr	r0, [r7, #12]
200069b4:	f003 ffbe 	bl	2000a934 <I2C_Enable_IRQ>

    return HAL_OK;
200069b8:	2300      	movs	r3, #0
200069ba:	e000      	b.n	200069be <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
200069bc:	2302      	movs	r3, #2
  }
}
200069be:	4618      	mov	r0, r3
200069c0:	3718      	adds	r7, #24
200069c2:	46bd      	mov	sp, r7
200069c4:	bd80      	pop	{r7, pc}
200069c6:	bf00      	nop
200069c8:	ffff0000 	.word	0xffff0000
200069cc:	20009013 	.word	0x20009013
200069d0:	80002000 	.word	0x80002000

200069d4 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
200069d4:	b580      	push	{r7, lr}
200069d6:	b088      	sub	sp, #32
200069d8:	af02      	add	r7, sp, #8
200069da:	60f8      	str	r0, [r7, #12]
200069dc:	607a      	str	r2, [r7, #4]
200069de:	461a      	mov	r2, r3
200069e0:	460b      	mov	r3, r1
200069e2:	817b      	strh	r3, [r7, #10]
200069e4:	4613      	mov	r3, r2
200069e6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
200069e8:	68fb      	ldr	r3, [r7, #12]
200069ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
200069ee:	b2db      	uxtb	r3, r3
200069f0:	2b20      	cmp	r3, #32
200069f2:	d153      	bne.n	20006a9c <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
200069f4:	68fb      	ldr	r3, [r7, #12]
200069f6:	681b      	ldr	r3, [r3, #0]
200069f8:	699b      	ldr	r3, [r3, #24]
200069fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
200069fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20006a02:	d101      	bne.n	20006a08 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
20006a04:	2302      	movs	r3, #2
20006a06:	e04a      	b.n	20006a9e <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
20006a08:	68fb      	ldr	r3, [r7, #12]
20006a0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
20006a0e:	2b01      	cmp	r3, #1
20006a10:	d101      	bne.n	20006a16 <HAL_I2C_Master_Receive_IT+0x42>
20006a12:	2302      	movs	r3, #2
20006a14:	e043      	b.n	20006a9e <HAL_I2C_Master_Receive_IT+0xca>
20006a16:	68fb      	ldr	r3, [r7, #12]
20006a18:	2201      	movs	r2, #1
20006a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
20006a1e:	68fb      	ldr	r3, [r7, #12]
20006a20:	2222      	movs	r2, #34	; 0x22
20006a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
20006a26:	68fb      	ldr	r3, [r7, #12]
20006a28:	2210      	movs	r2, #16
20006a2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
20006a2e:	68fb      	ldr	r3, [r7, #12]
20006a30:	2200      	movs	r2, #0
20006a32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
20006a34:	68fb      	ldr	r3, [r7, #12]
20006a36:	687a      	ldr	r2, [r7, #4]
20006a38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
20006a3a:	68fb      	ldr	r3, [r7, #12]
20006a3c:	893a      	ldrh	r2, [r7, #8]
20006a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
20006a40:	68fb      	ldr	r3, [r7, #12]
20006a42:	4a19      	ldr	r2, [pc, #100]	; (20006aa8 <HAL_I2C_Master_Receive_IT+0xd4>)
20006a44:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
20006a46:	68fb      	ldr	r3, [r7, #12]
20006a48:	4a18      	ldr	r2, [pc, #96]	; (20006aac <HAL_I2C_Master_Receive_IT+0xd8>)
20006a4a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
20006a4c:	68fb      	ldr	r3, [r7, #12]
20006a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20006a50:	b29b      	uxth	r3, r3
20006a52:	2bff      	cmp	r3, #255	; 0xff
20006a54:	d906      	bls.n	20006a64 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
20006a56:	68fb      	ldr	r3, [r7, #12]
20006a58:	22ff      	movs	r2, #255	; 0xff
20006a5a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
20006a5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
20006a60:	617b      	str	r3, [r7, #20]
20006a62:	e007      	b.n	20006a74 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
20006a64:	68fb      	ldr	r3, [r7, #12]
20006a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20006a68:	b29a      	uxth	r2, r3
20006a6a:	68fb      	ldr	r3, [r7, #12]
20006a6c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
20006a6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
20006a72:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
20006a74:	68fb      	ldr	r3, [r7, #12]
20006a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20006a78:	b2da      	uxtb	r2, r3
20006a7a:	8979      	ldrh	r1, [r7, #10]
20006a7c:	4b0c      	ldr	r3, [pc, #48]	; (20006ab0 <HAL_I2C_Master_Receive_IT+0xdc>)
20006a7e:	9300      	str	r3, [sp, #0]
20006a80:	697b      	ldr	r3, [r7, #20]
20006a82:	68f8      	ldr	r0, [r7, #12]
20006a84:	f003 ff24 	bl	2000a8d0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
20006a88:	68fb      	ldr	r3, [r7, #12]
20006a8a:	2200      	movs	r2, #0
20006a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
20006a90:	2102      	movs	r1, #2
20006a92:	68f8      	ldr	r0, [r7, #12]
20006a94:	f003 ff4e 	bl	2000a934 <I2C_Enable_IRQ>

    return HAL_OK;
20006a98:	2300      	movs	r3, #0
20006a9a:	e000      	b.n	20006a9e <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
20006a9c:	2302      	movs	r3, #2
  }
}
20006a9e:	4618      	mov	r0, r3
20006aa0:	3718      	adds	r7, #24
20006aa2:	46bd      	mov	sp, r7
20006aa4:	bd80      	pop	{r7, pc}
20006aa6:	bf00      	nop
20006aa8:	ffff0000 	.word	0xffff0000
20006aac:	20009013 	.word	0x20009013
20006ab0:	80002400 	.word	0x80002400

20006ab4 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
20006ab4:	b580      	push	{r7, lr}
20006ab6:	b084      	sub	sp, #16
20006ab8:	af00      	add	r7, sp, #0
20006aba:	60f8      	str	r0, [r7, #12]
20006abc:	60b9      	str	r1, [r7, #8]
20006abe:	4613      	mov	r3, r2
20006ac0:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
20006ac2:	68fb      	ldr	r3, [r7, #12]
20006ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20006ac8:	b2db      	uxtb	r3, r3
20006aca:	2b20      	cmp	r3, #32
20006acc:	d139      	bne.n	20006b42 <HAL_I2C_Slave_Transmit_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
20006ace:	68fb      	ldr	r3, [r7, #12]
20006ad0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
20006ad4:	2b01      	cmp	r3, #1
20006ad6:	d101      	bne.n	20006adc <HAL_I2C_Slave_Transmit_IT+0x28>
20006ad8:	2302      	movs	r3, #2
20006ada:	e033      	b.n	20006b44 <HAL_I2C_Slave_Transmit_IT+0x90>
20006adc:	68fb      	ldr	r3, [r7, #12]
20006ade:	2201      	movs	r2, #1
20006ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
20006ae4:	68fb      	ldr	r3, [r7, #12]
20006ae6:	2221      	movs	r2, #33	; 0x21
20006ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
20006aec:	68fb      	ldr	r3, [r7, #12]
20006aee:	2220      	movs	r2, #32
20006af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
20006af4:	68fb      	ldr	r3, [r7, #12]
20006af6:	2200      	movs	r2, #0
20006af8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
20006afa:	68fb      	ldr	r3, [r7, #12]
20006afc:	681b      	ldr	r3, [r3, #0]
20006afe:	685a      	ldr	r2, [r3, #4]
20006b00:	68fb      	ldr	r3, [r7, #12]
20006b02:	681b      	ldr	r3, [r3, #0]
20006b04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
20006b08:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
20006b0a:	68fb      	ldr	r3, [r7, #12]
20006b0c:	68ba      	ldr	r2, [r7, #8]
20006b0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
20006b10:	68fb      	ldr	r3, [r7, #12]
20006b12:	88fa      	ldrh	r2, [r7, #6]
20006b14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
20006b16:	68fb      	ldr	r3, [r7, #12]
20006b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20006b1a:	b29a      	uxth	r2, r3
20006b1c:	68fb      	ldr	r3, [r7, #12]
20006b1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
20006b20:	68fb      	ldr	r3, [r7, #12]
20006b22:	4a0a      	ldr	r2, [pc, #40]	; (20006b4c <HAL_I2C_Slave_Transmit_IT+0x98>)
20006b24:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
20006b26:	68fb      	ldr	r3, [r7, #12]
20006b28:	4a09      	ldr	r2, [pc, #36]	; (20006b50 <HAL_I2C_Slave_Transmit_IT+0x9c>)
20006b2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
20006b2c:	68fb      	ldr	r3, [r7, #12]
20006b2e:	2200      	movs	r2, #0
20006b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
20006b34:	f248 0101 	movw	r1, #32769	; 0x8001
20006b38:	68f8      	ldr	r0, [r7, #12]
20006b3a:	f003 fefb 	bl	2000a934 <I2C_Enable_IRQ>

    return HAL_OK;
20006b3e:	2300      	movs	r3, #0
20006b40:	e000      	b.n	20006b44 <HAL_I2C_Slave_Transmit_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
20006b42:	2302      	movs	r3, #2
  }
}
20006b44:	4618      	mov	r0, r3
20006b46:	3710      	adds	r7, #16
20006b48:	46bd      	mov	sp, r7
20006b4a:	bd80      	pop	{r7, pc}
20006b4c:	ffff0000 	.word	0xffff0000
20006b50:	20009263 	.word	0x20009263

20006b54 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
20006b54:	b580      	push	{r7, lr}
20006b56:	b084      	sub	sp, #16
20006b58:	af00      	add	r7, sp, #0
20006b5a:	60f8      	str	r0, [r7, #12]
20006b5c:	60b9      	str	r1, [r7, #8]
20006b5e:	4613      	mov	r3, r2
20006b60:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
20006b62:	68fb      	ldr	r3, [r7, #12]
20006b64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20006b68:	b2db      	uxtb	r3, r3
20006b6a:	2b20      	cmp	r3, #32
20006b6c:	d139      	bne.n	20006be2 <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
20006b6e:	68fb      	ldr	r3, [r7, #12]
20006b70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
20006b74:	2b01      	cmp	r3, #1
20006b76:	d101      	bne.n	20006b7c <HAL_I2C_Slave_Receive_IT+0x28>
20006b78:	2302      	movs	r3, #2
20006b7a:	e033      	b.n	20006be4 <HAL_I2C_Slave_Receive_IT+0x90>
20006b7c:	68fb      	ldr	r3, [r7, #12]
20006b7e:	2201      	movs	r2, #1
20006b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
20006b84:	68fb      	ldr	r3, [r7, #12]
20006b86:	2222      	movs	r2, #34	; 0x22
20006b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
20006b8c:	68fb      	ldr	r3, [r7, #12]
20006b8e:	2220      	movs	r2, #32
20006b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
20006b94:	68fb      	ldr	r3, [r7, #12]
20006b96:	2200      	movs	r2, #0
20006b98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
20006b9a:	68fb      	ldr	r3, [r7, #12]
20006b9c:	681b      	ldr	r3, [r3, #0]
20006b9e:	685a      	ldr	r2, [r3, #4]
20006ba0:	68fb      	ldr	r3, [r7, #12]
20006ba2:	681b      	ldr	r3, [r3, #0]
20006ba4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
20006ba8:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
20006baa:	68fb      	ldr	r3, [r7, #12]
20006bac:	68ba      	ldr	r2, [r7, #8]
20006bae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
20006bb0:	68fb      	ldr	r3, [r7, #12]
20006bb2:	88fa      	ldrh	r2, [r7, #6]
20006bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
20006bb6:	68fb      	ldr	r3, [r7, #12]
20006bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20006bba:	b29a      	uxth	r2, r3
20006bbc:	68fb      	ldr	r3, [r7, #12]
20006bbe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
20006bc0:	68fb      	ldr	r3, [r7, #12]
20006bc2:	4a0a      	ldr	r2, [pc, #40]	; (20006bec <HAL_I2C_Slave_Receive_IT+0x98>)
20006bc4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
20006bc6:	68fb      	ldr	r3, [r7, #12]
20006bc8:	4a09      	ldr	r2, [pc, #36]	; (20006bf0 <HAL_I2C_Slave_Receive_IT+0x9c>)
20006bca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
20006bcc:	68fb      	ldr	r3, [r7, #12]
20006bce:	2200      	movs	r2, #0
20006bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
20006bd4:	f248 0102 	movw	r1, #32770	; 0x8002
20006bd8:	68f8      	ldr	r0, [r7, #12]
20006bda:	f003 feab 	bl	2000a934 <I2C_Enable_IRQ>

    return HAL_OK;
20006bde:	2300      	movs	r3, #0
20006be0:	e000      	b.n	20006be4 <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
20006be2:	2302      	movs	r3, #2
  }
}
20006be4:	4618      	mov	r0, r3
20006be6:	3710      	adds	r7, #16
20006be8:	46bd      	mov	sp, r7
20006bea:	bd80      	pop	{r7, pc}
20006bec:	ffff0000 	.word	0xffff0000
20006bf0:	20009263 	.word	0x20009263

20006bf4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
20006bf4:	b580      	push	{r7, lr}
20006bf6:	b088      	sub	sp, #32
20006bf8:	af02      	add	r7, sp, #8
20006bfa:	60f8      	str	r0, [r7, #12]
20006bfc:	607a      	str	r2, [r7, #4]
20006bfe:	461a      	mov	r2, r3
20006c00:	460b      	mov	r3, r1
20006c02:	817b      	strh	r3, [r7, #10]
20006c04:	4613      	mov	r3, r2
20006c06:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
20006c08:	68fb      	ldr	r3, [r7, #12]
20006c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20006c0e:	b2db      	uxtb	r3, r3
20006c10:	2b20      	cmp	r3, #32
20006c12:	f040 80cd 	bne.w	20006db0 <HAL_I2C_Master_Transmit_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
20006c16:	68fb      	ldr	r3, [r7, #12]
20006c18:	681b      	ldr	r3, [r3, #0]
20006c1a:	699b      	ldr	r3, [r3, #24]
20006c1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
20006c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20006c24:	d101      	bne.n	20006c2a <HAL_I2C_Master_Transmit_DMA+0x36>
    {
      return HAL_BUSY;
20006c26:	2302      	movs	r3, #2
20006c28:	e0c3      	b.n	20006db2 <HAL_I2C_Master_Transmit_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
20006c2a:	68fb      	ldr	r3, [r7, #12]
20006c2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
20006c30:	2b01      	cmp	r3, #1
20006c32:	d101      	bne.n	20006c38 <HAL_I2C_Master_Transmit_DMA+0x44>
20006c34:	2302      	movs	r3, #2
20006c36:	e0bc      	b.n	20006db2 <HAL_I2C_Master_Transmit_DMA+0x1be>
20006c38:	68fb      	ldr	r3, [r7, #12]
20006c3a:	2201      	movs	r2, #1
20006c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
20006c40:	68fb      	ldr	r3, [r7, #12]
20006c42:	2221      	movs	r2, #33	; 0x21
20006c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
20006c48:	68fb      	ldr	r3, [r7, #12]
20006c4a:	2210      	movs	r2, #16
20006c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
20006c50:	68fb      	ldr	r3, [r7, #12]
20006c52:	2200      	movs	r2, #0
20006c54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
20006c56:	68fb      	ldr	r3, [r7, #12]
20006c58:	687a      	ldr	r2, [r7, #4]
20006c5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
20006c5c:	68fb      	ldr	r3, [r7, #12]
20006c5e:	893a      	ldrh	r2, [r7, #8]
20006c60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
20006c62:	68fb      	ldr	r3, [r7, #12]
20006c64:	4a55      	ldr	r2, [pc, #340]	; (20006dbc <HAL_I2C_Master_Transmit_DMA+0x1c8>)
20006c66:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
20006c68:	68fb      	ldr	r3, [r7, #12]
20006c6a:	4a55      	ldr	r2, [pc, #340]	; (20006dc0 <HAL_I2C_Master_Transmit_DMA+0x1cc>)
20006c6c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
20006c6e:	68fb      	ldr	r3, [r7, #12]
20006c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20006c72:	b29b      	uxth	r3, r3
20006c74:	2bff      	cmp	r3, #255	; 0xff
20006c76:	d906      	bls.n	20006c86 <HAL_I2C_Master_Transmit_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
20006c78:	68fb      	ldr	r3, [r7, #12]
20006c7a:	22ff      	movs	r2, #255	; 0xff
20006c7c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
20006c7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
20006c82:	617b      	str	r3, [r7, #20]
20006c84:	e007      	b.n	20006c96 <HAL_I2C_Master_Transmit_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
20006c86:	68fb      	ldr	r3, [r7, #12]
20006c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20006c8a:	b29a      	uxth	r2, r3
20006c8c:	68fb      	ldr	r3, [r7, #12]
20006c8e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
20006c90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
20006c94:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
20006c96:	68fb      	ldr	r3, [r7, #12]
20006c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20006c9a:	2b00      	cmp	r3, #0
20006c9c:	d070      	beq.n	20006d80 <HAL_I2C_Master_Transmit_DMA+0x18c>
    {
      if (hi2c->hdmatx != NULL)
20006c9e:	68fb      	ldr	r3, [r7, #12]
20006ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20006ca2:	2b00      	cmp	r3, #0
20006ca4:	d020      	beq.n	20006ce8 <HAL_I2C_Master_Transmit_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
20006ca6:	68fb      	ldr	r3, [r7, #12]
20006ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20006caa:	4a46      	ldr	r2, [pc, #280]	; (20006dc4 <HAL_I2C_Master_Transmit_DMA+0x1d0>)
20006cac:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
20006cae:	68fb      	ldr	r3, [r7, #12]
20006cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20006cb2:	4a45      	ldr	r2, [pc, #276]	; (20006dc8 <HAL_I2C_Master_Transmit_DMA+0x1d4>)
20006cb4:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
20006cb6:	68fb      	ldr	r3, [r7, #12]
20006cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20006cba:	2200      	movs	r2, #0
20006cbc:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
20006cbe:	68fb      	ldr	r3, [r7, #12]
20006cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20006cc2:	2200      	movs	r2, #0
20006cc4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
20006cc6:	68fb      	ldr	r3, [r7, #12]
20006cc8:	6b98      	ldr	r0, [r3, #56]	; 0x38
20006cca:	6879      	ldr	r1, [r7, #4]
20006ccc:	68fb      	ldr	r3, [r7, #12]
20006cce:	681b      	ldr	r3, [r3, #0]
20006cd0:	3328      	adds	r3, #40	; 0x28
20006cd2:	461a      	mov	r2, r3
                                         hi2c->XferSize);
20006cd4:	68fb      	ldr	r3, [r7, #12]
20006cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
20006cd8:	f7fb fe57 	bl	2000298a <HAL_DMA_Start_IT>
20006cdc:	4603      	mov	r3, r0
20006cde:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
20006ce0:	7cfb      	ldrb	r3, [r7, #19]
20006ce2:	2b00      	cmp	r3, #0
20006ce4:	d138      	bne.n	20006d58 <HAL_I2C_Master_Transmit_DMA+0x164>
20006ce6:	e013      	b.n	20006d10 <HAL_I2C_Master_Transmit_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
20006ce8:	68fb      	ldr	r3, [r7, #12]
20006cea:	2220      	movs	r2, #32
20006cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
20006cf0:	68fb      	ldr	r3, [r7, #12]
20006cf2:	2200      	movs	r2, #0
20006cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
20006cf8:	68fb      	ldr	r3, [r7, #12]
20006cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20006cfc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
20006d00:	68fb      	ldr	r3, [r7, #12]
20006d02:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
20006d04:	68fb      	ldr	r3, [r7, #12]
20006d06:	2200      	movs	r2, #0
20006d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
20006d0c:	2301      	movs	r3, #1
20006d0e:	e050      	b.n	20006db2 <HAL_I2C_Master_Transmit_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
20006d10:	68fb      	ldr	r3, [r7, #12]
20006d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20006d14:	b2da      	uxtb	r2, r3
20006d16:	8979      	ldrh	r1, [r7, #10]
20006d18:	4b2c      	ldr	r3, [pc, #176]	; (20006dcc <HAL_I2C_Master_Transmit_DMA+0x1d8>)
20006d1a:	9300      	str	r3, [sp, #0]
20006d1c:	697b      	ldr	r3, [r7, #20]
20006d1e:	68f8      	ldr	r0, [r7, #12]
20006d20:	f003 fdd6 	bl	2000a8d0 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
20006d24:	68fb      	ldr	r3, [r7, #12]
20006d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20006d28:	b29a      	uxth	r2, r3
20006d2a:	68fb      	ldr	r3, [r7, #12]
20006d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20006d2e:	1ad3      	subs	r3, r2, r3
20006d30:	b29a      	uxth	r2, r3
20006d32:	68fb      	ldr	r3, [r7, #12]
20006d34:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
20006d36:	68fb      	ldr	r3, [r7, #12]
20006d38:	2200      	movs	r2, #0
20006d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
20006d3e:	2110      	movs	r1, #16
20006d40:	68f8      	ldr	r0, [r7, #12]
20006d42:	f003 fdf7 	bl	2000a934 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
20006d46:	68fb      	ldr	r3, [r7, #12]
20006d48:	681b      	ldr	r3, [r3, #0]
20006d4a:	681a      	ldr	r2, [r3, #0]
20006d4c:	68fb      	ldr	r3, [r7, #12]
20006d4e:	681b      	ldr	r3, [r3, #0]
20006d50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
20006d54:	601a      	str	r2, [r3, #0]
20006d56:	e029      	b.n	20006dac <HAL_I2C_Master_Transmit_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
20006d58:	68fb      	ldr	r3, [r7, #12]
20006d5a:	2220      	movs	r2, #32
20006d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
20006d60:	68fb      	ldr	r3, [r7, #12]
20006d62:	2200      	movs	r2, #0
20006d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
20006d68:	68fb      	ldr	r3, [r7, #12]
20006d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20006d6c:	f043 0210 	orr.w	r2, r3, #16
20006d70:	68fb      	ldr	r3, [r7, #12]
20006d72:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
20006d74:	68fb      	ldr	r3, [r7, #12]
20006d76:	2200      	movs	r2, #0
20006d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
20006d7c:	2301      	movs	r3, #1
20006d7e:	e018      	b.n	20006db2 <HAL_I2C_Master_Transmit_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
20006d80:	68fb      	ldr	r3, [r7, #12]
20006d82:	4a13      	ldr	r2, [pc, #76]	; (20006dd0 <HAL_I2C_Master_Transmit_DMA+0x1dc>)
20006d84:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
20006d86:	68fb      	ldr	r3, [r7, #12]
20006d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20006d8a:	b2da      	uxtb	r2, r3
20006d8c:	8979      	ldrh	r1, [r7, #10]
20006d8e:	4b0f      	ldr	r3, [pc, #60]	; (20006dcc <HAL_I2C_Master_Transmit_DMA+0x1d8>)
20006d90:	9300      	str	r3, [sp, #0]
20006d92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
20006d96:	68f8      	ldr	r0, [r7, #12]
20006d98:	f003 fd9a 	bl	2000a8d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
20006d9c:	68fb      	ldr	r3, [r7, #12]
20006d9e:	2200      	movs	r2, #0
20006da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
20006da4:	2101      	movs	r1, #1
20006da6:	68f8      	ldr	r0, [r7, #12]
20006da8:	f003 fdc4 	bl	2000a934 <I2C_Enable_IRQ>
    }

    return HAL_OK;
20006dac:	2300      	movs	r3, #0
20006dae:	e000      	b.n	20006db2 <HAL_I2C_Master_Transmit_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
20006db0:	2302      	movs	r3, #2
  }
}
20006db2:	4618      	mov	r0, r3
20006db4:	3718      	adds	r7, #24
20006db6:	46bd      	mov	sp, r7
20006db8:	bd80      	pop	{r7, pc}
20006dba:	bf00      	nop
20006dbc:	ffff0000 	.word	0xffff0000
20006dc0:	20009469 	.word	0x20009469
20006dc4:	2000a22b 	.word	0x2000a22b
20006dc8:	2000a3dd 	.word	0x2000a3dd
20006dcc:	80002000 	.word	0x80002000
20006dd0:	20009013 	.word	0x20009013

20006dd4 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
20006dd4:	b580      	push	{r7, lr}
20006dd6:	b088      	sub	sp, #32
20006dd8:	af02      	add	r7, sp, #8
20006dda:	60f8      	str	r0, [r7, #12]
20006ddc:	607a      	str	r2, [r7, #4]
20006dde:	461a      	mov	r2, r3
20006de0:	460b      	mov	r3, r1
20006de2:	817b      	strh	r3, [r7, #10]
20006de4:	4613      	mov	r3, r2
20006de6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
20006de8:	68fb      	ldr	r3, [r7, #12]
20006dea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20006dee:	b2db      	uxtb	r3, r3
20006df0:	2b20      	cmp	r3, #32
20006df2:	f040 80cd 	bne.w	20006f90 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
20006df6:	68fb      	ldr	r3, [r7, #12]
20006df8:	681b      	ldr	r3, [r3, #0]
20006dfa:	699b      	ldr	r3, [r3, #24]
20006dfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
20006e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20006e04:	d101      	bne.n	20006e0a <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
20006e06:	2302      	movs	r3, #2
20006e08:	e0c3      	b.n	20006f92 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
20006e0a:	68fb      	ldr	r3, [r7, #12]
20006e0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
20006e10:	2b01      	cmp	r3, #1
20006e12:	d101      	bne.n	20006e18 <HAL_I2C_Master_Receive_DMA+0x44>
20006e14:	2302      	movs	r3, #2
20006e16:	e0bc      	b.n	20006f92 <HAL_I2C_Master_Receive_DMA+0x1be>
20006e18:	68fb      	ldr	r3, [r7, #12]
20006e1a:	2201      	movs	r2, #1
20006e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
20006e20:	68fb      	ldr	r3, [r7, #12]
20006e22:	2222      	movs	r2, #34	; 0x22
20006e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
20006e28:	68fb      	ldr	r3, [r7, #12]
20006e2a:	2210      	movs	r2, #16
20006e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
20006e30:	68fb      	ldr	r3, [r7, #12]
20006e32:	2200      	movs	r2, #0
20006e34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
20006e36:	68fb      	ldr	r3, [r7, #12]
20006e38:	687a      	ldr	r2, [r7, #4]
20006e3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
20006e3c:	68fb      	ldr	r3, [r7, #12]
20006e3e:	893a      	ldrh	r2, [r7, #8]
20006e40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
20006e42:	68fb      	ldr	r3, [r7, #12]
20006e44:	4a55      	ldr	r2, [pc, #340]	; (20006f9c <HAL_I2C_Master_Receive_DMA+0x1c8>)
20006e46:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
20006e48:	68fb      	ldr	r3, [r7, #12]
20006e4a:	4a55      	ldr	r2, [pc, #340]	; (20006fa0 <HAL_I2C_Master_Receive_DMA+0x1cc>)
20006e4c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
20006e4e:	68fb      	ldr	r3, [r7, #12]
20006e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20006e52:	b29b      	uxth	r3, r3
20006e54:	2bff      	cmp	r3, #255	; 0xff
20006e56:	d906      	bls.n	20006e66 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
20006e58:	68fb      	ldr	r3, [r7, #12]
20006e5a:	22ff      	movs	r2, #255	; 0xff
20006e5c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
20006e5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
20006e62:	617b      	str	r3, [r7, #20]
20006e64:	e007      	b.n	20006e76 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
20006e66:	68fb      	ldr	r3, [r7, #12]
20006e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20006e6a:	b29a      	uxth	r2, r3
20006e6c:	68fb      	ldr	r3, [r7, #12]
20006e6e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
20006e70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
20006e74:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
20006e76:	68fb      	ldr	r3, [r7, #12]
20006e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20006e7a:	2b00      	cmp	r3, #0
20006e7c:	d070      	beq.n	20006f60 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
20006e7e:	68fb      	ldr	r3, [r7, #12]
20006e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20006e82:	2b00      	cmp	r3, #0
20006e84:	d020      	beq.n	20006ec8 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
20006e86:	68fb      	ldr	r3, [r7, #12]
20006e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20006e8a:	4a46      	ldr	r2, [pc, #280]	; (20006fa4 <HAL_I2C_Master_Receive_DMA+0x1d0>)
20006e8c:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
20006e8e:	68fb      	ldr	r3, [r7, #12]
20006e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20006e92:	4a45      	ldr	r2, [pc, #276]	; (20006fa8 <HAL_I2C_Master_Receive_DMA+0x1d4>)
20006e94:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
20006e96:	68fb      	ldr	r3, [r7, #12]
20006e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20006e9a:	2200      	movs	r2, #0
20006e9c:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
20006e9e:	68fb      	ldr	r3, [r7, #12]
20006ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20006ea2:	2200      	movs	r2, #0
20006ea4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
20006ea6:	68fb      	ldr	r3, [r7, #12]
20006ea8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
20006eaa:	68fb      	ldr	r3, [r7, #12]
20006eac:	681b      	ldr	r3, [r3, #0]
20006eae:	3324      	adds	r3, #36	; 0x24
20006eb0:	4619      	mov	r1, r3
20006eb2:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
20006eb4:	68fb      	ldr	r3, [r7, #12]
20006eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
20006eb8:	f7fb fd67 	bl	2000298a <HAL_DMA_Start_IT>
20006ebc:	4603      	mov	r3, r0
20006ebe:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
20006ec0:	7cfb      	ldrb	r3, [r7, #19]
20006ec2:	2b00      	cmp	r3, #0
20006ec4:	d138      	bne.n	20006f38 <HAL_I2C_Master_Receive_DMA+0x164>
20006ec6:	e013      	b.n	20006ef0 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
20006ec8:	68fb      	ldr	r3, [r7, #12]
20006eca:	2220      	movs	r2, #32
20006ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
20006ed0:	68fb      	ldr	r3, [r7, #12]
20006ed2:	2200      	movs	r2, #0
20006ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
20006ed8:	68fb      	ldr	r3, [r7, #12]
20006eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20006edc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
20006ee0:	68fb      	ldr	r3, [r7, #12]
20006ee2:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
20006ee4:	68fb      	ldr	r3, [r7, #12]
20006ee6:	2200      	movs	r2, #0
20006ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
20006eec:	2301      	movs	r3, #1
20006eee:	e050      	b.n	20006f92 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
20006ef0:	68fb      	ldr	r3, [r7, #12]
20006ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20006ef4:	b2da      	uxtb	r2, r3
20006ef6:	8979      	ldrh	r1, [r7, #10]
20006ef8:	4b2c      	ldr	r3, [pc, #176]	; (20006fac <HAL_I2C_Master_Receive_DMA+0x1d8>)
20006efa:	9300      	str	r3, [sp, #0]
20006efc:	697b      	ldr	r3, [r7, #20]
20006efe:	68f8      	ldr	r0, [r7, #12]
20006f00:	f003 fce6 	bl	2000a8d0 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
20006f04:	68fb      	ldr	r3, [r7, #12]
20006f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20006f08:	b29a      	uxth	r2, r3
20006f0a:	68fb      	ldr	r3, [r7, #12]
20006f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20006f0e:	1ad3      	subs	r3, r2, r3
20006f10:	b29a      	uxth	r2, r3
20006f12:	68fb      	ldr	r3, [r7, #12]
20006f14:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
20006f16:	68fb      	ldr	r3, [r7, #12]
20006f18:	2200      	movs	r2, #0
20006f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
20006f1e:	2110      	movs	r1, #16
20006f20:	68f8      	ldr	r0, [r7, #12]
20006f22:	f003 fd07 	bl	2000a934 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
20006f26:	68fb      	ldr	r3, [r7, #12]
20006f28:	681b      	ldr	r3, [r3, #0]
20006f2a:	681a      	ldr	r2, [r3, #0]
20006f2c:	68fb      	ldr	r3, [r7, #12]
20006f2e:	681b      	ldr	r3, [r3, #0]
20006f30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
20006f34:	601a      	str	r2, [r3, #0]
20006f36:	e029      	b.n	20006f8c <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
20006f38:	68fb      	ldr	r3, [r7, #12]
20006f3a:	2220      	movs	r2, #32
20006f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
20006f40:	68fb      	ldr	r3, [r7, #12]
20006f42:	2200      	movs	r2, #0
20006f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
20006f48:	68fb      	ldr	r3, [r7, #12]
20006f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20006f4c:	f043 0210 	orr.w	r2, r3, #16
20006f50:	68fb      	ldr	r3, [r7, #12]
20006f52:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
20006f54:	68fb      	ldr	r3, [r7, #12]
20006f56:	2200      	movs	r2, #0
20006f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
20006f5c:	2301      	movs	r3, #1
20006f5e:	e018      	b.n	20006f92 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
20006f60:	68fb      	ldr	r3, [r7, #12]
20006f62:	4a13      	ldr	r2, [pc, #76]	; (20006fb0 <HAL_I2C_Master_Receive_DMA+0x1dc>)
20006f64:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
20006f66:	68fb      	ldr	r3, [r7, #12]
20006f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20006f6a:	b2da      	uxtb	r2, r3
20006f6c:	8979      	ldrh	r1, [r7, #10]
20006f6e:	4b0f      	ldr	r3, [pc, #60]	; (20006fac <HAL_I2C_Master_Receive_DMA+0x1d8>)
20006f70:	9300      	str	r3, [sp, #0]
20006f72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
20006f76:	68f8      	ldr	r0, [r7, #12]
20006f78:	f003 fcaa 	bl	2000a8d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
20006f7c:	68fb      	ldr	r3, [r7, #12]
20006f7e:	2200      	movs	r2, #0
20006f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
20006f84:	2101      	movs	r1, #1
20006f86:	68f8      	ldr	r0, [r7, #12]
20006f88:	f003 fcd4 	bl	2000a934 <I2C_Enable_IRQ>
    }

    return HAL_OK;
20006f8c:	2300      	movs	r3, #0
20006f8e:	e000      	b.n	20006f92 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
20006f90:	2302      	movs	r3, #2
  }
}
20006f92:	4618      	mov	r0, r3
20006f94:	3718      	adds	r7, #24
20006f96:	46bd      	mov	sp, r7
20006f98:	bd80      	pop	{r7, pc}
20006f9a:	bf00      	nop
20006f9c:	ffff0000 	.word	0xffff0000
20006fa0:	20009469 	.word	0x20009469
20006fa4:	2000a301 	.word	0x2000a301
20006fa8:	2000a3dd 	.word	0x2000a3dd
20006fac:	80002400 	.word	0x80002400
20006fb0:	20009013 	.word	0x20009013

20006fb4 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
20006fb4:	b580      	push	{r7, lr}
20006fb6:	b086      	sub	sp, #24
20006fb8:	af00      	add	r7, sp, #0
20006fba:	60f8      	str	r0, [r7, #12]
20006fbc:	60b9      	str	r1, [r7, #8]
20006fbe:	4613      	mov	r3, r2
20006fc0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
20006fc2:	68fb      	ldr	r3, [r7, #12]
20006fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20006fc8:	b2db      	uxtb	r3, r3
20006fca:	2b20      	cmp	r3, #32
20006fcc:	f040 809b 	bne.w	20007106 <HAL_I2C_Slave_Transmit_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
20006fd0:	68bb      	ldr	r3, [r7, #8]
20006fd2:	2b00      	cmp	r3, #0
20006fd4:	d002      	beq.n	20006fdc <HAL_I2C_Slave_Transmit_DMA+0x28>
20006fd6:	88fb      	ldrh	r3, [r7, #6]
20006fd8:	2b00      	cmp	r3, #0
20006fda:	d105      	bne.n	20006fe8 <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
20006fdc:	68fb      	ldr	r3, [r7, #12]
20006fde:	f44f 7200 	mov.w	r2, #512	; 0x200
20006fe2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
20006fe4:	2301      	movs	r3, #1
20006fe6:	e08f      	b.n	20007108 <HAL_I2C_Slave_Transmit_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
20006fe8:	68fb      	ldr	r3, [r7, #12]
20006fea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
20006fee:	2b01      	cmp	r3, #1
20006ff0:	d101      	bne.n	20006ff6 <HAL_I2C_Slave_Transmit_DMA+0x42>
20006ff2:	2302      	movs	r3, #2
20006ff4:	e088      	b.n	20007108 <HAL_I2C_Slave_Transmit_DMA+0x154>
20006ff6:	68fb      	ldr	r3, [r7, #12]
20006ff8:	2201      	movs	r2, #1
20006ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
20006ffe:	68fb      	ldr	r3, [r7, #12]
20007000:	2221      	movs	r2, #33	; 0x21
20007002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
20007006:	68fb      	ldr	r3, [r7, #12]
20007008:	2220      	movs	r2, #32
2000700a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2000700e:	68fb      	ldr	r3, [r7, #12]
20007010:	2200      	movs	r2, #0
20007012:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
20007014:	68fb      	ldr	r3, [r7, #12]
20007016:	68ba      	ldr	r2, [r7, #8]
20007018:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2000701a:	68fb      	ldr	r3, [r7, #12]
2000701c:	88fa      	ldrh	r2, [r7, #6]
2000701e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
20007020:	68fb      	ldr	r3, [r7, #12]
20007022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20007024:	b29a      	uxth	r2, r3
20007026:	68fb      	ldr	r3, [r7, #12]
20007028:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2000702a:	68fb      	ldr	r3, [r7, #12]
2000702c:	4a38      	ldr	r2, [pc, #224]	; (20007110 <HAL_I2C_Slave_Transmit_DMA+0x15c>)
2000702e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
20007030:	68fb      	ldr	r3, [r7, #12]
20007032:	4a38      	ldr	r2, [pc, #224]	; (20007114 <HAL_I2C_Slave_Transmit_DMA+0x160>)
20007034:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmatx != NULL)
20007036:	68fb      	ldr	r3, [r7, #12]
20007038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000703a:	2b00      	cmp	r3, #0
2000703c:	d020      	beq.n	20007080 <HAL_I2C_Slave_Transmit_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
2000703e:	68fb      	ldr	r3, [r7, #12]
20007040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20007042:	4a35      	ldr	r2, [pc, #212]	; (20007118 <HAL_I2C_Slave_Transmit_DMA+0x164>)
20007044:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
20007046:	68fb      	ldr	r3, [r7, #12]
20007048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000704a:	4a34      	ldr	r2, [pc, #208]	; (2000711c <HAL_I2C_Slave_Transmit_DMA+0x168>)
2000704c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
2000704e:	68fb      	ldr	r3, [r7, #12]
20007050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20007052:	2200      	movs	r2, #0
20007054:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
20007056:	68fb      	ldr	r3, [r7, #12]
20007058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000705a:	2200      	movs	r2, #0
2000705c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2000705e:	68fb      	ldr	r3, [r7, #12]
20007060:	6b98      	ldr	r0, [r3, #56]	; 0x38
20007062:	68b9      	ldr	r1, [r7, #8]
20007064:	68fb      	ldr	r3, [r7, #12]
20007066:	681b      	ldr	r3, [r3, #0]
20007068:	3328      	adds	r3, #40	; 0x28
2000706a:	461a      	mov	r2, r3
                                       hi2c->XferSize);
2000706c:	68fb      	ldr	r3, [r7, #12]
2000706e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
20007070:	f7fb fc8b 	bl	2000298a <HAL_DMA_Start_IT>
20007074:	4603      	mov	r3, r0
20007076:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
20007078:	7dfb      	ldrb	r3, [r7, #23]
2000707a:	2b00      	cmp	r3, #0
2000707c:	d12f      	bne.n	200070de <HAL_I2C_Slave_Transmit_DMA+0x12a>
2000707e:	e013      	b.n	200070a8 <HAL_I2C_Slave_Transmit_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
20007080:	68fb      	ldr	r3, [r7, #12]
20007082:	2228      	movs	r2, #40	; 0x28
20007084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
20007088:	68fb      	ldr	r3, [r7, #12]
2000708a:	2200      	movs	r2, #0
2000708c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
20007090:	68fb      	ldr	r3, [r7, #12]
20007092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20007094:	f043 0280 	orr.w	r2, r3, #128	; 0x80
20007098:	68fb      	ldr	r3, [r7, #12]
2000709a:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
2000709c:	68fb      	ldr	r3, [r7, #12]
2000709e:	2200      	movs	r2, #0
200070a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
200070a4:	2301      	movs	r3, #1
200070a6:	e02f      	b.n	20007108 <HAL_I2C_Slave_Transmit_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
200070a8:	68fb      	ldr	r3, [r7, #12]
200070aa:	681b      	ldr	r3, [r3, #0]
200070ac:	685a      	ldr	r2, [r3, #4]
200070ae:	68fb      	ldr	r3, [r7, #12]
200070b0:	681b      	ldr	r3, [r3, #0]
200070b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
200070b6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
200070b8:	68fb      	ldr	r3, [r7, #12]
200070ba:	2200      	movs	r2, #0
200070bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
200070c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
200070c4:	68f8      	ldr	r0, [r7, #12]
200070c6:	f003 fc35 	bl	2000a934 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
200070ca:	68fb      	ldr	r3, [r7, #12]
200070cc:	681b      	ldr	r3, [r3, #0]
200070ce:	681a      	ldr	r2, [r3, #0]
200070d0:	68fb      	ldr	r3, [r7, #12]
200070d2:	681b      	ldr	r3, [r3, #0]
200070d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
200070d8:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
200070da:	2300      	movs	r3, #0
200070dc:	e014      	b.n	20007108 <HAL_I2C_Slave_Transmit_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
200070de:	68fb      	ldr	r3, [r7, #12]
200070e0:	2228      	movs	r2, #40	; 0x28
200070e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
200070e6:	68fb      	ldr	r3, [r7, #12]
200070e8:	2200      	movs	r2, #0
200070ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
200070ee:	68fb      	ldr	r3, [r7, #12]
200070f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
200070f2:	f043 0210 	orr.w	r2, r3, #16
200070f6:	68fb      	ldr	r3, [r7, #12]
200070f8:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
200070fa:	68fb      	ldr	r3, [r7, #12]
200070fc:	2200      	movs	r2, #0
200070fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
20007102:	2301      	movs	r3, #1
20007104:	e000      	b.n	20007108 <HAL_I2C_Slave_Transmit_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
20007106:	2302      	movs	r3, #2
  }
}
20007108:	4618      	mov	r0, r3
2000710a:	3718      	adds	r7, #24
2000710c:	46bd      	mov	sp, r7
2000710e:	bd80      	pop	{r7, pc}
20007110:	ffff0000 	.word	0xffff0000
20007114:	2000964f 	.word	0x2000964f
20007118:	2000a2c1 	.word	0x2000a2c1
2000711c:	2000a3dd 	.word	0x2000a3dd

20007120 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
20007120:	b580      	push	{r7, lr}
20007122:	b086      	sub	sp, #24
20007124:	af00      	add	r7, sp, #0
20007126:	60f8      	str	r0, [r7, #12]
20007128:	60b9      	str	r1, [r7, #8]
2000712a:	4613      	mov	r3, r2
2000712c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
2000712e:	68fb      	ldr	r3, [r7, #12]
20007130:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20007134:	b2db      	uxtb	r3, r3
20007136:	2b20      	cmp	r3, #32
20007138:	f040 809b 	bne.w	20007272 <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
2000713c:	68bb      	ldr	r3, [r7, #8]
2000713e:	2b00      	cmp	r3, #0
20007140:	d002      	beq.n	20007148 <HAL_I2C_Slave_Receive_DMA+0x28>
20007142:	88fb      	ldrh	r3, [r7, #6]
20007144:	2b00      	cmp	r3, #0
20007146:	d105      	bne.n	20007154 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
20007148:	68fb      	ldr	r3, [r7, #12]
2000714a:	f44f 7200 	mov.w	r2, #512	; 0x200
2000714e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
20007150:	2301      	movs	r3, #1
20007152:	e08f      	b.n	20007274 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
20007154:	68fb      	ldr	r3, [r7, #12]
20007156:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2000715a:	2b01      	cmp	r3, #1
2000715c:	d101      	bne.n	20007162 <HAL_I2C_Slave_Receive_DMA+0x42>
2000715e:	2302      	movs	r3, #2
20007160:	e088      	b.n	20007274 <HAL_I2C_Slave_Receive_DMA+0x154>
20007162:	68fb      	ldr	r3, [r7, #12]
20007164:	2201      	movs	r2, #1
20007166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2000716a:	68fb      	ldr	r3, [r7, #12]
2000716c:	2222      	movs	r2, #34	; 0x22
2000716e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
20007172:	68fb      	ldr	r3, [r7, #12]
20007174:	2220      	movs	r2, #32
20007176:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2000717a:	68fb      	ldr	r3, [r7, #12]
2000717c:	2200      	movs	r2, #0
2000717e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
20007180:	68fb      	ldr	r3, [r7, #12]
20007182:	68ba      	ldr	r2, [r7, #8]
20007184:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
20007186:	68fb      	ldr	r3, [r7, #12]
20007188:	88fa      	ldrh	r2, [r7, #6]
2000718a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2000718c:	68fb      	ldr	r3, [r7, #12]
2000718e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20007190:	b29a      	uxth	r2, r3
20007192:	68fb      	ldr	r3, [r7, #12]
20007194:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
20007196:	68fb      	ldr	r3, [r7, #12]
20007198:	4a38      	ldr	r2, [pc, #224]	; (2000727c <HAL_I2C_Slave_Receive_DMA+0x15c>)
2000719a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
2000719c:	68fb      	ldr	r3, [r7, #12]
2000719e:	4a38      	ldr	r2, [pc, #224]	; (20007280 <HAL_I2C_Slave_Receive_DMA+0x160>)
200071a0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmarx != NULL)
200071a2:	68fb      	ldr	r3, [r7, #12]
200071a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200071a6:	2b00      	cmp	r3, #0
200071a8:	d020      	beq.n	200071ec <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
200071aa:	68fb      	ldr	r3, [r7, #12]
200071ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200071ae:	4a35      	ldr	r2, [pc, #212]	; (20007284 <HAL_I2C_Slave_Receive_DMA+0x164>)
200071b0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
200071b2:	68fb      	ldr	r3, [r7, #12]
200071b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200071b6:	4a34      	ldr	r2, [pc, #208]	; (20007288 <HAL_I2C_Slave_Receive_DMA+0x168>)
200071b8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
200071ba:	68fb      	ldr	r3, [r7, #12]
200071bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200071be:	2200      	movs	r2, #0
200071c0:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
200071c2:	68fb      	ldr	r3, [r7, #12]
200071c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200071c6:	2200      	movs	r2, #0
200071c8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
200071ca:	68fb      	ldr	r3, [r7, #12]
200071cc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
200071ce:	68fb      	ldr	r3, [r7, #12]
200071d0:	681b      	ldr	r3, [r3, #0]
200071d2:	3324      	adds	r3, #36	; 0x24
200071d4:	4619      	mov	r1, r3
200071d6:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
200071d8:	68fb      	ldr	r3, [r7, #12]
200071da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
200071dc:	f7fb fbd5 	bl	2000298a <HAL_DMA_Start_IT>
200071e0:	4603      	mov	r3, r0
200071e2:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
200071e4:	7dfb      	ldrb	r3, [r7, #23]
200071e6:	2b00      	cmp	r3, #0
200071e8:	d12f      	bne.n	2000724a <HAL_I2C_Slave_Receive_DMA+0x12a>
200071ea:	e013      	b.n	20007214 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
200071ec:	68fb      	ldr	r3, [r7, #12]
200071ee:	2228      	movs	r2, #40	; 0x28
200071f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
200071f4:	68fb      	ldr	r3, [r7, #12]
200071f6:	2200      	movs	r2, #0
200071f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
200071fc:	68fb      	ldr	r3, [r7, #12]
200071fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20007200:	f043 0280 	orr.w	r2, r3, #128	; 0x80
20007204:	68fb      	ldr	r3, [r7, #12]
20007206:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
20007208:	68fb      	ldr	r3, [r7, #12]
2000720a:	2200      	movs	r2, #0
2000720c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
20007210:	2301      	movs	r3, #1
20007212:	e02f      	b.n	20007274 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
20007214:	68fb      	ldr	r3, [r7, #12]
20007216:	681b      	ldr	r3, [r3, #0]
20007218:	685a      	ldr	r2, [r3, #4]
2000721a:	68fb      	ldr	r3, [r7, #12]
2000721c:	681b      	ldr	r3, [r3, #0]
2000721e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
20007222:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
20007224:	68fb      	ldr	r3, [r7, #12]
20007226:	2200      	movs	r2, #0
20007228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2000722c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
20007230:	68f8      	ldr	r0, [r7, #12]
20007232:	f003 fb7f 	bl	2000a934 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
20007236:	68fb      	ldr	r3, [r7, #12]
20007238:	681b      	ldr	r3, [r3, #0]
2000723a:	681a      	ldr	r2, [r3, #0]
2000723c:	68fb      	ldr	r3, [r7, #12]
2000723e:	681b      	ldr	r3, [r3, #0]
20007240:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
20007244:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
20007246:	2300      	movs	r3, #0
20007248:	e014      	b.n	20007274 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2000724a:	68fb      	ldr	r3, [r7, #12]
2000724c:	2228      	movs	r2, #40	; 0x28
2000724e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
20007252:	68fb      	ldr	r3, [r7, #12]
20007254:	2200      	movs	r2, #0
20007256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2000725a:	68fb      	ldr	r3, [r7, #12]
2000725c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000725e:	f043 0210 	orr.w	r2, r3, #16
20007262:	68fb      	ldr	r3, [r7, #12]
20007264:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
20007266:	68fb      	ldr	r3, [r7, #12]
20007268:	2200      	movs	r2, #0
2000726a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2000726e:	2301      	movs	r3, #1
20007270:	e000      	b.n	20007274 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
20007272:	2302      	movs	r3, #2
  }
}
20007274:	4618      	mov	r0, r3
20007276:	3718      	adds	r7, #24
20007278:	46bd      	mov	sp, r7
2000727a:	bd80      	pop	{r7, pc}
2000727c:	ffff0000 	.word	0xffff0000
20007280:	2000964f 	.word	0x2000964f
20007284:	2000a397 	.word	0x2000a397
20007288:	2000a3dd 	.word	0x2000a3dd

2000728c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
2000728c:	b580      	push	{r7, lr}
2000728e:	b088      	sub	sp, #32
20007290:	af02      	add	r7, sp, #8
20007292:	60f8      	str	r0, [r7, #12]
20007294:	4608      	mov	r0, r1
20007296:	4611      	mov	r1, r2
20007298:	461a      	mov	r2, r3
2000729a:	4603      	mov	r3, r0
2000729c:	817b      	strh	r3, [r7, #10]
2000729e:	460b      	mov	r3, r1
200072a0:	813b      	strh	r3, [r7, #8]
200072a2:	4613      	mov	r3, r2
200072a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
200072a6:	68fb      	ldr	r3, [r7, #12]
200072a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
200072ac:	b2db      	uxtb	r3, r3
200072ae:	2b20      	cmp	r3, #32
200072b0:	f040 80f9 	bne.w	200074a6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
200072b4:	6a3b      	ldr	r3, [r7, #32]
200072b6:	2b00      	cmp	r3, #0
200072b8:	d002      	beq.n	200072c0 <HAL_I2C_Mem_Write+0x34>
200072ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
200072bc:	2b00      	cmp	r3, #0
200072be:	d105      	bne.n	200072cc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
200072c0:	68fb      	ldr	r3, [r7, #12]
200072c2:	f44f 7200 	mov.w	r2, #512	; 0x200
200072c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
200072c8:	2301      	movs	r3, #1
200072ca:	e0ed      	b.n	200074a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
200072cc:	68fb      	ldr	r3, [r7, #12]
200072ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
200072d2:	2b01      	cmp	r3, #1
200072d4:	d101      	bne.n	200072da <HAL_I2C_Mem_Write+0x4e>
200072d6:	2302      	movs	r3, #2
200072d8:	e0e6      	b.n	200074a8 <HAL_I2C_Mem_Write+0x21c>
200072da:	68fb      	ldr	r3, [r7, #12]
200072dc:	2201      	movs	r2, #1
200072de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
200072e2:	f7fa fd39 	bl	20001d58 <HAL_GetTick>
200072e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
200072e8:	697b      	ldr	r3, [r7, #20]
200072ea:	9300      	str	r3, [sp, #0]
200072ec:	2319      	movs	r3, #25
200072ee:	2201      	movs	r2, #1
200072f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
200072f4:	68f8      	ldr	r0, [r7, #12]
200072f6:	f003 f8c9 	bl	2000a48c <I2C_WaitOnFlagUntilTimeout>
200072fa:	4603      	mov	r3, r0
200072fc:	2b00      	cmp	r3, #0
200072fe:	d001      	beq.n	20007304 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
20007300:	2301      	movs	r3, #1
20007302:	e0d1      	b.n	200074a8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
20007304:	68fb      	ldr	r3, [r7, #12]
20007306:	2221      	movs	r2, #33	; 0x21
20007308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
2000730c:	68fb      	ldr	r3, [r7, #12]
2000730e:	2240      	movs	r2, #64	; 0x40
20007310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
20007314:	68fb      	ldr	r3, [r7, #12]
20007316:	2200      	movs	r2, #0
20007318:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2000731a:	68fb      	ldr	r3, [r7, #12]
2000731c:	6a3a      	ldr	r2, [r7, #32]
2000731e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
20007320:	68fb      	ldr	r3, [r7, #12]
20007322:	8cba      	ldrh	r2, [r7, #36]	; 0x24
20007324:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
20007326:	68fb      	ldr	r3, [r7, #12]
20007328:	2200      	movs	r2, #0
2000732a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
2000732c:	88f8      	ldrh	r0, [r7, #6]
2000732e:	893a      	ldrh	r2, [r7, #8]
20007330:	8979      	ldrh	r1, [r7, #10]
20007332:	697b      	ldr	r3, [r7, #20]
20007334:	9301      	str	r3, [sp, #4]
20007336:	6abb      	ldr	r3, [r7, #40]	; 0x28
20007338:	9300      	str	r3, [sp, #0]
2000733a:	4603      	mov	r3, r0
2000733c:	68f8      	ldr	r0, [r7, #12]
2000733e:	f002 fa67 	bl	20009810 <I2C_RequestMemoryWrite>
20007342:	4603      	mov	r3, r0
20007344:	2b00      	cmp	r3, #0
20007346:	d005      	beq.n	20007354 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
20007348:	68fb      	ldr	r3, [r7, #12]
2000734a:	2200      	movs	r2, #0
2000734c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
20007350:	2301      	movs	r3, #1
20007352:	e0a9      	b.n	200074a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
20007354:	68fb      	ldr	r3, [r7, #12]
20007356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20007358:	b29b      	uxth	r3, r3
2000735a:	2bff      	cmp	r3, #255	; 0xff
2000735c:	d90e      	bls.n	2000737c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2000735e:	68fb      	ldr	r3, [r7, #12]
20007360:	22ff      	movs	r2, #255	; 0xff
20007362:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
20007364:	68fb      	ldr	r3, [r7, #12]
20007366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20007368:	b2da      	uxtb	r2, r3
2000736a:	8979      	ldrh	r1, [r7, #10]
2000736c:	2300      	movs	r3, #0
2000736e:	9300      	str	r3, [sp, #0]
20007370:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
20007374:	68f8      	ldr	r0, [r7, #12]
20007376:	f003 faab 	bl	2000a8d0 <I2C_TransferConfig>
2000737a:	e00f      	b.n	2000739c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2000737c:	68fb      	ldr	r3, [r7, #12]
2000737e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20007380:	b29a      	uxth	r2, r3
20007382:	68fb      	ldr	r3, [r7, #12]
20007384:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
20007386:	68fb      	ldr	r3, [r7, #12]
20007388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2000738a:	b2da      	uxtb	r2, r3
2000738c:	8979      	ldrh	r1, [r7, #10]
2000738e:	2300      	movs	r3, #0
20007390:	9300      	str	r3, [sp, #0]
20007392:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
20007396:	68f8      	ldr	r0, [r7, #12]
20007398:	f003 fa9a 	bl	2000a8d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2000739c:	697a      	ldr	r2, [r7, #20]
2000739e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
200073a0:	68f8      	ldr	r0, [r7, #12]
200073a2:	f003 f8b3 	bl	2000a50c <I2C_WaitOnTXISFlagUntilTimeout>
200073a6:	4603      	mov	r3, r0
200073a8:	2b00      	cmp	r3, #0
200073aa:	d001      	beq.n	200073b0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
200073ac:	2301      	movs	r3, #1
200073ae:	e07b      	b.n	200074a8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
200073b0:	68fb      	ldr	r3, [r7, #12]
200073b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200073b4:	781a      	ldrb	r2, [r3, #0]
200073b6:	68fb      	ldr	r3, [r7, #12]
200073b8:	681b      	ldr	r3, [r3, #0]
200073ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
200073bc:	68fb      	ldr	r3, [r7, #12]
200073be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200073c0:	1c5a      	adds	r2, r3, #1
200073c2:	68fb      	ldr	r3, [r7, #12]
200073c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
200073c6:	68fb      	ldr	r3, [r7, #12]
200073c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
200073ca:	b29b      	uxth	r3, r3
200073cc:	3b01      	subs	r3, #1
200073ce:	b29a      	uxth	r2, r3
200073d0:	68fb      	ldr	r3, [r7, #12]
200073d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
200073d4:	68fb      	ldr	r3, [r7, #12]
200073d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
200073d8:	3b01      	subs	r3, #1
200073da:	b29a      	uxth	r2, r3
200073dc:	68fb      	ldr	r3, [r7, #12]
200073de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
200073e0:	68fb      	ldr	r3, [r7, #12]
200073e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
200073e4:	b29b      	uxth	r3, r3
200073e6:	2b00      	cmp	r3, #0
200073e8:	d034      	beq.n	20007454 <HAL_I2C_Mem_Write+0x1c8>
200073ea:	68fb      	ldr	r3, [r7, #12]
200073ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
200073ee:	2b00      	cmp	r3, #0
200073f0:	d130      	bne.n	20007454 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
200073f2:	697b      	ldr	r3, [r7, #20]
200073f4:	9300      	str	r3, [sp, #0]
200073f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
200073f8:	2200      	movs	r2, #0
200073fa:	2180      	movs	r1, #128	; 0x80
200073fc:	68f8      	ldr	r0, [r7, #12]
200073fe:	f003 f845 	bl	2000a48c <I2C_WaitOnFlagUntilTimeout>
20007402:	4603      	mov	r3, r0
20007404:	2b00      	cmp	r3, #0
20007406:	d001      	beq.n	2000740c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
20007408:	2301      	movs	r3, #1
2000740a:	e04d      	b.n	200074a8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000740c:	68fb      	ldr	r3, [r7, #12]
2000740e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20007410:	b29b      	uxth	r3, r3
20007412:	2bff      	cmp	r3, #255	; 0xff
20007414:	d90e      	bls.n	20007434 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
20007416:	68fb      	ldr	r3, [r7, #12]
20007418:	22ff      	movs	r2, #255	; 0xff
2000741a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2000741c:	68fb      	ldr	r3, [r7, #12]
2000741e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20007420:	b2da      	uxtb	r2, r3
20007422:	8979      	ldrh	r1, [r7, #10]
20007424:	2300      	movs	r3, #0
20007426:	9300      	str	r3, [sp, #0]
20007428:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2000742c:	68f8      	ldr	r0, [r7, #12]
2000742e:	f003 fa4f 	bl	2000a8d0 <I2C_TransferConfig>
20007432:	e00f      	b.n	20007454 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
20007434:	68fb      	ldr	r3, [r7, #12]
20007436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20007438:	b29a      	uxth	r2, r3
2000743a:	68fb      	ldr	r3, [r7, #12]
2000743c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2000743e:	68fb      	ldr	r3, [r7, #12]
20007440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20007442:	b2da      	uxtb	r2, r3
20007444:	8979      	ldrh	r1, [r7, #10]
20007446:	2300      	movs	r3, #0
20007448:	9300      	str	r3, [sp, #0]
2000744a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2000744e:	68f8      	ldr	r0, [r7, #12]
20007450:	f003 fa3e 	bl	2000a8d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
20007454:	68fb      	ldr	r3, [r7, #12]
20007456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20007458:	b29b      	uxth	r3, r3
2000745a:	2b00      	cmp	r3, #0
2000745c:	d19e      	bne.n	2000739c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2000745e:	697a      	ldr	r2, [r7, #20]
20007460:	6ab9      	ldr	r1, [r7, #40]	; 0x28
20007462:	68f8      	ldr	r0, [r7, #12]
20007464:	f003 f892 	bl	2000a58c <I2C_WaitOnSTOPFlagUntilTimeout>
20007468:	4603      	mov	r3, r0
2000746a:	2b00      	cmp	r3, #0
2000746c:	d001      	beq.n	20007472 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
2000746e:	2301      	movs	r3, #1
20007470:	e01a      	b.n	200074a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
20007472:	68fb      	ldr	r3, [r7, #12]
20007474:	681b      	ldr	r3, [r3, #0]
20007476:	2220      	movs	r2, #32
20007478:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2000747a:	68fb      	ldr	r3, [r7, #12]
2000747c:	681b      	ldr	r3, [r3, #0]
2000747e:	6859      	ldr	r1, [r3, #4]
20007480:	68fb      	ldr	r3, [r7, #12]
20007482:	681a      	ldr	r2, [r3, #0]
20007484:	4b0a      	ldr	r3, [pc, #40]	; (200074b0 <HAL_I2C_Mem_Write+0x224>)
20007486:	400b      	ands	r3, r1
20007488:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2000748a:	68fb      	ldr	r3, [r7, #12]
2000748c:	2220      	movs	r2, #32
2000748e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
20007492:	68fb      	ldr	r3, [r7, #12]
20007494:	2200      	movs	r2, #0
20007496:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2000749a:	68fb      	ldr	r3, [r7, #12]
2000749c:	2200      	movs	r2, #0
2000749e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
200074a2:	2300      	movs	r3, #0
200074a4:	e000      	b.n	200074a8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
200074a6:	2302      	movs	r3, #2
  }
}
200074a8:	4618      	mov	r0, r3
200074aa:	3718      	adds	r7, #24
200074ac:	46bd      	mov	sp, r7
200074ae:	bd80      	pop	{r7, pc}
200074b0:	fe00e800 	.word	0xfe00e800

200074b4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
200074b4:	b580      	push	{r7, lr}
200074b6:	b088      	sub	sp, #32
200074b8:	af02      	add	r7, sp, #8
200074ba:	60f8      	str	r0, [r7, #12]
200074bc:	4608      	mov	r0, r1
200074be:	4611      	mov	r1, r2
200074c0:	461a      	mov	r2, r3
200074c2:	4603      	mov	r3, r0
200074c4:	817b      	strh	r3, [r7, #10]
200074c6:	460b      	mov	r3, r1
200074c8:	813b      	strh	r3, [r7, #8]
200074ca:	4613      	mov	r3, r2
200074cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
200074ce:	68fb      	ldr	r3, [r7, #12]
200074d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
200074d4:	b2db      	uxtb	r3, r3
200074d6:	2b20      	cmp	r3, #32
200074d8:	f040 80fd 	bne.w	200076d6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
200074dc:	6a3b      	ldr	r3, [r7, #32]
200074de:	2b00      	cmp	r3, #0
200074e0:	d002      	beq.n	200074e8 <HAL_I2C_Mem_Read+0x34>
200074e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
200074e4:	2b00      	cmp	r3, #0
200074e6:	d105      	bne.n	200074f4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
200074e8:	68fb      	ldr	r3, [r7, #12]
200074ea:	f44f 7200 	mov.w	r2, #512	; 0x200
200074ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
200074f0:	2301      	movs	r3, #1
200074f2:	e0f1      	b.n	200076d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
200074f4:	68fb      	ldr	r3, [r7, #12]
200074f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
200074fa:	2b01      	cmp	r3, #1
200074fc:	d101      	bne.n	20007502 <HAL_I2C_Mem_Read+0x4e>
200074fe:	2302      	movs	r3, #2
20007500:	e0ea      	b.n	200076d8 <HAL_I2C_Mem_Read+0x224>
20007502:	68fb      	ldr	r3, [r7, #12]
20007504:	2201      	movs	r2, #1
20007506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2000750a:	f7fa fc25 	bl	20001d58 <HAL_GetTick>
2000750e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
20007510:	697b      	ldr	r3, [r7, #20]
20007512:	9300      	str	r3, [sp, #0]
20007514:	2319      	movs	r3, #25
20007516:	2201      	movs	r2, #1
20007518:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2000751c:	68f8      	ldr	r0, [r7, #12]
2000751e:	f002 ffb5 	bl	2000a48c <I2C_WaitOnFlagUntilTimeout>
20007522:	4603      	mov	r3, r0
20007524:	2b00      	cmp	r3, #0
20007526:	d001      	beq.n	2000752c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
20007528:	2301      	movs	r3, #1
2000752a:	e0d5      	b.n	200076d8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
2000752c:	68fb      	ldr	r3, [r7, #12]
2000752e:	2222      	movs	r2, #34	; 0x22
20007530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
20007534:	68fb      	ldr	r3, [r7, #12]
20007536:	2240      	movs	r2, #64	; 0x40
20007538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2000753c:	68fb      	ldr	r3, [r7, #12]
2000753e:	2200      	movs	r2, #0
20007540:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
20007542:	68fb      	ldr	r3, [r7, #12]
20007544:	6a3a      	ldr	r2, [r7, #32]
20007546:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
20007548:	68fb      	ldr	r3, [r7, #12]
2000754a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
2000754c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
2000754e:	68fb      	ldr	r3, [r7, #12]
20007550:	2200      	movs	r2, #0
20007552:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
20007554:	88f8      	ldrh	r0, [r7, #6]
20007556:	893a      	ldrh	r2, [r7, #8]
20007558:	8979      	ldrh	r1, [r7, #10]
2000755a:	697b      	ldr	r3, [r7, #20]
2000755c:	9301      	str	r3, [sp, #4]
2000755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
20007560:	9300      	str	r3, [sp, #0]
20007562:	4603      	mov	r3, r0
20007564:	68f8      	ldr	r0, [r7, #12]
20007566:	f002 f9a7 	bl	200098b8 <I2C_RequestMemoryRead>
2000756a:	4603      	mov	r3, r0
2000756c:	2b00      	cmp	r3, #0
2000756e:	d005      	beq.n	2000757c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
20007570:	68fb      	ldr	r3, [r7, #12]
20007572:	2200      	movs	r2, #0
20007574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
20007578:	2301      	movs	r3, #1
2000757a:	e0ad      	b.n	200076d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000757c:	68fb      	ldr	r3, [r7, #12]
2000757e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20007580:	b29b      	uxth	r3, r3
20007582:	2bff      	cmp	r3, #255	; 0xff
20007584:	d90e      	bls.n	200075a4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
20007586:	68fb      	ldr	r3, [r7, #12]
20007588:	22ff      	movs	r2, #255	; 0xff
2000758a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2000758c:	68fb      	ldr	r3, [r7, #12]
2000758e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20007590:	b2da      	uxtb	r2, r3
20007592:	8979      	ldrh	r1, [r7, #10]
20007594:	4b52      	ldr	r3, [pc, #328]	; (200076e0 <HAL_I2C_Mem_Read+0x22c>)
20007596:	9300      	str	r3, [sp, #0]
20007598:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2000759c:	68f8      	ldr	r0, [r7, #12]
2000759e:	f003 f997 	bl	2000a8d0 <I2C_TransferConfig>
200075a2:	e00f      	b.n	200075c4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
200075a4:	68fb      	ldr	r3, [r7, #12]
200075a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
200075a8:	b29a      	uxth	r2, r3
200075aa:	68fb      	ldr	r3, [r7, #12]
200075ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
200075ae:	68fb      	ldr	r3, [r7, #12]
200075b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
200075b2:	b2da      	uxtb	r2, r3
200075b4:	8979      	ldrh	r1, [r7, #10]
200075b6:	4b4a      	ldr	r3, [pc, #296]	; (200076e0 <HAL_I2C_Mem_Read+0x22c>)
200075b8:	9300      	str	r3, [sp, #0]
200075ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
200075be:	68f8      	ldr	r0, [r7, #12]
200075c0:	f003 f986 	bl	2000a8d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
200075c4:	697b      	ldr	r3, [r7, #20]
200075c6:	9300      	str	r3, [sp, #0]
200075c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
200075ca:	2200      	movs	r2, #0
200075cc:	2104      	movs	r1, #4
200075ce:	68f8      	ldr	r0, [r7, #12]
200075d0:	f002 ff5c 	bl	2000a48c <I2C_WaitOnFlagUntilTimeout>
200075d4:	4603      	mov	r3, r0
200075d6:	2b00      	cmp	r3, #0
200075d8:	d001      	beq.n	200075de <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
200075da:	2301      	movs	r3, #1
200075dc:	e07c      	b.n	200076d8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
200075de:	68fb      	ldr	r3, [r7, #12]
200075e0:	681b      	ldr	r3, [r3, #0]
200075e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
200075e4:	68fb      	ldr	r3, [r7, #12]
200075e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200075e8:	b2d2      	uxtb	r2, r2
200075ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
200075ec:	68fb      	ldr	r3, [r7, #12]
200075ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200075f0:	1c5a      	adds	r2, r3, #1
200075f2:	68fb      	ldr	r3, [r7, #12]
200075f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
200075f6:	68fb      	ldr	r3, [r7, #12]
200075f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
200075fa:	3b01      	subs	r3, #1
200075fc:	b29a      	uxth	r2, r3
200075fe:	68fb      	ldr	r3, [r7, #12]
20007600:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
20007602:	68fb      	ldr	r3, [r7, #12]
20007604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20007606:	b29b      	uxth	r3, r3
20007608:	3b01      	subs	r3, #1
2000760a:	b29a      	uxth	r2, r3
2000760c:	68fb      	ldr	r3, [r7, #12]
2000760e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
20007610:	68fb      	ldr	r3, [r7, #12]
20007612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20007614:	b29b      	uxth	r3, r3
20007616:	2b00      	cmp	r3, #0
20007618:	d034      	beq.n	20007684 <HAL_I2C_Mem_Read+0x1d0>
2000761a:	68fb      	ldr	r3, [r7, #12]
2000761c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2000761e:	2b00      	cmp	r3, #0
20007620:	d130      	bne.n	20007684 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
20007622:	697b      	ldr	r3, [r7, #20]
20007624:	9300      	str	r3, [sp, #0]
20007626:	6abb      	ldr	r3, [r7, #40]	; 0x28
20007628:	2200      	movs	r2, #0
2000762a:	2180      	movs	r1, #128	; 0x80
2000762c:	68f8      	ldr	r0, [r7, #12]
2000762e:	f002 ff2d 	bl	2000a48c <I2C_WaitOnFlagUntilTimeout>
20007632:	4603      	mov	r3, r0
20007634:	2b00      	cmp	r3, #0
20007636:	d001      	beq.n	2000763c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
20007638:	2301      	movs	r3, #1
2000763a:	e04d      	b.n	200076d8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000763c:	68fb      	ldr	r3, [r7, #12]
2000763e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20007640:	b29b      	uxth	r3, r3
20007642:	2bff      	cmp	r3, #255	; 0xff
20007644:	d90e      	bls.n	20007664 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
20007646:	68fb      	ldr	r3, [r7, #12]
20007648:	22ff      	movs	r2, #255	; 0xff
2000764a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
2000764c:	68fb      	ldr	r3, [r7, #12]
2000764e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20007650:	b2da      	uxtb	r2, r3
20007652:	8979      	ldrh	r1, [r7, #10]
20007654:	2300      	movs	r3, #0
20007656:	9300      	str	r3, [sp, #0]
20007658:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2000765c:	68f8      	ldr	r0, [r7, #12]
2000765e:	f003 f937 	bl	2000a8d0 <I2C_TransferConfig>
20007662:	e00f      	b.n	20007684 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
20007664:	68fb      	ldr	r3, [r7, #12]
20007666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20007668:	b29a      	uxth	r2, r3
2000766a:	68fb      	ldr	r3, [r7, #12]
2000766c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2000766e:	68fb      	ldr	r3, [r7, #12]
20007670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20007672:	b2da      	uxtb	r2, r3
20007674:	8979      	ldrh	r1, [r7, #10]
20007676:	2300      	movs	r3, #0
20007678:	9300      	str	r3, [sp, #0]
2000767a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2000767e:	68f8      	ldr	r0, [r7, #12]
20007680:	f003 f926 	bl	2000a8d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
20007684:	68fb      	ldr	r3, [r7, #12]
20007686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20007688:	b29b      	uxth	r3, r3
2000768a:	2b00      	cmp	r3, #0
2000768c:	d19a      	bne.n	200075c4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2000768e:	697a      	ldr	r2, [r7, #20]
20007690:	6ab9      	ldr	r1, [r7, #40]	; 0x28
20007692:	68f8      	ldr	r0, [r7, #12]
20007694:	f002 ff7a 	bl	2000a58c <I2C_WaitOnSTOPFlagUntilTimeout>
20007698:	4603      	mov	r3, r0
2000769a:	2b00      	cmp	r3, #0
2000769c:	d001      	beq.n	200076a2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
2000769e:	2301      	movs	r3, #1
200076a0:	e01a      	b.n	200076d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
200076a2:	68fb      	ldr	r3, [r7, #12]
200076a4:	681b      	ldr	r3, [r3, #0]
200076a6:	2220      	movs	r2, #32
200076a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
200076aa:	68fb      	ldr	r3, [r7, #12]
200076ac:	681b      	ldr	r3, [r3, #0]
200076ae:	6859      	ldr	r1, [r3, #4]
200076b0:	68fb      	ldr	r3, [r7, #12]
200076b2:	681a      	ldr	r2, [r3, #0]
200076b4:	4b0b      	ldr	r3, [pc, #44]	; (200076e4 <HAL_I2C_Mem_Read+0x230>)
200076b6:	400b      	ands	r3, r1
200076b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
200076ba:	68fb      	ldr	r3, [r7, #12]
200076bc:	2220      	movs	r2, #32
200076be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
200076c2:	68fb      	ldr	r3, [r7, #12]
200076c4:	2200      	movs	r2, #0
200076c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
200076ca:	68fb      	ldr	r3, [r7, #12]
200076cc:	2200      	movs	r2, #0
200076ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
200076d2:	2300      	movs	r3, #0
200076d4:	e000      	b.n	200076d8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
200076d6:	2302      	movs	r3, #2
  }
}
200076d8:	4618      	mov	r0, r3
200076da:	3718      	adds	r7, #24
200076dc:	46bd      	mov	sp, r7
200076de:	bd80      	pop	{r7, pc}
200076e0:	80002400 	.word	0x80002400
200076e4:	fe00e800 	.word	0xfe00e800

200076e8 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
200076e8:	b580      	push	{r7, lr}
200076ea:	b088      	sub	sp, #32
200076ec:	af02      	add	r7, sp, #8
200076ee:	60f8      	str	r0, [r7, #12]
200076f0:	4608      	mov	r0, r1
200076f2:	4611      	mov	r1, r2
200076f4:	461a      	mov	r2, r3
200076f6:	4603      	mov	r3, r0
200076f8:	817b      	strh	r3, [r7, #10]
200076fa:	460b      	mov	r3, r1
200076fc:	813b      	strh	r3, [r7, #8]
200076fe:	4613      	mov	r3, r2
20007700:	80fb      	strh	r3, [r7, #6]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
20007702:	68fb      	ldr	r3, [r7, #12]
20007704:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20007708:	b2db      	uxtb	r3, r3
2000770a:	2b20      	cmp	r3, #32
2000770c:	d176      	bne.n	200077fc <HAL_I2C_Mem_Write_IT+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
2000770e:	6a3b      	ldr	r3, [r7, #32]
20007710:	2b00      	cmp	r3, #0
20007712:	d002      	beq.n	2000771a <HAL_I2C_Mem_Write_IT+0x32>
20007714:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
20007716:	2b00      	cmp	r3, #0
20007718:	d105      	bne.n	20007726 <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2000771a:	68fb      	ldr	r3, [r7, #12]
2000771c:	f44f 7200 	mov.w	r2, #512	; 0x200
20007720:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
20007722:	2301      	movs	r3, #1
20007724:	e06b      	b.n	200077fe <HAL_I2C_Mem_Write_IT+0x116>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
20007726:	68fb      	ldr	r3, [r7, #12]
20007728:	681b      	ldr	r3, [r3, #0]
2000772a:	699b      	ldr	r3, [r3, #24]
2000772c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
20007730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20007734:	d101      	bne.n	2000773a <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
20007736:	2302      	movs	r3, #2
20007738:	e061      	b.n	200077fe <HAL_I2C_Mem_Write_IT+0x116>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2000773a:	68fb      	ldr	r3, [r7, #12]
2000773c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
20007740:	2b01      	cmp	r3, #1
20007742:	d101      	bne.n	20007748 <HAL_I2C_Mem_Write_IT+0x60>
20007744:	2302      	movs	r3, #2
20007746:	e05a      	b.n	200077fe <HAL_I2C_Mem_Write_IT+0x116>
20007748:	68fb      	ldr	r3, [r7, #12]
2000774a:	2201      	movs	r2, #1
2000774c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
20007750:	f7fa fb02 	bl	20001d58 <HAL_GetTick>
20007754:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
20007756:	68fb      	ldr	r3, [r7, #12]
20007758:	2221      	movs	r2, #33	; 0x21
2000775a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
2000775e:	68fb      	ldr	r3, [r7, #12]
20007760:	2240      	movs	r2, #64	; 0x40
20007762:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
20007766:	68fb      	ldr	r3, [r7, #12]
20007768:	2200      	movs	r2, #0
2000776a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2000776c:	68fb      	ldr	r3, [r7, #12]
2000776e:	6a3a      	ldr	r2, [r7, #32]
20007770:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
20007772:	68fb      	ldr	r3, [r7, #12]
20007774:	8cba      	ldrh	r2, [r7, #36]	; 0x24
20007776:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
20007778:	68fb      	ldr	r3, [r7, #12]
2000777a:	4a23      	ldr	r2, [pc, #140]	; (20007808 <HAL_I2C_Mem_Write_IT+0x120>)
2000777c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
2000777e:	68fb      	ldr	r3, [r7, #12]
20007780:	4a22      	ldr	r2, [pc, #136]	; (2000780c <HAL_I2C_Mem_Write_IT+0x124>)
20007782:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
20007784:	68fb      	ldr	r3, [r7, #12]
20007786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20007788:	b29b      	uxth	r3, r3
2000778a:	2bff      	cmp	r3, #255	; 0xff
2000778c:	d906      	bls.n	2000779c <HAL_I2C_Mem_Write_IT+0xb4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2000778e:	68fb      	ldr	r3, [r7, #12]
20007790:	22ff      	movs	r2, #255	; 0xff
20007792:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
20007794:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
20007798:	617b      	str	r3, [r7, #20]
2000779a:	e007      	b.n	200077ac <HAL_I2C_Mem_Write_IT+0xc4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2000779c:	68fb      	ldr	r3, [r7, #12]
2000779e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
200077a0:	b29a      	uxth	r2, r3
200077a2:	68fb      	ldr	r3, [r7, #12]
200077a4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
200077a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
200077aa:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart)
200077ac:	88f8      	ldrh	r0, [r7, #6]
200077ae:	893a      	ldrh	r2, [r7, #8]
200077b0:	8979      	ldrh	r1, [r7, #10]
200077b2:	693b      	ldr	r3, [r7, #16]
200077b4:	9301      	str	r3, [sp, #4]
200077b6:	2319      	movs	r3, #25
200077b8:	9300      	str	r3, [sp, #0]
200077ba:	4603      	mov	r3, r0
200077bc:	68f8      	ldr	r0, [r7, #12]
200077be:	f002 f827 	bl	20009810 <I2C_RequestMemoryWrite>
200077c2:	4603      	mov	r3, r0
200077c4:	2b00      	cmp	r3, #0
200077c6:	d005      	beq.n	200077d4 <HAL_I2C_Mem_Write_IT+0xec>
        != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
200077c8:	68fb      	ldr	r3, [r7, #12]
200077ca:	2200      	movs	r2, #0
200077cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
200077d0:	2301      	movs	r3, #1
200077d2:	e014      	b.n	200077fe <HAL_I2C_Mem_Write_IT+0x116>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
200077d4:	68fb      	ldr	r3, [r7, #12]
200077d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
200077d8:	b2da      	uxtb	r2, r3
200077da:	8979      	ldrh	r1, [r7, #10]
200077dc:	2300      	movs	r3, #0
200077de:	9300      	str	r3, [sp, #0]
200077e0:	697b      	ldr	r3, [r7, #20]
200077e2:	68f8      	ldr	r0, [r7, #12]
200077e4:	f003 f874 	bl	2000a8d0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
200077e8:	68fb      	ldr	r3, [r7, #12]
200077ea:	2200      	movs	r2, #0
200077ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
200077f0:	2101      	movs	r1, #1
200077f2:	68f8      	ldr	r0, [r7, #12]
200077f4:	f003 f89e 	bl	2000a934 <I2C_Enable_IRQ>

    return HAL_OK;
200077f8:	2300      	movs	r3, #0
200077fa:	e000      	b.n	200077fe <HAL_I2C_Mem_Write_IT+0x116>
  }
  else
  {
    return HAL_BUSY;
200077fc:	2302      	movs	r3, #2
  }
}
200077fe:	4618      	mov	r0, r3
20007800:	3718      	adds	r7, #24
20007802:	46bd      	mov	sp, r7
20007804:	bd80      	pop	{r7, pc}
20007806:	bf00      	nop
20007808:	ffff0000 	.word	0xffff0000
2000780c:	20009013 	.word	0x20009013

20007810 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
20007810:	b580      	push	{r7, lr}
20007812:	b088      	sub	sp, #32
20007814:	af02      	add	r7, sp, #8
20007816:	60f8      	str	r0, [r7, #12]
20007818:	4608      	mov	r0, r1
2000781a:	4611      	mov	r1, r2
2000781c:	461a      	mov	r2, r3
2000781e:	4603      	mov	r3, r0
20007820:	817b      	strh	r3, [r7, #10]
20007822:	460b      	mov	r3, r1
20007824:	813b      	strh	r3, [r7, #8]
20007826:	4613      	mov	r3, r2
20007828:	80fb      	strh	r3, [r7, #6]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2000782a:	68fb      	ldr	r3, [r7, #12]
2000782c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20007830:	b2db      	uxtb	r3, r3
20007832:	2b20      	cmp	r3, #32
20007834:	d176      	bne.n	20007924 <HAL_I2C_Mem_Read_IT+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
20007836:	6a3b      	ldr	r3, [r7, #32]
20007838:	2b00      	cmp	r3, #0
2000783a:	d002      	beq.n	20007842 <HAL_I2C_Mem_Read_IT+0x32>
2000783c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
2000783e:	2b00      	cmp	r3, #0
20007840:	d105      	bne.n	2000784e <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
20007842:	68fb      	ldr	r3, [r7, #12]
20007844:	f44f 7200 	mov.w	r2, #512	; 0x200
20007848:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2000784a:	2301      	movs	r3, #1
2000784c:	e06b      	b.n	20007926 <HAL_I2C_Mem_Read_IT+0x116>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2000784e:	68fb      	ldr	r3, [r7, #12]
20007850:	681b      	ldr	r3, [r3, #0]
20007852:	699b      	ldr	r3, [r3, #24]
20007854:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
20007858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2000785c:	d101      	bne.n	20007862 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
2000785e:	2302      	movs	r3, #2
20007860:	e061      	b.n	20007926 <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
20007862:	68fb      	ldr	r3, [r7, #12]
20007864:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
20007868:	2b01      	cmp	r3, #1
2000786a:	d101      	bne.n	20007870 <HAL_I2C_Mem_Read_IT+0x60>
2000786c:	2302      	movs	r3, #2
2000786e:	e05a      	b.n	20007926 <HAL_I2C_Mem_Read_IT+0x116>
20007870:	68fb      	ldr	r3, [r7, #12]
20007872:	2201      	movs	r2, #1
20007874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
20007878:	f7fa fa6e 	bl	20001d58 <HAL_GetTick>
2000787c:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2000787e:	68fb      	ldr	r3, [r7, #12]
20007880:	2222      	movs	r2, #34	; 0x22
20007882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
20007886:	68fb      	ldr	r3, [r7, #12]
20007888:	2240      	movs	r2, #64	; 0x40
2000788a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2000788e:	68fb      	ldr	r3, [r7, #12]
20007890:	2200      	movs	r2, #0
20007892:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
20007894:	68fb      	ldr	r3, [r7, #12]
20007896:	6a3a      	ldr	r2, [r7, #32]
20007898:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2000789a:	68fb      	ldr	r3, [r7, #12]
2000789c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
2000789e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
200078a0:	68fb      	ldr	r3, [r7, #12]
200078a2:	4a23      	ldr	r2, [pc, #140]	; (20007930 <HAL_I2C_Mem_Read_IT+0x120>)
200078a4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
200078a6:	68fb      	ldr	r3, [r7, #12]
200078a8:	4a22      	ldr	r2, [pc, #136]	; (20007934 <HAL_I2C_Mem_Read_IT+0x124>)
200078aa:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
200078ac:	68fb      	ldr	r3, [r7, #12]
200078ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
200078b0:	b29b      	uxth	r3, r3
200078b2:	2bff      	cmp	r3, #255	; 0xff
200078b4:	d906      	bls.n	200078c4 <HAL_I2C_Mem_Read_IT+0xb4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
200078b6:	68fb      	ldr	r3, [r7, #12]
200078b8:	22ff      	movs	r2, #255	; 0xff
200078ba:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
200078bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
200078c0:	617b      	str	r3, [r7, #20]
200078c2:	e007      	b.n	200078d4 <HAL_I2C_Mem_Read_IT+0xc4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
200078c4:	68fb      	ldr	r3, [r7, #12]
200078c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
200078c8:	b29a      	uxth	r2, r3
200078ca:	68fb      	ldr	r3, [r7, #12]
200078cc:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
200078ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
200078d2:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
200078d4:	88f8      	ldrh	r0, [r7, #6]
200078d6:	893a      	ldrh	r2, [r7, #8]
200078d8:	8979      	ldrh	r1, [r7, #10]
200078da:	693b      	ldr	r3, [r7, #16]
200078dc:	9301      	str	r3, [sp, #4]
200078de:	2319      	movs	r3, #25
200078e0:	9300      	str	r3, [sp, #0]
200078e2:	4603      	mov	r3, r0
200078e4:	68f8      	ldr	r0, [r7, #12]
200078e6:	f001 ffe7 	bl	200098b8 <I2C_RequestMemoryRead>
200078ea:	4603      	mov	r3, r0
200078ec:	2b00      	cmp	r3, #0
200078ee:	d005      	beq.n	200078fc <HAL_I2C_Mem_Read_IT+0xec>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
200078f0:	68fb      	ldr	r3, [r7, #12]
200078f2:	2200      	movs	r2, #0
200078f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
200078f8:	2301      	movs	r3, #1
200078fa:	e014      	b.n	20007926 <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
200078fc:	68fb      	ldr	r3, [r7, #12]
200078fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20007900:	b2da      	uxtb	r2, r3
20007902:	8979      	ldrh	r1, [r7, #10]
20007904:	4b0c      	ldr	r3, [pc, #48]	; (20007938 <HAL_I2C_Mem_Read_IT+0x128>)
20007906:	9300      	str	r3, [sp, #0]
20007908:	697b      	ldr	r3, [r7, #20]
2000790a:	68f8      	ldr	r0, [r7, #12]
2000790c:	f002 ffe0 	bl	2000a8d0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
20007910:	68fb      	ldr	r3, [r7, #12]
20007912:	2200      	movs	r2, #0
20007914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
20007918:	2102      	movs	r1, #2
2000791a:	68f8      	ldr	r0, [r7, #12]
2000791c:	f003 f80a 	bl	2000a934 <I2C_Enable_IRQ>

    return HAL_OK;
20007920:	2300      	movs	r3, #0
20007922:	e000      	b.n	20007926 <HAL_I2C_Mem_Read_IT+0x116>
  }
  else
  {
    return HAL_BUSY;
20007924:	2302      	movs	r3, #2
  }
}
20007926:	4618      	mov	r0, r3
20007928:	3718      	adds	r7, #24
2000792a:	46bd      	mov	sp, r7
2000792c:	bd80      	pop	{r7, pc}
2000792e:	bf00      	nop
20007930:	ffff0000 	.word	0xffff0000
20007934:	20009013 	.word	0x20009013
20007938:	80002400 	.word	0x80002400

2000793c <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
2000793c:	b580      	push	{r7, lr}
2000793e:	b08a      	sub	sp, #40	; 0x28
20007940:	af02      	add	r7, sp, #8
20007942:	60f8      	str	r0, [r7, #12]
20007944:	4608      	mov	r0, r1
20007946:	4611      	mov	r1, r2
20007948:	461a      	mov	r2, r3
2000794a:	4603      	mov	r3, r0
2000794c:	817b      	strh	r3, [r7, #10]
2000794e:	460b      	mov	r3, r1
20007950:	813b      	strh	r3, [r7, #8]
20007952:	4613      	mov	r3, r2
20007954:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
20007956:	68fb      	ldr	r3, [r7, #12]
20007958:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000795c:	b2db      	uxtb	r3, r3
2000795e:	2b20      	cmp	r3, #32
20007960:	f040 80d5 	bne.w	20007b0e <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
20007964:	6abb      	ldr	r3, [r7, #40]	; 0x28
20007966:	2b00      	cmp	r3, #0
20007968:	d002      	beq.n	20007970 <HAL_I2C_Mem_Write_DMA+0x34>
2000796a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
2000796c:	2b00      	cmp	r3, #0
2000796e:	d105      	bne.n	2000797c <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
20007970:	68fb      	ldr	r3, [r7, #12]
20007972:	f44f 7200 	mov.w	r2, #512	; 0x200
20007976:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
20007978:	2301      	movs	r3, #1
2000797a:	e0c9      	b.n	20007b10 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2000797c:	68fb      	ldr	r3, [r7, #12]
2000797e:	681b      	ldr	r3, [r3, #0]
20007980:	699b      	ldr	r3, [r3, #24]
20007982:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
20007986:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2000798a:	d101      	bne.n	20007990 <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
2000798c:	2302      	movs	r3, #2
2000798e:	e0bf      	b.n	20007b10 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
20007990:	68fb      	ldr	r3, [r7, #12]
20007992:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
20007996:	2b01      	cmp	r3, #1
20007998:	d101      	bne.n	2000799e <HAL_I2C_Mem_Write_DMA+0x62>
2000799a:	2302      	movs	r3, #2
2000799c:	e0b8      	b.n	20007b10 <HAL_I2C_Mem_Write_DMA+0x1d4>
2000799e:	68fb      	ldr	r3, [r7, #12]
200079a0:	2201      	movs	r2, #1
200079a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
200079a6:	f7fa f9d7 	bl	20001d58 <HAL_GetTick>
200079aa:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
200079ac:	68fb      	ldr	r3, [r7, #12]
200079ae:	2221      	movs	r2, #33	; 0x21
200079b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
200079b4:	68fb      	ldr	r3, [r7, #12]
200079b6:	2240      	movs	r2, #64	; 0x40
200079b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
200079bc:	68fb      	ldr	r3, [r7, #12]
200079be:	2200      	movs	r2, #0
200079c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
200079c2:	68fb      	ldr	r3, [r7, #12]
200079c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
200079c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
200079c8:	68fb      	ldr	r3, [r7, #12]
200079ca:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
200079cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
200079ce:	68fb      	ldr	r3, [r7, #12]
200079d0:	4a51      	ldr	r2, [pc, #324]	; (20007b18 <HAL_I2C_Mem_Write_DMA+0x1dc>)
200079d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
200079d4:	68fb      	ldr	r3, [r7, #12]
200079d6:	4a51      	ldr	r2, [pc, #324]	; (20007b1c <HAL_I2C_Mem_Write_DMA+0x1e0>)
200079d8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
200079da:	68fb      	ldr	r3, [r7, #12]
200079dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
200079de:	b29b      	uxth	r3, r3
200079e0:	2bff      	cmp	r3, #255	; 0xff
200079e2:	d906      	bls.n	200079f2 <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
200079e4:	68fb      	ldr	r3, [r7, #12]
200079e6:	22ff      	movs	r2, #255	; 0xff
200079e8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
200079ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
200079ee:	61fb      	str	r3, [r7, #28]
200079f0:	e007      	b.n	20007a02 <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
200079f2:	68fb      	ldr	r3, [r7, #12]
200079f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
200079f6:	b29a      	uxth	r2, r3
200079f8:	68fb      	ldr	r3, [r7, #12]
200079fa:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
200079fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
20007a00:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart)
20007a02:	88f8      	ldrh	r0, [r7, #6]
20007a04:	893a      	ldrh	r2, [r7, #8]
20007a06:	8979      	ldrh	r1, [r7, #10]
20007a08:	69bb      	ldr	r3, [r7, #24]
20007a0a:	9301      	str	r3, [sp, #4]
20007a0c:	2319      	movs	r3, #25
20007a0e:	9300      	str	r3, [sp, #0]
20007a10:	4603      	mov	r3, r0
20007a12:	68f8      	ldr	r0, [r7, #12]
20007a14:	f001 fefc 	bl	20009810 <I2C_RequestMemoryWrite>
20007a18:	4603      	mov	r3, r0
20007a1a:	2b00      	cmp	r3, #0
20007a1c:	d005      	beq.n	20007a2a <HAL_I2C_Mem_Write_DMA+0xee>
        != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
20007a1e:	68fb      	ldr	r3, [r7, #12]
20007a20:	2200      	movs	r2, #0
20007a22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
20007a26:	2301      	movs	r3, #1
20007a28:	e072      	b.n	20007b10 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
20007a2a:	68fb      	ldr	r3, [r7, #12]
20007a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20007a2e:	2b00      	cmp	r3, #0
20007a30:	d020      	beq.n	20007a74 <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
20007a32:	68fb      	ldr	r3, [r7, #12]
20007a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20007a36:	4a3a      	ldr	r2, [pc, #232]	; (20007b20 <HAL_I2C_Mem_Write_DMA+0x1e4>)
20007a38:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
20007a3a:	68fb      	ldr	r3, [r7, #12]
20007a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20007a3e:	4a39      	ldr	r2, [pc, #228]	; (20007b24 <HAL_I2C_Mem_Write_DMA+0x1e8>)
20007a40:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
20007a42:	68fb      	ldr	r3, [r7, #12]
20007a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20007a46:	2200      	movs	r2, #0
20007a48:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
20007a4a:	68fb      	ldr	r3, [r7, #12]
20007a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20007a4e:	2200      	movs	r2, #0
20007a50:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
20007a52:	68fb      	ldr	r3, [r7, #12]
20007a54:	6b98      	ldr	r0, [r3, #56]	; 0x38
20007a56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
20007a58:	68fb      	ldr	r3, [r7, #12]
20007a5a:	681b      	ldr	r3, [r3, #0]
20007a5c:	3328      	adds	r3, #40	; 0x28
20007a5e:	461a      	mov	r2, r3
                                       hi2c->XferSize);
20007a60:	68fb      	ldr	r3, [r7, #12]
20007a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
20007a64:	f7fa ff91 	bl	2000298a <HAL_DMA_Start_IT>
20007a68:	4603      	mov	r3, r0
20007a6a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
20007a6c:	7dfb      	ldrb	r3, [r7, #23]
20007a6e:	2b00      	cmp	r3, #0
20007a70:	d139      	bne.n	20007ae6 <HAL_I2C_Mem_Write_DMA+0x1aa>
20007a72:	e013      	b.n	20007a9c <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
20007a74:	68fb      	ldr	r3, [r7, #12]
20007a76:	2220      	movs	r2, #32
20007a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
20007a7c:	68fb      	ldr	r3, [r7, #12]
20007a7e:	2200      	movs	r2, #0
20007a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
20007a84:	68fb      	ldr	r3, [r7, #12]
20007a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20007a88:	f043 0280 	orr.w	r2, r3, #128	; 0x80
20007a8c:	68fb      	ldr	r3, [r7, #12]
20007a8e:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
20007a90:	68fb      	ldr	r3, [r7, #12]
20007a92:	2200      	movs	r2, #0
20007a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
20007a98:	2301      	movs	r3, #1
20007a9a:	e039      	b.n	20007b10 <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
20007a9c:	68fb      	ldr	r3, [r7, #12]
20007a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20007aa0:	b2da      	uxtb	r2, r3
20007aa2:	8979      	ldrh	r1, [r7, #10]
20007aa4:	2300      	movs	r3, #0
20007aa6:	9300      	str	r3, [sp, #0]
20007aa8:	69fb      	ldr	r3, [r7, #28]
20007aaa:	68f8      	ldr	r0, [r7, #12]
20007aac:	f002 ff10 	bl	2000a8d0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
20007ab0:	68fb      	ldr	r3, [r7, #12]
20007ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20007ab4:	b29a      	uxth	r2, r3
20007ab6:	68fb      	ldr	r3, [r7, #12]
20007ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20007aba:	1ad3      	subs	r3, r2, r3
20007abc:	b29a      	uxth	r2, r3
20007abe:	68fb      	ldr	r3, [r7, #12]
20007ac0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
20007ac2:	68fb      	ldr	r3, [r7, #12]
20007ac4:	2200      	movs	r2, #0
20007ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
20007aca:	2110      	movs	r1, #16
20007acc:	68f8      	ldr	r0, [r7, #12]
20007ace:	f002 ff31 	bl	2000a934 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
20007ad2:	68fb      	ldr	r3, [r7, #12]
20007ad4:	681b      	ldr	r3, [r3, #0]
20007ad6:	681a      	ldr	r2, [r3, #0]
20007ad8:	68fb      	ldr	r3, [r7, #12]
20007ada:	681b      	ldr	r3, [r3, #0]
20007adc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
20007ae0:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
20007ae2:	2300      	movs	r3, #0
20007ae4:	e014      	b.n	20007b10 <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
20007ae6:	68fb      	ldr	r3, [r7, #12]
20007ae8:	2220      	movs	r2, #32
20007aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
20007aee:	68fb      	ldr	r3, [r7, #12]
20007af0:	2200      	movs	r2, #0
20007af2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
20007af6:	68fb      	ldr	r3, [r7, #12]
20007af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20007afa:	f043 0210 	orr.w	r2, r3, #16
20007afe:	68fb      	ldr	r3, [r7, #12]
20007b00:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
20007b02:	68fb      	ldr	r3, [r7, #12]
20007b04:	2200      	movs	r2, #0
20007b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
20007b0a:	2301      	movs	r3, #1
20007b0c:	e000      	b.n	20007b10 <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
20007b0e:	2302      	movs	r3, #2
  }
}
20007b10:	4618      	mov	r0, r3
20007b12:	3720      	adds	r7, #32
20007b14:	46bd      	mov	sp, r7
20007b16:	bd80      	pop	{r7, pc}
20007b18:	ffff0000 	.word	0xffff0000
20007b1c:	20009469 	.word	0x20009469
20007b20:	2000a22b 	.word	0x2000a22b
20007b24:	2000a3dd 	.word	0x2000a3dd

20007b28 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
20007b28:	b580      	push	{r7, lr}
20007b2a:	b08a      	sub	sp, #40	; 0x28
20007b2c:	af02      	add	r7, sp, #8
20007b2e:	60f8      	str	r0, [r7, #12]
20007b30:	4608      	mov	r0, r1
20007b32:	4611      	mov	r1, r2
20007b34:	461a      	mov	r2, r3
20007b36:	4603      	mov	r3, r0
20007b38:	817b      	strh	r3, [r7, #10]
20007b3a:	460b      	mov	r3, r1
20007b3c:	813b      	strh	r3, [r7, #8]
20007b3e:	4613      	mov	r3, r2
20007b40:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
20007b42:	68fb      	ldr	r3, [r7, #12]
20007b44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20007b48:	b2db      	uxtb	r3, r3
20007b4a:	2b20      	cmp	r3, #32
20007b4c:	f040 80d5 	bne.w	20007cfa <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
20007b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
20007b52:	2b00      	cmp	r3, #0
20007b54:	d002      	beq.n	20007b5c <HAL_I2C_Mem_Read_DMA+0x34>
20007b56:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
20007b58:	2b00      	cmp	r3, #0
20007b5a:	d105      	bne.n	20007b68 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
20007b5c:	68fb      	ldr	r3, [r7, #12]
20007b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
20007b62:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
20007b64:	2301      	movs	r3, #1
20007b66:	e0c9      	b.n	20007cfc <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
20007b68:	68fb      	ldr	r3, [r7, #12]
20007b6a:	681b      	ldr	r3, [r3, #0]
20007b6c:	699b      	ldr	r3, [r3, #24]
20007b6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
20007b72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20007b76:	d101      	bne.n	20007b7c <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
20007b78:	2302      	movs	r3, #2
20007b7a:	e0bf      	b.n	20007cfc <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
20007b7c:	68fb      	ldr	r3, [r7, #12]
20007b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
20007b82:	2b01      	cmp	r3, #1
20007b84:	d101      	bne.n	20007b8a <HAL_I2C_Mem_Read_DMA+0x62>
20007b86:	2302      	movs	r3, #2
20007b88:	e0b8      	b.n	20007cfc <HAL_I2C_Mem_Read_DMA+0x1d4>
20007b8a:	68fb      	ldr	r3, [r7, #12]
20007b8c:	2201      	movs	r2, #1
20007b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
20007b92:	f7fa f8e1 	bl	20001d58 <HAL_GetTick>
20007b96:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
20007b98:	68fb      	ldr	r3, [r7, #12]
20007b9a:	2222      	movs	r2, #34	; 0x22
20007b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
20007ba0:	68fb      	ldr	r3, [r7, #12]
20007ba2:	2240      	movs	r2, #64	; 0x40
20007ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
20007ba8:	68fb      	ldr	r3, [r7, #12]
20007baa:	2200      	movs	r2, #0
20007bac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
20007bae:	68fb      	ldr	r3, [r7, #12]
20007bb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
20007bb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
20007bb4:	68fb      	ldr	r3, [r7, #12]
20007bb6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
20007bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
20007bba:	68fb      	ldr	r3, [r7, #12]
20007bbc:	4a51      	ldr	r2, [pc, #324]	; (20007d04 <HAL_I2C_Mem_Read_DMA+0x1dc>)
20007bbe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
20007bc0:	68fb      	ldr	r3, [r7, #12]
20007bc2:	4a51      	ldr	r2, [pc, #324]	; (20007d08 <HAL_I2C_Mem_Read_DMA+0x1e0>)
20007bc4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
20007bc6:	68fb      	ldr	r3, [r7, #12]
20007bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20007bca:	b29b      	uxth	r3, r3
20007bcc:	2bff      	cmp	r3, #255	; 0xff
20007bce:	d906      	bls.n	20007bde <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
20007bd0:	68fb      	ldr	r3, [r7, #12]
20007bd2:	22ff      	movs	r2, #255	; 0xff
20007bd4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
20007bd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
20007bda:	61fb      	str	r3, [r7, #28]
20007bdc:	e007      	b.n	20007bee <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
20007bde:	68fb      	ldr	r3, [r7, #12]
20007be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20007be2:	b29a      	uxth	r2, r3
20007be4:	68fb      	ldr	r3, [r7, #12]
20007be6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
20007be8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
20007bec:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
20007bee:	88f8      	ldrh	r0, [r7, #6]
20007bf0:	893a      	ldrh	r2, [r7, #8]
20007bf2:	8979      	ldrh	r1, [r7, #10]
20007bf4:	69bb      	ldr	r3, [r7, #24]
20007bf6:	9301      	str	r3, [sp, #4]
20007bf8:	2319      	movs	r3, #25
20007bfa:	9300      	str	r3, [sp, #0]
20007bfc:	4603      	mov	r3, r0
20007bfe:	68f8      	ldr	r0, [r7, #12]
20007c00:	f001 fe5a 	bl	200098b8 <I2C_RequestMemoryRead>
20007c04:	4603      	mov	r3, r0
20007c06:	2b00      	cmp	r3, #0
20007c08:	d005      	beq.n	20007c16 <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
20007c0a:	68fb      	ldr	r3, [r7, #12]
20007c0c:	2200      	movs	r2, #0
20007c0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
20007c12:	2301      	movs	r3, #1
20007c14:	e072      	b.n	20007cfc <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
20007c16:	68fb      	ldr	r3, [r7, #12]
20007c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20007c1a:	2b00      	cmp	r3, #0
20007c1c:	d020      	beq.n	20007c60 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
20007c1e:	68fb      	ldr	r3, [r7, #12]
20007c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20007c22:	4a3a      	ldr	r2, [pc, #232]	; (20007d0c <HAL_I2C_Mem_Read_DMA+0x1e4>)
20007c24:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
20007c26:	68fb      	ldr	r3, [r7, #12]
20007c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20007c2a:	4a39      	ldr	r2, [pc, #228]	; (20007d10 <HAL_I2C_Mem_Read_DMA+0x1e8>)
20007c2c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
20007c2e:	68fb      	ldr	r3, [r7, #12]
20007c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20007c32:	2200      	movs	r2, #0
20007c34:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
20007c36:	68fb      	ldr	r3, [r7, #12]
20007c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20007c3a:	2200      	movs	r2, #0
20007c3c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
20007c3e:	68fb      	ldr	r3, [r7, #12]
20007c40:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
20007c42:	68fb      	ldr	r3, [r7, #12]
20007c44:	681b      	ldr	r3, [r3, #0]
20007c46:	3324      	adds	r3, #36	; 0x24
20007c48:	4619      	mov	r1, r3
20007c4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
                                       hi2c->XferSize);
20007c4c:	68fb      	ldr	r3, [r7, #12]
20007c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
20007c50:	f7fa fe9b 	bl	2000298a <HAL_DMA_Start_IT>
20007c54:	4603      	mov	r3, r0
20007c56:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
20007c58:	7dfb      	ldrb	r3, [r7, #23]
20007c5a:	2b00      	cmp	r3, #0
20007c5c:	d139      	bne.n	20007cd2 <HAL_I2C_Mem_Read_DMA+0x1aa>
20007c5e:	e013      	b.n	20007c88 <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
20007c60:	68fb      	ldr	r3, [r7, #12]
20007c62:	2220      	movs	r2, #32
20007c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
20007c68:	68fb      	ldr	r3, [r7, #12]
20007c6a:	2200      	movs	r2, #0
20007c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
20007c70:	68fb      	ldr	r3, [r7, #12]
20007c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20007c74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
20007c78:	68fb      	ldr	r3, [r7, #12]
20007c7a:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
20007c7c:	68fb      	ldr	r3, [r7, #12]
20007c7e:	2200      	movs	r2, #0
20007c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
20007c84:	2301      	movs	r3, #1
20007c86:	e039      	b.n	20007cfc <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
20007c88:	68fb      	ldr	r3, [r7, #12]
20007c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20007c8c:	b2da      	uxtb	r2, r3
20007c8e:	8979      	ldrh	r1, [r7, #10]
20007c90:	4b20      	ldr	r3, [pc, #128]	; (20007d14 <HAL_I2C_Mem_Read_DMA+0x1ec>)
20007c92:	9300      	str	r3, [sp, #0]
20007c94:	69fb      	ldr	r3, [r7, #28]
20007c96:	68f8      	ldr	r0, [r7, #12]
20007c98:	f002 fe1a 	bl	2000a8d0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
20007c9c:	68fb      	ldr	r3, [r7, #12]
20007c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20007ca0:	b29a      	uxth	r2, r3
20007ca2:	68fb      	ldr	r3, [r7, #12]
20007ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20007ca6:	1ad3      	subs	r3, r2, r3
20007ca8:	b29a      	uxth	r2, r3
20007caa:	68fb      	ldr	r3, [r7, #12]
20007cac:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
20007cae:	68fb      	ldr	r3, [r7, #12]
20007cb0:	2200      	movs	r2, #0
20007cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
20007cb6:	2110      	movs	r1, #16
20007cb8:	68f8      	ldr	r0, [r7, #12]
20007cba:	f002 fe3b 	bl	2000a934 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
20007cbe:	68fb      	ldr	r3, [r7, #12]
20007cc0:	681b      	ldr	r3, [r3, #0]
20007cc2:	681a      	ldr	r2, [r3, #0]
20007cc4:	68fb      	ldr	r3, [r7, #12]
20007cc6:	681b      	ldr	r3, [r3, #0]
20007cc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
20007ccc:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
20007cce:	2300      	movs	r3, #0
20007cd0:	e014      	b.n	20007cfc <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
20007cd2:	68fb      	ldr	r3, [r7, #12]
20007cd4:	2220      	movs	r2, #32
20007cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
20007cda:	68fb      	ldr	r3, [r7, #12]
20007cdc:	2200      	movs	r2, #0
20007cde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
20007ce2:	68fb      	ldr	r3, [r7, #12]
20007ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20007ce6:	f043 0210 	orr.w	r2, r3, #16
20007cea:	68fb      	ldr	r3, [r7, #12]
20007cec:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
20007cee:	68fb      	ldr	r3, [r7, #12]
20007cf0:	2200      	movs	r2, #0
20007cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
20007cf6:	2301      	movs	r3, #1
20007cf8:	e000      	b.n	20007cfc <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
20007cfa:	2302      	movs	r3, #2
  }
}
20007cfc:	4618      	mov	r0, r3
20007cfe:	3720      	adds	r7, #32
20007d00:	46bd      	mov	sp, r7
20007d02:	bd80      	pop	{r7, pc}
20007d04:	ffff0000 	.word	0xffff0000
20007d08:	20009469 	.word	0x20009469
20007d0c:	2000a301 	.word	0x2000a301
20007d10:	2000a3dd 	.word	0x2000a3dd
20007d14:	80002400 	.word	0x80002400

20007d18 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
20007d18:	b580      	push	{r7, lr}
20007d1a:	b08a      	sub	sp, #40	; 0x28
20007d1c:	af02      	add	r7, sp, #8
20007d1e:	60f8      	str	r0, [r7, #12]
20007d20:	607a      	str	r2, [r7, #4]
20007d22:	603b      	str	r3, [r7, #0]
20007d24:	460b      	mov	r3, r1
20007d26:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
20007d28:	2300      	movs	r3, #0
20007d2a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
20007d2c:	68fb      	ldr	r3, [r7, #12]
20007d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20007d32:	b2db      	uxtb	r3, r3
20007d34:	2b20      	cmp	r3, #32
20007d36:	f040 80ef 	bne.w	20007f18 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
20007d3a:	68fb      	ldr	r3, [r7, #12]
20007d3c:	681b      	ldr	r3, [r3, #0]
20007d3e:	699b      	ldr	r3, [r3, #24]
20007d40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
20007d44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20007d48:	d101      	bne.n	20007d4e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
20007d4a:	2302      	movs	r3, #2
20007d4c:	e0e5      	b.n	20007f1a <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
20007d4e:	68fb      	ldr	r3, [r7, #12]
20007d50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
20007d54:	2b01      	cmp	r3, #1
20007d56:	d101      	bne.n	20007d5c <HAL_I2C_IsDeviceReady+0x44>
20007d58:	2302      	movs	r3, #2
20007d5a:	e0de      	b.n	20007f1a <HAL_I2C_IsDeviceReady+0x202>
20007d5c:	68fb      	ldr	r3, [r7, #12]
20007d5e:	2201      	movs	r2, #1
20007d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
20007d64:	68fb      	ldr	r3, [r7, #12]
20007d66:	2224      	movs	r2, #36	; 0x24
20007d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
20007d6c:	68fb      	ldr	r3, [r7, #12]
20007d6e:	2200      	movs	r2, #0
20007d70:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
20007d72:	68fb      	ldr	r3, [r7, #12]
20007d74:	68db      	ldr	r3, [r3, #12]
20007d76:	2b01      	cmp	r3, #1
20007d78:	d105      	bne.n	20007d86 <HAL_I2C_IsDeviceReady+0x6e>
20007d7a:	897b      	ldrh	r3, [r7, #10]
20007d7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
20007d80:	4b68      	ldr	r3, [pc, #416]	; (20007f24 <HAL_I2C_IsDeviceReady+0x20c>)
20007d82:	4313      	orrs	r3, r2
20007d84:	e004      	b.n	20007d90 <HAL_I2C_IsDeviceReady+0x78>
20007d86:	897b      	ldrh	r3, [r7, #10]
20007d88:	f3c3 0309 	ubfx	r3, r3, #0, #10
20007d8c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
20007d90:	68fa      	ldr	r2, [r7, #12]
20007d92:	6812      	ldr	r2, [r2, #0]
20007d94:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
20007d96:	f7f9 ffdf 	bl	20001d58 <HAL_GetTick>
20007d9a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
20007d9c:	68fb      	ldr	r3, [r7, #12]
20007d9e:	681b      	ldr	r3, [r3, #0]
20007da0:	699b      	ldr	r3, [r3, #24]
20007da2:	f003 0320 	and.w	r3, r3, #32
20007da6:	2b20      	cmp	r3, #32
20007da8:	bf0c      	ite	eq
20007daa:	2301      	moveq	r3, #1
20007dac:	2300      	movne	r3, #0
20007dae:	b2db      	uxtb	r3, r3
20007db0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
20007db2:	68fb      	ldr	r3, [r7, #12]
20007db4:	681b      	ldr	r3, [r3, #0]
20007db6:	699b      	ldr	r3, [r3, #24]
20007db8:	f003 0310 	and.w	r3, r3, #16
20007dbc:	2b10      	cmp	r3, #16
20007dbe:	bf0c      	ite	eq
20007dc0:	2301      	moveq	r3, #1
20007dc2:	2300      	movne	r3, #0
20007dc4:	b2db      	uxtb	r3, r3
20007dc6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
20007dc8:	e034      	b.n	20007e34 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
20007dca:	683b      	ldr	r3, [r7, #0]
20007dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
20007dd0:	d01a      	beq.n	20007e08 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
20007dd2:	f7f9 ffc1 	bl	20001d58 <HAL_GetTick>
20007dd6:	4602      	mov	r2, r0
20007dd8:	69bb      	ldr	r3, [r7, #24]
20007dda:	1ad3      	subs	r3, r2, r3
20007ddc:	683a      	ldr	r2, [r7, #0]
20007dde:	429a      	cmp	r2, r3
20007de0:	d302      	bcc.n	20007de8 <HAL_I2C_IsDeviceReady+0xd0>
20007de2:	683b      	ldr	r3, [r7, #0]
20007de4:	2b00      	cmp	r3, #0
20007de6:	d10f      	bne.n	20007e08 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
20007de8:	68fb      	ldr	r3, [r7, #12]
20007dea:	2220      	movs	r2, #32
20007dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
20007df0:	68fb      	ldr	r3, [r7, #12]
20007df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20007df4:	f043 0220 	orr.w	r2, r3, #32
20007df8:	68fb      	ldr	r3, [r7, #12]
20007dfa:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
20007dfc:	68fb      	ldr	r3, [r7, #12]
20007dfe:	2200      	movs	r2, #0
20007e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
20007e04:	2301      	movs	r3, #1
20007e06:	e088      	b.n	20007f1a <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
20007e08:	68fb      	ldr	r3, [r7, #12]
20007e0a:	681b      	ldr	r3, [r3, #0]
20007e0c:	699b      	ldr	r3, [r3, #24]
20007e0e:	f003 0320 	and.w	r3, r3, #32
20007e12:	2b20      	cmp	r3, #32
20007e14:	bf0c      	ite	eq
20007e16:	2301      	moveq	r3, #1
20007e18:	2300      	movne	r3, #0
20007e1a:	b2db      	uxtb	r3, r3
20007e1c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
20007e1e:	68fb      	ldr	r3, [r7, #12]
20007e20:	681b      	ldr	r3, [r3, #0]
20007e22:	699b      	ldr	r3, [r3, #24]
20007e24:	f003 0310 	and.w	r3, r3, #16
20007e28:	2b10      	cmp	r3, #16
20007e2a:	bf0c      	ite	eq
20007e2c:	2301      	moveq	r3, #1
20007e2e:	2300      	movne	r3, #0
20007e30:	b2db      	uxtb	r3, r3
20007e32:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
20007e34:	7ffb      	ldrb	r3, [r7, #31]
20007e36:	2b00      	cmp	r3, #0
20007e38:	d102      	bne.n	20007e40 <HAL_I2C_IsDeviceReady+0x128>
20007e3a:	7fbb      	ldrb	r3, [r7, #30]
20007e3c:	2b00      	cmp	r3, #0
20007e3e:	d0c4      	beq.n	20007dca <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
20007e40:	68fb      	ldr	r3, [r7, #12]
20007e42:	681b      	ldr	r3, [r3, #0]
20007e44:	699b      	ldr	r3, [r3, #24]
20007e46:	f003 0310 	and.w	r3, r3, #16
20007e4a:	2b10      	cmp	r3, #16
20007e4c:	d01a      	beq.n	20007e84 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
20007e4e:	69bb      	ldr	r3, [r7, #24]
20007e50:	9300      	str	r3, [sp, #0]
20007e52:	683b      	ldr	r3, [r7, #0]
20007e54:	2200      	movs	r2, #0
20007e56:	2120      	movs	r1, #32
20007e58:	68f8      	ldr	r0, [r7, #12]
20007e5a:	f002 fb17 	bl	2000a48c <I2C_WaitOnFlagUntilTimeout>
20007e5e:	4603      	mov	r3, r0
20007e60:	2b00      	cmp	r3, #0
20007e62:	d001      	beq.n	20007e68 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
20007e64:	2301      	movs	r3, #1
20007e66:	e058      	b.n	20007f1a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
20007e68:	68fb      	ldr	r3, [r7, #12]
20007e6a:	681b      	ldr	r3, [r3, #0]
20007e6c:	2220      	movs	r2, #32
20007e6e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
20007e70:	68fb      	ldr	r3, [r7, #12]
20007e72:	2220      	movs	r2, #32
20007e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
20007e78:	68fb      	ldr	r3, [r7, #12]
20007e7a:	2200      	movs	r2, #0
20007e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
20007e80:	2300      	movs	r3, #0
20007e82:	e04a      	b.n	20007f1a <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
20007e84:	69bb      	ldr	r3, [r7, #24]
20007e86:	9300      	str	r3, [sp, #0]
20007e88:	683b      	ldr	r3, [r7, #0]
20007e8a:	2200      	movs	r2, #0
20007e8c:	2120      	movs	r1, #32
20007e8e:	68f8      	ldr	r0, [r7, #12]
20007e90:	f002 fafc 	bl	2000a48c <I2C_WaitOnFlagUntilTimeout>
20007e94:	4603      	mov	r3, r0
20007e96:	2b00      	cmp	r3, #0
20007e98:	d001      	beq.n	20007e9e <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
20007e9a:	2301      	movs	r3, #1
20007e9c:	e03d      	b.n	20007f1a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
20007e9e:	68fb      	ldr	r3, [r7, #12]
20007ea0:	681b      	ldr	r3, [r3, #0]
20007ea2:	2210      	movs	r2, #16
20007ea4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
20007ea6:	68fb      	ldr	r3, [r7, #12]
20007ea8:	681b      	ldr	r3, [r3, #0]
20007eaa:	2220      	movs	r2, #32
20007eac:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
20007eae:	697b      	ldr	r3, [r7, #20]
20007eb0:	687a      	ldr	r2, [r7, #4]
20007eb2:	429a      	cmp	r2, r3
20007eb4:	d118      	bne.n	20007ee8 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
20007eb6:	68fb      	ldr	r3, [r7, #12]
20007eb8:	681b      	ldr	r3, [r3, #0]
20007eba:	685a      	ldr	r2, [r3, #4]
20007ebc:	68fb      	ldr	r3, [r7, #12]
20007ebe:	681b      	ldr	r3, [r3, #0]
20007ec0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
20007ec4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
20007ec6:	69bb      	ldr	r3, [r7, #24]
20007ec8:	9300      	str	r3, [sp, #0]
20007eca:	683b      	ldr	r3, [r7, #0]
20007ecc:	2200      	movs	r2, #0
20007ece:	2120      	movs	r1, #32
20007ed0:	68f8      	ldr	r0, [r7, #12]
20007ed2:	f002 fadb 	bl	2000a48c <I2C_WaitOnFlagUntilTimeout>
20007ed6:	4603      	mov	r3, r0
20007ed8:	2b00      	cmp	r3, #0
20007eda:	d001      	beq.n	20007ee0 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
20007edc:	2301      	movs	r3, #1
20007ede:	e01c      	b.n	20007f1a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
20007ee0:	68fb      	ldr	r3, [r7, #12]
20007ee2:	681b      	ldr	r3, [r3, #0]
20007ee4:	2220      	movs	r2, #32
20007ee6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
20007ee8:	697b      	ldr	r3, [r7, #20]
20007eea:	3301      	adds	r3, #1
20007eec:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
20007eee:	697b      	ldr	r3, [r7, #20]
20007ef0:	687a      	ldr	r2, [r7, #4]
20007ef2:	429a      	cmp	r2, r3
20007ef4:	f63f af3d 	bhi.w	20007d72 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
20007ef8:	68fb      	ldr	r3, [r7, #12]
20007efa:	2220      	movs	r2, #32
20007efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
20007f00:	68fb      	ldr	r3, [r7, #12]
20007f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20007f04:	f043 0220 	orr.w	r2, r3, #32
20007f08:	68fb      	ldr	r3, [r7, #12]
20007f0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
20007f0c:	68fb      	ldr	r3, [r7, #12]
20007f0e:	2200      	movs	r2, #0
20007f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
20007f14:	2301      	movs	r3, #1
20007f16:	e000      	b.n	20007f1a <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
20007f18:	2302      	movs	r3, #2
  }
}
20007f1a:	4618      	mov	r0, r3
20007f1c:	3720      	adds	r7, #32
20007f1e:	46bd      	mov	sp, r7
20007f20:	bd80      	pop	{r7, pc}
20007f22:	bf00      	nop
20007f24:	02002000 	.word	0x02002000

20007f28 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                 uint16_t Size, uint32_t XferOptions)
{
20007f28:	b580      	push	{r7, lr}
20007f2a:	b088      	sub	sp, #32
20007f2c:	af02      	add	r7, sp, #8
20007f2e:	60f8      	str	r0, [r7, #12]
20007f30:	607a      	str	r2, [r7, #4]
20007f32:	461a      	mov	r2, r3
20007f34:	460b      	mov	r3, r1
20007f36:	817b      	strh	r3, [r7, #10]
20007f38:	4613      	mov	r3, r2
20007f3a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
20007f3c:	4b3a      	ldr	r3, [pc, #232]	; (20008028 <HAL_I2C_Master_Seq_Transmit_IT+0x100>)
20007f3e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
20007f40:	68fb      	ldr	r3, [r7, #12]
20007f42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20007f46:	b2db      	uxtb	r3, r3
20007f48:	2b20      	cmp	r3, #32
20007f4a:	d167      	bne.n	2000801c <HAL_I2C_Master_Seq_Transmit_IT+0xf4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
20007f4c:	68fb      	ldr	r3, [r7, #12]
20007f4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
20007f52:	2b01      	cmp	r3, #1
20007f54:	d101      	bne.n	20007f5a <HAL_I2C_Master_Seq_Transmit_IT+0x32>
20007f56:	2302      	movs	r3, #2
20007f58:	e061      	b.n	2000801e <HAL_I2C_Master_Seq_Transmit_IT+0xf6>
20007f5a:	68fb      	ldr	r3, [r7, #12]
20007f5c:	2201      	movs	r2, #1
20007f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
20007f62:	68fb      	ldr	r3, [r7, #12]
20007f64:	2221      	movs	r2, #33	; 0x21
20007f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
20007f6a:	68fb      	ldr	r3, [r7, #12]
20007f6c:	2210      	movs	r2, #16
20007f6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
20007f72:	68fb      	ldr	r3, [r7, #12]
20007f74:	2200      	movs	r2, #0
20007f76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
20007f78:	68fb      	ldr	r3, [r7, #12]
20007f7a:	687a      	ldr	r2, [r7, #4]
20007f7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
20007f7e:	68fb      	ldr	r3, [r7, #12]
20007f80:	893a      	ldrh	r2, [r7, #8]
20007f82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
20007f84:	68fb      	ldr	r3, [r7, #12]
20007f86:	6a3a      	ldr	r2, [r7, #32]
20007f88:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
20007f8a:	68fb      	ldr	r3, [r7, #12]
20007f8c:	4a27      	ldr	r2, [pc, #156]	; (2000802c <HAL_I2C_Master_Seq_Transmit_IT+0x104>)
20007f8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
20007f90:	68fb      	ldr	r3, [r7, #12]
20007f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20007f94:	b29b      	uxth	r3, r3
20007f96:	2bff      	cmp	r3, #255	; 0xff
20007f98:	d906      	bls.n	20007fa8 <HAL_I2C_Master_Seq_Transmit_IT+0x80>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
20007f9a:	68fb      	ldr	r3, [r7, #12]
20007f9c:	22ff      	movs	r2, #255	; 0xff
20007f9e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
20007fa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
20007fa4:	617b      	str	r3, [r7, #20]
20007fa6:	e007      	b.n	20007fb8 <HAL_I2C_Master_Seq_Transmit_IT+0x90>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
20007fa8:	68fb      	ldr	r3, [r7, #12]
20007faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20007fac:	b29a      	uxth	r2, r3
20007fae:	68fb      	ldr	r3, [r7, #12]
20007fb0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
20007fb2:	68fb      	ldr	r3, [r7, #12]
20007fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20007fb6:	617b      	str	r3, [r7, #20]
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
20007fb8:	68fb      	ldr	r3, [r7, #12]
20007fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20007fbc:	2b11      	cmp	r3, #17
20007fbe:	d10e      	bne.n	20007fde <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
20007fc0:	6a3b      	ldr	r3, [r7, #32]
20007fc2:	2baa      	cmp	r3, #170	; 0xaa
20007fc4:	d003      	beq.n	20007fce <HAL_I2C_Master_Seq_Transmit_IT+0xa6>
20007fc6:	6a3b      	ldr	r3, [r7, #32]
20007fc8:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
20007fcc:	d101      	bne.n	20007fd2 <HAL_I2C_Master_Seq_Transmit_IT+0xaa>
20007fce:	2301      	movs	r3, #1
20007fd0:	e000      	b.n	20007fd4 <HAL_I2C_Master_Seq_Transmit_IT+0xac>
20007fd2:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
20007fd4:	2b00      	cmp	r3, #0
20007fd6:	d102      	bne.n	20007fde <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
    {
      xferrequest = I2C_NO_STARTSTOP;
20007fd8:	2300      	movs	r3, #0
20007fda:	613b      	str	r3, [r7, #16]
20007fdc:	e00a      	b.n	20007ff4 <HAL_I2C_Master_Seq_Transmit_IT+0xcc>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
20007fde:	68f8      	ldr	r0, [r7, #12]
20007fe0:	f002 fd6a 	bl	2000aab8 <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
20007fe4:	68fb      	ldr	r3, [r7, #12]
20007fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20007fe8:	b29b      	uxth	r3, r3
20007fea:	2bff      	cmp	r3, #255	; 0xff
20007fec:	d802      	bhi.n	20007ff4 <HAL_I2C_Master_Seq_Transmit_IT+0xcc>
      {
        xfermode = hi2c->XferOptions;
20007fee:	68fb      	ldr	r3, [r7, #12]
20007ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20007ff2:	617b      	str	r3, [r7, #20]
      }
    }

    /* Send Slave Address and set NBYTES to write */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
20007ff4:	68fb      	ldr	r3, [r7, #12]
20007ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20007ff8:	b2da      	uxtb	r2, r3
20007ffa:	8979      	ldrh	r1, [r7, #10]
20007ffc:	693b      	ldr	r3, [r7, #16]
20007ffe:	9300      	str	r3, [sp, #0]
20008000:	697b      	ldr	r3, [r7, #20]
20008002:	68f8      	ldr	r0, [r7, #12]
20008004:	f002 fc64 	bl	2000a8d0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
20008008:	68fb      	ldr	r3, [r7, #12]
2000800a:	2200      	movs	r2, #0
2000800c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
20008010:	2101      	movs	r1, #1
20008012:	68f8      	ldr	r0, [r7, #12]
20008014:	f002 fc8e 	bl	2000a934 <I2C_Enable_IRQ>

    return HAL_OK;
20008018:	2300      	movs	r3, #0
2000801a:	e000      	b.n	2000801e <HAL_I2C_Master_Seq_Transmit_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
2000801c:	2302      	movs	r3, #2
  }
}
2000801e:	4618      	mov	r0, r3
20008020:	3718      	adds	r7, #24
20008022:	46bd      	mov	sp, r7
20008024:	bd80      	pop	{r7, pc}
20008026:	bf00      	nop
20008028:	80002000 	.word	0x80002000
2000802c:	20009013 	.word	0x20009013

20008030 <HAL_I2C_Master_Seq_Transmit_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                  uint16_t Size, uint32_t XferOptions)
{
20008030:	b580      	push	{r7, lr}
20008032:	b08a      	sub	sp, #40	; 0x28
20008034:	af02      	add	r7, sp, #8
20008036:	60f8      	str	r0, [r7, #12]
20008038:	607a      	str	r2, [r7, #4]
2000803a:	461a      	mov	r2, r3
2000803c:	460b      	mov	r3, r1
2000803e:	817b      	strh	r3, [r7, #10]
20008040:	4613      	mov	r3, r2
20008042:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
20008044:	4b77      	ldr	r3, [pc, #476]	; (20008224 <HAL_I2C_Master_Seq_Transmit_DMA+0x1f4>)
20008046:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
20008048:	68fb      	ldr	r3, [r7, #12]
2000804a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000804e:	b2db      	uxtb	r3, r3
20008050:	2b20      	cmp	r3, #32
20008052:	f040 80e1 	bne.w	20008218 <HAL_I2C_Master_Seq_Transmit_DMA+0x1e8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
20008056:	68fb      	ldr	r3, [r7, #12]
20008058:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2000805c:	2b01      	cmp	r3, #1
2000805e:	d101      	bne.n	20008064 <HAL_I2C_Master_Seq_Transmit_DMA+0x34>
20008060:	2302      	movs	r3, #2
20008062:	e0da      	b.n	2000821a <HAL_I2C_Master_Seq_Transmit_DMA+0x1ea>
20008064:	68fb      	ldr	r3, [r7, #12]
20008066:	2201      	movs	r2, #1
20008068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
2000806c:	68fb      	ldr	r3, [r7, #12]
2000806e:	2221      	movs	r2, #33	; 0x21
20008070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
20008074:	68fb      	ldr	r3, [r7, #12]
20008076:	2210      	movs	r2, #16
20008078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2000807c:	68fb      	ldr	r3, [r7, #12]
2000807e:	2200      	movs	r2, #0
20008080:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
20008082:	68fb      	ldr	r3, [r7, #12]
20008084:	687a      	ldr	r2, [r7, #4]
20008086:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
20008088:	68fb      	ldr	r3, [r7, #12]
2000808a:	893a      	ldrh	r2, [r7, #8]
2000808c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
2000808e:	68fb      	ldr	r3, [r7, #12]
20008090:	6aba      	ldr	r2, [r7, #40]	; 0x28
20008092:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
20008094:	68fb      	ldr	r3, [r7, #12]
20008096:	4a64      	ldr	r2, [pc, #400]	; (20008228 <HAL_I2C_Master_Seq_Transmit_DMA+0x1f8>)
20008098:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000809a:	68fb      	ldr	r3, [r7, #12]
2000809c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2000809e:	b29b      	uxth	r3, r3
200080a0:	2bff      	cmp	r3, #255	; 0xff
200080a2:	d906      	bls.n	200080b2 <HAL_I2C_Master_Seq_Transmit_DMA+0x82>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
200080a4:	68fb      	ldr	r3, [r7, #12]
200080a6:	22ff      	movs	r2, #255	; 0xff
200080a8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
200080aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
200080ae:	61fb      	str	r3, [r7, #28]
200080b0:	e007      	b.n	200080c2 <HAL_I2C_Master_Seq_Transmit_DMA+0x92>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
200080b2:	68fb      	ldr	r3, [r7, #12]
200080b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
200080b6:	b29a      	uxth	r2, r3
200080b8:	68fb      	ldr	r3, [r7, #12]
200080ba:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
200080bc:	68fb      	ldr	r3, [r7, #12]
200080be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200080c0:	61fb      	str	r3, [r7, #28]
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
200080c2:	68fb      	ldr	r3, [r7, #12]
200080c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200080c6:	2b11      	cmp	r3, #17
200080c8:	d10e      	bne.n	200080e8 <HAL_I2C_Master_Seq_Transmit_DMA+0xb8>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
200080ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
200080cc:	2baa      	cmp	r3, #170	; 0xaa
200080ce:	d003      	beq.n	200080d8 <HAL_I2C_Master_Seq_Transmit_DMA+0xa8>
200080d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
200080d2:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
200080d6:	d101      	bne.n	200080dc <HAL_I2C_Master_Seq_Transmit_DMA+0xac>
200080d8:	2301      	movs	r3, #1
200080da:	e000      	b.n	200080de <HAL_I2C_Master_Seq_Transmit_DMA+0xae>
200080dc:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
200080de:	2b00      	cmp	r3, #0
200080e0:	d102      	bne.n	200080e8 <HAL_I2C_Master_Seq_Transmit_DMA+0xb8>
    {
      xferrequest = I2C_NO_STARTSTOP;
200080e2:	2300      	movs	r3, #0
200080e4:	61bb      	str	r3, [r7, #24]
200080e6:	e00a      	b.n	200080fe <HAL_I2C_Master_Seq_Transmit_DMA+0xce>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
200080e8:	68f8      	ldr	r0, [r7, #12]
200080ea:	f002 fce5 	bl	2000aab8 <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
200080ee:	68fb      	ldr	r3, [r7, #12]
200080f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
200080f2:	b29b      	uxth	r3, r3
200080f4:	2bff      	cmp	r3, #255	; 0xff
200080f6:	d802      	bhi.n	200080fe <HAL_I2C_Master_Seq_Transmit_DMA+0xce>
      {
        xfermode = hi2c->XferOptions;
200080f8:	68fb      	ldr	r3, [r7, #12]
200080fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200080fc:	61fb      	str	r3, [r7, #28]
      }
    }

    if (hi2c->XferSize > 0U)
200080fe:	68fb      	ldr	r3, [r7, #12]
20008100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20008102:	2b00      	cmp	r3, #0
20008104:	d070      	beq.n	200081e8 <HAL_I2C_Master_Seq_Transmit_DMA+0x1b8>
    {
      if (hi2c->hdmatx != NULL)
20008106:	68fb      	ldr	r3, [r7, #12]
20008108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000810a:	2b00      	cmp	r3, #0
2000810c:	d020      	beq.n	20008150 <HAL_I2C_Master_Seq_Transmit_DMA+0x120>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
2000810e:	68fb      	ldr	r3, [r7, #12]
20008110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20008112:	4a46      	ldr	r2, [pc, #280]	; (2000822c <HAL_I2C_Master_Seq_Transmit_DMA+0x1fc>)
20008114:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
20008116:	68fb      	ldr	r3, [r7, #12]
20008118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000811a:	4a45      	ldr	r2, [pc, #276]	; (20008230 <HAL_I2C_Master_Seq_Transmit_DMA+0x200>)
2000811c:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
2000811e:	68fb      	ldr	r3, [r7, #12]
20008120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20008122:	2200      	movs	r2, #0
20008124:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
20008126:	68fb      	ldr	r3, [r7, #12]
20008128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000812a:	2200      	movs	r2, #0
2000812c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2000812e:	68fb      	ldr	r3, [r7, #12]
20008130:	6b98      	ldr	r0, [r3, #56]	; 0x38
20008132:	6879      	ldr	r1, [r7, #4]
20008134:	68fb      	ldr	r3, [r7, #12]
20008136:	681b      	ldr	r3, [r3, #0]
20008138:	3328      	adds	r3, #40	; 0x28
2000813a:	461a      	mov	r2, r3
                                         hi2c->XferSize);
2000813c:	68fb      	ldr	r3, [r7, #12]
2000813e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
20008140:	f7fa fc23 	bl	2000298a <HAL_DMA_Start_IT>
20008144:	4603      	mov	r3, r0
20008146:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
20008148:	7dfb      	ldrb	r3, [r7, #23]
2000814a:	2b00      	cmp	r3, #0
2000814c:	d138      	bne.n	200081c0 <HAL_I2C_Master_Seq_Transmit_DMA+0x190>
2000814e:	e013      	b.n	20008178 <HAL_I2C_Master_Seq_Transmit_DMA+0x148>
        hi2c->State     = HAL_I2C_STATE_READY;
20008150:	68fb      	ldr	r3, [r7, #12]
20008152:	2220      	movs	r2, #32
20008154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
20008158:	68fb      	ldr	r3, [r7, #12]
2000815a:	2200      	movs	r2, #0
2000815c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
20008160:	68fb      	ldr	r3, [r7, #12]
20008162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20008164:	f043 0280 	orr.w	r2, r3, #128	; 0x80
20008168:	68fb      	ldr	r3, [r7, #12]
2000816a:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
2000816c:	68fb      	ldr	r3, [r7, #12]
2000816e:	2200      	movs	r2, #0
20008170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
20008174:	2301      	movs	r3, #1
20008176:	e050      	b.n	2000821a <HAL_I2C_Master_Seq_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address and set NBYTES to write */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
20008178:	68fb      	ldr	r3, [r7, #12]
2000817a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2000817c:	b2da      	uxtb	r2, r3
2000817e:	8979      	ldrh	r1, [r7, #10]
20008180:	69bb      	ldr	r3, [r7, #24]
20008182:	9300      	str	r3, [sp, #0]
20008184:	69fb      	ldr	r3, [r7, #28]
20008186:	68f8      	ldr	r0, [r7, #12]
20008188:	f002 fba2 	bl	2000a8d0 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
2000818c:	68fb      	ldr	r3, [r7, #12]
2000818e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20008190:	b29a      	uxth	r2, r3
20008192:	68fb      	ldr	r3, [r7, #12]
20008194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20008196:	1ad3      	subs	r3, r2, r3
20008198:	b29a      	uxth	r2, r3
2000819a:	68fb      	ldr	r3, [r7, #12]
2000819c:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2000819e:	68fb      	ldr	r3, [r7, #12]
200081a0:	2200      	movs	r2, #0
200081a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
200081a6:	2110      	movs	r1, #16
200081a8:	68f8      	ldr	r0, [r7, #12]
200081aa:	f002 fbc3 	bl	2000a934 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
200081ae:	68fb      	ldr	r3, [r7, #12]
200081b0:	681b      	ldr	r3, [r3, #0]
200081b2:	681a      	ldr	r2, [r3, #0]
200081b4:	68fb      	ldr	r3, [r7, #12]
200081b6:	681b      	ldr	r3, [r3, #0]
200081b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
200081bc:	601a      	str	r2, [r3, #0]
200081be:	e029      	b.n	20008214 <HAL_I2C_Master_Seq_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
200081c0:	68fb      	ldr	r3, [r7, #12]
200081c2:	2220      	movs	r2, #32
200081c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
200081c8:	68fb      	ldr	r3, [r7, #12]
200081ca:	2200      	movs	r2, #0
200081cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
200081d0:	68fb      	ldr	r3, [r7, #12]
200081d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
200081d4:	f043 0210 	orr.w	r2, r3, #16
200081d8:	68fb      	ldr	r3, [r7, #12]
200081da:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
200081dc:	68fb      	ldr	r3, [r7, #12]
200081de:	2200      	movs	r2, #0
200081e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
200081e4:	2301      	movs	r3, #1
200081e6:	e018      	b.n	2000821a <HAL_I2C_Master_Seq_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
200081e8:	68fb      	ldr	r3, [r7, #12]
200081ea:	4a12      	ldr	r2, [pc, #72]	; (20008234 <HAL_I2C_Master_Seq_Transmit_DMA+0x204>)
200081ec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
200081ee:	68fb      	ldr	r3, [r7, #12]
200081f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
200081f2:	b2da      	uxtb	r2, r3
200081f4:	8979      	ldrh	r1, [r7, #10]
200081f6:	4b0b      	ldr	r3, [pc, #44]	; (20008224 <HAL_I2C_Master_Seq_Transmit_DMA+0x1f4>)
200081f8:	9300      	str	r3, [sp, #0]
200081fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
200081fe:	68f8      	ldr	r0, [r7, #12]
20008200:	f002 fb66 	bl	2000a8d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
20008204:	68fb      	ldr	r3, [r7, #12]
20008206:	2200      	movs	r2, #0
20008208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2000820c:	2101      	movs	r1, #1
2000820e:	68f8      	ldr	r0, [r7, #12]
20008210:	f002 fb90 	bl	2000a934 <I2C_Enable_IRQ>
    }

    return HAL_OK;
20008214:	2300      	movs	r3, #0
20008216:	e000      	b.n	2000821a <HAL_I2C_Master_Seq_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
20008218:	2302      	movs	r3, #2
  }
}
2000821a:	4618      	mov	r0, r3
2000821c:	3720      	adds	r7, #32
2000821e:	46bd      	mov	sp, r7
20008220:	bd80      	pop	{r7, pc}
20008222:	bf00      	nop
20008224:	80002000 	.word	0x80002000
20008228:	20009469 	.word	0x20009469
2000822c:	2000a22b 	.word	0x2000a22b
20008230:	2000a3dd 	.word	0x2000a3dd
20008234:	20009013 	.word	0x20009013

20008238 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                uint16_t Size, uint32_t XferOptions)
{
20008238:	b580      	push	{r7, lr}
2000823a:	b088      	sub	sp, #32
2000823c:	af02      	add	r7, sp, #8
2000823e:	60f8      	str	r0, [r7, #12]
20008240:	607a      	str	r2, [r7, #4]
20008242:	461a      	mov	r2, r3
20008244:	460b      	mov	r3, r1
20008246:	817b      	strh	r3, [r7, #10]
20008248:	4613      	mov	r3, r2
2000824a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_READ;
2000824c:	4b3a      	ldr	r3, [pc, #232]	; (20008338 <HAL_I2C_Master_Seq_Receive_IT+0x100>)
2000824e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
20008250:	68fb      	ldr	r3, [r7, #12]
20008252:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20008256:	b2db      	uxtb	r3, r3
20008258:	2b20      	cmp	r3, #32
2000825a:	d167      	bne.n	2000832c <HAL_I2C_Master_Seq_Receive_IT+0xf4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2000825c:	68fb      	ldr	r3, [r7, #12]
2000825e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
20008262:	2b01      	cmp	r3, #1
20008264:	d101      	bne.n	2000826a <HAL_I2C_Master_Seq_Receive_IT+0x32>
20008266:	2302      	movs	r3, #2
20008268:	e061      	b.n	2000832e <HAL_I2C_Master_Seq_Receive_IT+0xf6>
2000826a:	68fb      	ldr	r3, [r7, #12]
2000826c:	2201      	movs	r2, #1
2000826e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
20008272:	68fb      	ldr	r3, [r7, #12]
20008274:	2222      	movs	r2, #34	; 0x22
20008276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2000827a:	68fb      	ldr	r3, [r7, #12]
2000827c:	2210      	movs	r2, #16
2000827e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
20008282:	68fb      	ldr	r3, [r7, #12]
20008284:	2200      	movs	r2, #0
20008286:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
20008288:	68fb      	ldr	r3, [r7, #12]
2000828a:	687a      	ldr	r2, [r7, #4]
2000828c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
2000828e:	68fb      	ldr	r3, [r7, #12]
20008290:	893a      	ldrh	r2, [r7, #8]
20008292:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
20008294:	68fb      	ldr	r3, [r7, #12]
20008296:	6a3a      	ldr	r2, [r7, #32]
20008298:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
2000829a:	68fb      	ldr	r3, [r7, #12]
2000829c:	4a27      	ldr	r2, [pc, #156]	; (2000833c <HAL_I2C_Master_Seq_Receive_IT+0x104>)
2000829e:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
200082a0:	68fb      	ldr	r3, [r7, #12]
200082a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
200082a4:	b29b      	uxth	r3, r3
200082a6:	2bff      	cmp	r3, #255	; 0xff
200082a8:	d906      	bls.n	200082b8 <HAL_I2C_Master_Seq_Receive_IT+0x80>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
200082aa:	68fb      	ldr	r3, [r7, #12]
200082ac:	22ff      	movs	r2, #255	; 0xff
200082ae:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
200082b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
200082b4:	617b      	str	r3, [r7, #20]
200082b6:	e007      	b.n	200082c8 <HAL_I2C_Master_Seq_Receive_IT+0x90>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
200082b8:	68fb      	ldr	r3, [r7, #12]
200082ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
200082bc:	b29a      	uxth	r2, r3
200082be:	68fb      	ldr	r3, [r7, #12]
200082c0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
200082c2:	68fb      	ldr	r3, [r7, #12]
200082c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200082c6:	617b      	str	r3, [r7, #20]
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
200082c8:	68fb      	ldr	r3, [r7, #12]
200082ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200082cc:	2b12      	cmp	r3, #18
200082ce:	d10e      	bne.n	200082ee <HAL_I2C_Master_Seq_Receive_IT+0xb6>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
200082d0:	6a3b      	ldr	r3, [r7, #32]
200082d2:	2baa      	cmp	r3, #170	; 0xaa
200082d4:	d003      	beq.n	200082de <HAL_I2C_Master_Seq_Receive_IT+0xa6>
200082d6:	6a3b      	ldr	r3, [r7, #32]
200082d8:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
200082dc:	d101      	bne.n	200082e2 <HAL_I2C_Master_Seq_Receive_IT+0xaa>
200082de:	2301      	movs	r3, #1
200082e0:	e000      	b.n	200082e4 <HAL_I2C_Master_Seq_Receive_IT+0xac>
200082e2:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
200082e4:	2b00      	cmp	r3, #0
200082e6:	d102      	bne.n	200082ee <HAL_I2C_Master_Seq_Receive_IT+0xb6>
    {
      xferrequest = I2C_NO_STARTSTOP;
200082e8:	2300      	movs	r3, #0
200082ea:	613b      	str	r3, [r7, #16]
200082ec:	e00a      	b.n	20008304 <HAL_I2C_Master_Seq_Receive_IT+0xcc>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
200082ee:	68f8      	ldr	r0, [r7, #12]
200082f0:	f002 fbe2 	bl	2000aab8 <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
200082f4:	68fb      	ldr	r3, [r7, #12]
200082f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
200082f8:	b29b      	uxth	r3, r3
200082fa:	2bff      	cmp	r3, #255	; 0xff
200082fc:	d802      	bhi.n	20008304 <HAL_I2C_Master_Seq_Receive_IT+0xcc>
      {
        xfermode = hi2c->XferOptions;
200082fe:	68fb      	ldr	r3, [r7, #12]
20008300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20008302:	617b      	str	r3, [r7, #20]
      }
    }

    /* Send Slave Address and set NBYTES to read */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
20008304:	68fb      	ldr	r3, [r7, #12]
20008306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20008308:	b2da      	uxtb	r2, r3
2000830a:	8979      	ldrh	r1, [r7, #10]
2000830c:	693b      	ldr	r3, [r7, #16]
2000830e:	9300      	str	r3, [sp, #0]
20008310:	697b      	ldr	r3, [r7, #20]
20008312:	68f8      	ldr	r0, [r7, #12]
20008314:	f002 fadc 	bl	2000a8d0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
20008318:	68fb      	ldr	r3, [r7, #12]
2000831a:	2200      	movs	r2, #0
2000831c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
20008320:	2102      	movs	r1, #2
20008322:	68f8      	ldr	r0, [r7, #12]
20008324:	f002 fb06 	bl	2000a934 <I2C_Enable_IRQ>

    return HAL_OK;
20008328:	2300      	movs	r3, #0
2000832a:	e000      	b.n	2000832e <HAL_I2C_Master_Seq_Receive_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
2000832c:	2302      	movs	r3, #2
  }
}
2000832e:	4618      	mov	r0, r3
20008330:	3718      	adds	r7, #24
20008332:	46bd      	mov	sp, r7
20008334:	bd80      	pop	{r7, pc}
20008336:	bf00      	nop
20008338:	80002400 	.word	0x80002400
2000833c:	20009013 	.word	0x20009013

20008340 <HAL_I2C_Master_Seq_Receive_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                 uint16_t Size, uint32_t XferOptions)
{
20008340:	b580      	push	{r7, lr}
20008342:	b08a      	sub	sp, #40	; 0x28
20008344:	af02      	add	r7, sp, #8
20008346:	60f8      	str	r0, [r7, #12]
20008348:	607a      	str	r2, [r7, #4]
2000834a:	461a      	mov	r2, r3
2000834c:	460b      	mov	r3, r1
2000834e:	817b      	strh	r3, [r7, #10]
20008350:	4613      	mov	r3, r2
20008352:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_READ;
20008354:	4b77      	ldr	r3, [pc, #476]	; (20008534 <HAL_I2C_Master_Seq_Receive_DMA+0x1f4>)
20008356:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
20008358:	68fb      	ldr	r3, [r7, #12]
2000835a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000835e:	b2db      	uxtb	r3, r3
20008360:	2b20      	cmp	r3, #32
20008362:	f040 80e1 	bne.w	20008528 <HAL_I2C_Master_Seq_Receive_DMA+0x1e8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
20008366:	68fb      	ldr	r3, [r7, #12]
20008368:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2000836c:	2b01      	cmp	r3, #1
2000836e:	d101      	bne.n	20008374 <HAL_I2C_Master_Seq_Receive_DMA+0x34>
20008370:	2302      	movs	r3, #2
20008372:	e0da      	b.n	2000852a <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
20008374:	68fb      	ldr	r3, [r7, #12]
20008376:	2201      	movs	r2, #1
20008378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
2000837c:	68fb      	ldr	r3, [r7, #12]
2000837e:	2222      	movs	r2, #34	; 0x22
20008380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
20008384:	68fb      	ldr	r3, [r7, #12]
20008386:	2210      	movs	r2, #16
20008388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2000838c:	68fb      	ldr	r3, [r7, #12]
2000838e:	2200      	movs	r2, #0
20008390:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
20008392:	68fb      	ldr	r3, [r7, #12]
20008394:	687a      	ldr	r2, [r7, #4]
20008396:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
20008398:	68fb      	ldr	r3, [r7, #12]
2000839a:	893a      	ldrh	r2, [r7, #8]
2000839c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
2000839e:	68fb      	ldr	r3, [r7, #12]
200083a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
200083a2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
200083a4:	68fb      	ldr	r3, [r7, #12]
200083a6:	4a64      	ldr	r2, [pc, #400]	; (20008538 <HAL_I2C_Master_Seq_Receive_DMA+0x1f8>)
200083a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
200083aa:	68fb      	ldr	r3, [r7, #12]
200083ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
200083ae:	b29b      	uxth	r3, r3
200083b0:	2bff      	cmp	r3, #255	; 0xff
200083b2:	d906      	bls.n	200083c2 <HAL_I2C_Master_Seq_Receive_DMA+0x82>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
200083b4:	68fb      	ldr	r3, [r7, #12]
200083b6:	22ff      	movs	r2, #255	; 0xff
200083b8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
200083ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
200083be:	61fb      	str	r3, [r7, #28]
200083c0:	e007      	b.n	200083d2 <HAL_I2C_Master_Seq_Receive_DMA+0x92>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
200083c2:	68fb      	ldr	r3, [r7, #12]
200083c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
200083c6:	b29a      	uxth	r2, r3
200083c8:	68fb      	ldr	r3, [r7, #12]
200083ca:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = hi2c->XferOptions;
200083cc:	68fb      	ldr	r3, [r7, #12]
200083ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200083d0:	61fb      	str	r3, [r7, #28]
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
200083d2:	68fb      	ldr	r3, [r7, #12]
200083d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200083d6:	2b12      	cmp	r3, #18
200083d8:	d10e      	bne.n	200083f8 <HAL_I2C_Master_Seq_Receive_DMA+0xb8>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
200083da:	6abb      	ldr	r3, [r7, #40]	; 0x28
200083dc:	2baa      	cmp	r3, #170	; 0xaa
200083de:	d003      	beq.n	200083e8 <HAL_I2C_Master_Seq_Receive_DMA+0xa8>
200083e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
200083e2:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
200083e6:	d101      	bne.n	200083ec <HAL_I2C_Master_Seq_Receive_DMA+0xac>
200083e8:	2301      	movs	r3, #1
200083ea:	e000      	b.n	200083ee <HAL_I2C_Master_Seq_Receive_DMA+0xae>
200083ec:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
200083ee:	2b00      	cmp	r3, #0
200083f0:	d102      	bne.n	200083f8 <HAL_I2C_Master_Seq_Receive_DMA+0xb8>
    {
      xferrequest = I2C_NO_STARTSTOP;
200083f2:	2300      	movs	r3, #0
200083f4:	61bb      	str	r3, [r7, #24]
200083f6:	e00a      	b.n	2000840e <HAL_I2C_Master_Seq_Receive_DMA+0xce>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
200083f8:	68f8      	ldr	r0, [r7, #12]
200083fa:	f002 fb5d 	bl	2000aab8 <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
200083fe:	68fb      	ldr	r3, [r7, #12]
20008400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20008402:	b29b      	uxth	r3, r3
20008404:	2bff      	cmp	r3, #255	; 0xff
20008406:	d802      	bhi.n	2000840e <HAL_I2C_Master_Seq_Receive_DMA+0xce>
      {
        xfermode = hi2c->XferOptions;
20008408:	68fb      	ldr	r3, [r7, #12]
2000840a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000840c:	61fb      	str	r3, [r7, #28]
      }
    }

    if (hi2c->XferSize > 0U)
2000840e:	68fb      	ldr	r3, [r7, #12]
20008410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20008412:	2b00      	cmp	r3, #0
20008414:	d070      	beq.n	200084f8 <HAL_I2C_Master_Seq_Receive_DMA+0x1b8>
    {
      if (hi2c->hdmarx != NULL)
20008416:	68fb      	ldr	r3, [r7, #12]
20008418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000841a:	2b00      	cmp	r3, #0
2000841c:	d020      	beq.n	20008460 <HAL_I2C_Master_Seq_Receive_DMA+0x120>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
2000841e:	68fb      	ldr	r3, [r7, #12]
20008420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20008422:	4a46      	ldr	r2, [pc, #280]	; (2000853c <HAL_I2C_Master_Seq_Receive_DMA+0x1fc>)
20008424:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
20008426:	68fb      	ldr	r3, [r7, #12]
20008428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000842a:	4a45      	ldr	r2, [pc, #276]	; (20008540 <HAL_I2C_Master_Seq_Receive_DMA+0x200>)
2000842c:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
2000842e:	68fb      	ldr	r3, [r7, #12]
20008430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20008432:	2200      	movs	r2, #0
20008434:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
20008436:	68fb      	ldr	r3, [r7, #12]
20008438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000843a:	2200      	movs	r2, #0
2000843c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2000843e:	68fb      	ldr	r3, [r7, #12]
20008440:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
20008442:	68fb      	ldr	r3, [r7, #12]
20008444:	681b      	ldr	r3, [r3, #0]
20008446:	3324      	adds	r3, #36	; 0x24
20008448:	4619      	mov	r1, r3
2000844a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
2000844c:	68fb      	ldr	r3, [r7, #12]
2000844e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
20008450:	f7fa fa9b 	bl	2000298a <HAL_DMA_Start_IT>
20008454:	4603      	mov	r3, r0
20008456:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
20008458:	7dfb      	ldrb	r3, [r7, #23]
2000845a:	2b00      	cmp	r3, #0
2000845c:	d138      	bne.n	200084d0 <HAL_I2C_Master_Seq_Receive_DMA+0x190>
2000845e:	e013      	b.n	20008488 <HAL_I2C_Master_Seq_Receive_DMA+0x148>
        hi2c->State     = HAL_I2C_STATE_READY;
20008460:	68fb      	ldr	r3, [r7, #12]
20008462:	2220      	movs	r2, #32
20008464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
20008468:	68fb      	ldr	r3, [r7, #12]
2000846a:	2200      	movs	r2, #0
2000846c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
20008470:	68fb      	ldr	r3, [r7, #12]
20008472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20008474:	f043 0280 	orr.w	r2, r3, #128	; 0x80
20008478:	68fb      	ldr	r3, [r7, #12]
2000847a:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
2000847c:	68fb      	ldr	r3, [r7, #12]
2000847e:	2200      	movs	r2, #0
20008480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
20008484:	2301      	movs	r3, #1
20008486:	e050      	b.n	2000852a <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
      {
        /* Send Slave Address and set NBYTES to read */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
20008488:	68fb      	ldr	r3, [r7, #12]
2000848a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2000848c:	b2da      	uxtb	r2, r3
2000848e:	8979      	ldrh	r1, [r7, #10]
20008490:	69bb      	ldr	r3, [r7, #24]
20008492:	9300      	str	r3, [sp, #0]
20008494:	69fb      	ldr	r3, [r7, #28]
20008496:	68f8      	ldr	r0, [r7, #12]
20008498:	f002 fa1a 	bl	2000a8d0 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
2000849c:	68fb      	ldr	r3, [r7, #12]
2000849e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
200084a0:	b29a      	uxth	r2, r3
200084a2:	68fb      	ldr	r3, [r7, #12]
200084a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
200084a6:	1ad3      	subs	r3, r2, r3
200084a8:	b29a      	uxth	r2, r3
200084aa:	68fb      	ldr	r3, [r7, #12]
200084ac:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
200084ae:	68fb      	ldr	r3, [r7, #12]
200084b0:	2200      	movs	r2, #0
200084b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
200084b6:	2110      	movs	r1, #16
200084b8:	68f8      	ldr	r0, [r7, #12]
200084ba:	f002 fa3b 	bl	2000a934 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
200084be:	68fb      	ldr	r3, [r7, #12]
200084c0:	681b      	ldr	r3, [r3, #0]
200084c2:	681a      	ldr	r2, [r3, #0]
200084c4:	68fb      	ldr	r3, [r7, #12]
200084c6:	681b      	ldr	r3, [r3, #0]
200084c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
200084cc:	601a      	str	r2, [r3, #0]
200084ce:	e029      	b.n	20008524 <HAL_I2C_Master_Seq_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
200084d0:	68fb      	ldr	r3, [r7, #12]
200084d2:	2220      	movs	r2, #32
200084d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
200084d8:	68fb      	ldr	r3, [r7, #12]
200084da:	2200      	movs	r2, #0
200084dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
200084e0:	68fb      	ldr	r3, [r7, #12]
200084e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
200084e4:	f043 0210 	orr.w	r2, r3, #16
200084e8:	68fb      	ldr	r3, [r7, #12]
200084ea:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
200084ec:	68fb      	ldr	r3, [r7, #12]
200084ee:	2200      	movs	r2, #0
200084f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
200084f4:	2301      	movs	r3, #1
200084f6:	e018      	b.n	2000852a <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
200084f8:	68fb      	ldr	r3, [r7, #12]
200084fa:	4a12      	ldr	r2, [pc, #72]	; (20008544 <HAL_I2C_Master_Seq_Receive_DMA+0x204>)
200084fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
200084fe:	68fb      	ldr	r3, [r7, #12]
20008500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20008502:	b2da      	uxtb	r2, r3
20008504:	8979      	ldrh	r1, [r7, #10]
20008506:	4b0b      	ldr	r3, [pc, #44]	; (20008534 <HAL_I2C_Master_Seq_Receive_DMA+0x1f4>)
20008508:	9300      	str	r3, [sp, #0]
2000850a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2000850e:	68f8      	ldr	r0, [r7, #12]
20008510:	f002 f9de 	bl	2000a8d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
20008514:	68fb      	ldr	r3, [r7, #12]
20008516:	2200      	movs	r2, #0
20008518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2000851c:	2101      	movs	r1, #1
2000851e:	68f8      	ldr	r0, [r7, #12]
20008520:	f002 fa08 	bl	2000a934 <I2C_Enable_IRQ>
    }

    return HAL_OK;
20008524:	2300      	movs	r3, #0
20008526:	e000      	b.n	2000852a <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
20008528:	2302      	movs	r3, #2
  }
}
2000852a:	4618      	mov	r0, r3
2000852c:	3720      	adds	r7, #32
2000852e:	46bd      	mov	sp, r7
20008530:	bd80      	pop	{r7, pc}
20008532:	bf00      	nop
20008534:	80002400 	.word	0x80002400
20008538:	20009469 	.word	0x20009469
2000853c:	2000a301 	.word	0x2000a301
20008540:	2000a3dd 	.word	0x2000a3dd
20008544:	20009013 	.word	0x20009013

20008548 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
20008548:	b580      	push	{r7, lr}
2000854a:	b084      	sub	sp, #16
2000854c:	af00      	add	r7, sp, #0
2000854e:	60f8      	str	r0, [r7, #12]
20008550:	60b9      	str	r1, [r7, #8]
20008552:	603b      	str	r3, [r7, #0]
20008554:	4613      	mov	r3, r2
20008556:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
20008558:	68fb      	ldr	r3, [r7, #12]
2000855a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000855e:	b2db      	uxtb	r3, r3
20008560:	f003 0328 	and.w	r3, r3, #40	; 0x28
20008564:	2b28      	cmp	r3, #40	; 0x28
20008566:	f040 808a 	bne.w	2000867e <HAL_I2C_Slave_Seq_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
2000856a:	68bb      	ldr	r3, [r7, #8]
2000856c:	2b00      	cmp	r3, #0
2000856e:	d002      	beq.n	20008576 <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
20008570:	88fb      	ldrh	r3, [r7, #6]
20008572:	2b00      	cmp	r3, #0
20008574:	d105      	bne.n	20008582 <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
20008576:	68fb      	ldr	r3, [r7, #12]
20008578:	f44f 7200 	mov.w	r2, #512	; 0x200
2000857c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
2000857e:	2301      	movs	r3, #1
20008580:	e07e      	b.n	20008680 <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
20008582:	f248 0101 	movw	r1, #32769	; 0x8001
20008586:	68f8      	ldr	r0, [r7, #12]
20008588:	f002 fa38 	bl	2000a9fc <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
2000858c:	68fb      	ldr	r3, [r7, #12]
2000858e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
20008592:	2b01      	cmp	r3, #1
20008594:	d101      	bne.n	2000859a <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
20008596:	2302      	movs	r3, #2
20008598:	e072      	b.n	20008680 <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
2000859a:	68fb      	ldr	r3, [r7, #12]
2000859c:	2201      	movs	r2, #1
2000859e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
200085a2:	68fb      	ldr	r3, [r7, #12]
200085a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
200085a8:	b2db      	uxtb	r3, r3
200085aa:	2b2a      	cmp	r3, #42	; 0x2a
200085ac:	d12a      	bne.n	20008604 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
200085ae:	2102      	movs	r1, #2
200085b0:	68f8      	ldr	r0, [r7, #12]
200085b2:	f002 fa23 	bl	2000a9fc <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
200085b6:	68fb      	ldr	r3, [r7, #12]
200085b8:	681b      	ldr	r3, [r3, #0]
200085ba:	681b      	ldr	r3, [r3, #0]
200085bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
200085c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
200085c4:	d11e      	bne.n	20008604 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
200085c6:	68fb      	ldr	r3, [r7, #12]
200085c8:	681b      	ldr	r3, [r3, #0]
200085ca:	681a      	ldr	r2, [r3, #0]
200085cc:	68fb      	ldr	r3, [r7, #12]
200085ce:	681b      	ldr	r3, [r3, #0]
200085d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
200085d4:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
200085d6:	68fb      	ldr	r3, [r7, #12]
200085d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200085da:	2b00      	cmp	r3, #0
200085dc:	d012      	beq.n	20008604 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
200085de:	68fb      	ldr	r3, [r7, #12]
200085e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200085e2:	4a29      	ldr	r2, [pc, #164]	; (20008688 <HAL_I2C_Slave_Seq_Transmit_IT+0x140>)
200085e4:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
200085e6:	68fb      	ldr	r3, [r7, #12]
200085e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200085ea:	4618      	mov	r0, r3
200085ec:	f7fa fa9d 	bl	20002b2a <HAL_DMA_Abort_IT>
200085f0:	4603      	mov	r3, r0
200085f2:	2b00      	cmp	r3, #0
200085f4:	d006      	beq.n	20008604 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
200085f6:	68fb      	ldr	r3, [r7, #12]
200085f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200085fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
200085fc:	68fa      	ldr	r2, [r7, #12]
200085fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
20008600:	4610      	mov	r0, r2
20008602:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
20008604:	68fb      	ldr	r3, [r7, #12]
20008606:	2229      	movs	r2, #41	; 0x29
20008608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2000860c:	68fb      	ldr	r3, [r7, #12]
2000860e:	2220      	movs	r2, #32
20008610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
20008614:	68fb      	ldr	r3, [r7, #12]
20008616:	2200      	movs	r2, #0
20008618:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2000861a:	68fb      	ldr	r3, [r7, #12]
2000861c:	681b      	ldr	r3, [r3, #0]
2000861e:	685a      	ldr	r2, [r3, #4]
20008620:	68fb      	ldr	r3, [r7, #12]
20008622:	681b      	ldr	r3, [r3, #0]
20008624:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
20008628:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2000862a:	68fb      	ldr	r3, [r7, #12]
2000862c:	68ba      	ldr	r2, [r7, #8]
2000862e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
20008630:	68fb      	ldr	r3, [r7, #12]
20008632:	88fa      	ldrh	r2, [r7, #6]
20008634:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
20008636:	68fb      	ldr	r3, [r7, #12]
20008638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2000863a:	b29a      	uxth	r2, r3
2000863c:	68fb      	ldr	r3, [r7, #12]
2000863e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
20008640:	68fb      	ldr	r3, [r7, #12]
20008642:	683a      	ldr	r2, [r7, #0]
20008644:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
20008646:	68fb      	ldr	r3, [r7, #12]
20008648:	4a10      	ldr	r2, [pc, #64]	; (2000868c <HAL_I2C_Slave_Seq_Transmit_IT+0x144>)
2000864a:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
2000864c:	68fb      	ldr	r3, [r7, #12]
2000864e:	681b      	ldr	r3, [r3, #0]
20008650:	699b      	ldr	r3, [r3, #24]
20008652:	0c1b      	lsrs	r3, r3, #16
20008654:	b2db      	uxtb	r3, r3
20008656:	f003 0301 	and.w	r3, r3, #1
2000865a:	b2db      	uxtb	r3, r3
2000865c:	2b01      	cmp	r3, #1
2000865e:	d103      	bne.n	20008668 <HAL_I2C_Slave_Seq_Transmit_IT+0x120>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
20008660:	68fb      	ldr	r3, [r7, #12]
20008662:	681b      	ldr	r3, [r3, #0]
20008664:	2208      	movs	r2, #8
20008666:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
20008668:	68fb      	ldr	r3, [r7, #12]
2000866a:	2200      	movs	r2, #0
2000866c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
20008670:	f248 0101 	movw	r1, #32769	; 0x8001
20008674:	68f8      	ldr	r0, [r7, #12]
20008676:	f002 f95d 	bl	2000a934 <I2C_Enable_IRQ>

    return HAL_OK;
2000867a:	2300      	movs	r3, #0
2000867c:	e000      	b.n	20008680 <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
  }
  else
  {
    return HAL_ERROR;
2000867e:	2301      	movs	r3, #1
  }
}
20008680:	4618      	mov	r0, r3
20008682:	3710      	adds	r7, #16
20008684:	46bd      	mov	sp, r7
20008686:	bd80      	pop	{r7, pc}
20008688:	2000a451 	.word	0x2000a451
2000868c:	20009263 	.word	0x20009263

20008690 <HAL_I2C_Slave_Seq_Transmit_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                 uint32_t XferOptions)
{
20008690:	b580      	push	{r7, lr}
20008692:	b086      	sub	sp, #24
20008694:	af00      	add	r7, sp, #0
20008696:	60f8      	str	r0, [r7, #12]
20008698:	60b9      	str	r1, [r7, #8]
2000869a:	603b      	str	r3, [r7, #0]
2000869c:	4613      	mov	r3, r2
2000869e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
200086a0:	68fb      	ldr	r3, [r7, #12]
200086a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
200086a6:	b2db      	uxtb	r3, r3
200086a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
200086ac:	2b28      	cmp	r3, #40	; 0x28
200086ae:	f040 811a 	bne.w	200088e6 <HAL_I2C_Slave_Seq_Transmit_DMA+0x256>
  {
    if ((pData == NULL) || (Size == 0U))
200086b2:	68bb      	ldr	r3, [r7, #8]
200086b4:	2b00      	cmp	r3, #0
200086b6:	d002      	beq.n	200086be <HAL_I2C_Slave_Seq_Transmit_DMA+0x2e>
200086b8:	88fb      	ldrh	r3, [r7, #6]
200086ba:	2b00      	cmp	r3, #0
200086bc:	d105      	bne.n	200086ca <HAL_I2C_Slave_Seq_Transmit_DMA+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
200086be:	68fb      	ldr	r3, [r7, #12]
200086c0:	f44f 7200 	mov.w	r2, #512	; 0x200
200086c4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
200086c6:	2301      	movs	r3, #1
200086c8:	e10e      	b.n	200088e8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x258>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
200086ca:	68fb      	ldr	r3, [r7, #12]
200086cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
200086d0:	2b01      	cmp	r3, #1
200086d2:	d101      	bne.n	200086d8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x48>
200086d4:	2302      	movs	r3, #2
200086d6:	e107      	b.n	200088e8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x258>
200086d8:	68fb      	ldr	r3, [r7, #12]
200086da:	2201      	movs	r2, #1
200086dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
200086e0:	f248 0101 	movw	r1, #32769	; 0x8001
200086e4:	68f8      	ldr	r0, [r7, #12]
200086e6:	f002 f989 	bl	2000a9fc <I2C_Disable_IRQ>

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
200086ea:	68fb      	ldr	r3, [r7, #12]
200086ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
200086f0:	b2db      	uxtb	r3, r3
200086f2:	2b2a      	cmp	r3, #42	; 0x2a
200086f4:	d12b      	bne.n	2000874e <HAL_I2C_Slave_Seq_Transmit_DMA+0xbe>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
200086f6:	2102      	movs	r1, #2
200086f8:	68f8      	ldr	r0, [r7, #12]
200086fa:	f002 f97f 	bl	2000a9fc <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
200086fe:	68fb      	ldr	r3, [r7, #12]
20008700:	681b      	ldr	r3, [r3, #0]
20008702:	681b      	ldr	r3, [r3, #0]
20008704:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
20008708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2000870c:	d14c      	bne.n	200087a8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
2000870e:	68fb      	ldr	r3, [r7, #12]
20008710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20008712:	2b00      	cmp	r3, #0
20008714:	d048      	beq.n	200087a8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
        {
          hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
20008716:	68fb      	ldr	r3, [r7, #12]
20008718:	681b      	ldr	r3, [r3, #0]
2000871a:	681a      	ldr	r2, [r3, #0]
2000871c:	68fb      	ldr	r3, [r7, #12]
2000871e:	681b      	ldr	r3, [r3, #0]
20008720:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
20008724:	601a      	str	r2, [r3, #0]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
20008726:	68fb      	ldr	r3, [r7, #12]
20008728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000872a:	4a71      	ldr	r2, [pc, #452]	; (200088f0 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>)
2000872c:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
2000872e:	68fb      	ldr	r3, [r7, #12]
20008730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20008732:	4618      	mov	r0, r3
20008734:	f7fa f9f9 	bl	20002b2a <HAL_DMA_Abort_IT>
20008738:	4603      	mov	r3, r0
2000873a:	2b00      	cmp	r3, #0
2000873c:	d034      	beq.n	200087a8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
2000873e:	68fb      	ldr	r3, [r7, #12]
20008740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20008742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20008744:	68fa      	ldr	r2, [r7, #12]
20008746:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
20008748:	4610      	mov	r0, r2
2000874a:	4798      	blx	r3
2000874c:	e02c      	b.n	200087a8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
2000874e:	68fb      	ldr	r3, [r7, #12]
20008750:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20008754:	b2db      	uxtb	r3, r3
20008756:	2b29      	cmp	r3, #41	; 0x29
20008758:	d126      	bne.n	200087a8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
    {
      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
2000875a:	68fb      	ldr	r3, [r7, #12]
2000875c:	681b      	ldr	r3, [r3, #0]
2000875e:	681b      	ldr	r3, [r3, #0]
20008760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
20008764:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
20008768:	d11e      	bne.n	200087a8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2000876a:	68fb      	ldr	r3, [r7, #12]
2000876c:	681b      	ldr	r3, [r3, #0]
2000876e:	681a      	ldr	r2, [r3, #0]
20008770:	68fb      	ldr	r3, [r7, #12]
20008772:	681b      	ldr	r3, [r3, #0]
20008774:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
20008778:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
2000877a:	68fb      	ldr	r3, [r7, #12]
2000877c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000877e:	2b00      	cmp	r3, #0
20008780:	d012      	beq.n	200087a8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
20008782:	68fb      	ldr	r3, [r7, #12]
20008784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20008786:	4a5a      	ldr	r2, [pc, #360]	; (200088f0 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>)
20008788:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
2000878a:	68fb      	ldr	r3, [r7, #12]
2000878c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000878e:	4618      	mov	r0, r3
20008790:	f7fa f9cb 	bl	20002b2a <HAL_DMA_Abort_IT>
20008794:	4603      	mov	r3, r0
20008796:	2b00      	cmp	r3, #0
20008798:	d006      	beq.n	200087a8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
2000879a:	68fb      	ldr	r3, [r7, #12]
2000879c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000879e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
200087a0:	68fa      	ldr	r2, [r7, #12]
200087a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
200087a4:	4610      	mov	r0, r2
200087a6:	4798      	blx	r3
    else
    {
      /* Nothing to do */
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
200087a8:	68fb      	ldr	r3, [r7, #12]
200087aa:	2229      	movs	r2, #41	; 0x29
200087ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
200087b0:	68fb      	ldr	r3, [r7, #12]
200087b2:	2220      	movs	r2, #32
200087b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
200087b8:	68fb      	ldr	r3, [r7, #12]
200087ba:	2200      	movs	r2, #0
200087bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
200087be:	68fb      	ldr	r3, [r7, #12]
200087c0:	681b      	ldr	r3, [r3, #0]
200087c2:	685a      	ldr	r2, [r3, #4]
200087c4:	68fb      	ldr	r3, [r7, #12]
200087c6:	681b      	ldr	r3, [r3, #0]
200087c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
200087cc:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
200087ce:	68fb      	ldr	r3, [r7, #12]
200087d0:	68ba      	ldr	r2, [r7, #8]
200087d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
200087d4:	68fb      	ldr	r3, [r7, #12]
200087d6:	88fa      	ldrh	r2, [r7, #6]
200087d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
200087da:	68fb      	ldr	r3, [r7, #12]
200087dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
200087de:	b29a      	uxth	r2, r3
200087e0:	68fb      	ldr	r3, [r7, #12]
200087e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
200087e4:	68fb      	ldr	r3, [r7, #12]
200087e6:	683a      	ldr	r2, [r7, #0]
200087e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
200087ea:	68fb      	ldr	r3, [r7, #12]
200087ec:	4a41      	ldr	r2, [pc, #260]	; (200088f4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x264>)
200087ee:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmatx != NULL)
200087f0:	68fb      	ldr	r3, [r7, #12]
200087f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200087f4:	2b00      	cmp	r3, #0
200087f6:	d020      	beq.n	2000883a <HAL_I2C_Slave_Seq_Transmit_DMA+0x1aa>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
200087f8:	68fb      	ldr	r3, [r7, #12]
200087fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200087fc:	4a3e      	ldr	r2, [pc, #248]	; (200088f8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x268>)
200087fe:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
20008800:	68fb      	ldr	r3, [r7, #12]
20008802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20008804:	4a3d      	ldr	r2, [pc, #244]	; (200088fc <HAL_I2C_Slave_Seq_Transmit_DMA+0x26c>)
20008806:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
20008808:	68fb      	ldr	r3, [r7, #12]
2000880a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000880c:	2200      	movs	r2, #0
2000880e:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
20008810:	68fb      	ldr	r3, [r7, #12]
20008812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20008814:	2200      	movs	r2, #0
20008816:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
20008818:	68fb      	ldr	r3, [r7, #12]
2000881a:	6b98      	ldr	r0, [r3, #56]	; 0x38
2000881c:	68b9      	ldr	r1, [r7, #8]
2000881e:	68fb      	ldr	r3, [r7, #12]
20008820:	681b      	ldr	r3, [r3, #0]
20008822:	3328      	adds	r3, #40	; 0x28
20008824:	461a      	mov	r2, r3
                                       hi2c->XferSize);
20008826:	68fb      	ldr	r3, [r7, #12]
20008828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2000882a:	f7fa f8ae 	bl	2000298a <HAL_DMA_Start_IT>
2000882e:	4603      	mov	r3, r0
20008830:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
20008832:	7dfb      	ldrb	r3, [r7, #23]
20008834:	2b00      	cmp	r3, #0
20008836:	d12b      	bne.n	20008890 <HAL_I2C_Slave_Seq_Transmit_DMA+0x200>
20008838:	e013      	b.n	20008862 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1d2>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2000883a:	68fb      	ldr	r3, [r7, #12]
2000883c:	2228      	movs	r2, #40	; 0x28
2000883e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
20008842:	68fb      	ldr	r3, [r7, #12]
20008844:	2200      	movs	r2, #0
20008846:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2000884a:	68fb      	ldr	r3, [r7, #12]
2000884c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000884e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
20008852:	68fb      	ldr	r3, [r7, #12]
20008854:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
20008856:	68fb      	ldr	r3, [r7, #12]
20008858:	2200      	movs	r2, #0
2000885a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
2000885e:	2301      	movs	r3, #1
20008860:	e042      	b.n	200088e8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x258>
    {
      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
20008862:	68fb      	ldr	r3, [r7, #12]
20008864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20008866:	b29a      	uxth	r2, r3
20008868:	68fb      	ldr	r3, [r7, #12]
2000886a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2000886c:	1ad3      	subs	r3, r2, r3
2000886e:	b29a      	uxth	r2, r3
20008870:	68fb      	ldr	r3, [r7, #12]
20008872:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Reset XferSize */
      hi2c->XferSize = 0;
20008874:	68fb      	ldr	r3, [r7, #12]
20008876:	2200      	movs	r2, #0
20008878:	851a      	strh	r2, [r3, #40]	; 0x28
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
2000887a:	68fb      	ldr	r3, [r7, #12]
2000887c:	681b      	ldr	r3, [r3, #0]
2000887e:	699b      	ldr	r3, [r3, #24]
20008880:	0c1b      	lsrs	r3, r3, #16
20008882:	b2db      	uxtb	r3, r3
20008884:	f003 0301 	and.w	r3, r3, #1
20008888:	b2db      	uxtb	r3, r3
2000888a:	2b01      	cmp	r3, #1
2000888c:	d118      	bne.n	200088c0 <HAL_I2C_Slave_Seq_Transmit_DMA+0x230>
2000888e:	e013      	b.n	200088b8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x228>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
20008890:	68fb      	ldr	r3, [r7, #12]
20008892:	2228      	movs	r2, #40	; 0x28
20008894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
20008898:	68fb      	ldr	r3, [r7, #12]
2000889a:	2200      	movs	r2, #0
2000889c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
200088a0:	68fb      	ldr	r3, [r7, #12]
200088a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
200088a4:	f043 0210 	orr.w	r2, r3, #16
200088a8:	68fb      	ldr	r3, [r7, #12]
200088aa:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
200088ac:	68fb      	ldr	r3, [r7, #12]
200088ae:	2200      	movs	r2, #0
200088b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
200088b4:	2301      	movs	r3, #1
200088b6:	e017      	b.n	200088e8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x258>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
200088b8:	68fb      	ldr	r3, [r7, #12]
200088ba:	681b      	ldr	r3, [r3, #0]
200088bc:	2208      	movs	r2, #8
200088be:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
200088c0:	68fb      	ldr	r3, [r7, #12]
200088c2:	2200      	movs	r2, #0
200088c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable DMA Request */
    hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
200088c8:	68fb      	ldr	r3, [r7, #12]
200088ca:	681b      	ldr	r3, [r3, #0]
200088cc:	681a      	ldr	r2, [r3, #0]
200088ce:	68fb      	ldr	r3, [r7, #12]
200088d0:	681b      	ldr	r3, [r3, #0]
200088d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
200088d6:	601a      	str	r2, [r3, #0]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* Enable ERR, STOP, NACK, ADDR interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
200088d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
200088dc:	68f8      	ldr	r0, [r7, #12]
200088de:	f002 f829 	bl	2000a934 <I2C_Enable_IRQ>

    return HAL_OK;
200088e2:	2300      	movs	r3, #0
200088e4:	e000      	b.n	200088e8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x258>
  }
  else
  {
    return HAL_ERROR;
200088e6:	2301      	movs	r3, #1
  }
}
200088e8:	4618      	mov	r0, r3
200088ea:	3718      	adds	r7, #24
200088ec:	46bd      	mov	sp, r7
200088ee:	bd80      	pop	{r7, pc}
200088f0:	2000a451 	.word	0x2000a451
200088f4:	2000964f 	.word	0x2000964f
200088f8:	2000a2c1 	.word	0x2000a2c1
200088fc:	2000a3dd 	.word	0x2000a3dd

20008900 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
20008900:	b580      	push	{r7, lr}
20008902:	b084      	sub	sp, #16
20008904:	af00      	add	r7, sp, #0
20008906:	60f8      	str	r0, [r7, #12]
20008908:	60b9      	str	r1, [r7, #8]
2000890a:	603b      	str	r3, [r7, #0]
2000890c:	4613      	mov	r3, r2
2000890e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
20008910:	68fb      	ldr	r3, [r7, #12]
20008912:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20008916:	b2db      	uxtb	r3, r3
20008918:	f003 0328 	and.w	r3, r3, #40	; 0x28
2000891c:	2b28      	cmp	r3, #40	; 0x28
2000891e:	f040 808a 	bne.w	20008a36 <HAL_I2C_Slave_Seq_Receive_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
20008922:	68bb      	ldr	r3, [r7, #8]
20008924:	2b00      	cmp	r3, #0
20008926:	d002      	beq.n	2000892e <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
20008928:	88fb      	ldrh	r3, [r7, #6]
2000892a:	2b00      	cmp	r3, #0
2000892c:	d105      	bne.n	2000893a <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2000892e:	68fb      	ldr	r3, [r7, #12]
20008930:	f44f 7200 	mov.w	r2, #512	; 0x200
20008934:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
20008936:	2301      	movs	r3, #1
20008938:	e07e      	b.n	20008a38 <HAL_I2C_Slave_Seq_Receive_IT+0x138>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
2000893a:	f248 0102 	movw	r1, #32770	; 0x8002
2000893e:	68f8      	ldr	r0, [r7, #12]
20008940:	f002 f85c 	bl	2000a9fc <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
20008944:	68fb      	ldr	r3, [r7, #12]
20008946:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2000894a:	2b01      	cmp	r3, #1
2000894c:	d101      	bne.n	20008952 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
2000894e:	2302      	movs	r3, #2
20008950:	e072      	b.n	20008a38 <HAL_I2C_Slave_Seq_Receive_IT+0x138>
20008952:	68fb      	ldr	r3, [r7, #12]
20008954:	2201      	movs	r2, #1
20008956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
2000895a:	68fb      	ldr	r3, [r7, #12]
2000895c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20008960:	b2db      	uxtb	r3, r3
20008962:	2b29      	cmp	r3, #41	; 0x29
20008964:	d12a      	bne.n	200089bc <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
20008966:	2101      	movs	r1, #1
20008968:	68f8      	ldr	r0, [r7, #12]
2000896a:	f002 f847 	bl	2000a9fc <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
2000896e:	68fb      	ldr	r3, [r7, #12]
20008970:	681b      	ldr	r3, [r3, #0]
20008972:	681b      	ldr	r3, [r3, #0]
20008974:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
20008978:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2000897c:	d11e      	bne.n	200089bc <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2000897e:	68fb      	ldr	r3, [r7, #12]
20008980:	681b      	ldr	r3, [r3, #0]
20008982:	681a      	ldr	r2, [r3, #0]
20008984:	68fb      	ldr	r3, [r7, #12]
20008986:	681b      	ldr	r3, [r3, #0]
20008988:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2000898c:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
2000898e:	68fb      	ldr	r3, [r7, #12]
20008990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20008992:	2b00      	cmp	r3, #0
20008994:	d012      	beq.n	200089bc <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
20008996:	68fb      	ldr	r3, [r7, #12]
20008998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000899a:	4a29      	ldr	r2, [pc, #164]	; (20008a40 <HAL_I2C_Slave_Seq_Receive_IT+0x140>)
2000899c:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
2000899e:	68fb      	ldr	r3, [r7, #12]
200089a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200089a2:	4618      	mov	r0, r3
200089a4:	f7fa f8c1 	bl	20002b2a <HAL_DMA_Abort_IT>
200089a8:	4603      	mov	r3, r0
200089aa:	2b00      	cmp	r3, #0
200089ac:	d006      	beq.n	200089bc <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
200089ae:	68fb      	ldr	r3, [r7, #12]
200089b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200089b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
200089b4:	68fa      	ldr	r2, [r7, #12]
200089b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
200089b8:	4610      	mov	r0, r2
200089ba:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
200089bc:	68fb      	ldr	r3, [r7, #12]
200089be:	222a      	movs	r2, #42	; 0x2a
200089c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
200089c4:	68fb      	ldr	r3, [r7, #12]
200089c6:	2220      	movs	r2, #32
200089c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
200089cc:	68fb      	ldr	r3, [r7, #12]
200089ce:	2200      	movs	r2, #0
200089d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
200089d2:	68fb      	ldr	r3, [r7, #12]
200089d4:	681b      	ldr	r3, [r3, #0]
200089d6:	685a      	ldr	r2, [r3, #4]
200089d8:	68fb      	ldr	r3, [r7, #12]
200089da:	681b      	ldr	r3, [r3, #0]
200089dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
200089e0:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
200089e2:	68fb      	ldr	r3, [r7, #12]
200089e4:	68ba      	ldr	r2, [r7, #8]
200089e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
200089e8:	68fb      	ldr	r3, [r7, #12]
200089ea:	88fa      	ldrh	r2, [r7, #6]
200089ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
200089ee:	68fb      	ldr	r3, [r7, #12]
200089f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
200089f2:	b29a      	uxth	r2, r3
200089f4:	68fb      	ldr	r3, [r7, #12]
200089f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
200089f8:	68fb      	ldr	r3, [r7, #12]
200089fa:	683a      	ldr	r2, [r7, #0]
200089fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
200089fe:	68fb      	ldr	r3, [r7, #12]
20008a00:	4a10      	ldr	r2, [pc, #64]	; (20008a44 <HAL_I2C_Slave_Seq_Receive_IT+0x144>)
20008a02:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
20008a04:	68fb      	ldr	r3, [r7, #12]
20008a06:	681b      	ldr	r3, [r3, #0]
20008a08:	699b      	ldr	r3, [r3, #24]
20008a0a:	0c1b      	lsrs	r3, r3, #16
20008a0c:	b2db      	uxtb	r3, r3
20008a0e:	f003 0301 	and.w	r3, r3, #1
20008a12:	b2db      	uxtb	r3, r3
20008a14:	2b00      	cmp	r3, #0
20008a16:	d103      	bne.n	20008a20 <HAL_I2C_Slave_Seq_Receive_IT+0x120>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
20008a18:	68fb      	ldr	r3, [r7, #12]
20008a1a:	681b      	ldr	r3, [r3, #0]
20008a1c:	2208      	movs	r2, #8
20008a1e:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
20008a20:	68fb      	ldr	r3, [r7, #12]
20008a22:	2200      	movs	r2, #0
20008a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
20008a28:	f248 0102 	movw	r1, #32770	; 0x8002
20008a2c:	68f8      	ldr	r0, [r7, #12]
20008a2e:	f001 ff81 	bl	2000a934 <I2C_Enable_IRQ>

    return HAL_OK;
20008a32:	2300      	movs	r3, #0
20008a34:	e000      	b.n	20008a38 <HAL_I2C_Slave_Seq_Receive_IT+0x138>
  }
  else
  {
    return HAL_ERROR;
20008a36:	2301      	movs	r3, #1
  }
}
20008a38:	4618      	mov	r0, r3
20008a3a:	3710      	adds	r7, #16
20008a3c:	46bd      	mov	sp, r7
20008a3e:	bd80      	pop	{r7, pc}
20008a40:	2000a451 	.word	0x2000a451
20008a44:	20009263 	.word	0x20009263

20008a48 <HAL_I2C_Slave_Seq_Receive_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
20008a48:	b580      	push	{r7, lr}
20008a4a:	b086      	sub	sp, #24
20008a4c:	af00      	add	r7, sp, #0
20008a4e:	60f8      	str	r0, [r7, #12]
20008a50:	60b9      	str	r1, [r7, #8]
20008a52:	603b      	str	r3, [r7, #0]
20008a54:	4613      	mov	r3, r2
20008a56:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
20008a58:	68fb      	ldr	r3, [r7, #12]
20008a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20008a5e:	b2db      	uxtb	r3, r3
20008a60:	f003 0328 	and.w	r3, r3, #40	; 0x28
20008a64:	2b28      	cmp	r3, #40	; 0x28
20008a66:	f040 811a 	bne.w	20008c9e <HAL_I2C_Slave_Seq_Receive_DMA+0x256>
  {
    if ((pData == NULL) || (Size == 0U))
20008a6a:	68bb      	ldr	r3, [r7, #8]
20008a6c:	2b00      	cmp	r3, #0
20008a6e:	d002      	beq.n	20008a76 <HAL_I2C_Slave_Seq_Receive_DMA+0x2e>
20008a70:	88fb      	ldrh	r3, [r7, #6]
20008a72:	2b00      	cmp	r3, #0
20008a74:	d105      	bne.n	20008a82 <HAL_I2C_Slave_Seq_Receive_DMA+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
20008a76:	68fb      	ldr	r3, [r7, #12]
20008a78:	f44f 7200 	mov.w	r2, #512	; 0x200
20008a7c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
20008a7e:	2301      	movs	r3, #1
20008a80:	e10e      	b.n	20008ca0 <HAL_I2C_Slave_Seq_Receive_DMA+0x258>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
20008a82:	f248 0102 	movw	r1, #32770	; 0x8002
20008a86:	68f8      	ldr	r0, [r7, #12]
20008a88:	f001 ffb8 	bl	2000a9fc <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
20008a8c:	68fb      	ldr	r3, [r7, #12]
20008a8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
20008a92:	2b01      	cmp	r3, #1
20008a94:	d101      	bne.n	20008a9a <HAL_I2C_Slave_Seq_Receive_DMA+0x52>
20008a96:	2302      	movs	r3, #2
20008a98:	e102      	b.n	20008ca0 <HAL_I2C_Slave_Seq_Receive_DMA+0x258>
20008a9a:	68fb      	ldr	r3, [r7, #12]
20008a9c:	2201      	movs	r2, #1
20008a9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
20008aa2:	68fb      	ldr	r3, [r7, #12]
20008aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20008aa8:	b2db      	uxtb	r3, r3
20008aaa:	2b29      	cmp	r3, #41	; 0x29
20008aac:	d12b      	bne.n	20008b06 <HAL_I2C_Slave_Seq_Receive_DMA+0xbe>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
20008aae:	2101      	movs	r1, #1
20008ab0:	68f8      	ldr	r0, [r7, #12]
20008ab2:	f001 ffa3 	bl	2000a9fc <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
20008ab6:	68fb      	ldr	r3, [r7, #12]
20008ab8:	681b      	ldr	r3, [r3, #0]
20008aba:	681b      	ldr	r3, [r3, #0]
20008abc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
20008ac0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
20008ac4:	d14c      	bne.n	20008b60 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
20008ac6:	68fb      	ldr	r3, [r7, #12]
20008ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20008aca:	2b00      	cmp	r3, #0
20008acc:	d048      	beq.n	20008b60 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
        {
          hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
20008ace:	68fb      	ldr	r3, [r7, #12]
20008ad0:	681b      	ldr	r3, [r3, #0]
20008ad2:	681a      	ldr	r2, [r3, #0]
20008ad4:	68fb      	ldr	r3, [r7, #12]
20008ad6:	681b      	ldr	r3, [r3, #0]
20008ad8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
20008adc:	601a      	str	r2, [r3, #0]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
20008ade:	68fb      	ldr	r3, [r7, #12]
20008ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20008ae2:	4a71      	ldr	r2, [pc, #452]	; (20008ca8 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>)
20008ae4:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
20008ae6:	68fb      	ldr	r3, [r7, #12]
20008ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20008aea:	4618      	mov	r0, r3
20008aec:	f7fa f81d 	bl	20002b2a <HAL_DMA_Abort_IT>
20008af0:	4603      	mov	r3, r0
20008af2:	2b00      	cmp	r3, #0
20008af4:	d034      	beq.n	20008b60 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
20008af6:	68fb      	ldr	r3, [r7, #12]
20008af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20008afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20008afc:	68fa      	ldr	r2, [r7, #12]
20008afe:	6b92      	ldr	r2, [r2, #56]	; 0x38
20008b00:	4610      	mov	r0, r2
20008b02:	4798      	blx	r3
20008b04:	e02c      	b.n	20008b60 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
20008b06:	68fb      	ldr	r3, [r7, #12]
20008b08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20008b0c:	b2db      	uxtb	r3, r3
20008b0e:	2b2a      	cmp	r3, #42	; 0x2a
20008b10:	d126      	bne.n	20008b60 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
    {
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
20008b12:	68fb      	ldr	r3, [r7, #12]
20008b14:	681b      	ldr	r3, [r3, #0]
20008b16:	681b      	ldr	r3, [r3, #0]
20008b18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
20008b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20008b20:	d11e      	bne.n	20008b60 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
20008b22:	68fb      	ldr	r3, [r7, #12]
20008b24:	681b      	ldr	r3, [r3, #0]
20008b26:	681a      	ldr	r2, [r3, #0]
20008b28:	68fb      	ldr	r3, [r7, #12]
20008b2a:	681b      	ldr	r3, [r3, #0]
20008b2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
20008b30:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
20008b32:	68fb      	ldr	r3, [r7, #12]
20008b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20008b36:	2b00      	cmp	r3, #0
20008b38:	d012      	beq.n	20008b60 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
20008b3a:	68fb      	ldr	r3, [r7, #12]
20008b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20008b3e:	4a5a      	ldr	r2, [pc, #360]	; (20008ca8 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>)
20008b40:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
20008b42:	68fb      	ldr	r3, [r7, #12]
20008b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20008b46:	4618      	mov	r0, r3
20008b48:	f7f9 ffef 	bl	20002b2a <HAL_DMA_Abort_IT>
20008b4c:	4603      	mov	r3, r0
20008b4e:	2b00      	cmp	r3, #0
20008b50:	d006      	beq.n	20008b60 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
20008b52:	68fb      	ldr	r3, [r7, #12]
20008b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20008b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20008b58:	68fa      	ldr	r2, [r7, #12]
20008b5a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
20008b5c:	4610      	mov	r0, r2
20008b5e:	4798      	blx	r3
    else
    {
      /* Nothing to do */
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
20008b60:	68fb      	ldr	r3, [r7, #12]
20008b62:	222a      	movs	r2, #42	; 0x2a
20008b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
20008b68:	68fb      	ldr	r3, [r7, #12]
20008b6a:	2220      	movs	r2, #32
20008b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
20008b70:	68fb      	ldr	r3, [r7, #12]
20008b72:	2200      	movs	r2, #0
20008b74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
20008b76:	68fb      	ldr	r3, [r7, #12]
20008b78:	681b      	ldr	r3, [r3, #0]
20008b7a:	685a      	ldr	r2, [r3, #4]
20008b7c:	68fb      	ldr	r3, [r7, #12]
20008b7e:	681b      	ldr	r3, [r3, #0]
20008b80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
20008b84:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
20008b86:	68fb      	ldr	r3, [r7, #12]
20008b88:	68ba      	ldr	r2, [r7, #8]
20008b8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
20008b8c:	68fb      	ldr	r3, [r7, #12]
20008b8e:	88fa      	ldrh	r2, [r7, #6]
20008b90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
20008b92:	68fb      	ldr	r3, [r7, #12]
20008b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20008b96:	b29a      	uxth	r2, r3
20008b98:	68fb      	ldr	r3, [r7, #12]
20008b9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
20008b9c:	68fb      	ldr	r3, [r7, #12]
20008b9e:	683a      	ldr	r2, [r7, #0]
20008ba0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
20008ba2:	68fb      	ldr	r3, [r7, #12]
20008ba4:	4a41      	ldr	r2, [pc, #260]	; (20008cac <HAL_I2C_Slave_Seq_Receive_DMA+0x264>)
20008ba6:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmarx != NULL)
20008ba8:	68fb      	ldr	r3, [r7, #12]
20008baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20008bac:	2b00      	cmp	r3, #0
20008bae:	d020      	beq.n	20008bf2 <HAL_I2C_Slave_Seq_Receive_DMA+0x1aa>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
20008bb0:	68fb      	ldr	r3, [r7, #12]
20008bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20008bb4:	4a3e      	ldr	r2, [pc, #248]	; (20008cb0 <HAL_I2C_Slave_Seq_Receive_DMA+0x268>)
20008bb6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
20008bb8:	68fb      	ldr	r3, [r7, #12]
20008bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20008bbc:	4a3d      	ldr	r2, [pc, #244]	; (20008cb4 <HAL_I2C_Slave_Seq_Receive_DMA+0x26c>)
20008bbe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
20008bc0:	68fb      	ldr	r3, [r7, #12]
20008bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20008bc4:	2200      	movs	r2, #0
20008bc6:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
20008bc8:	68fb      	ldr	r3, [r7, #12]
20008bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20008bcc:	2200      	movs	r2, #0
20008bce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR,
20008bd0:	68fb      	ldr	r3, [r7, #12]
20008bd2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
20008bd4:	68fb      	ldr	r3, [r7, #12]
20008bd6:	681b      	ldr	r3, [r3, #0]
20008bd8:	3324      	adds	r3, #36	; 0x24
20008bda:	4619      	mov	r1, r3
20008bdc:	68ba      	ldr	r2, [r7, #8]
                                       (uint32_t)pData, hi2c->XferSize);
20008bde:	68fb      	ldr	r3, [r7, #12]
20008be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR,
20008be2:	f7f9 fed2 	bl	2000298a <HAL_DMA_Start_IT>
20008be6:	4603      	mov	r3, r0
20008be8:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
20008bea:	7dfb      	ldrb	r3, [r7, #23]
20008bec:	2b00      	cmp	r3, #0
20008bee:	d12b      	bne.n	20008c48 <HAL_I2C_Slave_Seq_Receive_DMA+0x200>
20008bf0:	e013      	b.n	20008c1a <HAL_I2C_Slave_Seq_Receive_DMA+0x1d2>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
20008bf2:	68fb      	ldr	r3, [r7, #12]
20008bf4:	2228      	movs	r2, #40	; 0x28
20008bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
20008bfa:	68fb      	ldr	r3, [r7, #12]
20008bfc:	2200      	movs	r2, #0
20008bfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
20008c02:	68fb      	ldr	r3, [r7, #12]
20008c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20008c06:	f043 0280 	orr.w	r2, r3, #128	; 0x80
20008c0a:	68fb      	ldr	r3, [r7, #12]
20008c0c:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
20008c0e:	68fb      	ldr	r3, [r7, #12]
20008c10:	2200      	movs	r2, #0
20008c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
20008c16:	2301      	movs	r3, #1
20008c18:	e042      	b.n	20008ca0 <HAL_I2C_Slave_Seq_Receive_DMA+0x258>
    {
      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
20008c1a:	68fb      	ldr	r3, [r7, #12]
20008c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20008c1e:	b29a      	uxth	r2, r3
20008c20:	68fb      	ldr	r3, [r7, #12]
20008c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20008c24:	1ad3      	subs	r3, r2, r3
20008c26:	b29a      	uxth	r2, r3
20008c28:	68fb      	ldr	r3, [r7, #12]
20008c2a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Reset XferSize */
      hi2c->XferSize = 0;
20008c2c:	68fb      	ldr	r3, [r7, #12]
20008c2e:	2200      	movs	r2, #0
20008c30:	851a      	strh	r2, [r3, #40]	; 0x28
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
20008c32:	68fb      	ldr	r3, [r7, #12]
20008c34:	681b      	ldr	r3, [r3, #0]
20008c36:	699b      	ldr	r3, [r3, #24]
20008c38:	0c1b      	lsrs	r3, r3, #16
20008c3a:	b2db      	uxtb	r3, r3
20008c3c:	f003 0301 	and.w	r3, r3, #1
20008c40:	b2db      	uxtb	r3, r3
20008c42:	2b00      	cmp	r3, #0
20008c44:	d118      	bne.n	20008c78 <HAL_I2C_Slave_Seq_Receive_DMA+0x230>
20008c46:	e013      	b.n	20008c70 <HAL_I2C_Slave_Seq_Receive_DMA+0x228>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
20008c48:	68fb      	ldr	r3, [r7, #12]
20008c4a:	2228      	movs	r2, #40	; 0x28
20008c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
20008c50:	68fb      	ldr	r3, [r7, #12]
20008c52:	2200      	movs	r2, #0
20008c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
20008c58:	68fb      	ldr	r3, [r7, #12]
20008c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20008c5c:	f043 0210 	orr.w	r2, r3, #16
20008c60:	68fb      	ldr	r3, [r7, #12]
20008c62:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
20008c64:	68fb      	ldr	r3, [r7, #12]
20008c66:	2200      	movs	r2, #0
20008c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
20008c6c:	2301      	movs	r3, #1
20008c6e:	e017      	b.n	20008ca0 <HAL_I2C_Slave_Seq_Receive_DMA+0x258>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
20008c70:	68fb      	ldr	r3, [r7, #12]
20008c72:	681b      	ldr	r3, [r3, #0]
20008c74:	2208      	movs	r2, #8
20008c76:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
20008c78:	68fb      	ldr	r3, [r7, #12]
20008c7a:	2200      	movs	r2, #0
20008c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable DMA Request */
    hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
20008c80:	68fb      	ldr	r3, [r7, #12]
20008c82:	681b      	ldr	r3, [r3, #0]
20008c84:	681a      	ldr	r2, [r3, #0]
20008c86:	68fb      	ldr	r3, [r7, #12]
20008c88:	681b      	ldr	r3, [r3, #0]
20008c8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
20008c8e:	601a      	str	r2, [r3, #0]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
20008c90:	f248 0102 	movw	r1, #32770	; 0x8002
20008c94:	68f8      	ldr	r0, [r7, #12]
20008c96:	f001 fe4d 	bl	2000a934 <I2C_Enable_IRQ>

    return HAL_OK;
20008c9a:	2300      	movs	r3, #0
20008c9c:	e000      	b.n	20008ca0 <HAL_I2C_Slave_Seq_Receive_DMA+0x258>
  }
  else
  {
    return HAL_ERROR;
20008c9e:	2301      	movs	r3, #1
  }
}
20008ca0:	4618      	mov	r0, r3
20008ca2:	3718      	adds	r7, #24
20008ca4:	46bd      	mov	sp, r7
20008ca6:	bd80      	pop	{r7, pc}
20008ca8:	2000a451 	.word	0x2000a451
20008cac:	2000964f 	.word	0x2000964f
20008cb0:	2000a397 	.word	0x2000a397
20008cb4:	2000a3dd 	.word	0x2000a3dd

20008cb8 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
20008cb8:	b580      	push	{r7, lr}
20008cba:	b082      	sub	sp, #8
20008cbc:	af00      	add	r7, sp, #0
20008cbe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
20008cc0:	687b      	ldr	r3, [r7, #4]
20008cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20008cc6:	b2db      	uxtb	r3, r3
20008cc8:	2b20      	cmp	r3, #32
20008cca:	d10d      	bne.n	20008ce8 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
20008ccc:	687b      	ldr	r3, [r7, #4]
20008cce:	2228      	movs	r2, #40	; 0x28
20008cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
20008cd4:	687b      	ldr	r3, [r7, #4]
20008cd6:	4a07      	ldr	r2, [pc, #28]	; (20008cf4 <HAL_I2C_EnableListen_IT+0x3c>)
20008cd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
20008cda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
20008cde:	6878      	ldr	r0, [r7, #4]
20008ce0:	f001 fe28 	bl	2000a934 <I2C_Enable_IRQ>

    return HAL_OK;
20008ce4:	2300      	movs	r3, #0
20008ce6:	e000      	b.n	20008cea <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
20008ce8:	2302      	movs	r3, #2
  }
}
20008cea:	4618      	mov	r0, r3
20008cec:	3708      	adds	r7, #8
20008cee:	46bd      	mov	sp, r7
20008cf0:	bd80      	pop	{r7, pc}
20008cf2:	bf00      	nop
20008cf4:	20009263 	.word	0x20009263

20008cf8 <HAL_I2C_DisableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DisableListen_IT(I2C_HandleTypeDef *hi2c)
{
20008cf8:	b580      	push	{r7, lr}
20008cfa:	b084      	sub	sp, #16
20008cfc:	af00      	add	r7, sp, #0
20008cfe:	6078      	str	r0, [r7, #4]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp;

  /* Disable Address listen mode only if a transfer is not ongoing */
  if (hi2c->State == HAL_I2C_STATE_LISTEN)
20008d00:	687b      	ldr	r3, [r7, #4]
20008d02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20008d06:	b2db      	uxtb	r3, r3
20008d08:	2b28      	cmp	r3, #40	; 0x28
20008d0a:	d121      	bne.n	20008d50 <HAL_I2C_DisableListen_IT+0x58>
  {
    tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
20008d0c:	687b      	ldr	r3, [r7, #4]
20008d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20008d12:	b2db      	uxtb	r3, r3
20008d14:	f003 0303 	and.w	r3, r3, #3
20008d18:	60fb      	str	r3, [r7, #12]
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
20008d1a:	687b      	ldr	r3, [r7, #4]
20008d1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
20008d20:	b2db      	uxtb	r3, r3
20008d22:	461a      	mov	r2, r3
20008d24:	68fb      	ldr	r3, [r7, #12]
20008d26:	431a      	orrs	r2, r3
20008d28:	687b      	ldr	r3, [r7, #4]
20008d2a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
20008d2c:	687b      	ldr	r3, [r7, #4]
20008d2e:	2220      	movs	r2, #32
20008d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
20008d34:	687b      	ldr	r3, [r7, #4]
20008d36:	2200      	movs	r2, #0
20008d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->XferISR = NULL;
20008d3c:	687b      	ldr	r3, [r7, #4]
20008d3e:	2200      	movs	r2, #0
20008d40:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable the Address Match interrupt */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
20008d42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
20008d46:	6878      	ldr	r0, [r7, #4]
20008d48:	f001 fe58 	bl	2000a9fc <I2C_Disable_IRQ>

    return HAL_OK;
20008d4c:	2300      	movs	r3, #0
20008d4e:	e000      	b.n	20008d52 <HAL_I2C_DisableListen_IT+0x5a>
  }
  else
  {
    return HAL_BUSY;
20008d50:	2302      	movs	r3, #2
  }
}
20008d52:	4618      	mov	r0, r3
20008d54:	3710      	adds	r7, #16
20008d56:	46bd      	mov	sp, r7
20008d58:	bd80      	pop	{r7, pc}
	...

20008d5c <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
20008d5c:	b580      	push	{r7, lr}
20008d5e:	b084      	sub	sp, #16
20008d60:	af02      	add	r7, sp, #8
20008d62:	6078      	str	r0, [r7, #4]
20008d64:	460b      	mov	r3, r1
20008d66:	807b      	strh	r3, [r7, #2]
  if (hi2c->Mode == HAL_I2C_MODE_MASTER)
20008d68:	687b      	ldr	r3, [r7, #4]
20008d6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
20008d6e:	b2db      	uxtb	r3, r3
20008d70:	2b10      	cmp	r3, #16
20008d72:	d13c      	bne.n	20008dee <HAL_I2C_Master_Abort_IT+0x92>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
20008d74:	687b      	ldr	r3, [r7, #4]
20008d76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
20008d7a:	2b01      	cmp	r3, #1
20008d7c:	d101      	bne.n	20008d82 <HAL_I2C_Master_Abort_IT+0x26>
20008d7e:	2302      	movs	r3, #2
20008d80:	e036      	b.n	20008df0 <HAL_I2C_Master_Abort_IT+0x94>
20008d82:	687b      	ldr	r3, [r7, #4]
20008d84:	2201      	movs	r2, #1
20008d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Disable Interrupts and Store Previous state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
20008d8a:	687b      	ldr	r3, [r7, #4]
20008d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20008d90:	b2db      	uxtb	r3, r3
20008d92:	2b21      	cmp	r3, #33	; 0x21
20008d94:	d107      	bne.n	20008da6 <HAL_I2C_Master_Abort_IT+0x4a>
    {
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
20008d96:	2101      	movs	r1, #1
20008d98:	6878      	ldr	r0, [r7, #4]
20008d9a:	f001 fe2f 	bl	2000a9fc <I2C_Disable_IRQ>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
20008d9e:	687b      	ldr	r3, [r7, #4]
20008da0:	2211      	movs	r2, #17
20008da2:	631a      	str	r2, [r3, #48]	; 0x30
20008da4:	e00c      	b.n	20008dc0 <HAL_I2C_Master_Abort_IT+0x64>
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
20008da6:	687b      	ldr	r3, [r7, #4]
20008da8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20008dac:	b2db      	uxtb	r3, r3
20008dae:	2b22      	cmp	r3, #34	; 0x22
20008db0:	d106      	bne.n	20008dc0 <HAL_I2C_Master_Abort_IT+0x64>
    {
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
20008db2:	2102      	movs	r1, #2
20008db4:	6878      	ldr	r0, [r7, #4]
20008db6:	f001 fe21 	bl	2000a9fc <I2C_Disable_IRQ>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
20008dba:	687b      	ldr	r3, [r7, #4]
20008dbc:	2212      	movs	r2, #18
20008dbe:	631a      	str	r2, [r3, #48]	; 0x30
    {
      /* Do nothing */
    }

    /* Set State at HAL_I2C_STATE_ABORT */
    hi2c->State = HAL_I2C_STATE_ABORT;
20008dc0:	687b      	ldr	r3, [r7, #4]
20008dc2:	2260      	movs	r2, #96	; 0x60
20008dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set NBYTES to 1 to generate a dummy read on I2C peripheral */
    /* Set AUTOEND mode, this will generate a NACK then STOP condition to abort the current transfer */
    I2C_TransferConfig(hi2c, DevAddress, 1, I2C_AUTOEND_MODE, I2C_GENERATE_STOP);
20008dc8:	8879      	ldrh	r1, [r7, #2]
20008dca:	4b0b      	ldr	r3, [pc, #44]	; (20008df8 <HAL_I2C_Master_Abort_IT+0x9c>)
20008dcc:	9300      	str	r3, [sp, #0]
20008dce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
20008dd2:	2201      	movs	r2, #1
20008dd4:	6878      	ldr	r0, [r7, #4]
20008dd6:	f001 fd7b 	bl	2000a8d0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
20008dda:	687b      	ldr	r3, [r7, #4]
20008ddc:	2200      	movs	r2, #0
20008dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
20008de2:	2120      	movs	r1, #32
20008de4:	6878      	ldr	r0, [r7, #4]
20008de6:	f001 fda5 	bl	2000a934 <I2C_Enable_IRQ>

    return HAL_OK;
20008dea:	2300      	movs	r3, #0
20008dec:	e000      	b.n	20008df0 <HAL_I2C_Master_Abort_IT+0x94>
  }
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    return HAL_ERROR;
20008dee:	2301      	movs	r3, #1
  }
}
20008df0:	4618      	mov	r0, r3
20008df2:	3708      	adds	r7, #8
20008df4:	46bd      	mov	sp, r7
20008df6:	bd80      	pop	{r7, pc}
20008df8:	80004000 	.word	0x80004000

20008dfc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
20008dfc:	b580      	push	{r7, lr}
20008dfe:	b084      	sub	sp, #16
20008e00:	af00      	add	r7, sp, #0
20008e02:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
20008e04:	687b      	ldr	r3, [r7, #4]
20008e06:	681b      	ldr	r3, [r3, #0]
20008e08:	699b      	ldr	r3, [r3, #24]
20008e0a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
20008e0c:	687b      	ldr	r3, [r7, #4]
20008e0e:	681b      	ldr	r3, [r3, #0]
20008e10:	681b      	ldr	r3, [r3, #0]
20008e12:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
20008e14:	687b      	ldr	r3, [r7, #4]
20008e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20008e18:	2b00      	cmp	r3, #0
20008e1a:	d005      	beq.n	20008e28 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
20008e1c:	687b      	ldr	r3, [r7, #4]
20008e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20008e20:	68ba      	ldr	r2, [r7, #8]
20008e22:	68f9      	ldr	r1, [r7, #12]
20008e24:	6878      	ldr	r0, [r7, #4]
20008e26:	4798      	blx	r3
  }
}
20008e28:	bf00      	nop
20008e2a:	3710      	adds	r7, #16
20008e2c:	46bd      	mov	sp, r7
20008e2e:	bd80      	pop	{r7, pc}

20008e30 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
20008e30:	b580      	push	{r7, lr}
20008e32:	b086      	sub	sp, #24
20008e34:	af00      	add	r7, sp, #0
20008e36:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
20008e38:	687b      	ldr	r3, [r7, #4]
20008e3a:	681b      	ldr	r3, [r3, #0]
20008e3c:	699b      	ldr	r3, [r3, #24]
20008e3e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
20008e40:	687b      	ldr	r3, [r7, #4]
20008e42:	681b      	ldr	r3, [r3, #0]
20008e44:	681b      	ldr	r3, [r3, #0]
20008e46:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
20008e48:	697b      	ldr	r3, [r7, #20]
20008e4a:	0a1b      	lsrs	r3, r3, #8
20008e4c:	f003 0301 	and.w	r3, r3, #1
20008e50:	2b00      	cmp	r3, #0
20008e52:	d010      	beq.n	20008e76 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
20008e54:	693b      	ldr	r3, [r7, #16]
20008e56:	09db      	lsrs	r3, r3, #7
20008e58:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
20008e5c:	2b00      	cmp	r3, #0
20008e5e:	d00a      	beq.n	20008e76 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
20008e60:	687b      	ldr	r3, [r7, #4]
20008e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20008e64:	f043 0201 	orr.w	r2, r3, #1
20008e68:	687b      	ldr	r3, [r7, #4]
20008e6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
20008e6c:	687b      	ldr	r3, [r7, #4]
20008e6e:	681b      	ldr	r3, [r3, #0]
20008e70:	f44f 7280 	mov.w	r2, #256	; 0x100
20008e74:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
20008e76:	697b      	ldr	r3, [r7, #20]
20008e78:	0a9b      	lsrs	r3, r3, #10
20008e7a:	f003 0301 	and.w	r3, r3, #1
20008e7e:	2b00      	cmp	r3, #0
20008e80:	d010      	beq.n	20008ea4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
20008e82:	693b      	ldr	r3, [r7, #16]
20008e84:	09db      	lsrs	r3, r3, #7
20008e86:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
20008e8a:	2b00      	cmp	r3, #0
20008e8c:	d00a      	beq.n	20008ea4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
20008e8e:	687b      	ldr	r3, [r7, #4]
20008e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20008e92:	f043 0208 	orr.w	r2, r3, #8
20008e96:	687b      	ldr	r3, [r7, #4]
20008e98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
20008e9a:	687b      	ldr	r3, [r7, #4]
20008e9c:	681b      	ldr	r3, [r3, #0]
20008e9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20008ea2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
20008ea4:	697b      	ldr	r3, [r7, #20]
20008ea6:	0a5b      	lsrs	r3, r3, #9
20008ea8:	f003 0301 	and.w	r3, r3, #1
20008eac:	2b00      	cmp	r3, #0
20008eae:	d010      	beq.n	20008ed2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
20008eb0:	693b      	ldr	r3, [r7, #16]
20008eb2:	09db      	lsrs	r3, r3, #7
20008eb4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
20008eb8:	2b00      	cmp	r3, #0
20008eba:	d00a      	beq.n	20008ed2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
20008ebc:	687b      	ldr	r3, [r7, #4]
20008ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20008ec0:	f043 0202 	orr.w	r2, r3, #2
20008ec4:	687b      	ldr	r3, [r7, #4]
20008ec6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
20008ec8:	687b      	ldr	r3, [r7, #4]
20008eca:	681b      	ldr	r3, [r3, #0]
20008ecc:	f44f 7200 	mov.w	r2, #512	; 0x200
20008ed0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
20008ed2:	687b      	ldr	r3, [r7, #4]
20008ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20008ed6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
20008ed8:	68fb      	ldr	r3, [r7, #12]
20008eda:	f003 030b 	and.w	r3, r3, #11
20008ede:	2b00      	cmp	r3, #0
20008ee0:	d003      	beq.n	20008eea <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
20008ee2:	68f9      	ldr	r1, [r7, #12]
20008ee4:	6878      	ldr	r0, [r7, #4]
20008ee6:	f001 f885 	bl	20009ff4 <I2C_ITError>
  }
}
20008eea:	bf00      	nop
20008eec:	3718      	adds	r7, #24
20008eee:	46bd      	mov	sp, r7
20008ef0:	bd80      	pop	{r7, pc}

20008ef2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
20008ef2:	b480      	push	{r7}
20008ef4:	b083      	sub	sp, #12
20008ef6:	af00      	add	r7, sp, #0
20008ef8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
20008efa:	bf00      	nop
20008efc:	370c      	adds	r7, #12
20008efe:	46bd      	mov	sp, r7
20008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
20008f04:	4770      	bx	lr

20008f06 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
20008f06:	b480      	push	{r7}
20008f08:	b083      	sub	sp, #12
20008f0a:	af00      	add	r7, sp, #0
20008f0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
20008f0e:	bf00      	nop
20008f10:	370c      	adds	r7, #12
20008f12:	46bd      	mov	sp, r7
20008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
20008f18:	4770      	bx	lr

20008f1a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
20008f1a:	b480      	push	{r7}
20008f1c:	b083      	sub	sp, #12
20008f1e:	af00      	add	r7, sp, #0
20008f20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
20008f22:	bf00      	nop
20008f24:	370c      	adds	r7, #12
20008f26:	46bd      	mov	sp, r7
20008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
20008f2c:	4770      	bx	lr

20008f2e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
20008f2e:	b480      	push	{r7}
20008f30:	b083      	sub	sp, #12
20008f32:	af00      	add	r7, sp, #0
20008f34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
20008f36:	bf00      	nop
20008f38:	370c      	adds	r7, #12
20008f3a:	46bd      	mov	sp, r7
20008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
20008f40:	4770      	bx	lr

20008f42 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
20008f42:	b480      	push	{r7}
20008f44:	b083      	sub	sp, #12
20008f46:	af00      	add	r7, sp, #0
20008f48:	6078      	str	r0, [r7, #4]
20008f4a:	460b      	mov	r3, r1
20008f4c:	70fb      	strb	r3, [r7, #3]
20008f4e:	4613      	mov	r3, r2
20008f50:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
20008f52:	bf00      	nop
20008f54:	370c      	adds	r7, #12
20008f56:	46bd      	mov	sp, r7
20008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
20008f5c:	4770      	bx	lr

20008f5e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
20008f5e:	b480      	push	{r7}
20008f60:	b083      	sub	sp, #12
20008f62:	af00      	add	r7, sp, #0
20008f64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
20008f66:	bf00      	nop
20008f68:	370c      	adds	r7, #12
20008f6a:	46bd      	mov	sp, r7
20008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
20008f70:	4770      	bx	lr

20008f72 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
20008f72:	b480      	push	{r7}
20008f74:	b083      	sub	sp, #12
20008f76:	af00      	add	r7, sp, #0
20008f78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
20008f7a:	bf00      	nop
20008f7c:	370c      	adds	r7, #12
20008f7e:	46bd      	mov	sp, r7
20008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
20008f84:	4770      	bx	lr

20008f86 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
20008f86:	b480      	push	{r7}
20008f88:	b083      	sub	sp, #12
20008f8a:	af00      	add	r7, sp, #0
20008f8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
20008f8e:	bf00      	nop
20008f90:	370c      	adds	r7, #12
20008f92:	46bd      	mov	sp, r7
20008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
20008f98:	4770      	bx	lr

20008f9a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
20008f9a:	b480      	push	{r7}
20008f9c:	b083      	sub	sp, #12
20008f9e:	af00      	add	r7, sp, #0
20008fa0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
20008fa2:	bf00      	nop
20008fa4:	370c      	adds	r7, #12
20008fa6:	46bd      	mov	sp, r7
20008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
20008fac:	4770      	bx	lr

20008fae <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
20008fae:	b480      	push	{r7}
20008fb0:	b083      	sub	sp, #12
20008fb2:	af00      	add	r7, sp, #0
20008fb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
20008fb6:	bf00      	nop
20008fb8:	370c      	adds	r7, #12
20008fba:	46bd      	mov	sp, r7
20008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
20008fc0:	4770      	bx	lr

20008fc2 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
20008fc2:	b480      	push	{r7}
20008fc4:	b083      	sub	sp, #12
20008fc6:	af00      	add	r7, sp, #0
20008fc8:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
20008fca:	687b      	ldr	r3, [r7, #4]
20008fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20008fd0:	b2db      	uxtb	r3, r3
}
20008fd2:	4618      	mov	r0, r3
20008fd4:	370c      	adds	r7, #12
20008fd6:	46bd      	mov	sp, r7
20008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
20008fdc:	4770      	bx	lr

20008fde <HAL_I2C_GetMode>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL mode
  */
HAL_I2C_ModeTypeDef HAL_I2C_GetMode(I2C_HandleTypeDef *hi2c)
{
20008fde:	b480      	push	{r7}
20008fe0:	b083      	sub	sp, #12
20008fe2:	af00      	add	r7, sp, #0
20008fe4:	6078      	str	r0, [r7, #4]
  return hi2c->Mode;
20008fe6:	687b      	ldr	r3, [r7, #4]
20008fe8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
20008fec:	b2db      	uxtb	r3, r3
}
20008fee:	4618      	mov	r0, r3
20008ff0:	370c      	adds	r7, #12
20008ff2:	46bd      	mov	sp, r7
20008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
20008ff8:	4770      	bx	lr

20008ffa <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
20008ffa:	b480      	push	{r7}
20008ffc:	b083      	sub	sp, #12
20008ffe:	af00      	add	r7, sp, #0
20009000:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
20009002:	687b      	ldr	r3, [r7, #4]
20009004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
20009006:	4618      	mov	r0, r3
20009008:	370c      	adds	r7, #12
2000900a:	46bd      	mov	sp, r7
2000900c:	f85d 7b04 	ldr.w	r7, [sp], #4
20009010:	4770      	bx	lr

20009012 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
20009012:	b580      	push	{r7, lr}
20009014:	b088      	sub	sp, #32
20009016:	af02      	add	r7, sp, #8
20009018:	60f8      	str	r0, [r7, #12]
2000901a:	60b9      	str	r1, [r7, #8]
2000901c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
2000901e:	68bb      	ldr	r3, [r7, #8]
20009020:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
20009022:	68fb      	ldr	r3, [r7, #12]
20009024:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
20009028:	2b01      	cmp	r3, #1
2000902a:	d101      	bne.n	20009030 <I2C_Master_ISR_IT+0x1e>
2000902c:	2302      	movs	r3, #2
2000902e:	e114      	b.n	2000925a <I2C_Master_ISR_IT+0x248>
20009030:	68fb      	ldr	r3, [r7, #12]
20009032:	2201      	movs	r2, #1
20009034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
20009038:	697b      	ldr	r3, [r7, #20]
2000903a:	091b      	lsrs	r3, r3, #4
2000903c:	f003 0301 	and.w	r3, r3, #1
20009040:	2b00      	cmp	r3, #0
20009042:	d013      	beq.n	2000906c <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
20009044:	687b      	ldr	r3, [r7, #4]
20009046:	091b      	lsrs	r3, r3, #4
20009048:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2000904c:	2b00      	cmp	r3, #0
2000904e:	d00d      	beq.n	2000906c <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
20009050:	68fb      	ldr	r3, [r7, #12]
20009052:	681b      	ldr	r3, [r3, #0]
20009054:	2210      	movs	r2, #16
20009056:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
20009058:	68fb      	ldr	r3, [r7, #12]
2000905a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000905c:	f043 0204 	orr.w	r2, r3, #4
20009060:	68fb      	ldr	r3, [r7, #12]
20009062:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
20009064:	68f8      	ldr	r0, [r7, #12]
20009066:	f001 f8bc 	bl	2000a1e2 <I2C_Flush_TXDR>
2000906a:	e0e1      	b.n	20009230 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
2000906c:	697b      	ldr	r3, [r7, #20]
2000906e:	089b      	lsrs	r3, r3, #2
20009070:	f003 0301 	and.w	r3, r3, #1
20009074:	2b00      	cmp	r3, #0
20009076:	d023      	beq.n	200090c0 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
20009078:	687b      	ldr	r3, [r7, #4]
2000907a:	089b      	lsrs	r3, r3, #2
2000907c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
20009080:	2b00      	cmp	r3, #0
20009082:	d01d      	beq.n	200090c0 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
20009084:	697b      	ldr	r3, [r7, #20]
20009086:	f023 0304 	bic.w	r3, r3, #4
2000908a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2000908c:	68fb      	ldr	r3, [r7, #12]
2000908e:	681b      	ldr	r3, [r3, #0]
20009090:	6a5a      	ldr	r2, [r3, #36]	; 0x24
20009092:	68fb      	ldr	r3, [r7, #12]
20009094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20009096:	b2d2      	uxtb	r2, r2
20009098:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
2000909a:	68fb      	ldr	r3, [r7, #12]
2000909c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000909e:	1c5a      	adds	r2, r3, #1
200090a0:	68fb      	ldr	r3, [r7, #12]
200090a2:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
200090a4:	68fb      	ldr	r3, [r7, #12]
200090a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
200090a8:	3b01      	subs	r3, #1
200090aa:	b29a      	uxth	r2, r3
200090ac:	68fb      	ldr	r3, [r7, #12]
200090ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
200090b0:	68fb      	ldr	r3, [r7, #12]
200090b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
200090b4:	b29b      	uxth	r3, r3
200090b6:	3b01      	subs	r3, #1
200090b8:	b29a      	uxth	r2, r3
200090ba:	68fb      	ldr	r3, [r7, #12]
200090bc:	855a      	strh	r2, [r3, #42]	; 0x2a
200090be:	e0b7      	b.n	20009230 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
200090c0:	697b      	ldr	r3, [r7, #20]
200090c2:	085b      	lsrs	r3, r3, #1
200090c4:	f003 0301 	and.w	r3, r3, #1
200090c8:	2b00      	cmp	r3, #0
200090ca:	d01e      	beq.n	2000910a <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
200090cc:	687b      	ldr	r3, [r7, #4]
200090ce:	085b      	lsrs	r3, r3, #1
200090d0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
200090d4:	2b00      	cmp	r3, #0
200090d6:	d018      	beq.n	2000910a <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
200090d8:	68fb      	ldr	r3, [r7, #12]
200090da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200090dc:	781a      	ldrb	r2, [r3, #0]
200090de:	68fb      	ldr	r3, [r7, #12]
200090e0:	681b      	ldr	r3, [r3, #0]
200090e2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
200090e4:	68fb      	ldr	r3, [r7, #12]
200090e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200090e8:	1c5a      	adds	r2, r3, #1
200090ea:	68fb      	ldr	r3, [r7, #12]
200090ec:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
200090ee:	68fb      	ldr	r3, [r7, #12]
200090f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
200090f2:	3b01      	subs	r3, #1
200090f4:	b29a      	uxth	r2, r3
200090f6:	68fb      	ldr	r3, [r7, #12]
200090f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
200090fa:	68fb      	ldr	r3, [r7, #12]
200090fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
200090fe:	b29b      	uxth	r3, r3
20009100:	3b01      	subs	r3, #1
20009102:	b29a      	uxth	r2, r3
20009104:	68fb      	ldr	r3, [r7, #12]
20009106:	855a      	strh	r2, [r3, #42]	; 0x2a
20009108:	e092      	b.n	20009230 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
2000910a:	697b      	ldr	r3, [r7, #20]
2000910c:	09db      	lsrs	r3, r3, #7
2000910e:	f003 0301 	and.w	r3, r3, #1
20009112:	2b00      	cmp	r3, #0
20009114:	d05d      	beq.n	200091d2 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
20009116:	687b      	ldr	r3, [r7, #4]
20009118:	099b      	lsrs	r3, r3, #6
2000911a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
2000911e:	2b00      	cmp	r3, #0
20009120:	d057      	beq.n	200091d2 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
20009122:	68fb      	ldr	r3, [r7, #12]
20009124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20009126:	b29b      	uxth	r3, r3
20009128:	2b00      	cmp	r3, #0
2000912a:	d040      	beq.n	200091ae <I2C_Master_ISR_IT+0x19c>
2000912c:	68fb      	ldr	r3, [r7, #12]
2000912e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20009130:	2b00      	cmp	r3, #0
20009132:	d13c      	bne.n	200091ae <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
20009134:	68fb      	ldr	r3, [r7, #12]
20009136:	681b      	ldr	r3, [r3, #0]
20009138:	685b      	ldr	r3, [r3, #4]
2000913a:	b29b      	uxth	r3, r3
2000913c:	f3c3 0309 	ubfx	r3, r3, #0, #10
20009140:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
20009142:	68fb      	ldr	r3, [r7, #12]
20009144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20009146:	b29b      	uxth	r3, r3
20009148:	2bff      	cmp	r3, #255	; 0xff
2000914a:	d90e      	bls.n	2000916a <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
2000914c:	68fb      	ldr	r3, [r7, #12]
2000914e:	22ff      	movs	r2, #255	; 0xff
20009150:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
20009152:	68fb      	ldr	r3, [r7, #12]
20009154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20009156:	b2da      	uxtb	r2, r3
20009158:	8a79      	ldrh	r1, [r7, #18]
2000915a:	2300      	movs	r3, #0
2000915c:	9300      	str	r3, [sp, #0]
2000915e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
20009162:	68f8      	ldr	r0, [r7, #12]
20009164:	f001 fbb4 	bl	2000a8d0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
20009168:	e032      	b.n	200091d0 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
2000916a:	68fb      	ldr	r3, [r7, #12]
2000916c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2000916e:	b29a      	uxth	r2, r3
20009170:	68fb      	ldr	r3, [r7, #12]
20009172:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
20009174:	68fb      	ldr	r3, [r7, #12]
20009176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20009178:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2000917c:	d00b      	beq.n	20009196 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
2000917e:	68fb      	ldr	r3, [r7, #12]
20009180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20009182:	b2da      	uxtb	r2, r3
20009184:	68fb      	ldr	r3, [r7, #12]
20009186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20009188:	8a79      	ldrh	r1, [r7, #18]
2000918a:	2000      	movs	r0, #0
2000918c:	9000      	str	r0, [sp, #0]
2000918e:	68f8      	ldr	r0, [r7, #12]
20009190:	f001 fb9e 	bl	2000a8d0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
20009194:	e01c      	b.n	200091d0 <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
20009196:	68fb      	ldr	r3, [r7, #12]
20009198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2000919a:	b2da      	uxtb	r2, r3
2000919c:	8a79      	ldrh	r1, [r7, #18]
2000919e:	2300      	movs	r3, #0
200091a0:	9300      	str	r3, [sp, #0]
200091a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
200091a6:	68f8      	ldr	r0, [r7, #12]
200091a8:	f001 fb92 	bl	2000a8d0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
200091ac:	e010      	b.n	200091d0 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
200091ae:	68fb      	ldr	r3, [r7, #12]
200091b0:	681b      	ldr	r3, [r3, #0]
200091b2:	685b      	ldr	r3, [r3, #4]
200091b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
200091b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
200091bc:	d003      	beq.n	200091c6 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
200091be:	68f8      	ldr	r0, [r7, #12]
200091c0:	f000 fc52 	bl	20009a68 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
200091c4:	e034      	b.n	20009230 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
200091c6:	2140      	movs	r1, #64	; 0x40
200091c8:	68f8      	ldr	r0, [r7, #12]
200091ca:	f000 ff13 	bl	20009ff4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
200091ce:	e02f      	b.n	20009230 <I2C_Master_ISR_IT+0x21e>
200091d0:	e02e      	b.n	20009230 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
200091d2:	697b      	ldr	r3, [r7, #20]
200091d4:	099b      	lsrs	r3, r3, #6
200091d6:	f003 0301 	and.w	r3, r3, #1
200091da:	2b00      	cmp	r3, #0
200091dc:	d028      	beq.n	20009230 <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
200091de:	687b      	ldr	r3, [r7, #4]
200091e0:	099b      	lsrs	r3, r3, #6
200091e2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
200091e6:	2b00      	cmp	r3, #0
200091e8:	d022      	beq.n	20009230 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
200091ea:	68fb      	ldr	r3, [r7, #12]
200091ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
200091ee:	b29b      	uxth	r3, r3
200091f0:	2b00      	cmp	r3, #0
200091f2:	d119      	bne.n	20009228 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
200091f4:	68fb      	ldr	r3, [r7, #12]
200091f6:	681b      	ldr	r3, [r3, #0]
200091f8:	685b      	ldr	r3, [r3, #4]
200091fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
200091fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
20009202:	d015      	beq.n	20009230 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
20009204:	68fb      	ldr	r3, [r7, #12]
20009206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20009208:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2000920c:	d108      	bne.n	20009220 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
2000920e:	68fb      	ldr	r3, [r7, #12]
20009210:	681b      	ldr	r3, [r3, #0]
20009212:	685a      	ldr	r2, [r3, #4]
20009214:	68fb      	ldr	r3, [r7, #12]
20009216:	681b      	ldr	r3, [r3, #0]
20009218:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2000921c:	605a      	str	r2, [r3, #4]
2000921e:	e007      	b.n	20009230 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
20009220:	68f8      	ldr	r0, [r7, #12]
20009222:	f000 fc21 	bl	20009a68 <I2C_ITMasterSeqCplt>
20009226:	e003      	b.n	20009230 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
20009228:	2140      	movs	r1, #64	; 0x40
2000922a:	68f8      	ldr	r0, [r7, #12]
2000922c:	f000 fee2 	bl	20009ff4 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
20009230:	697b      	ldr	r3, [r7, #20]
20009232:	095b      	lsrs	r3, r3, #5
20009234:	f003 0301 	and.w	r3, r3, #1
20009238:	2b00      	cmp	r3, #0
2000923a:	d009      	beq.n	20009250 <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
2000923c:	687b      	ldr	r3, [r7, #4]
2000923e:	095b      	lsrs	r3, r3, #5
20009240:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
20009244:	2b00      	cmp	r3, #0
20009246:	d003      	beq.n	20009250 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
20009248:	6979      	ldr	r1, [r7, #20]
2000924a:	68f8      	ldr	r0, [r7, #12]
2000924c:	f000 fca8 	bl	20009ba0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
20009250:	68fb      	ldr	r3, [r7, #12]
20009252:	2200      	movs	r2, #0
20009254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
20009258:	2300      	movs	r3, #0
}
2000925a:	4618      	mov	r0, r3
2000925c:	3718      	adds	r7, #24
2000925e:	46bd      	mov	sp, r7
20009260:	bd80      	pop	{r7, pc}

20009262 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
20009262:	b580      	push	{r7, lr}
20009264:	b086      	sub	sp, #24
20009266:	af00      	add	r7, sp, #0
20009268:	60f8      	str	r0, [r7, #12]
2000926a:	60b9      	str	r1, [r7, #8]
2000926c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
2000926e:	68fb      	ldr	r3, [r7, #12]
20009270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20009272:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
20009274:	68bb      	ldr	r3, [r7, #8]
20009276:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
20009278:	68fb      	ldr	r3, [r7, #12]
2000927a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2000927e:	2b01      	cmp	r3, #1
20009280:	d101      	bne.n	20009286 <I2C_Slave_ISR_IT+0x24>
20009282:	2302      	movs	r3, #2
20009284:	e0ec      	b.n	20009460 <I2C_Slave_ISR_IT+0x1fe>
20009286:	68fb      	ldr	r3, [r7, #12]
20009288:	2201      	movs	r2, #1
2000928a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
2000928e:	693b      	ldr	r3, [r7, #16]
20009290:	095b      	lsrs	r3, r3, #5
20009292:	f003 0301 	and.w	r3, r3, #1
20009296:	2b00      	cmp	r3, #0
20009298:	d009      	beq.n	200092ae <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
2000929a:	687b      	ldr	r3, [r7, #4]
2000929c:	095b      	lsrs	r3, r3, #5
2000929e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
200092a2:	2b00      	cmp	r3, #0
200092a4:	d003      	beq.n	200092ae <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
200092a6:	6939      	ldr	r1, [r7, #16]
200092a8:	68f8      	ldr	r0, [r7, #12]
200092aa:	f000 fd43 	bl	20009d34 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
200092ae:	693b      	ldr	r3, [r7, #16]
200092b0:	091b      	lsrs	r3, r3, #4
200092b2:	f003 0301 	and.w	r3, r3, #1
200092b6:	2b00      	cmp	r3, #0
200092b8:	d04d      	beq.n	20009356 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
200092ba:	687b      	ldr	r3, [r7, #4]
200092bc:	091b      	lsrs	r3, r3, #4
200092be:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
200092c2:	2b00      	cmp	r3, #0
200092c4:	d047      	beq.n	20009356 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
200092c6:	68fb      	ldr	r3, [r7, #12]
200092c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
200092ca:	b29b      	uxth	r3, r3
200092cc:	2b00      	cmp	r3, #0
200092ce:	d128      	bne.n	20009322 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
200092d0:	68fb      	ldr	r3, [r7, #12]
200092d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
200092d6:	b2db      	uxtb	r3, r3
200092d8:	2b28      	cmp	r3, #40	; 0x28
200092da:	d108      	bne.n	200092ee <I2C_Slave_ISR_IT+0x8c>
200092dc:	697b      	ldr	r3, [r7, #20]
200092de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
200092e2:	d104      	bne.n	200092ee <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
200092e4:	6939      	ldr	r1, [r7, #16]
200092e6:	68f8      	ldr	r0, [r7, #12]
200092e8:	f000 fe2e 	bl	20009f48 <I2C_ITListenCplt>
200092ec:	e032      	b.n	20009354 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
200092ee:	68fb      	ldr	r3, [r7, #12]
200092f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
200092f4:	b2db      	uxtb	r3, r3
200092f6:	2b29      	cmp	r3, #41	; 0x29
200092f8:	d10e      	bne.n	20009318 <I2C_Slave_ISR_IT+0xb6>
200092fa:	697b      	ldr	r3, [r7, #20]
200092fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
20009300:	d00a      	beq.n	20009318 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
20009302:	68fb      	ldr	r3, [r7, #12]
20009304:	681b      	ldr	r3, [r3, #0]
20009306:	2210      	movs	r2, #16
20009308:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
2000930a:	68f8      	ldr	r0, [r7, #12]
2000930c:	f000 ff69 	bl	2000a1e2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
20009310:	68f8      	ldr	r0, [r7, #12]
20009312:	f000 fbe6 	bl	20009ae2 <I2C_ITSlaveSeqCplt>
20009316:	e01d      	b.n	20009354 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
20009318:	68fb      	ldr	r3, [r7, #12]
2000931a:	681b      	ldr	r3, [r3, #0]
2000931c:	2210      	movs	r2, #16
2000931e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
20009320:	e096      	b.n	20009450 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
20009322:	68fb      	ldr	r3, [r7, #12]
20009324:	681b      	ldr	r3, [r3, #0]
20009326:	2210      	movs	r2, #16
20009328:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2000932a:	68fb      	ldr	r3, [r7, #12]
2000932c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000932e:	f043 0204 	orr.w	r2, r3, #4
20009332:	68fb      	ldr	r3, [r7, #12]
20009334:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
20009336:	697b      	ldr	r3, [r7, #20]
20009338:	2b00      	cmp	r3, #0
2000933a:	d004      	beq.n	20009346 <I2C_Slave_ISR_IT+0xe4>
2000933c:	697b      	ldr	r3, [r7, #20]
2000933e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
20009342:	f040 8085 	bne.w	20009450 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
20009346:	68fb      	ldr	r3, [r7, #12]
20009348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000934a:	4619      	mov	r1, r3
2000934c:	68f8      	ldr	r0, [r7, #12]
2000934e:	f000 fe51 	bl	20009ff4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
20009352:	e07d      	b.n	20009450 <I2C_Slave_ISR_IT+0x1ee>
20009354:	e07c      	b.n	20009450 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
20009356:	693b      	ldr	r3, [r7, #16]
20009358:	089b      	lsrs	r3, r3, #2
2000935a:	f003 0301 	and.w	r3, r3, #1
2000935e:	2b00      	cmp	r3, #0
20009360:	d030      	beq.n	200093c4 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
20009362:	687b      	ldr	r3, [r7, #4]
20009364:	089b      	lsrs	r3, r3, #2
20009366:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
2000936a:	2b00      	cmp	r3, #0
2000936c:	d02a      	beq.n	200093c4 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
2000936e:	68fb      	ldr	r3, [r7, #12]
20009370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20009372:	b29b      	uxth	r3, r3
20009374:	2b00      	cmp	r3, #0
20009376:	d018      	beq.n	200093aa <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
20009378:	68fb      	ldr	r3, [r7, #12]
2000937a:	681b      	ldr	r3, [r3, #0]
2000937c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2000937e:	68fb      	ldr	r3, [r7, #12]
20009380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20009382:	b2d2      	uxtb	r2, r2
20009384:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
20009386:	68fb      	ldr	r3, [r7, #12]
20009388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000938a:	1c5a      	adds	r2, r3, #1
2000938c:	68fb      	ldr	r3, [r7, #12]
2000938e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
20009390:	68fb      	ldr	r3, [r7, #12]
20009392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20009394:	3b01      	subs	r3, #1
20009396:	b29a      	uxth	r2, r3
20009398:	68fb      	ldr	r3, [r7, #12]
2000939a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
2000939c:	68fb      	ldr	r3, [r7, #12]
2000939e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
200093a0:	b29b      	uxth	r3, r3
200093a2:	3b01      	subs	r3, #1
200093a4:	b29a      	uxth	r2, r3
200093a6:	68fb      	ldr	r3, [r7, #12]
200093a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
200093aa:	68fb      	ldr	r3, [r7, #12]
200093ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
200093ae:	b29b      	uxth	r3, r3
200093b0:	2b00      	cmp	r3, #0
200093b2:	d14f      	bne.n	20009454 <I2C_Slave_ISR_IT+0x1f2>
200093b4:	697b      	ldr	r3, [r7, #20]
200093b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
200093ba:	d04b      	beq.n	20009454 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
200093bc:	68f8      	ldr	r0, [r7, #12]
200093be:	f000 fb90 	bl	20009ae2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
200093c2:	e047      	b.n	20009454 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
200093c4:	693b      	ldr	r3, [r7, #16]
200093c6:	08db      	lsrs	r3, r3, #3
200093c8:	f003 0301 	and.w	r3, r3, #1
200093cc:	2b00      	cmp	r3, #0
200093ce:	d00a      	beq.n	200093e6 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
200093d0:	687b      	ldr	r3, [r7, #4]
200093d2:	08db      	lsrs	r3, r3, #3
200093d4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
200093d8:	2b00      	cmp	r3, #0
200093da:	d004      	beq.n	200093e6 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
200093dc:	6939      	ldr	r1, [r7, #16]
200093de:	68f8      	ldr	r0, [r7, #12]
200093e0:	f000 fabe 	bl	20009960 <I2C_ITAddrCplt>
200093e4:	e037      	b.n	20009456 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
200093e6:	693b      	ldr	r3, [r7, #16]
200093e8:	085b      	lsrs	r3, r3, #1
200093ea:	f003 0301 	and.w	r3, r3, #1
200093ee:	2b00      	cmp	r3, #0
200093f0:	d031      	beq.n	20009456 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
200093f2:	687b      	ldr	r3, [r7, #4]
200093f4:	085b      	lsrs	r3, r3, #1
200093f6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
200093fa:	2b00      	cmp	r3, #0
200093fc:	d02b      	beq.n	20009456 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
200093fe:	68fb      	ldr	r3, [r7, #12]
20009400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20009402:	b29b      	uxth	r3, r3
20009404:	2b00      	cmp	r3, #0
20009406:	d018      	beq.n	2000943a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
20009408:	68fb      	ldr	r3, [r7, #12]
2000940a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000940c:	781a      	ldrb	r2, [r3, #0]
2000940e:	68fb      	ldr	r3, [r7, #12]
20009410:	681b      	ldr	r3, [r3, #0]
20009412:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
20009414:	68fb      	ldr	r3, [r7, #12]
20009416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20009418:	1c5a      	adds	r2, r3, #1
2000941a:	68fb      	ldr	r3, [r7, #12]
2000941c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
2000941e:	68fb      	ldr	r3, [r7, #12]
20009420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20009422:	b29b      	uxth	r3, r3
20009424:	3b01      	subs	r3, #1
20009426:	b29a      	uxth	r2, r3
20009428:	68fb      	ldr	r3, [r7, #12]
2000942a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
2000942c:	68fb      	ldr	r3, [r7, #12]
2000942e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20009430:	3b01      	subs	r3, #1
20009432:	b29a      	uxth	r2, r3
20009434:	68fb      	ldr	r3, [r7, #12]
20009436:	851a      	strh	r2, [r3, #40]	; 0x28
20009438:	e00d      	b.n	20009456 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
2000943a:	697b      	ldr	r3, [r7, #20]
2000943c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
20009440:	d002      	beq.n	20009448 <I2C_Slave_ISR_IT+0x1e6>
20009442:	697b      	ldr	r3, [r7, #20]
20009444:	2b00      	cmp	r3, #0
20009446:	d106      	bne.n	20009456 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
20009448:	68f8      	ldr	r0, [r7, #12]
2000944a:	f000 fb4a 	bl	20009ae2 <I2C_ITSlaveSeqCplt>
2000944e:	e002      	b.n	20009456 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
20009450:	bf00      	nop
20009452:	e000      	b.n	20009456 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
20009454:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
20009456:	68fb      	ldr	r3, [r7, #12]
20009458:	2200      	movs	r2, #0
2000945a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
2000945e:	2300      	movs	r3, #0
}
20009460:	4618      	mov	r0, r3
20009462:	3718      	adds	r7, #24
20009464:	46bd      	mov	sp, r7
20009466:	bd80      	pop	{r7, pc}

20009468 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
20009468:	b580      	push	{r7, lr}
2000946a:	b088      	sub	sp, #32
2000946c:	af02      	add	r7, sp, #8
2000946e:	60f8      	str	r0, [r7, #12]
20009470:	60b9      	str	r1, [r7, #8]
20009472:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
20009474:	68fb      	ldr	r3, [r7, #12]
20009476:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2000947a:	2b01      	cmp	r3, #1
2000947c:	d101      	bne.n	20009482 <I2C_Master_ISR_DMA+0x1a>
2000947e:	2302      	movs	r3, #2
20009480:	e0e1      	b.n	20009646 <I2C_Master_ISR_DMA+0x1de>
20009482:	68fb      	ldr	r3, [r7, #12]
20009484:	2201      	movs	r2, #1
20009486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
2000948a:	68bb      	ldr	r3, [r7, #8]
2000948c:	091b      	lsrs	r3, r3, #4
2000948e:	f003 0301 	and.w	r3, r3, #1
20009492:	2b00      	cmp	r3, #0
20009494:	d017      	beq.n	200094c6 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
20009496:	687b      	ldr	r3, [r7, #4]
20009498:	091b      	lsrs	r3, r3, #4
2000949a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
2000949e:	2b00      	cmp	r3, #0
200094a0:	d011      	beq.n	200094c6 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
200094a2:	68fb      	ldr	r3, [r7, #12]
200094a4:	681b      	ldr	r3, [r3, #0]
200094a6:	2210      	movs	r2, #16
200094a8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
200094aa:	68fb      	ldr	r3, [r7, #12]
200094ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
200094ae:	f043 0204 	orr.w	r2, r3, #4
200094b2:	68fb      	ldr	r3, [r7, #12]
200094b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
200094b6:	2120      	movs	r1, #32
200094b8:	68f8      	ldr	r0, [r7, #12]
200094ba:	f001 fa3b 	bl	2000a934 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
200094be:	68f8      	ldr	r0, [r7, #12]
200094c0:	f000 fe8f 	bl	2000a1e2 <I2C_Flush_TXDR>
200094c4:	e0ba      	b.n	2000963c <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
200094c6:	68bb      	ldr	r3, [r7, #8]
200094c8:	09db      	lsrs	r3, r3, #7
200094ca:	f003 0301 	and.w	r3, r3, #1
200094ce:	2b00      	cmp	r3, #0
200094d0:	d072      	beq.n	200095b8 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
200094d2:	687b      	ldr	r3, [r7, #4]
200094d4:	099b      	lsrs	r3, r3, #6
200094d6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
200094da:	2b00      	cmp	r3, #0
200094dc:	d06c      	beq.n	200095b8 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
200094de:	68fb      	ldr	r3, [r7, #12]
200094e0:	681b      	ldr	r3, [r3, #0]
200094e2:	681a      	ldr	r2, [r3, #0]
200094e4:	68fb      	ldr	r3, [r7, #12]
200094e6:	681b      	ldr	r3, [r3, #0]
200094e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
200094ec:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
200094ee:	68fb      	ldr	r3, [r7, #12]
200094f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
200094f2:	b29b      	uxth	r3, r3
200094f4:	2b00      	cmp	r3, #0
200094f6:	d04e      	beq.n	20009596 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
200094f8:	68fb      	ldr	r3, [r7, #12]
200094fa:	681b      	ldr	r3, [r3, #0]
200094fc:	685b      	ldr	r3, [r3, #4]
200094fe:	b29b      	uxth	r3, r3
20009500:	f3c3 0309 	ubfx	r3, r3, #0, #10
20009504:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
20009506:	68fb      	ldr	r3, [r7, #12]
20009508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2000950a:	b29b      	uxth	r3, r3
2000950c:	2bff      	cmp	r3, #255	; 0xff
2000950e:	d906      	bls.n	2000951e <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
20009510:	68fb      	ldr	r3, [r7, #12]
20009512:	22ff      	movs	r2, #255	; 0xff
20009514:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
20009516:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2000951a:	617b      	str	r3, [r7, #20]
2000951c:	e010      	b.n	20009540 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
2000951e:	68fb      	ldr	r3, [r7, #12]
20009520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20009522:	b29a      	uxth	r2, r3
20009524:	68fb      	ldr	r3, [r7, #12]
20009526:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
20009528:	68fb      	ldr	r3, [r7, #12]
2000952a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000952c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
20009530:	d003      	beq.n	2000953a <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
20009532:	68fb      	ldr	r3, [r7, #12]
20009534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20009536:	617b      	str	r3, [r7, #20]
20009538:	e002      	b.n	20009540 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
2000953a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2000953e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
20009540:	68fb      	ldr	r3, [r7, #12]
20009542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20009544:	b2da      	uxtb	r2, r3
20009546:	8a79      	ldrh	r1, [r7, #18]
20009548:	2300      	movs	r3, #0
2000954a:	9300      	str	r3, [sp, #0]
2000954c:	697b      	ldr	r3, [r7, #20]
2000954e:	68f8      	ldr	r0, [r7, #12]
20009550:	f001 f9be 	bl	2000a8d0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
20009554:	68fb      	ldr	r3, [r7, #12]
20009556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20009558:	b29a      	uxth	r2, r3
2000955a:	68fb      	ldr	r3, [r7, #12]
2000955c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2000955e:	1ad3      	subs	r3, r2, r3
20009560:	b29a      	uxth	r2, r3
20009562:	68fb      	ldr	r3, [r7, #12]
20009564:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
20009566:	68fb      	ldr	r3, [r7, #12]
20009568:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000956c:	b2db      	uxtb	r3, r3
2000956e:	2b22      	cmp	r3, #34	; 0x22
20009570:	d108      	bne.n	20009584 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
20009572:	68fb      	ldr	r3, [r7, #12]
20009574:	681b      	ldr	r3, [r3, #0]
20009576:	681a      	ldr	r2, [r3, #0]
20009578:	68fb      	ldr	r3, [r7, #12]
2000957a:	681b      	ldr	r3, [r3, #0]
2000957c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
20009580:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
20009582:	e05b      	b.n	2000963c <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
20009584:	68fb      	ldr	r3, [r7, #12]
20009586:	681b      	ldr	r3, [r3, #0]
20009588:	681a      	ldr	r2, [r3, #0]
2000958a:	68fb      	ldr	r3, [r7, #12]
2000958c:	681b      	ldr	r3, [r3, #0]
2000958e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
20009592:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
20009594:	e052      	b.n	2000963c <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
20009596:	68fb      	ldr	r3, [r7, #12]
20009598:	681b      	ldr	r3, [r3, #0]
2000959a:	685b      	ldr	r3, [r3, #4]
2000959c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
200095a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
200095a4:	d003      	beq.n	200095ae <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
200095a6:	68f8      	ldr	r0, [r7, #12]
200095a8:	f000 fa5e 	bl	20009a68 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
200095ac:	e046      	b.n	2000963c <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
200095ae:	2140      	movs	r1, #64	; 0x40
200095b0:	68f8      	ldr	r0, [r7, #12]
200095b2:	f000 fd1f 	bl	20009ff4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
200095b6:	e041      	b.n	2000963c <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
200095b8:	68bb      	ldr	r3, [r7, #8]
200095ba:	099b      	lsrs	r3, r3, #6
200095bc:	f003 0301 	and.w	r3, r3, #1
200095c0:	2b00      	cmp	r3, #0
200095c2:	d029      	beq.n	20009618 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
200095c4:	687b      	ldr	r3, [r7, #4]
200095c6:	099b      	lsrs	r3, r3, #6
200095c8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
200095cc:	2b00      	cmp	r3, #0
200095ce:	d023      	beq.n	20009618 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
200095d0:	68fb      	ldr	r3, [r7, #12]
200095d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
200095d4:	b29b      	uxth	r3, r3
200095d6:	2b00      	cmp	r3, #0
200095d8:	d119      	bne.n	2000960e <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
200095da:	68fb      	ldr	r3, [r7, #12]
200095dc:	681b      	ldr	r3, [r3, #0]
200095de:	685b      	ldr	r3, [r3, #4]
200095e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
200095e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
200095e8:	d027      	beq.n	2000963a <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
200095ea:	68fb      	ldr	r3, [r7, #12]
200095ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200095ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
200095f2:	d108      	bne.n	20009606 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
200095f4:	68fb      	ldr	r3, [r7, #12]
200095f6:	681b      	ldr	r3, [r3, #0]
200095f8:	685a      	ldr	r2, [r3, #4]
200095fa:	68fb      	ldr	r3, [r7, #12]
200095fc:	681b      	ldr	r3, [r3, #0]
200095fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
20009602:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
20009604:	e019      	b.n	2000963a <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
20009606:	68f8      	ldr	r0, [r7, #12]
20009608:	f000 fa2e 	bl	20009a68 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
2000960c:	e015      	b.n	2000963a <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
2000960e:	2140      	movs	r1, #64	; 0x40
20009610:	68f8      	ldr	r0, [r7, #12]
20009612:	f000 fcef 	bl	20009ff4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
20009616:	e010      	b.n	2000963a <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
20009618:	68bb      	ldr	r3, [r7, #8]
2000961a:	095b      	lsrs	r3, r3, #5
2000961c:	f003 0301 	and.w	r3, r3, #1
20009620:	2b00      	cmp	r3, #0
20009622:	d00b      	beq.n	2000963c <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
20009624:	687b      	ldr	r3, [r7, #4]
20009626:	095b      	lsrs	r3, r3, #5
20009628:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
2000962c:	2b00      	cmp	r3, #0
2000962e:	d005      	beq.n	2000963c <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
20009630:	68b9      	ldr	r1, [r7, #8]
20009632:	68f8      	ldr	r0, [r7, #12]
20009634:	f000 fab4 	bl	20009ba0 <I2C_ITMasterCplt>
20009638:	e000      	b.n	2000963c <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
2000963a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2000963c:	68fb      	ldr	r3, [r7, #12]
2000963e:	2200      	movs	r2, #0
20009640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
20009644:	2300      	movs	r3, #0
}
20009646:	4618      	mov	r0, r3
20009648:	3718      	adds	r7, #24
2000964a:	46bd      	mov	sp, r7
2000964c:	bd80      	pop	{r7, pc}

2000964e <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
2000964e:	b580      	push	{r7, lr}
20009650:	b088      	sub	sp, #32
20009652:	af00      	add	r7, sp, #0
20009654:	60f8      	str	r0, [r7, #12]
20009656:	60b9      	str	r1, [r7, #8]
20009658:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
2000965a:	68fb      	ldr	r3, [r7, #12]
2000965c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000965e:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
20009660:	2300      	movs	r3, #0
20009662:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
20009664:	68fb      	ldr	r3, [r7, #12]
20009666:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2000966a:	2b01      	cmp	r3, #1
2000966c:	d101      	bne.n	20009672 <I2C_Slave_ISR_DMA+0x24>
2000966e:	2302      	movs	r3, #2
20009670:	e0c9      	b.n	20009806 <I2C_Slave_ISR_DMA+0x1b8>
20009672:	68fb      	ldr	r3, [r7, #12]
20009674:	2201      	movs	r2, #1
20009676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
2000967a:	68bb      	ldr	r3, [r7, #8]
2000967c:	095b      	lsrs	r3, r3, #5
2000967e:	f003 0301 	and.w	r3, r3, #1
20009682:	2b00      	cmp	r3, #0
20009684:	d009      	beq.n	2000969a <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
20009686:	687b      	ldr	r3, [r7, #4]
20009688:	095b      	lsrs	r3, r3, #5
2000968a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
2000968e:	2b00      	cmp	r3, #0
20009690:	d003      	beq.n	2000969a <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
20009692:	68b9      	ldr	r1, [r7, #8]
20009694:	68f8      	ldr	r0, [r7, #12]
20009696:	f000 fb4d 	bl	20009d34 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
2000969a:	68bb      	ldr	r3, [r7, #8]
2000969c:	091b      	lsrs	r3, r3, #4
2000969e:	f003 0301 	and.w	r3, r3, #1
200096a2:	2b00      	cmp	r3, #0
200096a4:	f000 809a 	beq.w	200097dc <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
200096a8:	687b      	ldr	r3, [r7, #4]
200096aa:	091b      	lsrs	r3, r3, #4
200096ac:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
200096b0:	2b00      	cmp	r3, #0
200096b2:	f000 8093 	beq.w	200097dc <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
200096b6:	687b      	ldr	r3, [r7, #4]
200096b8:	0b9b      	lsrs	r3, r3, #14
200096ba:	f003 0301 	and.w	r3, r3, #1
200096be:	2b00      	cmp	r3, #0
200096c0:	d105      	bne.n	200096ce <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
200096c2:	687b      	ldr	r3, [r7, #4]
200096c4:	0bdb      	lsrs	r3, r3, #15
200096c6:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
200096ca:	2b00      	cmp	r3, #0
200096cc:	d07f      	beq.n	200097ce <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
200096ce:	68fb      	ldr	r3, [r7, #12]
200096d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200096d2:	2b00      	cmp	r3, #0
200096d4:	d00d      	beq.n	200096f2 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
200096d6:	687b      	ldr	r3, [r7, #4]
200096d8:	0bdb      	lsrs	r3, r3, #15
200096da:	f003 0301 	and.w	r3, r3, #1
200096de:	2b00      	cmp	r3, #0
200096e0:	d007      	beq.n	200096f2 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
200096e2:	68fb      	ldr	r3, [r7, #12]
200096e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200096e6:	681b      	ldr	r3, [r3, #0]
200096e8:	685b      	ldr	r3, [r3, #4]
200096ea:	2b00      	cmp	r3, #0
200096ec:	d101      	bne.n	200096f2 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
200096ee:	2301      	movs	r3, #1
200096f0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
200096f2:	68fb      	ldr	r3, [r7, #12]
200096f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200096f6:	2b00      	cmp	r3, #0
200096f8:	d00d      	beq.n	20009716 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
200096fa:	687b      	ldr	r3, [r7, #4]
200096fc:	0b9b      	lsrs	r3, r3, #14
200096fe:	f003 0301 	and.w	r3, r3, #1
20009702:	2b00      	cmp	r3, #0
20009704:	d007      	beq.n	20009716 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
20009706:	68fb      	ldr	r3, [r7, #12]
20009708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000970a:	681b      	ldr	r3, [r3, #0]
2000970c:	685b      	ldr	r3, [r3, #4]
2000970e:	2b00      	cmp	r3, #0
20009710:	d101      	bne.n	20009716 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
20009712:	2301      	movs	r3, #1
20009714:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
20009716:	69fb      	ldr	r3, [r7, #28]
20009718:	2b01      	cmp	r3, #1
2000971a:	d128      	bne.n	2000976e <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
2000971c:	68fb      	ldr	r3, [r7, #12]
2000971e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20009722:	b2db      	uxtb	r3, r3
20009724:	2b28      	cmp	r3, #40	; 0x28
20009726:	d108      	bne.n	2000973a <I2C_Slave_ISR_DMA+0xec>
20009728:	69bb      	ldr	r3, [r7, #24]
2000972a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2000972e:	d104      	bne.n	2000973a <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
20009730:	68b9      	ldr	r1, [r7, #8]
20009732:	68f8      	ldr	r0, [r7, #12]
20009734:	f000 fc08 	bl	20009f48 <I2C_ITListenCplt>
20009738:	e048      	b.n	200097cc <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
2000973a:	68fb      	ldr	r3, [r7, #12]
2000973c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20009740:	b2db      	uxtb	r3, r3
20009742:	2b29      	cmp	r3, #41	; 0x29
20009744:	d10e      	bne.n	20009764 <I2C_Slave_ISR_DMA+0x116>
20009746:	69bb      	ldr	r3, [r7, #24]
20009748:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2000974c:	d00a      	beq.n	20009764 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2000974e:	68fb      	ldr	r3, [r7, #12]
20009750:	681b      	ldr	r3, [r3, #0]
20009752:	2210      	movs	r2, #16
20009754:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
20009756:	68f8      	ldr	r0, [r7, #12]
20009758:	f000 fd43 	bl	2000a1e2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
2000975c:	68f8      	ldr	r0, [r7, #12]
2000975e:	f000 f9c0 	bl	20009ae2 <I2C_ITSlaveSeqCplt>
20009762:	e033      	b.n	200097cc <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
20009764:	68fb      	ldr	r3, [r7, #12]
20009766:	681b      	ldr	r3, [r3, #0]
20009768:	2210      	movs	r2, #16
2000976a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
2000976c:	e034      	b.n	200097d8 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2000976e:	68fb      	ldr	r3, [r7, #12]
20009770:	681b      	ldr	r3, [r3, #0]
20009772:	2210      	movs	r2, #16
20009774:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
20009776:	68fb      	ldr	r3, [r7, #12]
20009778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000977a:	f043 0204 	orr.w	r2, r3, #4
2000977e:	68fb      	ldr	r3, [r7, #12]
20009780:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
20009782:	68fb      	ldr	r3, [r7, #12]
20009784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20009788:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
2000978a:	69bb      	ldr	r3, [r7, #24]
2000978c:	2b00      	cmp	r3, #0
2000978e:	d003      	beq.n	20009798 <I2C_Slave_ISR_DMA+0x14a>
20009790:	69bb      	ldr	r3, [r7, #24]
20009792:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
20009796:	d11f      	bne.n	200097d8 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
20009798:	7dfb      	ldrb	r3, [r7, #23]
2000979a:	2b21      	cmp	r3, #33	; 0x21
2000979c:	d002      	beq.n	200097a4 <I2C_Slave_ISR_DMA+0x156>
2000979e:	7dfb      	ldrb	r3, [r7, #23]
200097a0:	2b29      	cmp	r3, #41	; 0x29
200097a2:	d103      	bne.n	200097ac <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
200097a4:	68fb      	ldr	r3, [r7, #12]
200097a6:	2221      	movs	r2, #33	; 0x21
200097a8:	631a      	str	r2, [r3, #48]	; 0x30
200097aa:	e008      	b.n	200097be <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
200097ac:	7dfb      	ldrb	r3, [r7, #23]
200097ae:	2b22      	cmp	r3, #34	; 0x22
200097b0:	d002      	beq.n	200097b8 <I2C_Slave_ISR_DMA+0x16a>
200097b2:	7dfb      	ldrb	r3, [r7, #23]
200097b4:	2b2a      	cmp	r3, #42	; 0x2a
200097b6:	d102      	bne.n	200097be <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
200097b8:	68fb      	ldr	r3, [r7, #12]
200097ba:	2222      	movs	r2, #34	; 0x22
200097bc:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
200097be:	68fb      	ldr	r3, [r7, #12]
200097c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
200097c2:	4619      	mov	r1, r3
200097c4:	68f8      	ldr	r0, [r7, #12]
200097c6:	f000 fc15 	bl	20009ff4 <I2C_ITError>
      if (treatdmanack == 1U)
200097ca:	e005      	b.n	200097d8 <I2C_Slave_ISR_DMA+0x18a>
200097cc:	e004      	b.n	200097d8 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
200097ce:	68fb      	ldr	r3, [r7, #12]
200097d0:	681b      	ldr	r3, [r3, #0]
200097d2:	2210      	movs	r2, #16
200097d4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
200097d6:	e011      	b.n	200097fc <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
200097d8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
200097da:	e00f      	b.n	200097fc <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
200097dc:	68bb      	ldr	r3, [r7, #8]
200097de:	08db      	lsrs	r3, r3, #3
200097e0:	f003 0301 	and.w	r3, r3, #1
200097e4:	2b00      	cmp	r3, #0
200097e6:	d009      	beq.n	200097fc <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
200097e8:	687b      	ldr	r3, [r7, #4]
200097ea:	08db      	lsrs	r3, r3, #3
200097ec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
200097f0:	2b00      	cmp	r3, #0
200097f2:	d003      	beq.n	200097fc <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
200097f4:	68b9      	ldr	r1, [r7, #8]
200097f6:	68f8      	ldr	r0, [r7, #12]
200097f8:	f000 f8b2 	bl	20009960 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
200097fc:	68fb      	ldr	r3, [r7, #12]
200097fe:	2200      	movs	r2, #0
20009800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
20009804:	2300      	movs	r3, #0
}
20009806:	4618      	mov	r0, r3
20009808:	3720      	adds	r7, #32
2000980a:	46bd      	mov	sp, r7
2000980c:	bd80      	pop	{r7, pc}
	...

20009810 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
20009810:	b580      	push	{r7, lr}
20009812:	b086      	sub	sp, #24
20009814:	af02      	add	r7, sp, #8
20009816:	60f8      	str	r0, [r7, #12]
20009818:	4608      	mov	r0, r1
2000981a:	4611      	mov	r1, r2
2000981c:	461a      	mov	r2, r3
2000981e:	4603      	mov	r3, r0
20009820:	817b      	strh	r3, [r7, #10]
20009822:	460b      	mov	r3, r1
20009824:	813b      	strh	r3, [r7, #8]
20009826:	4613      	mov	r3, r2
20009828:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
2000982a:	88fb      	ldrh	r3, [r7, #6]
2000982c:	b2da      	uxtb	r2, r3
2000982e:	8979      	ldrh	r1, [r7, #10]
20009830:	4b20      	ldr	r3, [pc, #128]	; (200098b4 <I2C_RequestMemoryWrite+0xa4>)
20009832:	9300      	str	r3, [sp, #0]
20009834:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
20009838:	68f8      	ldr	r0, [r7, #12]
2000983a:	f001 f849 	bl	2000a8d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
2000983e:	69fa      	ldr	r2, [r7, #28]
20009840:	69b9      	ldr	r1, [r7, #24]
20009842:	68f8      	ldr	r0, [r7, #12]
20009844:	f000 fe62 	bl	2000a50c <I2C_WaitOnTXISFlagUntilTimeout>
20009848:	4603      	mov	r3, r0
2000984a:	2b00      	cmp	r3, #0
2000984c:	d001      	beq.n	20009852 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
2000984e:	2301      	movs	r3, #1
20009850:	e02c      	b.n	200098ac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
20009852:	88fb      	ldrh	r3, [r7, #6]
20009854:	2b01      	cmp	r3, #1
20009856:	d105      	bne.n	20009864 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
20009858:	893b      	ldrh	r3, [r7, #8]
2000985a:	b2da      	uxtb	r2, r3
2000985c:	68fb      	ldr	r3, [r7, #12]
2000985e:	681b      	ldr	r3, [r3, #0]
20009860:	629a      	str	r2, [r3, #40]	; 0x28
20009862:	e015      	b.n	20009890 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
20009864:	893b      	ldrh	r3, [r7, #8]
20009866:	0a1b      	lsrs	r3, r3, #8
20009868:	b29b      	uxth	r3, r3
2000986a:	b2da      	uxtb	r2, r3
2000986c:	68fb      	ldr	r3, [r7, #12]
2000986e:	681b      	ldr	r3, [r3, #0]
20009870:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
20009872:	69fa      	ldr	r2, [r7, #28]
20009874:	69b9      	ldr	r1, [r7, #24]
20009876:	68f8      	ldr	r0, [r7, #12]
20009878:	f000 fe48 	bl	2000a50c <I2C_WaitOnTXISFlagUntilTimeout>
2000987c:	4603      	mov	r3, r0
2000987e:	2b00      	cmp	r3, #0
20009880:	d001      	beq.n	20009886 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
20009882:	2301      	movs	r3, #1
20009884:	e012      	b.n	200098ac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
20009886:	893b      	ldrh	r3, [r7, #8]
20009888:	b2da      	uxtb	r2, r3
2000988a:	68fb      	ldr	r3, [r7, #12]
2000988c:	681b      	ldr	r3, [r3, #0]
2000988e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
20009890:	69fb      	ldr	r3, [r7, #28]
20009892:	9300      	str	r3, [sp, #0]
20009894:	69bb      	ldr	r3, [r7, #24]
20009896:	2200      	movs	r2, #0
20009898:	2180      	movs	r1, #128	; 0x80
2000989a:	68f8      	ldr	r0, [r7, #12]
2000989c:	f000 fdf6 	bl	2000a48c <I2C_WaitOnFlagUntilTimeout>
200098a0:	4603      	mov	r3, r0
200098a2:	2b00      	cmp	r3, #0
200098a4:	d001      	beq.n	200098aa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
200098a6:	2301      	movs	r3, #1
200098a8:	e000      	b.n	200098ac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
200098aa:	2300      	movs	r3, #0
}
200098ac:	4618      	mov	r0, r3
200098ae:	3710      	adds	r7, #16
200098b0:	46bd      	mov	sp, r7
200098b2:	bd80      	pop	{r7, pc}
200098b4:	80002000 	.word	0x80002000

200098b8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
200098b8:	b580      	push	{r7, lr}
200098ba:	b086      	sub	sp, #24
200098bc:	af02      	add	r7, sp, #8
200098be:	60f8      	str	r0, [r7, #12]
200098c0:	4608      	mov	r0, r1
200098c2:	4611      	mov	r1, r2
200098c4:	461a      	mov	r2, r3
200098c6:	4603      	mov	r3, r0
200098c8:	817b      	strh	r3, [r7, #10]
200098ca:	460b      	mov	r3, r1
200098cc:	813b      	strh	r3, [r7, #8]
200098ce:	4613      	mov	r3, r2
200098d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
200098d2:	88fb      	ldrh	r3, [r7, #6]
200098d4:	b2da      	uxtb	r2, r3
200098d6:	8979      	ldrh	r1, [r7, #10]
200098d8:	4b20      	ldr	r3, [pc, #128]	; (2000995c <I2C_RequestMemoryRead+0xa4>)
200098da:	9300      	str	r3, [sp, #0]
200098dc:	2300      	movs	r3, #0
200098de:	68f8      	ldr	r0, [r7, #12]
200098e0:	f000 fff6 	bl	2000a8d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
200098e4:	69fa      	ldr	r2, [r7, #28]
200098e6:	69b9      	ldr	r1, [r7, #24]
200098e8:	68f8      	ldr	r0, [r7, #12]
200098ea:	f000 fe0f 	bl	2000a50c <I2C_WaitOnTXISFlagUntilTimeout>
200098ee:	4603      	mov	r3, r0
200098f0:	2b00      	cmp	r3, #0
200098f2:	d001      	beq.n	200098f8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
200098f4:	2301      	movs	r3, #1
200098f6:	e02c      	b.n	20009952 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
200098f8:	88fb      	ldrh	r3, [r7, #6]
200098fa:	2b01      	cmp	r3, #1
200098fc:	d105      	bne.n	2000990a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
200098fe:	893b      	ldrh	r3, [r7, #8]
20009900:	b2da      	uxtb	r2, r3
20009902:	68fb      	ldr	r3, [r7, #12]
20009904:	681b      	ldr	r3, [r3, #0]
20009906:	629a      	str	r2, [r3, #40]	; 0x28
20009908:	e015      	b.n	20009936 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
2000990a:	893b      	ldrh	r3, [r7, #8]
2000990c:	0a1b      	lsrs	r3, r3, #8
2000990e:	b29b      	uxth	r3, r3
20009910:	b2da      	uxtb	r2, r3
20009912:	68fb      	ldr	r3, [r7, #12]
20009914:	681b      	ldr	r3, [r3, #0]
20009916:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
20009918:	69fa      	ldr	r2, [r7, #28]
2000991a:	69b9      	ldr	r1, [r7, #24]
2000991c:	68f8      	ldr	r0, [r7, #12]
2000991e:	f000 fdf5 	bl	2000a50c <I2C_WaitOnTXISFlagUntilTimeout>
20009922:	4603      	mov	r3, r0
20009924:	2b00      	cmp	r3, #0
20009926:	d001      	beq.n	2000992c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
20009928:	2301      	movs	r3, #1
2000992a:	e012      	b.n	20009952 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2000992c:	893b      	ldrh	r3, [r7, #8]
2000992e:	b2da      	uxtb	r2, r3
20009930:	68fb      	ldr	r3, [r7, #12]
20009932:	681b      	ldr	r3, [r3, #0]
20009934:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
20009936:	69fb      	ldr	r3, [r7, #28]
20009938:	9300      	str	r3, [sp, #0]
2000993a:	69bb      	ldr	r3, [r7, #24]
2000993c:	2200      	movs	r2, #0
2000993e:	2140      	movs	r1, #64	; 0x40
20009940:	68f8      	ldr	r0, [r7, #12]
20009942:	f000 fda3 	bl	2000a48c <I2C_WaitOnFlagUntilTimeout>
20009946:	4603      	mov	r3, r0
20009948:	2b00      	cmp	r3, #0
2000994a:	d001      	beq.n	20009950 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
2000994c:	2301      	movs	r3, #1
2000994e:	e000      	b.n	20009952 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
20009950:	2300      	movs	r3, #0
}
20009952:	4618      	mov	r0, r3
20009954:	3710      	adds	r7, #16
20009956:	46bd      	mov	sp, r7
20009958:	bd80      	pop	{r7, pc}
2000995a:	bf00      	nop
2000995c:	80002000 	.word	0x80002000

20009960 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
20009960:	b580      	push	{r7, lr}
20009962:	b084      	sub	sp, #16
20009964:	af00      	add	r7, sp, #0
20009966:	6078      	str	r0, [r7, #4]
20009968:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
2000996a:	687b      	ldr	r3, [r7, #4]
2000996c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20009970:	b2db      	uxtb	r3, r3
20009972:	f003 0328 	and.w	r3, r3, #40	; 0x28
20009976:	2b28      	cmp	r3, #40	; 0x28
20009978:	d16a      	bne.n	20009a50 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
2000997a:	687b      	ldr	r3, [r7, #4]
2000997c:	681b      	ldr	r3, [r3, #0]
2000997e:	699b      	ldr	r3, [r3, #24]
20009980:	0c1b      	lsrs	r3, r3, #16
20009982:	b2db      	uxtb	r3, r3
20009984:	f003 0301 	and.w	r3, r3, #1
20009988:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
2000998a:	687b      	ldr	r3, [r7, #4]
2000998c:	681b      	ldr	r3, [r3, #0]
2000998e:	699b      	ldr	r3, [r3, #24]
20009990:	0c1b      	lsrs	r3, r3, #16
20009992:	b29b      	uxth	r3, r3
20009994:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
20009998:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
2000999a:	687b      	ldr	r3, [r7, #4]
2000999c:	681b      	ldr	r3, [r3, #0]
2000999e:	689b      	ldr	r3, [r3, #8]
200099a0:	b29b      	uxth	r3, r3
200099a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
200099a6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
200099a8:	687b      	ldr	r3, [r7, #4]
200099aa:	681b      	ldr	r3, [r3, #0]
200099ac:	68db      	ldr	r3, [r3, #12]
200099ae:	b29b      	uxth	r3, r3
200099b0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
200099b4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
200099b6:	687b      	ldr	r3, [r7, #4]
200099b8:	68db      	ldr	r3, [r3, #12]
200099ba:	2b02      	cmp	r3, #2
200099bc:	d138      	bne.n	20009a30 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
200099be:	897b      	ldrh	r3, [r7, #10]
200099c0:	09db      	lsrs	r3, r3, #7
200099c2:	b29a      	uxth	r2, r3
200099c4:	89bb      	ldrh	r3, [r7, #12]
200099c6:	4053      	eors	r3, r2
200099c8:	b29b      	uxth	r3, r3
200099ca:	f003 0306 	and.w	r3, r3, #6
200099ce:	2b00      	cmp	r3, #0
200099d0:	d11c      	bne.n	20009a0c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
200099d2:	897b      	ldrh	r3, [r7, #10]
200099d4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
200099d6:	687b      	ldr	r3, [r7, #4]
200099d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200099da:	1c5a      	adds	r2, r3, #1
200099dc:	687b      	ldr	r3, [r7, #4]
200099de:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
200099e0:	687b      	ldr	r3, [r7, #4]
200099e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200099e4:	2b02      	cmp	r3, #2
200099e6:	d13b      	bne.n	20009a60 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
200099e8:	687b      	ldr	r3, [r7, #4]
200099ea:	2200      	movs	r2, #0
200099ec:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
200099ee:	687b      	ldr	r3, [r7, #4]
200099f0:	681b      	ldr	r3, [r3, #0]
200099f2:	2208      	movs	r2, #8
200099f4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
200099f6:	687b      	ldr	r3, [r7, #4]
200099f8:	2200      	movs	r2, #0
200099fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
200099fe:	89ba      	ldrh	r2, [r7, #12]
20009a00:	7bfb      	ldrb	r3, [r7, #15]
20009a02:	4619      	mov	r1, r3
20009a04:	6878      	ldr	r0, [r7, #4]
20009a06:	f7ff fa9c 	bl	20008f42 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
20009a0a:	e029      	b.n	20009a60 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
20009a0c:	893b      	ldrh	r3, [r7, #8]
20009a0e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
20009a10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
20009a14:	6878      	ldr	r0, [r7, #4]
20009a16:	f000 fff1 	bl	2000a9fc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
20009a1a:	687b      	ldr	r3, [r7, #4]
20009a1c:	2200      	movs	r2, #0
20009a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
20009a22:	89ba      	ldrh	r2, [r7, #12]
20009a24:	7bfb      	ldrb	r3, [r7, #15]
20009a26:	4619      	mov	r1, r3
20009a28:	6878      	ldr	r0, [r7, #4]
20009a2a:	f7ff fa8a 	bl	20008f42 <HAL_I2C_AddrCallback>
}
20009a2e:	e017      	b.n	20009a60 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
20009a30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
20009a34:	6878      	ldr	r0, [r7, #4]
20009a36:	f000 ffe1 	bl	2000a9fc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
20009a3a:	687b      	ldr	r3, [r7, #4]
20009a3c:	2200      	movs	r2, #0
20009a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
20009a42:	89ba      	ldrh	r2, [r7, #12]
20009a44:	7bfb      	ldrb	r3, [r7, #15]
20009a46:	4619      	mov	r1, r3
20009a48:	6878      	ldr	r0, [r7, #4]
20009a4a:	f7ff fa7a 	bl	20008f42 <HAL_I2C_AddrCallback>
}
20009a4e:	e007      	b.n	20009a60 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
20009a50:	687b      	ldr	r3, [r7, #4]
20009a52:	681b      	ldr	r3, [r3, #0]
20009a54:	2208      	movs	r2, #8
20009a56:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
20009a58:	687b      	ldr	r3, [r7, #4]
20009a5a:	2200      	movs	r2, #0
20009a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
20009a60:	bf00      	nop
20009a62:	3710      	adds	r7, #16
20009a64:	46bd      	mov	sp, r7
20009a66:	bd80      	pop	{r7, pc}

20009a68 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
20009a68:	b580      	push	{r7, lr}
20009a6a:	b082      	sub	sp, #8
20009a6c:	af00      	add	r7, sp, #0
20009a6e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
20009a70:	687b      	ldr	r3, [r7, #4]
20009a72:	2200      	movs	r2, #0
20009a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
20009a78:	687b      	ldr	r3, [r7, #4]
20009a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20009a7e:	b2db      	uxtb	r3, r3
20009a80:	2b21      	cmp	r3, #33	; 0x21
20009a82:	d115      	bne.n	20009ab0 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
20009a84:	687b      	ldr	r3, [r7, #4]
20009a86:	2220      	movs	r2, #32
20009a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
20009a8c:	687b      	ldr	r3, [r7, #4]
20009a8e:	2211      	movs	r2, #17
20009a90:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
20009a92:	687b      	ldr	r3, [r7, #4]
20009a94:	2200      	movs	r2, #0
20009a96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
20009a98:	2101      	movs	r1, #1
20009a9a:	6878      	ldr	r0, [r7, #4]
20009a9c:	f000 ffae 	bl	2000a9fc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
20009aa0:	687b      	ldr	r3, [r7, #4]
20009aa2:	2200      	movs	r2, #0
20009aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
20009aa8:	6878      	ldr	r0, [r7, #4]
20009aaa:	f7ff fa22 	bl	20008ef2 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
20009aae:	e014      	b.n	20009ada <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
20009ab0:	687b      	ldr	r3, [r7, #4]
20009ab2:	2220      	movs	r2, #32
20009ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
20009ab8:	687b      	ldr	r3, [r7, #4]
20009aba:	2212      	movs	r2, #18
20009abc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
20009abe:	687b      	ldr	r3, [r7, #4]
20009ac0:	2200      	movs	r2, #0
20009ac2:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
20009ac4:	2102      	movs	r1, #2
20009ac6:	6878      	ldr	r0, [r7, #4]
20009ac8:	f000 ff98 	bl	2000a9fc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
20009acc:	687b      	ldr	r3, [r7, #4]
20009ace:	2200      	movs	r2, #0
20009ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
20009ad4:	6878      	ldr	r0, [r7, #4]
20009ad6:	f7ff fa16 	bl	20008f06 <HAL_I2C_MasterRxCpltCallback>
}
20009ada:	bf00      	nop
20009adc:	3708      	adds	r7, #8
20009ade:	46bd      	mov	sp, r7
20009ae0:	bd80      	pop	{r7, pc}

20009ae2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
20009ae2:	b580      	push	{r7, lr}
20009ae4:	b084      	sub	sp, #16
20009ae6:	af00      	add	r7, sp, #0
20009ae8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
20009aea:	687b      	ldr	r3, [r7, #4]
20009aec:	681b      	ldr	r3, [r3, #0]
20009aee:	681b      	ldr	r3, [r3, #0]
20009af0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
20009af2:	687b      	ldr	r3, [r7, #4]
20009af4:	2200      	movs	r2, #0
20009af6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
20009afa:	68fb      	ldr	r3, [r7, #12]
20009afc:	0b9b      	lsrs	r3, r3, #14
20009afe:	f003 0301 	and.w	r3, r3, #1
20009b02:	2b00      	cmp	r3, #0
20009b04:	d008      	beq.n	20009b18 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
20009b06:	687b      	ldr	r3, [r7, #4]
20009b08:	681b      	ldr	r3, [r3, #0]
20009b0a:	681a      	ldr	r2, [r3, #0]
20009b0c:	687b      	ldr	r3, [r7, #4]
20009b0e:	681b      	ldr	r3, [r3, #0]
20009b10:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
20009b14:	601a      	str	r2, [r3, #0]
20009b16:	e00d      	b.n	20009b34 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
20009b18:	68fb      	ldr	r3, [r7, #12]
20009b1a:	0bdb      	lsrs	r3, r3, #15
20009b1c:	f003 0301 	and.w	r3, r3, #1
20009b20:	2b00      	cmp	r3, #0
20009b22:	d007      	beq.n	20009b34 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
20009b24:	687b      	ldr	r3, [r7, #4]
20009b26:	681b      	ldr	r3, [r3, #0]
20009b28:	681a      	ldr	r2, [r3, #0]
20009b2a:	687b      	ldr	r3, [r7, #4]
20009b2c:	681b      	ldr	r3, [r3, #0]
20009b2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
20009b32:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
20009b34:	687b      	ldr	r3, [r7, #4]
20009b36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20009b3a:	b2db      	uxtb	r3, r3
20009b3c:	2b29      	cmp	r3, #41	; 0x29
20009b3e:	d112      	bne.n	20009b66 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
20009b40:	687b      	ldr	r3, [r7, #4]
20009b42:	2228      	movs	r2, #40	; 0x28
20009b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
20009b48:	687b      	ldr	r3, [r7, #4]
20009b4a:	2221      	movs	r2, #33	; 0x21
20009b4c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
20009b4e:	2101      	movs	r1, #1
20009b50:	6878      	ldr	r0, [r7, #4]
20009b52:	f000 ff53 	bl	2000a9fc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
20009b56:	687b      	ldr	r3, [r7, #4]
20009b58:	2200      	movs	r2, #0
20009b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
20009b5e:	6878      	ldr	r0, [r7, #4]
20009b60:	f7ff f9db 	bl	20008f1a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
20009b64:	e017      	b.n	20009b96 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
20009b66:	687b      	ldr	r3, [r7, #4]
20009b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20009b6c:	b2db      	uxtb	r3, r3
20009b6e:	2b2a      	cmp	r3, #42	; 0x2a
20009b70:	d111      	bne.n	20009b96 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
20009b72:	687b      	ldr	r3, [r7, #4]
20009b74:	2228      	movs	r2, #40	; 0x28
20009b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
20009b7a:	687b      	ldr	r3, [r7, #4]
20009b7c:	2222      	movs	r2, #34	; 0x22
20009b7e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
20009b80:	2102      	movs	r1, #2
20009b82:	6878      	ldr	r0, [r7, #4]
20009b84:	f000 ff3a 	bl	2000a9fc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
20009b88:	687b      	ldr	r3, [r7, #4]
20009b8a:	2200      	movs	r2, #0
20009b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
20009b90:	6878      	ldr	r0, [r7, #4]
20009b92:	f7ff f9cc 	bl	20008f2e <HAL_I2C_SlaveRxCpltCallback>
}
20009b96:	bf00      	nop
20009b98:	3710      	adds	r7, #16
20009b9a:	46bd      	mov	sp, r7
20009b9c:	bd80      	pop	{r7, pc}
	...

20009ba0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
20009ba0:	b580      	push	{r7, lr}
20009ba2:	b086      	sub	sp, #24
20009ba4:	af00      	add	r7, sp, #0
20009ba6:	6078      	str	r0, [r7, #4]
20009ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
20009baa:	683b      	ldr	r3, [r7, #0]
20009bac:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
20009bae:	687b      	ldr	r3, [r7, #4]
20009bb0:	681b      	ldr	r3, [r3, #0]
20009bb2:	2220      	movs	r2, #32
20009bb4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
20009bb6:	687b      	ldr	r3, [r7, #4]
20009bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20009bbc:	b2db      	uxtb	r3, r3
20009bbe:	2b21      	cmp	r3, #33	; 0x21
20009bc0:	d107      	bne.n	20009bd2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
20009bc2:	2101      	movs	r1, #1
20009bc4:	6878      	ldr	r0, [r7, #4]
20009bc6:	f000 ff19 	bl	2000a9fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
20009bca:	687b      	ldr	r3, [r7, #4]
20009bcc:	2211      	movs	r2, #17
20009bce:	631a      	str	r2, [r3, #48]	; 0x30
20009bd0:	e00c      	b.n	20009bec <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
20009bd2:	687b      	ldr	r3, [r7, #4]
20009bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20009bd8:	b2db      	uxtb	r3, r3
20009bda:	2b22      	cmp	r3, #34	; 0x22
20009bdc:	d106      	bne.n	20009bec <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
20009bde:	2102      	movs	r1, #2
20009be0:	6878      	ldr	r0, [r7, #4]
20009be2:	f000 ff0b 	bl	2000a9fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
20009be6:	687b      	ldr	r3, [r7, #4]
20009be8:	2212      	movs	r2, #18
20009bea:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
20009bec:	687b      	ldr	r3, [r7, #4]
20009bee:	681b      	ldr	r3, [r3, #0]
20009bf0:	6859      	ldr	r1, [r3, #4]
20009bf2:	687b      	ldr	r3, [r7, #4]
20009bf4:	681a      	ldr	r2, [r3, #0]
20009bf6:	4b4d      	ldr	r3, [pc, #308]	; (20009d2c <I2C_ITMasterCplt+0x18c>)
20009bf8:	400b      	ands	r3, r1
20009bfa:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
20009bfc:	687b      	ldr	r3, [r7, #4]
20009bfe:	2200      	movs	r2, #0
20009c00:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
20009c02:	687b      	ldr	r3, [r7, #4]
20009c04:	4a4a      	ldr	r2, [pc, #296]	; (20009d30 <I2C_ITMasterCplt+0x190>)
20009c06:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
20009c08:	697b      	ldr	r3, [r7, #20]
20009c0a:	091b      	lsrs	r3, r3, #4
20009c0c:	f003 0301 	and.w	r3, r3, #1
20009c10:	2b00      	cmp	r3, #0
20009c12:	d009      	beq.n	20009c28 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
20009c14:	687b      	ldr	r3, [r7, #4]
20009c16:	681b      	ldr	r3, [r3, #0]
20009c18:	2210      	movs	r2, #16
20009c1a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
20009c1c:	687b      	ldr	r3, [r7, #4]
20009c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20009c20:	f043 0204 	orr.w	r2, r3, #4
20009c24:	687b      	ldr	r3, [r7, #4]
20009c26:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
20009c28:	687b      	ldr	r3, [r7, #4]
20009c2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20009c2e:	b2db      	uxtb	r3, r3
20009c30:	2b60      	cmp	r3, #96	; 0x60
20009c32:	d10b      	bne.n	20009c4c <I2C_ITMasterCplt+0xac>
20009c34:	697b      	ldr	r3, [r7, #20]
20009c36:	089b      	lsrs	r3, r3, #2
20009c38:	f003 0301 	and.w	r3, r3, #1
20009c3c:	2b00      	cmp	r3, #0
20009c3e:	d005      	beq.n	20009c4c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
20009c40:	687b      	ldr	r3, [r7, #4]
20009c42:	681b      	ldr	r3, [r3, #0]
20009c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20009c46:	b2db      	uxtb	r3, r3
20009c48:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
20009c4a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
20009c4c:	6878      	ldr	r0, [r7, #4]
20009c4e:	f000 fac8 	bl	2000a1e2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
20009c52:	687b      	ldr	r3, [r7, #4]
20009c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20009c56:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
20009c58:	687b      	ldr	r3, [r7, #4]
20009c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20009c5e:	b2db      	uxtb	r3, r3
20009c60:	2b60      	cmp	r3, #96	; 0x60
20009c62:	d002      	beq.n	20009c6a <I2C_ITMasterCplt+0xca>
20009c64:	693b      	ldr	r3, [r7, #16]
20009c66:	2b00      	cmp	r3, #0
20009c68:	d006      	beq.n	20009c78 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
20009c6a:	687b      	ldr	r3, [r7, #4]
20009c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20009c6e:	4619      	mov	r1, r3
20009c70:	6878      	ldr	r0, [r7, #4]
20009c72:	f000 f9bf 	bl	20009ff4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
20009c76:	e054      	b.n	20009d22 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
20009c78:	687b      	ldr	r3, [r7, #4]
20009c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20009c7e:	b2db      	uxtb	r3, r3
20009c80:	2b21      	cmp	r3, #33	; 0x21
20009c82:	d124      	bne.n	20009cce <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
20009c84:	687b      	ldr	r3, [r7, #4]
20009c86:	2220      	movs	r2, #32
20009c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
20009c8c:	687b      	ldr	r3, [r7, #4]
20009c8e:	2200      	movs	r2, #0
20009c90:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
20009c92:	687b      	ldr	r3, [r7, #4]
20009c94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
20009c98:	b2db      	uxtb	r3, r3
20009c9a:	2b40      	cmp	r3, #64	; 0x40
20009c9c:	d10b      	bne.n	20009cb6 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
20009c9e:	687b      	ldr	r3, [r7, #4]
20009ca0:	2200      	movs	r2, #0
20009ca2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
20009ca6:	687b      	ldr	r3, [r7, #4]
20009ca8:	2200      	movs	r2, #0
20009caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
20009cae:	6878      	ldr	r0, [r7, #4]
20009cb0:	f7ff f95f 	bl	20008f72 <HAL_I2C_MemTxCpltCallback>
}
20009cb4:	e035      	b.n	20009d22 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
20009cb6:	687b      	ldr	r3, [r7, #4]
20009cb8:	2200      	movs	r2, #0
20009cba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
20009cbe:	687b      	ldr	r3, [r7, #4]
20009cc0:	2200      	movs	r2, #0
20009cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
20009cc6:	6878      	ldr	r0, [r7, #4]
20009cc8:	f7ff f913 	bl	20008ef2 <HAL_I2C_MasterTxCpltCallback>
}
20009ccc:	e029      	b.n	20009d22 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
20009cce:	687b      	ldr	r3, [r7, #4]
20009cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20009cd4:	b2db      	uxtb	r3, r3
20009cd6:	2b22      	cmp	r3, #34	; 0x22
20009cd8:	d123      	bne.n	20009d22 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
20009cda:	687b      	ldr	r3, [r7, #4]
20009cdc:	2220      	movs	r2, #32
20009cde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
20009ce2:	687b      	ldr	r3, [r7, #4]
20009ce4:	2200      	movs	r2, #0
20009ce6:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
20009ce8:	687b      	ldr	r3, [r7, #4]
20009cea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
20009cee:	b2db      	uxtb	r3, r3
20009cf0:	2b40      	cmp	r3, #64	; 0x40
20009cf2:	d10b      	bne.n	20009d0c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
20009cf4:	687b      	ldr	r3, [r7, #4]
20009cf6:	2200      	movs	r2, #0
20009cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
20009cfc:	687b      	ldr	r3, [r7, #4]
20009cfe:	2200      	movs	r2, #0
20009d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
20009d04:	6878      	ldr	r0, [r7, #4]
20009d06:	f7ff f93e 	bl	20008f86 <HAL_I2C_MemRxCpltCallback>
}
20009d0a:	e00a      	b.n	20009d22 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
20009d0c:	687b      	ldr	r3, [r7, #4]
20009d0e:	2200      	movs	r2, #0
20009d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
20009d14:	687b      	ldr	r3, [r7, #4]
20009d16:	2200      	movs	r2, #0
20009d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
20009d1c:	6878      	ldr	r0, [r7, #4]
20009d1e:	f7ff f8f2 	bl	20008f06 <HAL_I2C_MasterRxCpltCallback>
}
20009d22:	bf00      	nop
20009d24:	3718      	adds	r7, #24
20009d26:	46bd      	mov	sp, r7
20009d28:	bd80      	pop	{r7, pc}
20009d2a:	bf00      	nop
20009d2c:	fe00e800 	.word	0xfe00e800
20009d30:	ffff0000 	.word	0xffff0000

20009d34 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
20009d34:	b580      	push	{r7, lr}
20009d36:	b086      	sub	sp, #24
20009d38:	af00      	add	r7, sp, #0
20009d3a:	6078      	str	r0, [r7, #4]
20009d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
20009d3e:	687b      	ldr	r3, [r7, #4]
20009d40:	681b      	ldr	r3, [r3, #0]
20009d42:	681b      	ldr	r3, [r3, #0]
20009d44:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
20009d46:	683b      	ldr	r3, [r7, #0]
20009d48:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
20009d4a:	687b      	ldr	r3, [r7, #4]
20009d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20009d50:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
20009d52:	687b      	ldr	r3, [r7, #4]
20009d54:	681b      	ldr	r3, [r3, #0]
20009d56:	2220      	movs	r2, #32
20009d58:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
20009d5a:	7bfb      	ldrb	r3, [r7, #15]
20009d5c:	2b21      	cmp	r3, #33	; 0x21
20009d5e:	d002      	beq.n	20009d66 <I2C_ITSlaveCplt+0x32>
20009d60:	7bfb      	ldrb	r3, [r7, #15]
20009d62:	2b29      	cmp	r3, #41	; 0x29
20009d64:	d108      	bne.n	20009d78 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
20009d66:	f248 0101 	movw	r1, #32769	; 0x8001
20009d6a:	6878      	ldr	r0, [r7, #4]
20009d6c:	f000 fe46 	bl	2000a9fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
20009d70:	687b      	ldr	r3, [r7, #4]
20009d72:	2221      	movs	r2, #33	; 0x21
20009d74:	631a      	str	r2, [r3, #48]	; 0x30
20009d76:	e00d      	b.n	20009d94 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
20009d78:	7bfb      	ldrb	r3, [r7, #15]
20009d7a:	2b22      	cmp	r3, #34	; 0x22
20009d7c:	d002      	beq.n	20009d84 <I2C_ITSlaveCplt+0x50>
20009d7e:	7bfb      	ldrb	r3, [r7, #15]
20009d80:	2b2a      	cmp	r3, #42	; 0x2a
20009d82:	d107      	bne.n	20009d94 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
20009d84:	f248 0102 	movw	r1, #32770	; 0x8002
20009d88:	6878      	ldr	r0, [r7, #4]
20009d8a:	f000 fe37 	bl	2000a9fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
20009d8e:	687b      	ldr	r3, [r7, #4]
20009d90:	2222      	movs	r2, #34	; 0x22
20009d92:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
20009d94:	687b      	ldr	r3, [r7, #4]
20009d96:	681b      	ldr	r3, [r3, #0]
20009d98:	685a      	ldr	r2, [r3, #4]
20009d9a:	687b      	ldr	r3, [r7, #4]
20009d9c:	681b      	ldr	r3, [r3, #0]
20009d9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
20009da2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
20009da4:	687b      	ldr	r3, [r7, #4]
20009da6:	681b      	ldr	r3, [r3, #0]
20009da8:	6859      	ldr	r1, [r3, #4]
20009daa:	687b      	ldr	r3, [r7, #4]
20009dac:	681a      	ldr	r2, [r3, #0]
20009dae:	4b64      	ldr	r3, [pc, #400]	; (20009f40 <I2C_ITSlaveCplt+0x20c>)
20009db0:	400b      	ands	r3, r1
20009db2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
20009db4:	6878      	ldr	r0, [r7, #4]
20009db6:	f000 fa14 	bl	2000a1e2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
20009dba:	693b      	ldr	r3, [r7, #16]
20009dbc:	0b9b      	lsrs	r3, r3, #14
20009dbe:	f003 0301 	and.w	r3, r3, #1
20009dc2:	2b00      	cmp	r3, #0
20009dc4:	d013      	beq.n	20009dee <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
20009dc6:	687b      	ldr	r3, [r7, #4]
20009dc8:	681b      	ldr	r3, [r3, #0]
20009dca:	681a      	ldr	r2, [r3, #0]
20009dcc:	687b      	ldr	r3, [r7, #4]
20009dce:	681b      	ldr	r3, [r3, #0]
20009dd0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
20009dd4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
20009dd6:	687b      	ldr	r3, [r7, #4]
20009dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20009dda:	2b00      	cmp	r3, #0
20009ddc:	d020      	beq.n	20009e20 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
20009dde:	687b      	ldr	r3, [r7, #4]
20009de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20009de2:	681b      	ldr	r3, [r3, #0]
20009de4:	685b      	ldr	r3, [r3, #4]
20009de6:	b29a      	uxth	r2, r3
20009de8:	687b      	ldr	r3, [r7, #4]
20009dea:	855a      	strh	r2, [r3, #42]	; 0x2a
20009dec:	e018      	b.n	20009e20 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
20009dee:	693b      	ldr	r3, [r7, #16]
20009df0:	0bdb      	lsrs	r3, r3, #15
20009df2:	f003 0301 	and.w	r3, r3, #1
20009df6:	2b00      	cmp	r3, #0
20009df8:	d012      	beq.n	20009e20 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
20009dfa:	687b      	ldr	r3, [r7, #4]
20009dfc:	681b      	ldr	r3, [r3, #0]
20009dfe:	681a      	ldr	r2, [r3, #0]
20009e00:	687b      	ldr	r3, [r7, #4]
20009e02:	681b      	ldr	r3, [r3, #0]
20009e04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
20009e08:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
20009e0a:	687b      	ldr	r3, [r7, #4]
20009e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20009e0e:	2b00      	cmp	r3, #0
20009e10:	d006      	beq.n	20009e20 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
20009e12:	687b      	ldr	r3, [r7, #4]
20009e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20009e16:	681b      	ldr	r3, [r3, #0]
20009e18:	685b      	ldr	r3, [r3, #4]
20009e1a:	b29a      	uxth	r2, r3
20009e1c:	687b      	ldr	r3, [r7, #4]
20009e1e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
20009e20:	697b      	ldr	r3, [r7, #20]
20009e22:	089b      	lsrs	r3, r3, #2
20009e24:	f003 0301 	and.w	r3, r3, #1
20009e28:	2b00      	cmp	r3, #0
20009e2a:	d020      	beq.n	20009e6e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
20009e2c:	697b      	ldr	r3, [r7, #20]
20009e2e:	f023 0304 	bic.w	r3, r3, #4
20009e32:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
20009e34:	687b      	ldr	r3, [r7, #4]
20009e36:	681b      	ldr	r3, [r3, #0]
20009e38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
20009e3a:	687b      	ldr	r3, [r7, #4]
20009e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20009e3e:	b2d2      	uxtb	r2, r2
20009e40:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
20009e42:	687b      	ldr	r3, [r7, #4]
20009e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20009e46:	1c5a      	adds	r2, r3, #1
20009e48:	687b      	ldr	r3, [r7, #4]
20009e4a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
20009e4c:	687b      	ldr	r3, [r7, #4]
20009e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20009e50:	2b00      	cmp	r3, #0
20009e52:	d00c      	beq.n	20009e6e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
20009e54:	687b      	ldr	r3, [r7, #4]
20009e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20009e58:	3b01      	subs	r3, #1
20009e5a:	b29a      	uxth	r2, r3
20009e5c:	687b      	ldr	r3, [r7, #4]
20009e5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
20009e60:	687b      	ldr	r3, [r7, #4]
20009e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20009e64:	b29b      	uxth	r3, r3
20009e66:	3b01      	subs	r3, #1
20009e68:	b29a      	uxth	r2, r3
20009e6a:	687b      	ldr	r3, [r7, #4]
20009e6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
20009e6e:	687b      	ldr	r3, [r7, #4]
20009e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20009e72:	b29b      	uxth	r3, r3
20009e74:	2b00      	cmp	r3, #0
20009e76:	d005      	beq.n	20009e84 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
20009e78:	687b      	ldr	r3, [r7, #4]
20009e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20009e7c:	f043 0204 	orr.w	r2, r3, #4
20009e80:	687b      	ldr	r3, [r7, #4]
20009e82:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
20009e84:	687b      	ldr	r3, [r7, #4]
20009e86:	2200      	movs	r2, #0
20009e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
20009e8c:	687b      	ldr	r3, [r7, #4]
20009e8e:	2200      	movs	r2, #0
20009e90:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
20009e92:	687b      	ldr	r3, [r7, #4]
20009e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20009e96:	2b00      	cmp	r3, #0
20009e98:	d010      	beq.n	20009ebc <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
20009e9a:	687b      	ldr	r3, [r7, #4]
20009e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20009e9e:	4619      	mov	r1, r3
20009ea0:	6878      	ldr	r0, [r7, #4]
20009ea2:	f000 f8a7 	bl	20009ff4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
20009ea6:	687b      	ldr	r3, [r7, #4]
20009ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20009eac:	b2db      	uxtb	r3, r3
20009eae:	2b28      	cmp	r3, #40	; 0x28
20009eb0:	d141      	bne.n	20009f36 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
20009eb2:	6979      	ldr	r1, [r7, #20]
20009eb4:	6878      	ldr	r0, [r7, #4]
20009eb6:	f000 f847 	bl	20009f48 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
20009eba:	e03c      	b.n	20009f36 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
20009ebc:	687b      	ldr	r3, [r7, #4]
20009ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20009ec0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
20009ec4:	d014      	beq.n	20009ef0 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
20009ec6:	6878      	ldr	r0, [r7, #4]
20009ec8:	f7ff fe0b 	bl	20009ae2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
20009ecc:	687b      	ldr	r3, [r7, #4]
20009ece:	4a1d      	ldr	r2, [pc, #116]	; (20009f44 <I2C_ITSlaveCplt+0x210>)
20009ed0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
20009ed2:	687b      	ldr	r3, [r7, #4]
20009ed4:	2220      	movs	r2, #32
20009ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
20009eda:	687b      	ldr	r3, [r7, #4]
20009edc:	2200      	movs	r2, #0
20009ede:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
20009ee0:	687b      	ldr	r3, [r7, #4]
20009ee2:	2200      	movs	r2, #0
20009ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
20009ee8:	6878      	ldr	r0, [r7, #4]
20009eea:	f7ff f838 	bl	20008f5e <HAL_I2C_ListenCpltCallback>
}
20009eee:	e022      	b.n	20009f36 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
20009ef0:	687b      	ldr	r3, [r7, #4]
20009ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
20009ef6:	b2db      	uxtb	r3, r3
20009ef8:	2b22      	cmp	r3, #34	; 0x22
20009efa:	d10e      	bne.n	20009f1a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
20009efc:	687b      	ldr	r3, [r7, #4]
20009efe:	2220      	movs	r2, #32
20009f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
20009f04:	687b      	ldr	r3, [r7, #4]
20009f06:	2200      	movs	r2, #0
20009f08:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
20009f0a:	687b      	ldr	r3, [r7, #4]
20009f0c:	2200      	movs	r2, #0
20009f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
20009f12:	6878      	ldr	r0, [r7, #4]
20009f14:	f7ff f80b 	bl	20008f2e <HAL_I2C_SlaveRxCpltCallback>
}
20009f18:	e00d      	b.n	20009f36 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
20009f1a:	687b      	ldr	r3, [r7, #4]
20009f1c:	2220      	movs	r2, #32
20009f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
20009f22:	687b      	ldr	r3, [r7, #4]
20009f24:	2200      	movs	r2, #0
20009f26:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
20009f28:	687b      	ldr	r3, [r7, #4]
20009f2a:	2200      	movs	r2, #0
20009f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
20009f30:	6878      	ldr	r0, [r7, #4]
20009f32:	f7fe fff2 	bl	20008f1a <HAL_I2C_SlaveTxCpltCallback>
}
20009f36:	bf00      	nop
20009f38:	3718      	adds	r7, #24
20009f3a:	46bd      	mov	sp, r7
20009f3c:	bd80      	pop	{r7, pc}
20009f3e:	bf00      	nop
20009f40:	fe00e800 	.word	0xfe00e800
20009f44:	ffff0000 	.word	0xffff0000

20009f48 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
20009f48:	b580      	push	{r7, lr}
20009f4a:	b082      	sub	sp, #8
20009f4c:	af00      	add	r7, sp, #0
20009f4e:	6078      	str	r0, [r7, #4]
20009f50:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
20009f52:	687b      	ldr	r3, [r7, #4]
20009f54:	4a26      	ldr	r2, [pc, #152]	; (20009ff0 <I2C_ITListenCplt+0xa8>)
20009f56:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
20009f58:	687b      	ldr	r3, [r7, #4]
20009f5a:	2200      	movs	r2, #0
20009f5c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
20009f5e:	687b      	ldr	r3, [r7, #4]
20009f60:	2220      	movs	r2, #32
20009f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
20009f66:	687b      	ldr	r3, [r7, #4]
20009f68:	2200      	movs	r2, #0
20009f6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
20009f6e:	687b      	ldr	r3, [r7, #4]
20009f70:	2200      	movs	r2, #0
20009f72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
20009f74:	683b      	ldr	r3, [r7, #0]
20009f76:	089b      	lsrs	r3, r3, #2
20009f78:	f003 0301 	and.w	r3, r3, #1
20009f7c:	2b00      	cmp	r3, #0
20009f7e:	d022      	beq.n	20009fc6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
20009f80:	687b      	ldr	r3, [r7, #4]
20009f82:	681b      	ldr	r3, [r3, #0]
20009f84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
20009f86:	687b      	ldr	r3, [r7, #4]
20009f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20009f8a:	b2d2      	uxtb	r2, r2
20009f8c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
20009f8e:	687b      	ldr	r3, [r7, #4]
20009f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20009f92:	1c5a      	adds	r2, r3, #1
20009f94:	687b      	ldr	r3, [r7, #4]
20009f96:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
20009f98:	687b      	ldr	r3, [r7, #4]
20009f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20009f9c:	2b00      	cmp	r3, #0
20009f9e:	d012      	beq.n	20009fc6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
20009fa0:	687b      	ldr	r3, [r7, #4]
20009fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20009fa4:	3b01      	subs	r3, #1
20009fa6:	b29a      	uxth	r2, r3
20009fa8:	687b      	ldr	r3, [r7, #4]
20009faa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
20009fac:	687b      	ldr	r3, [r7, #4]
20009fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
20009fb0:	b29b      	uxth	r3, r3
20009fb2:	3b01      	subs	r3, #1
20009fb4:	b29a      	uxth	r2, r3
20009fb6:	687b      	ldr	r3, [r7, #4]
20009fb8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
20009fba:	687b      	ldr	r3, [r7, #4]
20009fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20009fbe:	f043 0204 	orr.w	r2, r3, #4
20009fc2:	687b      	ldr	r3, [r7, #4]
20009fc4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
20009fc6:	f248 0103 	movw	r1, #32771	; 0x8003
20009fca:	6878      	ldr	r0, [r7, #4]
20009fcc:	f000 fd16 	bl	2000a9fc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
20009fd0:	687b      	ldr	r3, [r7, #4]
20009fd2:	681b      	ldr	r3, [r3, #0]
20009fd4:	2210      	movs	r2, #16
20009fd6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
20009fd8:	687b      	ldr	r3, [r7, #4]
20009fda:	2200      	movs	r2, #0
20009fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
20009fe0:	6878      	ldr	r0, [r7, #4]
20009fe2:	f7fe ffbc 	bl	20008f5e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
20009fe6:	bf00      	nop
20009fe8:	3708      	adds	r7, #8
20009fea:	46bd      	mov	sp, r7
20009fec:	bd80      	pop	{r7, pc}
20009fee:	bf00      	nop
20009ff0:	ffff0000 	.word	0xffff0000

20009ff4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
20009ff4:	b580      	push	{r7, lr}
20009ff6:	b084      	sub	sp, #16
20009ff8:	af00      	add	r7, sp, #0
20009ffa:	6078      	str	r0, [r7, #4]
20009ffc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
20009ffe:	687b      	ldr	r3, [r7, #4]
2000a000:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000a004:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
2000a006:	687b      	ldr	r3, [r7, #4]
2000a008:	2200      	movs	r2, #0
2000a00a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
2000a00e:	687b      	ldr	r3, [r7, #4]
2000a010:	4a5d      	ldr	r2, [pc, #372]	; (2000a188 <I2C_ITError+0x194>)
2000a012:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
2000a014:	687b      	ldr	r3, [r7, #4]
2000a016:	2200      	movs	r2, #0
2000a018:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
2000a01a:	687b      	ldr	r3, [r7, #4]
2000a01c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
2000a01e:	683b      	ldr	r3, [r7, #0]
2000a020:	431a      	orrs	r2, r3
2000a022:	687b      	ldr	r3, [r7, #4]
2000a024:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
2000a026:	7bfb      	ldrb	r3, [r7, #15]
2000a028:	2b28      	cmp	r3, #40	; 0x28
2000a02a:	d005      	beq.n	2000a038 <I2C_ITError+0x44>
2000a02c:	7bfb      	ldrb	r3, [r7, #15]
2000a02e:	2b29      	cmp	r3, #41	; 0x29
2000a030:	d002      	beq.n	2000a038 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
2000a032:	7bfb      	ldrb	r3, [r7, #15]
2000a034:	2b2a      	cmp	r3, #42	; 0x2a
2000a036:	d10b      	bne.n	2000a050 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
2000a038:	2103      	movs	r1, #3
2000a03a:	6878      	ldr	r0, [r7, #4]
2000a03c:	f000 fcde 	bl	2000a9fc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
2000a040:	687b      	ldr	r3, [r7, #4]
2000a042:	2228      	movs	r2, #40	; 0x28
2000a044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
2000a048:	687b      	ldr	r3, [r7, #4]
2000a04a:	4a50      	ldr	r2, [pc, #320]	; (2000a18c <I2C_ITError+0x198>)
2000a04c:	635a      	str	r2, [r3, #52]	; 0x34
2000a04e:	e011      	b.n	2000a074 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
2000a050:	f248 0103 	movw	r1, #32771	; 0x8003
2000a054:	6878      	ldr	r0, [r7, #4]
2000a056:	f000 fcd1 	bl	2000a9fc <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
2000a05a:	687b      	ldr	r3, [r7, #4]
2000a05c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000a060:	b2db      	uxtb	r3, r3
2000a062:	2b60      	cmp	r3, #96	; 0x60
2000a064:	d003      	beq.n	2000a06e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
2000a066:	687b      	ldr	r3, [r7, #4]
2000a068:	2220      	movs	r2, #32
2000a06a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
2000a06e:	687b      	ldr	r3, [r7, #4]
2000a070:	2200      	movs	r2, #0
2000a072:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
2000a074:	687b      	ldr	r3, [r7, #4]
2000a076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000a078:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
2000a07a:	687b      	ldr	r3, [r7, #4]
2000a07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000a07e:	2b00      	cmp	r3, #0
2000a080:	d039      	beq.n	2000a0f6 <I2C_ITError+0x102>
2000a082:	68bb      	ldr	r3, [r7, #8]
2000a084:	2b11      	cmp	r3, #17
2000a086:	d002      	beq.n	2000a08e <I2C_ITError+0x9a>
2000a088:	68bb      	ldr	r3, [r7, #8]
2000a08a:	2b21      	cmp	r3, #33	; 0x21
2000a08c:	d133      	bne.n	2000a0f6 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
2000a08e:	687b      	ldr	r3, [r7, #4]
2000a090:	681b      	ldr	r3, [r3, #0]
2000a092:	681b      	ldr	r3, [r3, #0]
2000a094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2000a098:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2000a09c:	d107      	bne.n	2000a0ae <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2000a09e:	687b      	ldr	r3, [r7, #4]
2000a0a0:	681b      	ldr	r3, [r3, #0]
2000a0a2:	681a      	ldr	r2, [r3, #0]
2000a0a4:	687b      	ldr	r3, [r7, #4]
2000a0a6:	681b      	ldr	r3, [r3, #0]
2000a0a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2000a0ac:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
2000a0ae:	687b      	ldr	r3, [r7, #4]
2000a0b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000a0b2:	4618      	mov	r0, r3
2000a0b4:	f7f9 f882 	bl	200031bc <HAL_DMA_GetState>
2000a0b8:	4603      	mov	r3, r0
2000a0ba:	2b01      	cmp	r3, #1
2000a0bc:	d017      	beq.n	2000a0ee <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
2000a0be:	687b      	ldr	r3, [r7, #4]
2000a0c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000a0c2:	4a33      	ldr	r2, [pc, #204]	; (2000a190 <I2C_ITError+0x19c>)
2000a0c4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2000a0c6:	687b      	ldr	r3, [r7, #4]
2000a0c8:	2200      	movs	r2, #0
2000a0ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
2000a0ce:	687b      	ldr	r3, [r7, #4]
2000a0d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000a0d2:	4618      	mov	r0, r3
2000a0d4:	f7f8 fd29 	bl	20002b2a <HAL_DMA_Abort_IT>
2000a0d8:	4603      	mov	r3, r0
2000a0da:	2b00      	cmp	r3, #0
2000a0dc:	d04d      	beq.n	2000a17a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
2000a0de:	687b      	ldr	r3, [r7, #4]
2000a0e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000a0e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2000a0e4:	687a      	ldr	r2, [r7, #4]
2000a0e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
2000a0e8:	4610      	mov	r0, r2
2000a0ea:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
2000a0ec:	e045      	b.n	2000a17a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
2000a0ee:	6878      	ldr	r0, [r7, #4]
2000a0f0:	f000 f850 	bl	2000a194 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
2000a0f4:	e041      	b.n	2000a17a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
2000a0f6:	687b      	ldr	r3, [r7, #4]
2000a0f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000a0fa:	2b00      	cmp	r3, #0
2000a0fc:	d039      	beq.n	2000a172 <I2C_ITError+0x17e>
2000a0fe:	68bb      	ldr	r3, [r7, #8]
2000a100:	2b12      	cmp	r3, #18
2000a102:	d002      	beq.n	2000a10a <I2C_ITError+0x116>
2000a104:	68bb      	ldr	r3, [r7, #8]
2000a106:	2b22      	cmp	r3, #34	; 0x22
2000a108:	d133      	bne.n	2000a172 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
2000a10a:	687b      	ldr	r3, [r7, #4]
2000a10c:	681b      	ldr	r3, [r3, #0]
2000a10e:	681b      	ldr	r3, [r3, #0]
2000a110:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2000a114:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2000a118:	d107      	bne.n	2000a12a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2000a11a:	687b      	ldr	r3, [r7, #4]
2000a11c:	681b      	ldr	r3, [r3, #0]
2000a11e:	681a      	ldr	r2, [r3, #0]
2000a120:	687b      	ldr	r3, [r7, #4]
2000a122:	681b      	ldr	r3, [r3, #0]
2000a124:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2000a128:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
2000a12a:	687b      	ldr	r3, [r7, #4]
2000a12c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000a12e:	4618      	mov	r0, r3
2000a130:	f7f9 f844 	bl	200031bc <HAL_DMA_GetState>
2000a134:	4603      	mov	r3, r0
2000a136:	2b01      	cmp	r3, #1
2000a138:	d017      	beq.n	2000a16a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
2000a13a:	687b      	ldr	r3, [r7, #4]
2000a13c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000a13e:	4a14      	ldr	r2, [pc, #80]	; (2000a190 <I2C_ITError+0x19c>)
2000a140:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2000a142:	687b      	ldr	r3, [r7, #4]
2000a144:	2200      	movs	r2, #0
2000a146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
2000a14a:	687b      	ldr	r3, [r7, #4]
2000a14c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000a14e:	4618      	mov	r0, r3
2000a150:	f7f8 fceb 	bl	20002b2a <HAL_DMA_Abort_IT>
2000a154:	4603      	mov	r3, r0
2000a156:	2b00      	cmp	r3, #0
2000a158:	d011      	beq.n	2000a17e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
2000a15a:	687b      	ldr	r3, [r7, #4]
2000a15c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000a15e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2000a160:	687a      	ldr	r2, [r7, #4]
2000a162:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
2000a164:	4610      	mov	r0, r2
2000a166:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
2000a168:	e009      	b.n	2000a17e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
2000a16a:	6878      	ldr	r0, [r7, #4]
2000a16c:	f000 f812 	bl	2000a194 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
2000a170:	e005      	b.n	2000a17e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
2000a172:	6878      	ldr	r0, [r7, #4]
2000a174:	f000 f80e 	bl	2000a194 <I2C_TreatErrorCallback>
  }
}
2000a178:	e002      	b.n	2000a180 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
2000a17a:	bf00      	nop
2000a17c:	e000      	b.n	2000a180 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
2000a17e:	bf00      	nop
}
2000a180:	bf00      	nop
2000a182:	3710      	adds	r7, #16
2000a184:	46bd      	mov	sp, r7
2000a186:	bd80      	pop	{r7, pc}
2000a188:	ffff0000 	.word	0xffff0000
2000a18c:	20009263 	.word	0x20009263
2000a190:	2000a451 	.word	0x2000a451

2000a194 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
2000a194:	b580      	push	{r7, lr}
2000a196:	b082      	sub	sp, #8
2000a198:	af00      	add	r7, sp, #0
2000a19a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
2000a19c:	687b      	ldr	r3, [r7, #4]
2000a19e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000a1a2:	b2db      	uxtb	r3, r3
2000a1a4:	2b60      	cmp	r3, #96	; 0x60
2000a1a6:	d10e      	bne.n	2000a1c6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
2000a1a8:	687b      	ldr	r3, [r7, #4]
2000a1aa:	2220      	movs	r2, #32
2000a1ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2000a1b0:	687b      	ldr	r3, [r7, #4]
2000a1b2:	2200      	movs	r2, #0
2000a1b4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2000a1b6:	687b      	ldr	r3, [r7, #4]
2000a1b8:	2200      	movs	r2, #0
2000a1ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
2000a1be:	6878      	ldr	r0, [r7, #4]
2000a1c0:	f7fe fef5 	bl	20008fae <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
2000a1c4:	e009      	b.n	2000a1da <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
2000a1c6:	687b      	ldr	r3, [r7, #4]
2000a1c8:	2200      	movs	r2, #0
2000a1ca:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
2000a1cc:	687b      	ldr	r3, [r7, #4]
2000a1ce:	2200      	movs	r2, #0
2000a1d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
2000a1d4:	6878      	ldr	r0, [r7, #4]
2000a1d6:	f7fe fee0 	bl	20008f9a <HAL_I2C_ErrorCallback>
}
2000a1da:	bf00      	nop
2000a1dc:	3708      	adds	r7, #8
2000a1de:	46bd      	mov	sp, r7
2000a1e0:	bd80      	pop	{r7, pc}

2000a1e2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
2000a1e2:	b480      	push	{r7}
2000a1e4:	b083      	sub	sp, #12
2000a1e6:	af00      	add	r7, sp, #0
2000a1e8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
2000a1ea:	687b      	ldr	r3, [r7, #4]
2000a1ec:	681b      	ldr	r3, [r3, #0]
2000a1ee:	699b      	ldr	r3, [r3, #24]
2000a1f0:	f003 0302 	and.w	r3, r3, #2
2000a1f4:	2b02      	cmp	r3, #2
2000a1f6:	d103      	bne.n	2000a200 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
2000a1f8:	687b      	ldr	r3, [r7, #4]
2000a1fa:	681b      	ldr	r3, [r3, #0]
2000a1fc:	2200      	movs	r2, #0
2000a1fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
2000a200:	687b      	ldr	r3, [r7, #4]
2000a202:	681b      	ldr	r3, [r3, #0]
2000a204:	699b      	ldr	r3, [r3, #24]
2000a206:	f003 0301 	and.w	r3, r3, #1
2000a20a:	2b01      	cmp	r3, #1
2000a20c:	d007      	beq.n	2000a21e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
2000a20e:	687b      	ldr	r3, [r7, #4]
2000a210:	681b      	ldr	r3, [r3, #0]
2000a212:	699a      	ldr	r2, [r3, #24]
2000a214:	687b      	ldr	r3, [r7, #4]
2000a216:	681b      	ldr	r3, [r3, #0]
2000a218:	f042 0201 	orr.w	r2, r2, #1
2000a21c:	619a      	str	r2, [r3, #24]
  }
}
2000a21e:	bf00      	nop
2000a220:	370c      	adds	r7, #12
2000a222:	46bd      	mov	sp, r7
2000a224:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a228:	4770      	bx	lr

2000a22a <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
2000a22a:	b580      	push	{r7, lr}
2000a22c:	b084      	sub	sp, #16
2000a22e:	af00      	add	r7, sp, #0
2000a230:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2000a232:	687b      	ldr	r3, [r7, #4]
2000a234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000a236:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2000a238:	68fb      	ldr	r3, [r7, #12]
2000a23a:	681b      	ldr	r3, [r3, #0]
2000a23c:	681a      	ldr	r2, [r3, #0]
2000a23e:	68fb      	ldr	r3, [r7, #12]
2000a240:	681b      	ldr	r3, [r3, #0]
2000a242:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2000a246:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
2000a248:	68fb      	ldr	r3, [r7, #12]
2000a24a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2000a24c:	b29b      	uxth	r3, r3
2000a24e:	2b00      	cmp	r3, #0
2000a250:	d104      	bne.n	2000a25c <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
2000a252:	2120      	movs	r1, #32
2000a254:	68f8      	ldr	r0, [r7, #12]
2000a256:	f000 fb6d 	bl	2000a934 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
2000a25a:	e02d      	b.n	2000a2b8 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
2000a25c:	68fb      	ldr	r3, [r7, #12]
2000a25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000a260:	68fa      	ldr	r2, [r7, #12]
2000a262:	8d12      	ldrh	r2, [r2, #40]	; 0x28
2000a264:	441a      	add	r2, r3
2000a266:	68fb      	ldr	r3, [r7, #12]
2000a268:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000a26a:	68fb      	ldr	r3, [r7, #12]
2000a26c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2000a26e:	b29b      	uxth	r3, r3
2000a270:	2bff      	cmp	r3, #255	; 0xff
2000a272:	d903      	bls.n	2000a27c <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
2000a274:	68fb      	ldr	r3, [r7, #12]
2000a276:	22ff      	movs	r2, #255	; 0xff
2000a278:	851a      	strh	r2, [r3, #40]	; 0x28
2000a27a:	e004      	b.n	2000a286 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
2000a27c:	68fb      	ldr	r3, [r7, #12]
2000a27e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2000a280:	b29a      	uxth	r2, r3
2000a282:	68fb      	ldr	r3, [r7, #12]
2000a284:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
2000a286:	68fb      	ldr	r3, [r7, #12]
2000a288:	6b98      	ldr	r0, [r3, #56]	; 0x38
2000a28a:	68fb      	ldr	r3, [r7, #12]
2000a28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000a28e:	4619      	mov	r1, r3
2000a290:	68fb      	ldr	r3, [r7, #12]
2000a292:	681b      	ldr	r3, [r3, #0]
2000a294:	3328      	adds	r3, #40	; 0x28
2000a296:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
2000a298:	68fb      	ldr	r3, [r7, #12]
2000a29a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
2000a29c:	f7f8 fb75 	bl	2000298a <HAL_DMA_Start_IT>
2000a2a0:	4603      	mov	r3, r0
2000a2a2:	2b00      	cmp	r3, #0
2000a2a4:	d004      	beq.n	2000a2b0 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
2000a2a6:	2110      	movs	r1, #16
2000a2a8:	68f8      	ldr	r0, [r7, #12]
2000a2aa:	f7ff fea3 	bl	20009ff4 <I2C_ITError>
}
2000a2ae:	e003      	b.n	2000a2b8 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
2000a2b0:	2140      	movs	r1, #64	; 0x40
2000a2b2:	68f8      	ldr	r0, [r7, #12]
2000a2b4:	f000 fb3e 	bl	2000a934 <I2C_Enable_IRQ>
}
2000a2b8:	bf00      	nop
2000a2ba:	3710      	adds	r7, #16
2000a2bc:	46bd      	mov	sp, r7
2000a2be:	bd80      	pop	{r7, pc}

2000a2c0 <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
2000a2c0:	b580      	push	{r7, lr}
2000a2c2:	b084      	sub	sp, #16
2000a2c4:	af00      	add	r7, sp, #0
2000a2c6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2000a2c8:	687b      	ldr	r3, [r7, #4]
2000a2ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000a2cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
2000a2ce:	68fb      	ldr	r3, [r7, #12]
2000a2d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000a2d2:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
2000a2d4:	68bb      	ldr	r3, [r7, #8]
2000a2d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
2000a2da:	d002      	beq.n	2000a2e2 <I2C_DMASlaveTransmitCplt+0x22>
2000a2dc:	68bb      	ldr	r3, [r7, #8]
2000a2de:	2b00      	cmp	r3, #0
2000a2e0:	d10a      	bne.n	2000a2f8 <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2000a2e2:	68fb      	ldr	r3, [r7, #12]
2000a2e4:	681b      	ldr	r3, [r3, #0]
2000a2e6:	681a      	ldr	r2, [r3, #0]
2000a2e8:	68fb      	ldr	r3, [r7, #12]
2000a2ea:	681b      	ldr	r3, [r3, #0]
2000a2ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2000a2f0:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
2000a2f2:	68f8      	ldr	r0, [r7, #12]
2000a2f4:	f7ff fbf5 	bl	20009ae2 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
2000a2f8:	bf00      	nop
2000a2fa:	3710      	adds	r7, #16
2000a2fc:	46bd      	mov	sp, r7
2000a2fe:	bd80      	pop	{r7, pc}

2000a300 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
2000a300:	b580      	push	{r7, lr}
2000a302:	b084      	sub	sp, #16
2000a304:	af00      	add	r7, sp, #0
2000a306:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2000a308:	687b      	ldr	r3, [r7, #4]
2000a30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000a30c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2000a30e:	68fb      	ldr	r3, [r7, #12]
2000a310:	681b      	ldr	r3, [r3, #0]
2000a312:	681a      	ldr	r2, [r3, #0]
2000a314:	68fb      	ldr	r3, [r7, #12]
2000a316:	681b      	ldr	r3, [r3, #0]
2000a318:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2000a31c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
2000a31e:	68fb      	ldr	r3, [r7, #12]
2000a320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2000a322:	b29b      	uxth	r3, r3
2000a324:	2b00      	cmp	r3, #0
2000a326:	d104      	bne.n	2000a332 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
2000a328:	2120      	movs	r1, #32
2000a32a:	68f8      	ldr	r0, [r7, #12]
2000a32c:	f000 fb02 	bl	2000a934 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
2000a330:	e02d      	b.n	2000a38e <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
2000a332:	68fb      	ldr	r3, [r7, #12]
2000a334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000a336:	68fa      	ldr	r2, [r7, #12]
2000a338:	8d12      	ldrh	r2, [r2, #40]	; 0x28
2000a33a:	441a      	add	r2, r3
2000a33c:	68fb      	ldr	r3, [r7, #12]
2000a33e:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2000a340:	68fb      	ldr	r3, [r7, #12]
2000a342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2000a344:	b29b      	uxth	r3, r3
2000a346:	2bff      	cmp	r3, #255	; 0xff
2000a348:	d903      	bls.n	2000a352 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
2000a34a:	68fb      	ldr	r3, [r7, #12]
2000a34c:	22ff      	movs	r2, #255	; 0xff
2000a34e:	851a      	strh	r2, [r3, #40]	; 0x28
2000a350:	e004      	b.n	2000a35c <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
2000a352:	68fb      	ldr	r3, [r7, #12]
2000a354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
2000a356:	b29a      	uxth	r2, r3
2000a358:	68fb      	ldr	r3, [r7, #12]
2000a35a:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
2000a35c:	68fb      	ldr	r3, [r7, #12]
2000a35e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
2000a360:	68fb      	ldr	r3, [r7, #12]
2000a362:	681b      	ldr	r3, [r3, #0]
2000a364:	3324      	adds	r3, #36	; 0x24
2000a366:	4619      	mov	r1, r3
2000a368:	68fb      	ldr	r3, [r7, #12]
2000a36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000a36c:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
2000a36e:	68fb      	ldr	r3, [r7, #12]
2000a370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
2000a372:	f7f8 fb0a 	bl	2000298a <HAL_DMA_Start_IT>
2000a376:	4603      	mov	r3, r0
2000a378:	2b00      	cmp	r3, #0
2000a37a:	d004      	beq.n	2000a386 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
2000a37c:	2110      	movs	r1, #16
2000a37e:	68f8      	ldr	r0, [r7, #12]
2000a380:	f7ff fe38 	bl	20009ff4 <I2C_ITError>
}
2000a384:	e003      	b.n	2000a38e <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
2000a386:	2140      	movs	r1, #64	; 0x40
2000a388:	68f8      	ldr	r0, [r7, #12]
2000a38a:	f000 fad3 	bl	2000a934 <I2C_Enable_IRQ>
}
2000a38e:	bf00      	nop
2000a390:	3710      	adds	r7, #16
2000a392:	46bd      	mov	sp, r7
2000a394:	bd80      	pop	{r7, pc}

2000a396 <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
2000a396:	b580      	push	{r7, lr}
2000a398:	b084      	sub	sp, #16
2000a39a:	af00      	add	r7, sp, #0
2000a39c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2000a39e:	687b      	ldr	r3, [r7, #4]
2000a3a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000a3a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
2000a3a4:	68fb      	ldr	r3, [r7, #12]
2000a3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000a3a8:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
2000a3aa:	68fb      	ldr	r3, [r7, #12]
2000a3ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000a3ae:	681b      	ldr	r3, [r3, #0]
2000a3b0:	685b      	ldr	r3, [r3, #4]
2000a3b2:	2b00      	cmp	r3, #0
2000a3b4:	d10e      	bne.n	2000a3d4 <I2C_DMASlaveReceiveCplt+0x3e>
2000a3b6:	68bb      	ldr	r3, [r7, #8]
2000a3b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
2000a3bc:	d00a      	beq.n	2000a3d4 <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2000a3be:	68fb      	ldr	r3, [r7, #12]
2000a3c0:	681b      	ldr	r3, [r3, #0]
2000a3c2:	681a      	ldr	r2, [r3, #0]
2000a3c4:	68fb      	ldr	r3, [r7, #12]
2000a3c6:	681b      	ldr	r3, [r3, #0]
2000a3c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2000a3cc:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
2000a3ce:	68f8      	ldr	r0, [r7, #12]
2000a3d0:	f7ff fb87 	bl	20009ae2 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
2000a3d4:	bf00      	nop
2000a3d6:	3710      	adds	r7, #16
2000a3d8:	46bd      	mov	sp, r7
2000a3da:	bd80      	pop	{r7, pc}

2000a3dc <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
2000a3dc:	b580      	push	{r7, lr}
2000a3de:	b084      	sub	sp, #16
2000a3e0:	af00      	add	r7, sp, #0
2000a3e2:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
2000a3e4:	2300      	movs	r3, #0
2000a3e6:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2000a3e8:	687b      	ldr	r3, [r7, #4]
2000a3ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000a3ec:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
2000a3ee:	68bb      	ldr	r3, [r7, #8]
2000a3f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000a3f2:	2b00      	cmp	r3, #0
2000a3f4:	d007      	beq.n	2000a406 <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
2000a3f6:	68bb      	ldr	r3, [r7, #8]
2000a3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000a3fa:	681b      	ldr	r3, [r3, #0]
2000a3fc:	685b      	ldr	r3, [r3, #4]
2000a3fe:	2b00      	cmp	r3, #0
2000a400:	d101      	bne.n	2000a406 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
2000a402:	2301      	movs	r3, #1
2000a404:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
2000a406:	68bb      	ldr	r3, [r7, #8]
2000a408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000a40a:	2b00      	cmp	r3, #0
2000a40c:	d007      	beq.n	2000a41e <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
2000a40e:	68bb      	ldr	r3, [r7, #8]
2000a410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000a412:	681b      	ldr	r3, [r3, #0]
2000a414:	685b      	ldr	r3, [r3, #4]
2000a416:	2b00      	cmp	r3, #0
2000a418:	d101      	bne.n	2000a41e <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
2000a41a:	2301      	movs	r3, #1
2000a41c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
2000a41e:	6878      	ldr	r0, [r7, #4]
2000a420:	f7f8 feda 	bl	200031d8 <HAL_DMA_GetError>
2000a424:	4603      	mov	r3, r0
2000a426:	2b02      	cmp	r3, #2
2000a428:	d00e      	beq.n	2000a448 <I2C_DMAError+0x6c>
2000a42a:	68fb      	ldr	r3, [r7, #12]
2000a42c:	2b00      	cmp	r3, #0
2000a42e:	d00b      	beq.n	2000a448 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
2000a430:	68bb      	ldr	r3, [r7, #8]
2000a432:	681b      	ldr	r3, [r3, #0]
2000a434:	685a      	ldr	r2, [r3, #4]
2000a436:	68bb      	ldr	r3, [r7, #8]
2000a438:	681b      	ldr	r3, [r3, #0]
2000a43a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
2000a43e:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
2000a440:	2110      	movs	r1, #16
2000a442:	68b8      	ldr	r0, [r7, #8]
2000a444:	f7ff fdd6 	bl	20009ff4 <I2C_ITError>
  }
}
2000a448:	bf00      	nop
2000a44a:	3710      	adds	r7, #16
2000a44c:	46bd      	mov	sp, r7
2000a44e:	bd80      	pop	{r7, pc}

2000a450 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
2000a450:	b580      	push	{r7, lr}
2000a452:	b084      	sub	sp, #16
2000a454:	af00      	add	r7, sp, #0
2000a456:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2000a458:	687b      	ldr	r3, [r7, #4]
2000a45a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000a45c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
2000a45e:	68fb      	ldr	r3, [r7, #12]
2000a460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000a462:	2b00      	cmp	r3, #0
2000a464:	d003      	beq.n	2000a46e <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
2000a466:	68fb      	ldr	r3, [r7, #12]
2000a468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000a46a:	2200      	movs	r2, #0
2000a46c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
2000a46e:	68fb      	ldr	r3, [r7, #12]
2000a470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000a472:	2b00      	cmp	r3, #0
2000a474:	d003      	beq.n	2000a47e <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
2000a476:	68fb      	ldr	r3, [r7, #12]
2000a478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000a47a:	2200      	movs	r2, #0
2000a47c:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
2000a47e:	68f8      	ldr	r0, [r7, #12]
2000a480:	f7ff fe88 	bl	2000a194 <I2C_TreatErrorCallback>
}
2000a484:	bf00      	nop
2000a486:	3710      	adds	r7, #16
2000a488:	46bd      	mov	sp, r7
2000a48a:	bd80      	pop	{r7, pc}

2000a48c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
2000a48c:	b580      	push	{r7, lr}
2000a48e:	b084      	sub	sp, #16
2000a490:	af00      	add	r7, sp, #0
2000a492:	60f8      	str	r0, [r7, #12]
2000a494:	60b9      	str	r1, [r7, #8]
2000a496:	603b      	str	r3, [r7, #0]
2000a498:	4613      	mov	r3, r2
2000a49a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
2000a49c:	e022      	b.n	2000a4e4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
2000a49e:	683b      	ldr	r3, [r7, #0]
2000a4a0:	f1b3 3fff 	cmp.w	r3, #4294967295
2000a4a4:	d01e      	beq.n	2000a4e4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2000a4a6:	f7f7 fc57 	bl	20001d58 <HAL_GetTick>
2000a4aa:	4602      	mov	r2, r0
2000a4ac:	69bb      	ldr	r3, [r7, #24]
2000a4ae:	1ad3      	subs	r3, r2, r3
2000a4b0:	683a      	ldr	r2, [r7, #0]
2000a4b2:	429a      	cmp	r2, r3
2000a4b4:	d302      	bcc.n	2000a4bc <I2C_WaitOnFlagUntilTimeout+0x30>
2000a4b6:	683b      	ldr	r3, [r7, #0]
2000a4b8:	2b00      	cmp	r3, #0
2000a4ba:	d113      	bne.n	2000a4e4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2000a4bc:	68fb      	ldr	r3, [r7, #12]
2000a4be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000a4c0:	f043 0220 	orr.w	r2, r3, #32
2000a4c4:	68fb      	ldr	r3, [r7, #12]
2000a4c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
2000a4c8:	68fb      	ldr	r3, [r7, #12]
2000a4ca:	2220      	movs	r2, #32
2000a4cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
2000a4d0:	68fb      	ldr	r3, [r7, #12]
2000a4d2:	2200      	movs	r2, #0
2000a4d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2000a4d8:	68fb      	ldr	r3, [r7, #12]
2000a4da:	2200      	movs	r2, #0
2000a4dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
2000a4e0:	2301      	movs	r3, #1
2000a4e2:	e00f      	b.n	2000a504 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
2000a4e4:	68fb      	ldr	r3, [r7, #12]
2000a4e6:	681b      	ldr	r3, [r3, #0]
2000a4e8:	699a      	ldr	r2, [r3, #24]
2000a4ea:	68bb      	ldr	r3, [r7, #8]
2000a4ec:	4013      	ands	r3, r2
2000a4ee:	68ba      	ldr	r2, [r7, #8]
2000a4f0:	429a      	cmp	r2, r3
2000a4f2:	bf0c      	ite	eq
2000a4f4:	2301      	moveq	r3, #1
2000a4f6:	2300      	movne	r3, #0
2000a4f8:	b2db      	uxtb	r3, r3
2000a4fa:	461a      	mov	r2, r3
2000a4fc:	79fb      	ldrb	r3, [r7, #7]
2000a4fe:	429a      	cmp	r2, r3
2000a500:	d0cd      	beq.n	2000a49e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
2000a502:	2300      	movs	r3, #0
}
2000a504:	4618      	mov	r0, r3
2000a506:	3710      	adds	r7, #16
2000a508:	46bd      	mov	sp, r7
2000a50a:	bd80      	pop	{r7, pc}

2000a50c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
2000a50c:	b580      	push	{r7, lr}
2000a50e:	b084      	sub	sp, #16
2000a510:	af00      	add	r7, sp, #0
2000a512:	60f8      	str	r0, [r7, #12]
2000a514:	60b9      	str	r1, [r7, #8]
2000a516:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
2000a518:	e02c      	b.n	2000a574 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
2000a51a:	687a      	ldr	r2, [r7, #4]
2000a51c:	68b9      	ldr	r1, [r7, #8]
2000a51e:	68f8      	ldr	r0, [r7, #12]
2000a520:	f000 f8ea 	bl	2000a6f8 <I2C_IsErrorOccurred>
2000a524:	4603      	mov	r3, r0
2000a526:	2b00      	cmp	r3, #0
2000a528:	d001      	beq.n	2000a52e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
2000a52a:	2301      	movs	r3, #1
2000a52c:	e02a      	b.n	2000a584 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
2000a52e:	68bb      	ldr	r3, [r7, #8]
2000a530:	f1b3 3fff 	cmp.w	r3, #4294967295
2000a534:	d01e      	beq.n	2000a574 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2000a536:	f7f7 fc0f 	bl	20001d58 <HAL_GetTick>
2000a53a:	4602      	mov	r2, r0
2000a53c:	687b      	ldr	r3, [r7, #4]
2000a53e:	1ad3      	subs	r3, r2, r3
2000a540:	68ba      	ldr	r2, [r7, #8]
2000a542:	429a      	cmp	r2, r3
2000a544:	d302      	bcc.n	2000a54c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
2000a546:	68bb      	ldr	r3, [r7, #8]
2000a548:	2b00      	cmp	r3, #0
2000a54a:	d113      	bne.n	2000a574 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2000a54c:	68fb      	ldr	r3, [r7, #12]
2000a54e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000a550:	f043 0220 	orr.w	r2, r3, #32
2000a554:	68fb      	ldr	r3, [r7, #12]
2000a556:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
2000a558:	68fb      	ldr	r3, [r7, #12]
2000a55a:	2220      	movs	r2, #32
2000a55c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
2000a560:	68fb      	ldr	r3, [r7, #12]
2000a562:	2200      	movs	r2, #0
2000a564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2000a568:	68fb      	ldr	r3, [r7, #12]
2000a56a:	2200      	movs	r2, #0
2000a56c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
2000a570:	2301      	movs	r3, #1
2000a572:	e007      	b.n	2000a584 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
2000a574:	68fb      	ldr	r3, [r7, #12]
2000a576:	681b      	ldr	r3, [r3, #0]
2000a578:	699b      	ldr	r3, [r3, #24]
2000a57a:	f003 0302 	and.w	r3, r3, #2
2000a57e:	2b02      	cmp	r3, #2
2000a580:	d1cb      	bne.n	2000a51a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
2000a582:	2300      	movs	r3, #0
}
2000a584:	4618      	mov	r0, r3
2000a586:	3710      	adds	r7, #16
2000a588:	46bd      	mov	sp, r7
2000a58a:	bd80      	pop	{r7, pc}

2000a58c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
2000a58c:	b580      	push	{r7, lr}
2000a58e:	b084      	sub	sp, #16
2000a590:	af00      	add	r7, sp, #0
2000a592:	60f8      	str	r0, [r7, #12]
2000a594:	60b9      	str	r1, [r7, #8]
2000a596:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
2000a598:	e028      	b.n	2000a5ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
2000a59a:	687a      	ldr	r2, [r7, #4]
2000a59c:	68b9      	ldr	r1, [r7, #8]
2000a59e:	68f8      	ldr	r0, [r7, #12]
2000a5a0:	f000 f8aa 	bl	2000a6f8 <I2C_IsErrorOccurred>
2000a5a4:	4603      	mov	r3, r0
2000a5a6:	2b00      	cmp	r3, #0
2000a5a8:	d001      	beq.n	2000a5ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
2000a5aa:	2301      	movs	r3, #1
2000a5ac:	e026      	b.n	2000a5fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2000a5ae:	f7f7 fbd3 	bl	20001d58 <HAL_GetTick>
2000a5b2:	4602      	mov	r2, r0
2000a5b4:	687b      	ldr	r3, [r7, #4]
2000a5b6:	1ad3      	subs	r3, r2, r3
2000a5b8:	68ba      	ldr	r2, [r7, #8]
2000a5ba:	429a      	cmp	r2, r3
2000a5bc:	d302      	bcc.n	2000a5c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
2000a5be:	68bb      	ldr	r3, [r7, #8]
2000a5c0:	2b00      	cmp	r3, #0
2000a5c2:	d113      	bne.n	2000a5ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2000a5c4:	68fb      	ldr	r3, [r7, #12]
2000a5c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000a5c8:	f043 0220 	orr.w	r2, r3, #32
2000a5cc:	68fb      	ldr	r3, [r7, #12]
2000a5ce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
2000a5d0:	68fb      	ldr	r3, [r7, #12]
2000a5d2:	2220      	movs	r2, #32
2000a5d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
2000a5d8:	68fb      	ldr	r3, [r7, #12]
2000a5da:	2200      	movs	r2, #0
2000a5dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2000a5e0:	68fb      	ldr	r3, [r7, #12]
2000a5e2:	2200      	movs	r2, #0
2000a5e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
2000a5e8:	2301      	movs	r3, #1
2000a5ea:	e007      	b.n	2000a5fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
2000a5ec:	68fb      	ldr	r3, [r7, #12]
2000a5ee:	681b      	ldr	r3, [r3, #0]
2000a5f0:	699b      	ldr	r3, [r3, #24]
2000a5f2:	f003 0320 	and.w	r3, r3, #32
2000a5f6:	2b20      	cmp	r3, #32
2000a5f8:	d1cf      	bne.n	2000a59a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
2000a5fa:	2300      	movs	r3, #0
}
2000a5fc:	4618      	mov	r0, r3
2000a5fe:	3710      	adds	r7, #16
2000a600:	46bd      	mov	sp, r7
2000a602:	bd80      	pop	{r7, pc}

2000a604 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
2000a604:	b580      	push	{r7, lr}
2000a606:	b084      	sub	sp, #16
2000a608:	af00      	add	r7, sp, #0
2000a60a:	60f8      	str	r0, [r7, #12]
2000a60c:	60b9      	str	r1, [r7, #8]
2000a60e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
2000a610:	e064      	b.n	2000a6dc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
2000a612:	687a      	ldr	r2, [r7, #4]
2000a614:	68b9      	ldr	r1, [r7, #8]
2000a616:	68f8      	ldr	r0, [r7, #12]
2000a618:	f000 f86e 	bl	2000a6f8 <I2C_IsErrorOccurred>
2000a61c:	4603      	mov	r3, r0
2000a61e:	2b00      	cmp	r3, #0
2000a620:	d001      	beq.n	2000a626 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
2000a622:	2301      	movs	r3, #1
2000a624:	e062      	b.n	2000a6ec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
2000a626:	68fb      	ldr	r3, [r7, #12]
2000a628:	681b      	ldr	r3, [r3, #0]
2000a62a:	699b      	ldr	r3, [r3, #24]
2000a62c:	f003 0320 	and.w	r3, r3, #32
2000a630:	2b20      	cmp	r3, #32
2000a632:	d138      	bne.n	2000a6a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
2000a634:	68fb      	ldr	r3, [r7, #12]
2000a636:	681b      	ldr	r3, [r3, #0]
2000a638:	699b      	ldr	r3, [r3, #24]
2000a63a:	f003 0304 	and.w	r3, r3, #4
2000a63e:	2b04      	cmp	r3, #4
2000a640:	d105      	bne.n	2000a64e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
2000a642:	68fb      	ldr	r3, [r7, #12]
2000a644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
2000a646:	2b00      	cmp	r3, #0
2000a648:	d001      	beq.n	2000a64e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
2000a64a:	2300      	movs	r3, #0
2000a64c:	e04e      	b.n	2000a6ec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
2000a64e:	68fb      	ldr	r3, [r7, #12]
2000a650:	681b      	ldr	r3, [r3, #0]
2000a652:	699b      	ldr	r3, [r3, #24]
2000a654:	f003 0310 	and.w	r3, r3, #16
2000a658:	2b10      	cmp	r3, #16
2000a65a:	d107      	bne.n	2000a66c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2000a65c:	68fb      	ldr	r3, [r7, #12]
2000a65e:	681b      	ldr	r3, [r3, #0]
2000a660:	2210      	movs	r2, #16
2000a662:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
2000a664:	68fb      	ldr	r3, [r7, #12]
2000a666:	2204      	movs	r2, #4
2000a668:	645a      	str	r2, [r3, #68]	; 0x44
2000a66a:	e002      	b.n	2000a672 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2000a66c:	68fb      	ldr	r3, [r7, #12]
2000a66e:	2200      	movs	r2, #0
2000a670:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2000a672:	68fb      	ldr	r3, [r7, #12]
2000a674:	681b      	ldr	r3, [r3, #0]
2000a676:	2220      	movs	r2, #32
2000a678:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
2000a67a:	68fb      	ldr	r3, [r7, #12]
2000a67c:	681b      	ldr	r3, [r3, #0]
2000a67e:	6859      	ldr	r1, [r3, #4]
2000a680:	68fb      	ldr	r3, [r7, #12]
2000a682:	681a      	ldr	r2, [r3, #0]
2000a684:	4b1b      	ldr	r3, [pc, #108]	; (2000a6f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
2000a686:	400b      	ands	r3, r1
2000a688:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
2000a68a:	68fb      	ldr	r3, [r7, #12]
2000a68c:	2220      	movs	r2, #32
2000a68e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
2000a692:	68fb      	ldr	r3, [r7, #12]
2000a694:	2200      	movs	r2, #0
2000a696:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2000a69a:	68fb      	ldr	r3, [r7, #12]
2000a69c:	2200      	movs	r2, #0
2000a69e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
2000a6a2:	2301      	movs	r3, #1
2000a6a4:	e022      	b.n	2000a6ec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2000a6a6:	f7f7 fb57 	bl	20001d58 <HAL_GetTick>
2000a6aa:	4602      	mov	r2, r0
2000a6ac:	687b      	ldr	r3, [r7, #4]
2000a6ae:	1ad3      	subs	r3, r2, r3
2000a6b0:	68ba      	ldr	r2, [r7, #8]
2000a6b2:	429a      	cmp	r2, r3
2000a6b4:	d302      	bcc.n	2000a6bc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
2000a6b6:	68bb      	ldr	r3, [r7, #8]
2000a6b8:	2b00      	cmp	r3, #0
2000a6ba:	d10f      	bne.n	2000a6dc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2000a6bc:	68fb      	ldr	r3, [r7, #12]
2000a6be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000a6c0:	f043 0220 	orr.w	r2, r3, #32
2000a6c4:	68fb      	ldr	r3, [r7, #12]
2000a6c6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
2000a6c8:	68fb      	ldr	r3, [r7, #12]
2000a6ca:	2220      	movs	r2, #32
2000a6cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2000a6d0:	68fb      	ldr	r3, [r7, #12]
2000a6d2:	2200      	movs	r2, #0
2000a6d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
2000a6d8:	2301      	movs	r3, #1
2000a6da:	e007      	b.n	2000a6ec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
2000a6dc:	68fb      	ldr	r3, [r7, #12]
2000a6de:	681b      	ldr	r3, [r3, #0]
2000a6e0:	699b      	ldr	r3, [r3, #24]
2000a6e2:	f003 0304 	and.w	r3, r3, #4
2000a6e6:	2b04      	cmp	r3, #4
2000a6e8:	d193      	bne.n	2000a612 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
2000a6ea:	2300      	movs	r3, #0
}
2000a6ec:	4618      	mov	r0, r3
2000a6ee:	3710      	adds	r7, #16
2000a6f0:	46bd      	mov	sp, r7
2000a6f2:	bd80      	pop	{r7, pc}
2000a6f4:	fe00e800 	.word	0xfe00e800

2000a6f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
2000a6f8:	b580      	push	{r7, lr}
2000a6fa:	b08a      	sub	sp, #40	; 0x28
2000a6fc:	af00      	add	r7, sp, #0
2000a6fe:	60f8      	str	r0, [r7, #12]
2000a700:	60b9      	str	r1, [r7, #8]
2000a702:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
2000a704:	2300      	movs	r3, #0
2000a706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
2000a70a:	68fb      	ldr	r3, [r7, #12]
2000a70c:	681b      	ldr	r3, [r3, #0]
2000a70e:	699b      	ldr	r3, [r3, #24]
2000a710:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
2000a712:	2300      	movs	r3, #0
2000a714:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
2000a716:	687b      	ldr	r3, [r7, #4]
2000a718:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
2000a71a:	69bb      	ldr	r3, [r7, #24]
2000a71c:	f003 0310 	and.w	r3, r3, #16
2000a720:	2b00      	cmp	r3, #0
2000a722:	d075      	beq.n	2000a810 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2000a724:	68fb      	ldr	r3, [r7, #12]
2000a726:	681b      	ldr	r3, [r3, #0]
2000a728:	2210      	movs	r2, #16
2000a72a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
2000a72c:	e056      	b.n	2000a7dc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
2000a72e:	68bb      	ldr	r3, [r7, #8]
2000a730:	f1b3 3fff 	cmp.w	r3, #4294967295
2000a734:	d052      	beq.n	2000a7dc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
2000a736:	f7f7 fb0f 	bl	20001d58 <HAL_GetTick>
2000a73a:	4602      	mov	r2, r0
2000a73c:	69fb      	ldr	r3, [r7, #28]
2000a73e:	1ad3      	subs	r3, r2, r3
2000a740:	68ba      	ldr	r2, [r7, #8]
2000a742:	429a      	cmp	r2, r3
2000a744:	d302      	bcc.n	2000a74c <I2C_IsErrorOccurred+0x54>
2000a746:	68bb      	ldr	r3, [r7, #8]
2000a748:	2b00      	cmp	r3, #0
2000a74a:	d147      	bne.n	2000a7dc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
2000a74c:	68fb      	ldr	r3, [r7, #12]
2000a74e:	681b      	ldr	r3, [r3, #0]
2000a750:	685b      	ldr	r3, [r3, #4]
2000a752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2000a756:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
2000a758:	68fb      	ldr	r3, [r7, #12]
2000a75a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
2000a75e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
2000a760:	68fb      	ldr	r3, [r7, #12]
2000a762:	681b      	ldr	r3, [r3, #0]
2000a764:	699b      	ldr	r3, [r3, #24]
2000a766:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2000a76a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2000a76e:	d12e      	bne.n	2000a7ce <I2C_IsErrorOccurred+0xd6>
2000a770:	697b      	ldr	r3, [r7, #20]
2000a772:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2000a776:	d02a      	beq.n	2000a7ce <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
2000a778:	7cfb      	ldrb	r3, [r7, #19]
2000a77a:	2b20      	cmp	r3, #32
2000a77c:	d027      	beq.n	2000a7ce <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
2000a77e:	68fb      	ldr	r3, [r7, #12]
2000a780:	681b      	ldr	r3, [r3, #0]
2000a782:	685a      	ldr	r2, [r3, #4]
2000a784:	68fb      	ldr	r3, [r7, #12]
2000a786:	681b      	ldr	r3, [r3, #0]
2000a788:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2000a78c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
2000a78e:	f7f7 fae3 	bl	20001d58 <HAL_GetTick>
2000a792:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
2000a794:	e01b      	b.n	2000a7ce <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
2000a796:	f7f7 fadf 	bl	20001d58 <HAL_GetTick>
2000a79a:	4602      	mov	r2, r0
2000a79c:	69fb      	ldr	r3, [r7, #28]
2000a79e:	1ad3      	subs	r3, r2, r3
2000a7a0:	2b19      	cmp	r3, #25
2000a7a2:	d914      	bls.n	2000a7ce <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2000a7a4:	68fb      	ldr	r3, [r7, #12]
2000a7a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000a7a8:	f043 0220 	orr.w	r2, r3, #32
2000a7ac:	68fb      	ldr	r3, [r7, #12]
2000a7ae:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
2000a7b0:	68fb      	ldr	r3, [r7, #12]
2000a7b2:	2220      	movs	r2, #32
2000a7b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
2000a7b8:	68fb      	ldr	r3, [r7, #12]
2000a7ba:	2200      	movs	r2, #0
2000a7bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
2000a7c0:	68fb      	ldr	r3, [r7, #12]
2000a7c2:	2200      	movs	r2, #0
2000a7c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
2000a7c8:	2301      	movs	r3, #1
2000a7ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
2000a7ce:	68fb      	ldr	r3, [r7, #12]
2000a7d0:	681b      	ldr	r3, [r3, #0]
2000a7d2:	699b      	ldr	r3, [r3, #24]
2000a7d4:	f003 0320 	and.w	r3, r3, #32
2000a7d8:	2b20      	cmp	r3, #32
2000a7da:	d1dc      	bne.n	2000a796 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
2000a7dc:	68fb      	ldr	r3, [r7, #12]
2000a7de:	681b      	ldr	r3, [r3, #0]
2000a7e0:	699b      	ldr	r3, [r3, #24]
2000a7e2:	f003 0320 	and.w	r3, r3, #32
2000a7e6:	2b20      	cmp	r3, #32
2000a7e8:	d003      	beq.n	2000a7f2 <I2C_IsErrorOccurred+0xfa>
2000a7ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
2000a7ee:	2b00      	cmp	r3, #0
2000a7f0:	d09d      	beq.n	2000a72e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
2000a7f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
2000a7f6:	2b00      	cmp	r3, #0
2000a7f8:	d103      	bne.n	2000a802 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2000a7fa:	68fb      	ldr	r3, [r7, #12]
2000a7fc:	681b      	ldr	r3, [r3, #0]
2000a7fe:	2220      	movs	r2, #32
2000a800:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
2000a802:	6a3b      	ldr	r3, [r7, #32]
2000a804:	f043 0304 	orr.w	r3, r3, #4
2000a808:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
2000a80a:	2301      	movs	r3, #1
2000a80c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
2000a810:	68fb      	ldr	r3, [r7, #12]
2000a812:	681b      	ldr	r3, [r3, #0]
2000a814:	699b      	ldr	r3, [r3, #24]
2000a816:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
2000a818:	69bb      	ldr	r3, [r7, #24]
2000a81a:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000a81e:	2b00      	cmp	r3, #0
2000a820:	d00b      	beq.n	2000a83a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
2000a822:	6a3b      	ldr	r3, [r7, #32]
2000a824:	f043 0301 	orr.w	r3, r3, #1
2000a828:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
2000a82a:	68fb      	ldr	r3, [r7, #12]
2000a82c:	681b      	ldr	r3, [r3, #0]
2000a82e:	f44f 7280 	mov.w	r2, #256	; 0x100
2000a832:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
2000a834:	2301      	movs	r3, #1
2000a836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
2000a83a:	69bb      	ldr	r3, [r7, #24]
2000a83c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
2000a840:	2b00      	cmp	r3, #0
2000a842:	d00b      	beq.n	2000a85c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
2000a844:	6a3b      	ldr	r3, [r7, #32]
2000a846:	f043 0308 	orr.w	r3, r3, #8
2000a84a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
2000a84c:	68fb      	ldr	r3, [r7, #12]
2000a84e:	681b      	ldr	r3, [r3, #0]
2000a850:	f44f 6280 	mov.w	r2, #1024	; 0x400
2000a854:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
2000a856:	2301      	movs	r3, #1
2000a858:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
2000a85c:	69bb      	ldr	r3, [r7, #24]
2000a85e:	f403 7300 	and.w	r3, r3, #512	; 0x200
2000a862:	2b00      	cmp	r3, #0
2000a864:	d00b      	beq.n	2000a87e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
2000a866:	6a3b      	ldr	r3, [r7, #32]
2000a868:	f043 0302 	orr.w	r3, r3, #2
2000a86c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
2000a86e:	68fb      	ldr	r3, [r7, #12]
2000a870:	681b      	ldr	r3, [r3, #0]
2000a872:	f44f 7200 	mov.w	r2, #512	; 0x200
2000a876:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
2000a878:	2301      	movs	r3, #1
2000a87a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
2000a87e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
2000a882:	2b00      	cmp	r3, #0
2000a884:	d01c      	beq.n	2000a8c0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
2000a886:	68f8      	ldr	r0, [r7, #12]
2000a888:	f7ff fcab 	bl	2000a1e2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2000a88c:	68fb      	ldr	r3, [r7, #12]
2000a88e:	681b      	ldr	r3, [r3, #0]
2000a890:	6859      	ldr	r1, [r3, #4]
2000a892:	68fb      	ldr	r3, [r7, #12]
2000a894:	681a      	ldr	r2, [r3, #0]
2000a896:	4b0d      	ldr	r3, [pc, #52]	; (2000a8cc <I2C_IsErrorOccurred+0x1d4>)
2000a898:	400b      	ands	r3, r1
2000a89a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
2000a89c:	68fb      	ldr	r3, [r7, #12]
2000a89e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
2000a8a0:	6a3b      	ldr	r3, [r7, #32]
2000a8a2:	431a      	orrs	r2, r3
2000a8a4:	68fb      	ldr	r3, [r7, #12]
2000a8a6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
2000a8a8:	68fb      	ldr	r3, [r7, #12]
2000a8aa:	2220      	movs	r2, #32
2000a8ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
2000a8b0:	68fb      	ldr	r3, [r7, #12]
2000a8b2:	2200      	movs	r2, #0
2000a8b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2000a8b8:	68fb      	ldr	r3, [r7, #12]
2000a8ba:	2200      	movs	r2, #0
2000a8bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
2000a8c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
2000a8c4:	4618      	mov	r0, r3
2000a8c6:	3728      	adds	r7, #40	; 0x28
2000a8c8:	46bd      	mov	sp, r7
2000a8ca:	bd80      	pop	{r7, pc}
2000a8cc:	fe00e800 	.word	0xfe00e800

2000a8d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
2000a8d0:	b480      	push	{r7}
2000a8d2:	b087      	sub	sp, #28
2000a8d4:	af00      	add	r7, sp, #0
2000a8d6:	60f8      	str	r0, [r7, #12]
2000a8d8:	607b      	str	r3, [r7, #4]
2000a8da:	460b      	mov	r3, r1
2000a8dc:	817b      	strh	r3, [r7, #10]
2000a8de:	4613      	mov	r3, r2
2000a8e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
2000a8e2:	897b      	ldrh	r3, [r7, #10]
2000a8e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
2000a8e8:	7a7b      	ldrb	r3, [r7, #9]
2000a8ea:	041b      	lsls	r3, r3, #16
2000a8ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
2000a8f0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
2000a8f2:	687b      	ldr	r3, [r7, #4]
2000a8f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
2000a8f6:	6a3b      	ldr	r3, [r7, #32]
2000a8f8:	4313      	orrs	r3, r2
2000a8fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2000a8fe:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
2000a900:	68fb      	ldr	r3, [r7, #12]
2000a902:	681b      	ldr	r3, [r3, #0]
2000a904:	685a      	ldr	r2, [r3, #4]
2000a906:	6a3b      	ldr	r3, [r7, #32]
2000a908:	0d5b      	lsrs	r3, r3, #21
2000a90a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
2000a90e:	4b08      	ldr	r3, [pc, #32]	; (2000a930 <I2C_TransferConfig+0x60>)
2000a910:	430b      	orrs	r3, r1
2000a912:	43db      	mvns	r3, r3
2000a914:	ea02 0103 	and.w	r1, r2, r3
2000a918:	68fb      	ldr	r3, [r7, #12]
2000a91a:	681b      	ldr	r3, [r3, #0]
2000a91c:	697a      	ldr	r2, [r7, #20]
2000a91e:	430a      	orrs	r2, r1
2000a920:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
2000a922:	bf00      	nop
2000a924:	371c      	adds	r7, #28
2000a926:	46bd      	mov	sp, r7
2000a928:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a92c:	4770      	bx	lr
2000a92e:	bf00      	nop
2000a930:	03ff63ff 	.word	0x03ff63ff

2000a934 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
2000a934:	b480      	push	{r7}
2000a936:	b085      	sub	sp, #20
2000a938:	af00      	add	r7, sp, #0
2000a93a:	6078      	str	r0, [r7, #4]
2000a93c:	460b      	mov	r3, r1
2000a93e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
2000a940:	2300      	movs	r3, #0
2000a942:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
2000a944:	687b      	ldr	r3, [r7, #4]
2000a946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000a948:	4a2a      	ldr	r2, [pc, #168]	; (2000a9f4 <I2C_Enable_IRQ+0xc0>)
2000a94a:	4293      	cmp	r3, r2
2000a94c:	d004      	beq.n	2000a958 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
2000a94e:	687b      	ldr	r3, [r7, #4]
2000a950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
2000a952:	4a29      	ldr	r2, [pc, #164]	; (2000a9f8 <I2C_Enable_IRQ+0xc4>)
2000a954:	4293      	cmp	r3, r2
2000a956:	d11d      	bne.n	2000a994 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
2000a958:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
2000a95c:	2b00      	cmp	r3, #0
2000a95e:	da03      	bge.n	2000a968 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
2000a960:	68fb      	ldr	r3, [r7, #12]
2000a962:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
2000a966:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
2000a968:	887b      	ldrh	r3, [r7, #2]
2000a96a:	2b10      	cmp	r3, #16
2000a96c:	d103      	bne.n	2000a976 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
2000a96e:	68fb      	ldr	r3, [r7, #12]
2000a970:	f043 0390 	orr.w	r3, r3, #144	; 0x90
2000a974:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
2000a976:	887b      	ldrh	r3, [r7, #2]
2000a978:	2b20      	cmp	r3, #32
2000a97a:	d103      	bne.n	2000a984 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
2000a97c:	68fb      	ldr	r3, [r7, #12]
2000a97e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
2000a982:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
2000a984:	887b      	ldrh	r3, [r7, #2]
2000a986:	2b40      	cmp	r3, #64	; 0x40
2000a988:	d125      	bne.n	2000a9d6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
2000a98a:	68fb      	ldr	r3, [r7, #12]
2000a98c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2000a990:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
2000a992:	e020      	b.n	2000a9d6 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
2000a994:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
2000a998:	2b00      	cmp	r3, #0
2000a99a:	da03      	bge.n	2000a9a4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
2000a99c:	68fb      	ldr	r3, [r7, #12]
2000a99e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
2000a9a2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
2000a9a4:	887b      	ldrh	r3, [r7, #2]
2000a9a6:	f003 0301 	and.w	r3, r3, #1
2000a9aa:	2b00      	cmp	r3, #0
2000a9ac:	d003      	beq.n	2000a9b6 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
2000a9ae:	68fb      	ldr	r3, [r7, #12]
2000a9b0:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
2000a9b4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
2000a9b6:	887b      	ldrh	r3, [r7, #2]
2000a9b8:	f003 0302 	and.w	r3, r3, #2
2000a9bc:	2b00      	cmp	r3, #0
2000a9be:	d003      	beq.n	2000a9c8 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
2000a9c0:	68fb      	ldr	r3, [r7, #12]
2000a9c2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
2000a9c6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
2000a9c8:	887b      	ldrh	r3, [r7, #2]
2000a9ca:	2b20      	cmp	r3, #32
2000a9cc:	d103      	bne.n	2000a9d6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
2000a9ce:	68fb      	ldr	r3, [r7, #12]
2000a9d0:	f043 0320 	orr.w	r3, r3, #32
2000a9d4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
2000a9d6:	687b      	ldr	r3, [r7, #4]
2000a9d8:	681b      	ldr	r3, [r3, #0]
2000a9da:	6819      	ldr	r1, [r3, #0]
2000a9dc:	687b      	ldr	r3, [r7, #4]
2000a9de:	681b      	ldr	r3, [r3, #0]
2000a9e0:	68fa      	ldr	r2, [r7, #12]
2000a9e2:	430a      	orrs	r2, r1
2000a9e4:	601a      	str	r2, [r3, #0]
}
2000a9e6:	bf00      	nop
2000a9e8:	3714      	adds	r7, #20
2000a9ea:	46bd      	mov	sp, r7
2000a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a9f0:	4770      	bx	lr
2000a9f2:	bf00      	nop
2000a9f4:	20009469 	.word	0x20009469
2000a9f8:	2000964f 	.word	0x2000964f

2000a9fc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
2000a9fc:	b480      	push	{r7}
2000a9fe:	b085      	sub	sp, #20
2000aa00:	af00      	add	r7, sp, #0
2000aa02:	6078      	str	r0, [r7, #4]
2000aa04:	460b      	mov	r3, r1
2000aa06:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
2000aa08:	2300      	movs	r3, #0
2000aa0a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
2000aa0c:	887b      	ldrh	r3, [r7, #2]
2000aa0e:	f003 0301 	and.w	r3, r3, #1
2000aa12:	2b00      	cmp	r3, #0
2000aa14:	d00f      	beq.n	2000aa36 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
2000aa16:	68fb      	ldr	r3, [r7, #12]
2000aa18:	f043 0342 	orr.w	r3, r3, #66	; 0x42
2000aa1c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2000aa1e:	687b      	ldr	r3, [r7, #4]
2000aa20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000aa24:	b2db      	uxtb	r3, r3
2000aa26:	f003 0328 	and.w	r3, r3, #40	; 0x28
2000aa2a:	2b28      	cmp	r3, #40	; 0x28
2000aa2c:	d003      	beq.n	2000aa36 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
2000aa2e:	68fb      	ldr	r3, [r7, #12]
2000aa30:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
2000aa34:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
2000aa36:	887b      	ldrh	r3, [r7, #2]
2000aa38:	f003 0302 	and.w	r3, r3, #2
2000aa3c:	2b00      	cmp	r3, #0
2000aa3e:	d00f      	beq.n	2000aa60 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
2000aa40:	68fb      	ldr	r3, [r7, #12]
2000aa42:	f043 0344 	orr.w	r3, r3, #68	; 0x44
2000aa46:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2000aa48:	687b      	ldr	r3, [r7, #4]
2000aa4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000aa4e:	b2db      	uxtb	r3, r3
2000aa50:	f003 0328 	and.w	r3, r3, #40	; 0x28
2000aa54:	2b28      	cmp	r3, #40	; 0x28
2000aa56:	d003      	beq.n	2000aa60 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
2000aa58:	68fb      	ldr	r3, [r7, #12]
2000aa5a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
2000aa5e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
2000aa60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
2000aa64:	2b00      	cmp	r3, #0
2000aa66:	da03      	bge.n	2000aa70 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
2000aa68:	68fb      	ldr	r3, [r7, #12]
2000aa6a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
2000aa6e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
2000aa70:	887b      	ldrh	r3, [r7, #2]
2000aa72:	2b10      	cmp	r3, #16
2000aa74:	d103      	bne.n	2000aa7e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
2000aa76:	68fb      	ldr	r3, [r7, #12]
2000aa78:	f043 0390 	orr.w	r3, r3, #144	; 0x90
2000aa7c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
2000aa7e:	887b      	ldrh	r3, [r7, #2]
2000aa80:	2b20      	cmp	r3, #32
2000aa82:	d103      	bne.n	2000aa8c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
2000aa84:	68fb      	ldr	r3, [r7, #12]
2000aa86:	f043 0320 	orr.w	r3, r3, #32
2000aa8a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
2000aa8c:	887b      	ldrh	r3, [r7, #2]
2000aa8e:	2b40      	cmp	r3, #64	; 0x40
2000aa90:	d103      	bne.n	2000aa9a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
2000aa92:	68fb      	ldr	r3, [r7, #12]
2000aa94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2000aa98:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2000aa9a:	687b      	ldr	r3, [r7, #4]
2000aa9c:	681b      	ldr	r3, [r3, #0]
2000aa9e:	6819      	ldr	r1, [r3, #0]
2000aaa0:	68fb      	ldr	r3, [r7, #12]
2000aaa2:	43da      	mvns	r2, r3
2000aaa4:	687b      	ldr	r3, [r7, #4]
2000aaa6:	681b      	ldr	r3, [r3, #0]
2000aaa8:	400a      	ands	r2, r1
2000aaaa:	601a      	str	r2, [r3, #0]
}
2000aaac:	bf00      	nop
2000aaae:	3714      	adds	r7, #20
2000aab0:	46bd      	mov	sp, r7
2000aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
2000aab6:	4770      	bx	lr

2000aab8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
2000aab8:	b480      	push	{r7}
2000aaba:	b083      	sub	sp, #12
2000aabc:	af00      	add	r7, sp, #0
2000aabe:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
2000aac0:	687b      	ldr	r3, [r7, #4]
2000aac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000aac4:	2baa      	cmp	r3, #170	; 0xaa
2000aac6:	d103      	bne.n	2000aad0 <I2C_ConvertOtherXferOptions+0x18>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
2000aac8:	687b      	ldr	r3, [r7, #4]
2000aaca:	2200      	movs	r2, #0
2000aacc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
2000aace:	e008      	b.n	2000aae2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
2000aad0:	687b      	ldr	r3, [r7, #4]
2000aad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000aad4:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
2000aad8:	d103      	bne.n	2000aae2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
2000aada:	687b      	ldr	r3, [r7, #4]
2000aadc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
2000aae0:	62da      	str	r2, [r3, #44]	; 0x2c
}
2000aae2:	bf00      	nop
2000aae4:	370c      	adds	r7, #12
2000aae6:	46bd      	mov	sp, r7
2000aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
2000aaec:	4770      	bx	lr

2000aaee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
2000aaee:	b480      	push	{r7}
2000aaf0:	b083      	sub	sp, #12
2000aaf2:	af00      	add	r7, sp, #0
2000aaf4:	6078      	str	r0, [r7, #4]
2000aaf6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
2000aaf8:	687b      	ldr	r3, [r7, #4]
2000aafa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000aafe:	b2db      	uxtb	r3, r3
2000ab00:	2b20      	cmp	r3, #32
2000ab02:	d138      	bne.n	2000ab76 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2000ab04:	687b      	ldr	r3, [r7, #4]
2000ab06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2000ab0a:	2b01      	cmp	r3, #1
2000ab0c:	d101      	bne.n	2000ab12 <HAL_I2CEx_ConfigAnalogFilter+0x24>
2000ab0e:	2302      	movs	r3, #2
2000ab10:	e032      	b.n	2000ab78 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
2000ab12:	687b      	ldr	r3, [r7, #4]
2000ab14:	2201      	movs	r2, #1
2000ab16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
2000ab1a:	687b      	ldr	r3, [r7, #4]
2000ab1c:	2224      	movs	r2, #36	; 0x24
2000ab1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
2000ab22:	687b      	ldr	r3, [r7, #4]
2000ab24:	681b      	ldr	r3, [r3, #0]
2000ab26:	681a      	ldr	r2, [r3, #0]
2000ab28:	687b      	ldr	r3, [r7, #4]
2000ab2a:	681b      	ldr	r3, [r3, #0]
2000ab2c:	f022 0201 	bic.w	r2, r2, #1
2000ab30:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
2000ab32:	687b      	ldr	r3, [r7, #4]
2000ab34:	681b      	ldr	r3, [r3, #0]
2000ab36:	681a      	ldr	r2, [r3, #0]
2000ab38:	687b      	ldr	r3, [r7, #4]
2000ab3a:	681b      	ldr	r3, [r3, #0]
2000ab3c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
2000ab40:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
2000ab42:	687b      	ldr	r3, [r7, #4]
2000ab44:	681b      	ldr	r3, [r3, #0]
2000ab46:	6819      	ldr	r1, [r3, #0]
2000ab48:	687b      	ldr	r3, [r7, #4]
2000ab4a:	681b      	ldr	r3, [r3, #0]
2000ab4c:	683a      	ldr	r2, [r7, #0]
2000ab4e:	430a      	orrs	r2, r1
2000ab50:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
2000ab52:	687b      	ldr	r3, [r7, #4]
2000ab54:	681b      	ldr	r3, [r3, #0]
2000ab56:	681a      	ldr	r2, [r3, #0]
2000ab58:	687b      	ldr	r3, [r7, #4]
2000ab5a:	681b      	ldr	r3, [r3, #0]
2000ab5c:	f042 0201 	orr.w	r2, r2, #1
2000ab60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
2000ab62:	687b      	ldr	r3, [r7, #4]
2000ab64:	2220      	movs	r2, #32
2000ab66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2000ab6a:	687b      	ldr	r3, [r7, #4]
2000ab6c:	2200      	movs	r2, #0
2000ab6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2000ab72:	2300      	movs	r3, #0
2000ab74:	e000      	b.n	2000ab78 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
2000ab76:	2302      	movs	r3, #2
  }
}
2000ab78:	4618      	mov	r0, r3
2000ab7a:	370c      	adds	r7, #12
2000ab7c:	46bd      	mov	sp, r7
2000ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000ab82:	4770      	bx	lr

2000ab84 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
2000ab84:	b480      	push	{r7}
2000ab86:	b085      	sub	sp, #20
2000ab88:	af00      	add	r7, sp, #0
2000ab8a:	6078      	str	r0, [r7, #4]
2000ab8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
2000ab8e:	687b      	ldr	r3, [r7, #4]
2000ab90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000ab94:	b2db      	uxtb	r3, r3
2000ab96:	2b20      	cmp	r3, #32
2000ab98:	d139      	bne.n	2000ac0e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2000ab9a:	687b      	ldr	r3, [r7, #4]
2000ab9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2000aba0:	2b01      	cmp	r3, #1
2000aba2:	d101      	bne.n	2000aba8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
2000aba4:	2302      	movs	r3, #2
2000aba6:	e033      	b.n	2000ac10 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
2000aba8:	687b      	ldr	r3, [r7, #4]
2000abaa:	2201      	movs	r2, #1
2000abac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
2000abb0:	687b      	ldr	r3, [r7, #4]
2000abb2:	2224      	movs	r2, #36	; 0x24
2000abb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
2000abb8:	687b      	ldr	r3, [r7, #4]
2000abba:	681b      	ldr	r3, [r3, #0]
2000abbc:	681a      	ldr	r2, [r3, #0]
2000abbe:	687b      	ldr	r3, [r7, #4]
2000abc0:	681b      	ldr	r3, [r3, #0]
2000abc2:	f022 0201 	bic.w	r2, r2, #1
2000abc6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
2000abc8:	687b      	ldr	r3, [r7, #4]
2000abca:	681b      	ldr	r3, [r3, #0]
2000abcc:	681b      	ldr	r3, [r3, #0]
2000abce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
2000abd0:	68fb      	ldr	r3, [r7, #12]
2000abd2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
2000abd6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
2000abd8:	683b      	ldr	r3, [r7, #0]
2000abda:	021b      	lsls	r3, r3, #8
2000abdc:	68fa      	ldr	r2, [r7, #12]
2000abde:	4313      	orrs	r3, r2
2000abe0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
2000abe2:	687b      	ldr	r3, [r7, #4]
2000abe4:	681b      	ldr	r3, [r3, #0]
2000abe6:	68fa      	ldr	r2, [r7, #12]
2000abe8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
2000abea:	687b      	ldr	r3, [r7, #4]
2000abec:	681b      	ldr	r3, [r3, #0]
2000abee:	681a      	ldr	r2, [r3, #0]
2000abf0:	687b      	ldr	r3, [r7, #4]
2000abf2:	681b      	ldr	r3, [r3, #0]
2000abf4:	f042 0201 	orr.w	r2, r2, #1
2000abf8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
2000abfa:	687b      	ldr	r3, [r7, #4]
2000abfc:	2220      	movs	r2, #32
2000abfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2000ac02:	687b      	ldr	r3, [r7, #4]
2000ac04:	2200      	movs	r2, #0
2000ac06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
2000ac0a:	2300      	movs	r3, #0
2000ac0c:	e000      	b.n	2000ac10 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
2000ac0e:	2302      	movs	r3, #2
  }
}
2000ac10:	4618      	mov	r0, r3
2000ac12:	3714      	adds	r7, #20
2000ac14:	46bd      	mov	sp, r7
2000ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
2000ac1a:	4770      	bx	lr

2000ac1c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
2000ac1c:	b480      	push	{r7}
2000ac1e:	b085      	sub	sp, #20
2000ac20:	af00      	add	r7, sp, #0
2000ac22:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
2000ac24:	4b0b      	ldr	r3, [pc, #44]	; (2000ac54 <HAL_I2CEx_EnableFastModePlus+0x38>)
2000ac26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000ac28:	4a0a      	ldr	r2, [pc, #40]	; (2000ac54 <HAL_I2CEx_EnableFastModePlus+0x38>)
2000ac2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2000ac2e:	6453      	str	r3, [r2, #68]	; 0x44
2000ac30:	4b08      	ldr	r3, [pc, #32]	; (2000ac54 <HAL_I2CEx_EnableFastModePlus+0x38>)
2000ac32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000ac34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2000ac38:	60fb      	str	r3, [r7, #12]
2000ac3a:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMC, (uint32_t)ConfigFastModePlus);
2000ac3c:	4b06      	ldr	r3, [pc, #24]	; (2000ac58 <HAL_I2CEx_EnableFastModePlus+0x3c>)
2000ac3e:	685a      	ldr	r2, [r3, #4]
2000ac40:	4905      	ldr	r1, [pc, #20]	; (2000ac58 <HAL_I2CEx_EnableFastModePlus+0x3c>)
2000ac42:	687b      	ldr	r3, [r7, #4]
2000ac44:	4313      	orrs	r3, r2
2000ac46:	604b      	str	r3, [r1, #4]
}
2000ac48:	bf00      	nop
2000ac4a:	3714      	adds	r7, #20
2000ac4c:	46bd      	mov	sp, r7
2000ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000ac52:	4770      	bx	lr
2000ac54:	40023800 	.word	0x40023800
2000ac58:	40013800 	.word	0x40013800

2000ac5c <HAL_I2CEx_DisableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be disabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_DisableFastModePlus(uint32_t ConfigFastModePlus)
{
2000ac5c:	b480      	push	{r7}
2000ac5e:	b085      	sub	sp, #20
2000ac60:	af00      	add	r7, sp, #0
2000ac62:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
2000ac64:	4b0c      	ldr	r3, [pc, #48]	; (2000ac98 <HAL_I2CEx_DisableFastModePlus+0x3c>)
2000ac66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000ac68:	4a0b      	ldr	r2, [pc, #44]	; (2000ac98 <HAL_I2CEx_DisableFastModePlus+0x3c>)
2000ac6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2000ac6e:	6453      	str	r3, [r2, #68]	; 0x44
2000ac70:	4b09      	ldr	r3, [pc, #36]	; (2000ac98 <HAL_I2CEx_DisableFastModePlus+0x3c>)
2000ac72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000ac74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2000ac78:	60fb      	str	r3, [r7, #12]
2000ac7a:	68fb      	ldr	r3, [r7, #12]

  /* Disable fast mode plus driving capability for selected pin */
  CLEAR_BIT(SYSCFG->PMC, (uint32_t)ConfigFastModePlus);
2000ac7c:	4b07      	ldr	r3, [pc, #28]	; (2000ac9c <HAL_I2CEx_DisableFastModePlus+0x40>)
2000ac7e:	685a      	ldr	r2, [r3, #4]
2000ac80:	687b      	ldr	r3, [r7, #4]
2000ac82:	43db      	mvns	r3, r3
2000ac84:	4905      	ldr	r1, [pc, #20]	; (2000ac9c <HAL_I2CEx_DisableFastModePlus+0x40>)
2000ac86:	4013      	ands	r3, r2
2000ac88:	604b      	str	r3, [r1, #4]
}
2000ac8a:	bf00      	nop
2000ac8c:	3714      	adds	r7, #20
2000ac8e:	46bd      	mov	sp, r7
2000ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
2000ac94:	4770      	bx	lr
2000ac96:	bf00      	nop
2000ac98:	40023800 	.word	0x40023800
2000ac9c:	40013800 	.word	0x40013800

2000aca0 <HAL_PWR_DeInit>:
/**
  * @brief Deinitializes the HAL PWR peripheral registers to their default reset values.
  * @retval None
  */
void HAL_PWR_DeInit(void)
{
2000aca0:	b480      	push	{r7}
2000aca2:	af00      	add	r7, sp, #0
  __HAL_RCC_PWR_FORCE_RESET();
2000aca4:	4b08      	ldr	r3, [pc, #32]	; (2000acc8 <HAL_PWR_DeInit+0x28>)
2000aca6:	6a1b      	ldr	r3, [r3, #32]
2000aca8:	4a07      	ldr	r2, [pc, #28]	; (2000acc8 <HAL_PWR_DeInit+0x28>)
2000acaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000acae:	6213      	str	r3, [r2, #32]
  __HAL_RCC_PWR_RELEASE_RESET();
2000acb0:	4b05      	ldr	r3, [pc, #20]	; (2000acc8 <HAL_PWR_DeInit+0x28>)
2000acb2:	6a1b      	ldr	r3, [r3, #32]
2000acb4:	4a04      	ldr	r2, [pc, #16]	; (2000acc8 <HAL_PWR_DeInit+0x28>)
2000acb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
2000acba:	6213      	str	r3, [r2, #32]
}
2000acbc:	bf00      	nop
2000acbe:	46bd      	mov	sp, r7
2000acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
2000acc4:	4770      	bx	lr
2000acc6:	bf00      	nop
2000acc8:	40023800 	.word	0x40023800

2000accc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
2000accc:	b480      	push	{r7}
2000acce:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
2000acd0:	4b05      	ldr	r3, [pc, #20]	; (2000ace8 <HAL_PWR_EnableBkUpAccess+0x1c>)
2000acd2:	681b      	ldr	r3, [r3, #0]
2000acd4:	4a04      	ldr	r2, [pc, #16]	; (2000ace8 <HAL_PWR_EnableBkUpAccess+0x1c>)
2000acd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2000acda:	6013      	str	r3, [r2, #0]
}
2000acdc:	bf00      	nop
2000acde:	46bd      	mov	sp, r7
2000ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
2000ace4:	4770      	bx	lr
2000ace6:	bf00      	nop
2000ace8:	40007000 	.word	0x40007000

2000acec <HAL_PWR_DisableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
2000acec:	b480      	push	{r7}
2000acee:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
	CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
2000acf0:	4b05      	ldr	r3, [pc, #20]	; (2000ad08 <HAL_PWR_DisableBkUpAccess+0x1c>)
2000acf2:	681b      	ldr	r3, [r3, #0]
2000acf4:	4a04      	ldr	r2, [pc, #16]	; (2000ad08 <HAL_PWR_DisableBkUpAccess+0x1c>)
2000acf6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
2000acfa:	6013      	str	r3, [r2, #0]
}
2000acfc:	bf00      	nop
2000acfe:	46bd      	mov	sp, r7
2000ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
2000ad04:	4770      	bx	lr
2000ad06:	bf00      	nop
2000ad08:	40007000 	.word	0x40007000

2000ad0c <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each 
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
2000ad0c:	b480      	push	{r7}
2000ad0e:	b083      	sub	sp, #12
2000ad10:	af00      	add	r7, sp, #0
2000ad12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
  
  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
2000ad14:	4b2b      	ldr	r3, [pc, #172]	; (2000adc4 <HAL_PWR_ConfigPVD+0xb8>)
2000ad16:	681b      	ldr	r3, [r3, #0]
2000ad18:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
2000ad1c:	687b      	ldr	r3, [r7, #4]
2000ad1e:	681b      	ldr	r3, [r3, #0]
2000ad20:	4928      	ldr	r1, [pc, #160]	; (2000adc4 <HAL_PWR_ConfigPVD+0xb8>)
2000ad22:	4313      	orrs	r3, r2
2000ad24:	600b      	str	r3, [r1, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
2000ad26:	4b28      	ldr	r3, [pc, #160]	; (2000adc8 <HAL_PWR_ConfigPVD+0xbc>)
2000ad28:	685b      	ldr	r3, [r3, #4]
2000ad2a:	4a27      	ldr	r2, [pc, #156]	; (2000adc8 <HAL_PWR_ConfigPVD+0xbc>)
2000ad2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2000ad30:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
2000ad32:	4b25      	ldr	r3, [pc, #148]	; (2000adc8 <HAL_PWR_ConfigPVD+0xbc>)
2000ad34:	681b      	ldr	r3, [r3, #0]
2000ad36:	4a24      	ldr	r2, [pc, #144]	; (2000adc8 <HAL_PWR_ConfigPVD+0xbc>)
2000ad38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2000ad3c:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
2000ad3e:	4b22      	ldr	r3, [pc, #136]	; (2000adc8 <HAL_PWR_ConfigPVD+0xbc>)
2000ad40:	689b      	ldr	r3, [r3, #8]
2000ad42:	4a21      	ldr	r2, [pc, #132]	; (2000adc8 <HAL_PWR_ConfigPVD+0xbc>)
2000ad44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2000ad48:	6093      	str	r3, [r2, #8]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
2000ad4a:	4b1f      	ldr	r3, [pc, #124]	; (2000adc8 <HAL_PWR_ConfigPVD+0xbc>)
2000ad4c:	68db      	ldr	r3, [r3, #12]
2000ad4e:	4a1e      	ldr	r2, [pc, #120]	; (2000adc8 <HAL_PWR_ConfigPVD+0xbc>)
2000ad50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2000ad54:	60d3      	str	r3, [r2, #12]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
2000ad56:	687b      	ldr	r3, [r7, #4]
2000ad58:	685b      	ldr	r3, [r3, #4]
2000ad5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2000ad5e:	2b00      	cmp	r3, #0
2000ad60:	d005      	beq.n	2000ad6e <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
2000ad62:	4b19      	ldr	r3, [pc, #100]	; (2000adc8 <HAL_PWR_ConfigPVD+0xbc>)
2000ad64:	681b      	ldr	r3, [r3, #0]
2000ad66:	4a18      	ldr	r2, [pc, #96]	; (2000adc8 <HAL_PWR_ConfigPVD+0xbc>)
2000ad68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000ad6c:	6013      	str	r3, [r2, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
2000ad6e:	687b      	ldr	r3, [r7, #4]
2000ad70:	685b      	ldr	r3, [r3, #4]
2000ad72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000ad76:	2b00      	cmp	r3, #0
2000ad78:	d005      	beq.n	2000ad86 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
2000ad7a:	4b13      	ldr	r3, [pc, #76]	; (2000adc8 <HAL_PWR_ConfigPVD+0xbc>)
2000ad7c:	685b      	ldr	r3, [r3, #4]
2000ad7e:	4a12      	ldr	r2, [pc, #72]	; (2000adc8 <HAL_PWR_ConfigPVD+0xbc>)
2000ad80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000ad84:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
2000ad86:	687b      	ldr	r3, [r7, #4]
2000ad88:	685b      	ldr	r3, [r3, #4]
2000ad8a:	f003 0301 	and.w	r3, r3, #1
2000ad8e:	2b00      	cmp	r3, #0
2000ad90:	d005      	beq.n	2000ad9e <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
2000ad92:	4b0d      	ldr	r3, [pc, #52]	; (2000adc8 <HAL_PWR_ConfigPVD+0xbc>)
2000ad94:	689b      	ldr	r3, [r3, #8]
2000ad96:	4a0c      	ldr	r2, [pc, #48]	; (2000adc8 <HAL_PWR_ConfigPVD+0xbc>)
2000ad98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000ad9c:	6093      	str	r3, [r2, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
2000ad9e:	687b      	ldr	r3, [r7, #4]
2000ada0:	685b      	ldr	r3, [r3, #4]
2000ada2:	f003 0302 	and.w	r3, r3, #2
2000ada6:	2b00      	cmp	r3, #0
2000ada8:	d005      	beq.n	2000adb6 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
2000adaa:	4b07      	ldr	r3, [pc, #28]	; (2000adc8 <HAL_PWR_ConfigPVD+0xbc>)
2000adac:	68db      	ldr	r3, [r3, #12]
2000adae:	4a06      	ldr	r2, [pc, #24]	; (2000adc8 <HAL_PWR_ConfigPVD+0xbc>)
2000adb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000adb4:	60d3      	str	r3, [r2, #12]
  }
}
2000adb6:	bf00      	nop
2000adb8:	370c      	adds	r7, #12
2000adba:	46bd      	mov	sp, r7
2000adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
2000adc0:	4770      	bx	lr
2000adc2:	bf00      	nop
2000adc4:	40007000 	.word	0x40007000
2000adc8:	40013c00 	.word	0x40013c00

2000adcc <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
2000adcc:	b480      	push	{r7}
2000adce:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
	SET_BIT(PWR->CR1, PWR_CR1_PVDE);
2000add0:	4b05      	ldr	r3, [pc, #20]	; (2000ade8 <HAL_PWR_EnablePVD+0x1c>)
2000add2:	681b      	ldr	r3, [r3, #0]
2000add4:	4a04      	ldr	r2, [pc, #16]	; (2000ade8 <HAL_PWR_EnablePVD+0x1c>)
2000add6:	f043 0310 	orr.w	r3, r3, #16
2000adda:	6013      	str	r3, [r2, #0]
}
2000addc:	bf00      	nop
2000adde:	46bd      	mov	sp, r7
2000ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
2000ade4:	4770      	bx	lr
2000ade6:	bf00      	nop
2000ade8:	40007000 	.word	0x40007000

2000adec <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
2000adec:	b480      	push	{r7}
2000adee:	af00      	add	r7, sp, #0
  /* Disable the power voltage detector */
	CLEAR_BIT(PWR->CR1, PWR_CR1_PVDE);
2000adf0:	4b05      	ldr	r3, [pc, #20]	; (2000ae08 <HAL_PWR_DisablePVD+0x1c>)
2000adf2:	681b      	ldr	r3, [r3, #0]
2000adf4:	4a04      	ldr	r2, [pc, #16]	; (2000ae08 <HAL_PWR_DisablePVD+0x1c>)
2000adf6:	f023 0310 	bic.w	r3, r3, #16
2000adfa:	6013      	str	r3, [r2, #0]
}
2000adfc:	bf00      	nop
2000adfe:	46bd      	mov	sp, r7
2000ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
2000ae04:	4770      	bx	lr
2000ae06:	bf00      	nop
2000ae08:	40007000 	.word	0x40007000

2000ae0c <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN6_HIGH or PWR_WAKEUP_PIN6_LOW 
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.               
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
2000ae0c:	b480      	push	{r7}
2000ae0e:	b083      	sub	sp, #12
2000ae10:	af00      	add	r7, sp, #0
2000ae12:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));
  
  /* Enable wake-up pin */
  SET_BIT(PWR->CSR2, (PWR_EWUP_MASK & WakeUpPinPolarity));
2000ae14:	4b0c      	ldr	r3, [pc, #48]	; (2000ae48 <HAL_PWR_EnableWakeUpPin+0x3c>)
2000ae16:	68da      	ldr	r2, [r3, #12]
2000ae18:	687b      	ldr	r3, [r7, #4]
2000ae1a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
2000ae1e:	490a      	ldr	r1, [pc, #40]	; (2000ae48 <HAL_PWR_EnableWakeUpPin+0x3c>)
2000ae20:	4313      	orrs	r3, r2
2000ae22:	60cb      	str	r3, [r1, #12]
	
  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR2, (PWR_EWUP_MASK & WakeUpPinPolarity), (WakeUpPinPolarity >> 0x06));
2000ae24:	4b08      	ldr	r3, [pc, #32]	; (2000ae48 <HAL_PWR_EnableWakeUpPin+0x3c>)
2000ae26:	689a      	ldr	r2, [r3, #8]
2000ae28:	687b      	ldr	r3, [r7, #4]
2000ae2a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
2000ae2e:	43db      	mvns	r3, r3
2000ae30:	401a      	ands	r2, r3
2000ae32:	687b      	ldr	r3, [r7, #4]
2000ae34:	099b      	lsrs	r3, r3, #6
2000ae36:	4904      	ldr	r1, [pc, #16]	; (2000ae48 <HAL_PWR_EnableWakeUpPin+0x3c>)
2000ae38:	4313      	orrs	r3, r2
2000ae3a:	608b      	str	r3, [r1, #8]
}
2000ae3c:	bf00      	nop
2000ae3e:	370c      	adds	r7, #12
2000ae40:	46bd      	mov	sp, r7
2000ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
2000ae46:	4770      	bx	lr
2000ae48:	40007000 	.word	0x40007000

2000ae4c <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN5
  *           @arg PWR_WAKEUP_PIN6 
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
2000ae4c:	b480      	push	{r7}
2000ae4e:	b083      	sub	sp, #12
2000ae50:	af00      	add	r7, sp, #0
2000ae52:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CSR2, WakeUpPinx);
2000ae54:	4b06      	ldr	r3, [pc, #24]	; (2000ae70 <HAL_PWR_DisableWakeUpPin+0x24>)
2000ae56:	68da      	ldr	r2, [r3, #12]
2000ae58:	687b      	ldr	r3, [r7, #4]
2000ae5a:	43db      	mvns	r3, r3
2000ae5c:	4904      	ldr	r1, [pc, #16]	; (2000ae70 <HAL_PWR_DisableWakeUpPin+0x24>)
2000ae5e:	4013      	ands	r3, r2
2000ae60:	60cb      	str	r3, [r1, #12]
}
2000ae62:	bf00      	nop
2000ae64:	370c      	adds	r7, #12
2000ae66:	46bd      	mov	sp, r7
2000ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
2000ae6c:	4770      	bx	lr
2000ae6e:	bf00      	nop
2000ae70:	40007000 	.word	0x40007000

2000ae74 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
2000ae74:	b480      	push	{r7}
2000ae76:	b083      	sub	sp, #12
2000ae78:	af00      	add	r7, sp, #0
2000ae7a:	6078      	str	r0, [r7, #4]
2000ae7c:	460b      	mov	r3, r1
2000ae7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
2000ae80:	4b0c      	ldr	r3, [pc, #48]	; (2000aeb4 <HAL_PWR_EnterSLEEPMode+0x40>)
2000ae82:	691b      	ldr	r3, [r3, #16]
2000ae84:	4a0b      	ldr	r2, [pc, #44]	; (2000aeb4 <HAL_PWR_EnterSLEEPMode+0x40>)
2000ae86:	f023 0304 	bic.w	r3, r3, #4
2000ae8a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
2000ae8c:	f3bf 8f4f 	dsb	sy
}
2000ae90:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
2000ae92:	f3bf 8f6f 	isb	sy
}
2000ae96:	bf00      	nop
  /* Ensure that all instructions done before entering SLEEP mode */
  __DSB();
  __ISB();

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
2000ae98:	78fb      	ldrb	r3, [r7, #3]
2000ae9a:	2b01      	cmp	r3, #1
2000ae9c:	d101      	bne.n	2000aea2 <HAL_PWR_EnterSLEEPMode+0x2e>
  {   
    /* Request Wait For Interrupt */
    __WFI();
2000ae9e:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
2000aea0:	e002      	b.n	2000aea8 <HAL_PWR_EnterSLEEPMode+0x34>
    __SEV();
2000aea2:	bf40      	sev
    __WFE();
2000aea4:	bf20      	wfe
    __WFE();
2000aea6:	bf20      	wfe
}
2000aea8:	bf00      	nop
2000aeaa:	370c      	adds	r7, #12
2000aeac:	46bd      	mov	sp, r7
2000aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
2000aeb2:	4770      	bx	lr
2000aeb4:	e000ed00 	.word	0xe000ed00

2000aeb8 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
2000aeb8:	b480      	push	{r7}
2000aeba:	b085      	sub	sp, #20
2000aebc:	af00      	add	r7, sp, #0
2000aebe:	6078      	str	r0, [r7, #4]
2000aec0:	460b      	mov	r3, r1
2000aec2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
2000aec4:	2300      	movs	r3, #0
2000aec6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR1;
2000aec8:	4b16      	ldr	r3, [pc, #88]	; (2000af24 <HAL_PWR_EnterSTOPMode+0x6c>)
2000aeca:	681b      	ldr	r3, [r3, #0]
2000aecc:	60fb      	str	r3, [r7, #12]
  /* Clear PDDS and LPDS bits */
  tmpreg &= (uint32_t)~(PWR_CR1_PDDS | PWR_CR1_LPDS);
2000aece:	68fb      	ldr	r3, [r7, #12]
2000aed0:	f023 0303 	bic.w	r3, r3, #3
2000aed4:	60fb      	str	r3, [r7, #12]

  /* Set LPDS, MRLVDS and LPLVDS bits according to Regulator value */
  tmpreg |= Regulator;
2000aed6:	68fa      	ldr	r2, [r7, #12]
2000aed8:	687b      	ldr	r3, [r7, #4]
2000aeda:	4313      	orrs	r3, r2
2000aedc:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR1 = tmpreg;
2000aede:	4a11      	ldr	r2, [pc, #68]	; (2000af24 <HAL_PWR_EnterSTOPMode+0x6c>)
2000aee0:	68fb      	ldr	r3, [r7, #12]
2000aee2:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
2000aee4:	4b10      	ldr	r3, [pc, #64]	; (2000af28 <HAL_PWR_EnterSTOPMode+0x70>)
2000aee6:	691b      	ldr	r3, [r3, #16]
2000aee8:	4a0f      	ldr	r2, [pc, #60]	; (2000af28 <HAL_PWR_EnterSTOPMode+0x70>)
2000aeea:	f043 0304 	orr.w	r3, r3, #4
2000aeee:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
2000aef0:	f3bf 8f4f 	dsb	sy
}
2000aef4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
2000aef6:	f3bf 8f6f 	isb	sy
}
2000aefa:	bf00      	nop
  /* Ensure that all instructions done before entering STOP mode */
  __DSB();
  __ISB();

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
2000aefc:	78fb      	ldrb	r3, [r7, #3]
2000aefe:	2b01      	cmp	r3, #1
2000af00:	d101      	bne.n	2000af06 <HAL_PWR_EnterSTOPMode+0x4e>
  {   
    /* Request Wait For Interrupt */
    __WFI();
2000af02:	bf30      	wfi
2000af04:	e002      	b.n	2000af0c <HAL_PWR_EnterSTOPMode+0x54>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
2000af06:	bf40      	sev
    __WFE();
2000af08:	bf20      	wfe
    __WFE();
2000af0a:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
2000af0c:	4b06      	ldr	r3, [pc, #24]	; (2000af28 <HAL_PWR_EnterSTOPMode+0x70>)
2000af0e:	691b      	ldr	r3, [r3, #16]
2000af10:	4a05      	ldr	r2, [pc, #20]	; (2000af28 <HAL_PWR_EnterSTOPMode+0x70>)
2000af12:	f023 0304 	bic.w	r3, r3, #4
2000af16:	6113      	str	r3, [r2, #16]
}
2000af18:	bf00      	nop
2000af1a:	3714      	adds	r7, #20
2000af1c:	46bd      	mov	sp, r7
2000af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000af22:	4770      	bx	lr
2000af24:	40007000 	.word	0x40007000
2000af28:	e000ed00 	.word	0xe000ed00

2000af2c <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pins if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
2000af2c:	b480      	push	{r7}
2000af2e:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  PWR->CR1 |= PWR_CR1_PDDS;
2000af30:	4b08      	ldr	r3, [pc, #32]	; (2000af54 <HAL_PWR_EnterSTANDBYMode+0x28>)
2000af32:	681b      	ldr	r3, [r3, #0]
2000af34:	4a07      	ldr	r2, [pc, #28]	; (2000af54 <HAL_PWR_EnterSTANDBYMode+0x28>)
2000af36:	f043 0302 	orr.w	r3, r3, #2
2000af3a:	6013      	str	r3, [r2, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
2000af3c:	4b06      	ldr	r3, [pc, #24]	; (2000af58 <HAL_PWR_EnterSTANDBYMode+0x2c>)
2000af3e:	691b      	ldr	r3, [r3, #16]
2000af40:	4a05      	ldr	r2, [pc, #20]	; (2000af58 <HAL_PWR_EnterSTANDBYMode+0x2c>)
2000af42:	f043 0304 	orr.w	r3, r3, #4
2000af46:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
2000af48:	bf30      	wfi
}
2000af4a:	bf00      	nop
2000af4c:	46bd      	mov	sp, r7
2000af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000af52:	4770      	bx	lr
2000af54:	40007000 	.word	0x40007000
2000af58:	e000ed00 	.word	0xe000ed00

2000af5c <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
2000af5c:	b580      	push	{r7, lr}
2000af5e:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
2000af60:	4b06      	ldr	r3, [pc, #24]	; (2000af7c <HAL_PWR_PVD_IRQHandler+0x20>)
2000af62:	695b      	ldr	r3, [r3, #20]
2000af64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2000af68:	2b00      	cmp	r3, #0
2000af6a:	d005      	beq.n	2000af78 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
2000af6c:	f000 f808 	bl	2000af80 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
2000af70:	4b02      	ldr	r3, [pc, #8]	; (2000af7c <HAL_PWR_PVD_IRQHandler+0x20>)
2000af72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
2000af76:	615a      	str	r2, [r3, #20]
  }
}
2000af78:	bf00      	nop
2000af7a:	bd80      	pop	{r7, pc}
2000af7c:	40013c00 	.word	0x40013c00

2000af80 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
2000af80:	b480      	push	{r7}
2000af82:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
2000af84:	bf00      	nop
2000af86:	46bd      	mov	sp, r7
2000af88:	f85d 7b04 	ldr.w	r7, [sp], #4
2000af8c:	4770      	bx	lr
	...

2000af90 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
2000af90:	b480      	push	{r7}
2000af92:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
2000af94:	4b05      	ldr	r3, [pc, #20]	; (2000afac <HAL_PWR_EnableSleepOnExit+0x1c>)
2000af96:	691b      	ldr	r3, [r3, #16]
2000af98:	4a04      	ldr	r2, [pc, #16]	; (2000afac <HAL_PWR_EnableSleepOnExit+0x1c>)
2000af9a:	f043 0302 	orr.w	r3, r3, #2
2000af9e:	6113      	str	r3, [r2, #16]
}
2000afa0:	bf00      	nop
2000afa2:	46bd      	mov	sp, r7
2000afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
2000afa8:	4770      	bx	lr
2000afaa:	bf00      	nop
2000afac:	e000ed00 	.word	0xe000ed00

2000afb0 <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
2000afb0:	b480      	push	{r7}
2000afb2:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
2000afb4:	4b05      	ldr	r3, [pc, #20]	; (2000afcc <HAL_PWR_DisableSleepOnExit+0x1c>)
2000afb6:	691b      	ldr	r3, [r3, #16]
2000afb8:	4a04      	ldr	r2, [pc, #16]	; (2000afcc <HAL_PWR_DisableSleepOnExit+0x1c>)
2000afba:	f023 0302 	bic.w	r3, r3, #2
2000afbe:	6113      	str	r3, [r2, #16]
}
2000afc0:	bf00      	nop
2000afc2:	46bd      	mov	sp, r7
2000afc4:	f85d 7b04 	ldr.w	r7, [sp], #4
2000afc8:	4770      	bx	lr
2000afca:	bf00      	nop
2000afcc:	e000ed00 	.word	0xe000ed00

2000afd0 <HAL_PWR_EnableSEVOnPend>:
  * @note Sets SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
2000afd0:	b480      	push	{r7}
2000afd2:	af00      	add	r7, sp, #0
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
2000afd4:	4b05      	ldr	r3, [pc, #20]	; (2000afec <HAL_PWR_EnableSEVOnPend+0x1c>)
2000afd6:	691b      	ldr	r3, [r3, #16]
2000afd8:	4a04      	ldr	r2, [pc, #16]	; (2000afec <HAL_PWR_EnableSEVOnPend+0x1c>)
2000afda:	f043 0310 	orr.w	r3, r3, #16
2000afde:	6113      	str	r3, [r2, #16]
}
2000afe0:	bf00      	nop
2000afe2:	46bd      	mov	sp, r7
2000afe4:	f85d 7b04 	ldr.w	r7, [sp], #4
2000afe8:	4770      	bx	lr
2000afea:	bf00      	nop
2000afec:	e000ed00 	.word	0xe000ed00

2000aff0 <HAL_PWR_DisableSEVOnPend>:
  * @note Clears SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.         
  * @retval None
  */
void HAL_PWR_DisableSEVOnPend(void)
{
2000aff0:	b480      	push	{r7}
2000aff2:	af00      	add	r7, sp, #0
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
2000aff4:	4b05      	ldr	r3, [pc, #20]	; (2000b00c <HAL_PWR_DisableSEVOnPend+0x1c>)
2000aff6:	691b      	ldr	r3, [r3, #16]
2000aff8:	4a04      	ldr	r2, [pc, #16]	; (2000b00c <HAL_PWR_DisableSEVOnPend+0x1c>)
2000affa:	f023 0310 	bic.w	r3, r3, #16
2000affe:	6113      	str	r3, [r2, #16]
}
2000b000:	bf00      	nop
2000b002:	46bd      	mov	sp, r7
2000b004:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b008:	4770      	bx	lr
2000b00a:	bf00      	nop
2000b00c:	e000ed00 	.word	0xe000ed00

2000b010 <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
2000b010:	b580      	push	{r7, lr}
2000b012:	b082      	sub	sp, #8
2000b014:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
2000b016:	2300      	movs	r3, #0
2000b018:	607b      	str	r3, [r7, #4]

  /* Enable Backup regulator */
  PWR->CSR1 |= PWR_CSR1_BRE;
2000b01a:	4b12      	ldr	r3, [pc, #72]	; (2000b064 <HAL_PWREx_EnableBkUpReg+0x54>)
2000b01c:	685b      	ldr	r3, [r3, #4]
2000b01e:	4a11      	ldr	r2, [pc, #68]	; (2000b064 <HAL_PWREx_EnableBkUpReg+0x54>)
2000b020:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2000b024:	6053      	str	r3, [r2, #4]
    
  /* Workaround for the following hardware bug: */
  /* Id 19: PWR : No STANDBY wake-up when Back-up RAM enabled (ref. Errata Sheet p23) */
  PWR->CSR1 |= PWR_CSR1_EIWUP;
2000b026:	4b0f      	ldr	r3, [pc, #60]	; (2000b064 <HAL_PWREx_EnableBkUpReg+0x54>)
2000b028:	685b      	ldr	r3, [r3, #4]
2000b02a:	4a0e      	ldr	r2, [pc, #56]	; (2000b064 <HAL_PWREx_EnableBkUpReg+0x54>)
2000b02c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2000b030:	6053      	str	r3, [r2, #4]

  /* Get tick */
  tickstart = HAL_GetTick();
2000b032:	f7f6 fe91 	bl	20001d58 <HAL_GetTick>
2000b036:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
2000b038:	e009      	b.n	2000b04e <HAL_PWREx_EnableBkUpReg+0x3e>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
2000b03a:	f7f6 fe8d 	bl	20001d58 <HAL_GetTick>
2000b03e:	4602      	mov	r2, r0
2000b040:	687b      	ldr	r3, [r7, #4]
2000b042:	1ad3      	subs	r3, r2, r3
2000b044:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2000b048:	d901      	bls.n	2000b04e <HAL_PWREx_EnableBkUpReg+0x3e>
    {
      return HAL_TIMEOUT;
2000b04a:	2303      	movs	r3, #3
2000b04c:	e006      	b.n	2000b05c <HAL_PWREx_EnableBkUpReg+0x4c>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
2000b04e:	4b05      	ldr	r3, [pc, #20]	; (2000b064 <HAL_PWREx_EnableBkUpReg+0x54>)
2000b050:	685b      	ldr	r3, [r3, #4]
2000b052:	f003 0308 	and.w	r3, r3, #8
2000b056:	2b08      	cmp	r3, #8
2000b058:	d1ef      	bne.n	2000b03a <HAL_PWREx_EnableBkUpReg+0x2a>
    } 
  }
  return HAL_OK;
2000b05a:	2300      	movs	r3, #0
}
2000b05c:	4618      	mov	r0, r3
2000b05e:	3708      	adds	r7, #8
2000b060:	46bd      	mov	sp, r7
2000b062:	bd80      	pop	{r7, pc}
2000b064:	40007000 	.word	0x40007000

2000b068 <HAL_PWREx_DisableBkUpReg>:
/**
  * @brief Disables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg(void)
{
2000b068:	b580      	push	{r7, lr}
2000b06a:	b082      	sub	sp, #8
2000b06c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
2000b06e:	2300      	movs	r3, #0
2000b070:	607b      	str	r3, [r7, #4]
  
  /* Disable Backup regulator */
  PWR->CSR1 &= (uint32_t)~((uint32_t)PWR_CSR1_BRE);
2000b072:	4b12      	ldr	r3, [pc, #72]	; (2000b0bc <HAL_PWREx_DisableBkUpReg+0x54>)
2000b074:	685b      	ldr	r3, [r3, #4]
2000b076:	4a11      	ldr	r2, [pc, #68]	; (2000b0bc <HAL_PWREx_DisableBkUpReg+0x54>)
2000b078:	f423 7300 	bic.w	r3, r3, #512	; 0x200
2000b07c:	6053      	str	r3, [r2, #4]
  
  /* Workaround for the following hardware bug: */
  /* Id 19: PWR : No STANDBY wake-up when Back-up RAM enabled (ref. Errata Sheet p23) */
  PWR->CSR1 |= PWR_CSR1_EIWUP;
2000b07e:	4b0f      	ldr	r3, [pc, #60]	; (2000b0bc <HAL_PWREx_DisableBkUpReg+0x54>)
2000b080:	685b      	ldr	r3, [r3, #4]
2000b082:	4a0e      	ldr	r2, [pc, #56]	; (2000b0bc <HAL_PWREx_DisableBkUpReg+0x54>)
2000b084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2000b088:	6053      	str	r3, [r2, #4]

  /* Get tick */
  tickstart = HAL_GetTick();
2000b08a:	f7f6 fe65 	bl	20001d58 <HAL_GetTick>
2000b08e:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
2000b090:	e009      	b.n	2000b0a6 <HAL_PWREx_DisableBkUpReg+0x3e>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
2000b092:	f7f6 fe61 	bl	20001d58 <HAL_GetTick>
2000b096:	4602      	mov	r2, r0
2000b098:	687b      	ldr	r3, [r7, #4]
2000b09a:	1ad3      	subs	r3, r2, r3
2000b09c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2000b0a0:	d901      	bls.n	2000b0a6 <HAL_PWREx_DisableBkUpReg+0x3e>
    {
      return HAL_TIMEOUT;
2000b0a2:	2303      	movs	r3, #3
2000b0a4:	e006      	b.n	2000b0b4 <HAL_PWREx_DisableBkUpReg+0x4c>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
2000b0a6:	4b05      	ldr	r3, [pc, #20]	; (2000b0bc <HAL_PWREx_DisableBkUpReg+0x54>)
2000b0a8:	685b      	ldr	r3, [r3, #4]
2000b0aa:	f003 0308 	and.w	r3, r3, #8
2000b0ae:	2b08      	cmp	r3, #8
2000b0b0:	d0ef      	beq.n	2000b092 <HAL_PWREx_DisableBkUpReg+0x2a>
    } 
  }
  return HAL_OK;
2000b0b2:	2300      	movs	r3, #0
}
2000b0b4:	4618      	mov	r0, r3
2000b0b6:	3708      	adds	r7, #8
2000b0b8:	46bd      	mov	sp, r7
2000b0ba:	bd80      	pop	{r7, pc}
2000b0bc:	40007000 	.word	0x40007000

2000b0c0 <HAL_PWREx_EnableFlashPowerDown>:
/**
  * @brief Enables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(void)
{
2000b0c0:	b480      	push	{r7}
2000b0c2:	af00      	add	r7, sp, #0
  /* Enable the Flash Power Down */
  PWR->CR1 |= PWR_CR1_FPDS;
2000b0c4:	4b05      	ldr	r3, [pc, #20]	; (2000b0dc <HAL_PWREx_EnableFlashPowerDown+0x1c>)
2000b0c6:	681b      	ldr	r3, [r3, #0]
2000b0c8:	4a04      	ldr	r2, [pc, #16]	; (2000b0dc <HAL_PWREx_EnableFlashPowerDown+0x1c>)
2000b0ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2000b0ce:	6013      	str	r3, [r2, #0]
}
2000b0d0:	bf00      	nop
2000b0d2:	46bd      	mov	sp, r7
2000b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b0d8:	4770      	bx	lr
2000b0da:	bf00      	nop
2000b0dc:	40007000 	.word	0x40007000

2000b0e0 <HAL_PWREx_DisableFlashPowerDown>:
/**
  * @brief Disables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_DisableFlashPowerDown(void)
{
2000b0e0:	b480      	push	{r7}
2000b0e2:	af00      	add	r7, sp, #0
  /* Disable the Flash Power Down */
  PWR->CR1 &= (uint32_t)~((uint32_t)PWR_CR1_FPDS);
2000b0e4:	4b05      	ldr	r3, [pc, #20]	; (2000b0fc <HAL_PWREx_DisableFlashPowerDown+0x1c>)
2000b0e6:	681b      	ldr	r3, [r3, #0]
2000b0e8:	4a04      	ldr	r2, [pc, #16]	; (2000b0fc <HAL_PWREx_DisableFlashPowerDown+0x1c>)
2000b0ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
2000b0ee:	6013      	str	r3, [r2, #0]
}
2000b0f0:	bf00      	nop
2000b0f2:	46bd      	mov	sp, r7
2000b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b0f8:	4770      	bx	lr
2000b0fa:	bf00      	nop
2000b0fc:	40007000 	.word	0x40007000

2000b100 <HAL_PWREx_EnableMainRegulatorLowVoltage>:
/**
  * @brief Enables Main Regulator low voltage mode.
  * @retval None
  */
void HAL_PWREx_EnableMainRegulatorLowVoltage(void)
{
2000b100:	b480      	push	{r7}
2000b102:	af00      	add	r7, sp, #0
  /* Enable Main regulator low voltage */
  PWR->CR1 |= PWR_CR1_MRUDS;
2000b104:	4b05      	ldr	r3, [pc, #20]	; (2000b11c <HAL_PWREx_EnableMainRegulatorLowVoltage+0x1c>)
2000b106:	681b      	ldr	r3, [r3, #0]
2000b108:	4a04      	ldr	r2, [pc, #16]	; (2000b11c <HAL_PWREx_EnableMainRegulatorLowVoltage+0x1c>)
2000b10a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2000b10e:	6013      	str	r3, [r2, #0]
}
2000b110:	bf00      	nop
2000b112:	46bd      	mov	sp, r7
2000b114:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b118:	4770      	bx	lr
2000b11a:	bf00      	nop
2000b11c:	40007000 	.word	0x40007000

2000b120 <HAL_PWREx_DisableMainRegulatorLowVoltage>:
/**
  * @brief Disables Main Regulator low voltage mode.
  * @retval None
  */
void HAL_PWREx_DisableMainRegulatorLowVoltage(void)
{  
2000b120:	b480      	push	{r7}
2000b122:	af00      	add	r7, sp, #0
  /* Disable Main regulator low voltage */
  PWR->CR1 &= (uint32_t)~((uint32_t)PWR_CR1_MRUDS);
2000b124:	4b05      	ldr	r3, [pc, #20]	; (2000b13c <HAL_PWREx_DisableMainRegulatorLowVoltage+0x1c>)
2000b126:	681b      	ldr	r3, [r3, #0]
2000b128:	4a04      	ldr	r2, [pc, #16]	; (2000b13c <HAL_PWREx_DisableMainRegulatorLowVoltage+0x1c>)
2000b12a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
2000b12e:	6013      	str	r3, [r2, #0]
}
2000b130:	bf00      	nop
2000b132:	46bd      	mov	sp, r7
2000b134:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b138:	4770      	bx	lr
2000b13a:	bf00      	nop
2000b13c:	40007000 	.word	0x40007000

2000b140 <HAL_PWREx_EnableLowRegulatorLowVoltage>:
/**
  * @brief Enables Low Power Regulator low voltage mode.
  * @retval None
  */
void HAL_PWREx_EnableLowRegulatorLowVoltage(void)
{
2000b140:	b480      	push	{r7}
2000b142:	af00      	add	r7, sp, #0
  /* Enable low power regulator */
  PWR->CR1 |= PWR_CR1_LPUDS;
2000b144:	4b05      	ldr	r3, [pc, #20]	; (2000b15c <HAL_PWREx_EnableLowRegulatorLowVoltage+0x1c>)
2000b146:	681b      	ldr	r3, [r3, #0]
2000b148:	4a04      	ldr	r2, [pc, #16]	; (2000b15c <HAL_PWREx_EnableLowRegulatorLowVoltage+0x1c>)
2000b14a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2000b14e:	6013      	str	r3, [r2, #0]
}
2000b150:	bf00      	nop
2000b152:	46bd      	mov	sp, r7
2000b154:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b158:	4770      	bx	lr
2000b15a:	bf00      	nop
2000b15c:	40007000 	.word	0x40007000

2000b160 <HAL_PWREx_DisableLowRegulatorLowVoltage>:
/**
  * @brief Disables Low Power Regulator low voltage mode.
  * @retval None
  */
void HAL_PWREx_DisableLowRegulatorLowVoltage(void)
{
2000b160:	b480      	push	{r7}
2000b162:	af00      	add	r7, sp, #0
  /* Disable low power regulator */
  PWR->CR1 &= (uint32_t)~((uint32_t)PWR_CR1_LPUDS);
2000b164:	4b05      	ldr	r3, [pc, #20]	; (2000b17c <HAL_PWREx_DisableLowRegulatorLowVoltage+0x1c>)
2000b166:	681b      	ldr	r3, [r3, #0]
2000b168:	4a04      	ldr	r2, [pc, #16]	; (2000b17c <HAL_PWREx_DisableLowRegulatorLowVoltage+0x1c>)
2000b16a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
2000b16e:	6013      	str	r3, [r2, #0]
}
2000b170:	bf00      	nop
2000b172:	46bd      	mov	sp, r7
2000b174:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b178:	4770      	bx	lr
2000b17a:	bf00      	nop
2000b17c:	40007000 	.word	0x40007000

2000b180 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
2000b180:	b580      	push	{r7, lr}
2000b182:	b082      	sub	sp, #8
2000b184:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
2000b186:	2300      	movs	r3, #0
2000b188:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
2000b18a:	4b23      	ldr	r3, [pc, #140]	; (2000b218 <HAL_PWREx_EnableOverDrive+0x98>)
2000b18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000b18e:	4a22      	ldr	r2, [pc, #136]	; (2000b218 <HAL_PWREx_EnableOverDrive+0x98>)
2000b190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000b194:	6413      	str	r3, [r2, #64]	; 0x40
2000b196:	4b20      	ldr	r3, [pc, #128]	; (2000b218 <HAL_PWREx_EnableOverDrive+0x98>)
2000b198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000b19a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000b19e:	603b      	str	r3, [r7, #0]
2000b1a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
2000b1a2:	4b1e      	ldr	r3, [pc, #120]	; (2000b21c <HAL_PWREx_EnableOverDrive+0x9c>)
2000b1a4:	681b      	ldr	r3, [r3, #0]
2000b1a6:	4a1d      	ldr	r2, [pc, #116]	; (2000b21c <HAL_PWREx_EnableOverDrive+0x9c>)
2000b1a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000b1ac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
2000b1ae:	f7f6 fdd3 	bl	20001d58 <HAL_GetTick>
2000b1b2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
2000b1b4:	e009      	b.n	2000b1ca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
2000b1b6:	f7f6 fdcf 	bl	20001d58 <HAL_GetTick>
2000b1ba:	4602      	mov	r2, r0
2000b1bc:	687b      	ldr	r3, [r7, #4]
2000b1be:	1ad3      	subs	r3, r2, r3
2000b1c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2000b1c4:	d901      	bls.n	2000b1ca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
2000b1c6:	2303      	movs	r3, #3
2000b1c8:	e022      	b.n	2000b210 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
2000b1ca:	4b14      	ldr	r3, [pc, #80]	; (2000b21c <HAL_PWREx_EnableOverDrive+0x9c>)
2000b1cc:	685b      	ldr	r3, [r3, #4]
2000b1ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2000b1d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2000b1d6:	d1ee      	bne.n	2000b1b6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
2000b1d8:	4b10      	ldr	r3, [pc, #64]	; (2000b21c <HAL_PWREx_EnableOverDrive+0x9c>)
2000b1da:	681b      	ldr	r3, [r3, #0]
2000b1dc:	4a0f      	ldr	r2, [pc, #60]	; (2000b21c <HAL_PWREx_EnableOverDrive+0x9c>)
2000b1de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2000b1e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
2000b1e4:	f7f6 fdb8 	bl	20001d58 <HAL_GetTick>
2000b1e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
2000b1ea:	e009      	b.n	2000b200 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
2000b1ec:	f7f6 fdb4 	bl	20001d58 <HAL_GetTick>
2000b1f0:	4602      	mov	r2, r0
2000b1f2:	687b      	ldr	r3, [r7, #4]
2000b1f4:	1ad3      	subs	r3, r2, r3
2000b1f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2000b1fa:	d901      	bls.n	2000b200 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
2000b1fc:	2303      	movs	r3, #3
2000b1fe:	e007      	b.n	2000b210 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
2000b200:	4b06      	ldr	r3, [pc, #24]	; (2000b21c <HAL_PWREx_EnableOverDrive+0x9c>)
2000b202:	685b      	ldr	r3, [r3, #4]
2000b204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000b208:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2000b20c:	d1ee      	bne.n	2000b1ec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
2000b20e:	2300      	movs	r3, #0
}
2000b210:	4618      	mov	r0, r3
2000b212:	3708      	adds	r7, #8
2000b214:	46bd      	mov	sp, r7
2000b216:	bd80      	pop	{r7, pc}
2000b218:	40023800 	.word	0x40023800
2000b21c:	40007000 	.word	0x40007000

2000b220 <HAL_PWREx_DisableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_DisableOverDrive(void)
{
2000b220:	b580      	push	{r7, lr}
2000b222:	b082      	sub	sp, #8
2000b224:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
2000b226:	2300      	movs	r3, #0
2000b228:	607b      	str	r3, [r7, #4]
  
  __HAL_RCC_PWR_CLK_ENABLE();
2000b22a:	4b23      	ldr	r3, [pc, #140]	; (2000b2b8 <HAL_PWREx_DisableOverDrive+0x98>)
2000b22c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000b22e:	4a22      	ldr	r2, [pc, #136]	; (2000b2b8 <HAL_PWREx_DisableOverDrive+0x98>)
2000b230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000b234:	6413      	str	r3, [r2, #64]	; 0x40
2000b236:	4b20      	ldr	r3, [pc, #128]	; (2000b2b8 <HAL_PWREx_DisableOverDrive+0x98>)
2000b238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000b23a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000b23e:	603b      	str	r3, [r7, #0]
2000b240:	683b      	ldr	r3, [r7, #0]
    
  /* Disable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_DISABLE();
2000b242:	4b1e      	ldr	r3, [pc, #120]	; (2000b2bc <HAL_PWREx_DisableOverDrive+0x9c>)
2000b244:	681b      	ldr	r3, [r3, #0]
2000b246:	4a1d      	ldr	r2, [pc, #116]	; (2000b2bc <HAL_PWREx_DisableOverDrive+0x9c>)
2000b248:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
2000b24c:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
2000b24e:	f7f6 fd83 	bl	20001d58 <HAL_GetTick>
2000b252:	6078      	str	r0, [r7, #4]
 
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
2000b254:	e009      	b.n	2000b26a <HAL_PWREx_DisableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
2000b256:	f7f6 fd7f 	bl	20001d58 <HAL_GetTick>
2000b25a:	4602      	mov	r2, r0
2000b25c:	687b      	ldr	r3, [r7, #4]
2000b25e:	1ad3      	subs	r3, r2, r3
2000b260:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2000b264:	d901      	bls.n	2000b26a <HAL_PWREx_DisableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
2000b266:	2303      	movs	r3, #3
2000b268:	e022      	b.n	2000b2b0 <HAL_PWREx_DisableOverDrive+0x90>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
2000b26a:	4b14      	ldr	r3, [pc, #80]	; (2000b2bc <HAL_PWREx_DisableOverDrive+0x9c>)
2000b26c:	685b      	ldr	r3, [r3, #4]
2000b26e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000b272:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2000b276:	d0ee      	beq.n	2000b256 <HAL_PWREx_DisableOverDrive+0x36>
    }
  } 
  
  /* Disable the Over-drive */
  __HAL_PWR_OVERDRIVE_DISABLE();
2000b278:	4b10      	ldr	r3, [pc, #64]	; (2000b2bc <HAL_PWREx_DisableOverDrive+0x9c>)
2000b27a:	681b      	ldr	r3, [r3, #0]
2000b27c:	4a0f      	ldr	r2, [pc, #60]	; (2000b2bc <HAL_PWREx_DisableOverDrive+0x9c>)
2000b27e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2000b282:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
2000b284:	f7f6 fd68 	bl	20001d58 <HAL_GetTick>
2000b288:	6078      	str	r0, [r7, #4]

  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
2000b28a:	e009      	b.n	2000b2a0 <HAL_PWREx_DisableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
2000b28c:	f7f6 fd64 	bl	20001d58 <HAL_GetTick>
2000b290:	4602      	mov	r2, r0
2000b292:	687b      	ldr	r3, [r7, #4]
2000b294:	1ad3      	subs	r3, r2, r3
2000b296:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2000b29a:	d901      	bls.n	2000b2a0 <HAL_PWREx_DisableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
2000b29c:	2303      	movs	r3, #3
2000b29e:	e007      	b.n	2000b2b0 <HAL_PWREx_DisableOverDrive+0x90>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
2000b2a0:	4b06      	ldr	r3, [pc, #24]	; (2000b2bc <HAL_PWREx_DisableOverDrive+0x9c>)
2000b2a2:	685b      	ldr	r3, [r3, #4]
2000b2a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2000b2a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2000b2ac:	d0ee      	beq.n	2000b28c <HAL_PWREx_DisableOverDrive+0x6c>
    }
  }
  
  return HAL_OK;
2000b2ae:	2300      	movs	r3, #0
}
2000b2b0:	4618      	mov	r0, r3
2000b2b2:	3708      	adds	r7, #8
2000b2b4:	46bd      	mov	sp, r7
2000b2b6:	bd80      	pop	{r7, pc}
2000b2b8:	40023800 	.word	0x40023800
2000b2bc:	40007000 	.word	0x40007000

2000b2c0 <HAL_PWREx_EnterUnderDriveSTOPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter STOP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
HAL_StatusTypeDef HAL_PWREx_EnterUnderDriveSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
2000b2c0:	b580      	push	{r7, lr}
2000b2c2:	b086      	sub	sp, #24
2000b2c4:	af00      	add	r7, sp, #0
2000b2c6:	6078      	str	r0, [r7, #4]
2000b2c8:	460b      	mov	r3, r1
2000b2ca:	70fb      	strb	r3, [r7, #3]
  uint32_t tempreg = 0;
2000b2cc:	2300      	movs	r3, #0
2000b2ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
2000b2d0:	2300      	movs	r3, #0
2000b2d2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_UNDERDRIVE(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Enable Power ctrl clock */
  __HAL_RCC_PWR_CLK_ENABLE();
2000b2d4:	4b28      	ldr	r3, [pc, #160]	; (2000b378 <HAL_PWREx_EnterUnderDriveSTOPMode+0xb8>)
2000b2d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000b2d8:	4a27      	ldr	r2, [pc, #156]	; (2000b378 <HAL_PWREx_EnterUnderDriveSTOPMode+0xb8>)
2000b2da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000b2de:	6413      	str	r3, [r2, #64]	; 0x40
2000b2e0:	4b25      	ldr	r3, [pc, #148]	; (2000b378 <HAL_PWREx_EnterUnderDriveSTOPMode+0xb8>)
2000b2e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000b2e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000b2e8:	60fb      	str	r3, [r7, #12]
2000b2ea:	68fb      	ldr	r3, [r7, #12]
  /* Enable the Under-drive Mode ---------------------------------------------*/
  /* Clear Under-drive flag */
  __HAL_PWR_CLEAR_ODRUDR_FLAG();
2000b2ec:	4b23      	ldr	r3, [pc, #140]	; (2000b37c <HAL_PWREx_EnterUnderDriveSTOPMode+0xbc>)
2000b2ee:	685a      	ldr	r2, [r3, #4]
2000b2f0:	4922      	ldr	r1, [pc, #136]	; (2000b37c <HAL_PWREx_EnterUnderDriveSTOPMode+0xbc>)
2000b2f2:	4b23      	ldr	r3, [pc, #140]	; (2000b380 <HAL_PWREx_EnterUnderDriveSTOPMode+0xc0>)
2000b2f4:	4313      	orrs	r3, r2
2000b2f6:	604b      	str	r3, [r1, #4]
  
  /* Enable the Under-drive */ 
  __HAL_PWR_UNDERDRIVE_ENABLE();
2000b2f8:	4b20      	ldr	r3, [pc, #128]	; (2000b37c <HAL_PWREx_EnterUnderDriveSTOPMode+0xbc>)
2000b2fa:	681b      	ldr	r3, [r3, #0]
2000b2fc:	4a1f      	ldr	r2, [pc, #124]	; (2000b37c <HAL_PWREx_EnterUnderDriveSTOPMode+0xbc>)
2000b2fe:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
2000b302:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
2000b304:	f7f6 fd28 	bl	20001d58 <HAL_GetTick>
2000b308:	6138      	str	r0, [r7, #16]

  /* Wait for UnderDrive mode is ready */
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_UDRDY))
2000b30a:	e009      	b.n	2000b320 <HAL_PWREx_EnterUnderDriveSTOPMode+0x60>
  {
    if((HAL_GetTick() - tickstart ) > PWR_UDERDRIVE_TIMEOUT_VALUE)
2000b30c:	f7f6 fd24 	bl	20001d58 <HAL_GetTick>
2000b310:	4602      	mov	r2, r0
2000b312:	693b      	ldr	r3, [r7, #16]
2000b314:	1ad3      	subs	r3, r2, r3
2000b316:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2000b31a:	d901      	bls.n	2000b320 <HAL_PWREx_EnterUnderDriveSTOPMode+0x60>
    {
      return HAL_TIMEOUT;
2000b31c:	2303      	movs	r3, #3
2000b31e:	e027      	b.n	2000b370 <HAL_PWREx_EnterUnderDriveSTOPMode+0xb0>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_UDRDY))
2000b320:	4b16      	ldr	r3, [pc, #88]	; (2000b37c <HAL_PWREx_EnterUnderDriveSTOPMode+0xbc>)
2000b322:	685b      	ldr	r3, [r3, #4]
2000b324:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
2000b328:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
2000b32c:	d0ee      	beq.n	2000b30c <HAL_PWREx_EnterUnderDriveSTOPMode+0x4c>
    }
  }
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tempreg = PWR->CR1;
2000b32e:	4b13      	ldr	r3, [pc, #76]	; (2000b37c <HAL_PWREx_EnterUnderDriveSTOPMode+0xbc>)
2000b330:	681b      	ldr	r3, [r3, #0]
2000b332:	617b      	str	r3, [r7, #20]
  /* Clear PDDS, LPDS, MRLUDS and LPLUDS bits */
  tempreg &= (uint32_t)~(PWR_CR1_PDDS | PWR_CR1_LPDS | PWR_CR1_LPUDS | PWR_CR1_MRUDS);
2000b334:	697a      	ldr	r2, [r7, #20]
2000b336:	4b13      	ldr	r3, [pc, #76]	; (2000b384 <HAL_PWREx_EnterUnderDriveSTOPMode+0xc4>)
2000b338:	4013      	ands	r3, r2
2000b33a:	617b      	str	r3, [r7, #20]
  
  /* Set LPDS, MRLUDS and LPLUDS bits according to PWR_Regulator value */
  tempreg |= Regulator;
2000b33c:	697a      	ldr	r2, [r7, #20]
2000b33e:	687b      	ldr	r3, [r7, #4]
2000b340:	4313      	orrs	r3, r2
2000b342:	617b      	str	r3, [r7, #20]
  
  /* Store the new value */
  PWR->CR1 = tempreg;
2000b344:	4a0d      	ldr	r2, [pc, #52]	; (2000b37c <HAL_PWREx_EnterUnderDriveSTOPMode+0xbc>)
2000b346:	697b      	ldr	r3, [r7, #20]
2000b348:	6013      	str	r3, [r2, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
2000b34a:	4b0f      	ldr	r3, [pc, #60]	; (2000b388 <HAL_PWREx_EnterUnderDriveSTOPMode+0xc8>)
2000b34c:	691b      	ldr	r3, [r3, #16]
2000b34e:	4a0e      	ldr	r2, [pc, #56]	; (2000b388 <HAL_PWREx_EnterUnderDriveSTOPMode+0xc8>)
2000b350:	f043 0304 	orr.w	r3, r3, #4
2000b354:	6113      	str	r3, [r2, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_SLEEPENTRY_WFI)
2000b356:	78fb      	ldrb	r3, [r7, #3]
2000b358:	2b01      	cmp	r3, #1
2000b35a:	d101      	bne.n	2000b360 <HAL_PWREx_EnterUnderDriveSTOPMode+0xa0>
  {   
    /* Request Wait For Interrupt */
    __WFI();
2000b35c:	bf30      	wfi
2000b35e:	e000      	b.n	2000b362 <HAL_PWREx_EnterUnderDriveSTOPMode+0xa2>
  }
  else
  {
    /* Request Wait For Event */
    __WFE();
2000b360:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
2000b362:	4b09      	ldr	r3, [pc, #36]	; (2000b388 <HAL_PWREx_EnterUnderDriveSTOPMode+0xc8>)
2000b364:	691b      	ldr	r3, [r3, #16]
2000b366:	4a08      	ldr	r2, [pc, #32]	; (2000b388 <HAL_PWREx_EnterUnderDriveSTOPMode+0xc8>)
2000b368:	f023 0304 	bic.w	r3, r3, #4
2000b36c:	6113      	str	r3, [r2, #16]

  return HAL_OK;  
2000b36e:	2300      	movs	r3, #0
}
2000b370:	4618      	mov	r0, r3
2000b372:	3718      	adds	r7, #24
2000b374:	46bd      	mov	sp, r7
2000b376:	bd80      	pop	{r7, pc}
2000b378:	40023800 	.word	0x40023800
2000b37c:	40007000 	.word	0x40007000
2000b380:	000c0100 	.word	0x000c0100
2000b384:	fffff3fc 	.word	0xfffff3fc
2000b388:	e000ed00 	.word	0xe000ed00

2000b38c <HAL_PWREx_GetVoltageRange>:
  * @brief Returns Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1, PWR_REGULATOR_VOLTAGE_SCALE2 or 
  *            PWR_REGULATOR_VOLTAGE_SCALE3)PWR_REGULATOR_VOLTAGE_SCALE1
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
2000b38c:	b480      	push	{r7}
2000b38e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
2000b390:	4b04      	ldr	r3, [pc, #16]	; (2000b3a4 <HAL_PWREx_GetVoltageRange+0x18>)
2000b392:	681b      	ldr	r3, [r3, #0]
2000b394:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
2000b398:	4618      	mov	r0, r3
2000b39a:	46bd      	mov	sp, r7
2000b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b3a0:	4770      	bx	lr
2000b3a2:	bf00      	nop
2000b3a4:	40007000 	.word	0x40007000

2000b3a8 <HAL_PWREx_ControlVoltageScaling>:
  * @note This API forces the PLL state ON to allow the possibility to configure the voltage scale 1 or 2.
  * @note The new voltage scale is active only when the PLL is ON.  
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
2000b3a8:	b580      	push	{r7, lr}
2000b3aa:	b086      	sub	sp, #24
2000b3ac:	af00      	add	r7, sp, #0
2000b3ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
2000b3b0:	2300      	movs	r3, #0
2000b3b2:	617b      	str	r3, [r7, #20]

  assert_param(IS_PWR_REGULATOR_VOLTAGE(VoltageScaling));

  /* Enable Power ctrl clock */
  __HAL_RCC_PWR_CLK_ENABLE();
2000b3b4:	4b37      	ldr	r3, [pc, #220]	; (2000b494 <HAL_PWREx_ControlVoltageScaling+0xec>)
2000b3b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000b3b8:	4a36      	ldr	r2, [pc, #216]	; (2000b494 <HAL_PWREx_ControlVoltageScaling+0xec>)
2000b3ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000b3be:	6413      	str	r3, [r2, #64]	; 0x40
2000b3c0:	4b34      	ldr	r3, [pc, #208]	; (2000b494 <HAL_PWREx_ControlVoltageScaling+0xec>)
2000b3c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000b3c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000b3c8:	613b      	str	r3, [r7, #16]
2000b3ca:	693b      	ldr	r3, [r7, #16]

  /* Check if the PLL is used as system clock or not */
  if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
2000b3cc:	4b31      	ldr	r3, [pc, #196]	; (2000b494 <HAL_PWREx_ControlVoltageScaling+0xec>)
2000b3ce:	689b      	ldr	r3, [r3, #8]
2000b3d0:	f003 030c 	and.w	r3, r3, #12
2000b3d4:	2b08      	cmp	r3, #8
2000b3d6:	d055      	beq.n	2000b484 <HAL_PWREx_ControlVoltageScaling+0xdc>
  {
    /* Disable the main PLL */
    __HAL_RCC_PLL_DISABLE();
2000b3d8:	4b2e      	ldr	r3, [pc, #184]	; (2000b494 <HAL_PWREx_ControlVoltageScaling+0xec>)
2000b3da:	681b      	ldr	r3, [r3, #0]
2000b3dc:	4a2d      	ldr	r2, [pc, #180]	; (2000b494 <HAL_PWREx_ControlVoltageScaling+0xec>)
2000b3de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
2000b3e2:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();    
2000b3e4:	f7f6 fcb8 	bl	20001d58 <HAL_GetTick>
2000b3e8:	6178      	str	r0, [r7, #20]
    /* Wait till PLL is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000b3ea:	e008      	b.n	2000b3fe <HAL_PWREx_ControlVoltageScaling+0x56>
    {
      if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
2000b3ec:	f7f6 fcb4 	bl	20001d58 <HAL_GetTick>
2000b3f0:	4602      	mov	r2, r0
2000b3f2:	697b      	ldr	r3, [r7, #20]
2000b3f4:	1ad3      	subs	r3, r2, r3
2000b3f6:	2b02      	cmp	r3, #2
2000b3f8:	d901      	bls.n	2000b3fe <HAL_PWREx_ControlVoltageScaling+0x56>
      {
        return HAL_TIMEOUT;
2000b3fa:	2303      	movs	r3, #3
2000b3fc:	e045      	b.n	2000b48a <HAL_PWREx_ControlVoltageScaling+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000b3fe:	4b25      	ldr	r3, [pc, #148]	; (2000b494 <HAL_PWREx_ControlVoltageScaling+0xec>)
2000b400:	681b      	ldr	r3, [r3, #0]
2000b402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000b406:	2b00      	cmp	r3, #0
2000b408:	d1f0      	bne.n	2000b3ec <HAL_PWREx_ControlVoltageScaling+0x44>
      }
    }
    
    /* Set Range */
    __HAL_PWR_VOLTAGESCALING_CONFIG(VoltageScaling);
2000b40a:	4b23      	ldr	r3, [pc, #140]	; (2000b498 <HAL_PWREx_ControlVoltageScaling+0xf0>)
2000b40c:	681b      	ldr	r3, [r3, #0]
2000b40e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
2000b412:	4921      	ldr	r1, [pc, #132]	; (2000b498 <HAL_PWREx_ControlVoltageScaling+0xf0>)
2000b414:	687b      	ldr	r3, [r7, #4]
2000b416:	4313      	orrs	r3, r2
2000b418:	600b      	str	r3, [r1, #0]
2000b41a:	4b1f      	ldr	r3, [pc, #124]	; (2000b498 <HAL_PWREx_ControlVoltageScaling+0xf0>)
2000b41c:	681b      	ldr	r3, [r3, #0]
2000b41e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
2000b422:	60fb      	str	r3, [r7, #12]
2000b424:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable the main PLL */
    __HAL_RCC_PLL_ENABLE();
2000b426:	4b1b      	ldr	r3, [pc, #108]	; (2000b494 <HAL_PWREx_ControlVoltageScaling+0xec>)
2000b428:	681b      	ldr	r3, [r3, #0]
2000b42a:	4a1a      	ldr	r2, [pc, #104]	; (2000b494 <HAL_PWREx_ControlVoltageScaling+0xec>)
2000b42c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
2000b430:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
2000b432:	f7f6 fc91 	bl	20001d58 <HAL_GetTick>
2000b436:	6178      	str	r0, [r7, #20]
    /* Wait till PLL is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000b438:	e008      	b.n	2000b44c <HAL_PWREx_ControlVoltageScaling+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
2000b43a:	f7f6 fc8d 	bl	20001d58 <HAL_GetTick>
2000b43e:	4602      	mov	r2, r0
2000b440:	697b      	ldr	r3, [r7, #20]
2000b442:	1ad3      	subs	r3, r2, r3
2000b444:	2b02      	cmp	r3, #2
2000b446:	d901      	bls.n	2000b44c <HAL_PWREx_ControlVoltageScaling+0xa4>
      {
        return HAL_TIMEOUT;
2000b448:	2303      	movs	r3, #3
2000b44a:	e01e      	b.n	2000b48a <HAL_PWREx_ControlVoltageScaling+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000b44c:	4b11      	ldr	r3, [pc, #68]	; (2000b494 <HAL_PWREx_ControlVoltageScaling+0xec>)
2000b44e:	681b      	ldr	r3, [r3, #0]
2000b450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000b454:	2b00      	cmp	r3, #0
2000b456:	d0f0      	beq.n	2000b43a <HAL_PWREx_ControlVoltageScaling+0x92>
      } 
    }
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
2000b458:	f7f6 fc7e 	bl	20001d58 <HAL_GetTick>
2000b45c:	6178      	str	r0, [r7, #20]
    while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
2000b45e:	e009      	b.n	2000b474 <HAL_PWREx_ControlVoltageScaling+0xcc>
    {
      if((HAL_GetTick() - tickstart ) > PWR_VOSRDY_TIMEOUT_VALUE)
2000b460:	f7f6 fc7a 	bl	20001d58 <HAL_GetTick>
2000b464:	4602      	mov	r2, r0
2000b466:	697b      	ldr	r3, [r7, #20]
2000b468:	1ad3      	subs	r3, r2, r3
2000b46a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2000b46e:	d901      	bls.n	2000b474 <HAL_PWREx_ControlVoltageScaling+0xcc>
      {
        return HAL_TIMEOUT;
2000b470:	2303      	movs	r3, #3
2000b472:	e00a      	b.n	2000b48a <HAL_PWREx_ControlVoltageScaling+0xe2>
    while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
2000b474:	4b08      	ldr	r3, [pc, #32]	; (2000b498 <HAL_PWREx_ControlVoltageScaling+0xf0>)
2000b476:	685b      	ldr	r3, [r3, #4]
2000b478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2000b47c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2000b480:	d1ee      	bne.n	2000b460 <HAL_PWREx_ControlVoltageScaling+0xb8>
2000b482:	e001      	b.n	2000b488 <HAL_PWREx_ControlVoltageScaling+0xe0>
      } 
    }
  }
  else
  {
    return HAL_ERROR;
2000b484:	2301      	movs	r3, #1
2000b486:	e000      	b.n	2000b48a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }
  return HAL_OK;
2000b488:	2300      	movs	r3, #0
}
2000b48a:	4618      	mov	r0, r3
2000b48c:	3718      	adds	r7, #24
2000b48e:	46bd      	mov	sp, r7
2000b490:	bd80      	pop	{r7, pc}
2000b492:	bf00      	nop
2000b494:	40023800 	.word	0x40023800
2000b498:	40007000 	.word	0x40007000

2000b49c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
2000b49c:	b580      	push	{r7, lr}
2000b49e:	b086      	sub	sp, #24
2000b4a0:	af02      	add	r7, sp, #8
2000b4a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
2000b4a4:	f7f6 fc58 	bl	20001d58 <HAL_GetTick>
2000b4a8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
2000b4aa:	687b      	ldr	r3, [r7, #4]
2000b4ac:	2b00      	cmp	r3, #0
2000b4ae:	d101      	bne.n	2000b4b4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
2000b4b0:	2301      	movs	r3, #1
2000b4b2:	e067      	b.n	2000b584 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
2000b4b4:	687b      	ldr	r3, [r7, #4]
2000b4b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000b4ba:	b2db      	uxtb	r3, r3
2000b4bc:	2b00      	cmp	r3, #0
2000b4be:	d10b      	bne.n	2000b4d8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
2000b4c0:	687b      	ldr	r3, [r7, #4]
2000b4c2:	2200      	movs	r2, #0
2000b4c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
2000b4c8:	6878      	ldr	r0, [r7, #4]
2000b4ca:	f7f6 f8cb 	bl	20001664 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
2000b4ce:	f241 3188 	movw	r1, #5000	; 0x1388
2000b4d2:	6878      	ldr	r0, [r7, #4]
2000b4d4:	f001 f9b6 	bl	2000c844 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
2000b4d8:	687b      	ldr	r3, [r7, #4]
2000b4da:	681b      	ldr	r3, [r3, #0]
2000b4dc:	681b      	ldr	r3, [r3, #0]
2000b4de:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
2000b4e2:	687b      	ldr	r3, [r7, #4]
2000b4e4:	689b      	ldr	r3, [r3, #8]
2000b4e6:	3b01      	subs	r3, #1
2000b4e8:	021a      	lsls	r2, r3, #8
2000b4ea:	687b      	ldr	r3, [r7, #4]
2000b4ec:	681b      	ldr	r3, [r3, #0]
2000b4ee:	430a      	orrs	r2, r1
2000b4f0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
2000b4f2:	687b      	ldr	r3, [r7, #4]
2000b4f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000b4f6:	9300      	str	r3, [sp, #0]
2000b4f8:	68fb      	ldr	r3, [r7, #12]
2000b4fa:	2200      	movs	r2, #0
2000b4fc:	2120      	movs	r1, #32
2000b4fe:	6878      	ldr	r0, [r7, #4]
2000b500:	f001 fad1 	bl	2000caa6 <QSPI_WaitFlagStateUntilTimeout>
2000b504:	4603      	mov	r3, r0
2000b506:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
2000b508:	7afb      	ldrb	r3, [r7, #11]
2000b50a:	2b00      	cmp	r3, #0
2000b50c:	d135      	bne.n	2000b57a <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
2000b50e:	687b      	ldr	r3, [r7, #4]
2000b510:	681b      	ldr	r3, [r3, #0]
2000b512:	681a      	ldr	r2, [r3, #0]
2000b514:	4b1d      	ldr	r3, [pc, #116]	; (2000b58c <HAL_QSPI_Init+0xf0>)
2000b516:	4013      	ands	r3, r2
2000b518:	687a      	ldr	r2, [r7, #4]
2000b51a:	6852      	ldr	r2, [r2, #4]
2000b51c:	0611      	lsls	r1, r2, #24
2000b51e:	687a      	ldr	r2, [r7, #4]
2000b520:	68d2      	ldr	r2, [r2, #12]
2000b522:	4311      	orrs	r1, r2
2000b524:	687a      	ldr	r2, [r7, #4]
2000b526:	69d2      	ldr	r2, [r2, #28]
2000b528:	4311      	orrs	r1, r2
2000b52a:	687a      	ldr	r2, [r7, #4]
2000b52c:	6a12      	ldr	r2, [r2, #32]
2000b52e:	4311      	orrs	r1, r2
2000b530:	687a      	ldr	r2, [r7, #4]
2000b532:	6812      	ldr	r2, [r2, #0]
2000b534:	430b      	orrs	r3, r1
2000b536:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
2000b538:	687b      	ldr	r3, [r7, #4]
2000b53a:	681b      	ldr	r3, [r3, #0]
2000b53c:	685a      	ldr	r2, [r3, #4]
2000b53e:	4b14      	ldr	r3, [pc, #80]	; (2000b590 <HAL_QSPI_Init+0xf4>)
2000b540:	4013      	ands	r3, r2
2000b542:	687a      	ldr	r2, [r7, #4]
2000b544:	6912      	ldr	r2, [r2, #16]
2000b546:	0411      	lsls	r1, r2, #16
2000b548:	687a      	ldr	r2, [r7, #4]
2000b54a:	6952      	ldr	r2, [r2, #20]
2000b54c:	4311      	orrs	r1, r2
2000b54e:	687a      	ldr	r2, [r7, #4]
2000b550:	6992      	ldr	r2, [r2, #24]
2000b552:	4311      	orrs	r1, r2
2000b554:	687a      	ldr	r2, [r7, #4]
2000b556:	6812      	ldr	r2, [r2, #0]
2000b558:	430b      	orrs	r3, r1
2000b55a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
2000b55c:	687b      	ldr	r3, [r7, #4]
2000b55e:	681b      	ldr	r3, [r3, #0]
2000b560:	681a      	ldr	r2, [r3, #0]
2000b562:	687b      	ldr	r3, [r7, #4]
2000b564:	681b      	ldr	r3, [r3, #0]
2000b566:	f042 0201 	orr.w	r2, r2, #1
2000b56a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
2000b56c:	687b      	ldr	r3, [r7, #4]
2000b56e:	2200      	movs	r2, #0
2000b570:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
2000b572:	687b      	ldr	r3, [r7, #4]
2000b574:	2201      	movs	r2, #1
2000b576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
2000b57a:	687b      	ldr	r3, [r7, #4]
2000b57c:	2200      	movs	r2, #0
2000b57e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
2000b582:	7afb      	ldrb	r3, [r7, #11]
}
2000b584:	4618      	mov	r0, r3
2000b586:	3710      	adds	r7, #16
2000b588:	46bd      	mov	sp, r7
2000b58a:	bd80      	pop	{r7, pc}
2000b58c:	00ffff2f 	.word	0x00ffff2f
2000b590:	ffe0f8fe 	.word	0xffe0f8fe

2000b594 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
2000b594:	b580      	push	{r7, lr}
2000b596:	b082      	sub	sp, #8
2000b598:	af00      	add	r7, sp, #0
2000b59a:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
2000b59c:	687b      	ldr	r3, [r7, #4]
2000b59e:	2b00      	cmp	r3, #0
2000b5a0:	d101      	bne.n	2000b5a6 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
2000b5a2:	2301      	movs	r3, #1
2000b5a4:	e016      	b.n	2000b5d4 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
2000b5a6:	687b      	ldr	r3, [r7, #4]
2000b5a8:	681b      	ldr	r3, [r3, #0]
2000b5aa:	681a      	ldr	r2, [r3, #0]
2000b5ac:	687b      	ldr	r3, [r7, #4]
2000b5ae:	681b      	ldr	r3, [r3, #0]
2000b5b0:	f022 0201 	bic.w	r2, r2, #1
2000b5b4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
2000b5b6:	6878      	ldr	r0, [r7, #4]
2000b5b8:	f7f6 f8d6 	bl	20001768 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
2000b5bc:	687b      	ldr	r3, [r7, #4]
2000b5be:	2200      	movs	r2, #0
2000b5c0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
2000b5c2:	687b      	ldr	r3, [r7, #4]
2000b5c4:	2200      	movs	r2, #0
2000b5c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
2000b5ca:	687b      	ldr	r3, [r7, #4]
2000b5cc:	2200      	movs	r2, #0
2000b5ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
2000b5d2:	2300      	movs	r3, #0
}
2000b5d4:	4618      	mov	r0, r3
2000b5d6:	3708      	adds	r7, #8
2000b5d8:	46bd      	mov	sp, r7
2000b5da:	bd80      	pop	{r7, pc}
  * @brief Initialize the QSPI MSP.
  * @param hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_MspInit(QSPI_HandleTypeDef *hqspi)
{
2000b5dc:	b480      	push	{r7}
2000b5de:	b083      	sub	sp, #12
2000b5e0:	af00      	add	r7, sp, #0
2000b5e2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspInit can be implemented in the user file
   */
}
2000b5e4:	bf00      	nop
2000b5e6:	370c      	adds	r7, #12
2000b5e8:	46bd      	mov	sp, r7
2000b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b5ee:	4770      	bx	lr
  * @brief DeInitialize the QSPI MSP.
  * @param hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef *hqspi)
{
2000b5f0:	b480      	push	{r7}
2000b5f2:	b083      	sub	sp, #12
2000b5f4:	af00      	add	r7, sp, #0
2000b5f6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspDeInit can be implemented in the user file
   */
}
2000b5f8:	bf00      	nop
2000b5fa:	370c      	adds	r7, #12
2000b5fc:	46bd      	mov	sp, r7
2000b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
2000b602:	4770      	bx	lr

2000b604 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
2000b604:	b580      	push	{r7, lr}
2000b606:	b086      	sub	sp, #24
2000b608:	af00      	add	r7, sp, #0
2000b60a:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
2000b60c:	687b      	ldr	r3, [r7, #4]
2000b60e:	681b      	ldr	r3, [r3, #0]
2000b610:	689b      	ldr	r3, [r3, #8]
2000b612:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
2000b614:	687b      	ldr	r3, [r7, #4]
2000b616:	681b      	ldr	r3, [r3, #0]
2000b618:	681b      	ldr	r3, [r3, #0]
2000b61a:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
2000b61c:	697b      	ldr	r3, [r7, #20]
2000b61e:	f003 0304 	and.w	r3, r3, #4
2000b622:	2b00      	cmp	r3, #0
2000b624:	d064      	beq.n	2000b6f0 <HAL_QSPI_IRQHandler+0xec>
2000b626:	693b      	ldr	r3, [r7, #16]
2000b628:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
2000b62c:	2b00      	cmp	r3, #0
2000b62e:	d05f      	beq.n	2000b6f0 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
2000b630:	687b      	ldr	r3, [r7, #4]
2000b632:	681b      	ldr	r3, [r3, #0]
2000b634:	3320      	adds	r3, #32
2000b636:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
2000b638:	687b      	ldr	r3, [r7, #4]
2000b63a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000b63e:	b2db      	uxtb	r3, r3
2000b640:	2b12      	cmp	r3, #18
2000b642:	d125      	bne.n	2000b690 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
2000b644:	e01c      	b.n	2000b680 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
2000b646:	687b      	ldr	r3, [r7, #4]
2000b648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000b64a:	2b00      	cmp	r3, #0
2000b64c:	d00f      	beq.n	2000b66e <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
2000b64e:	687b      	ldr	r3, [r7, #4]
2000b650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000b652:	781a      	ldrb	r2, [r3, #0]
2000b654:	68fb      	ldr	r3, [r7, #12]
2000b656:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
2000b658:	687b      	ldr	r3, [r7, #4]
2000b65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000b65c:	1c5a      	adds	r2, r3, #1
2000b65e:	687b      	ldr	r3, [r7, #4]
2000b660:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
2000b662:	687b      	ldr	r3, [r7, #4]
2000b664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000b666:	1e5a      	subs	r2, r3, #1
2000b668:	687b      	ldr	r3, [r7, #4]
2000b66a:	62da      	str	r2, [r3, #44]	; 0x2c
2000b66c:	e008      	b.n	2000b680 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
2000b66e:	687b      	ldr	r3, [r7, #4]
2000b670:	681b      	ldr	r3, [r3, #0]
2000b672:	681a      	ldr	r2, [r3, #0]
2000b674:	687b      	ldr	r3, [r7, #4]
2000b676:	681b      	ldr	r3, [r3, #0]
2000b678:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
2000b67c:	601a      	str	r2, [r3, #0]
          break;
2000b67e:	e033      	b.n	2000b6e8 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
2000b680:	687b      	ldr	r3, [r7, #4]
2000b682:	681b      	ldr	r3, [r3, #0]
2000b684:	689b      	ldr	r3, [r3, #8]
2000b686:	f003 0304 	and.w	r3, r3, #4
2000b68a:	2b00      	cmp	r3, #0
2000b68c:	d1db      	bne.n	2000b646 <HAL_QSPI_IRQHandler+0x42>
2000b68e:	e02b      	b.n	2000b6e8 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
2000b690:	687b      	ldr	r3, [r7, #4]
2000b692:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000b696:	b2db      	uxtb	r3, r3
2000b698:	2b22      	cmp	r3, #34	; 0x22
2000b69a:	d125      	bne.n	2000b6e8 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
2000b69c:	e01d      	b.n	2000b6da <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
2000b69e:	687b      	ldr	r3, [r7, #4]
2000b6a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000b6a2:	2b00      	cmp	r3, #0
2000b6a4:	d010      	beq.n	2000b6c8 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
2000b6a6:	687b      	ldr	r3, [r7, #4]
2000b6a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000b6aa:	68fa      	ldr	r2, [r7, #12]
2000b6ac:	7812      	ldrb	r2, [r2, #0]
2000b6ae:	b2d2      	uxtb	r2, r2
2000b6b0:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
2000b6b2:	687b      	ldr	r3, [r7, #4]
2000b6b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000b6b6:	1c5a      	adds	r2, r3, #1
2000b6b8:	687b      	ldr	r3, [r7, #4]
2000b6ba:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
2000b6bc:	687b      	ldr	r3, [r7, #4]
2000b6be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000b6c0:	1e5a      	subs	r2, r3, #1
2000b6c2:	687b      	ldr	r3, [r7, #4]
2000b6c4:	639a      	str	r2, [r3, #56]	; 0x38
2000b6c6:	e008      	b.n	2000b6da <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
2000b6c8:	687b      	ldr	r3, [r7, #4]
2000b6ca:	681b      	ldr	r3, [r3, #0]
2000b6cc:	681a      	ldr	r2, [r3, #0]
2000b6ce:	687b      	ldr	r3, [r7, #4]
2000b6d0:	681b      	ldr	r3, [r3, #0]
2000b6d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
2000b6d6:	601a      	str	r2, [r3, #0]
          break;
2000b6d8:	e006      	b.n	2000b6e8 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
2000b6da:	687b      	ldr	r3, [r7, #4]
2000b6dc:	681b      	ldr	r3, [r3, #0]
2000b6de:	689b      	ldr	r3, [r3, #8]
2000b6e0:	f003 0304 	and.w	r3, r3, #4
2000b6e4:	2b00      	cmp	r3, #0
2000b6e6:	d1da      	bne.n	2000b69e <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
2000b6e8:	6878      	ldr	r0, [r7, #4]
2000b6ea:	f000 ffa9 	bl	2000c640 <HAL_QSPI_FifoThresholdCallback>
2000b6ee:	e13c      	b.n	2000b96a <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
2000b6f0:	697b      	ldr	r3, [r7, #20]
2000b6f2:	f003 0302 	and.w	r3, r3, #2
2000b6f6:	2b00      	cmp	r3, #0
2000b6f8:	f000 80b0 	beq.w	2000b85c <HAL_QSPI_IRQHandler+0x258>
2000b6fc:	693b      	ldr	r3, [r7, #16]
2000b6fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000b702:	2b00      	cmp	r3, #0
2000b704:	f000 80aa 	beq.w	2000b85c <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
2000b708:	687b      	ldr	r3, [r7, #4]
2000b70a:	681b      	ldr	r3, [r3, #0]
2000b70c:	2202      	movs	r2, #2
2000b70e:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
2000b710:	687b      	ldr	r3, [r7, #4]
2000b712:	681b      	ldr	r3, [r3, #0]
2000b714:	681a      	ldr	r2, [r3, #0]
2000b716:	687b      	ldr	r3, [r7, #4]
2000b718:	681b      	ldr	r3, [r3, #0]
2000b71a:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
2000b71e:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
2000b720:	687b      	ldr	r3, [r7, #4]
2000b722:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000b726:	b2db      	uxtb	r3, r3
2000b728:	2b12      	cmp	r3, #18
2000b72a:	d120      	bne.n	2000b76e <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
2000b72c:	687b      	ldr	r3, [r7, #4]
2000b72e:	681b      	ldr	r3, [r3, #0]
2000b730:	681b      	ldr	r3, [r3, #0]
2000b732:	f003 0304 	and.w	r3, r3, #4
2000b736:	2b00      	cmp	r3, #0
2000b738:	d011      	beq.n	2000b75e <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
2000b73a:	687b      	ldr	r3, [r7, #4]
2000b73c:	681b      	ldr	r3, [r3, #0]
2000b73e:	681a      	ldr	r2, [r3, #0]
2000b740:	687b      	ldr	r3, [r7, #4]
2000b742:	681b      	ldr	r3, [r3, #0]
2000b744:	f022 0204 	bic.w	r2, r2, #4
2000b748:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
2000b74a:	687b      	ldr	r3, [r7, #4]
2000b74c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000b74e:	681b      	ldr	r3, [r3, #0]
2000b750:	681a      	ldr	r2, [r3, #0]
2000b752:	687b      	ldr	r3, [r7, #4]
2000b754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000b756:	681b      	ldr	r3, [r3, #0]
2000b758:	f022 0201 	bic.w	r2, r2, #1
2000b75c:	601a      	str	r2, [r3, #0]
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
2000b75e:	687b      	ldr	r3, [r7, #4]
2000b760:	2201      	movs	r2, #1
2000b762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
2000b766:	6878      	ldr	r0, [r7, #4]
2000b768:	f000 ff4c 	bl	2000c604 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
2000b76c:	e0fa      	b.n	2000b964 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
2000b76e:	687b      	ldr	r3, [r7, #4]
2000b770:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000b774:	b2db      	uxtb	r3, r3
2000b776:	2b22      	cmp	r3, #34	; 0x22
2000b778:	d143      	bne.n	2000b802 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
2000b77a:	687b      	ldr	r3, [r7, #4]
2000b77c:	681b      	ldr	r3, [r3, #0]
2000b77e:	681b      	ldr	r3, [r3, #0]
2000b780:	f003 0304 	and.w	r3, r3, #4
2000b784:	2b00      	cmp	r3, #0
2000b786:	d012      	beq.n	2000b7ae <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
2000b788:	687b      	ldr	r3, [r7, #4]
2000b78a:	681b      	ldr	r3, [r3, #0]
2000b78c:	681a      	ldr	r2, [r3, #0]
2000b78e:	687b      	ldr	r3, [r7, #4]
2000b790:	681b      	ldr	r3, [r3, #0]
2000b792:	f022 0204 	bic.w	r2, r2, #4
2000b796:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
2000b798:	687b      	ldr	r3, [r7, #4]
2000b79a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000b79c:	681b      	ldr	r3, [r3, #0]
2000b79e:	681a      	ldr	r2, [r3, #0]
2000b7a0:	687b      	ldr	r3, [r7, #4]
2000b7a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000b7a4:	681b      	ldr	r3, [r3, #0]
2000b7a6:	f022 0201 	bic.w	r2, r2, #1
2000b7aa:	601a      	str	r2, [r3, #0]
2000b7ac:	e021      	b.n	2000b7f2 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
2000b7ae:	687b      	ldr	r3, [r7, #4]
2000b7b0:	681b      	ldr	r3, [r3, #0]
2000b7b2:	3320      	adds	r3, #32
2000b7b4:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
2000b7b6:	e013      	b.n	2000b7e0 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
2000b7b8:	687b      	ldr	r3, [r7, #4]
2000b7ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000b7bc:	2b00      	cmp	r3, #0
2000b7be:	d017      	beq.n	2000b7f0 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
2000b7c0:	687b      	ldr	r3, [r7, #4]
2000b7c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000b7c4:	68fa      	ldr	r2, [r7, #12]
2000b7c6:	7812      	ldrb	r2, [r2, #0]
2000b7c8:	b2d2      	uxtb	r2, r2
2000b7ca:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
2000b7cc:	687b      	ldr	r3, [r7, #4]
2000b7ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000b7d0:	1c5a      	adds	r2, r3, #1
2000b7d2:	687b      	ldr	r3, [r7, #4]
2000b7d4:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
2000b7d6:	687b      	ldr	r3, [r7, #4]
2000b7d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000b7da:	1e5a      	subs	r2, r3, #1
2000b7dc:	687b      	ldr	r3, [r7, #4]
2000b7de:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
2000b7e0:	687b      	ldr	r3, [r7, #4]
2000b7e2:	681b      	ldr	r3, [r3, #0]
2000b7e4:	689b      	ldr	r3, [r3, #8]
2000b7e6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
2000b7ea:	2b00      	cmp	r3, #0
2000b7ec:	d1e4      	bne.n	2000b7b8 <HAL_QSPI_IRQHandler+0x1b4>
2000b7ee:	e000      	b.n	2000b7f2 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
2000b7f0:	bf00      	nop
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
2000b7f2:	687b      	ldr	r3, [r7, #4]
2000b7f4:	2201      	movs	r2, #1
2000b7f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
2000b7fa:	6878      	ldr	r0, [r7, #4]
2000b7fc:	f000 fef8 	bl	2000c5f0 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
2000b800:	e0b0      	b.n	2000b964 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
2000b802:	687b      	ldr	r3, [r7, #4]
2000b804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000b808:	b2db      	uxtb	r3, r3
2000b80a:	2b02      	cmp	r3, #2
2000b80c:	d107      	bne.n	2000b81e <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
2000b80e:	687b      	ldr	r3, [r7, #4]
2000b810:	2201      	movs	r2, #1
2000b812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
2000b816:	6878      	ldr	r0, [r7, #4]
2000b818:	f000 fee0 	bl	2000c5dc <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
2000b81c:	e0a2      	b.n	2000b964 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
2000b81e:	687b      	ldr	r3, [r7, #4]
2000b820:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000b824:	b2db      	uxtb	r3, r3
2000b826:	2b08      	cmp	r3, #8
2000b828:	f040 809c 	bne.w	2000b964 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
2000b82c:	687b      	ldr	r3, [r7, #4]
2000b82e:	681b      	ldr	r3, [r3, #0]
2000b830:	695a      	ldr	r2, [r3, #20]
2000b832:	687b      	ldr	r3, [r7, #4]
2000b834:	681b      	ldr	r3, [r3, #0]
2000b836:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
2000b83a:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
2000b83c:	687b      	ldr	r3, [r7, #4]
2000b83e:	2201      	movs	r2, #1
2000b840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
2000b844:	687b      	ldr	r3, [r7, #4]
2000b846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000b848:	2b00      	cmp	r3, #0
2000b84a:	d103      	bne.n	2000b854 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
2000b84c:	6878      	ldr	r0, [r7, #4]
2000b84e:	f000 febb 	bl	2000c5c8 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
2000b852:	e087      	b.n	2000b964 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
2000b854:	6878      	ldr	r0, [r7, #4]
2000b856:	f000 fead 	bl	2000c5b4 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
2000b85a:	e083      	b.n	2000b964 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
2000b85c:	697b      	ldr	r3, [r7, #20]
2000b85e:	f003 0308 	and.w	r3, r3, #8
2000b862:	2b00      	cmp	r3, #0
2000b864:	d01f      	beq.n	2000b8a6 <HAL_QSPI_IRQHandler+0x2a2>
2000b866:	693b      	ldr	r3, [r7, #16]
2000b868:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
2000b86c:	2b00      	cmp	r3, #0
2000b86e:	d01a      	beq.n	2000b8a6 <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
2000b870:	687b      	ldr	r3, [r7, #4]
2000b872:	681b      	ldr	r3, [r3, #0]
2000b874:	2208      	movs	r2, #8
2000b876:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
2000b878:	687b      	ldr	r3, [r7, #4]
2000b87a:	681b      	ldr	r3, [r3, #0]
2000b87c:	681b      	ldr	r3, [r3, #0]
2000b87e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000b882:	2b00      	cmp	r3, #0
2000b884:	d00b      	beq.n	2000b89e <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
2000b886:	687b      	ldr	r3, [r7, #4]
2000b888:	681b      	ldr	r3, [r3, #0]
2000b88a:	681a      	ldr	r2, [r3, #0]
2000b88c:	687b      	ldr	r3, [r7, #4]
2000b88e:	681b      	ldr	r3, [r3, #0]
2000b890:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
2000b894:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
2000b896:	687b      	ldr	r3, [r7, #4]
2000b898:	2201      	movs	r2, #1
2000b89a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
2000b89e:	6878      	ldr	r0, [r7, #4]
2000b8a0:	f000 fed8 	bl	2000c654 <HAL_QSPI_StatusMatchCallback>
2000b8a4:	e061      	b.n	2000b96a <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
2000b8a6:	697b      	ldr	r3, [r7, #20]
2000b8a8:	f003 0301 	and.w	r3, r3, #1
2000b8ac:	2b00      	cmp	r3, #0
2000b8ae:	d047      	beq.n	2000b940 <HAL_QSPI_IRQHandler+0x33c>
2000b8b0:	693b      	ldr	r3, [r7, #16]
2000b8b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2000b8b6:	2b00      	cmp	r3, #0
2000b8b8:	d042      	beq.n	2000b940 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
2000b8ba:	687b      	ldr	r3, [r7, #4]
2000b8bc:	681b      	ldr	r3, [r3, #0]
2000b8be:	2201      	movs	r2, #1
2000b8c0:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
2000b8c2:	687b      	ldr	r3, [r7, #4]
2000b8c4:	681b      	ldr	r3, [r3, #0]
2000b8c6:	681a      	ldr	r2, [r3, #0]
2000b8c8:	687b      	ldr	r3, [r7, #4]
2000b8ca:	681b      	ldr	r3, [r3, #0]
2000b8cc:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
2000b8d0:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
2000b8d2:	687b      	ldr	r3, [r7, #4]
2000b8d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000b8d6:	f043 0202 	orr.w	r2, r3, #2
2000b8da:	687b      	ldr	r3, [r7, #4]
2000b8dc:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
2000b8de:	687b      	ldr	r3, [r7, #4]
2000b8e0:	681b      	ldr	r3, [r3, #0]
2000b8e2:	681b      	ldr	r3, [r3, #0]
2000b8e4:	f003 0304 	and.w	r3, r3, #4
2000b8e8:	2b00      	cmp	r3, #0
2000b8ea:	d021      	beq.n	2000b930 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
2000b8ec:	687b      	ldr	r3, [r7, #4]
2000b8ee:	681b      	ldr	r3, [r3, #0]
2000b8f0:	681a      	ldr	r2, [r3, #0]
2000b8f2:	687b      	ldr	r3, [r7, #4]
2000b8f4:	681b      	ldr	r3, [r3, #0]
2000b8f6:	f022 0204 	bic.w	r2, r2, #4
2000b8fa:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
2000b8fc:	687b      	ldr	r3, [r7, #4]
2000b8fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000b900:	4a1c      	ldr	r2, [pc, #112]	; (2000b974 <HAL_QSPI_IRQHandler+0x370>)
2000b902:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
2000b904:	687b      	ldr	r3, [r7, #4]
2000b906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000b908:	4618      	mov	r0, r3
2000b90a:	f7f7 f90e 	bl	20002b2a <HAL_DMA_Abort_IT>
2000b90e:	4603      	mov	r3, r0
2000b910:	2b00      	cmp	r3, #0
2000b912:	d029      	beq.n	2000b968 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
2000b914:	687b      	ldr	r3, [r7, #4]
2000b916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000b918:	f043 0204 	orr.w	r2, r3, #4
2000b91c:	687b      	ldr	r3, [r7, #4]
2000b91e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
2000b920:	687b      	ldr	r3, [r7, #4]
2000b922:	2201      	movs	r2, #1
2000b924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
2000b928:	6878      	ldr	r0, [r7, #4]
2000b92a:	f000 fe43 	bl	2000c5b4 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
2000b92e:	e01b      	b.n	2000b968 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
2000b930:	687b      	ldr	r3, [r7, #4]
2000b932:	2201      	movs	r2, #1
2000b934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
2000b938:	6878      	ldr	r0, [r7, #4]
2000b93a:	f000 fe3b 	bl	2000c5b4 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
2000b93e:	e013      	b.n	2000b968 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
2000b940:	697b      	ldr	r3, [r7, #20]
2000b942:	f003 0310 	and.w	r3, r3, #16
2000b946:	2b00      	cmp	r3, #0
2000b948:	d00f      	beq.n	2000b96a <HAL_QSPI_IRQHandler+0x366>
2000b94a:	693b      	ldr	r3, [r7, #16]
2000b94c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
2000b950:	2b00      	cmp	r3, #0
2000b952:	d00a      	beq.n	2000b96a <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
2000b954:	687b      	ldr	r3, [r7, #4]
2000b956:	681b      	ldr	r3, [r3, #0]
2000b958:	2210      	movs	r2, #16
2000b95a:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
2000b95c:	6878      	ldr	r0, [r7, #4]
2000b95e:	f000 fe83 	bl	2000c668 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
2000b962:	e002      	b.n	2000b96a <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
2000b964:	bf00      	nop
2000b966:	e000      	b.n	2000b96a <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
2000b968:	bf00      	nop
}
2000b96a:	bf00      	nop
2000b96c:	3718      	adds	r7, #24
2000b96e:	46bd      	mov	sp, r7
2000b970:	bd80      	pop	{r7, pc}
2000b972:	bf00      	nop
2000b974:	2000ca41 	.word	0x2000ca41

2000b978 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
2000b978:	b580      	push	{r7, lr}
2000b97a:	b088      	sub	sp, #32
2000b97c:	af02      	add	r7, sp, #8
2000b97e:	60f8      	str	r0, [r7, #12]
2000b980:	60b9      	str	r1, [r7, #8]
2000b982:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
2000b984:	f7f6 f9e8 	bl	20001d58 <HAL_GetTick>
2000b988:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
2000b98a:	68fb      	ldr	r3, [r7, #12]
2000b98c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2000b990:	b2db      	uxtb	r3, r3
2000b992:	2b01      	cmp	r3, #1
2000b994:	d101      	bne.n	2000b99a <HAL_QSPI_Command+0x22>
2000b996:	2302      	movs	r3, #2
2000b998:	e048      	b.n	2000ba2c <HAL_QSPI_Command+0xb4>
2000b99a:	68fb      	ldr	r3, [r7, #12]
2000b99c:	2201      	movs	r2, #1
2000b99e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
2000b9a2:	68fb      	ldr	r3, [r7, #12]
2000b9a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000b9a8:	b2db      	uxtb	r3, r3
2000b9aa:	2b01      	cmp	r3, #1
2000b9ac:	d137      	bne.n	2000ba1e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
2000b9ae:	68fb      	ldr	r3, [r7, #12]
2000b9b0:	2200      	movs	r2, #0
2000b9b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
2000b9b4:	68fb      	ldr	r3, [r7, #12]
2000b9b6:	2202      	movs	r2, #2
2000b9b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
2000b9bc:	687b      	ldr	r3, [r7, #4]
2000b9be:	9300      	str	r3, [sp, #0]
2000b9c0:	693b      	ldr	r3, [r7, #16]
2000b9c2:	2200      	movs	r2, #0
2000b9c4:	2120      	movs	r1, #32
2000b9c6:	68f8      	ldr	r0, [r7, #12]
2000b9c8:	f001 f86d 	bl	2000caa6 <QSPI_WaitFlagStateUntilTimeout>
2000b9cc:	4603      	mov	r3, r0
2000b9ce:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
2000b9d0:	7dfb      	ldrb	r3, [r7, #23]
2000b9d2:	2b00      	cmp	r3, #0
2000b9d4:	d125      	bne.n	2000ba22 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
2000b9d6:	2200      	movs	r2, #0
2000b9d8:	68b9      	ldr	r1, [r7, #8]
2000b9da:	68f8      	ldr	r0, [r7, #12]
2000b9dc:	f001 f8d6 	bl	2000cb8c <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
2000b9e0:	68bb      	ldr	r3, [r7, #8]
2000b9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000b9e4:	2b00      	cmp	r3, #0
2000b9e6:	d115      	bne.n	2000ba14 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
2000b9e8:	687b      	ldr	r3, [r7, #4]
2000b9ea:	9300      	str	r3, [sp, #0]
2000b9ec:	693b      	ldr	r3, [r7, #16]
2000b9ee:	2201      	movs	r2, #1
2000b9f0:	2102      	movs	r1, #2
2000b9f2:	68f8      	ldr	r0, [r7, #12]
2000b9f4:	f001 f857 	bl	2000caa6 <QSPI_WaitFlagStateUntilTimeout>
2000b9f8:	4603      	mov	r3, r0
2000b9fa:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
2000b9fc:	7dfb      	ldrb	r3, [r7, #23]
2000b9fe:	2b00      	cmp	r3, #0
2000ba00:	d10f      	bne.n	2000ba22 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
2000ba02:	68fb      	ldr	r3, [r7, #12]
2000ba04:	681b      	ldr	r3, [r3, #0]
2000ba06:	2202      	movs	r2, #2
2000ba08:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
2000ba0a:	68fb      	ldr	r3, [r7, #12]
2000ba0c:	2201      	movs	r2, #1
2000ba0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
2000ba12:	e006      	b.n	2000ba22 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
2000ba14:	68fb      	ldr	r3, [r7, #12]
2000ba16:	2201      	movs	r2, #1
2000ba18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
2000ba1c:	e001      	b.n	2000ba22 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
2000ba1e:	2302      	movs	r3, #2
2000ba20:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
2000ba22:	68fb      	ldr	r3, [r7, #12]
2000ba24:	2200      	movs	r2, #0
2000ba26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
2000ba2a:	7dfb      	ldrb	r3, [r7, #23]
}
2000ba2c:	4618      	mov	r0, r3
2000ba2e:	3718      	adds	r7, #24
2000ba30:	46bd      	mov	sp, r7
2000ba32:	bd80      	pop	{r7, pc}

2000ba34 <HAL_QSPI_Command_IT>:
  * @param cmd : structure that contains the command configuration information
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command_IT(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd)
{
2000ba34:	b580      	push	{r7, lr}
2000ba36:	b084      	sub	sp, #16
2000ba38:	af00      	add	r7, sp, #0
2000ba3a:	6078      	str	r0, [r7, #4]
2000ba3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
2000ba3e:	687b      	ldr	r3, [r7, #4]
2000ba40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2000ba44:	b2db      	uxtb	r3, r3
2000ba46:	2b01      	cmp	r3, #1
2000ba48:	d101      	bne.n	2000ba4e <HAL_QSPI_Command_IT+0x1a>
2000ba4a:	2302      	movs	r3, #2
2000ba4c:	e04f      	b.n	2000baee <HAL_QSPI_Command_IT+0xba>
2000ba4e:	687b      	ldr	r3, [r7, #4]
2000ba50:	2201      	movs	r2, #1
2000ba52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
2000ba56:	687b      	ldr	r3, [r7, #4]
2000ba58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000ba5c:	b2db      	uxtb	r3, r3
2000ba5e:	2b01      	cmp	r3, #1
2000ba60:	d13e      	bne.n	2000bae0 <HAL_QSPI_Command_IT+0xac>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
2000ba62:	687b      	ldr	r3, [r7, #4]
2000ba64:	2200      	movs	r2, #0
2000ba66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
2000ba68:	687b      	ldr	r3, [r7, #4]
2000ba6a:	2202      	movs	r2, #2
2000ba6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout_CPUCycle(hqspi, QSPI_FLAG_BUSY, RESET, hqspi->Timeout);	
2000ba70:	687b      	ldr	r3, [r7, #4]
2000ba72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000ba74:	2200      	movs	r2, #0
2000ba76:	2120      	movs	r1, #32
2000ba78:	6878      	ldr	r0, [r7, #4]
2000ba7a:	f001 f84b 	bl	2000cb14 <QSPI_WaitFlagStateUntilTimeout_CPUCycle>
2000ba7e:	4603      	mov	r3, r0
2000ba80:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
2000ba82:	7bfb      	ldrb	r3, [r7, #15]
2000ba84:	2b00      	cmp	r3, #0
2000ba86:	d126      	bne.n	2000bad6 <HAL_QSPI_Command_IT+0xa2>
    {
      if (cmd->DataMode == QSPI_DATA_NONE)
2000ba88:	683b      	ldr	r3, [r7, #0]
2000ba8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000ba8c:	2b00      	cmp	r3, #0
2000ba8e:	d103      	bne.n	2000ba98 <HAL_QSPI_Command_IT+0x64>
      {
        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
2000ba90:	687b      	ldr	r3, [r7, #4]
2000ba92:	681b      	ldr	r3, [r3, #0]
2000ba94:	2203      	movs	r2, #3
2000ba96:	60da      	str	r2, [r3, #12]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
2000ba98:	2200      	movs	r2, #0
2000ba9a:	6839      	ldr	r1, [r7, #0]
2000ba9c:	6878      	ldr	r0, [r7, #4]
2000ba9e:	f001 f875 	bl	2000cb8c <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
2000baa2:	683b      	ldr	r3, [r7, #0]
2000baa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000baa6:	2b00      	cmp	r3, #0
2000baa8:	d10c      	bne.n	2000bac4 <HAL_QSPI_Command_IT+0x90>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so activate TC and TE interrupts */
        /* Process unlocked */
        __HAL_UNLOCK(hqspi);
2000baaa:	687b      	ldr	r3, [r7, #4]
2000baac:	2200      	movs	r2, #0
2000baae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Enable the QSPI Transfer Error Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_TC);
2000bab2:	687b      	ldr	r3, [r7, #4]
2000bab4:	681b      	ldr	r3, [r3, #0]
2000bab6:	681a      	ldr	r2, [r3, #0]
2000bab8:	687b      	ldr	r3, [r7, #4]
2000baba:	681b      	ldr	r3, [r3, #0]
2000babc:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
2000bac0:	601a      	str	r2, [r3, #0]
2000bac2:	e013      	b.n	2000baec <HAL_QSPI_Command_IT+0xb8>
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
2000bac4:	687b      	ldr	r3, [r7, #4]
2000bac6:	2201      	movs	r2, #1
2000bac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process unlocked */
        __HAL_UNLOCK(hqspi);
2000bacc:	687b      	ldr	r3, [r7, #4]
2000bace:	2200      	movs	r2, #0
2000bad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
2000bad4:	e00a      	b.n	2000baec <HAL_QSPI_Command_IT+0xb8>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
2000bad6:	687b      	ldr	r3, [r7, #4]
2000bad8:	2200      	movs	r2, #0
2000bada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
2000bade:	e005      	b.n	2000baec <HAL_QSPI_Command_IT+0xb8>
    }
  }
  else
  {
    status = HAL_BUSY;
2000bae0:	2302      	movs	r3, #2
2000bae2:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
2000bae4:	687b      	ldr	r3, [r7, #4]
2000bae6:	2200      	movs	r2, #0
2000bae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  /* Return function status */
  return status;
2000baec:	7bfb      	ldrb	r3, [r7, #15]
}
2000baee:	4618      	mov	r0, r3
2000baf0:	3710      	adds	r7, #16
2000baf2:	46bd      	mov	sp, r7
2000baf4:	bd80      	pop	{r7, pc}

2000baf6 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
2000baf6:	b580      	push	{r7, lr}
2000baf8:	b08a      	sub	sp, #40	; 0x28
2000bafa:	af02      	add	r7, sp, #8
2000bafc:	60f8      	str	r0, [r7, #12]
2000bafe:	60b9      	str	r1, [r7, #8]
2000bb00:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
2000bb02:	2300      	movs	r3, #0
2000bb04:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
2000bb06:	f7f6 f927 	bl	20001d58 <HAL_GetTick>
2000bb0a:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
2000bb0c:	68fb      	ldr	r3, [r7, #12]
2000bb0e:	681b      	ldr	r3, [r3, #0]
2000bb10:	3320      	adds	r3, #32
2000bb12:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
2000bb14:	68fb      	ldr	r3, [r7, #12]
2000bb16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2000bb1a:	b2db      	uxtb	r3, r3
2000bb1c:	2b01      	cmp	r3, #1
2000bb1e:	d101      	bne.n	2000bb24 <HAL_QSPI_Transmit+0x2e>
2000bb20:	2302      	movs	r3, #2
2000bb22:	e076      	b.n	2000bc12 <HAL_QSPI_Transmit+0x11c>
2000bb24:	68fb      	ldr	r3, [r7, #12]
2000bb26:	2201      	movs	r2, #1
2000bb28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
2000bb2c:	68fb      	ldr	r3, [r7, #12]
2000bb2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000bb32:	b2db      	uxtb	r3, r3
2000bb34:	2b01      	cmp	r3, #1
2000bb36:	d165      	bne.n	2000bc04 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
2000bb38:	68fb      	ldr	r3, [r7, #12]
2000bb3a:	2200      	movs	r2, #0
2000bb3c:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
2000bb3e:	68bb      	ldr	r3, [r7, #8]
2000bb40:	2b00      	cmp	r3, #0
2000bb42:	d056      	beq.n	2000bbf2 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
2000bb44:	68fb      	ldr	r3, [r7, #12]
2000bb46:	2212      	movs	r2, #18
2000bb48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
2000bb4c:	68fb      	ldr	r3, [r7, #12]
2000bb4e:	681b      	ldr	r3, [r3, #0]
2000bb50:	691b      	ldr	r3, [r3, #16]
2000bb52:	1c5a      	adds	r2, r3, #1
2000bb54:	68fb      	ldr	r3, [r7, #12]
2000bb56:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
2000bb58:	68fb      	ldr	r3, [r7, #12]
2000bb5a:	681b      	ldr	r3, [r3, #0]
2000bb5c:	691b      	ldr	r3, [r3, #16]
2000bb5e:	1c5a      	adds	r2, r3, #1
2000bb60:	68fb      	ldr	r3, [r7, #12]
2000bb62:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
2000bb64:	68fb      	ldr	r3, [r7, #12]
2000bb66:	68ba      	ldr	r2, [r7, #8]
2000bb68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
2000bb6a:	68fb      	ldr	r3, [r7, #12]
2000bb6c:	681b      	ldr	r3, [r3, #0]
2000bb6e:	695a      	ldr	r2, [r3, #20]
2000bb70:	68fb      	ldr	r3, [r7, #12]
2000bb72:	681b      	ldr	r3, [r3, #0]
2000bb74:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
2000bb78:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
2000bb7a:	e01b      	b.n	2000bbb4 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
2000bb7c:	687b      	ldr	r3, [r7, #4]
2000bb7e:	9300      	str	r3, [sp, #0]
2000bb80:	69bb      	ldr	r3, [r7, #24]
2000bb82:	2201      	movs	r2, #1
2000bb84:	2104      	movs	r1, #4
2000bb86:	68f8      	ldr	r0, [r7, #12]
2000bb88:	f000 ff8d 	bl	2000caa6 <QSPI_WaitFlagStateUntilTimeout>
2000bb8c:	4603      	mov	r3, r0
2000bb8e:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
2000bb90:	7ffb      	ldrb	r3, [r7, #31]
2000bb92:	2b00      	cmp	r3, #0
2000bb94:	d113      	bne.n	2000bbbe <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
2000bb96:	68fb      	ldr	r3, [r7, #12]
2000bb98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000bb9a:	781a      	ldrb	r2, [r3, #0]
2000bb9c:	697b      	ldr	r3, [r7, #20]
2000bb9e:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
2000bba0:	68fb      	ldr	r3, [r7, #12]
2000bba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000bba4:	1c5a      	adds	r2, r3, #1
2000bba6:	68fb      	ldr	r3, [r7, #12]
2000bba8:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
2000bbaa:	68fb      	ldr	r3, [r7, #12]
2000bbac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000bbae:	1e5a      	subs	r2, r3, #1
2000bbb0:	68fb      	ldr	r3, [r7, #12]
2000bbb2:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
2000bbb4:	68fb      	ldr	r3, [r7, #12]
2000bbb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000bbb8:	2b00      	cmp	r3, #0
2000bbba:	d1df      	bne.n	2000bb7c <HAL_QSPI_Transmit+0x86>
2000bbbc:	e000      	b.n	2000bbc0 <HAL_QSPI_Transmit+0xca>
          break;
2000bbbe:	bf00      	nop
      }

      if (status == HAL_OK)
2000bbc0:	7ffb      	ldrb	r3, [r7, #31]
2000bbc2:	2b00      	cmp	r3, #0
2000bbc4:	d110      	bne.n	2000bbe8 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
2000bbc6:	687b      	ldr	r3, [r7, #4]
2000bbc8:	9300      	str	r3, [sp, #0]
2000bbca:	69bb      	ldr	r3, [r7, #24]
2000bbcc:	2201      	movs	r2, #1
2000bbce:	2102      	movs	r1, #2
2000bbd0:	68f8      	ldr	r0, [r7, #12]
2000bbd2:	f000 ff68 	bl	2000caa6 <QSPI_WaitFlagStateUntilTimeout>
2000bbd6:	4603      	mov	r3, r0
2000bbd8:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
2000bbda:	7ffb      	ldrb	r3, [r7, #31]
2000bbdc:	2b00      	cmp	r3, #0
2000bbde:	d103      	bne.n	2000bbe8 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
2000bbe0:	68fb      	ldr	r3, [r7, #12]
2000bbe2:	681b      	ldr	r3, [r3, #0]
2000bbe4:	2202      	movs	r2, #2
2000bbe6:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
2000bbe8:	68fb      	ldr	r3, [r7, #12]
2000bbea:	2201      	movs	r2, #1
2000bbec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
2000bbf0:	e00a      	b.n	2000bc08 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
2000bbf2:	68fb      	ldr	r3, [r7, #12]
2000bbf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000bbf6:	f043 0208 	orr.w	r2, r3, #8
2000bbfa:	68fb      	ldr	r3, [r7, #12]
2000bbfc:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
2000bbfe:	2301      	movs	r3, #1
2000bc00:	77fb      	strb	r3, [r7, #31]
2000bc02:	e001      	b.n	2000bc08 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
2000bc04:	2302      	movs	r3, #2
2000bc06:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
2000bc08:	68fb      	ldr	r3, [r7, #12]
2000bc0a:	2200      	movs	r2, #0
2000bc0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
2000bc10:	7ffb      	ldrb	r3, [r7, #31]
}
2000bc12:	4618      	mov	r0, r3
2000bc14:	3720      	adds	r7, #32
2000bc16:	46bd      	mov	sp, r7
2000bc18:	bd80      	pop	{r7, pc}

2000bc1a <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
2000bc1a:	b580      	push	{r7, lr}
2000bc1c:	b08a      	sub	sp, #40	; 0x28
2000bc1e:	af02      	add	r7, sp, #8
2000bc20:	60f8      	str	r0, [r7, #12]
2000bc22:	60b9      	str	r1, [r7, #8]
2000bc24:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
2000bc26:	2300      	movs	r3, #0
2000bc28:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
2000bc2a:	f7f6 f895 	bl	20001d58 <HAL_GetTick>
2000bc2e:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
2000bc30:	68fb      	ldr	r3, [r7, #12]
2000bc32:	681b      	ldr	r3, [r3, #0]
2000bc34:	699b      	ldr	r3, [r3, #24]
2000bc36:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
2000bc38:	68fb      	ldr	r3, [r7, #12]
2000bc3a:	681b      	ldr	r3, [r3, #0]
2000bc3c:	3320      	adds	r3, #32
2000bc3e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
2000bc40:	68fb      	ldr	r3, [r7, #12]
2000bc42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2000bc46:	b2db      	uxtb	r3, r3
2000bc48:	2b01      	cmp	r3, #1
2000bc4a:	d101      	bne.n	2000bc50 <HAL_QSPI_Receive+0x36>
2000bc4c:	2302      	movs	r3, #2
2000bc4e:	e07d      	b.n	2000bd4c <HAL_QSPI_Receive+0x132>
2000bc50:	68fb      	ldr	r3, [r7, #12]
2000bc52:	2201      	movs	r2, #1
2000bc54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
2000bc58:	68fb      	ldr	r3, [r7, #12]
2000bc5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000bc5e:	b2db      	uxtb	r3, r3
2000bc60:	2b01      	cmp	r3, #1
2000bc62:	d16c      	bne.n	2000bd3e <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
2000bc64:	68fb      	ldr	r3, [r7, #12]
2000bc66:	2200      	movs	r2, #0
2000bc68:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
2000bc6a:	68bb      	ldr	r3, [r7, #8]
2000bc6c:	2b00      	cmp	r3, #0
2000bc6e:	d05d      	beq.n	2000bd2c <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
2000bc70:	68fb      	ldr	r3, [r7, #12]
2000bc72:	2222      	movs	r2, #34	; 0x22
2000bc74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
2000bc78:	68fb      	ldr	r3, [r7, #12]
2000bc7a:	681b      	ldr	r3, [r3, #0]
2000bc7c:	691b      	ldr	r3, [r3, #16]
2000bc7e:	1c5a      	adds	r2, r3, #1
2000bc80:	68fb      	ldr	r3, [r7, #12]
2000bc82:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
2000bc84:	68fb      	ldr	r3, [r7, #12]
2000bc86:	681b      	ldr	r3, [r3, #0]
2000bc88:	691b      	ldr	r3, [r3, #16]
2000bc8a:	1c5a      	adds	r2, r3, #1
2000bc8c:	68fb      	ldr	r3, [r7, #12]
2000bc8e:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
2000bc90:	68fb      	ldr	r3, [r7, #12]
2000bc92:	68ba      	ldr	r2, [r7, #8]
2000bc94:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
2000bc96:	68fb      	ldr	r3, [r7, #12]
2000bc98:	681b      	ldr	r3, [r3, #0]
2000bc9a:	695b      	ldr	r3, [r3, #20]
2000bc9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
2000bca0:	68fb      	ldr	r3, [r7, #12]
2000bca2:	681b      	ldr	r3, [r3, #0]
2000bca4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
2000bca8:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
2000bcaa:	68fb      	ldr	r3, [r7, #12]
2000bcac:	681b      	ldr	r3, [r3, #0]
2000bcae:	697a      	ldr	r2, [r7, #20]
2000bcb0:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
2000bcb2:	e01c      	b.n	2000bcee <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
2000bcb4:	687b      	ldr	r3, [r7, #4]
2000bcb6:	9300      	str	r3, [sp, #0]
2000bcb8:	69bb      	ldr	r3, [r7, #24]
2000bcba:	2201      	movs	r2, #1
2000bcbc:	2106      	movs	r1, #6
2000bcbe:	68f8      	ldr	r0, [r7, #12]
2000bcc0:	f000 fef1 	bl	2000caa6 <QSPI_WaitFlagStateUntilTimeout>
2000bcc4:	4603      	mov	r3, r0
2000bcc6:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
2000bcc8:	7ffb      	ldrb	r3, [r7, #31]
2000bcca:	2b00      	cmp	r3, #0
2000bccc:	d114      	bne.n	2000bcf8 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
2000bcce:	68fb      	ldr	r3, [r7, #12]
2000bcd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000bcd2:	693a      	ldr	r2, [r7, #16]
2000bcd4:	7812      	ldrb	r2, [r2, #0]
2000bcd6:	b2d2      	uxtb	r2, r2
2000bcd8:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
2000bcda:	68fb      	ldr	r3, [r7, #12]
2000bcdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000bcde:	1c5a      	adds	r2, r3, #1
2000bce0:	68fb      	ldr	r3, [r7, #12]
2000bce2:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
2000bce4:	68fb      	ldr	r3, [r7, #12]
2000bce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000bce8:	1e5a      	subs	r2, r3, #1
2000bcea:	68fb      	ldr	r3, [r7, #12]
2000bcec:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
2000bcee:	68fb      	ldr	r3, [r7, #12]
2000bcf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000bcf2:	2b00      	cmp	r3, #0
2000bcf4:	d1de      	bne.n	2000bcb4 <HAL_QSPI_Receive+0x9a>
2000bcf6:	e000      	b.n	2000bcfa <HAL_QSPI_Receive+0xe0>
          break;
2000bcf8:	bf00      	nop
      }

      if (status == HAL_OK)
2000bcfa:	7ffb      	ldrb	r3, [r7, #31]
2000bcfc:	2b00      	cmp	r3, #0
2000bcfe:	d110      	bne.n	2000bd22 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
2000bd00:	687b      	ldr	r3, [r7, #4]
2000bd02:	9300      	str	r3, [sp, #0]
2000bd04:	69bb      	ldr	r3, [r7, #24]
2000bd06:	2201      	movs	r2, #1
2000bd08:	2102      	movs	r1, #2
2000bd0a:	68f8      	ldr	r0, [r7, #12]
2000bd0c:	f000 fecb 	bl	2000caa6 <QSPI_WaitFlagStateUntilTimeout>
2000bd10:	4603      	mov	r3, r0
2000bd12:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
2000bd14:	7ffb      	ldrb	r3, [r7, #31]
2000bd16:	2b00      	cmp	r3, #0
2000bd18:	d103      	bne.n	2000bd22 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
2000bd1a:	68fb      	ldr	r3, [r7, #12]
2000bd1c:	681b      	ldr	r3, [r3, #0]
2000bd1e:	2202      	movs	r2, #2
2000bd20:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
2000bd22:	68fb      	ldr	r3, [r7, #12]
2000bd24:	2201      	movs	r2, #1
2000bd26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
2000bd2a:	e00a      	b.n	2000bd42 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
2000bd2c:	68fb      	ldr	r3, [r7, #12]
2000bd2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000bd30:	f043 0208 	orr.w	r2, r3, #8
2000bd34:	68fb      	ldr	r3, [r7, #12]
2000bd36:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
2000bd38:	2301      	movs	r3, #1
2000bd3a:	77fb      	strb	r3, [r7, #31]
2000bd3c:	e001      	b.n	2000bd42 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
2000bd3e:	2302      	movs	r3, #2
2000bd40:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
2000bd42:	68fb      	ldr	r3, [r7, #12]
2000bd44:	2200      	movs	r2, #0
2000bd46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
2000bd4a:	7ffb      	ldrb	r3, [r7, #31]
}
2000bd4c:	4618      	mov	r0, r3
2000bd4e:	3720      	adds	r7, #32
2000bd50:	46bd      	mov	sp, r7
2000bd52:	bd80      	pop	{r7, pc}

2000bd54 <HAL_QSPI_Transmit_IT>:
  * @param  pData : pointer to data buffer
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit_IT(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
2000bd54:	b480      	push	{r7}
2000bd56:	b085      	sub	sp, #20
2000bd58:	af00      	add	r7, sp, #0
2000bd5a:	6078      	str	r0, [r7, #4]
2000bd5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2000bd5e:	2300      	movs	r3, #0
2000bd60:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hqspi);
2000bd62:	687b      	ldr	r3, [r7, #4]
2000bd64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2000bd68:	b2db      	uxtb	r3, r3
2000bd6a:	2b01      	cmp	r3, #1
2000bd6c:	d101      	bne.n	2000bd72 <HAL_QSPI_Transmit_IT+0x1e>
2000bd6e:	2302      	movs	r3, #2
2000bd70:	e04f      	b.n	2000be12 <HAL_QSPI_Transmit_IT+0xbe>
2000bd72:	687b      	ldr	r3, [r7, #4]
2000bd74:	2201      	movs	r2, #1
2000bd76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
2000bd7a:	687b      	ldr	r3, [r7, #4]
2000bd7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000bd80:	b2db      	uxtb	r3, r3
2000bd82:	2b01      	cmp	r3, #1
2000bd84:	d13e      	bne.n	2000be04 <HAL_QSPI_Transmit_IT+0xb0>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
2000bd86:	687b      	ldr	r3, [r7, #4]
2000bd88:	2200      	movs	r2, #0
2000bd8a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
2000bd8c:	683b      	ldr	r3, [r7, #0]
2000bd8e:	2b00      	cmp	r3, #0
2000bd90:	d02b      	beq.n	2000bdea <HAL_QSPI_Transmit_IT+0x96>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
2000bd92:	687b      	ldr	r3, [r7, #4]
2000bd94:	2212      	movs	r2, #18
2000bd96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
2000bd9a:	687b      	ldr	r3, [r7, #4]
2000bd9c:	681b      	ldr	r3, [r3, #0]
2000bd9e:	691b      	ldr	r3, [r3, #16]
2000bda0:	1c5a      	adds	r2, r3, #1
2000bda2:	687b      	ldr	r3, [r7, #4]
2000bda4:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
2000bda6:	687b      	ldr	r3, [r7, #4]
2000bda8:	681b      	ldr	r3, [r3, #0]
2000bdaa:	691b      	ldr	r3, [r3, #16]
2000bdac:	1c5a      	adds	r2, r3, #1
2000bdae:	687b      	ldr	r3, [r7, #4]
2000bdb0:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
2000bdb2:	687b      	ldr	r3, [r7, #4]
2000bdb4:	683a      	ldr	r2, [r7, #0]
2000bdb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
2000bdb8:	687b      	ldr	r3, [r7, #4]
2000bdba:	681b      	ldr	r3, [r3, #0]
2000bdbc:	2203      	movs	r2, #3
2000bdbe:	60da      	str	r2, [r3, #12]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
2000bdc0:	687b      	ldr	r3, [r7, #4]
2000bdc2:	681b      	ldr	r3, [r3, #0]
2000bdc4:	695a      	ldr	r2, [r3, #20]
2000bdc6:	687b      	ldr	r3, [r7, #4]
2000bdc8:	681b      	ldr	r3, [r3, #0]
2000bdca:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
2000bdce:	615a      	str	r2, [r3, #20]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
2000bdd0:	687b      	ldr	r3, [r7, #4]
2000bdd2:	2200      	movs	r2, #0
2000bdd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Enable the QSPI transfer error, FIFO threshold and transfer complete Interrupts */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_FT | QSPI_IT_TC);
2000bdd8:	687b      	ldr	r3, [r7, #4]
2000bdda:	681b      	ldr	r3, [r3, #0]
2000bddc:	681a      	ldr	r2, [r3, #0]
2000bdde:	687b      	ldr	r3, [r7, #4]
2000bde0:	681b      	ldr	r3, [r3, #0]
2000bde2:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
2000bde6:	601a      	str	r2, [r3, #0]
2000bde8:	e012      	b.n	2000be10 <HAL_QSPI_Transmit_IT+0xbc>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
2000bdea:	687b      	ldr	r3, [r7, #4]
2000bdec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000bdee:	f043 0208 	orr.w	r2, r3, #8
2000bdf2:	687b      	ldr	r3, [r7, #4]
2000bdf4:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
2000bdf6:	2301      	movs	r3, #1
2000bdf8:	73fb      	strb	r3, [r7, #15]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
2000bdfa:	687b      	ldr	r3, [r7, #4]
2000bdfc:	2200      	movs	r2, #0
2000bdfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
2000be02:	e005      	b.n	2000be10 <HAL_QSPI_Transmit_IT+0xbc>
    }
  }
  else
  {
    status = HAL_BUSY;
2000be04:	2302      	movs	r3, #2
2000be06:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
2000be08:	687b      	ldr	r3, [r7, #4]
2000be0a:	2200      	movs	r2, #0
2000be0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
2000be10:	7bfb      	ldrb	r3, [r7, #15]
}
2000be12:	4618      	mov	r0, r3
2000be14:	3714      	adds	r7, #20
2000be16:	46bd      	mov	sp, r7
2000be18:	f85d 7b04 	ldr.w	r7, [sp], #4
2000be1c:	4770      	bx	lr

2000be1e <HAL_QSPI_Receive_IT>:
  * @param  pData : pointer to data buffer
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive_IT(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
2000be1e:	b480      	push	{r7}
2000be20:	b085      	sub	sp, #20
2000be22:	af00      	add	r7, sp, #0
2000be24:	6078      	str	r0, [r7, #4]
2000be26:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2000be28:	2300      	movs	r3, #0
2000be2a:	73fb      	strb	r3, [r7, #15]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
2000be2c:	687b      	ldr	r3, [r7, #4]
2000be2e:	681b      	ldr	r3, [r3, #0]
2000be30:	699b      	ldr	r3, [r3, #24]
2000be32:	60bb      	str	r3, [r7, #8]

  /* Process locked */
  __HAL_LOCK(hqspi);
2000be34:	687b      	ldr	r3, [r7, #4]
2000be36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2000be3a:	b2db      	uxtb	r3, r3
2000be3c:	2b01      	cmp	r3, #1
2000be3e:	d101      	bne.n	2000be44 <HAL_QSPI_Receive_IT+0x26>
2000be40:	2302      	movs	r3, #2
2000be42:	e055      	b.n	2000bef0 <HAL_QSPI_Receive_IT+0xd2>
2000be44:	687b      	ldr	r3, [r7, #4]
2000be46:	2201      	movs	r2, #1
2000be48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
2000be4c:	687b      	ldr	r3, [r7, #4]
2000be4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000be52:	b2db      	uxtb	r3, r3
2000be54:	2b01      	cmp	r3, #1
2000be56:	d144      	bne.n	2000bee2 <HAL_QSPI_Receive_IT+0xc4>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
2000be58:	687b      	ldr	r3, [r7, #4]
2000be5a:	2200      	movs	r2, #0
2000be5c:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
2000be5e:	683b      	ldr	r3, [r7, #0]
2000be60:	2b00      	cmp	r3, #0
2000be62:	d031      	beq.n	2000bec8 <HAL_QSPI_Receive_IT+0xaa>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
2000be64:	687b      	ldr	r3, [r7, #4]
2000be66:	2222      	movs	r2, #34	; 0x22
2000be68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
2000be6c:	687b      	ldr	r3, [r7, #4]
2000be6e:	681b      	ldr	r3, [r3, #0]
2000be70:	691b      	ldr	r3, [r3, #16]
2000be72:	1c5a      	adds	r2, r3, #1
2000be74:	687b      	ldr	r3, [r7, #4]
2000be76:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
2000be78:	687b      	ldr	r3, [r7, #4]
2000be7a:	681b      	ldr	r3, [r3, #0]
2000be7c:	691b      	ldr	r3, [r3, #16]
2000be7e:	1c5a      	adds	r2, r3, #1
2000be80:	687b      	ldr	r3, [r7, #4]
2000be82:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
2000be84:	687b      	ldr	r3, [r7, #4]
2000be86:	683a      	ldr	r2, [r7, #0]
2000be88:	631a      	str	r2, [r3, #48]	; 0x30

      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
2000be8a:	687b      	ldr	r3, [r7, #4]
2000be8c:	681b      	ldr	r3, [r3, #0]
2000be8e:	2203      	movs	r2, #3
2000be90:	60da      	str	r2, [r3, #12]

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
2000be92:	687b      	ldr	r3, [r7, #4]
2000be94:	681b      	ldr	r3, [r3, #0]
2000be96:	695b      	ldr	r3, [r3, #20]
2000be98:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
2000be9c:	687b      	ldr	r3, [r7, #4]
2000be9e:	681b      	ldr	r3, [r3, #0]
2000bea0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
2000bea4:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
2000bea6:	687b      	ldr	r3, [r7, #4]
2000bea8:	681b      	ldr	r3, [r3, #0]
2000beaa:	68ba      	ldr	r2, [r7, #8]
2000beac:	619a      	str	r2, [r3, #24]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
2000beae:	687b      	ldr	r3, [r7, #4]
2000beb0:	2200      	movs	r2, #0
2000beb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Enable the QSPI transfer error, FIFO threshold and transfer complete Interrupts */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_FT | QSPI_IT_TC);
2000beb6:	687b      	ldr	r3, [r7, #4]
2000beb8:	681b      	ldr	r3, [r3, #0]
2000beba:	681a      	ldr	r2, [r3, #0]
2000bebc:	687b      	ldr	r3, [r7, #4]
2000bebe:	681b      	ldr	r3, [r3, #0]
2000bec0:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
2000bec4:	601a      	str	r2, [r3, #0]
2000bec6:	e012      	b.n	2000beee <HAL_QSPI_Receive_IT+0xd0>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
2000bec8:	687b      	ldr	r3, [r7, #4]
2000beca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000becc:	f043 0208 	orr.w	r2, r3, #8
2000bed0:	687b      	ldr	r3, [r7, #4]
2000bed2:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
2000bed4:	2301      	movs	r3, #1
2000bed6:	73fb      	strb	r3, [r7, #15]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
2000bed8:	687b      	ldr	r3, [r7, #4]
2000beda:	2200      	movs	r2, #0
2000bedc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
2000bee0:	e005      	b.n	2000beee <HAL_QSPI_Receive_IT+0xd0>
    }
  }
  else
  {
    status = HAL_BUSY;
2000bee2:	2302      	movs	r3, #2
2000bee4:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
2000bee6:	687b      	ldr	r3, [r7, #4]
2000bee8:	2200      	movs	r2, #0
2000beea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
2000beee:	7bfb      	ldrb	r3, [r7, #15]
}
2000bef0:	4618      	mov	r0, r3
2000bef2:	3714      	adds	r7, #20
2000bef4:	46bd      	mov	sp, r7
2000bef6:	f85d 7b04 	ldr.w	r7, [sp], #4
2000befa:	4770      	bx	lr

2000befc <HAL_QSPI_Transmit_DMA>:
  * @note   If DMA peripheral access is configured as word, the number
  *         of data and the fifo threshold should be aligned on word
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit_DMA(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
2000befc:	b580      	push	{r7, lr}
2000befe:	b084      	sub	sp, #16
2000bf00:	af00      	add	r7, sp, #0
2000bf02:	6078      	str	r0, [r7, #4]
2000bf04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2000bf06:	2300      	movs	r3, #0
2000bf08:	73fb      	strb	r3, [r7, #15]
  uint32_t data_size = (READ_REG(hqspi->Instance->DLR) + 1U);
2000bf0a:	687b      	ldr	r3, [r7, #4]
2000bf0c:	681b      	ldr	r3, [r3, #0]
2000bf0e:	691b      	ldr	r3, [r3, #16]
2000bf10:	3301      	adds	r3, #1
2000bf12:	60bb      	str	r3, [r7, #8]

  /* Process locked */
  __HAL_LOCK(hqspi);
2000bf14:	687b      	ldr	r3, [r7, #4]
2000bf16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2000bf1a:	b2db      	uxtb	r3, r3
2000bf1c:	2b01      	cmp	r3, #1
2000bf1e:	d101      	bne.n	2000bf24 <HAL_QSPI_Transmit_DMA+0x28>
2000bf20:	2302      	movs	r3, #2
2000bf22:	e0e3      	b.n	2000c0ec <HAL_QSPI_Transmit_DMA+0x1f0>
2000bf24:	687b      	ldr	r3, [r7, #4]
2000bf26:	2201      	movs	r2, #1
2000bf28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
2000bf2c:	687b      	ldr	r3, [r7, #4]
2000bf2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000bf32:	b2db      	uxtb	r3, r3
2000bf34:	2b01      	cmp	r3, #1
2000bf36:	f040 80d2 	bne.w	2000c0de <HAL_QSPI_Transmit_DMA+0x1e2>
  {
    /* Clear the error code */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
2000bf3a:	687b      	ldr	r3, [r7, #4]
2000bf3c:	2200      	movs	r2, #0
2000bf3e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
2000bf40:	683b      	ldr	r3, [r7, #0]
2000bf42:	2b00      	cmp	r3, #0
2000bf44:	f000 80be 	beq.w	2000c0c4 <HAL_QSPI_Transmit_DMA+0x1c8>
    {
      /* Configure counters of the handle */
      if (hqspi->hdma->Init.PeriphDataAlignment == DMA_PDATAALIGN_BYTE)
2000bf48:	687b      	ldr	r3, [r7, #4]
2000bf4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000bf4c:	695b      	ldr	r3, [r3, #20]
2000bf4e:	2b00      	cmp	r3, #0
2000bf50:	d103      	bne.n	2000bf5a <HAL_QSPI_Transmit_DMA+0x5e>
      {
        hqspi->TxXferCount = data_size;
2000bf52:	687b      	ldr	r3, [r7, #4]
2000bf54:	68ba      	ldr	r2, [r7, #8]
2000bf56:	62da      	str	r2, [r3, #44]	; 0x2c
2000bf58:	e044      	b.n	2000bfe4 <HAL_QSPI_Transmit_DMA+0xe8>
      }
      else if (hqspi->hdma->Init.PeriphDataAlignment == DMA_PDATAALIGN_HALFWORD)
2000bf5a:	687b      	ldr	r3, [r7, #4]
2000bf5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000bf5e:	695b      	ldr	r3, [r3, #20]
2000bf60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
2000bf64:	d11c      	bne.n	2000bfa0 <HAL_QSPI_Transmit_DMA+0xa4>
      {
        if (((data_size % 2U) != 0U) || ((hqspi->Init.FifoThreshold % 2U) != 0U))
2000bf66:	68bb      	ldr	r3, [r7, #8]
2000bf68:	f003 0301 	and.w	r3, r3, #1
2000bf6c:	2b00      	cmp	r3, #0
2000bf6e:	d105      	bne.n	2000bf7c <HAL_QSPI_Transmit_DMA+0x80>
2000bf70:	687b      	ldr	r3, [r7, #4]
2000bf72:	689b      	ldr	r3, [r3, #8]
2000bf74:	f003 0301 	and.w	r3, r3, #1
2000bf78:	2b00      	cmp	r3, #0
2000bf7a:	d00c      	beq.n	2000bf96 <HAL_QSPI_Transmit_DMA+0x9a>
        {
          /* The number of data or the fifo threshold is not aligned on halfword
          => no transfer possible with DMA peripheral access configured as halfword */
          hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
2000bf7c:	687b      	ldr	r3, [r7, #4]
2000bf7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000bf80:	f043 0208 	orr.w	r2, r3, #8
2000bf84:	687b      	ldr	r3, [r7, #4]
2000bf86:	645a      	str	r2, [r3, #68]	; 0x44
          status = HAL_ERROR;
2000bf88:	2301      	movs	r3, #1
2000bf8a:	73fb      	strb	r3, [r7, #15]

          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
2000bf8c:	687b      	ldr	r3, [r7, #4]
2000bf8e:	2200      	movs	r2, #0
2000bf90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
2000bf94:	e026      	b.n	2000bfe4 <HAL_QSPI_Transmit_DMA+0xe8>
        }
        else
        {
          hqspi->TxXferCount = (data_size >> 1U);
2000bf96:	68bb      	ldr	r3, [r7, #8]
2000bf98:	085a      	lsrs	r2, r3, #1
2000bf9a:	687b      	ldr	r3, [r7, #4]
2000bf9c:	62da      	str	r2, [r3, #44]	; 0x2c
2000bf9e:	e021      	b.n	2000bfe4 <HAL_QSPI_Transmit_DMA+0xe8>
        }
      }
      else if (hqspi->hdma->Init.PeriphDataAlignment == DMA_PDATAALIGN_WORD)
2000bfa0:	687b      	ldr	r3, [r7, #4]
2000bfa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000bfa4:	695b      	ldr	r3, [r3, #20]
2000bfa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
2000bfaa:	d11b      	bne.n	2000bfe4 <HAL_QSPI_Transmit_DMA+0xe8>
      {
        if (((data_size % 4U) != 0U) || ((hqspi->Init.FifoThreshold % 4U) != 0U))
2000bfac:	68bb      	ldr	r3, [r7, #8]
2000bfae:	f003 0303 	and.w	r3, r3, #3
2000bfb2:	2b00      	cmp	r3, #0
2000bfb4:	d105      	bne.n	2000bfc2 <HAL_QSPI_Transmit_DMA+0xc6>
2000bfb6:	687b      	ldr	r3, [r7, #4]
2000bfb8:	689b      	ldr	r3, [r3, #8]
2000bfba:	f003 0303 	and.w	r3, r3, #3
2000bfbe:	2b00      	cmp	r3, #0
2000bfc0:	d00c      	beq.n	2000bfdc <HAL_QSPI_Transmit_DMA+0xe0>
        {
          /* The number of data or the fifo threshold is not aligned on word
          => no transfer possible with DMA peripheral access configured as word */
          hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
2000bfc2:	687b      	ldr	r3, [r7, #4]
2000bfc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000bfc6:	f043 0208 	orr.w	r2, r3, #8
2000bfca:	687b      	ldr	r3, [r7, #4]
2000bfcc:	645a      	str	r2, [r3, #68]	; 0x44
          status = HAL_ERROR;
2000bfce:	2301      	movs	r3, #1
2000bfd0:	73fb      	strb	r3, [r7, #15]

          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
2000bfd2:	687b      	ldr	r3, [r7, #4]
2000bfd4:	2200      	movs	r2, #0
2000bfd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
2000bfda:	e003      	b.n	2000bfe4 <HAL_QSPI_Transmit_DMA+0xe8>
        }
        else
        {
          hqspi->TxXferCount = (data_size >> 2U);
2000bfdc:	68bb      	ldr	r3, [r7, #8]
2000bfde:	089a      	lsrs	r2, r3, #2
2000bfe0:	687b      	ldr	r3, [r7, #4]
2000bfe2:	62da      	str	r2, [r3, #44]	; 0x2c
      else
      {
        /* Nothing to do */
      }

      if (status == HAL_OK)
2000bfe4:	7bfb      	ldrb	r3, [r7, #15]
2000bfe6:	2b00      	cmp	r3, #0
2000bfe8:	d17f      	bne.n	2000c0ea <HAL_QSPI_Transmit_DMA+0x1ee>
      {
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
2000bfea:	687b      	ldr	r3, [r7, #4]
2000bfec:	2212      	movs	r2, #18
2000bfee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, (QSPI_FLAG_TE | QSPI_FLAG_TC));
2000bff2:	687b      	ldr	r3, [r7, #4]
2000bff4:	681b      	ldr	r3, [r3, #0]
2000bff6:	2203      	movs	r2, #3
2000bff8:	60da      	str	r2, [r3, #12]

        /* Configure size and pointer of the handle */
        hqspi->TxXferSize = hqspi->TxXferCount;
2000bffa:	687b      	ldr	r3, [r7, #4]
2000bffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000bffe:	687b      	ldr	r3, [r7, #4]
2000c000:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->pTxBuffPtr = pData;
2000c002:	687b      	ldr	r3, [r7, #4]
2000c004:	683a      	ldr	r2, [r7, #0]
2000c006:	625a      	str	r2, [r3, #36]	; 0x24

        /* Configure QSPI: CCR register with functional mode as indirect write */
        MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
2000c008:	687b      	ldr	r3, [r7, #4]
2000c00a:	681b      	ldr	r3, [r3, #0]
2000c00c:	695a      	ldr	r2, [r3, #20]
2000c00e:	687b      	ldr	r3, [r7, #4]
2000c010:	681b      	ldr	r3, [r3, #0]
2000c012:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
2000c016:	615a      	str	r2, [r3, #20]

        /* Set the QSPI DMA transfer complete callback */
        hqspi->hdma->XferCpltCallback = QSPI_DMATxCplt;
2000c018:	687b      	ldr	r3, [r7, #4]
2000c01a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000c01c:	4a35      	ldr	r2, [pc, #212]	; (2000c0f4 <HAL_QSPI_Transmit_DMA+0x1f8>)
2000c01e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the QSPI DMA Half transfer complete callback */
        hqspi->hdma->XferHalfCpltCallback = QSPI_DMATxHalfCplt;
2000c020:	687b      	ldr	r3, [r7, #4]
2000c022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000c024:	4a34      	ldr	r2, [pc, #208]	; (2000c0f8 <HAL_QSPI_Transmit_DMA+0x1fc>)
2000c026:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hqspi->hdma->XferErrorCallback = QSPI_DMAError;
2000c028:	687b      	ldr	r3, [r7, #4]
2000c02a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000c02c:	4a33      	ldr	r2, [pc, #204]	; (2000c0fc <HAL_QSPI_Transmit_DMA+0x200>)
2000c02e:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Clear the DMA abort callback */
        hqspi->hdma->XferAbortCallback = NULL;
2000c030:	687b      	ldr	r3, [r7, #4]
2000c032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000c034:	2200      	movs	r2, #0
2000c036:	651a      	str	r2, [r3, #80]	; 0x50

        /* Configure the direction of the DMA */
        hqspi->hdma->Init.Direction = DMA_MEMORY_TO_PERIPH;
2000c038:	687b      	ldr	r3, [r7, #4]
2000c03a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000c03c:	2240      	movs	r2, #64	; 0x40
2000c03e:	609a      	str	r2, [r3, #8]
        MODIFY_REG(hqspi->hdma->Instance->CR, DMA_SxCR_DIR, hqspi->hdma->Init.Direction);
2000c040:	687b      	ldr	r3, [r7, #4]
2000c042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000c044:	681b      	ldr	r3, [r3, #0]
2000c046:	681b      	ldr	r3, [r3, #0]
2000c048:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
2000c04c:	687b      	ldr	r3, [r7, #4]
2000c04e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000c050:	689a      	ldr	r2, [r3, #8]
2000c052:	687b      	ldr	r3, [r7, #4]
2000c054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000c056:	681b      	ldr	r3, [r3, #0]
2000c058:	430a      	orrs	r2, r1
2000c05a:	601a      	str	r2, [r3, #0]

        /* Enable the QSPI transmit DMA Channel */
        if (HAL_DMA_Start_IT(hqspi->hdma, (uint32_t)pData, (uint32_t)&hqspi->Instance->DR, hqspi->TxXferSize) == HAL_OK)
2000c05c:	687b      	ldr	r3, [r7, #4]
2000c05e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
2000c060:	6839      	ldr	r1, [r7, #0]
2000c062:	687b      	ldr	r3, [r7, #4]
2000c064:	681b      	ldr	r3, [r3, #0]
2000c066:	3320      	adds	r3, #32
2000c068:	461a      	mov	r2, r3
2000c06a:	687b      	ldr	r3, [r7, #4]
2000c06c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2000c06e:	f7f6 fc8c 	bl	2000298a <HAL_DMA_Start_IT>
2000c072:	4603      	mov	r3, r0
2000c074:	2b00      	cmp	r3, #0
2000c076:	d114      	bne.n	2000c0a2 <HAL_QSPI_Transmit_DMA+0x1a6>
        {
          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
2000c078:	687b      	ldr	r3, [r7, #4]
2000c07a:	2200      	movs	r2, #0
2000c07c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Enable the QSPI transfer error Interrupt */
          __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE);
2000c080:	687b      	ldr	r3, [r7, #4]
2000c082:	681b      	ldr	r3, [r3, #0]
2000c084:	681a      	ldr	r2, [r3, #0]
2000c086:	687b      	ldr	r3, [r7, #4]
2000c088:	681b      	ldr	r3, [r3, #0]
2000c08a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
2000c08e:	601a      	str	r2, [r3, #0]

          /* Enable the DMA transfer by setting the DMAEN bit in the QSPI CR register */
          SET_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
2000c090:	687b      	ldr	r3, [r7, #4]
2000c092:	681b      	ldr	r3, [r3, #0]
2000c094:	681a      	ldr	r2, [r3, #0]
2000c096:	687b      	ldr	r3, [r7, #4]
2000c098:	681b      	ldr	r3, [r3, #0]
2000c09a:	f042 0204 	orr.w	r2, r2, #4
2000c09e:	601a      	str	r2, [r3, #0]
2000c0a0:	e023      	b.n	2000c0ea <HAL_QSPI_Transmit_DMA+0x1ee>
        }
        else
        {
          status = HAL_ERROR;
2000c0a2:	2301      	movs	r3, #1
2000c0a4:	73fb      	strb	r3, [r7, #15]
          hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
2000c0a6:	687b      	ldr	r3, [r7, #4]
2000c0a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000c0aa:	f043 0204 	orr.w	r2, r3, #4
2000c0ae:	687b      	ldr	r3, [r7, #4]
2000c0b0:	645a      	str	r2, [r3, #68]	; 0x44
          hqspi->State = HAL_QSPI_STATE_READY;
2000c0b2:	687b      	ldr	r3, [r7, #4]
2000c0b4:	2201      	movs	r2, #1
2000c0b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
2000c0ba:	687b      	ldr	r3, [r7, #4]
2000c0bc:	2200      	movs	r2, #0
2000c0be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
2000c0c2:	e012      	b.n	2000c0ea <HAL_QSPI_Transmit_DMA+0x1ee>
        }
     }
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
2000c0c4:	687b      	ldr	r3, [r7, #4]
2000c0c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000c0c8:	f043 0208 	orr.w	r2, r3, #8
2000c0cc:	687b      	ldr	r3, [r7, #4]
2000c0ce:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
2000c0d0:	2301      	movs	r3, #1
2000c0d2:	73fb      	strb	r3, [r7, #15]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
2000c0d4:	687b      	ldr	r3, [r7, #4]
2000c0d6:	2200      	movs	r2, #0
2000c0d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
2000c0dc:	e005      	b.n	2000c0ea <HAL_QSPI_Transmit_DMA+0x1ee>
    }
  }
  else
  {
    status = HAL_BUSY;
2000c0de:	2302      	movs	r3, #2
2000c0e0:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
2000c0e2:	687b      	ldr	r3, [r7, #4]
2000c0e4:	2200      	movs	r2, #0
2000c0e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
2000c0ea:	7bfb      	ldrb	r3, [r7, #15]
}
2000c0ec:	4618      	mov	r0, r3
2000c0ee:	3710      	adds	r7, #16
2000c0f0:	46bd      	mov	sp, r7
2000c0f2:	bd80      	pop	{r7, pc}
2000c0f4:	2000c989 	.word	0x2000c989
2000c0f8:	2000c9d5 	.word	0x2000c9d5
2000c0fc:	2000c9f1 	.word	0x2000c9f1

2000c100 <HAL_QSPI_Receive_DMA>:
  * @note   If DMA peripheral access is configured as word, the number
  *         of data and the fifo threshold should be aligned on word
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive_DMA(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
2000c100:	b580      	push	{r7, lr}
2000c102:	b086      	sub	sp, #24
2000c104:	af00      	add	r7, sp, #0
2000c106:	6078      	str	r0, [r7, #4]
2000c108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2000c10a:	2300      	movs	r3, #0
2000c10c:	75fb      	strb	r3, [r7, #23]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
2000c10e:	687b      	ldr	r3, [r7, #4]
2000c110:	681b      	ldr	r3, [r3, #0]
2000c112:	699b      	ldr	r3, [r3, #24]
2000c114:	613b      	str	r3, [r7, #16]
  uint32_t data_size = (READ_REG(hqspi->Instance->DLR) + 1U);
2000c116:	687b      	ldr	r3, [r7, #4]
2000c118:	681b      	ldr	r3, [r3, #0]
2000c11a:	691b      	ldr	r3, [r3, #16]
2000c11c:	3301      	adds	r3, #1
2000c11e:	60fb      	str	r3, [r7, #12]

  /* Process locked */
  __HAL_LOCK(hqspi);
2000c120:	687b      	ldr	r3, [r7, #4]
2000c122:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2000c126:	b2db      	uxtb	r3, r3
2000c128:	2b01      	cmp	r3, #1
2000c12a:	d101      	bne.n	2000c130 <HAL_QSPI_Receive_DMA+0x30>
2000c12c:	2302      	movs	r3, #2
2000c12e:	e0ea      	b.n	2000c306 <HAL_QSPI_Receive_DMA+0x206>
2000c130:	687b      	ldr	r3, [r7, #4]
2000c132:	2201      	movs	r2, #1
2000c134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
2000c138:	687b      	ldr	r3, [r7, #4]
2000c13a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000c13e:	b2db      	uxtb	r3, r3
2000c140:	2b01      	cmp	r3, #1
2000c142:	f040 80d9 	bne.w	2000c2f8 <HAL_QSPI_Receive_DMA+0x1f8>
  {
    /* Clear the error code */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
2000c146:	687b      	ldr	r3, [r7, #4]
2000c148:	2200      	movs	r2, #0
2000c14a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
2000c14c:	683b      	ldr	r3, [r7, #0]
2000c14e:	2b00      	cmp	r3, #0
2000c150:	f000 80c5 	beq.w	2000c2de <HAL_QSPI_Receive_DMA+0x1de>
    {
      /* Configure counters of the handle */
      if (hqspi->hdma->Init.PeriphDataAlignment == DMA_PDATAALIGN_BYTE)
2000c154:	687b      	ldr	r3, [r7, #4]
2000c156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000c158:	695b      	ldr	r3, [r3, #20]
2000c15a:	2b00      	cmp	r3, #0
2000c15c:	d103      	bne.n	2000c166 <HAL_QSPI_Receive_DMA+0x66>
      {
        hqspi->RxXferCount = data_size;
2000c15e:	687b      	ldr	r3, [r7, #4]
2000c160:	68fa      	ldr	r2, [r7, #12]
2000c162:	639a      	str	r2, [r3, #56]	; 0x38
2000c164:	e044      	b.n	2000c1f0 <HAL_QSPI_Receive_DMA+0xf0>
      }
      else if (hqspi->hdma->Init.PeriphDataAlignment == DMA_PDATAALIGN_HALFWORD)
2000c166:	687b      	ldr	r3, [r7, #4]
2000c168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000c16a:	695b      	ldr	r3, [r3, #20]
2000c16c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
2000c170:	d11c      	bne.n	2000c1ac <HAL_QSPI_Receive_DMA+0xac>
      {
        if (((data_size % 2U) != 0U) || ((hqspi->Init.FifoThreshold % 2U) != 0U))
2000c172:	68fb      	ldr	r3, [r7, #12]
2000c174:	f003 0301 	and.w	r3, r3, #1
2000c178:	2b00      	cmp	r3, #0
2000c17a:	d105      	bne.n	2000c188 <HAL_QSPI_Receive_DMA+0x88>
2000c17c:	687b      	ldr	r3, [r7, #4]
2000c17e:	689b      	ldr	r3, [r3, #8]
2000c180:	f003 0301 	and.w	r3, r3, #1
2000c184:	2b00      	cmp	r3, #0
2000c186:	d00c      	beq.n	2000c1a2 <HAL_QSPI_Receive_DMA+0xa2>
        {
          /* The number of data or the fifo threshold is not aligned on halfword
             => no transfer possible with DMA peripheral access configured as halfword */
          hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
2000c188:	687b      	ldr	r3, [r7, #4]
2000c18a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000c18c:	f043 0208 	orr.w	r2, r3, #8
2000c190:	687b      	ldr	r3, [r7, #4]
2000c192:	645a      	str	r2, [r3, #68]	; 0x44
          status = HAL_ERROR;
2000c194:	2301      	movs	r3, #1
2000c196:	75fb      	strb	r3, [r7, #23]

          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
2000c198:	687b      	ldr	r3, [r7, #4]
2000c19a:	2200      	movs	r2, #0
2000c19c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
2000c1a0:	e026      	b.n	2000c1f0 <HAL_QSPI_Receive_DMA+0xf0>
        }
        else
        {
          hqspi->RxXferCount = (data_size >> 1U);
2000c1a2:	68fb      	ldr	r3, [r7, #12]
2000c1a4:	085a      	lsrs	r2, r3, #1
2000c1a6:	687b      	ldr	r3, [r7, #4]
2000c1a8:	639a      	str	r2, [r3, #56]	; 0x38
2000c1aa:	e021      	b.n	2000c1f0 <HAL_QSPI_Receive_DMA+0xf0>
        }
      }
      else if (hqspi->hdma->Init.PeriphDataAlignment == DMA_PDATAALIGN_WORD)
2000c1ac:	687b      	ldr	r3, [r7, #4]
2000c1ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000c1b0:	695b      	ldr	r3, [r3, #20]
2000c1b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
2000c1b6:	d11b      	bne.n	2000c1f0 <HAL_QSPI_Receive_DMA+0xf0>
      {
        if (((data_size % 4U) != 0U) || ((hqspi->Init.FifoThreshold % 4U) != 0U))
2000c1b8:	68fb      	ldr	r3, [r7, #12]
2000c1ba:	f003 0303 	and.w	r3, r3, #3
2000c1be:	2b00      	cmp	r3, #0
2000c1c0:	d105      	bne.n	2000c1ce <HAL_QSPI_Receive_DMA+0xce>
2000c1c2:	687b      	ldr	r3, [r7, #4]
2000c1c4:	689b      	ldr	r3, [r3, #8]
2000c1c6:	f003 0303 	and.w	r3, r3, #3
2000c1ca:	2b00      	cmp	r3, #0
2000c1cc:	d00c      	beq.n	2000c1e8 <HAL_QSPI_Receive_DMA+0xe8>
        {
          /* The number of data or the fifo threshold is not aligned on word
             => no transfer possible with DMA peripheral access configured as word */
          hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
2000c1ce:	687b      	ldr	r3, [r7, #4]
2000c1d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000c1d2:	f043 0208 	orr.w	r2, r3, #8
2000c1d6:	687b      	ldr	r3, [r7, #4]
2000c1d8:	645a      	str	r2, [r3, #68]	; 0x44
          status = HAL_ERROR;
2000c1da:	2301      	movs	r3, #1
2000c1dc:	75fb      	strb	r3, [r7, #23]

          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
2000c1de:	687b      	ldr	r3, [r7, #4]
2000c1e0:	2200      	movs	r2, #0
2000c1e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
2000c1e6:	e003      	b.n	2000c1f0 <HAL_QSPI_Receive_DMA+0xf0>
        }
        else
        {
          hqspi->RxXferCount = (data_size >> 2U);
2000c1e8:	68fb      	ldr	r3, [r7, #12]
2000c1ea:	089a      	lsrs	r2, r3, #2
2000c1ec:	687b      	ldr	r3, [r7, #4]
2000c1ee:	639a      	str	r2, [r3, #56]	; 0x38
      else
      {
        /* Nothing to do */
      }

      if (status == HAL_OK)
2000c1f0:	7dfb      	ldrb	r3, [r7, #23]
2000c1f2:	2b00      	cmp	r3, #0
2000c1f4:	f040 8086 	bne.w	2000c304 <HAL_QSPI_Receive_DMA+0x204>
      {
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
2000c1f8:	687b      	ldr	r3, [r7, #4]
2000c1fa:	2222      	movs	r2, #34	; 0x22
2000c1fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, (QSPI_FLAG_TE | QSPI_FLAG_TC));
2000c200:	687b      	ldr	r3, [r7, #4]
2000c202:	681b      	ldr	r3, [r3, #0]
2000c204:	2203      	movs	r2, #3
2000c206:	60da      	str	r2, [r3, #12]

        /* Configure size and pointer of the handle */
        hqspi->RxXferSize = hqspi->RxXferCount;
2000c208:	687b      	ldr	r3, [r7, #4]
2000c20a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
2000c20c:	687b      	ldr	r3, [r7, #4]
2000c20e:	635a      	str	r2, [r3, #52]	; 0x34
        hqspi->pRxBuffPtr = pData;
2000c210:	687b      	ldr	r3, [r7, #4]
2000c212:	683a      	ldr	r2, [r7, #0]
2000c214:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the QSPI DMA transfer complete callback */
        hqspi->hdma->XferCpltCallback = QSPI_DMARxCplt;
2000c216:	687b      	ldr	r3, [r7, #4]
2000c218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000c21a:	4a3d      	ldr	r2, [pc, #244]	; (2000c310 <HAL_QSPI_Receive_DMA+0x210>)
2000c21c:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the QSPI DMA Half transfer complete callback */
        hqspi->hdma->XferHalfCpltCallback = QSPI_DMARxHalfCplt;
2000c21e:	687b      	ldr	r3, [r7, #4]
2000c220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000c222:	4a3c      	ldr	r2, [pc, #240]	; (2000c314 <HAL_QSPI_Receive_DMA+0x214>)
2000c224:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hqspi->hdma->XferErrorCallback = QSPI_DMAError;
2000c226:	687b      	ldr	r3, [r7, #4]
2000c228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000c22a:	4a3b      	ldr	r2, [pc, #236]	; (2000c318 <HAL_QSPI_Receive_DMA+0x218>)
2000c22c:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Clear the DMA abort callback */
        hqspi->hdma->XferAbortCallback = NULL;
2000c22e:	687b      	ldr	r3, [r7, #4]
2000c230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000c232:	2200      	movs	r2, #0
2000c234:	651a      	str	r2, [r3, #80]	; 0x50

        /* Configure the direction of the DMA */
        hqspi->hdma->Init.Direction = DMA_PERIPH_TO_MEMORY;
2000c236:	687b      	ldr	r3, [r7, #4]
2000c238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000c23a:	2200      	movs	r2, #0
2000c23c:	609a      	str	r2, [r3, #8]
        MODIFY_REG(hqspi->hdma->Instance->CR, DMA_SxCR_DIR, hqspi->hdma->Init.Direction);
2000c23e:	687b      	ldr	r3, [r7, #4]
2000c240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000c242:	681b      	ldr	r3, [r3, #0]
2000c244:	681b      	ldr	r3, [r3, #0]
2000c246:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
2000c24a:	687b      	ldr	r3, [r7, #4]
2000c24c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000c24e:	689a      	ldr	r2, [r3, #8]
2000c250:	687b      	ldr	r3, [r7, #4]
2000c252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000c254:	681b      	ldr	r3, [r3, #0]
2000c256:	430a      	orrs	r2, r1
2000c258:	601a      	str	r2, [r3, #0]

        /* Enable the DMA Channel */
        if (HAL_DMA_Start_IT(hqspi->hdma, (uint32_t)&hqspi->Instance->DR, (uint32_t)pData, hqspi->RxXferSize) == HAL_OK)
2000c25a:	687b      	ldr	r3, [r7, #4]
2000c25c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
2000c25e:	687b      	ldr	r3, [r7, #4]
2000c260:	681b      	ldr	r3, [r3, #0]
2000c262:	3320      	adds	r3, #32
2000c264:	4619      	mov	r1, r3
2000c266:	683a      	ldr	r2, [r7, #0]
2000c268:	687b      	ldr	r3, [r7, #4]
2000c26a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000c26c:	f7f6 fb8d 	bl	2000298a <HAL_DMA_Start_IT>
2000c270:	4603      	mov	r3, r0
2000c272:	2b00      	cmp	r3, #0
2000c274:	d122      	bne.n	2000c2bc <HAL_QSPI_Receive_DMA+0x1bc>
        {
          /* Configure QSPI: CCR register with functional as indirect read */
          MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
2000c276:	687b      	ldr	r3, [r7, #4]
2000c278:	681b      	ldr	r3, [r3, #0]
2000c27a:	695b      	ldr	r3, [r3, #20]
2000c27c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
2000c280:	687b      	ldr	r3, [r7, #4]
2000c282:	681b      	ldr	r3, [r3, #0]
2000c284:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
2000c288:	615a      	str	r2, [r3, #20]

          /* Start the transfer by re-writing the address in AR register */
          WRITE_REG(hqspi->Instance->AR, addr_reg);
2000c28a:	687b      	ldr	r3, [r7, #4]
2000c28c:	681b      	ldr	r3, [r3, #0]
2000c28e:	693a      	ldr	r2, [r7, #16]
2000c290:	619a      	str	r2, [r3, #24]

          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
2000c292:	687b      	ldr	r3, [r7, #4]
2000c294:	2200      	movs	r2, #0
2000c296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Enable the QSPI transfer error Interrupt */
          __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE);
2000c29a:	687b      	ldr	r3, [r7, #4]
2000c29c:	681b      	ldr	r3, [r3, #0]
2000c29e:	681a      	ldr	r2, [r3, #0]
2000c2a0:	687b      	ldr	r3, [r7, #4]
2000c2a2:	681b      	ldr	r3, [r3, #0]
2000c2a4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
2000c2a8:	601a      	str	r2, [r3, #0]

          /* Enable the DMA transfer by setting the DMAEN bit in the QSPI CR register */
          SET_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
2000c2aa:	687b      	ldr	r3, [r7, #4]
2000c2ac:	681b      	ldr	r3, [r3, #0]
2000c2ae:	681a      	ldr	r2, [r3, #0]
2000c2b0:	687b      	ldr	r3, [r7, #4]
2000c2b2:	681b      	ldr	r3, [r3, #0]
2000c2b4:	f042 0204 	orr.w	r2, r2, #4
2000c2b8:	601a      	str	r2, [r3, #0]
2000c2ba:	e023      	b.n	2000c304 <HAL_QSPI_Receive_DMA+0x204>
        }
        else
        {
          status = HAL_ERROR;
2000c2bc:	2301      	movs	r3, #1
2000c2be:	75fb      	strb	r3, [r7, #23]
          hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
2000c2c0:	687b      	ldr	r3, [r7, #4]
2000c2c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000c2c4:	f043 0204 	orr.w	r2, r3, #4
2000c2c8:	687b      	ldr	r3, [r7, #4]
2000c2ca:	645a      	str	r2, [r3, #68]	; 0x44
          hqspi->State = HAL_QSPI_STATE_READY;
2000c2cc:	687b      	ldr	r3, [r7, #4]
2000c2ce:	2201      	movs	r2, #1
2000c2d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
2000c2d4:	687b      	ldr	r3, [r7, #4]
2000c2d6:	2200      	movs	r2, #0
2000c2d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
2000c2dc:	e012      	b.n	2000c304 <HAL_QSPI_Receive_DMA+0x204>
        }
      }
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
2000c2de:	687b      	ldr	r3, [r7, #4]
2000c2e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000c2e2:	f043 0208 	orr.w	r2, r3, #8
2000c2e6:	687b      	ldr	r3, [r7, #4]
2000c2e8:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
2000c2ea:	2301      	movs	r3, #1
2000c2ec:	75fb      	strb	r3, [r7, #23]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
2000c2ee:	687b      	ldr	r3, [r7, #4]
2000c2f0:	2200      	movs	r2, #0
2000c2f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
2000c2f6:	e005      	b.n	2000c304 <HAL_QSPI_Receive_DMA+0x204>
    }
  }
  else
  {
    status = HAL_BUSY;
2000c2f8:	2302      	movs	r3, #2
2000c2fa:	75fb      	strb	r3, [r7, #23]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
2000c2fc:	687b      	ldr	r3, [r7, #4]
2000c2fe:	2200      	movs	r2, #0
2000c300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
2000c304:	7dfb      	ldrb	r3, [r7, #23]
}
2000c306:	4618      	mov	r0, r3
2000c308:	3718      	adds	r7, #24
2000c30a:	46bd      	mov	sp, r7
2000c30c:	bd80      	pop	{r7, pc}
2000c30e:	bf00      	nop
2000c310:	2000c959 	.word	0x2000c959
2000c314:	2000c9b9 	.word	0x2000c9b9
2000c318:	2000c9f1 	.word	0x2000c9f1

2000c31c <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
2000c31c:	b580      	push	{r7, lr}
2000c31e:	b088      	sub	sp, #32
2000c320:	af02      	add	r7, sp, #8
2000c322:	60f8      	str	r0, [r7, #12]
2000c324:	60b9      	str	r1, [r7, #8]
2000c326:	607a      	str	r2, [r7, #4]
2000c328:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
2000c32a:	f7f5 fd15 	bl	20001d58 <HAL_GetTick>
2000c32e:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
2000c330:	68fb      	ldr	r3, [r7, #12]
2000c332:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2000c336:	b2db      	uxtb	r3, r3
2000c338:	2b01      	cmp	r3, #1
2000c33a:	d101      	bne.n	2000c340 <HAL_QSPI_AutoPolling+0x24>
2000c33c:	2302      	movs	r3, #2
2000c33e:	e060      	b.n	2000c402 <HAL_QSPI_AutoPolling+0xe6>
2000c340:	68fb      	ldr	r3, [r7, #12]
2000c342:	2201      	movs	r2, #1
2000c344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
2000c348:	68fb      	ldr	r3, [r7, #12]
2000c34a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000c34e:	b2db      	uxtb	r3, r3
2000c350:	2b01      	cmp	r3, #1
2000c352:	d14f      	bne.n	2000c3f4 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
2000c354:	68fb      	ldr	r3, [r7, #12]
2000c356:	2200      	movs	r2, #0
2000c358:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
2000c35a:	68fb      	ldr	r3, [r7, #12]
2000c35c:	2242      	movs	r2, #66	; 0x42
2000c35e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
2000c362:	683b      	ldr	r3, [r7, #0]
2000c364:	9300      	str	r3, [sp, #0]
2000c366:	693b      	ldr	r3, [r7, #16]
2000c368:	2200      	movs	r2, #0
2000c36a:	2120      	movs	r1, #32
2000c36c:	68f8      	ldr	r0, [r7, #12]
2000c36e:	f000 fb9a 	bl	2000caa6 <QSPI_WaitFlagStateUntilTimeout>
2000c372:	4603      	mov	r3, r0
2000c374:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
2000c376:	7dfb      	ldrb	r3, [r7, #23]
2000c378:	2b00      	cmp	r3, #0
2000c37a:	d13d      	bne.n	2000c3f8 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
2000c37c:	68fb      	ldr	r3, [r7, #12]
2000c37e:	681b      	ldr	r3, [r3, #0]
2000c380:	687a      	ldr	r2, [r7, #4]
2000c382:	6812      	ldr	r2, [r2, #0]
2000c384:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
2000c386:	68fb      	ldr	r3, [r7, #12]
2000c388:	681b      	ldr	r3, [r3, #0]
2000c38a:	687a      	ldr	r2, [r7, #4]
2000c38c:	6852      	ldr	r2, [r2, #4]
2000c38e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
2000c390:	68fb      	ldr	r3, [r7, #12]
2000c392:	681b      	ldr	r3, [r3, #0]
2000c394:	687a      	ldr	r2, [r7, #4]
2000c396:	6892      	ldr	r2, [r2, #8]
2000c398:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
2000c39a:	68fb      	ldr	r3, [r7, #12]
2000c39c:	681b      	ldr	r3, [r3, #0]
2000c39e:	681b      	ldr	r3, [r3, #0]
2000c3a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
2000c3a4:	687b      	ldr	r3, [r7, #4]
2000c3a6:	691b      	ldr	r3, [r3, #16]
2000c3a8:	431a      	orrs	r2, r3
2000c3aa:	68fb      	ldr	r3, [r7, #12]
2000c3ac:	681b      	ldr	r3, [r3, #0]
2000c3ae:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
2000c3b2:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
2000c3b4:	687b      	ldr	r3, [r7, #4]
2000c3b6:	68da      	ldr	r2, [r3, #12]
2000c3b8:	68bb      	ldr	r3, [r7, #8]
2000c3ba:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
2000c3bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
2000c3c0:	68b9      	ldr	r1, [r7, #8]
2000c3c2:	68f8      	ldr	r0, [r7, #12]
2000c3c4:	f000 fbe2 	bl	2000cb8c <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
2000c3c8:	683b      	ldr	r3, [r7, #0]
2000c3ca:	9300      	str	r3, [sp, #0]
2000c3cc:	693b      	ldr	r3, [r7, #16]
2000c3ce:	2201      	movs	r2, #1
2000c3d0:	2108      	movs	r1, #8
2000c3d2:	68f8      	ldr	r0, [r7, #12]
2000c3d4:	f000 fb67 	bl	2000caa6 <QSPI_WaitFlagStateUntilTimeout>
2000c3d8:	4603      	mov	r3, r0
2000c3da:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
2000c3dc:	7dfb      	ldrb	r3, [r7, #23]
2000c3de:	2b00      	cmp	r3, #0
2000c3e0:	d10a      	bne.n	2000c3f8 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
2000c3e2:	68fb      	ldr	r3, [r7, #12]
2000c3e4:	681b      	ldr	r3, [r3, #0]
2000c3e6:	2208      	movs	r2, #8
2000c3e8:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
2000c3ea:	68fb      	ldr	r3, [r7, #12]
2000c3ec:	2201      	movs	r2, #1
2000c3ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
2000c3f2:	e001      	b.n	2000c3f8 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
2000c3f4:	2302      	movs	r3, #2
2000c3f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
2000c3f8:	68fb      	ldr	r3, [r7, #12]
2000c3fa:	2200      	movs	r2, #0
2000c3fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
2000c400:	7dfb      	ldrb	r3, [r7, #23]
}
2000c402:	4618      	mov	r0, r3
2000c404:	3718      	adds	r7, #24
2000c406:	46bd      	mov	sp, r7
2000c408:	bd80      	pop	{r7, pc}

2000c40a <HAL_QSPI_AutoPolling_IT>:
  * @param  cfg : structure that contains the polling configuration information.
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling_IT(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg)
{
2000c40a:	b580      	push	{r7, lr}
2000c40c:	b086      	sub	sp, #24
2000c40e:	af00      	add	r7, sp, #0
2000c410:	60f8      	str	r0, [r7, #12]
2000c412:	60b9      	str	r1, [r7, #8]
2000c414:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));
  assert_param(IS_QSPI_AUTOMATIC_STOP(cfg->AutomaticStop));

  /* Process locked */
  __HAL_LOCK(hqspi);
2000c416:	68fb      	ldr	r3, [r7, #12]
2000c418:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2000c41c:	b2db      	uxtb	r3, r3
2000c41e:	2b01      	cmp	r3, #1
2000c420:	d101      	bne.n	2000c426 <HAL_QSPI_AutoPolling_IT+0x1c>
2000c422:	2302      	movs	r3, #2
2000c424:	e060      	b.n	2000c4e8 <HAL_QSPI_AutoPolling_IT+0xde>
2000c426:	68fb      	ldr	r3, [r7, #12]
2000c428:	2201      	movs	r2, #1
2000c42a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
2000c42e:	68fb      	ldr	r3, [r7, #12]
2000c430:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000c434:	b2db      	uxtb	r3, r3
2000c436:	2b01      	cmp	r3, #1
2000c438:	d14f      	bne.n	2000c4da <HAL_QSPI_AutoPolling_IT+0xd0>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
2000c43a:	68fb      	ldr	r3, [r7, #12]
2000c43c:	2200      	movs	r2, #0
2000c43e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
2000c440:	68fb      	ldr	r3, [r7, #12]
2000c442:	2242      	movs	r2, #66	; 0x42
2000c444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout_CPUCycle(hqspi, QSPI_FLAG_BUSY, RESET, hqspi->Timeout);	
2000c448:	68fb      	ldr	r3, [r7, #12]
2000c44a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000c44c:	2200      	movs	r2, #0
2000c44e:	2120      	movs	r1, #32
2000c450:	68f8      	ldr	r0, [r7, #12]
2000c452:	f000 fb5f 	bl	2000cb14 <QSPI_WaitFlagStateUntilTimeout_CPUCycle>
2000c456:	4603      	mov	r3, r0
2000c458:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
2000c45a:	7dfb      	ldrb	r3, [r7, #23]
2000c45c:	2b00      	cmp	r3, #0
2000c45e:	d137      	bne.n	2000c4d0 <HAL_QSPI_AutoPolling_IT+0xc6>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
2000c460:	68fb      	ldr	r3, [r7, #12]
2000c462:	681b      	ldr	r3, [r3, #0]
2000c464:	687a      	ldr	r2, [r7, #4]
2000c466:	6812      	ldr	r2, [r2, #0]
2000c468:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
2000c46a:	68fb      	ldr	r3, [r7, #12]
2000c46c:	681b      	ldr	r3, [r3, #0]
2000c46e:	687a      	ldr	r2, [r7, #4]
2000c470:	6852      	ldr	r2, [r2, #4]
2000c472:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
2000c474:	68fb      	ldr	r3, [r7, #12]
2000c476:	681b      	ldr	r3, [r3, #0]
2000c478:	687a      	ldr	r2, [r7, #4]
2000c47a:	6892      	ldr	r2, [r2, #8]
2000c47c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop mode */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
2000c47e:	68fb      	ldr	r3, [r7, #12]
2000c480:	681b      	ldr	r3, [r3, #0]
2000c482:	681b      	ldr	r3, [r3, #0]
2000c484:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
2000c488:	687b      	ldr	r3, [r7, #4]
2000c48a:	691a      	ldr	r2, [r3, #16]
2000c48c:	687b      	ldr	r3, [r7, #4]
2000c48e:	695b      	ldr	r3, [r3, #20]
2000c490:	431a      	orrs	r2, r3
2000c492:	68fb      	ldr	r3, [r7, #12]
2000c494:	681b      	ldr	r3, [r3, #0]
2000c496:	430a      	orrs	r2, r1
2000c498:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | cfg->AutomaticStop));

      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_SM);
2000c49a:	68fb      	ldr	r3, [r7, #12]
2000c49c:	681b      	ldr	r3, [r3, #0]
2000c49e:	2209      	movs	r2, #9
2000c4a0:	60da      	str	r2, [r3, #12]

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
2000c4a2:	687b      	ldr	r3, [r7, #4]
2000c4a4:	68da      	ldr	r2, [r3, #12]
2000c4a6:	68bb      	ldr	r3, [r7, #8]
2000c4a8:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
2000c4aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
2000c4ae:	68b9      	ldr	r1, [r7, #8]
2000c4b0:	68f8      	ldr	r0, [r7, #12]
2000c4b2:	f000 fb6b 	bl	2000cb8c <QSPI_Config>

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
2000c4b6:	68fb      	ldr	r3, [r7, #12]
2000c4b8:	2200      	movs	r2, #0
2000c4ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Enable the QSPI Transfer Error and status match Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
2000c4be:	68fb      	ldr	r3, [r7, #12]
2000c4c0:	681b      	ldr	r3, [r3, #0]
2000c4c2:	681a      	ldr	r2, [r3, #0]
2000c4c4:	68fb      	ldr	r3, [r7, #12]
2000c4c6:	681b      	ldr	r3, [r3, #0]
2000c4c8:	f442 2210 	orr.w	r2, r2, #589824	; 0x90000
2000c4cc:	601a      	str	r2, [r3, #0]
2000c4ce:	e00a      	b.n	2000c4e6 <HAL_QSPI_AutoPolling_IT+0xdc>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
2000c4d0:	68fb      	ldr	r3, [r7, #12]
2000c4d2:	2200      	movs	r2, #0
2000c4d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
2000c4d8:	e005      	b.n	2000c4e6 <HAL_QSPI_AutoPolling_IT+0xdc>
    }
  }
  else
  {
    status = HAL_BUSY;
2000c4da:	2302      	movs	r3, #2
2000c4dc:	75fb      	strb	r3, [r7, #23]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
2000c4de:	68fb      	ldr	r3, [r7, #12]
2000c4e0:	2200      	movs	r2, #0
2000c4e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  /* Return function status */
  return status;
2000c4e6:	7dfb      	ldrb	r3, [r7, #23]
}
2000c4e8:	4618      	mov	r0, r3
2000c4ea:	3718      	adds	r7, #24
2000c4ec:	46bd      	mov	sp, r7
2000c4ee:	bd80      	pop	{r7, pc}

2000c4f0 <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
2000c4f0:	b580      	push	{r7, lr}
2000c4f2:	b088      	sub	sp, #32
2000c4f4:	af02      	add	r7, sp, #8
2000c4f6:	60f8      	str	r0, [r7, #12]
2000c4f8:	60b9      	str	r1, [r7, #8]
2000c4fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
2000c4fc:	f7f5 fc2c 	bl	20001d58 <HAL_GetTick>
2000c500:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
2000c502:	68fb      	ldr	r3, [r7, #12]
2000c504:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2000c508:	b2db      	uxtb	r3, r3
2000c50a:	2b01      	cmp	r3, #1
2000c50c:	d101      	bne.n	2000c512 <HAL_QSPI_MemoryMapped+0x22>
2000c50e:	2302      	movs	r3, #2
2000c510:	e04c      	b.n	2000c5ac <HAL_QSPI_MemoryMapped+0xbc>
2000c512:	68fb      	ldr	r3, [r7, #12]
2000c514:	2201      	movs	r2, #1
2000c516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
2000c51a:	68fb      	ldr	r3, [r7, #12]
2000c51c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000c520:	b2db      	uxtb	r3, r3
2000c522:	2b01      	cmp	r3, #1
2000c524:	d13b      	bne.n	2000c59e <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
2000c526:	68fb      	ldr	r3, [r7, #12]
2000c528:	2200      	movs	r2, #0
2000c52a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
2000c52c:	68fb      	ldr	r3, [r7, #12]
2000c52e:	2282      	movs	r2, #130	; 0x82
2000c530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
2000c534:	68fb      	ldr	r3, [r7, #12]
2000c536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000c538:	9300      	str	r3, [sp, #0]
2000c53a:	693b      	ldr	r3, [r7, #16]
2000c53c:	2200      	movs	r2, #0
2000c53e:	2120      	movs	r1, #32
2000c540:	68f8      	ldr	r0, [r7, #12]
2000c542:	f000 fab0 	bl	2000caa6 <QSPI_WaitFlagStateUntilTimeout>
2000c546:	4603      	mov	r3, r0
2000c548:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
2000c54a:	7dfb      	ldrb	r3, [r7, #23]
2000c54c:	2b00      	cmp	r3, #0
2000c54e:	d128      	bne.n	2000c5a2 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
2000c550:	68fb      	ldr	r3, [r7, #12]
2000c552:	681b      	ldr	r3, [r3, #0]
2000c554:	681b      	ldr	r3, [r3, #0]
2000c556:	f023 0108 	bic.w	r1, r3, #8
2000c55a:	687b      	ldr	r3, [r7, #4]
2000c55c:	685a      	ldr	r2, [r3, #4]
2000c55e:	68fb      	ldr	r3, [r7, #12]
2000c560:	681b      	ldr	r3, [r3, #0]
2000c562:	430a      	orrs	r2, r1
2000c564:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
2000c566:	687b      	ldr	r3, [r7, #4]
2000c568:	685b      	ldr	r3, [r3, #4]
2000c56a:	2b08      	cmp	r3, #8
2000c56c:	d110      	bne.n	2000c590 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
2000c56e:	68fb      	ldr	r3, [r7, #12]
2000c570:	681b      	ldr	r3, [r3, #0]
2000c572:	687a      	ldr	r2, [r7, #4]
2000c574:	6812      	ldr	r2, [r2, #0]
2000c576:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
2000c578:	68fb      	ldr	r3, [r7, #12]
2000c57a:	681b      	ldr	r3, [r3, #0]
2000c57c:	2210      	movs	r2, #16
2000c57e:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
2000c580:	68fb      	ldr	r3, [r7, #12]
2000c582:	681b      	ldr	r3, [r3, #0]
2000c584:	681a      	ldr	r2, [r3, #0]
2000c586:	68fb      	ldr	r3, [r7, #12]
2000c588:	681b      	ldr	r3, [r3, #0]
2000c58a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
2000c58e:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
2000c590:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
2000c594:	68b9      	ldr	r1, [r7, #8]
2000c596:	68f8      	ldr	r0, [r7, #12]
2000c598:	f000 faf8 	bl	2000cb8c <QSPI_Config>
2000c59c:	e001      	b.n	2000c5a2 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
2000c59e:	2302      	movs	r3, #2
2000c5a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
2000c5a2:	68fb      	ldr	r3, [r7, #12]
2000c5a4:	2200      	movs	r2, #0
2000c5a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
2000c5aa:	7dfb      	ldrb	r3, [r7, #23]
}
2000c5ac:	4618      	mov	r0, r3
2000c5ae:	3718      	adds	r7, #24
2000c5b0:	46bd      	mov	sp, r7
2000c5b2:	bd80      	pop	{r7, pc}

2000c5b4 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
2000c5b4:	b480      	push	{r7}
2000c5b6:	b083      	sub	sp, #12
2000c5b8:	af00      	add	r7, sp, #0
2000c5ba:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
2000c5bc:	bf00      	nop
2000c5be:	370c      	adds	r7, #12
2000c5c0:	46bd      	mov	sp, r7
2000c5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
2000c5c6:	4770      	bx	lr

2000c5c8 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
2000c5c8:	b480      	push	{r7}
2000c5ca:	b083      	sub	sp, #12
2000c5cc:	af00      	add	r7, sp, #0
2000c5ce:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
2000c5d0:	bf00      	nop
2000c5d2:	370c      	adds	r7, #12
2000c5d4:	46bd      	mov	sp, r7
2000c5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
2000c5da:	4770      	bx	lr

2000c5dc <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
2000c5dc:	b480      	push	{r7}
2000c5de:	b083      	sub	sp, #12
2000c5e0:	af00      	add	r7, sp, #0
2000c5e2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
2000c5e4:	bf00      	nop
2000c5e6:	370c      	adds	r7, #12
2000c5e8:	46bd      	mov	sp, r7
2000c5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
2000c5ee:	4770      	bx	lr

2000c5f0 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
2000c5f0:	b480      	push	{r7}
2000c5f2:	b083      	sub	sp, #12
2000c5f4:	af00      	add	r7, sp, #0
2000c5f6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
2000c5f8:	bf00      	nop
2000c5fa:	370c      	adds	r7, #12
2000c5fc:	46bd      	mov	sp, r7
2000c5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
2000c602:	4770      	bx	lr

2000c604 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
2000c604:	b480      	push	{r7}
2000c606:	b083      	sub	sp, #12
2000c608:	af00      	add	r7, sp, #0
2000c60a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
2000c60c:	bf00      	nop
2000c60e:	370c      	adds	r7, #12
2000c610:	46bd      	mov	sp, r7
2000c612:	f85d 7b04 	ldr.w	r7, [sp], #4
2000c616:	4770      	bx	lr

2000c618 <HAL_QSPI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxHalfCpltCallback(QSPI_HandleTypeDef *hqspi)
{
2000c618:	b480      	push	{r7}
2000c61a:	b083      	sub	sp, #12
2000c61c:	af00      	add	r7, sp, #0
2000c61e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxHalfCpltCallback could be implemented in the user file
   */
}
2000c620:	bf00      	nop
2000c622:	370c      	adds	r7, #12
2000c624:	46bd      	mov	sp, r7
2000c626:	f85d 7b04 	ldr.w	r7, [sp], #4
2000c62a:	4770      	bx	lr

2000c62c <HAL_QSPI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxHalfCpltCallback(QSPI_HandleTypeDef *hqspi)
{
2000c62c:	b480      	push	{r7}
2000c62e:	b083      	sub	sp, #12
2000c630:	af00      	add	r7, sp, #0
2000c632:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxHalfCpltCallback could be implemented in the user file
   */
}
2000c634:	bf00      	nop
2000c636:	370c      	adds	r7, #12
2000c638:	46bd      	mov	sp, r7
2000c63a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000c63e:	4770      	bx	lr

2000c640 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
2000c640:	b480      	push	{r7}
2000c642:	b083      	sub	sp, #12
2000c644:	af00      	add	r7, sp, #0
2000c646:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
2000c648:	bf00      	nop
2000c64a:	370c      	adds	r7, #12
2000c64c:	46bd      	mov	sp, r7
2000c64e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000c652:	4770      	bx	lr

2000c654 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
2000c654:	b480      	push	{r7}
2000c656:	b083      	sub	sp, #12
2000c658:	af00      	add	r7, sp, #0
2000c65a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
2000c65c:	bf00      	nop
2000c65e:	370c      	adds	r7, #12
2000c660:	46bd      	mov	sp, r7
2000c662:	f85d 7b04 	ldr.w	r7, [sp], #4
2000c666:	4770      	bx	lr

2000c668 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
2000c668:	b480      	push	{r7}
2000c66a:	b083      	sub	sp, #12
2000c66c:	af00      	add	r7, sp, #0
2000c66e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
2000c670:	bf00      	nop
2000c672:	370c      	adds	r7, #12
2000c674:	46bd      	mov	sp, r7
2000c676:	f85d 7b04 	ldr.w	r7, [sp], #4
2000c67a:	4770      	bx	lr

2000c67c <HAL_QSPI_GetState>:
  * @brief  Return the QSPI handle state.
  * @param  hqspi : QSPI handle
  * @retval HAL state
  */
HAL_QSPI_StateTypeDef HAL_QSPI_GetState(QSPI_HandleTypeDef *hqspi)
{
2000c67c:	b480      	push	{r7}
2000c67e:	b083      	sub	sp, #12
2000c680:	af00      	add	r7, sp, #0
2000c682:	6078      	str	r0, [r7, #4]
  /* Return QSPI handle state */
  return hqspi->State;
2000c684:	687b      	ldr	r3, [r7, #4]
2000c686:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000c68a:	b2db      	uxtb	r3, r3
}
2000c68c:	4618      	mov	r0, r3
2000c68e:	370c      	adds	r7, #12
2000c690:	46bd      	mov	sp, r7
2000c692:	f85d 7b04 	ldr.w	r7, [sp], #4
2000c696:	4770      	bx	lr

2000c698 <HAL_QSPI_GetError>:
* @brief  Return the QSPI error code.
* @param  hqspi : QSPI handle
* @retval QSPI Error Code
*/
uint32_t HAL_QSPI_GetError(QSPI_HandleTypeDef *hqspi)
{
2000c698:	b480      	push	{r7}
2000c69a:	b083      	sub	sp, #12
2000c69c:	af00      	add	r7, sp, #0
2000c69e:	6078      	str	r0, [r7, #4]
  return hqspi->ErrorCode;
2000c6a0:	687b      	ldr	r3, [r7, #4]
2000c6a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
2000c6a4:	4618      	mov	r0, r3
2000c6a6:	370c      	adds	r7, #12
2000c6a8:	46bd      	mov	sp, r7
2000c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
2000c6ae:	4770      	bx	lr

2000c6b0 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
2000c6b0:	b580      	push	{r7, lr}
2000c6b2:	b086      	sub	sp, #24
2000c6b4:	af02      	add	r7, sp, #8
2000c6b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
2000c6b8:	2300      	movs	r3, #0
2000c6ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
2000c6bc:	f7f5 fb4c 	bl	20001d58 <HAL_GetTick>
2000c6c0:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
2000c6c2:	687b      	ldr	r3, [r7, #4]
2000c6c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000c6c8:	b2db      	uxtb	r3, r3
2000c6ca:	f003 0302 	and.w	r3, r3, #2
2000c6ce:	2b00      	cmp	r3, #0
2000c6d0:	d056      	beq.n	2000c780 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
2000c6d2:	687b      	ldr	r3, [r7, #4]
2000c6d4:	2200      	movs	r2, #0
2000c6d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
2000c6da:	687b      	ldr	r3, [r7, #4]
2000c6dc:	681b      	ldr	r3, [r3, #0]
2000c6de:	681b      	ldr	r3, [r3, #0]
2000c6e0:	f003 0304 	and.w	r3, r3, #4
2000c6e4:	2b00      	cmp	r3, #0
2000c6e6:	d017      	beq.n	2000c718 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
2000c6e8:	687b      	ldr	r3, [r7, #4]
2000c6ea:	681b      	ldr	r3, [r3, #0]
2000c6ec:	681a      	ldr	r2, [r3, #0]
2000c6ee:	687b      	ldr	r3, [r7, #4]
2000c6f0:	681b      	ldr	r3, [r3, #0]
2000c6f2:	f022 0204 	bic.w	r2, r2, #4
2000c6f6:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
2000c6f8:	687b      	ldr	r3, [r7, #4]
2000c6fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000c6fc:	4618      	mov	r0, r3
2000c6fe:	f7f6 f9a4 	bl	20002a4a <HAL_DMA_Abort>
2000c702:	4603      	mov	r3, r0
2000c704:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
2000c706:	7bfb      	ldrb	r3, [r7, #15]
2000c708:	2b00      	cmp	r3, #0
2000c70a:	d005      	beq.n	2000c718 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
2000c70c:	687b      	ldr	r3, [r7, #4]
2000c70e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000c710:	f043 0204 	orr.w	r2, r3, #4
2000c714:	687b      	ldr	r3, [r7, #4]
2000c716:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
2000c718:	687b      	ldr	r3, [r7, #4]
2000c71a:	681b      	ldr	r3, [r3, #0]
2000c71c:	681a      	ldr	r2, [r3, #0]
2000c71e:	687b      	ldr	r3, [r7, #4]
2000c720:	681b      	ldr	r3, [r3, #0]
2000c722:	f042 0202 	orr.w	r2, r2, #2
2000c726:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
2000c728:	687b      	ldr	r3, [r7, #4]
2000c72a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000c72c:	9300      	str	r3, [sp, #0]
2000c72e:	68bb      	ldr	r3, [r7, #8]
2000c730:	2201      	movs	r2, #1
2000c732:	2102      	movs	r1, #2
2000c734:	6878      	ldr	r0, [r7, #4]
2000c736:	f000 f9b6 	bl	2000caa6 <QSPI_WaitFlagStateUntilTimeout>
2000c73a:	4603      	mov	r3, r0
2000c73c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
2000c73e:	7bfb      	ldrb	r3, [r7, #15]
2000c740:	2b00      	cmp	r3, #0
2000c742:	d10e      	bne.n	2000c762 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
2000c744:	687b      	ldr	r3, [r7, #4]
2000c746:	681b      	ldr	r3, [r3, #0]
2000c748:	2202      	movs	r2, #2
2000c74a:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
2000c74c:	687b      	ldr	r3, [r7, #4]
2000c74e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000c750:	9300      	str	r3, [sp, #0]
2000c752:	68bb      	ldr	r3, [r7, #8]
2000c754:	2200      	movs	r2, #0
2000c756:	2120      	movs	r1, #32
2000c758:	6878      	ldr	r0, [r7, #4]
2000c75a:	f000 f9a4 	bl	2000caa6 <QSPI_WaitFlagStateUntilTimeout>
2000c75e:	4603      	mov	r3, r0
2000c760:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
2000c762:	7bfb      	ldrb	r3, [r7, #15]
2000c764:	2b00      	cmp	r3, #0
2000c766:	d10b      	bne.n	2000c780 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
2000c768:	687b      	ldr	r3, [r7, #4]
2000c76a:	681b      	ldr	r3, [r3, #0]
2000c76c:	695a      	ldr	r2, [r3, #20]
2000c76e:	687b      	ldr	r3, [r7, #4]
2000c770:	681b      	ldr	r3, [r3, #0]
2000c772:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
2000c776:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
2000c778:	687b      	ldr	r3, [r7, #4]
2000c77a:	2201      	movs	r2, #1
2000c77c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
2000c780:	7bfb      	ldrb	r3, [r7, #15]
}
2000c782:	4618      	mov	r0, r3
2000c784:	3710      	adds	r7, #16
2000c786:	46bd      	mov	sp, r7
2000c788:	bd80      	pop	{r7, pc}
	...

2000c78c <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
2000c78c:	b580      	push	{r7, lr}
2000c78e:	b084      	sub	sp, #16
2000c790:	af00      	add	r7, sp, #0
2000c792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
2000c794:	2300      	movs	r3, #0
2000c796:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
2000c798:	687b      	ldr	r3, [r7, #4]
2000c79a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000c79e:	b2db      	uxtb	r3, r3
2000c7a0:	f003 0302 	and.w	r3, r3, #2
2000c7a4:	2b00      	cmp	r3, #0
2000c7a6:	d046      	beq.n	2000c836 <HAL_QSPI_Abort_IT+0xaa>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
2000c7a8:	687b      	ldr	r3, [r7, #4]
2000c7aa:	2200      	movs	r2, #0
2000c7ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
2000c7b0:	687b      	ldr	r3, [r7, #4]
2000c7b2:	2208      	movs	r2, #8
2000c7b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
2000c7b8:	687b      	ldr	r3, [r7, #4]
2000c7ba:	681b      	ldr	r3, [r3, #0]
2000c7bc:	681a      	ldr	r2, [r3, #0]
2000c7be:	687b      	ldr	r3, [r7, #4]
2000c7c0:	681b      	ldr	r3, [r3, #0]
2000c7c2:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
2000c7c6:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
2000c7c8:	687b      	ldr	r3, [r7, #4]
2000c7ca:	681b      	ldr	r3, [r3, #0]
2000c7cc:	681b      	ldr	r3, [r3, #0]
2000c7ce:	f003 0304 	and.w	r3, r3, #4
2000c7d2:	2b00      	cmp	r3, #0
2000c7d4:	d01b      	beq.n	2000c80e <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
2000c7d6:	687b      	ldr	r3, [r7, #4]
2000c7d8:	681b      	ldr	r3, [r3, #0]
2000c7da:	681a      	ldr	r2, [r3, #0]
2000c7dc:	687b      	ldr	r3, [r7, #4]
2000c7de:	681b      	ldr	r3, [r3, #0]
2000c7e0:	f022 0204 	bic.w	r2, r2, #4
2000c7e4:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
2000c7e6:	687b      	ldr	r3, [r7, #4]
2000c7e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000c7ea:	4a15      	ldr	r2, [pc, #84]	; (2000c840 <HAL_QSPI_Abort_IT+0xb4>)
2000c7ec:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
2000c7ee:	687b      	ldr	r3, [r7, #4]
2000c7f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000c7f2:	4618      	mov	r0, r3
2000c7f4:	f7f6 f999 	bl	20002b2a <HAL_DMA_Abort_IT>
2000c7f8:	4603      	mov	r3, r0
2000c7fa:	2b00      	cmp	r3, #0
2000c7fc:	d01b      	beq.n	2000c836 <HAL_QSPI_Abort_IT+0xaa>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
2000c7fe:	687b      	ldr	r3, [r7, #4]
2000c800:	2201      	movs	r2, #1
2000c802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
2000c806:	6878      	ldr	r0, [r7, #4]
2000c808:	f7ff fede 	bl	2000c5c8 <HAL_QSPI_AbortCpltCallback>
2000c80c:	e013      	b.n	2000c836 <HAL_QSPI_Abort_IT+0xaa>
      }
    }
    else
    {
      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
2000c80e:	687b      	ldr	r3, [r7, #4]
2000c810:	681b      	ldr	r3, [r3, #0]
2000c812:	2202      	movs	r2, #2
2000c814:	60da      	str	r2, [r3, #12]

      /* Enable the QSPI Transfer Complete Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
2000c816:	687b      	ldr	r3, [r7, #4]
2000c818:	681b      	ldr	r3, [r3, #0]
2000c81a:	681a      	ldr	r2, [r3, #0]
2000c81c:	687b      	ldr	r3, [r7, #4]
2000c81e:	681b      	ldr	r3, [r3, #0]
2000c820:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
2000c824:	601a      	str	r2, [r3, #0]

      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
2000c826:	687b      	ldr	r3, [r7, #4]
2000c828:	681b      	ldr	r3, [r3, #0]
2000c82a:	681a      	ldr	r2, [r3, #0]
2000c82c:	687b      	ldr	r3, [r7, #4]
2000c82e:	681b      	ldr	r3, [r3, #0]
2000c830:	f042 0202 	orr.w	r2, r2, #2
2000c834:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
2000c836:	7bfb      	ldrb	r3, [r7, #15]
}
2000c838:	4618      	mov	r0, r3
2000c83a:	3710      	adds	r7, #16
2000c83c:	46bd      	mov	sp, r7
2000c83e:	bd80      	pop	{r7, pc}
2000c840:	2000ca41 	.word	0x2000ca41

2000c844 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
2000c844:	b480      	push	{r7}
2000c846:	b083      	sub	sp, #12
2000c848:	af00      	add	r7, sp, #0
2000c84a:	6078      	str	r0, [r7, #4]
2000c84c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
2000c84e:	687b      	ldr	r3, [r7, #4]
2000c850:	683a      	ldr	r2, [r7, #0]
2000c852:	649a      	str	r2, [r3, #72]	; 0x48
}
2000c854:	bf00      	nop
2000c856:	370c      	adds	r7, #12
2000c858:	46bd      	mov	sp, r7
2000c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000c85e:	4770      	bx	lr

2000c860 <HAL_QSPI_SetFifoThreshold>:
  * @param  hqspi : QSPI handle.
  * @param  Threshold : Threshold of the Fifo (value between 1 and 16).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_SetFifoThreshold(QSPI_HandleTypeDef *hqspi, uint32_t Threshold)
{
2000c860:	b480      	push	{r7}
2000c862:	b085      	sub	sp, #20
2000c864:	af00      	add	r7, sp, #0
2000c866:	6078      	str	r0, [r7, #4]
2000c868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2000c86a:	2300      	movs	r3, #0
2000c86c:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hqspi);
2000c86e:	687b      	ldr	r3, [r7, #4]
2000c870:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2000c874:	b2db      	uxtb	r3, r3
2000c876:	2b01      	cmp	r3, #1
2000c878:	d101      	bne.n	2000c87e <HAL_QSPI_SetFifoThreshold+0x1e>
2000c87a:	2302      	movs	r3, #2
2000c87c:	e021      	b.n	2000c8c2 <HAL_QSPI_SetFifoThreshold+0x62>
2000c87e:	687b      	ldr	r3, [r7, #4]
2000c880:	2201      	movs	r2, #1
2000c882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
2000c886:	687b      	ldr	r3, [r7, #4]
2000c888:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000c88c:	b2db      	uxtb	r3, r3
2000c88e:	2b01      	cmp	r3, #1
2000c890:	d110      	bne.n	2000c8b4 <HAL_QSPI_SetFifoThreshold+0x54>
  {
    /* Synchronize init structure with new FIFO threshold value */
    hqspi->Init.FifoThreshold = Threshold;
2000c892:	687b      	ldr	r3, [r7, #4]
2000c894:	683a      	ldr	r2, [r7, #0]
2000c896:	609a      	str	r2, [r3, #8]

    /* Configure QSPI FIFO Threshold */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
2000c898:	687b      	ldr	r3, [r7, #4]
2000c89a:	681b      	ldr	r3, [r3, #0]
2000c89c:	681b      	ldr	r3, [r3, #0]
2000c89e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
2000c8a2:	687b      	ldr	r3, [r7, #4]
2000c8a4:	689b      	ldr	r3, [r3, #8]
2000c8a6:	3b01      	subs	r3, #1
2000c8a8:	021a      	lsls	r2, r3, #8
2000c8aa:	687b      	ldr	r3, [r7, #4]
2000c8ac:	681b      	ldr	r3, [r3, #0]
2000c8ae:	430a      	orrs	r2, r1
2000c8b0:	601a      	str	r2, [r3, #0]
2000c8b2:	e001      	b.n	2000c8b8 <HAL_QSPI_SetFifoThreshold+0x58>
               ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));
  }
  else
  {
    status = HAL_BUSY;
2000c8b4:	2302      	movs	r3, #2
2000c8b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
2000c8b8:	687b      	ldr	r3, [r7, #4]
2000c8ba:	2200      	movs	r2, #0
2000c8bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
2000c8c0:	7bfb      	ldrb	r3, [r7, #15]
}
2000c8c2:	4618      	mov	r0, r3
2000c8c4:	3714      	adds	r7, #20
2000c8c6:	46bd      	mov	sp, r7
2000c8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
2000c8cc:	4770      	bx	lr

2000c8ce <HAL_QSPI_GetFifoThreshold>:
/** @brief Get QSPI Fifo threshold.
  * @param  hqspi : QSPI handle.
  * @retval Fifo threshold (value between 1 and 16)
  */
uint32_t HAL_QSPI_GetFifoThreshold(QSPI_HandleTypeDef *hqspi)
{
2000c8ce:	b480      	push	{r7}
2000c8d0:	b083      	sub	sp, #12
2000c8d2:	af00      	add	r7, sp, #0
2000c8d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(hqspi->Instance->CR, QUADSPI_CR_FTHRES) >> QUADSPI_CR_FTHRES_Pos) + 1U);
2000c8d6:	687b      	ldr	r3, [r7, #4]
2000c8d8:	681b      	ldr	r3, [r3, #0]
2000c8da:	681b      	ldr	r3, [r3, #0]
2000c8dc:	0a1b      	lsrs	r3, r3, #8
2000c8de:	f003 031f 	and.w	r3, r3, #31
2000c8e2:	3301      	adds	r3, #1
}
2000c8e4:	4618      	mov	r0, r3
2000c8e6:	370c      	adds	r7, #12
2000c8e8:	46bd      	mov	sp, r7
2000c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
2000c8ee:	4770      	bx	lr

2000c8f0 <HAL_QSPI_SetFlashID>:
  *                   This parameter can be a value of @ref QSPI_Flash_Select.
  * @note   The FlashID is ignored when dual flash mode is enabled.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_SetFlashID(QSPI_HandleTypeDef *hqspi, uint32_t FlashID)
{
2000c8f0:	b480      	push	{r7}
2000c8f2:	b085      	sub	sp, #20
2000c8f4:	af00      	add	r7, sp, #0
2000c8f6:	6078      	str	r0, [r7, #4]
2000c8f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2000c8fa:	2300      	movs	r3, #0
2000c8fc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameter */
  assert_param(IS_QSPI_FLASH_ID(FlashID));

  /* Process locked */
  __HAL_LOCK(hqspi);
2000c8fe:	687b      	ldr	r3, [r7, #4]
2000c900:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2000c904:	b2db      	uxtb	r3, r3
2000c906:	2b01      	cmp	r3, #1
2000c908:	d101      	bne.n	2000c90e <HAL_QSPI_SetFlashID+0x1e>
2000c90a:	2302      	movs	r3, #2
2000c90c:	e01e      	b.n	2000c94c <HAL_QSPI_SetFlashID+0x5c>
2000c90e:	687b      	ldr	r3, [r7, #4]
2000c910:	2201      	movs	r2, #1
2000c912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
2000c916:	687b      	ldr	r3, [r7, #4]
2000c918:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000c91c:	b2db      	uxtb	r3, r3
2000c91e:	2b01      	cmp	r3, #1
2000c920:	d10d      	bne.n	2000c93e <HAL_QSPI_SetFlashID+0x4e>
  {
    /* Synchronize init structure with new FlashID value */
    hqspi->Init.FlashID = FlashID;
2000c922:	687b      	ldr	r3, [r7, #4]
2000c924:	683a      	ldr	r2, [r7, #0]
2000c926:	61da      	str	r2, [r3, #28]

    /* Configure QSPI FlashID */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FSEL, FlashID);
2000c928:	687b      	ldr	r3, [r7, #4]
2000c92a:	681b      	ldr	r3, [r3, #0]
2000c92c:	681b      	ldr	r3, [r3, #0]
2000c92e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
2000c932:	687b      	ldr	r3, [r7, #4]
2000c934:	681b      	ldr	r3, [r3, #0]
2000c936:	683a      	ldr	r2, [r7, #0]
2000c938:	430a      	orrs	r2, r1
2000c93a:	601a      	str	r2, [r3, #0]
2000c93c:	e001      	b.n	2000c942 <HAL_QSPI_SetFlashID+0x52>
  }
  else
  {
    status = HAL_BUSY;
2000c93e:	2302      	movs	r3, #2
2000c940:	73fb      	strb	r3, [r7, #15]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
2000c942:	687b      	ldr	r3, [r7, #4]
2000c944:	2200      	movs	r2, #0
2000c946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
2000c94a:	7bfb      	ldrb	r3, [r7, #15]
}
2000c94c:	4618      	mov	r0, r3
2000c94e:	3714      	adds	r7, #20
2000c950:	46bd      	mov	sp, r7
2000c952:	f85d 7b04 	ldr.w	r7, [sp], #4
2000c956:	4770      	bx	lr

2000c958 <QSPI_DMARxCplt>:
  * @brief  DMA QSPI receive process complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
2000c958:	b480      	push	{r7}
2000c95a:	b085      	sub	sp, #20
2000c95c:	af00      	add	r7, sp, #0
2000c95e:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = (QSPI_HandleTypeDef*)(hdma->Parent);
2000c960:	687b      	ldr	r3, [r7, #4]
2000c962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000c964:	60fb      	str	r3, [r7, #12]
  hqspi->RxXferCount = 0U;
2000c966:	68fb      	ldr	r3, [r7, #12]
2000c968:	2200      	movs	r2, #0
2000c96a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the QSPI transfer complete Interrupt */
  __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
2000c96c:	68fb      	ldr	r3, [r7, #12]
2000c96e:	681b      	ldr	r3, [r3, #0]
2000c970:	681a      	ldr	r2, [r3, #0]
2000c972:	68fb      	ldr	r3, [r7, #12]
2000c974:	681b      	ldr	r3, [r3, #0]
2000c976:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
2000c97a:	601a      	str	r2, [r3, #0]
}
2000c97c:	bf00      	nop
2000c97e:	3714      	adds	r7, #20
2000c980:	46bd      	mov	sp, r7
2000c982:	f85d 7b04 	ldr.w	r7, [sp], #4
2000c986:	4770      	bx	lr

2000c988 <QSPI_DMATxCplt>:
  * @brief  DMA QSPI transmit process complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
2000c988:	b480      	push	{r7}
2000c98a:	b085      	sub	sp, #20
2000c98c:	af00      	add	r7, sp, #0
2000c98e:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = (QSPI_HandleTypeDef*)(hdma->Parent);
2000c990:	687b      	ldr	r3, [r7, #4]
2000c992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000c994:	60fb      	str	r3, [r7, #12]
  hqspi->TxXferCount = 0U;
2000c996:	68fb      	ldr	r3, [r7, #12]
2000c998:	2200      	movs	r2, #0
2000c99a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the QSPI transfer complete Interrupt */
  __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
2000c99c:	68fb      	ldr	r3, [r7, #12]
2000c99e:	681b      	ldr	r3, [r3, #0]
2000c9a0:	681a      	ldr	r2, [r3, #0]
2000c9a2:	68fb      	ldr	r3, [r7, #12]
2000c9a4:	681b      	ldr	r3, [r3, #0]
2000c9a6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
2000c9aa:	601a      	str	r2, [r3, #0]
}
2000c9ac:	bf00      	nop
2000c9ae:	3714      	adds	r7, #20
2000c9b0:	46bd      	mov	sp, r7
2000c9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
2000c9b6:	4770      	bx	lr

2000c9b8 <QSPI_DMARxHalfCplt>:
  * @brief  DMA QSPI receive process half complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
2000c9b8:	b580      	push	{r7, lr}
2000c9ba:	b084      	sub	sp, #16
2000c9bc:	af00      	add	r7, sp, #0
2000c9be:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = (QSPI_HandleTypeDef*)(hdma->Parent);
2000c9c0:	687b      	ldr	r3, [r7, #4]
2000c9c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000c9c4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
  hqspi->RxHalfCpltCallback(hqspi);
#else
  HAL_QSPI_RxHalfCpltCallback(hqspi);
2000c9c6:	68f8      	ldr	r0, [r7, #12]
2000c9c8:	f7ff fe26 	bl	2000c618 <HAL_QSPI_RxHalfCpltCallback>
#endif
}
2000c9cc:	bf00      	nop
2000c9ce:	3710      	adds	r7, #16
2000c9d0:	46bd      	mov	sp, r7
2000c9d2:	bd80      	pop	{r7, pc}

2000c9d4 <QSPI_DMATxHalfCplt>:
  * @brief  DMA QSPI transmit process half complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
2000c9d4:	b580      	push	{r7, lr}
2000c9d6:	b084      	sub	sp, #16
2000c9d8:	af00      	add	r7, sp, #0
2000c9da:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = (QSPI_HandleTypeDef*)(hdma->Parent);
2000c9dc:	687b      	ldr	r3, [r7, #4]
2000c9de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000c9e0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
  hqspi->TxHalfCpltCallback(hqspi);
#else
  HAL_QSPI_TxHalfCpltCallback(hqspi);
2000c9e2:	68f8      	ldr	r0, [r7, #12]
2000c9e4:	f7ff fe22 	bl	2000c62c <HAL_QSPI_TxHalfCpltCallback>
#endif
}
2000c9e8:	bf00      	nop
2000c9ea:	3710      	adds	r7, #16
2000c9ec:	46bd      	mov	sp, r7
2000c9ee:	bd80      	pop	{r7, pc}

2000c9f0 <QSPI_DMAError>:
  * @brief  DMA QSPI communication error callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAError(DMA_HandleTypeDef *hdma)
{
2000c9f0:	b580      	push	{r7, lr}
2000c9f2:	b084      	sub	sp, #16
2000c9f4:	af00      	add	r7, sp, #0
2000c9f6:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
2000c9f8:	687b      	ldr	r3, [r7, #4]
2000c9fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000c9fc:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
2000c9fe:	6878      	ldr	r0, [r7, #4]
2000ca00:	f7f6 fbea 	bl	200031d8 <HAL_DMA_GetError>
2000ca04:	4603      	mov	r3, r0
2000ca06:	2b02      	cmp	r3, #2
2000ca08:	d016      	beq.n	2000ca38 <QSPI_DMAError+0x48>
  {
  hqspi->RxXferCount = 0U;
2000ca0a:	68fb      	ldr	r3, [r7, #12]
2000ca0c:	2200      	movs	r2, #0
2000ca0e:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
2000ca10:	68fb      	ldr	r3, [r7, #12]
2000ca12:	2200      	movs	r2, #0
2000ca14:	62da      	str	r2, [r3, #44]	; 0x2c
  hqspi->ErrorCode   |= HAL_QSPI_ERROR_DMA;
2000ca16:	68fb      	ldr	r3, [r7, #12]
2000ca18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000ca1a:	f043 0204 	orr.w	r2, r3, #4
2000ca1e:	68fb      	ldr	r3, [r7, #12]
2000ca20:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
  CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
2000ca22:	68fb      	ldr	r3, [r7, #12]
2000ca24:	681b      	ldr	r3, [r3, #0]
2000ca26:	681a      	ldr	r2, [r3, #0]
2000ca28:	68fb      	ldr	r3, [r7, #12]
2000ca2a:	681b      	ldr	r3, [r3, #0]
2000ca2c:	f022 0204 	bic.w	r2, r2, #4
2000ca30:	601a      	str	r2, [r3, #0]

  /* Abort the QSPI */
  (void)HAL_QSPI_Abort_IT(hqspi);
2000ca32:	68f8      	ldr	r0, [r7, #12]
2000ca34:	f7ff feaa 	bl	2000c78c <HAL_QSPI_Abort_IT>

  }
}
2000ca38:	bf00      	nop
2000ca3a:	3710      	adds	r7, #16
2000ca3c:	46bd      	mov	sp, r7
2000ca3e:	bd80      	pop	{r7, pc}

2000ca40 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
2000ca40:	b580      	push	{r7, lr}
2000ca42:	b084      	sub	sp, #16
2000ca44:	af00      	add	r7, sp, #0
2000ca46:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
2000ca48:	687b      	ldr	r3, [r7, #4]
2000ca4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000ca4c:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
2000ca4e:	68fb      	ldr	r3, [r7, #12]
2000ca50:	2200      	movs	r2, #0
2000ca52:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
2000ca54:	68fb      	ldr	r3, [r7, #12]
2000ca56:	2200      	movs	r2, #0
2000ca58:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
2000ca5a:	68fb      	ldr	r3, [r7, #12]
2000ca5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
2000ca60:	b2db      	uxtb	r3, r3
2000ca62:	2b08      	cmp	r3, #8
2000ca64:	d114      	bne.n	2000ca90 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
2000ca66:	68fb      	ldr	r3, [r7, #12]
2000ca68:	681b      	ldr	r3, [r3, #0]
2000ca6a:	2202      	movs	r2, #2
2000ca6c:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
2000ca6e:	68fb      	ldr	r3, [r7, #12]
2000ca70:	681b      	ldr	r3, [r3, #0]
2000ca72:	681a      	ldr	r2, [r3, #0]
2000ca74:	68fb      	ldr	r3, [r7, #12]
2000ca76:	681b      	ldr	r3, [r3, #0]
2000ca78:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
2000ca7c:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
2000ca7e:	68fb      	ldr	r3, [r7, #12]
2000ca80:	681b      	ldr	r3, [r3, #0]
2000ca82:	681a      	ldr	r2, [r3, #0]
2000ca84:	68fb      	ldr	r3, [r7, #12]
2000ca86:	681b      	ldr	r3, [r3, #0]
2000ca88:	f042 0202 	orr.w	r2, r2, #2
2000ca8c:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
2000ca8e:	e006      	b.n	2000ca9e <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
2000ca90:	68fb      	ldr	r3, [r7, #12]
2000ca92:	2201      	movs	r2, #1
2000ca94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
2000ca98:	68f8      	ldr	r0, [r7, #12]
2000ca9a:	f7ff fd8b 	bl	2000c5b4 <HAL_QSPI_ErrorCallback>
}
2000ca9e:	bf00      	nop
2000caa0:	3710      	adds	r7, #16
2000caa2:	46bd      	mov	sp, r7
2000caa4:	bd80      	pop	{r7, pc}

2000caa6 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
2000caa6:	b580      	push	{r7, lr}
2000caa8:	b084      	sub	sp, #16
2000caaa:	af00      	add	r7, sp, #0
2000caac:	60f8      	str	r0, [r7, #12]
2000caae:	60b9      	str	r1, [r7, #8]
2000cab0:	603b      	str	r3, [r7, #0]
2000cab2:	4613      	mov	r3, r2
2000cab4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
2000cab6:	e01a      	b.n	2000caee <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
2000cab8:	69bb      	ldr	r3, [r7, #24]
2000caba:	f1b3 3fff 	cmp.w	r3, #4294967295
2000cabe:	d016      	beq.n	2000caee <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2000cac0:	f7f5 f94a 	bl	20001d58 <HAL_GetTick>
2000cac4:	4602      	mov	r2, r0
2000cac6:	683b      	ldr	r3, [r7, #0]
2000cac8:	1ad3      	subs	r3, r2, r3
2000caca:	69ba      	ldr	r2, [r7, #24]
2000cacc:	429a      	cmp	r2, r3
2000cace:	d302      	bcc.n	2000cad6 <QSPI_WaitFlagStateUntilTimeout+0x30>
2000cad0:	69bb      	ldr	r3, [r7, #24]
2000cad2:	2b00      	cmp	r3, #0
2000cad4:	d10b      	bne.n	2000caee <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
2000cad6:	68fb      	ldr	r3, [r7, #12]
2000cad8:	2204      	movs	r2, #4
2000cada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
2000cade:	68fb      	ldr	r3, [r7, #12]
2000cae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000cae2:	f043 0201 	orr.w	r2, r3, #1
2000cae6:	68fb      	ldr	r3, [r7, #12]
2000cae8:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
2000caea:	2301      	movs	r3, #1
2000caec:	e00e      	b.n	2000cb0c <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
2000caee:	68fb      	ldr	r3, [r7, #12]
2000caf0:	681b      	ldr	r3, [r3, #0]
2000caf2:	689a      	ldr	r2, [r3, #8]
2000caf4:	68bb      	ldr	r3, [r7, #8]
2000caf6:	4013      	ands	r3, r2
2000caf8:	2b00      	cmp	r3, #0
2000cafa:	bf14      	ite	ne
2000cafc:	2301      	movne	r3, #1
2000cafe:	2300      	moveq	r3, #0
2000cb00:	b2db      	uxtb	r3, r3
2000cb02:	461a      	mov	r2, r3
2000cb04:	79fb      	ldrb	r3, [r7, #7]
2000cb06:	429a      	cmp	r2, r3
2000cb08:	d1d6      	bne.n	2000cab8 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
2000cb0a:	2300      	movs	r3, #0
}
2000cb0c:	4618      	mov	r0, r3
2000cb0e:	3710      	adds	r7, #16
2000cb10:	46bd      	mov	sp, r7
2000cb12:	bd80      	pop	{r7, pc}

2000cb14 <QSPI_WaitFlagStateUntilTimeout_CPUCycle>:
  * @param  State : Value of the flag expected
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout_CPUCycle(QSPI_HandleTypeDef *hqspi, uint32_t Flag, FlagStatus State, uint32_t Timeout)
{ 
2000cb14:	b480      	push	{r7}
2000cb16:	b087      	sub	sp, #28
2000cb18:	af00      	add	r7, sp, #0
2000cb1a:	60f8      	str	r0, [r7, #12]
2000cb1c:	60b9      	str	r1, [r7, #8]
2000cb1e:	603b      	str	r3, [r7, #0]
2000cb20:	4613      	mov	r3, r2
2000cb22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count = Timeout * (SystemCoreClock / 16U / 1000U);
2000cb24:	4b17      	ldr	r3, [pc, #92]	; (2000cb84 <QSPI_WaitFlagStateUntilTimeout_CPUCycle+0x70>)
2000cb26:	681b      	ldr	r3, [r3, #0]
2000cb28:	4a17      	ldr	r2, [pc, #92]	; (2000cb88 <QSPI_WaitFlagStateUntilTimeout_CPUCycle+0x74>)
2000cb2a:	fba2 2303 	umull	r2, r3, r2, r3
2000cb2e:	0a9b      	lsrs	r3, r3, #10
2000cb30:	683a      	ldr	r2, [r7, #0]
2000cb32:	fb02 f303 	mul.w	r3, r2, r3
2000cb36:	617b      	str	r3, [r7, #20]
   do
   {
     if (count-- == 0U)
2000cb38:	697b      	ldr	r3, [r7, #20]
2000cb3a:	1e5a      	subs	r2, r3, #1
2000cb3c:	617a      	str	r2, [r7, #20]
2000cb3e:	2b00      	cmp	r3, #0
2000cb40:	d10b      	bne.n	2000cb5a <QSPI_WaitFlagStateUntilTimeout_CPUCycle+0x46>
     {
       hqspi->State     = HAL_QSPI_STATE_ERROR;
2000cb42:	68fb      	ldr	r3, [r7, #12]
2000cb44:	2204      	movs	r2, #4
2000cb46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
       hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
2000cb4a:	68fb      	ldr	r3, [r7, #12]
2000cb4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000cb4e:	f043 0201 	orr.w	r2, r3, #1
2000cb52:	68fb      	ldr	r3, [r7, #12]
2000cb54:	645a      	str	r2, [r3, #68]	; 0x44
       return HAL_TIMEOUT;
2000cb56:	2303      	movs	r3, #3
2000cb58:	e00e      	b.n	2000cb78 <QSPI_WaitFlagStateUntilTimeout_CPUCycle+0x64>
     }
   }
   while ((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State);
2000cb5a:	68fb      	ldr	r3, [r7, #12]
2000cb5c:	681b      	ldr	r3, [r3, #0]
2000cb5e:	689a      	ldr	r2, [r3, #8]
2000cb60:	68bb      	ldr	r3, [r7, #8]
2000cb62:	4013      	ands	r3, r2
2000cb64:	2b00      	cmp	r3, #0
2000cb66:	bf14      	ite	ne
2000cb68:	2301      	movne	r3, #1
2000cb6a:	2300      	moveq	r3, #0
2000cb6c:	b2db      	uxtb	r3, r3
2000cb6e:	461a      	mov	r2, r3
2000cb70:	79fb      	ldrb	r3, [r7, #7]
2000cb72:	429a      	cmp	r2, r3
2000cb74:	d1e0      	bne.n	2000cb38 <QSPI_WaitFlagStateUntilTimeout_CPUCycle+0x24>
   
   return HAL_OK;   
2000cb76:	2300      	movs	r3, #0
}
2000cb78:	4618      	mov	r0, r3
2000cb7a:	371c      	adds	r7, #28
2000cb7c:	46bd      	mov	sp, r7
2000cb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000cb82:	4770      	bx	lr
2000cb84:	20000410 	.word	0x20000410
2000cb88:	10624dd3 	.word	0x10624dd3

2000cb8c <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
2000cb8c:	b480      	push	{r7}
2000cb8e:	b085      	sub	sp, #20
2000cb90:	af00      	add	r7, sp, #0
2000cb92:	60f8      	str	r0, [r7, #12]
2000cb94:	60b9      	str	r1, [r7, #8]
2000cb96:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
2000cb98:	68bb      	ldr	r3, [r7, #8]
2000cb9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000cb9c:	2b00      	cmp	r3, #0
2000cb9e:	d009      	beq.n	2000cbb4 <QSPI_Config+0x28>
2000cba0:	687b      	ldr	r3, [r7, #4]
2000cba2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
2000cba6:	d005      	beq.n	2000cbb4 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
2000cba8:	68bb      	ldr	r3, [r7, #8]
2000cbaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
2000cbac:	68fb      	ldr	r3, [r7, #12]
2000cbae:	681b      	ldr	r3, [r3, #0]
2000cbb0:	3a01      	subs	r2, #1
2000cbb2:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
2000cbb4:	68bb      	ldr	r3, [r7, #8]
2000cbb6:	699b      	ldr	r3, [r3, #24]
2000cbb8:	2b00      	cmp	r3, #0
2000cbba:	f000 80b9 	beq.w	2000cd30 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
2000cbbe:	68bb      	ldr	r3, [r7, #8]
2000cbc0:	6a1b      	ldr	r3, [r3, #32]
2000cbc2:	2b00      	cmp	r3, #0
2000cbc4:	d05f      	beq.n	2000cc86 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
2000cbc6:	68fb      	ldr	r3, [r7, #12]
2000cbc8:	681b      	ldr	r3, [r3, #0]
2000cbca:	68ba      	ldr	r2, [r7, #8]
2000cbcc:	6892      	ldr	r2, [r2, #8]
2000cbce:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
2000cbd0:	68bb      	ldr	r3, [r7, #8]
2000cbd2:	69db      	ldr	r3, [r3, #28]
2000cbd4:	2b00      	cmp	r3, #0
2000cbd6:	d031      	beq.n	2000cc3c <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
2000cbd8:	68bb      	ldr	r3, [r7, #8]
2000cbda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000cbdc:	68bb      	ldr	r3, [r7, #8]
2000cbde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000cbe0:	431a      	orrs	r2, r3
2000cbe2:	68bb      	ldr	r3, [r7, #8]
2000cbe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000cbe6:	431a      	orrs	r2, r3
2000cbe8:	68bb      	ldr	r3, [r7, #8]
2000cbea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000cbec:	431a      	orrs	r2, r3
2000cbee:	68bb      	ldr	r3, [r7, #8]
2000cbf0:	695b      	ldr	r3, [r3, #20]
2000cbf2:	049b      	lsls	r3, r3, #18
2000cbf4:	431a      	orrs	r2, r3
2000cbf6:	68bb      	ldr	r3, [r7, #8]
2000cbf8:	691b      	ldr	r3, [r3, #16]
2000cbfa:	431a      	orrs	r2, r3
2000cbfc:	68bb      	ldr	r3, [r7, #8]
2000cbfe:	6a1b      	ldr	r3, [r3, #32]
2000cc00:	431a      	orrs	r2, r3
2000cc02:	68bb      	ldr	r3, [r7, #8]
2000cc04:	68db      	ldr	r3, [r3, #12]
2000cc06:	431a      	orrs	r2, r3
2000cc08:	68bb      	ldr	r3, [r7, #8]
2000cc0a:	69db      	ldr	r3, [r3, #28]
2000cc0c:	431a      	orrs	r2, r3
2000cc0e:	68bb      	ldr	r3, [r7, #8]
2000cc10:	699b      	ldr	r3, [r3, #24]
2000cc12:	431a      	orrs	r2, r3
2000cc14:	68bb      	ldr	r3, [r7, #8]
2000cc16:	681b      	ldr	r3, [r3, #0]
2000cc18:	ea42 0103 	orr.w	r1, r2, r3
2000cc1c:	68fb      	ldr	r3, [r7, #12]
2000cc1e:	681b      	ldr	r3, [r3, #0]
2000cc20:	687a      	ldr	r2, [r7, #4]
2000cc22:	430a      	orrs	r2, r1
2000cc24:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
2000cc26:	687b      	ldr	r3, [r7, #4]
2000cc28:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
2000cc2c:	f000 812e 	beq.w	2000ce8c <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
2000cc30:	68fb      	ldr	r3, [r7, #12]
2000cc32:	681b      	ldr	r3, [r3, #0]
2000cc34:	68ba      	ldr	r2, [r7, #8]
2000cc36:	6852      	ldr	r2, [r2, #4]
2000cc38:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
2000cc3a:	e127      	b.n	2000ce8c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
2000cc3c:	68bb      	ldr	r3, [r7, #8]
2000cc3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000cc40:	68bb      	ldr	r3, [r7, #8]
2000cc42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000cc44:	431a      	orrs	r2, r3
2000cc46:	68bb      	ldr	r3, [r7, #8]
2000cc48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000cc4a:	431a      	orrs	r2, r3
2000cc4c:	68bb      	ldr	r3, [r7, #8]
2000cc4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000cc50:	431a      	orrs	r2, r3
2000cc52:	68bb      	ldr	r3, [r7, #8]
2000cc54:	695b      	ldr	r3, [r3, #20]
2000cc56:	049b      	lsls	r3, r3, #18
2000cc58:	431a      	orrs	r2, r3
2000cc5a:	68bb      	ldr	r3, [r7, #8]
2000cc5c:	691b      	ldr	r3, [r3, #16]
2000cc5e:	431a      	orrs	r2, r3
2000cc60:	68bb      	ldr	r3, [r7, #8]
2000cc62:	6a1b      	ldr	r3, [r3, #32]
2000cc64:	431a      	orrs	r2, r3
2000cc66:	68bb      	ldr	r3, [r7, #8]
2000cc68:	69db      	ldr	r3, [r3, #28]
2000cc6a:	431a      	orrs	r2, r3
2000cc6c:	68bb      	ldr	r3, [r7, #8]
2000cc6e:	699b      	ldr	r3, [r3, #24]
2000cc70:	431a      	orrs	r2, r3
2000cc72:	68bb      	ldr	r3, [r7, #8]
2000cc74:	681b      	ldr	r3, [r3, #0]
2000cc76:	ea42 0103 	orr.w	r1, r2, r3
2000cc7a:	68fb      	ldr	r3, [r7, #12]
2000cc7c:	681b      	ldr	r3, [r3, #0]
2000cc7e:	687a      	ldr	r2, [r7, #4]
2000cc80:	430a      	orrs	r2, r1
2000cc82:	615a      	str	r2, [r3, #20]
}
2000cc84:	e102      	b.n	2000ce8c <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
2000cc86:	68bb      	ldr	r3, [r7, #8]
2000cc88:	69db      	ldr	r3, [r3, #28]
2000cc8a:	2b00      	cmp	r3, #0
2000cc8c:	d02e      	beq.n	2000ccec <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
2000cc8e:	68bb      	ldr	r3, [r7, #8]
2000cc90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000cc92:	68bb      	ldr	r3, [r7, #8]
2000cc94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000cc96:	431a      	orrs	r2, r3
2000cc98:	68bb      	ldr	r3, [r7, #8]
2000cc9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000cc9c:	431a      	orrs	r2, r3
2000cc9e:	68bb      	ldr	r3, [r7, #8]
2000cca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000cca2:	431a      	orrs	r2, r3
2000cca4:	68bb      	ldr	r3, [r7, #8]
2000cca6:	695b      	ldr	r3, [r3, #20]
2000cca8:	049b      	lsls	r3, r3, #18
2000ccaa:	431a      	orrs	r2, r3
2000ccac:	68bb      	ldr	r3, [r7, #8]
2000ccae:	6a1b      	ldr	r3, [r3, #32]
2000ccb0:	431a      	orrs	r2, r3
2000ccb2:	68bb      	ldr	r3, [r7, #8]
2000ccb4:	68db      	ldr	r3, [r3, #12]
2000ccb6:	431a      	orrs	r2, r3
2000ccb8:	68bb      	ldr	r3, [r7, #8]
2000ccba:	69db      	ldr	r3, [r3, #28]
2000ccbc:	431a      	orrs	r2, r3
2000ccbe:	68bb      	ldr	r3, [r7, #8]
2000ccc0:	699b      	ldr	r3, [r3, #24]
2000ccc2:	431a      	orrs	r2, r3
2000ccc4:	68bb      	ldr	r3, [r7, #8]
2000ccc6:	681b      	ldr	r3, [r3, #0]
2000ccc8:	ea42 0103 	orr.w	r1, r2, r3
2000cccc:	68fb      	ldr	r3, [r7, #12]
2000ccce:	681b      	ldr	r3, [r3, #0]
2000ccd0:	687a      	ldr	r2, [r7, #4]
2000ccd2:	430a      	orrs	r2, r1
2000ccd4:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
2000ccd6:	687b      	ldr	r3, [r7, #4]
2000ccd8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
2000ccdc:	f000 80d6 	beq.w	2000ce8c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
2000cce0:	68fb      	ldr	r3, [r7, #12]
2000cce2:	681b      	ldr	r3, [r3, #0]
2000cce4:	68ba      	ldr	r2, [r7, #8]
2000cce6:	6852      	ldr	r2, [r2, #4]
2000cce8:	619a      	str	r2, [r3, #24]
}
2000ccea:	e0cf      	b.n	2000ce8c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
2000ccec:	68bb      	ldr	r3, [r7, #8]
2000ccee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000ccf0:	68bb      	ldr	r3, [r7, #8]
2000ccf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000ccf4:	431a      	orrs	r2, r3
2000ccf6:	68bb      	ldr	r3, [r7, #8]
2000ccf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000ccfa:	431a      	orrs	r2, r3
2000ccfc:	68bb      	ldr	r3, [r7, #8]
2000ccfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000cd00:	431a      	orrs	r2, r3
2000cd02:	68bb      	ldr	r3, [r7, #8]
2000cd04:	695b      	ldr	r3, [r3, #20]
2000cd06:	049b      	lsls	r3, r3, #18
2000cd08:	431a      	orrs	r2, r3
2000cd0a:	68bb      	ldr	r3, [r7, #8]
2000cd0c:	6a1b      	ldr	r3, [r3, #32]
2000cd0e:	431a      	orrs	r2, r3
2000cd10:	68bb      	ldr	r3, [r7, #8]
2000cd12:	69db      	ldr	r3, [r3, #28]
2000cd14:	431a      	orrs	r2, r3
2000cd16:	68bb      	ldr	r3, [r7, #8]
2000cd18:	699b      	ldr	r3, [r3, #24]
2000cd1a:	431a      	orrs	r2, r3
2000cd1c:	68bb      	ldr	r3, [r7, #8]
2000cd1e:	681b      	ldr	r3, [r3, #0]
2000cd20:	ea42 0103 	orr.w	r1, r2, r3
2000cd24:	68fb      	ldr	r3, [r7, #12]
2000cd26:	681b      	ldr	r3, [r3, #0]
2000cd28:	687a      	ldr	r2, [r7, #4]
2000cd2a:	430a      	orrs	r2, r1
2000cd2c:	615a      	str	r2, [r3, #20]
}
2000cd2e:	e0ad      	b.n	2000ce8c <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
2000cd30:	68bb      	ldr	r3, [r7, #8]
2000cd32:	6a1b      	ldr	r3, [r3, #32]
2000cd34:	2b00      	cmp	r3, #0
2000cd36:	d058      	beq.n	2000cdea <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
2000cd38:	68fb      	ldr	r3, [r7, #12]
2000cd3a:	681b      	ldr	r3, [r3, #0]
2000cd3c:	68ba      	ldr	r2, [r7, #8]
2000cd3e:	6892      	ldr	r2, [r2, #8]
2000cd40:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
2000cd42:	68bb      	ldr	r3, [r7, #8]
2000cd44:	69db      	ldr	r3, [r3, #28]
2000cd46:	2b00      	cmp	r3, #0
2000cd48:	d02d      	beq.n	2000cda6 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
2000cd4a:	68bb      	ldr	r3, [r7, #8]
2000cd4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000cd4e:	68bb      	ldr	r3, [r7, #8]
2000cd50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000cd52:	431a      	orrs	r2, r3
2000cd54:	68bb      	ldr	r3, [r7, #8]
2000cd56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000cd58:	431a      	orrs	r2, r3
2000cd5a:	68bb      	ldr	r3, [r7, #8]
2000cd5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000cd5e:	431a      	orrs	r2, r3
2000cd60:	68bb      	ldr	r3, [r7, #8]
2000cd62:	695b      	ldr	r3, [r3, #20]
2000cd64:	049b      	lsls	r3, r3, #18
2000cd66:	431a      	orrs	r2, r3
2000cd68:	68bb      	ldr	r3, [r7, #8]
2000cd6a:	691b      	ldr	r3, [r3, #16]
2000cd6c:	431a      	orrs	r2, r3
2000cd6e:	68bb      	ldr	r3, [r7, #8]
2000cd70:	6a1b      	ldr	r3, [r3, #32]
2000cd72:	431a      	orrs	r2, r3
2000cd74:	68bb      	ldr	r3, [r7, #8]
2000cd76:	68db      	ldr	r3, [r3, #12]
2000cd78:	431a      	orrs	r2, r3
2000cd7a:	68bb      	ldr	r3, [r7, #8]
2000cd7c:	69db      	ldr	r3, [r3, #28]
2000cd7e:	431a      	orrs	r2, r3
2000cd80:	68bb      	ldr	r3, [r7, #8]
2000cd82:	699b      	ldr	r3, [r3, #24]
2000cd84:	ea42 0103 	orr.w	r1, r2, r3
2000cd88:	68fb      	ldr	r3, [r7, #12]
2000cd8a:	681b      	ldr	r3, [r3, #0]
2000cd8c:	687a      	ldr	r2, [r7, #4]
2000cd8e:	430a      	orrs	r2, r1
2000cd90:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
2000cd92:	687b      	ldr	r3, [r7, #4]
2000cd94:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
2000cd98:	d078      	beq.n	2000ce8c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
2000cd9a:	68fb      	ldr	r3, [r7, #12]
2000cd9c:	681b      	ldr	r3, [r3, #0]
2000cd9e:	68ba      	ldr	r2, [r7, #8]
2000cda0:	6852      	ldr	r2, [r2, #4]
2000cda2:	619a      	str	r2, [r3, #24]
}
2000cda4:	e072      	b.n	2000ce8c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
2000cda6:	68bb      	ldr	r3, [r7, #8]
2000cda8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000cdaa:	68bb      	ldr	r3, [r7, #8]
2000cdac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000cdae:	431a      	orrs	r2, r3
2000cdb0:	68bb      	ldr	r3, [r7, #8]
2000cdb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000cdb4:	431a      	orrs	r2, r3
2000cdb6:	68bb      	ldr	r3, [r7, #8]
2000cdb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000cdba:	431a      	orrs	r2, r3
2000cdbc:	68bb      	ldr	r3, [r7, #8]
2000cdbe:	695b      	ldr	r3, [r3, #20]
2000cdc0:	049b      	lsls	r3, r3, #18
2000cdc2:	431a      	orrs	r2, r3
2000cdc4:	68bb      	ldr	r3, [r7, #8]
2000cdc6:	691b      	ldr	r3, [r3, #16]
2000cdc8:	431a      	orrs	r2, r3
2000cdca:	68bb      	ldr	r3, [r7, #8]
2000cdcc:	6a1b      	ldr	r3, [r3, #32]
2000cdce:	431a      	orrs	r2, r3
2000cdd0:	68bb      	ldr	r3, [r7, #8]
2000cdd2:	69db      	ldr	r3, [r3, #28]
2000cdd4:	431a      	orrs	r2, r3
2000cdd6:	68bb      	ldr	r3, [r7, #8]
2000cdd8:	699b      	ldr	r3, [r3, #24]
2000cdda:	ea42 0103 	orr.w	r1, r2, r3
2000cdde:	68fb      	ldr	r3, [r7, #12]
2000cde0:	681b      	ldr	r3, [r3, #0]
2000cde2:	687a      	ldr	r2, [r7, #4]
2000cde4:	430a      	orrs	r2, r1
2000cde6:	615a      	str	r2, [r3, #20]
}
2000cde8:	e050      	b.n	2000ce8c <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
2000cdea:	68bb      	ldr	r3, [r7, #8]
2000cdec:	69db      	ldr	r3, [r3, #28]
2000cdee:	2b00      	cmp	r3, #0
2000cdf0:	d02a      	beq.n	2000ce48 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
2000cdf2:	68bb      	ldr	r3, [r7, #8]
2000cdf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000cdf6:	68bb      	ldr	r3, [r7, #8]
2000cdf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000cdfa:	431a      	orrs	r2, r3
2000cdfc:	68bb      	ldr	r3, [r7, #8]
2000cdfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000ce00:	431a      	orrs	r2, r3
2000ce02:	68bb      	ldr	r3, [r7, #8]
2000ce04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000ce06:	431a      	orrs	r2, r3
2000ce08:	68bb      	ldr	r3, [r7, #8]
2000ce0a:	695b      	ldr	r3, [r3, #20]
2000ce0c:	049b      	lsls	r3, r3, #18
2000ce0e:	431a      	orrs	r2, r3
2000ce10:	68bb      	ldr	r3, [r7, #8]
2000ce12:	6a1b      	ldr	r3, [r3, #32]
2000ce14:	431a      	orrs	r2, r3
2000ce16:	68bb      	ldr	r3, [r7, #8]
2000ce18:	68db      	ldr	r3, [r3, #12]
2000ce1a:	431a      	orrs	r2, r3
2000ce1c:	68bb      	ldr	r3, [r7, #8]
2000ce1e:	69db      	ldr	r3, [r3, #28]
2000ce20:	431a      	orrs	r2, r3
2000ce22:	68bb      	ldr	r3, [r7, #8]
2000ce24:	699b      	ldr	r3, [r3, #24]
2000ce26:	ea42 0103 	orr.w	r1, r2, r3
2000ce2a:	68fb      	ldr	r3, [r7, #12]
2000ce2c:	681b      	ldr	r3, [r3, #0]
2000ce2e:	687a      	ldr	r2, [r7, #4]
2000ce30:	430a      	orrs	r2, r1
2000ce32:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
2000ce34:	687b      	ldr	r3, [r7, #4]
2000ce36:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
2000ce3a:	d027      	beq.n	2000ce8c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
2000ce3c:	68fb      	ldr	r3, [r7, #12]
2000ce3e:	681b      	ldr	r3, [r3, #0]
2000ce40:	68ba      	ldr	r2, [r7, #8]
2000ce42:	6852      	ldr	r2, [r2, #4]
2000ce44:	619a      	str	r2, [r3, #24]
}
2000ce46:	e021      	b.n	2000ce8c <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
2000ce48:	68bb      	ldr	r3, [r7, #8]
2000ce4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000ce4c:	2b00      	cmp	r3, #0
2000ce4e:	d01d      	beq.n	2000ce8c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
2000ce50:	68bb      	ldr	r3, [r7, #8]
2000ce52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000ce54:	68bb      	ldr	r3, [r7, #8]
2000ce56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000ce58:	431a      	orrs	r2, r3
2000ce5a:	68bb      	ldr	r3, [r7, #8]
2000ce5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000ce5e:	431a      	orrs	r2, r3
2000ce60:	68bb      	ldr	r3, [r7, #8]
2000ce62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000ce64:	431a      	orrs	r2, r3
2000ce66:	68bb      	ldr	r3, [r7, #8]
2000ce68:	695b      	ldr	r3, [r3, #20]
2000ce6a:	049b      	lsls	r3, r3, #18
2000ce6c:	431a      	orrs	r2, r3
2000ce6e:	68bb      	ldr	r3, [r7, #8]
2000ce70:	6a1b      	ldr	r3, [r3, #32]
2000ce72:	431a      	orrs	r2, r3
2000ce74:	68bb      	ldr	r3, [r7, #8]
2000ce76:	69db      	ldr	r3, [r3, #28]
2000ce78:	431a      	orrs	r2, r3
2000ce7a:	68bb      	ldr	r3, [r7, #8]
2000ce7c:	699b      	ldr	r3, [r3, #24]
2000ce7e:	ea42 0103 	orr.w	r1, r2, r3
2000ce82:	68fb      	ldr	r3, [r7, #12]
2000ce84:	681b      	ldr	r3, [r3, #0]
2000ce86:	687a      	ldr	r2, [r7, #4]
2000ce88:	430a      	orrs	r2, r1
2000ce8a:	615a      	str	r2, [r3, #20]
}
2000ce8c:	bf00      	nop
2000ce8e:	3714      	adds	r7, #20
2000ce90:	46bd      	mov	sp, r7
2000ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
2000ce96:	4770      	bx	lr

2000ce98 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
2000ce98:	b580      	push	{r7, lr}
2000ce9a:	b082      	sub	sp, #8
2000ce9c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
2000ce9e:	f7f4 ff5b 	bl	20001d58 <HAL_GetTick>
2000cea2:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
2000cea4:	4b66      	ldr	r3, [pc, #408]	; (2000d040 <HAL_RCC_DeInit+0x1a8>)
2000cea6:	681b      	ldr	r3, [r3, #0]
2000cea8:	4a65      	ldr	r2, [pc, #404]	; (2000d040 <HAL_RCC_DeInit+0x1a8>)
2000ceaa:	f043 0301 	orr.w	r3, r3, #1
2000ceae:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
2000ceb0:	e008      	b.n	2000cec4 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
2000ceb2:	f7f4 ff51 	bl	20001d58 <HAL_GetTick>
2000ceb6:	4602      	mov	r2, r0
2000ceb8:	687b      	ldr	r3, [r7, #4]
2000ceba:	1ad3      	subs	r3, r2, r3
2000cebc:	2b02      	cmp	r3, #2
2000cebe:	d901      	bls.n	2000cec4 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
2000cec0:	2303      	movs	r3, #3
2000cec2:	e0b8      	b.n	2000d036 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
2000cec4:	4b5e      	ldr	r3, [pc, #376]	; (2000d040 <HAL_RCC_DeInit+0x1a8>)
2000cec6:	681b      	ldr	r3, [r3, #0]
2000cec8:	f003 0302 	and.w	r3, r3, #2
2000cecc:	2b00      	cmp	r3, #0
2000cece:	d0f0      	beq.n	2000ceb2 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
2000ced0:	4b5b      	ldr	r3, [pc, #364]	; (2000d040 <HAL_RCC_DeInit+0x1a8>)
2000ced2:	681b      	ldr	r3, [r3, #0]
2000ced4:	4a5a      	ldr	r2, [pc, #360]	; (2000d040 <HAL_RCC_DeInit+0x1a8>)
2000ced6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2000ceda:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
2000cedc:	f7f4 ff3c 	bl	20001d58 <HAL_GetTick>
2000cee0:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
2000cee2:	4b57      	ldr	r3, [pc, #348]	; (2000d040 <HAL_RCC_DeInit+0x1a8>)
2000cee4:	2200      	movs	r2, #0
2000cee6:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
2000cee8:	e00a      	b.n	2000cf00 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
2000ceea:	f7f4 ff35 	bl	20001d58 <HAL_GetTick>
2000ceee:	4602      	mov	r2, r0
2000cef0:	687b      	ldr	r3, [r7, #4]
2000cef2:	1ad3      	subs	r3, r2, r3
2000cef4:	f241 3288 	movw	r2, #5000	; 0x1388
2000cef8:	4293      	cmp	r3, r2
2000cefa:	d901      	bls.n	2000cf00 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
2000cefc:	2303      	movs	r3, #3
2000cefe:	e09a      	b.n	2000d036 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
2000cf00:	4b4f      	ldr	r3, [pc, #316]	; (2000d040 <HAL_RCC_DeInit+0x1a8>)
2000cf02:	689b      	ldr	r3, [r3, #8]
2000cf04:	f003 030c 	and.w	r3, r3, #12
2000cf08:	2b00      	cmp	r3, #0
2000cf0a:	d1ee      	bne.n	2000ceea <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
2000cf0c:	f7f4 ff24 	bl	20001d58 <HAL_GetTick>
2000cf10:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
2000cf12:	4b4b      	ldr	r3, [pc, #300]	; (2000d040 <HAL_RCC_DeInit+0x1a8>)
2000cf14:	681b      	ldr	r3, [r3, #0]
2000cf16:	4a4a      	ldr	r2, [pc, #296]	; (2000d040 <HAL_RCC_DeInit+0x1a8>)
2000cf18:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
2000cf1c:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
2000cf1e:	e008      	b.n	2000cf32 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
2000cf20:	f7f4 ff1a 	bl	20001d58 <HAL_GetTick>
2000cf24:	4602      	mov	r2, r0
2000cf26:	687b      	ldr	r3, [r7, #4]
2000cf28:	1ad3      	subs	r3, r2, r3
2000cf2a:	2b64      	cmp	r3, #100	; 0x64
2000cf2c:	d901      	bls.n	2000cf32 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
2000cf2e:	2303      	movs	r3, #3
2000cf30:	e081      	b.n	2000d036 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
2000cf32:	4b43      	ldr	r3, [pc, #268]	; (2000d040 <HAL_RCC_DeInit+0x1a8>)
2000cf34:	681b      	ldr	r3, [r3, #0]
2000cf36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000cf3a:	2b00      	cmp	r3, #0
2000cf3c:	d1f0      	bne.n	2000cf20 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
2000cf3e:	f7f4 ff0b 	bl	20001d58 <HAL_GetTick>
2000cf42:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
2000cf44:	4b3e      	ldr	r3, [pc, #248]	; (2000d040 <HAL_RCC_DeInit+0x1a8>)
2000cf46:	681b      	ldr	r3, [r3, #0]
2000cf48:	4a3d      	ldr	r2, [pc, #244]	; (2000d040 <HAL_RCC_DeInit+0x1a8>)
2000cf4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
2000cf4e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
2000cf50:	e008      	b.n	2000cf64 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
2000cf52:	f7f4 ff01 	bl	20001d58 <HAL_GetTick>
2000cf56:	4602      	mov	r2, r0
2000cf58:	687b      	ldr	r3, [r7, #4]
2000cf5a:	1ad3      	subs	r3, r2, r3
2000cf5c:	2b02      	cmp	r3, #2
2000cf5e:	d901      	bls.n	2000cf64 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
2000cf60:	2303      	movs	r3, #3
2000cf62:	e068      	b.n	2000d036 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
2000cf64:	4b36      	ldr	r3, [pc, #216]	; (2000d040 <HAL_RCC_DeInit+0x1a8>)
2000cf66:	681b      	ldr	r3, [r3, #0]
2000cf68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000cf6c:	2b00      	cmp	r3, #0
2000cf6e:	d1f0      	bne.n	2000cf52 <HAL_RCC_DeInit+0xba>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
2000cf70:	f7f4 fef2 	bl	20001d58 <HAL_GetTick>
2000cf74:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
2000cf76:	4b32      	ldr	r3, [pc, #200]	; (2000d040 <HAL_RCC_DeInit+0x1a8>)
2000cf78:	681b      	ldr	r3, [r3, #0]
2000cf7a:	4a31      	ldr	r2, [pc, #196]	; (2000d040 <HAL_RCC_DeInit+0x1a8>)
2000cf7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
2000cf80:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
2000cf82:	e008      	b.n	2000cf96 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
2000cf84:	f7f4 fee8 	bl	20001d58 <HAL_GetTick>
2000cf88:	4602      	mov	r2, r0
2000cf8a:	687b      	ldr	r3, [r7, #4]
2000cf8c:	1ad3      	subs	r3, r2, r3
2000cf8e:	2b64      	cmp	r3, #100	; 0x64
2000cf90:	d901      	bls.n	2000cf96 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
2000cf92:	2303      	movs	r3, #3
2000cf94:	e04f      	b.n	2000d036 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
2000cf96:	4b2a      	ldr	r3, [pc, #168]	; (2000d040 <HAL_RCC_DeInit+0x1a8>)
2000cf98:	681b      	ldr	r3, [r3, #0]
2000cf9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2000cf9e:	2b00      	cmp	r3, #0
2000cfa0:	d1f0      	bne.n	2000cf84 <HAL_RCC_DeInit+0xec>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
2000cfa2:	f7f4 fed9 	bl	20001d58 <HAL_GetTick>
2000cfa6:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
2000cfa8:	4b25      	ldr	r3, [pc, #148]	; (2000d040 <HAL_RCC_DeInit+0x1a8>)
2000cfaa:	681b      	ldr	r3, [r3, #0]
2000cfac:	4a24      	ldr	r2, [pc, #144]	; (2000d040 <HAL_RCC_DeInit+0x1a8>)
2000cfae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
2000cfb2:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
2000cfb4:	e008      	b.n	2000cfc8 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
2000cfb6:	f7f4 fecf 	bl	20001d58 <HAL_GetTick>
2000cfba:	4602      	mov	r2, r0
2000cfbc:	687b      	ldr	r3, [r7, #4]
2000cfbe:	1ad3      	subs	r3, r2, r3
2000cfc0:	2b64      	cmp	r3, #100	; 0x64
2000cfc2:	d901      	bls.n	2000cfc8 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
2000cfc4:	2303      	movs	r3, #3
2000cfc6:	e036      	b.n	2000d036 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
2000cfc8:	4b1d      	ldr	r3, [pc, #116]	; (2000d040 <HAL_RCC_DeInit+0x1a8>)
2000cfca:	681b      	ldr	r3, [r3, #0]
2000cfcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2000cfd0:	2b00      	cmp	r3, #0
2000cfd2:	d1f0      	bne.n	2000cfb6 <HAL_RCC_DeInit+0x11e>
    }
  }

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | 0x20000000U;
2000cfd4:	4b1a      	ldr	r3, [pc, #104]	; (2000d040 <HAL_RCC_DeInit+0x1a8>)
2000cfd6:	4a1b      	ldr	r2, [pc, #108]	; (2000d044 <HAL_RCC_DeInit+0x1ac>)
2000cfd8:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register to default value */
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
2000cfda:	4b19      	ldr	r3, [pc, #100]	; (2000d040 <HAL_RCC_DeInit+0x1a8>)
2000cfdc:	4a1a      	ldr	r2, [pc, #104]	; (2000d048 <HAL_RCC_DeInit+0x1b0>)
2000cfde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register to default value */
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | 0x20000000U;
2000cfe2:	4b17      	ldr	r3, [pc, #92]	; (2000d040 <HAL_RCC_DeInit+0x1a8>)
2000cfe4:	4a18      	ldr	r2, [pc, #96]	; (2000d048 <HAL_RCC_DeInit+0x1b0>)
2000cfe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE | RCC_CIR_PLLI2SRDYIE | RCC_CIR_PLLSAIRDYIE);
2000cfea:	4b15      	ldr	r3, [pc, #84]	; (2000d040 <HAL_RCC_DeInit+0x1a8>)
2000cfec:	68db      	ldr	r3, [r3, #12]
2000cfee:	4a14      	ldr	r2, [pc, #80]	; (2000d040 <HAL_RCC_DeInit+0x1a8>)
2000cff0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
2000cff4:	60d3      	str	r3, [r2, #12]

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_PLLI2SRDYC | RCC_CIR_PLLSAIRDYC | RCC_CIR_CSSC);
2000cff6:	4b12      	ldr	r3, [pc, #72]	; (2000d040 <HAL_RCC_DeInit+0x1a8>)
2000cff8:	68db      	ldr	r3, [r3, #12]
2000cffa:	4a11      	ldr	r2, [pc, #68]	; (2000d040 <HAL_RCC_DeInit+0x1a8>)
2000cffc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
2000d000:	60d3      	str	r3, [r2, #12]

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
2000d002:	4b0f      	ldr	r3, [pc, #60]	; (2000d040 <HAL_RCC_DeInit+0x1a8>)
2000d004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000d006:	4a0e      	ldr	r2, [pc, #56]	; (2000d040 <HAL_RCC_DeInit+0x1a8>)
2000d008:	f023 0301 	bic.w	r3, r3, #1
2000d00c:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
2000d00e:	4b0c      	ldr	r3, [pc, #48]	; (2000d040 <HAL_RCC_DeInit+0x1a8>)
2000d010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000d012:	4a0b      	ldr	r2, [pc, #44]	; (2000d040 <HAL_RCC_DeInit+0x1a8>)
2000d014:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
2000d018:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
2000d01a:	4b0c      	ldr	r3, [pc, #48]	; (2000d04c <HAL_RCC_DeInit+0x1b4>)
2000d01c:	4a0c      	ldr	r2, [pc, #48]	; (2000d050 <HAL_RCC_DeInit+0x1b8>)
2000d01e:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
2000d020:	4b0c      	ldr	r3, [pc, #48]	; (2000d054 <HAL_RCC_DeInit+0x1bc>)
2000d022:	681b      	ldr	r3, [r3, #0]
2000d024:	4618      	mov	r0, r3
2000d026:	f7f4 fe53 	bl	20001cd0 <HAL_InitTick>
2000d02a:	4603      	mov	r3, r0
2000d02c:	2b00      	cmp	r3, #0
2000d02e:	d001      	beq.n	2000d034 <HAL_RCC_DeInit+0x19c>
  {
    return HAL_ERROR;
2000d030:	2301      	movs	r3, #1
2000d032:	e000      	b.n	2000d036 <HAL_RCC_DeInit+0x19e>
  }
  else
  {
    return HAL_OK;
2000d034:	2300      	movs	r3, #0
  }
}
2000d036:	4618      	mov	r0, r3
2000d038:	3708      	adds	r7, #8
2000d03a:	46bd      	mov	sp, r7
2000d03c:	bd80      	pop	{r7, pc}
2000d03e:	bf00      	nop
2000d040:	40023800 	.word	0x40023800
2000d044:	24003010 	.word	0x24003010
2000d048:	24003000 	.word	0x24003000
2000d04c:	20000410 	.word	0x20000410
2000d050:	00f42400 	.word	0x00f42400
2000d054:	20000414 	.word	0x20000414

2000d058 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
2000d058:	b580      	push	{r7, lr}
2000d05a:	b086      	sub	sp, #24
2000d05c:	af00      	add	r7, sp, #0
2000d05e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
2000d060:	2300      	movs	r3, #0
2000d062:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
2000d064:	687b      	ldr	r3, [r7, #4]
2000d066:	2b00      	cmp	r3, #0
2000d068:	d101      	bne.n	2000d06e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
2000d06a:	2301      	movs	r3, #1
2000d06c:	e29b      	b.n	2000d5a6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
2000d06e:	687b      	ldr	r3, [r7, #4]
2000d070:	681b      	ldr	r3, [r3, #0]
2000d072:	f003 0301 	and.w	r3, r3, #1
2000d076:	2b00      	cmp	r3, #0
2000d078:	f000 8087 	beq.w	2000d18a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
2000d07c:	4b96      	ldr	r3, [pc, #600]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d07e:	689b      	ldr	r3, [r3, #8]
2000d080:	f003 030c 	and.w	r3, r3, #12
2000d084:	2b04      	cmp	r3, #4
2000d086:	d00c      	beq.n	2000d0a2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
2000d088:	4b93      	ldr	r3, [pc, #588]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d08a:	689b      	ldr	r3, [r3, #8]
2000d08c:	f003 030c 	and.w	r3, r3, #12
2000d090:	2b08      	cmp	r3, #8
2000d092:	d112      	bne.n	2000d0ba <HAL_RCC_OscConfig+0x62>
2000d094:	4b90      	ldr	r3, [pc, #576]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d096:	685b      	ldr	r3, [r3, #4]
2000d098:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000d09c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2000d0a0:	d10b      	bne.n	2000d0ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
2000d0a2:	4b8d      	ldr	r3, [pc, #564]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d0a4:	681b      	ldr	r3, [r3, #0]
2000d0a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000d0aa:	2b00      	cmp	r3, #0
2000d0ac:	d06c      	beq.n	2000d188 <HAL_RCC_OscConfig+0x130>
2000d0ae:	687b      	ldr	r3, [r7, #4]
2000d0b0:	685b      	ldr	r3, [r3, #4]
2000d0b2:	2b00      	cmp	r3, #0
2000d0b4:	d168      	bne.n	2000d188 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
2000d0b6:	2301      	movs	r3, #1
2000d0b8:	e275      	b.n	2000d5a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
2000d0ba:	687b      	ldr	r3, [r7, #4]
2000d0bc:	685b      	ldr	r3, [r3, #4]
2000d0be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2000d0c2:	d106      	bne.n	2000d0d2 <HAL_RCC_OscConfig+0x7a>
2000d0c4:	4b84      	ldr	r3, [pc, #528]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d0c6:	681b      	ldr	r3, [r3, #0]
2000d0c8:	4a83      	ldr	r2, [pc, #524]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d0ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000d0ce:	6013      	str	r3, [r2, #0]
2000d0d0:	e02e      	b.n	2000d130 <HAL_RCC_OscConfig+0xd8>
2000d0d2:	687b      	ldr	r3, [r7, #4]
2000d0d4:	685b      	ldr	r3, [r3, #4]
2000d0d6:	2b00      	cmp	r3, #0
2000d0d8:	d10c      	bne.n	2000d0f4 <HAL_RCC_OscConfig+0x9c>
2000d0da:	4b7f      	ldr	r3, [pc, #508]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d0dc:	681b      	ldr	r3, [r3, #0]
2000d0de:	4a7e      	ldr	r2, [pc, #504]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d0e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2000d0e4:	6013      	str	r3, [r2, #0]
2000d0e6:	4b7c      	ldr	r3, [pc, #496]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d0e8:	681b      	ldr	r3, [r3, #0]
2000d0ea:	4a7b      	ldr	r2, [pc, #492]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d0ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
2000d0f0:	6013      	str	r3, [r2, #0]
2000d0f2:	e01d      	b.n	2000d130 <HAL_RCC_OscConfig+0xd8>
2000d0f4:	687b      	ldr	r3, [r7, #4]
2000d0f6:	685b      	ldr	r3, [r3, #4]
2000d0f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
2000d0fc:	d10c      	bne.n	2000d118 <HAL_RCC_OscConfig+0xc0>
2000d0fe:	4b76      	ldr	r3, [pc, #472]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d100:	681b      	ldr	r3, [r3, #0]
2000d102:	4a75      	ldr	r2, [pc, #468]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2000d108:	6013      	str	r3, [r2, #0]
2000d10a:	4b73      	ldr	r3, [pc, #460]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d10c:	681b      	ldr	r3, [r3, #0]
2000d10e:	4a72      	ldr	r2, [pc, #456]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000d114:	6013      	str	r3, [r2, #0]
2000d116:	e00b      	b.n	2000d130 <HAL_RCC_OscConfig+0xd8>
2000d118:	4b6f      	ldr	r3, [pc, #444]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d11a:	681b      	ldr	r3, [r3, #0]
2000d11c:	4a6e      	ldr	r2, [pc, #440]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d11e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2000d122:	6013      	str	r3, [r2, #0]
2000d124:	4b6c      	ldr	r3, [pc, #432]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d126:	681b      	ldr	r3, [r3, #0]
2000d128:	4a6b      	ldr	r2, [pc, #428]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d12a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
2000d12e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
2000d130:	687b      	ldr	r3, [r7, #4]
2000d132:	685b      	ldr	r3, [r3, #4]
2000d134:	2b00      	cmp	r3, #0
2000d136:	d013      	beq.n	2000d160 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2000d138:	f7f4 fe0e 	bl	20001d58 <HAL_GetTick>
2000d13c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000d13e:	e008      	b.n	2000d152 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
2000d140:	f7f4 fe0a 	bl	20001d58 <HAL_GetTick>
2000d144:	4602      	mov	r2, r0
2000d146:	693b      	ldr	r3, [r7, #16]
2000d148:	1ad3      	subs	r3, r2, r3
2000d14a:	2b64      	cmp	r3, #100	; 0x64
2000d14c:	d901      	bls.n	2000d152 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
2000d14e:	2303      	movs	r3, #3
2000d150:	e229      	b.n	2000d5a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000d152:	4b61      	ldr	r3, [pc, #388]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d154:	681b      	ldr	r3, [r3, #0]
2000d156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000d15a:	2b00      	cmp	r3, #0
2000d15c:	d0f0      	beq.n	2000d140 <HAL_RCC_OscConfig+0xe8>
2000d15e:	e014      	b.n	2000d18a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2000d160:	f7f4 fdfa 	bl	20001d58 <HAL_GetTick>
2000d164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
2000d166:	e008      	b.n	2000d17a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
2000d168:	f7f4 fdf6 	bl	20001d58 <HAL_GetTick>
2000d16c:	4602      	mov	r2, r0
2000d16e:	693b      	ldr	r3, [r7, #16]
2000d170:	1ad3      	subs	r3, r2, r3
2000d172:	2b64      	cmp	r3, #100	; 0x64
2000d174:	d901      	bls.n	2000d17a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
2000d176:	2303      	movs	r3, #3
2000d178:	e215      	b.n	2000d5a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
2000d17a:	4b57      	ldr	r3, [pc, #348]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d17c:	681b      	ldr	r3, [r3, #0]
2000d17e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000d182:	2b00      	cmp	r3, #0
2000d184:	d1f0      	bne.n	2000d168 <HAL_RCC_OscConfig+0x110>
2000d186:	e000      	b.n	2000d18a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
2000d188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
2000d18a:	687b      	ldr	r3, [r7, #4]
2000d18c:	681b      	ldr	r3, [r3, #0]
2000d18e:	f003 0302 	and.w	r3, r3, #2
2000d192:	2b00      	cmp	r3, #0
2000d194:	d069      	beq.n	2000d26a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
2000d196:	4b50      	ldr	r3, [pc, #320]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d198:	689b      	ldr	r3, [r3, #8]
2000d19a:	f003 030c 	and.w	r3, r3, #12
2000d19e:	2b00      	cmp	r3, #0
2000d1a0:	d00b      	beq.n	2000d1ba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
2000d1a2:	4b4d      	ldr	r3, [pc, #308]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d1a4:	689b      	ldr	r3, [r3, #8]
2000d1a6:	f003 030c 	and.w	r3, r3, #12
2000d1aa:	2b08      	cmp	r3, #8
2000d1ac:	d11c      	bne.n	2000d1e8 <HAL_RCC_OscConfig+0x190>
2000d1ae:	4b4a      	ldr	r3, [pc, #296]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d1b0:	685b      	ldr	r3, [r3, #4]
2000d1b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000d1b6:	2b00      	cmp	r3, #0
2000d1b8:	d116      	bne.n	2000d1e8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
2000d1ba:	4b47      	ldr	r3, [pc, #284]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d1bc:	681b      	ldr	r3, [r3, #0]
2000d1be:	f003 0302 	and.w	r3, r3, #2
2000d1c2:	2b00      	cmp	r3, #0
2000d1c4:	d005      	beq.n	2000d1d2 <HAL_RCC_OscConfig+0x17a>
2000d1c6:	687b      	ldr	r3, [r7, #4]
2000d1c8:	68db      	ldr	r3, [r3, #12]
2000d1ca:	2b01      	cmp	r3, #1
2000d1cc:	d001      	beq.n	2000d1d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
2000d1ce:	2301      	movs	r3, #1
2000d1d0:	e1e9      	b.n	2000d5a6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2000d1d2:	4b41      	ldr	r3, [pc, #260]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d1d4:	681b      	ldr	r3, [r3, #0]
2000d1d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
2000d1da:	687b      	ldr	r3, [r7, #4]
2000d1dc:	691b      	ldr	r3, [r3, #16]
2000d1de:	00db      	lsls	r3, r3, #3
2000d1e0:	493d      	ldr	r1, [pc, #244]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d1e2:	4313      	orrs	r3, r2
2000d1e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
2000d1e6:	e040      	b.n	2000d26a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
2000d1e8:	687b      	ldr	r3, [r7, #4]
2000d1ea:	68db      	ldr	r3, [r3, #12]
2000d1ec:	2b00      	cmp	r3, #0
2000d1ee:	d023      	beq.n	2000d238 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
2000d1f0:	4b39      	ldr	r3, [pc, #228]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d1f2:	681b      	ldr	r3, [r3, #0]
2000d1f4:	4a38      	ldr	r2, [pc, #224]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d1f6:	f043 0301 	orr.w	r3, r3, #1
2000d1fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2000d1fc:	f7f4 fdac 	bl	20001d58 <HAL_GetTick>
2000d200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000d202:	e008      	b.n	2000d216 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
2000d204:	f7f4 fda8 	bl	20001d58 <HAL_GetTick>
2000d208:	4602      	mov	r2, r0
2000d20a:	693b      	ldr	r3, [r7, #16]
2000d20c:	1ad3      	subs	r3, r2, r3
2000d20e:	2b02      	cmp	r3, #2
2000d210:	d901      	bls.n	2000d216 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
2000d212:	2303      	movs	r3, #3
2000d214:	e1c7      	b.n	2000d5a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000d216:	4b30      	ldr	r3, [pc, #192]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d218:	681b      	ldr	r3, [r3, #0]
2000d21a:	f003 0302 	and.w	r3, r3, #2
2000d21e:	2b00      	cmp	r3, #0
2000d220:	d0f0      	beq.n	2000d204 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2000d222:	4b2d      	ldr	r3, [pc, #180]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d224:	681b      	ldr	r3, [r3, #0]
2000d226:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
2000d22a:	687b      	ldr	r3, [r7, #4]
2000d22c:	691b      	ldr	r3, [r3, #16]
2000d22e:	00db      	lsls	r3, r3, #3
2000d230:	4929      	ldr	r1, [pc, #164]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d232:	4313      	orrs	r3, r2
2000d234:	600b      	str	r3, [r1, #0]
2000d236:	e018      	b.n	2000d26a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
2000d238:	4b27      	ldr	r3, [pc, #156]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d23a:	681b      	ldr	r3, [r3, #0]
2000d23c:	4a26      	ldr	r2, [pc, #152]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d23e:	f023 0301 	bic.w	r3, r3, #1
2000d242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2000d244:	f7f4 fd88 	bl	20001d58 <HAL_GetTick>
2000d248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
2000d24a:	e008      	b.n	2000d25e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
2000d24c:	f7f4 fd84 	bl	20001d58 <HAL_GetTick>
2000d250:	4602      	mov	r2, r0
2000d252:	693b      	ldr	r3, [r7, #16]
2000d254:	1ad3      	subs	r3, r2, r3
2000d256:	2b02      	cmp	r3, #2
2000d258:	d901      	bls.n	2000d25e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
2000d25a:	2303      	movs	r3, #3
2000d25c:	e1a3      	b.n	2000d5a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
2000d25e:	4b1e      	ldr	r3, [pc, #120]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d260:	681b      	ldr	r3, [r3, #0]
2000d262:	f003 0302 	and.w	r3, r3, #2
2000d266:	2b00      	cmp	r3, #0
2000d268:	d1f0      	bne.n	2000d24c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
2000d26a:	687b      	ldr	r3, [r7, #4]
2000d26c:	681b      	ldr	r3, [r3, #0]
2000d26e:	f003 0308 	and.w	r3, r3, #8
2000d272:	2b00      	cmp	r3, #0
2000d274:	d038      	beq.n	2000d2e8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
2000d276:	687b      	ldr	r3, [r7, #4]
2000d278:	695b      	ldr	r3, [r3, #20]
2000d27a:	2b00      	cmp	r3, #0
2000d27c:	d019      	beq.n	2000d2b2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
2000d27e:	4b16      	ldr	r3, [pc, #88]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000d282:	4a15      	ldr	r2, [pc, #84]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d284:	f043 0301 	orr.w	r3, r3, #1
2000d288:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2000d28a:	f7f4 fd65 	bl	20001d58 <HAL_GetTick>
2000d28e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
2000d290:	e008      	b.n	2000d2a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
2000d292:	f7f4 fd61 	bl	20001d58 <HAL_GetTick>
2000d296:	4602      	mov	r2, r0
2000d298:	693b      	ldr	r3, [r7, #16]
2000d29a:	1ad3      	subs	r3, r2, r3
2000d29c:	2b02      	cmp	r3, #2
2000d29e:	d901      	bls.n	2000d2a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
2000d2a0:	2303      	movs	r3, #3
2000d2a2:	e180      	b.n	2000d5a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
2000d2a4:	4b0c      	ldr	r3, [pc, #48]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d2a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000d2a8:	f003 0302 	and.w	r3, r3, #2
2000d2ac:	2b00      	cmp	r3, #0
2000d2ae:	d0f0      	beq.n	2000d292 <HAL_RCC_OscConfig+0x23a>
2000d2b0:	e01a      	b.n	2000d2e8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
2000d2b2:	4b09      	ldr	r3, [pc, #36]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d2b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000d2b6:	4a08      	ldr	r2, [pc, #32]	; (2000d2d8 <HAL_RCC_OscConfig+0x280>)
2000d2b8:	f023 0301 	bic.w	r3, r3, #1
2000d2bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2000d2be:	f7f4 fd4b 	bl	20001d58 <HAL_GetTick>
2000d2c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
2000d2c4:	e00a      	b.n	2000d2dc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
2000d2c6:	f7f4 fd47 	bl	20001d58 <HAL_GetTick>
2000d2ca:	4602      	mov	r2, r0
2000d2cc:	693b      	ldr	r3, [r7, #16]
2000d2ce:	1ad3      	subs	r3, r2, r3
2000d2d0:	2b02      	cmp	r3, #2
2000d2d2:	d903      	bls.n	2000d2dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
2000d2d4:	2303      	movs	r3, #3
2000d2d6:	e166      	b.n	2000d5a6 <HAL_RCC_OscConfig+0x54e>
2000d2d8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
2000d2dc:	4b92      	ldr	r3, [pc, #584]	; (2000d528 <HAL_RCC_OscConfig+0x4d0>)
2000d2de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000d2e0:	f003 0302 	and.w	r3, r3, #2
2000d2e4:	2b00      	cmp	r3, #0
2000d2e6:	d1ee      	bne.n	2000d2c6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
2000d2e8:	687b      	ldr	r3, [r7, #4]
2000d2ea:	681b      	ldr	r3, [r3, #0]
2000d2ec:	f003 0304 	and.w	r3, r3, #4
2000d2f0:	2b00      	cmp	r3, #0
2000d2f2:	f000 80a4 	beq.w	2000d43e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
2000d2f6:	4b8c      	ldr	r3, [pc, #560]	; (2000d528 <HAL_RCC_OscConfig+0x4d0>)
2000d2f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000d2fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000d2fe:	2b00      	cmp	r3, #0
2000d300:	d10d      	bne.n	2000d31e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
2000d302:	4b89      	ldr	r3, [pc, #548]	; (2000d528 <HAL_RCC_OscConfig+0x4d0>)
2000d304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000d306:	4a88      	ldr	r2, [pc, #544]	; (2000d528 <HAL_RCC_OscConfig+0x4d0>)
2000d308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000d30c:	6413      	str	r3, [r2, #64]	; 0x40
2000d30e:	4b86      	ldr	r3, [pc, #536]	; (2000d528 <HAL_RCC_OscConfig+0x4d0>)
2000d310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000d312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000d316:	60bb      	str	r3, [r7, #8]
2000d318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
2000d31a:	2301      	movs	r3, #1
2000d31c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
2000d31e:	4b83      	ldr	r3, [pc, #524]	; (2000d52c <HAL_RCC_OscConfig+0x4d4>)
2000d320:	681b      	ldr	r3, [r3, #0]
2000d322:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000d326:	2b00      	cmp	r3, #0
2000d328:	d118      	bne.n	2000d35c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
2000d32a:	4b80      	ldr	r3, [pc, #512]	; (2000d52c <HAL_RCC_OscConfig+0x4d4>)
2000d32c:	681b      	ldr	r3, [r3, #0]
2000d32e:	4a7f      	ldr	r2, [pc, #508]	; (2000d52c <HAL_RCC_OscConfig+0x4d4>)
2000d330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2000d334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
2000d336:	f7f4 fd0f 	bl	20001d58 <HAL_GetTick>
2000d33a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
2000d33c:	e008      	b.n	2000d350 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
2000d33e:	f7f4 fd0b 	bl	20001d58 <HAL_GetTick>
2000d342:	4602      	mov	r2, r0
2000d344:	693b      	ldr	r3, [r7, #16]
2000d346:	1ad3      	subs	r3, r2, r3
2000d348:	2b64      	cmp	r3, #100	; 0x64
2000d34a:	d901      	bls.n	2000d350 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
2000d34c:	2303      	movs	r3, #3
2000d34e:	e12a      	b.n	2000d5a6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
2000d350:	4b76      	ldr	r3, [pc, #472]	; (2000d52c <HAL_RCC_OscConfig+0x4d4>)
2000d352:	681b      	ldr	r3, [r3, #0]
2000d354:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000d358:	2b00      	cmp	r3, #0
2000d35a:	d0f0      	beq.n	2000d33e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
2000d35c:	687b      	ldr	r3, [r7, #4]
2000d35e:	689b      	ldr	r3, [r3, #8]
2000d360:	2b01      	cmp	r3, #1
2000d362:	d106      	bne.n	2000d372 <HAL_RCC_OscConfig+0x31a>
2000d364:	4b70      	ldr	r3, [pc, #448]	; (2000d528 <HAL_RCC_OscConfig+0x4d0>)
2000d366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000d368:	4a6f      	ldr	r2, [pc, #444]	; (2000d528 <HAL_RCC_OscConfig+0x4d0>)
2000d36a:	f043 0301 	orr.w	r3, r3, #1
2000d36e:	6713      	str	r3, [r2, #112]	; 0x70
2000d370:	e02d      	b.n	2000d3ce <HAL_RCC_OscConfig+0x376>
2000d372:	687b      	ldr	r3, [r7, #4]
2000d374:	689b      	ldr	r3, [r3, #8]
2000d376:	2b00      	cmp	r3, #0
2000d378:	d10c      	bne.n	2000d394 <HAL_RCC_OscConfig+0x33c>
2000d37a:	4b6b      	ldr	r3, [pc, #428]	; (2000d528 <HAL_RCC_OscConfig+0x4d0>)
2000d37c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000d37e:	4a6a      	ldr	r2, [pc, #424]	; (2000d528 <HAL_RCC_OscConfig+0x4d0>)
2000d380:	f023 0301 	bic.w	r3, r3, #1
2000d384:	6713      	str	r3, [r2, #112]	; 0x70
2000d386:	4b68      	ldr	r3, [pc, #416]	; (2000d528 <HAL_RCC_OscConfig+0x4d0>)
2000d388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000d38a:	4a67      	ldr	r2, [pc, #412]	; (2000d528 <HAL_RCC_OscConfig+0x4d0>)
2000d38c:	f023 0304 	bic.w	r3, r3, #4
2000d390:	6713      	str	r3, [r2, #112]	; 0x70
2000d392:	e01c      	b.n	2000d3ce <HAL_RCC_OscConfig+0x376>
2000d394:	687b      	ldr	r3, [r7, #4]
2000d396:	689b      	ldr	r3, [r3, #8]
2000d398:	2b05      	cmp	r3, #5
2000d39a:	d10c      	bne.n	2000d3b6 <HAL_RCC_OscConfig+0x35e>
2000d39c:	4b62      	ldr	r3, [pc, #392]	; (2000d528 <HAL_RCC_OscConfig+0x4d0>)
2000d39e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000d3a0:	4a61      	ldr	r2, [pc, #388]	; (2000d528 <HAL_RCC_OscConfig+0x4d0>)
2000d3a2:	f043 0304 	orr.w	r3, r3, #4
2000d3a6:	6713      	str	r3, [r2, #112]	; 0x70
2000d3a8:	4b5f      	ldr	r3, [pc, #380]	; (2000d528 <HAL_RCC_OscConfig+0x4d0>)
2000d3aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000d3ac:	4a5e      	ldr	r2, [pc, #376]	; (2000d528 <HAL_RCC_OscConfig+0x4d0>)
2000d3ae:	f043 0301 	orr.w	r3, r3, #1
2000d3b2:	6713      	str	r3, [r2, #112]	; 0x70
2000d3b4:	e00b      	b.n	2000d3ce <HAL_RCC_OscConfig+0x376>
2000d3b6:	4b5c      	ldr	r3, [pc, #368]	; (2000d528 <HAL_RCC_OscConfig+0x4d0>)
2000d3b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000d3ba:	4a5b      	ldr	r2, [pc, #364]	; (2000d528 <HAL_RCC_OscConfig+0x4d0>)
2000d3bc:	f023 0301 	bic.w	r3, r3, #1
2000d3c0:	6713      	str	r3, [r2, #112]	; 0x70
2000d3c2:	4b59      	ldr	r3, [pc, #356]	; (2000d528 <HAL_RCC_OscConfig+0x4d0>)
2000d3c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000d3c6:	4a58      	ldr	r2, [pc, #352]	; (2000d528 <HAL_RCC_OscConfig+0x4d0>)
2000d3c8:	f023 0304 	bic.w	r3, r3, #4
2000d3cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
2000d3ce:	687b      	ldr	r3, [r7, #4]
2000d3d0:	689b      	ldr	r3, [r3, #8]
2000d3d2:	2b00      	cmp	r3, #0
2000d3d4:	d015      	beq.n	2000d402 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2000d3d6:	f7f4 fcbf 	bl	20001d58 <HAL_GetTick>
2000d3da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2000d3dc:	e00a      	b.n	2000d3f4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2000d3de:	f7f4 fcbb 	bl	20001d58 <HAL_GetTick>
2000d3e2:	4602      	mov	r2, r0
2000d3e4:	693b      	ldr	r3, [r7, #16]
2000d3e6:	1ad3      	subs	r3, r2, r3
2000d3e8:	f241 3288 	movw	r2, #5000	; 0x1388
2000d3ec:	4293      	cmp	r3, r2
2000d3ee:	d901      	bls.n	2000d3f4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
2000d3f0:	2303      	movs	r3, #3
2000d3f2:	e0d8      	b.n	2000d5a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2000d3f4:	4b4c      	ldr	r3, [pc, #304]	; (2000d528 <HAL_RCC_OscConfig+0x4d0>)
2000d3f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000d3f8:	f003 0302 	and.w	r3, r3, #2
2000d3fc:	2b00      	cmp	r3, #0
2000d3fe:	d0ee      	beq.n	2000d3de <HAL_RCC_OscConfig+0x386>
2000d400:	e014      	b.n	2000d42c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2000d402:	f7f4 fca9 	bl	20001d58 <HAL_GetTick>
2000d406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
2000d408:	e00a      	b.n	2000d420 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2000d40a:	f7f4 fca5 	bl	20001d58 <HAL_GetTick>
2000d40e:	4602      	mov	r2, r0
2000d410:	693b      	ldr	r3, [r7, #16]
2000d412:	1ad3      	subs	r3, r2, r3
2000d414:	f241 3288 	movw	r2, #5000	; 0x1388
2000d418:	4293      	cmp	r3, r2
2000d41a:	d901      	bls.n	2000d420 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
2000d41c:	2303      	movs	r3, #3
2000d41e:	e0c2      	b.n	2000d5a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
2000d420:	4b41      	ldr	r3, [pc, #260]	; (2000d528 <HAL_RCC_OscConfig+0x4d0>)
2000d422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000d424:	f003 0302 	and.w	r3, r3, #2
2000d428:	2b00      	cmp	r3, #0
2000d42a:	d1ee      	bne.n	2000d40a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
2000d42c:	7dfb      	ldrb	r3, [r7, #23]
2000d42e:	2b01      	cmp	r3, #1
2000d430:	d105      	bne.n	2000d43e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
2000d432:	4b3d      	ldr	r3, [pc, #244]	; (2000d528 <HAL_RCC_OscConfig+0x4d0>)
2000d434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000d436:	4a3c      	ldr	r2, [pc, #240]	; (2000d528 <HAL_RCC_OscConfig+0x4d0>)
2000d438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
2000d43c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
2000d43e:	687b      	ldr	r3, [r7, #4]
2000d440:	699b      	ldr	r3, [r3, #24]
2000d442:	2b00      	cmp	r3, #0
2000d444:	f000 80ae 	beq.w	2000d5a4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
2000d448:	4b37      	ldr	r3, [pc, #220]	; (2000d528 <HAL_RCC_OscConfig+0x4d0>)
2000d44a:	689b      	ldr	r3, [r3, #8]
2000d44c:	f003 030c 	and.w	r3, r3, #12
2000d450:	2b08      	cmp	r3, #8
2000d452:	d06d      	beq.n	2000d530 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
2000d454:	687b      	ldr	r3, [r7, #4]
2000d456:	699b      	ldr	r3, [r3, #24]
2000d458:	2b02      	cmp	r3, #2
2000d45a:	d14b      	bne.n	2000d4f4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2000d45c:	4b32      	ldr	r3, [pc, #200]	; (2000d528 <HAL_RCC_OscConfig+0x4d0>)
2000d45e:	681b      	ldr	r3, [r3, #0]
2000d460:	4a31      	ldr	r2, [pc, #196]	; (2000d528 <HAL_RCC_OscConfig+0x4d0>)
2000d462:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
2000d466:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2000d468:	f7f4 fc76 	bl	20001d58 <HAL_GetTick>
2000d46c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000d46e:	e008      	b.n	2000d482 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
2000d470:	f7f4 fc72 	bl	20001d58 <HAL_GetTick>
2000d474:	4602      	mov	r2, r0
2000d476:	693b      	ldr	r3, [r7, #16]
2000d478:	1ad3      	subs	r3, r2, r3
2000d47a:	2b02      	cmp	r3, #2
2000d47c:	d901      	bls.n	2000d482 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
2000d47e:	2303      	movs	r3, #3
2000d480:	e091      	b.n	2000d5a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000d482:	4b29      	ldr	r3, [pc, #164]	; (2000d528 <HAL_RCC_OscConfig+0x4d0>)
2000d484:	681b      	ldr	r3, [r3, #0]
2000d486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000d48a:	2b00      	cmp	r3, #0
2000d48c:	d1f0      	bne.n	2000d470 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
2000d48e:	687b      	ldr	r3, [r7, #4]
2000d490:	69da      	ldr	r2, [r3, #28]
2000d492:	687b      	ldr	r3, [r7, #4]
2000d494:	6a1b      	ldr	r3, [r3, #32]
2000d496:	431a      	orrs	r2, r3
2000d498:	687b      	ldr	r3, [r7, #4]
2000d49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000d49c:	019b      	lsls	r3, r3, #6
2000d49e:	431a      	orrs	r2, r3
2000d4a0:	687b      	ldr	r3, [r7, #4]
2000d4a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2000d4a4:	085b      	lsrs	r3, r3, #1
2000d4a6:	3b01      	subs	r3, #1
2000d4a8:	041b      	lsls	r3, r3, #16
2000d4aa:	431a      	orrs	r2, r3
2000d4ac:	687b      	ldr	r3, [r7, #4]
2000d4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000d4b0:	061b      	lsls	r3, r3, #24
2000d4b2:	431a      	orrs	r2, r3
2000d4b4:	687b      	ldr	r3, [r7, #4]
2000d4b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d4b8:	071b      	lsls	r3, r3, #28
2000d4ba:	491b      	ldr	r1, [pc, #108]	; (2000d528 <HAL_RCC_OscConfig+0x4d0>)
2000d4bc:	4313      	orrs	r3, r2
2000d4be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
2000d4c0:	4b19      	ldr	r3, [pc, #100]	; (2000d528 <HAL_RCC_OscConfig+0x4d0>)
2000d4c2:	681b      	ldr	r3, [r3, #0]
2000d4c4:	4a18      	ldr	r2, [pc, #96]	; (2000d528 <HAL_RCC_OscConfig+0x4d0>)
2000d4c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
2000d4ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2000d4cc:	f7f4 fc44 	bl	20001d58 <HAL_GetTick>
2000d4d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000d4d2:	e008      	b.n	2000d4e6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
2000d4d4:	f7f4 fc40 	bl	20001d58 <HAL_GetTick>
2000d4d8:	4602      	mov	r2, r0
2000d4da:	693b      	ldr	r3, [r7, #16]
2000d4dc:	1ad3      	subs	r3, r2, r3
2000d4de:	2b02      	cmp	r3, #2
2000d4e0:	d901      	bls.n	2000d4e6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
2000d4e2:	2303      	movs	r3, #3
2000d4e4:	e05f      	b.n	2000d5a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000d4e6:	4b10      	ldr	r3, [pc, #64]	; (2000d528 <HAL_RCC_OscConfig+0x4d0>)
2000d4e8:	681b      	ldr	r3, [r3, #0]
2000d4ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000d4ee:	2b00      	cmp	r3, #0
2000d4f0:	d0f0      	beq.n	2000d4d4 <HAL_RCC_OscConfig+0x47c>
2000d4f2:	e057      	b.n	2000d5a4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2000d4f4:	4b0c      	ldr	r3, [pc, #48]	; (2000d528 <HAL_RCC_OscConfig+0x4d0>)
2000d4f6:	681b      	ldr	r3, [r3, #0]
2000d4f8:	4a0b      	ldr	r2, [pc, #44]	; (2000d528 <HAL_RCC_OscConfig+0x4d0>)
2000d4fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
2000d4fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2000d500:	f7f4 fc2a 	bl	20001d58 <HAL_GetTick>
2000d504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000d506:	e008      	b.n	2000d51a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
2000d508:	f7f4 fc26 	bl	20001d58 <HAL_GetTick>
2000d50c:	4602      	mov	r2, r0
2000d50e:	693b      	ldr	r3, [r7, #16]
2000d510:	1ad3      	subs	r3, r2, r3
2000d512:	2b02      	cmp	r3, #2
2000d514:	d901      	bls.n	2000d51a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
2000d516:	2303      	movs	r3, #3
2000d518:	e045      	b.n	2000d5a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000d51a:	4b03      	ldr	r3, [pc, #12]	; (2000d528 <HAL_RCC_OscConfig+0x4d0>)
2000d51c:	681b      	ldr	r3, [r3, #0]
2000d51e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000d522:	2b00      	cmp	r3, #0
2000d524:	d1f0      	bne.n	2000d508 <HAL_RCC_OscConfig+0x4b0>
2000d526:	e03d      	b.n	2000d5a4 <HAL_RCC_OscConfig+0x54c>
2000d528:	40023800 	.word	0x40023800
2000d52c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
2000d530:	4b1f      	ldr	r3, [pc, #124]	; (2000d5b0 <HAL_RCC_OscConfig+0x558>)
2000d532:	685b      	ldr	r3, [r3, #4]
2000d534:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
2000d536:	687b      	ldr	r3, [r7, #4]
2000d538:	699b      	ldr	r3, [r3, #24]
2000d53a:	2b01      	cmp	r3, #1
2000d53c:	d030      	beq.n	2000d5a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2000d53e:	68fb      	ldr	r3, [r7, #12]
2000d540:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
2000d544:	687b      	ldr	r3, [r7, #4]
2000d546:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
2000d548:	429a      	cmp	r2, r3
2000d54a:	d129      	bne.n	2000d5a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
2000d54c:	68fb      	ldr	r3, [r7, #12]
2000d54e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
2000d552:	687b      	ldr	r3, [r7, #4]
2000d554:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2000d556:	429a      	cmp	r2, r3
2000d558:	d122      	bne.n	2000d5a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
2000d55a:	68fa      	ldr	r2, [r7, #12]
2000d55c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
2000d560:	4013      	ands	r3, r2
2000d562:	687a      	ldr	r2, [r7, #4]
2000d564:	6a52      	ldr	r2, [r2, #36]	; 0x24
2000d566:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
2000d568:	4293      	cmp	r3, r2
2000d56a:	d119      	bne.n	2000d5a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
2000d56c:	68fb      	ldr	r3, [r7, #12]
2000d56e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
2000d572:	687b      	ldr	r3, [r7, #4]
2000d574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2000d576:	085b      	lsrs	r3, r3, #1
2000d578:	3b01      	subs	r3, #1
2000d57a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
2000d57c:	429a      	cmp	r2, r3
2000d57e:	d10f      	bne.n	2000d5a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
2000d580:	68fb      	ldr	r3, [r7, #12]
2000d582:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
2000d586:	687b      	ldr	r3, [r7, #4]
2000d588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000d58a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
2000d58c:	429a      	cmp	r2, r3
2000d58e:	d107      	bne.n	2000d5a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
2000d590:	68fb      	ldr	r3, [r7, #12]
2000d592:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
2000d596:	687b      	ldr	r3, [r7, #4]
2000d598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d59a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
2000d59c:	429a      	cmp	r2, r3
2000d59e:	d001      	beq.n	2000d5a4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
2000d5a0:	2301      	movs	r3, #1
2000d5a2:	e000      	b.n	2000d5a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
2000d5a4:	2300      	movs	r3, #0
}
2000d5a6:	4618      	mov	r0, r3
2000d5a8:	3718      	adds	r7, #24
2000d5aa:	46bd      	mov	sp, r7
2000d5ac:	bd80      	pop	{r7, pc}
2000d5ae:	bf00      	nop
2000d5b0:	40023800 	.word	0x40023800

2000d5b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
2000d5b4:	b580      	push	{r7, lr}
2000d5b6:	b084      	sub	sp, #16
2000d5b8:	af00      	add	r7, sp, #0
2000d5ba:	6078      	str	r0, [r7, #4]
2000d5bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
2000d5be:	2300      	movs	r3, #0
2000d5c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
2000d5c2:	687b      	ldr	r3, [r7, #4]
2000d5c4:	2b00      	cmp	r3, #0
2000d5c6:	d101      	bne.n	2000d5cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
2000d5c8:	2301      	movs	r3, #1
2000d5ca:	e0d0      	b.n	2000d76e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
2000d5cc:	4b6a      	ldr	r3, [pc, #424]	; (2000d778 <HAL_RCC_ClockConfig+0x1c4>)
2000d5ce:	681b      	ldr	r3, [r3, #0]
2000d5d0:	f003 030f 	and.w	r3, r3, #15
2000d5d4:	683a      	ldr	r2, [r7, #0]
2000d5d6:	429a      	cmp	r2, r3
2000d5d8:	d910      	bls.n	2000d5fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2000d5da:	4b67      	ldr	r3, [pc, #412]	; (2000d778 <HAL_RCC_ClockConfig+0x1c4>)
2000d5dc:	681b      	ldr	r3, [r3, #0]
2000d5de:	f023 020f 	bic.w	r2, r3, #15
2000d5e2:	4965      	ldr	r1, [pc, #404]	; (2000d778 <HAL_RCC_ClockConfig+0x1c4>)
2000d5e4:	683b      	ldr	r3, [r7, #0]
2000d5e6:	4313      	orrs	r3, r2
2000d5e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
2000d5ea:	4b63      	ldr	r3, [pc, #396]	; (2000d778 <HAL_RCC_ClockConfig+0x1c4>)
2000d5ec:	681b      	ldr	r3, [r3, #0]
2000d5ee:	f003 030f 	and.w	r3, r3, #15
2000d5f2:	683a      	ldr	r2, [r7, #0]
2000d5f4:	429a      	cmp	r2, r3
2000d5f6:	d001      	beq.n	2000d5fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
2000d5f8:	2301      	movs	r3, #1
2000d5fa:	e0b8      	b.n	2000d76e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
2000d5fc:	687b      	ldr	r3, [r7, #4]
2000d5fe:	681b      	ldr	r3, [r3, #0]
2000d600:	f003 0302 	and.w	r3, r3, #2
2000d604:	2b00      	cmp	r3, #0
2000d606:	d020      	beq.n	2000d64a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2000d608:	687b      	ldr	r3, [r7, #4]
2000d60a:	681b      	ldr	r3, [r3, #0]
2000d60c:	f003 0304 	and.w	r3, r3, #4
2000d610:	2b00      	cmp	r3, #0
2000d612:	d005      	beq.n	2000d620 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
2000d614:	4b59      	ldr	r3, [pc, #356]	; (2000d77c <HAL_RCC_ClockConfig+0x1c8>)
2000d616:	689b      	ldr	r3, [r3, #8]
2000d618:	4a58      	ldr	r2, [pc, #352]	; (2000d77c <HAL_RCC_ClockConfig+0x1c8>)
2000d61a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
2000d61e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2000d620:	687b      	ldr	r3, [r7, #4]
2000d622:	681b      	ldr	r3, [r3, #0]
2000d624:	f003 0308 	and.w	r3, r3, #8
2000d628:	2b00      	cmp	r3, #0
2000d62a:	d005      	beq.n	2000d638 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
2000d62c:	4b53      	ldr	r3, [pc, #332]	; (2000d77c <HAL_RCC_ClockConfig+0x1c8>)
2000d62e:	689b      	ldr	r3, [r3, #8]
2000d630:	4a52      	ldr	r2, [pc, #328]	; (2000d77c <HAL_RCC_ClockConfig+0x1c8>)
2000d632:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
2000d636:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
2000d638:	4b50      	ldr	r3, [pc, #320]	; (2000d77c <HAL_RCC_ClockConfig+0x1c8>)
2000d63a:	689b      	ldr	r3, [r3, #8]
2000d63c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
2000d640:	687b      	ldr	r3, [r7, #4]
2000d642:	689b      	ldr	r3, [r3, #8]
2000d644:	494d      	ldr	r1, [pc, #308]	; (2000d77c <HAL_RCC_ClockConfig+0x1c8>)
2000d646:	4313      	orrs	r3, r2
2000d648:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
2000d64a:	687b      	ldr	r3, [r7, #4]
2000d64c:	681b      	ldr	r3, [r3, #0]
2000d64e:	f003 0301 	and.w	r3, r3, #1
2000d652:	2b00      	cmp	r3, #0
2000d654:	d040      	beq.n	2000d6d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
2000d656:	687b      	ldr	r3, [r7, #4]
2000d658:	685b      	ldr	r3, [r3, #4]
2000d65a:	2b01      	cmp	r3, #1
2000d65c:	d107      	bne.n	2000d66e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000d65e:	4b47      	ldr	r3, [pc, #284]	; (2000d77c <HAL_RCC_ClockConfig+0x1c8>)
2000d660:	681b      	ldr	r3, [r3, #0]
2000d662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000d666:	2b00      	cmp	r3, #0
2000d668:	d115      	bne.n	2000d696 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
2000d66a:	2301      	movs	r3, #1
2000d66c:	e07f      	b.n	2000d76e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
2000d66e:	687b      	ldr	r3, [r7, #4]
2000d670:	685b      	ldr	r3, [r3, #4]
2000d672:	2b02      	cmp	r3, #2
2000d674:	d107      	bne.n	2000d686 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000d676:	4b41      	ldr	r3, [pc, #260]	; (2000d77c <HAL_RCC_ClockConfig+0x1c8>)
2000d678:	681b      	ldr	r3, [r3, #0]
2000d67a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000d67e:	2b00      	cmp	r3, #0
2000d680:	d109      	bne.n	2000d696 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
2000d682:	2301      	movs	r3, #1
2000d684:	e073      	b.n	2000d76e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000d686:	4b3d      	ldr	r3, [pc, #244]	; (2000d77c <HAL_RCC_ClockConfig+0x1c8>)
2000d688:	681b      	ldr	r3, [r3, #0]
2000d68a:	f003 0302 	and.w	r3, r3, #2
2000d68e:	2b00      	cmp	r3, #0
2000d690:	d101      	bne.n	2000d696 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
2000d692:	2301      	movs	r3, #1
2000d694:	e06b      	b.n	2000d76e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
2000d696:	4b39      	ldr	r3, [pc, #228]	; (2000d77c <HAL_RCC_ClockConfig+0x1c8>)
2000d698:	689b      	ldr	r3, [r3, #8]
2000d69a:	f023 0203 	bic.w	r2, r3, #3
2000d69e:	687b      	ldr	r3, [r7, #4]
2000d6a0:	685b      	ldr	r3, [r3, #4]
2000d6a2:	4936      	ldr	r1, [pc, #216]	; (2000d77c <HAL_RCC_ClockConfig+0x1c8>)
2000d6a4:	4313      	orrs	r3, r2
2000d6a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2000d6a8:	f7f4 fb56 	bl	20001d58 <HAL_GetTick>
2000d6ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2000d6ae:	e00a      	b.n	2000d6c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
2000d6b0:	f7f4 fb52 	bl	20001d58 <HAL_GetTick>
2000d6b4:	4602      	mov	r2, r0
2000d6b6:	68fb      	ldr	r3, [r7, #12]
2000d6b8:	1ad3      	subs	r3, r2, r3
2000d6ba:	f241 3288 	movw	r2, #5000	; 0x1388
2000d6be:	4293      	cmp	r3, r2
2000d6c0:	d901      	bls.n	2000d6c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
2000d6c2:	2303      	movs	r3, #3
2000d6c4:	e053      	b.n	2000d76e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2000d6c6:	4b2d      	ldr	r3, [pc, #180]	; (2000d77c <HAL_RCC_ClockConfig+0x1c8>)
2000d6c8:	689b      	ldr	r3, [r3, #8]
2000d6ca:	f003 020c 	and.w	r2, r3, #12
2000d6ce:	687b      	ldr	r3, [r7, #4]
2000d6d0:	685b      	ldr	r3, [r3, #4]
2000d6d2:	009b      	lsls	r3, r3, #2
2000d6d4:	429a      	cmp	r2, r3
2000d6d6:	d1eb      	bne.n	2000d6b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
2000d6d8:	4b27      	ldr	r3, [pc, #156]	; (2000d778 <HAL_RCC_ClockConfig+0x1c4>)
2000d6da:	681b      	ldr	r3, [r3, #0]
2000d6dc:	f003 030f 	and.w	r3, r3, #15
2000d6e0:	683a      	ldr	r2, [r7, #0]
2000d6e2:	429a      	cmp	r2, r3
2000d6e4:	d210      	bcs.n	2000d708 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2000d6e6:	4b24      	ldr	r3, [pc, #144]	; (2000d778 <HAL_RCC_ClockConfig+0x1c4>)
2000d6e8:	681b      	ldr	r3, [r3, #0]
2000d6ea:	f023 020f 	bic.w	r2, r3, #15
2000d6ee:	4922      	ldr	r1, [pc, #136]	; (2000d778 <HAL_RCC_ClockConfig+0x1c4>)
2000d6f0:	683b      	ldr	r3, [r7, #0]
2000d6f2:	4313      	orrs	r3, r2
2000d6f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
2000d6f6:	4b20      	ldr	r3, [pc, #128]	; (2000d778 <HAL_RCC_ClockConfig+0x1c4>)
2000d6f8:	681b      	ldr	r3, [r3, #0]
2000d6fa:	f003 030f 	and.w	r3, r3, #15
2000d6fe:	683a      	ldr	r2, [r7, #0]
2000d700:	429a      	cmp	r2, r3
2000d702:	d001      	beq.n	2000d708 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
2000d704:	2301      	movs	r3, #1
2000d706:	e032      	b.n	2000d76e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2000d708:	687b      	ldr	r3, [r7, #4]
2000d70a:	681b      	ldr	r3, [r3, #0]
2000d70c:	f003 0304 	and.w	r3, r3, #4
2000d710:	2b00      	cmp	r3, #0
2000d712:	d008      	beq.n	2000d726 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
2000d714:	4b19      	ldr	r3, [pc, #100]	; (2000d77c <HAL_RCC_ClockConfig+0x1c8>)
2000d716:	689b      	ldr	r3, [r3, #8]
2000d718:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
2000d71c:	687b      	ldr	r3, [r7, #4]
2000d71e:	68db      	ldr	r3, [r3, #12]
2000d720:	4916      	ldr	r1, [pc, #88]	; (2000d77c <HAL_RCC_ClockConfig+0x1c8>)
2000d722:	4313      	orrs	r3, r2
2000d724:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2000d726:	687b      	ldr	r3, [r7, #4]
2000d728:	681b      	ldr	r3, [r3, #0]
2000d72a:	f003 0308 	and.w	r3, r3, #8
2000d72e:	2b00      	cmp	r3, #0
2000d730:	d009      	beq.n	2000d746 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
2000d732:	4b12      	ldr	r3, [pc, #72]	; (2000d77c <HAL_RCC_ClockConfig+0x1c8>)
2000d734:	689b      	ldr	r3, [r3, #8]
2000d736:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
2000d73a:	687b      	ldr	r3, [r7, #4]
2000d73c:	691b      	ldr	r3, [r3, #16]
2000d73e:	00db      	lsls	r3, r3, #3
2000d740:	490e      	ldr	r1, [pc, #56]	; (2000d77c <HAL_RCC_ClockConfig+0x1c8>)
2000d742:	4313      	orrs	r3, r2
2000d744:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
2000d746:	f000 f8a5 	bl	2000d894 <HAL_RCC_GetSysClockFreq>
2000d74a:	4602      	mov	r2, r0
2000d74c:	4b0b      	ldr	r3, [pc, #44]	; (2000d77c <HAL_RCC_ClockConfig+0x1c8>)
2000d74e:	689b      	ldr	r3, [r3, #8]
2000d750:	091b      	lsrs	r3, r3, #4
2000d752:	f003 030f 	and.w	r3, r3, #15
2000d756:	490a      	ldr	r1, [pc, #40]	; (2000d780 <HAL_RCC_ClockConfig+0x1cc>)
2000d758:	5ccb      	ldrb	r3, [r1, r3]
2000d75a:	fa22 f303 	lsr.w	r3, r2, r3
2000d75e:	4a09      	ldr	r2, [pc, #36]	; (2000d784 <HAL_RCC_ClockConfig+0x1d0>)
2000d760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
2000d762:	4b09      	ldr	r3, [pc, #36]	; (2000d788 <HAL_RCC_ClockConfig+0x1d4>)
2000d764:	681b      	ldr	r3, [r3, #0]
2000d766:	4618      	mov	r0, r3
2000d768:	f7f4 fab2 	bl	20001cd0 <HAL_InitTick>

  return HAL_OK;
2000d76c:	2300      	movs	r3, #0
}
2000d76e:	4618      	mov	r0, r3
2000d770:	3710      	adds	r7, #16
2000d772:	46bd      	mov	sp, r7
2000d774:	bd80      	pop	{r7, pc}
2000d776:	bf00      	nop
2000d778:	40023c00 	.word	0x40023c00
2000d77c:	40023800 	.word	0x40023800
2000d780:	2000ed14 	.word	0x2000ed14
2000d784:	20000410 	.word	0x20000410
2000d788:	20000414 	.word	0x20000414

2000d78c <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
2000d78c:	b580      	push	{r7, lr}
2000d78e:	b08c      	sub	sp, #48	; 0x30
2000d790:	af00      	add	r7, sp, #0
2000d792:	60f8      	str	r0, [r7, #12]
2000d794:	60b9      	str	r1, [r7, #8]
2000d796:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
2000d798:	68fb      	ldr	r3, [r7, #12]
2000d79a:	2b00      	cmp	r3, #0
2000d79c:	d127      	bne.n	2000d7ee <HAL_RCC_MCOConfig+0x62>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
2000d79e:	4b2a      	ldr	r3, [pc, #168]	; (2000d848 <HAL_RCC_MCOConfig+0xbc>)
2000d7a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d7a2:	4a29      	ldr	r2, [pc, #164]	; (2000d848 <HAL_RCC_MCOConfig+0xbc>)
2000d7a4:	f043 0301 	orr.w	r3, r3, #1
2000d7a8:	6313      	str	r3, [r2, #48]	; 0x30
2000d7aa:	4b27      	ldr	r3, [pc, #156]	; (2000d848 <HAL_RCC_MCOConfig+0xbc>)
2000d7ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d7ae:	f003 0301 	and.w	r3, r3, #1
2000d7b2:	61bb      	str	r3, [r7, #24]
2000d7b4:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
2000d7b6:	f44f 7380 	mov.w	r3, #256	; 0x100
2000d7ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2000d7bc:	2302      	movs	r3, #2
2000d7be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
2000d7c0:	2303      	movs	r3, #3
2000d7c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2000d7c4:	2300      	movs	r3, #0
2000d7c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
2000d7c8:	2300      	movs	r3, #0
2000d7ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
2000d7cc:	f107 031c 	add.w	r3, r7, #28
2000d7d0:	4619      	mov	r1, r3
2000d7d2:	481e      	ldr	r0, [pc, #120]	; (2000d84c <HAL_RCC_MCOConfig+0xc0>)
2000d7d4:	f7f8 f852 	bl	2000587c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
2000d7d8:	4b1b      	ldr	r3, [pc, #108]	; (2000d848 <HAL_RCC_MCOConfig+0xbc>)
2000d7da:	689b      	ldr	r3, [r3, #8]
2000d7dc:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
2000d7e0:	68b9      	ldr	r1, [r7, #8]
2000d7e2:	687b      	ldr	r3, [r7, #4]
2000d7e4:	430b      	orrs	r3, r1
2000d7e6:	4918      	ldr	r1, [pc, #96]	; (2000d848 <HAL_RCC_MCOConfig+0xbc>)
2000d7e8:	4313      	orrs	r3, r2
2000d7ea:	608b      	str	r3, [r1, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
  }
}
2000d7ec:	e027      	b.n	2000d83e <HAL_RCC_MCOConfig+0xb2>
    MCO2_CLK_ENABLE();
2000d7ee:	4b16      	ldr	r3, [pc, #88]	; (2000d848 <HAL_RCC_MCOConfig+0xbc>)
2000d7f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d7f2:	4a15      	ldr	r2, [pc, #84]	; (2000d848 <HAL_RCC_MCOConfig+0xbc>)
2000d7f4:	f043 0304 	orr.w	r3, r3, #4
2000d7f8:	6313      	str	r3, [r2, #48]	; 0x30
2000d7fa:	4b13      	ldr	r3, [pc, #76]	; (2000d848 <HAL_RCC_MCOConfig+0xbc>)
2000d7fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d7fe:	f003 0304 	and.w	r3, r3, #4
2000d802:	617b      	str	r3, [r7, #20]
2000d804:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
2000d806:	f44f 7300 	mov.w	r3, #512	; 0x200
2000d80a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2000d80c:	2302      	movs	r3, #2
2000d80e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
2000d810:	2303      	movs	r3, #3
2000d812:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2000d814:	2300      	movs	r3, #0
2000d816:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
2000d818:	2300      	movs	r3, #0
2000d81a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
2000d81c:	f107 031c 	add.w	r3, r7, #28
2000d820:	4619      	mov	r1, r3
2000d822:	480b      	ldr	r0, [pc, #44]	; (2000d850 <HAL_RCC_MCOConfig+0xc4>)
2000d824:	f7f8 f82a 	bl	2000587c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
2000d828:	4b07      	ldr	r3, [pc, #28]	; (2000d848 <HAL_RCC_MCOConfig+0xbc>)
2000d82a:	689b      	ldr	r3, [r3, #8]
2000d82c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
2000d830:	687b      	ldr	r3, [r7, #4]
2000d832:	00d9      	lsls	r1, r3, #3
2000d834:	68bb      	ldr	r3, [r7, #8]
2000d836:	430b      	orrs	r3, r1
2000d838:	4903      	ldr	r1, [pc, #12]	; (2000d848 <HAL_RCC_MCOConfig+0xbc>)
2000d83a:	4313      	orrs	r3, r2
2000d83c:	608b      	str	r3, [r1, #8]
}
2000d83e:	bf00      	nop
2000d840:	3730      	adds	r7, #48	; 0x30
2000d842:	46bd      	mov	sp, r7
2000d844:	bd80      	pop	{r7, pc}
2000d846:	bf00      	nop
2000d848:	40023800 	.word	0x40023800
2000d84c:	40020000 	.word	0x40020000
2000d850:	40020800 	.word	0x40020800

2000d854 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
2000d854:	b480      	push	{r7}
2000d856:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
2000d858:	4b05      	ldr	r3, [pc, #20]	; (2000d870 <HAL_RCC_EnableCSS+0x1c>)
2000d85a:	681b      	ldr	r3, [r3, #0]
2000d85c:	4a04      	ldr	r2, [pc, #16]	; (2000d870 <HAL_RCC_EnableCSS+0x1c>)
2000d85e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
2000d862:	6013      	str	r3, [r2, #0]
}
2000d864:	bf00      	nop
2000d866:	46bd      	mov	sp, r7
2000d868:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d86c:	4770      	bx	lr
2000d86e:	bf00      	nop
2000d870:	40023800 	.word	0x40023800

2000d874 <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
2000d874:	b480      	push	{r7}
2000d876:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_CSSON);
2000d878:	4b05      	ldr	r3, [pc, #20]	; (2000d890 <HAL_RCC_DisableCSS+0x1c>)
2000d87a:	681b      	ldr	r3, [r3, #0]
2000d87c:	4a04      	ldr	r2, [pc, #16]	; (2000d890 <HAL_RCC_DisableCSS+0x1c>)
2000d87e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
2000d882:	6013      	str	r3, [r2, #0]
}
2000d884:	bf00      	nop
2000d886:	46bd      	mov	sp, r7
2000d888:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d88c:	4770      	bx	lr
2000d88e:	bf00      	nop
2000d890:	40023800 	.word	0x40023800

2000d894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
2000d894:	b5b0      	push	{r4, r5, r7, lr}
2000d896:	b084      	sub	sp, #16
2000d898:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
2000d89a:	2100      	movs	r1, #0
2000d89c:	6079      	str	r1, [r7, #4]
2000d89e:	2100      	movs	r1, #0
2000d8a0:	60f9      	str	r1, [r7, #12]
2000d8a2:	2100      	movs	r1, #0
2000d8a4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
2000d8a6:	2100      	movs	r1, #0
2000d8a8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
2000d8aa:	4952      	ldr	r1, [pc, #328]	; (2000d9f4 <HAL_RCC_GetSysClockFreq+0x160>)
2000d8ac:	6889      	ldr	r1, [r1, #8]
2000d8ae:	f001 010c 	and.w	r1, r1, #12
2000d8b2:	2908      	cmp	r1, #8
2000d8b4:	d00d      	beq.n	2000d8d2 <HAL_RCC_GetSysClockFreq+0x3e>
2000d8b6:	2908      	cmp	r1, #8
2000d8b8:	f200 8094 	bhi.w	2000d9e4 <HAL_RCC_GetSysClockFreq+0x150>
2000d8bc:	2900      	cmp	r1, #0
2000d8be:	d002      	beq.n	2000d8c6 <HAL_RCC_GetSysClockFreq+0x32>
2000d8c0:	2904      	cmp	r1, #4
2000d8c2:	d003      	beq.n	2000d8cc <HAL_RCC_GetSysClockFreq+0x38>
2000d8c4:	e08e      	b.n	2000d9e4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
2000d8c6:	4b4c      	ldr	r3, [pc, #304]	; (2000d9f8 <HAL_RCC_GetSysClockFreq+0x164>)
2000d8c8:	60bb      	str	r3, [r7, #8]
      break;
2000d8ca:	e08e      	b.n	2000d9ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
2000d8cc:	4b4b      	ldr	r3, [pc, #300]	; (2000d9fc <HAL_RCC_GetSysClockFreq+0x168>)
2000d8ce:	60bb      	str	r3, [r7, #8]
      break;
2000d8d0:	e08b      	b.n	2000d9ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
2000d8d2:	4948      	ldr	r1, [pc, #288]	; (2000d9f4 <HAL_RCC_GetSysClockFreq+0x160>)
2000d8d4:	6849      	ldr	r1, [r1, #4]
2000d8d6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
2000d8da:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
2000d8dc:	4945      	ldr	r1, [pc, #276]	; (2000d9f4 <HAL_RCC_GetSysClockFreq+0x160>)
2000d8de:	6849      	ldr	r1, [r1, #4]
2000d8e0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
2000d8e4:	2900      	cmp	r1, #0
2000d8e6:	d024      	beq.n	2000d932 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
2000d8e8:	4942      	ldr	r1, [pc, #264]	; (2000d9f4 <HAL_RCC_GetSysClockFreq+0x160>)
2000d8ea:	6849      	ldr	r1, [r1, #4]
2000d8ec:	0989      	lsrs	r1, r1, #6
2000d8ee:	4608      	mov	r0, r1
2000d8f0:	f04f 0100 	mov.w	r1, #0
2000d8f4:	f240 14ff 	movw	r4, #511	; 0x1ff
2000d8f8:	f04f 0500 	mov.w	r5, #0
2000d8fc:	ea00 0204 	and.w	r2, r0, r4
2000d900:	ea01 0305 	and.w	r3, r1, r5
2000d904:	493d      	ldr	r1, [pc, #244]	; (2000d9fc <HAL_RCC_GetSysClockFreq+0x168>)
2000d906:	fb01 f003 	mul.w	r0, r1, r3
2000d90a:	2100      	movs	r1, #0
2000d90c:	fb01 f102 	mul.w	r1, r1, r2
2000d910:	1844      	adds	r4, r0, r1
2000d912:	493a      	ldr	r1, [pc, #232]	; (2000d9fc <HAL_RCC_GetSysClockFreq+0x168>)
2000d914:	fba2 0101 	umull	r0, r1, r2, r1
2000d918:	1863      	adds	r3, r4, r1
2000d91a:	4619      	mov	r1, r3
2000d91c:	687b      	ldr	r3, [r7, #4]
2000d91e:	461a      	mov	r2, r3
2000d920:	f04f 0300 	mov.w	r3, #0
2000d924:	f7f2 fe5c 	bl	200005e0 <__aeabi_uldivmod>
2000d928:	4602      	mov	r2, r0
2000d92a:	460b      	mov	r3, r1
2000d92c:	4613      	mov	r3, r2
2000d92e:	60fb      	str	r3, [r7, #12]
2000d930:	e04a      	b.n	2000d9c8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
2000d932:	4b30      	ldr	r3, [pc, #192]	; (2000d9f4 <HAL_RCC_GetSysClockFreq+0x160>)
2000d934:	685b      	ldr	r3, [r3, #4]
2000d936:	099b      	lsrs	r3, r3, #6
2000d938:	461a      	mov	r2, r3
2000d93a:	f04f 0300 	mov.w	r3, #0
2000d93e:	f240 10ff 	movw	r0, #511	; 0x1ff
2000d942:	f04f 0100 	mov.w	r1, #0
2000d946:	ea02 0400 	and.w	r4, r2, r0
2000d94a:	ea03 0501 	and.w	r5, r3, r1
2000d94e:	4620      	mov	r0, r4
2000d950:	4629      	mov	r1, r5
2000d952:	f04f 0200 	mov.w	r2, #0
2000d956:	f04f 0300 	mov.w	r3, #0
2000d95a:	014b      	lsls	r3, r1, #5
2000d95c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
2000d960:	0142      	lsls	r2, r0, #5
2000d962:	4610      	mov	r0, r2
2000d964:	4619      	mov	r1, r3
2000d966:	1b00      	subs	r0, r0, r4
2000d968:	eb61 0105 	sbc.w	r1, r1, r5
2000d96c:	f04f 0200 	mov.w	r2, #0
2000d970:	f04f 0300 	mov.w	r3, #0
2000d974:	018b      	lsls	r3, r1, #6
2000d976:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
2000d97a:	0182      	lsls	r2, r0, #6
2000d97c:	1a12      	subs	r2, r2, r0
2000d97e:	eb63 0301 	sbc.w	r3, r3, r1
2000d982:	f04f 0000 	mov.w	r0, #0
2000d986:	f04f 0100 	mov.w	r1, #0
2000d98a:	00d9      	lsls	r1, r3, #3
2000d98c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
2000d990:	00d0      	lsls	r0, r2, #3
2000d992:	4602      	mov	r2, r0
2000d994:	460b      	mov	r3, r1
2000d996:	1912      	adds	r2, r2, r4
2000d998:	eb45 0303 	adc.w	r3, r5, r3
2000d99c:	f04f 0000 	mov.w	r0, #0
2000d9a0:	f04f 0100 	mov.w	r1, #0
2000d9a4:	0299      	lsls	r1, r3, #10
2000d9a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
2000d9aa:	0290      	lsls	r0, r2, #10
2000d9ac:	4602      	mov	r2, r0
2000d9ae:	460b      	mov	r3, r1
2000d9b0:	4610      	mov	r0, r2
2000d9b2:	4619      	mov	r1, r3
2000d9b4:	687b      	ldr	r3, [r7, #4]
2000d9b6:	461a      	mov	r2, r3
2000d9b8:	f04f 0300 	mov.w	r3, #0
2000d9bc:	f7f2 fe10 	bl	200005e0 <__aeabi_uldivmod>
2000d9c0:	4602      	mov	r2, r0
2000d9c2:	460b      	mov	r3, r1
2000d9c4:	4613      	mov	r3, r2
2000d9c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
2000d9c8:	4b0a      	ldr	r3, [pc, #40]	; (2000d9f4 <HAL_RCC_GetSysClockFreq+0x160>)
2000d9ca:	685b      	ldr	r3, [r3, #4]
2000d9cc:	0c1b      	lsrs	r3, r3, #16
2000d9ce:	f003 0303 	and.w	r3, r3, #3
2000d9d2:	3301      	adds	r3, #1
2000d9d4:	005b      	lsls	r3, r3, #1
2000d9d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
2000d9d8:	68fa      	ldr	r2, [r7, #12]
2000d9da:	683b      	ldr	r3, [r7, #0]
2000d9dc:	fbb2 f3f3 	udiv	r3, r2, r3
2000d9e0:	60bb      	str	r3, [r7, #8]
      break;
2000d9e2:	e002      	b.n	2000d9ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
2000d9e4:	4b04      	ldr	r3, [pc, #16]	; (2000d9f8 <HAL_RCC_GetSysClockFreq+0x164>)
2000d9e6:	60bb      	str	r3, [r7, #8]
      break;
2000d9e8:	bf00      	nop
    }
  }
  return sysclockfreq;
2000d9ea:	68bb      	ldr	r3, [r7, #8]
}
2000d9ec:	4618      	mov	r0, r3
2000d9ee:	3710      	adds	r7, #16
2000d9f0:	46bd      	mov	sp, r7
2000d9f2:	bdb0      	pop	{r4, r5, r7, pc}
2000d9f4:	40023800 	.word	0x40023800
2000d9f8:	00f42400 	.word	0x00f42400
2000d9fc:	017d7840 	.word	0x017d7840

2000da00 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
2000da00:	b480      	push	{r7}
2000da02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
2000da04:	4b03      	ldr	r3, [pc, #12]	; (2000da14 <HAL_RCC_GetHCLKFreq+0x14>)
2000da06:	681b      	ldr	r3, [r3, #0]
}
2000da08:	4618      	mov	r0, r3
2000da0a:	46bd      	mov	sp, r7
2000da0c:	f85d 7b04 	ldr.w	r7, [sp], #4
2000da10:	4770      	bx	lr
2000da12:	bf00      	nop
2000da14:	20000410 	.word	0x20000410

2000da18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
2000da18:	b580      	push	{r7, lr}
2000da1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
2000da1c:	f7ff fff0 	bl	2000da00 <HAL_RCC_GetHCLKFreq>
2000da20:	4602      	mov	r2, r0
2000da22:	4b05      	ldr	r3, [pc, #20]	; (2000da38 <HAL_RCC_GetPCLK1Freq+0x20>)
2000da24:	689b      	ldr	r3, [r3, #8]
2000da26:	0a9b      	lsrs	r3, r3, #10
2000da28:	f003 0307 	and.w	r3, r3, #7
2000da2c:	4903      	ldr	r1, [pc, #12]	; (2000da3c <HAL_RCC_GetPCLK1Freq+0x24>)
2000da2e:	5ccb      	ldrb	r3, [r1, r3]
2000da30:	fa22 f303 	lsr.w	r3, r2, r3
}
2000da34:	4618      	mov	r0, r3
2000da36:	bd80      	pop	{r7, pc}
2000da38:	40023800 	.word	0x40023800
2000da3c:	2000ed24 	.word	0x2000ed24

2000da40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
2000da40:	b580      	push	{r7, lr}
2000da42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
2000da44:	f7ff ffdc 	bl	2000da00 <HAL_RCC_GetHCLKFreq>
2000da48:	4602      	mov	r2, r0
2000da4a:	4b05      	ldr	r3, [pc, #20]	; (2000da60 <HAL_RCC_GetPCLK2Freq+0x20>)
2000da4c:	689b      	ldr	r3, [r3, #8]
2000da4e:	0b5b      	lsrs	r3, r3, #13
2000da50:	f003 0307 	and.w	r3, r3, #7
2000da54:	4903      	ldr	r1, [pc, #12]	; (2000da64 <HAL_RCC_GetPCLK2Freq+0x24>)
2000da56:	5ccb      	ldrb	r3, [r1, r3]
2000da58:	fa22 f303 	lsr.w	r3, r2, r3
}
2000da5c:	4618      	mov	r0, r3
2000da5e:	bd80      	pop	{r7, pc}
2000da60:	40023800 	.word	0x40023800
2000da64:	2000ed24 	.word	0x2000ed24

2000da68 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
2000da68:	b480      	push	{r7}
2000da6a:	b085      	sub	sp, #20
2000da6c:	af00      	add	r7, sp, #0
2000da6e:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
2000da70:	687b      	ldr	r3, [r7, #4]
2000da72:	220f      	movs	r2, #15
2000da74:	601a      	str	r2, [r3, #0]

  /* Get the HSE configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
2000da76:	4b4f      	ldr	r3, [pc, #316]	; (2000dbb4 <HAL_RCC_GetOscConfig+0x14c>)
2000da78:	681b      	ldr	r3, [r3, #0]
2000da7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
2000da7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
2000da82:	d104      	bne.n	2000da8e <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
2000da84:	687b      	ldr	r3, [r7, #4]
2000da86:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
2000da8a:	605a      	str	r2, [r3, #4]
2000da8c:	e00e      	b.n	2000daac <HAL_RCC_GetOscConfig+0x44>
  }
  else if ((RCC->CR & RCC_CR_HSEON) == RCC_CR_HSEON)
2000da8e:	4b49      	ldr	r3, [pc, #292]	; (2000dbb4 <HAL_RCC_GetOscConfig+0x14c>)
2000da90:	681b      	ldr	r3, [r3, #0]
2000da92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2000da96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2000da9a:	d104      	bne.n	2000daa6 <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
2000da9c:	687b      	ldr	r3, [r7, #4]
2000da9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
2000daa2:	605a      	str	r2, [r3, #4]
2000daa4:	e002      	b.n	2000daac <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
2000daa6:	687b      	ldr	r3, [r7, #4]
2000daa8:	2200      	movs	r2, #0
2000daaa:	605a      	str	r2, [r3, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_HSION) == RCC_CR_HSION)
2000daac:	4b41      	ldr	r3, [pc, #260]	; (2000dbb4 <HAL_RCC_GetOscConfig+0x14c>)
2000daae:	681b      	ldr	r3, [r3, #0]
2000dab0:	f003 0301 	and.w	r3, r3, #1
2000dab4:	2b01      	cmp	r3, #1
2000dab6:	d103      	bne.n	2000dac0 <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
2000dab8:	687b      	ldr	r3, [r7, #4]
2000daba:	2201      	movs	r2, #1
2000dabc:	60da      	str	r2, [r3, #12]
2000dabe:	e002      	b.n	2000dac6 <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
2000dac0:	687b      	ldr	r3, [r7, #4]
2000dac2:	2200      	movs	r2, #0
2000dac4:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR & RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
2000dac6:	4b3b      	ldr	r3, [pc, #236]	; (2000dbb4 <HAL_RCC_GetOscConfig+0x14c>)
2000dac8:	681b      	ldr	r3, [r3, #0]
2000daca:	08db      	lsrs	r3, r3, #3
2000dacc:	f003 021f 	and.w	r2, r3, #31
2000dad0:	687b      	ldr	r3, [r7, #4]
2000dad2:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if ((RCC->BDCR & RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
2000dad4:	4b37      	ldr	r3, [pc, #220]	; (2000dbb4 <HAL_RCC_GetOscConfig+0x14c>)
2000dad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000dad8:	f003 0304 	and.w	r3, r3, #4
2000dadc:	2b04      	cmp	r3, #4
2000dade:	d103      	bne.n	2000dae8 <HAL_RCC_GetOscConfig+0x80>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
2000dae0:	687b      	ldr	r3, [r7, #4]
2000dae2:	2205      	movs	r2, #5
2000dae4:	609a      	str	r2, [r3, #8]
2000dae6:	e00c      	b.n	2000db02 <HAL_RCC_GetOscConfig+0x9a>
  }
  else if ((RCC->BDCR & RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
2000dae8:	4b32      	ldr	r3, [pc, #200]	; (2000dbb4 <HAL_RCC_GetOscConfig+0x14c>)
2000daea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000daec:	f003 0301 	and.w	r3, r3, #1
2000daf0:	2b01      	cmp	r3, #1
2000daf2:	d103      	bne.n	2000dafc <HAL_RCC_GetOscConfig+0x94>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
2000daf4:	687b      	ldr	r3, [r7, #4]
2000daf6:	2201      	movs	r2, #1
2000daf8:	609a      	str	r2, [r3, #8]
2000dafa:	e002      	b.n	2000db02 <HAL_RCC_GetOscConfig+0x9a>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
2000dafc:	687b      	ldr	r3, [r7, #4]
2000dafe:	2200      	movs	r2, #0
2000db00:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if ((RCC->CSR & RCC_CSR_LSION) == RCC_CSR_LSION)
2000db02:	4b2c      	ldr	r3, [pc, #176]	; (2000dbb4 <HAL_RCC_GetOscConfig+0x14c>)
2000db04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000db06:	f003 0301 	and.w	r3, r3, #1
2000db0a:	2b01      	cmp	r3, #1
2000db0c:	d103      	bne.n	2000db16 <HAL_RCC_GetOscConfig+0xae>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
2000db0e:	687b      	ldr	r3, [r7, #4]
2000db10:	2201      	movs	r2, #1
2000db12:	615a      	str	r2, [r3, #20]
2000db14:	e002      	b.n	2000db1c <HAL_RCC_GetOscConfig+0xb4>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
2000db16:	687b      	ldr	r3, [r7, #4]
2000db18:	2200      	movs	r2, #0
2000db1a:	615a      	str	r2, [r3, #20]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_PLLON) == RCC_CR_PLLON)
2000db1c:	4b25      	ldr	r3, [pc, #148]	; (2000dbb4 <HAL_RCC_GetOscConfig+0x14c>)
2000db1e:	681b      	ldr	r3, [r3, #0]
2000db20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2000db24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
2000db28:	d103      	bne.n	2000db32 <HAL_RCC_GetOscConfig+0xca>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
2000db2a:	687b      	ldr	r3, [r7, #4]
2000db2c:	2202      	movs	r2, #2
2000db2e:	619a      	str	r2, [r3, #24]
2000db30:	e002      	b.n	2000db38 <HAL_RCC_GetOscConfig+0xd0>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
2000db32:	687b      	ldr	r3, [r7, #4]
2000db34:	2201      	movs	r2, #1
2000db36:	619a      	str	r2, [r3, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
2000db38:	4b1e      	ldr	r3, [pc, #120]	; (2000dbb4 <HAL_RCC_GetOscConfig+0x14c>)
2000db3a:	685b      	ldr	r3, [r3, #4]
2000db3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
2000db40:	687b      	ldr	r3, [r7, #4]
2000db42:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
2000db44:	4b1b      	ldr	r3, [pc, #108]	; (2000dbb4 <HAL_RCC_GetOscConfig+0x14c>)
2000db46:	685b      	ldr	r3, [r3, #4]
2000db48:	f003 023f 	and.w	r2, r3, #63	; 0x3f
2000db4c:	687b      	ldr	r3, [r7, #4]
2000db4e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
2000db50:	4b18      	ldr	r3, [pc, #96]	; (2000dbb4 <HAL_RCC_GetOscConfig+0x14c>)
2000db52:	685b      	ldr	r3, [r3, #4]
2000db54:	099b      	lsrs	r3, r3, #6
2000db56:	f3c3 0208 	ubfx	r2, r3, #0, #9
2000db5a:	687b      	ldr	r3, [r7, #4]
2000db5c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1) >> RCC_PLLCFGR_PLLP_Pos);
2000db5e:	4b15      	ldr	r3, [pc, #84]	; (2000dbb4 <HAL_RCC_GetOscConfig+0x14c>)
2000db60:	685b      	ldr	r3, [r3, #4]
2000db62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
2000db66:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
2000db6a:	005b      	lsls	r3, r3, #1
2000db6c:	0c1a      	lsrs	r2, r3, #16
2000db6e:	687b      	ldr	r3, [r7, #4]
2000db70:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
2000db72:	4b10      	ldr	r3, [pc, #64]	; (2000dbb4 <HAL_RCC_GetOscConfig+0x14c>)
2000db74:	685b      	ldr	r3, [r3, #4]
2000db76:	0e1b      	lsrs	r3, r3, #24
2000db78:	f003 020f 	and.w	r2, r3, #15
2000db7c:	687b      	ldr	r3, [r7, #4]
2000db7e:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined (RCC_PLLCFGR_PLLR)
  RCC_OscInitStruct->PLL.PLLR = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR));
2000db80:	4b0c      	ldr	r3, [pc, #48]	; (2000dbb4 <HAL_RCC_GetOscConfig+0x14c>)
2000db82:	685b      	ldr	r3, [r3, #4]
2000db84:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
2000db88:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
2000db8c:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
2000db8e:	68fa      	ldr	r2, [r7, #12]
2000db90:	fa92 f2a2 	rbit	r2, r2
2000db94:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
2000db96:	68ba      	ldr	r2, [r7, #8]
2000db98:	fab2 f282 	clz	r2, r2
2000db9c:	b2d2      	uxtb	r2, r2
2000db9e:	fa23 f202 	lsr.w	r2, r3, r2
2000dba2:	687b      	ldr	r3, [r7, #4]
2000dba4:	631a      	str	r2, [r3, #48]	; 0x30
#endif
}
2000dba6:	bf00      	nop
2000dba8:	3714      	adds	r7, #20
2000dbaa:	46bd      	mov	sp, r7
2000dbac:	f85d 7b04 	ldr.w	r7, [sp], #4
2000dbb0:	4770      	bx	lr
2000dbb2:	bf00      	nop
2000dbb4:	40023800 	.word	0x40023800

2000dbb8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
2000dbb8:	b480      	push	{r7}
2000dbba:	b083      	sub	sp, #12
2000dbbc:	af00      	add	r7, sp, #0
2000dbbe:	6078      	str	r0, [r7, #4]
2000dbc0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
2000dbc2:	687b      	ldr	r3, [r7, #4]
2000dbc4:	220f      	movs	r2, #15
2000dbc6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
2000dbc8:	4b12      	ldr	r3, [pc, #72]	; (2000dc14 <HAL_RCC_GetClockConfig+0x5c>)
2000dbca:	689b      	ldr	r3, [r3, #8]
2000dbcc:	f003 0203 	and.w	r2, r3, #3
2000dbd0:	687b      	ldr	r3, [r7, #4]
2000dbd2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
2000dbd4:	4b0f      	ldr	r3, [pc, #60]	; (2000dc14 <HAL_RCC_GetClockConfig+0x5c>)
2000dbd6:	689b      	ldr	r3, [r3, #8]
2000dbd8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
2000dbdc:	687b      	ldr	r3, [r7, #4]
2000dbde:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
2000dbe0:	4b0c      	ldr	r3, [pc, #48]	; (2000dc14 <HAL_RCC_GetClockConfig+0x5c>)
2000dbe2:	689b      	ldr	r3, [r3, #8]
2000dbe4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
2000dbe8:	687b      	ldr	r3, [r7, #4]
2000dbea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
2000dbec:	4b09      	ldr	r3, [pc, #36]	; (2000dc14 <HAL_RCC_GetClockConfig+0x5c>)
2000dbee:	689b      	ldr	r3, [r3, #8]
2000dbf0:	08db      	lsrs	r3, r3, #3
2000dbf2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
2000dbf6:	687b      	ldr	r3, [r7, #4]
2000dbf8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
2000dbfa:	4b07      	ldr	r3, [pc, #28]	; (2000dc18 <HAL_RCC_GetClockConfig+0x60>)
2000dbfc:	681b      	ldr	r3, [r3, #0]
2000dbfe:	f003 020f 	and.w	r2, r3, #15
2000dc02:	683b      	ldr	r3, [r7, #0]
2000dc04:	601a      	str	r2, [r3, #0]
}
2000dc06:	bf00      	nop
2000dc08:	370c      	adds	r7, #12
2000dc0a:	46bd      	mov	sp, r7
2000dc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
2000dc10:	4770      	bx	lr
2000dc12:	bf00      	nop
2000dc14:	40023800 	.word	0x40023800
2000dc18:	40023c00 	.word	0x40023c00

2000dc1c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
2000dc1c:	b580      	push	{r7, lr}
2000dc1e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
2000dc20:	4b06      	ldr	r3, [pc, #24]	; (2000dc3c <HAL_RCC_NMI_IRQHandler+0x20>)
2000dc22:	68db      	ldr	r3, [r3, #12]
2000dc24:	f003 0380 	and.w	r3, r3, #128	; 0x80
2000dc28:	2b80      	cmp	r3, #128	; 0x80
2000dc2a:	d104      	bne.n	2000dc36 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
2000dc2c:	f000 f80a 	bl	2000dc44 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
2000dc30:	4b03      	ldr	r3, [pc, #12]	; (2000dc40 <HAL_RCC_NMI_IRQHandler+0x24>)
2000dc32:	2280      	movs	r2, #128	; 0x80
2000dc34:	701a      	strb	r2, [r3, #0]
  }
}
2000dc36:	bf00      	nop
2000dc38:	bd80      	pop	{r7, pc}
2000dc3a:	bf00      	nop
2000dc3c:	40023800 	.word	0x40023800
2000dc40:	4002380e 	.word	0x4002380e

2000dc44 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
2000dc44:	b480      	push	{r7}
2000dc46:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
2000dc48:	bf00      	nop
2000dc4a:	46bd      	mov	sp, r7
2000dc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
2000dc50:	4770      	bx	lr
	...

2000dc54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
2000dc54:	b580      	push	{r7, lr}
2000dc56:	b088      	sub	sp, #32
2000dc58:	af00      	add	r7, sp, #0
2000dc5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
2000dc5c:	2300      	movs	r3, #0
2000dc5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
2000dc60:	2300      	movs	r3, #0
2000dc62:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
2000dc64:	2300      	movs	r3, #0
2000dc66:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
2000dc68:	2300      	movs	r3, #0
2000dc6a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
2000dc6c:	2300      	movs	r3, #0
2000dc6e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
2000dc70:	687b      	ldr	r3, [r7, #4]
2000dc72:	681b      	ldr	r3, [r3, #0]
2000dc74:	f003 0301 	and.w	r3, r3, #1
2000dc78:	2b00      	cmp	r3, #0
2000dc7a:	d012      	beq.n	2000dca2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
2000dc7c:	4b69      	ldr	r3, [pc, #420]	; (2000de24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000dc7e:	689b      	ldr	r3, [r3, #8]
2000dc80:	4a68      	ldr	r2, [pc, #416]	; (2000de24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000dc82:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
2000dc86:	6093      	str	r3, [r2, #8]
2000dc88:	4b66      	ldr	r3, [pc, #408]	; (2000de24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000dc8a:	689a      	ldr	r2, [r3, #8]
2000dc8c:	687b      	ldr	r3, [r7, #4]
2000dc8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000dc90:	4964      	ldr	r1, [pc, #400]	; (2000de24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000dc92:	4313      	orrs	r3, r2
2000dc94:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
2000dc96:	687b      	ldr	r3, [r7, #4]
2000dc98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000dc9a:	2b00      	cmp	r3, #0
2000dc9c:	d101      	bne.n	2000dca2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
2000dc9e:	2301      	movs	r3, #1
2000dca0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
2000dca2:	687b      	ldr	r3, [r7, #4]
2000dca4:	681b      	ldr	r3, [r3, #0]
2000dca6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
2000dcaa:	2b00      	cmp	r3, #0
2000dcac:	d017      	beq.n	2000dcde <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
2000dcae:	4b5d      	ldr	r3, [pc, #372]	; (2000de24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000dcb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2000dcb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
2000dcb8:	687b      	ldr	r3, [r7, #4]
2000dcba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000dcbc:	4959      	ldr	r1, [pc, #356]	; (2000de24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000dcbe:	4313      	orrs	r3, r2
2000dcc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
2000dcc4:	687b      	ldr	r3, [r7, #4]
2000dcc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000dcc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
2000dccc:	d101      	bne.n	2000dcd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
2000dcce:	2301      	movs	r3, #1
2000dcd0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
2000dcd2:	687b      	ldr	r3, [r7, #4]
2000dcd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000dcd6:	2b00      	cmp	r3, #0
2000dcd8:	d101      	bne.n	2000dcde <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
2000dcda:	2301      	movs	r3, #1
2000dcdc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
2000dcde:	687b      	ldr	r3, [r7, #4]
2000dce0:	681b      	ldr	r3, [r3, #0]
2000dce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
2000dce6:	2b00      	cmp	r3, #0
2000dce8:	d017      	beq.n	2000dd1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
2000dcea:	4b4e      	ldr	r3, [pc, #312]	; (2000de24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000dcec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2000dcf0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
2000dcf4:	687b      	ldr	r3, [r7, #4]
2000dcf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000dcf8:	494a      	ldr	r1, [pc, #296]	; (2000de24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000dcfa:	4313      	orrs	r3, r2
2000dcfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
2000dd00:	687b      	ldr	r3, [r7, #4]
2000dd02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000dd04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2000dd08:	d101      	bne.n	2000dd0e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
2000dd0a:	2301      	movs	r3, #1
2000dd0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
2000dd0e:	687b      	ldr	r3, [r7, #4]
2000dd10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000dd12:	2b00      	cmp	r3, #0
2000dd14:	d101      	bne.n	2000dd1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
2000dd16:	2301      	movs	r3, #1
2000dd18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
2000dd1a:	687b      	ldr	r3, [r7, #4]
2000dd1c:	681b      	ldr	r3, [r3, #0]
2000dd1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2000dd22:	2b00      	cmp	r3, #0
2000dd24:	d001      	beq.n	2000dd2a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
2000dd26:	2301      	movs	r3, #1
2000dd28:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
2000dd2a:	687b      	ldr	r3, [r7, #4]
2000dd2c:	681b      	ldr	r3, [r3, #0]
2000dd2e:	f003 0320 	and.w	r3, r3, #32
2000dd32:	2b00      	cmp	r3, #0
2000dd34:	f000 808b 	beq.w	2000de4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
2000dd38:	4b3a      	ldr	r3, [pc, #232]	; (2000de24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000dd3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000dd3c:	4a39      	ldr	r2, [pc, #228]	; (2000de24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000dd3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000dd42:	6413      	str	r3, [r2, #64]	; 0x40
2000dd44:	4b37      	ldr	r3, [pc, #220]	; (2000de24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000dd46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000dd48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000dd4c:	60bb      	str	r3, [r7, #8]
2000dd4e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
2000dd50:	4b35      	ldr	r3, [pc, #212]	; (2000de28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
2000dd52:	681b      	ldr	r3, [r3, #0]
2000dd54:	4a34      	ldr	r2, [pc, #208]	; (2000de28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
2000dd56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2000dd5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2000dd5c:	f7f3 fffc 	bl	20001d58 <HAL_GetTick>
2000dd60:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
2000dd62:	e008      	b.n	2000dd76 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
2000dd64:	f7f3 fff8 	bl	20001d58 <HAL_GetTick>
2000dd68:	4602      	mov	r2, r0
2000dd6a:	697b      	ldr	r3, [r7, #20]
2000dd6c:	1ad3      	subs	r3, r2, r3
2000dd6e:	2b64      	cmp	r3, #100	; 0x64
2000dd70:	d901      	bls.n	2000dd76 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
2000dd72:	2303      	movs	r3, #3
2000dd74:	e38f      	b.n	2000e496 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
2000dd76:	4b2c      	ldr	r3, [pc, #176]	; (2000de28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
2000dd78:	681b      	ldr	r3, [r3, #0]
2000dd7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000dd7e:	2b00      	cmp	r3, #0
2000dd80:	d0f0      	beq.n	2000dd64 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
2000dd82:	4b28      	ldr	r3, [pc, #160]	; (2000de24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000dd84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000dd86:	f403 7340 	and.w	r3, r3, #768	; 0x300
2000dd8a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
2000dd8c:	693b      	ldr	r3, [r7, #16]
2000dd8e:	2b00      	cmp	r3, #0
2000dd90:	d035      	beq.n	2000ddfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
2000dd92:	687b      	ldr	r3, [r7, #4]
2000dd94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000dd96:	f403 7340 	and.w	r3, r3, #768	; 0x300
2000dd9a:	693a      	ldr	r2, [r7, #16]
2000dd9c:	429a      	cmp	r2, r3
2000dd9e:	d02e      	beq.n	2000ddfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
2000dda0:	4b20      	ldr	r3, [pc, #128]	; (2000de24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000dda2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000dda4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
2000dda8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
2000ddaa:	4b1e      	ldr	r3, [pc, #120]	; (2000de24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000ddac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000ddae:	4a1d      	ldr	r2, [pc, #116]	; (2000de24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000ddb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000ddb4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
2000ddb6:	4b1b      	ldr	r3, [pc, #108]	; (2000de24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000ddb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000ddba:	4a1a      	ldr	r2, [pc, #104]	; (2000de24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000ddbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2000ddc0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
2000ddc2:	4a18      	ldr	r2, [pc, #96]	; (2000de24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000ddc4:	693b      	ldr	r3, [r7, #16]
2000ddc6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
2000ddc8:	4b16      	ldr	r3, [pc, #88]	; (2000de24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000ddca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000ddcc:	f003 0301 	and.w	r3, r3, #1
2000ddd0:	2b01      	cmp	r3, #1
2000ddd2:	d114      	bne.n	2000ddfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2000ddd4:	f7f3 ffc0 	bl	20001d58 <HAL_GetTick>
2000ddd8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2000ddda:	e00a      	b.n	2000ddf2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
2000dddc:	f7f3 ffbc 	bl	20001d58 <HAL_GetTick>
2000dde0:	4602      	mov	r2, r0
2000dde2:	697b      	ldr	r3, [r7, #20]
2000dde4:	1ad3      	subs	r3, r2, r3
2000dde6:	f241 3288 	movw	r2, #5000	; 0x1388
2000ddea:	4293      	cmp	r3, r2
2000ddec:	d901      	bls.n	2000ddf2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
2000ddee:	2303      	movs	r3, #3
2000ddf0:	e351      	b.n	2000e496 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2000ddf2:	4b0c      	ldr	r3, [pc, #48]	; (2000de24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000ddf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000ddf6:	f003 0302 	and.w	r3, r3, #2
2000ddfa:	2b00      	cmp	r3, #0
2000ddfc:	d0ee      	beq.n	2000dddc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
2000ddfe:	687b      	ldr	r3, [r7, #4]
2000de00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000de02:	f403 7340 	and.w	r3, r3, #768	; 0x300
2000de06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
2000de0a:	d111      	bne.n	2000de30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
2000de0c:	4b05      	ldr	r3, [pc, #20]	; (2000de24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000de0e:	689b      	ldr	r3, [r3, #8]
2000de10:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
2000de14:	687b      	ldr	r3, [r7, #4]
2000de16:	6b19      	ldr	r1, [r3, #48]	; 0x30
2000de18:	4b04      	ldr	r3, [pc, #16]	; (2000de2c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
2000de1a:	400b      	ands	r3, r1
2000de1c:	4901      	ldr	r1, [pc, #4]	; (2000de24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000de1e:	4313      	orrs	r3, r2
2000de20:	608b      	str	r3, [r1, #8]
2000de22:	e00b      	b.n	2000de3c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
2000de24:	40023800 	.word	0x40023800
2000de28:	40007000 	.word	0x40007000
2000de2c:	0ffffcff 	.word	0x0ffffcff
2000de30:	4bb3      	ldr	r3, [pc, #716]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000de32:	689b      	ldr	r3, [r3, #8]
2000de34:	4ab2      	ldr	r2, [pc, #712]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000de36:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
2000de3a:	6093      	str	r3, [r2, #8]
2000de3c:	4bb0      	ldr	r3, [pc, #704]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000de3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
2000de40:	687b      	ldr	r3, [r7, #4]
2000de42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000de44:	f3c3 030b 	ubfx	r3, r3, #0, #12
2000de48:	49ad      	ldr	r1, [pc, #692]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000de4a:	4313      	orrs	r3, r2
2000de4c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
2000de4e:	687b      	ldr	r3, [r7, #4]
2000de50:	681b      	ldr	r3, [r3, #0]
2000de52:	f003 0310 	and.w	r3, r3, #16
2000de56:	2b00      	cmp	r3, #0
2000de58:	d010      	beq.n	2000de7c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
2000de5a:	4ba9      	ldr	r3, [pc, #676]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000de5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2000de60:	4aa7      	ldr	r2, [pc, #668]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000de62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
2000de66:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
2000de6a:	4ba5      	ldr	r3, [pc, #660]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000de6c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
2000de70:	687b      	ldr	r3, [r7, #4]
2000de72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000de74:	49a2      	ldr	r1, [pc, #648]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000de76:	4313      	orrs	r3, r2
2000de78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
2000de7c:	687b      	ldr	r3, [r7, #4]
2000de7e:	681b      	ldr	r3, [r3, #0]
2000de80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2000de84:	2b00      	cmp	r3, #0
2000de86:	d00a      	beq.n	2000de9e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
2000de88:	4b9d      	ldr	r3, [pc, #628]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000de8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2000de8e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
2000de92:	687b      	ldr	r3, [r7, #4]
2000de94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2000de96:	499a      	ldr	r1, [pc, #616]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000de98:	4313      	orrs	r3, r2
2000de9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
2000de9e:	687b      	ldr	r3, [r7, #4]
2000dea0:	681b      	ldr	r3, [r3, #0]
2000dea2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2000dea6:	2b00      	cmp	r3, #0
2000dea8:	d00a      	beq.n	2000dec0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
2000deaa:	4b95      	ldr	r3, [pc, #596]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000deac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2000deb0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
2000deb4:	687b      	ldr	r3, [r7, #4]
2000deb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000deb8:	4991      	ldr	r1, [pc, #580]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000deba:	4313      	orrs	r3, r2
2000debc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
2000dec0:	687b      	ldr	r3, [r7, #4]
2000dec2:	681b      	ldr	r3, [r3, #0]
2000dec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2000dec8:	2b00      	cmp	r3, #0
2000deca:	d00a      	beq.n	2000dee2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
2000decc:	4b8c      	ldr	r3, [pc, #560]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000dece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2000ded2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
2000ded6:	687b      	ldr	r3, [r7, #4]
2000ded8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
2000deda:	4989      	ldr	r1, [pc, #548]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000dedc:	4313      	orrs	r3, r2
2000dede:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
2000dee2:	687b      	ldr	r3, [r7, #4]
2000dee4:	681b      	ldr	r3, [r3, #0]
2000dee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000deea:	2b00      	cmp	r3, #0
2000deec:	d00a      	beq.n	2000df04 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
2000deee:	4b84      	ldr	r3, [pc, #528]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000def0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2000def4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
2000def8:	687b      	ldr	r3, [r7, #4]
2000defa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000defc:	4980      	ldr	r1, [pc, #512]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000defe:	4313      	orrs	r3, r2
2000df00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
2000df04:	687b      	ldr	r3, [r7, #4]
2000df06:	681b      	ldr	r3, [r3, #0]
2000df08:	f003 0340 	and.w	r3, r3, #64	; 0x40
2000df0c:	2b00      	cmp	r3, #0
2000df0e:	d00a      	beq.n	2000df26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
2000df10:	4b7b      	ldr	r3, [pc, #492]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000df12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2000df16:	f023 0203 	bic.w	r2, r3, #3
2000df1a:	687b      	ldr	r3, [r7, #4]
2000df1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000df1e:	4978      	ldr	r1, [pc, #480]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000df20:	4313      	orrs	r3, r2
2000df22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
2000df26:	687b      	ldr	r3, [r7, #4]
2000df28:	681b      	ldr	r3, [r3, #0]
2000df2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
2000df2e:	2b00      	cmp	r3, #0
2000df30:	d00a      	beq.n	2000df48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
2000df32:	4b73      	ldr	r3, [pc, #460]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000df34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2000df38:	f023 020c 	bic.w	r2, r3, #12
2000df3c:	687b      	ldr	r3, [r7, #4]
2000df3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000df40:	496f      	ldr	r1, [pc, #444]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000df42:	4313      	orrs	r3, r2
2000df44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
2000df48:	687b      	ldr	r3, [r7, #4]
2000df4a:	681b      	ldr	r3, [r3, #0]
2000df4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000df50:	2b00      	cmp	r3, #0
2000df52:	d00a      	beq.n	2000df6a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
2000df54:	4b6a      	ldr	r3, [pc, #424]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000df56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2000df5a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
2000df5e:	687b      	ldr	r3, [r7, #4]
2000df60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2000df62:	4967      	ldr	r1, [pc, #412]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000df64:	4313      	orrs	r3, r2
2000df66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
2000df6a:	687b      	ldr	r3, [r7, #4]
2000df6c:	681b      	ldr	r3, [r3, #0]
2000df6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
2000df72:	2b00      	cmp	r3, #0
2000df74:	d00a      	beq.n	2000df8c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
2000df76:	4b62      	ldr	r3, [pc, #392]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000df78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2000df7c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
2000df80:	687b      	ldr	r3, [r7, #4]
2000df82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2000df84:	495e      	ldr	r1, [pc, #376]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000df86:	4313      	orrs	r3, r2
2000df88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
2000df8c:	687b      	ldr	r3, [r7, #4]
2000df8e:	681b      	ldr	r3, [r3, #0]
2000df90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
2000df94:	2b00      	cmp	r3, #0
2000df96:	d00a      	beq.n	2000dfae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
2000df98:	4b59      	ldr	r3, [pc, #356]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000df9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2000df9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
2000dfa2:	687b      	ldr	r3, [r7, #4]
2000dfa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000dfa6:	4956      	ldr	r1, [pc, #344]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000dfa8:	4313      	orrs	r3, r2
2000dfaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
2000dfae:	687b      	ldr	r3, [r7, #4]
2000dfb0:	681b      	ldr	r3, [r3, #0]
2000dfb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
2000dfb6:	2b00      	cmp	r3, #0
2000dfb8:	d00a      	beq.n	2000dfd0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
2000dfba:	4b51      	ldr	r3, [pc, #324]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000dfbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2000dfc0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
2000dfc4:	687b      	ldr	r3, [r7, #4]
2000dfc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2000dfc8:	494d      	ldr	r1, [pc, #308]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000dfca:	4313      	orrs	r3, r2
2000dfcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
2000dfd0:	687b      	ldr	r3, [r7, #4]
2000dfd2:	681b      	ldr	r3, [r3, #0]
2000dfd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
2000dfd8:	2b00      	cmp	r3, #0
2000dfda:	d00a      	beq.n	2000dff2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
2000dfdc:	4b48      	ldr	r3, [pc, #288]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000dfde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2000dfe2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
2000dfe6:	687b      	ldr	r3, [r7, #4]
2000dfe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2000dfea:	4945      	ldr	r1, [pc, #276]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000dfec:	4313      	orrs	r3, r2
2000dfee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
2000dff2:	687b      	ldr	r3, [r7, #4]
2000dff4:	681b      	ldr	r3, [r3, #0]
2000dff6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
2000dffa:	2b00      	cmp	r3, #0
2000dffc:	d00a      	beq.n	2000e014 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
2000dffe:	4b40      	ldr	r3, [pc, #256]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000e000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2000e004:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
2000e008:	687b      	ldr	r3, [r7, #4]
2000e00a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2000e00c:	493c      	ldr	r1, [pc, #240]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000e00e:	4313      	orrs	r3, r2
2000e010:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
2000e014:	687b      	ldr	r3, [r7, #4]
2000e016:	681b      	ldr	r3, [r3, #0]
2000e018:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000e01c:	2b00      	cmp	r3, #0
2000e01e:	d00a      	beq.n	2000e036 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
2000e020:	4b37      	ldr	r3, [pc, #220]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000e022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2000e026:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
2000e02a:	687b      	ldr	r3, [r7, #4]
2000e02c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
2000e02e:	4934      	ldr	r1, [pc, #208]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000e030:	4313      	orrs	r3, r2
2000e032:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
2000e036:	687b      	ldr	r3, [r7, #4]
2000e038:	681b      	ldr	r3, [r3, #0]
2000e03a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
2000e03e:	2b00      	cmp	r3, #0
2000e040:	d011      	beq.n	2000e066 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
2000e042:	4b2f      	ldr	r3, [pc, #188]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000e044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2000e048:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
2000e04c:	687b      	ldr	r3, [r7, #4]
2000e04e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
2000e050:	492b      	ldr	r1, [pc, #172]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000e052:	4313      	orrs	r3, r2
2000e054:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
2000e058:	687b      	ldr	r3, [r7, #4]
2000e05a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
2000e05c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2000e060:	d101      	bne.n	2000e066 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
2000e062:	2301      	movs	r3, #1
2000e064:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
2000e066:	687b      	ldr	r3, [r7, #4]
2000e068:	681b      	ldr	r3, [r3, #0]
2000e06a:	f003 0308 	and.w	r3, r3, #8
2000e06e:	2b00      	cmp	r3, #0
2000e070:	d001      	beq.n	2000e076 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
2000e072:	2301      	movs	r3, #1
2000e074:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
2000e076:	687b      	ldr	r3, [r7, #4]
2000e078:	681b      	ldr	r3, [r3, #0]
2000e07a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
2000e07e:	2b00      	cmp	r3, #0
2000e080:	d00a      	beq.n	2000e098 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
2000e082:	4b1f      	ldr	r3, [pc, #124]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000e084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2000e088:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
2000e08c:	687b      	ldr	r3, [r7, #4]
2000e08e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000e090:	491b      	ldr	r1, [pc, #108]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000e092:	4313      	orrs	r3, r2
2000e094:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
2000e098:	687b      	ldr	r3, [r7, #4]
2000e09a:	681b      	ldr	r3, [r3, #0]
2000e09c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
2000e0a0:	2b00      	cmp	r3, #0
2000e0a2:	d00b      	beq.n	2000e0bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
2000e0a4:	4b16      	ldr	r3, [pc, #88]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000e0a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2000e0aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
2000e0ae:	687b      	ldr	r3, [r7, #4]
2000e0b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2000e0b4:	4912      	ldr	r1, [pc, #72]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000e0b6:	4313      	orrs	r3, r2
2000e0b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
2000e0bc:	687b      	ldr	r3, [r7, #4]
2000e0be:	681b      	ldr	r3, [r3, #0]
2000e0c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
2000e0c4:	2b00      	cmp	r3, #0
2000e0c6:	d00b      	beq.n	2000e0e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
2000e0c8:	4b0d      	ldr	r3, [pc, #52]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000e0ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2000e0ce:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
2000e0d2:	687b      	ldr	r3, [r7, #4]
2000e0d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2000e0d8:	4909      	ldr	r1, [pc, #36]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000e0da:	4313      	orrs	r3, r2
2000e0dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
2000e0e0:	687b      	ldr	r3, [r7, #4]
2000e0e2:	681b      	ldr	r3, [r3, #0]
2000e0e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2000e0e8:	2b00      	cmp	r3, #0
2000e0ea:	d00f      	beq.n	2000e10c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
2000e0ec:	4b04      	ldr	r3, [pc, #16]	; (2000e100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
2000e0ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2000e0f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
2000e0f6:	687b      	ldr	r3, [r7, #4]
2000e0f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2000e0fc:	e002      	b.n	2000e104 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
2000e0fe:	bf00      	nop
2000e100:	40023800 	.word	0x40023800
2000e104:	4986      	ldr	r1, [pc, #536]	; (2000e320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
2000e106:	4313      	orrs	r3, r2
2000e108:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
2000e10c:	687b      	ldr	r3, [r7, #4]
2000e10e:	681b      	ldr	r3, [r3, #0]
2000e110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000e114:	2b00      	cmp	r3, #0
2000e116:	d00b      	beq.n	2000e130 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
2000e118:	4b81      	ldr	r3, [pc, #516]	; (2000e320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
2000e11a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2000e11e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
2000e122:	687b      	ldr	r3, [r7, #4]
2000e124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2000e128:	497d      	ldr	r1, [pc, #500]	; (2000e320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
2000e12a:	4313      	orrs	r3, r2
2000e12c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
2000e130:	69fb      	ldr	r3, [r7, #28]
2000e132:	2b01      	cmp	r3, #1
2000e134:	d006      	beq.n	2000e144 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
2000e136:	687b      	ldr	r3, [r7, #4]
2000e138:	681b      	ldr	r3, [r3, #0]
2000e13a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000e13e:	2b00      	cmp	r3, #0
2000e140:	f000 80d6 	beq.w	2000e2f0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
2000e144:	4b76      	ldr	r3, [pc, #472]	; (2000e320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
2000e146:	681b      	ldr	r3, [r3, #0]
2000e148:	4a75      	ldr	r2, [pc, #468]	; (2000e320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
2000e14a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
2000e14e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2000e150:	f7f3 fe02 	bl	20001d58 <HAL_GetTick>
2000e154:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
2000e156:	e008      	b.n	2000e16a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
2000e158:	f7f3 fdfe 	bl	20001d58 <HAL_GetTick>
2000e15c:	4602      	mov	r2, r0
2000e15e:	697b      	ldr	r3, [r7, #20]
2000e160:	1ad3      	subs	r3, r2, r3
2000e162:	2b64      	cmp	r3, #100	; 0x64
2000e164:	d901      	bls.n	2000e16a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
2000e166:	2303      	movs	r3, #3
2000e168:	e195      	b.n	2000e496 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
2000e16a:	4b6d      	ldr	r3, [pc, #436]	; (2000e320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
2000e16c:	681b      	ldr	r3, [r3, #0]
2000e16e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2000e172:	2b00      	cmp	r3, #0
2000e174:	d1f0      	bne.n	2000e158 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
2000e176:	687b      	ldr	r3, [r7, #4]
2000e178:	681b      	ldr	r3, [r3, #0]
2000e17a:	f003 0301 	and.w	r3, r3, #1
2000e17e:	2b00      	cmp	r3, #0
2000e180:	d021      	beq.n	2000e1c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
2000e182:	687b      	ldr	r3, [r7, #4]
2000e184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000e186:	2b00      	cmp	r3, #0
2000e188:	d11d      	bne.n	2000e1c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
2000e18a:	4b65      	ldr	r3, [pc, #404]	; (2000e320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
2000e18c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2000e190:	0c1b      	lsrs	r3, r3, #16
2000e192:	f003 0303 	and.w	r3, r3, #3
2000e196:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
2000e198:	4b61      	ldr	r3, [pc, #388]	; (2000e320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
2000e19a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2000e19e:	0e1b      	lsrs	r3, r3, #24
2000e1a0:	f003 030f 	and.w	r3, r3, #15
2000e1a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
2000e1a6:	687b      	ldr	r3, [r7, #4]
2000e1a8:	685b      	ldr	r3, [r3, #4]
2000e1aa:	019a      	lsls	r2, r3, #6
2000e1ac:	693b      	ldr	r3, [r7, #16]
2000e1ae:	041b      	lsls	r3, r3, #16
2000e1b0:	431a      	orrs	r2, r3
2000e1b2:	68fb      	ldr	r3, [r7, #12]
2000e1b4:	061b      	lsls	r3, r3, #24
2000e1b6:	431a      	orrs	r2, r3
2000e1b8:	687b      	ldr	r3, [r7, #4]
2000e1ba:	689b      	ldr	r3, [r3, #8]
2000e1bc:	071b      	lsls	r3, r3, #28
2000e1be:	4958      	ldr	r1, [pc, #352]	; (2000e320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
2000e1c0:	4313      	orrs	r3, r2
2000e1c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
2000e1c6:	687b      	ldr	r3, [r7, #4]
2000e1c8:	681b      	ldr	r3, [r3, #0]
2000e1ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
2000e1ce:	2b00      	cmp	r3, #0
2000e1d0:	d004      	beq.n	2000e1dc <HAL_RCCEx_PeriphCLKConfig+0x588>
2000e1d2:	687b      	ldr	r3, [r7, #4]
2000e1d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000e1d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
2000e1da:	d00a      	beq.n	2000e1f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
2000e1dc:	687b      	ldr	r3, [r7, #4]
2000e1de:	681b      	ldr	r3, [r3, #0]
2000e1e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
2000e1e4:	2b00      	cmp	r3, #0
2000e1e6:	d02e      	beq.n	2000e246 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
2000e1e8:	687b      	ldr	r3, [r7, #4]
2000e1ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000e1ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2000e1f0:	d129      	bne.n	2000e246 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
2000e1f2:	4b4b      	ldr	r3, [pc, #300]	; (2000e320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
2000e1f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2000e1f8:	0c1b      	lsrs	r3, r3, #16
2000e1fa:	f003 0303 	and.w	r3, r3, #3
2000e1fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
2000e200:	4b47      	ldr	r3, [pc, #284]	; (2000e320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
2000e202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2000e206:	0f1b      	lsrs	r3, r3, #28
2000e208:	f003 0307 	and.w	r3, r3, #7
2000e20c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
2000e20e:	687b      	ldr	r3, [r7, #4]
2000e210:	685b      	ldr	r3, [r3, #4]
2000e212:	019a      	lsls	r2, r3, #6
2000e214:	693b      	ldr	r3, [r7, #16]
2000e216:	041b      	lsls	r3, r3, #16
2000e218:	431a      	orrs	r2, r3
2000e21a:	687b      	ldr	r3, [r7, #4]
2000e21c:	68db      	ldr	r3, [r3, #12]
2000e21e:	061b      	lsls	r3, r3, #24
2000e220:	431a      	orrs	r2, r3
2000e222:	68fb      	ldr	r3, [r7, #12]
2000e224:	071b      	lsls	r3, r3, #28
2000e226:	493e      	ldr	r1, [pc, #248]	; (2000e320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
2000e228:	4313      	orrs	r3, r2
2000e22a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
2000e22e:	4b3c      	ldr	r3, [pc, #240]	; (2000e320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
2000e230:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2000e234:	f023 021f 	bic.w	r2, r3, #31
2000e238:	687b      	ldr	r3, [r7, #4]
2000e23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000e23c:	3b01      	subs	r3, #1
2000e23e:	4938      	ldr	r1, [pc, #224]	; (2000e320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
2000e240:	4313      	orrs	r3, r2
2000e242:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
2000e246:	687b      	ldr	r3, [r7, #4]
2000e248:	681b      	ldr	r3, [r3, #0]
2000e24a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2000e24e:	2b00      	cmp	r3, #0
2000e250:	d01d      	beq.n	2000e28e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
2000e252:	4b33      	ldr	r3, [pc, #204]	; (2000e320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
2000e254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2000e258:	0e1b      	lsrs	r3, r3, #24
2000e25a:	f003 030f 	and.w	r3, r3, #15
2000e25e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
2000e260:	4b2f      	ldr	r3, [pc, #188]	; (2000e320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
2000e262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2000e266:	0f1b      	lsrs	r3, r3, #28
2000e268:	f003 0307 	and.w	r3, r3, #7
2000e26c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
2000e26e:	687b      	ldr	r3, [r7, #4]
2000e270:	685b      	ldr	r3, [r3, #4]
2000e272:	019a      	lsls	r2, r3, #6
2000e274:	687b      	ldr	r3, [r7, #4]
2000e276:	691b      	ldr	r3, [r3, #16]
2000e278:	041b      	lsls	r3, r3, #16
2000e27a:	431a      	orrs	r2, r3
2000e27c:	693b      	ldr	r3, [r7, #16]
2000e27e:	061b      	lsls	r3, r3, #24
2000e280:	431a      	orrs	r2, r3
2000e282:	68fb      	ldr	r3, [r7, #12]
2000e284:	071b      	lsls	r3, r3, #28
2000e286:	4926      	ldr	r1, [pc, #152]	; (2000e320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
2000e288:	4313      	orrs	r3, r2
2000e28a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
2000e28e:	687b      	ldr	r3, [r7, #4]
2000e290:	681b      	ldr	r3, [r3, #0]
2000e292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000e296:	2b00      	cmp	r3, #0
2000e298:	d011      	beq.n	2000e2be <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
2000e29a:	687b      	ldr	r3, [r7, #4]
2000e29c:	685b      	ldr	r3, [r3, #4]
2000e29e:	019a      	lsls	r2, r3, #6
2000e2a0:	687b      	ldr	r3, [r7, #4]
2000e2a2:	691b      	ldr	r3, [r3, #16]
2000e2a4:	041b      	lsls	r3, r3, #16
2000e2a6:	431a      	orrs	r2, r3
2000e2a8:	687b      	ldr	r3, [r7, #4]
2000e2aa:	68db      	ldr	r3, [r3, #12]
2000e2ac:	061b      	lsls	r3, r3, #24
2000e2ae:	431a      	orrs	r2, r3
2000e2b0:	687b      	ldr	r3, [r7, #4]
2000e2b2:	689b      	ldr	r3, [r3, #8]
2000e2b4:	071b      	lsls	r3, r3, #28
2000e2b6:	491a      	ldr	r1, [pc, #104]	; (2000e320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
2000e2b8:	4313      	orrs	r3, r2
2000e2ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
2000e2be:	4b18      	ldr	r3, [pc, #96]	; (2000e320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
2000e2c0:	681b      	ldr	r3, [r3, #0]
2000e2c2:	4a17      	ldr	r2, [pc, #92]	; (2000e320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
2000e2c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
2000e2c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2000e2ca:	f7f3 fd45 	bl	20001d58 <HAL_GetTick>
2000e2ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
2000e2d0:	e008      	b.n	2000e2e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
2000e2d2:	f7f3 fd41 	bl	20001d58 <HAL_GetTick>
2000e2d6:	4602      	mov	r2, r0
2000e2d8:	697b      	ldr	r3, [r7, #20]
2000e2da:	1ad3      	subs	r3, r2, r3
2000e2dc:	2b64      	cmp	r3, #100	; 0x64
2000e2de:	d901      	bls.n	2000e2e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
2000e2e0:	2303      	movs	r3, #3
2000e2e2:	e0d8      	b.n	2000e496 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
2000e2e4:	4b0e      	ldr	r3, [pc, #56]	; (2000e320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
2000e2e6:	681b      	ldr	r3, [r3, #0]
2000e2e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2000e2ec:	2b00      	cmp	r3, #0
2000e2ee:	d0f0      	beq.n	2000e2d2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
2000e2f0:	69bb      	ldr	r3, [r7, #24]
2000e2f2:	2b01      	cmp	r3, #1
2000e2f4:	f040 80ce 	bne.w	2000e494 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
2000e2f8:	4b09      	ldr	r3, [pc, #36]	; (2000e320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
2000e2fa:	681b      	ldr	r3, [r3, #0]
2000e2fc:	4a08      	ldr	r2, [pc, #32]	; (2000e320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
2000e2fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
2000e302:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2000e304:	f7f3 fd28 	bl	20001d58 <HAL_GetTick>
2000e308:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
2000e30a:	e00b      	b.n	2000e324 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
2000e30c:	f7f3 fd24 	bl	20001d58 <HAL_GetTick>
2000e310:	4602      	mov	r2, r0
2000e312:	697b      	ldr	r3, [r7, #20]
2000e314:	1ad3      	subs	r3, r2, r3
2000e316:	2b64      	cmp	r3, #100	; 0x64
2000e318:	d904      	bls.n	2000e324 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
2000e31a:	2303      	movs	r3, #3
2000e31c:	e0bb      	b.n	2000e496 <HAL_RCCEx_PeriphCLKConfig+0x842>
2000e31e:	bf00      	nop
2000e320:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
2000e324:	4b5e      	ldr	r3, [pc, #376]	; (2000e4a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
2000e326:	681b      	ldr	r3, [r3, #0]
2000e328:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2000e32c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2000e330:	d0ec      	beq.n	2000e30c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
2000e332:	687b      	ldr	r3, [r7, #4]
2000e334:	681b      	ldr	r3, [r3, #0]
2000e336:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
2000e33a:	2b00      	cmp	r3, #0
2000e33c:	d003      	beq.n	2000e346 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
2000e33e:	687b      	ldr	r3, [r7, #4]
2000e340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000e342:	2b00      	cmp	r3, #0
2000e344:	d009      	beq.n	2000e35a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
2000e346:	687b      	ldr	r3, [r7, #4]
2000e348:	681b      	ldr	r3, [r3, #0]
2000e34a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
2000e34e:	2b00      	cmp	r3, #0
2000e350:	d02e      	beq.n	2000e3b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
2000e352:	687b      	ldr	r3, [r7, #4]
2000e354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000e356:	2b00      	cmp	r3, #0
2000e358:	d12a      	bne.n	2000e3b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
2000e35a:	4b51      	ldr	r3, [pc, #324]	; (2000e4a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
2000e35c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2000e360:	0c1b      	lsrs	r3, r3, #16
2000e362:	f003 0303 	and.w	r3, r3, #3
2000e366:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
2000e368:	4b4d      	ldr	r3, [pc, #308]	; (2000e4a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
2000e36a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2000e36e:	0f1b      	lsrs	r3, r3, #28
2000e370:	f003 0307 	and.w	r3, r3, #7
2000e374:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
2000e376:	687b      	ldr	r3, [r7, #4]
2000e378:	695b      	ldr	r3, [r3, #20]
2000e37a:	019a      	lsls	r2, r3, #6
2000e37c:	693b      	ldr	r3, [r7, #16]
2000e37e:	041b      	lsls	r3, r3, #16
2000e380:	431a      	orrs	r2, r3
2000e382:	687b      	ldr	r3, [r7, #4]
2000e384:	699b      	ldr	r3, [r3, #24]
2000e386:	061b      	lsls	r3, r3, #24
2000e388:	431a      	orrs	r2, r3
2000e38a:	68fb      	ldr	r3, [r7, #12]
2000e38c:	071b      	lsls	r3, r3, #28
2000e38e:	4944      	ldr	r1, [pc, #272]	; (2000e4a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
2000e390:	4313      	orrs	r3, r2
2000e392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
2000e396:	4b42      	ldr	r3, [pc, #264]	; (2000e4a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
2000e398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2000e39c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
2000e3a0:	687b      	ldr	r3, [r7, #4]
2000e3a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2000e3a4:	3b01      	subs	r3, #1
2000e3a6:	021b      	lsls	r3, r3, #8
2000e3a8:	493d      	ldr	r1, [pc, #244]	; (2000e4a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
2000e3aa:	4313      	orrs	r3, r2
2000e3ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
2000e3b0:	687b      	ldr	r3, [r7, #4]
2000e3b2:	681b      	ldr	r3, [r3, #0]
2000e3b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
2000e3b8:	2b00      	cmp	r3, #0
2000e3ba:	d022      	beq.n	2000e402 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
2000e3bc:	687b      	ldr	r3, [r7, #4]
2000e3be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
2000e3c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2000e3c4:	d11d      	bne.n	2000e402 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
2000e3c6:	4b36      	ldr	r3, [pc, #216]	; (2000e4a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
2000e3c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2000e3cc:	0e1b      	lsrs	r3, r3, #24
2000e3ce:	f003 030f 	and.w	r3, r3, #15
2000e3d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
2000e3d4:	4b32      	ldr	r3, [pc, #200]	; (2000e4a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
2000e3d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2000e3da:	0f1b      	lsrs	r3, r3, #28
2000e3dc:	f003 0307 	and.w	r3, r3, #7
2000e3e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
2000e3e2:	687b      	ldr	r3, [r7, #4]
2000e3e4:	695b      	ldr	r3, [r3, #20]
2000e3e6:	019a      	lsls	r2, r3, #6
2000e3e8:	687b      	ldr	r3, [r7, #4]
2000e3ea:	6a1b      	ldr	r3, [r3, #32]
2000e3ec:	041b      	lsls	r3, r3, #16
2000e3ee:	431a      	orrs	r2, r3
2000e3f0:	693b      	ldr	r3, [r7, #16]
2000e3f2:	061b      	lsls	r3, r3, #24
2000e3f4:	431a      	orrs	r2, r3
2000e3f6:	68fb      	ldr	r3, [r7, #12]
2000e3f8:	071b      	lsls	r3, r3, #28
2000e3fa:	4929      	ldr	r1, [pc, #164]	; (2000e4a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
2000e3fc:	4313      	orrs	r3, r2
2000e3fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
2000e402:	687b      	ldr	r3, [r7, #4]
2000e404:	681b      	ldr	r3, [r3, #0]
2000e406:	f003 0308 	and.w	r3, r3, #8
2000e40a:	2b00      	cmp	r3, #0
2000e40c:	d028      	beq.n	2000e460 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
2000e40e:	4b24      	ldr	r3, [pc, #144]	; (2000e4a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
2000e410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2000e414:	0e1b      	lsrs	r3, r3, #24
2000e416:	f003 030f 	and.w	r3, r3, #15
2000e41a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
2000e41c:	4b20      	ldr	r3, [pc, #128]	; (2000e4a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
2000e41e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2000e422:	0c1b      	lsrs	r3, r3, #16
2000e424:	f003 0303 	and.w	r3, r3, #3
2000e428:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
2000e42a:	687b      	ldr	r3, [r7, #4]
2000e42c:	695b      	ldr	r3, [r3, #20]
2000e42e:	019a      	lsls	r2, r3, #6
2000e430:	68fb      	ldr	r3, [r7, #12]
2000e432:	041b      	lsls	r3, r3, #16
2000e434:	431a      	orrs	r2, r3
2000e436:	693b      	ldr	r3, [r7, #16]
2000e438:	061b      	lsls	r3, r3, #24
2000e43a:	431a      	orrs	r2, r3
2000e43c:	687b      	ldr	r3, [r7, #4]
2000e43e:	69db      	ldr	r3, [r3, #28]
2000e440:	071b      	lsls	r3, r3, #28
2000e442:	4917      	ldr	r1, [pc, #92]	; (2000e4a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
2000e444:	4313      	orrs	r3, r2
2000e446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
2000e44a:	4b15      	ldr	r3, [pc, #84]	; (2000e4a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
2000e44c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2000e450:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
2000e454:	687b      	ldr	r3, [r7, #4]
2000e456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000e458:	4911      	ldr	r1, [pc, #68]	; (2000e4a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
2000e45a:	4313      	orrs	r3, r2
2000e45c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
2000e460:	4b0f      	ldr	r3, [pc, #60]	; (2000e4a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
2000e462:	681b      	ldr	r3, [r3, #0]
2000e464:	4a0e      	ldr	r2, [pc, #56]	; (2000e4a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
2000e466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000e46a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2000e46c:	f7f3 fc74 	bl	20001d58 <HAL_GetTick>
2000e470:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
2000e472:	e008      	b.n	2000e486 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
2000e474:	f7f3 fc70 	bl	20001d58 <HAL_GetTick>
2000e478:	4602      	mov	r2, r0
2000e47a:	697b      	ldr	r3, [r7, #20]
2000e47c:	1ad3      	subs	r3, r2, r3
2000e47e:	2b64      	cmp	r3, #100	; 0x64
2000e480:	d901      	bls.n	2000e486 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
2000e482:	2303      	movs	r3, #3
2000e484:	e007      	b.n	2000e496 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
2000e486:	4b06      	ldr	r3, [pc, #24]	; (2000e4a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
2000e488:	681b      	ldr	r3, [r3, #0]
2000e48a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2000e48e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2000e492:	d1ef      	bne.n	2000e474 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
2000e494:	2300      	movs	r3, #0
}
2000e496:	4618      	mov	r0, r3
2000e498:	3720      	adds	r7, #32
2000e49a:	46bd      	mov	sp, r7
2000e49c:	bd80      	pop	{r7, pc}
2000e49e:	bf00      	nop
2000e4a0:	40023800 	.word	0x40023800

2000e4a4 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
2000e4a4:	b480      	push	{r7}
2000e4a6:	b085      	sub	sp, #20
2000e4a8:	af00      	add	r7, sp, #0
2000e4aa:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
2000e4ac:	2300      	movs	r3, #0
2000e4ae:	60fb      	str	r3, [r7, #12]

  /* Set all possible values for the extended clock type parameter------------*/
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
2000e4b0:	687b      	ldr	r3, [r7, #4]
2000e4b2:	4a8c      	ldr	r2, [pc, #560]	; (2000e6e4 <HAL_RCCEx_GetPeriphCLKConfig+0x240>)
2000e4b4:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
2000e4b6:	4b8c      	ldr	r3, [pc, #560]	; (2000e6e8 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
2000e4b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2000e4bc:	099b      	lsrs	r3, r3, #6
2000e4be:	f3c3 0208 	ubfx	r2, r3, #0, #9
2000e4c2:	687b      	ldr	r3, [r7, #4]
2000e4c4:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
2000e4c6:	4b88      	ldr	r3, [pc, #544]	; (2000e6e8 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
2000e4c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2000e4cc:	0c1b      	lsrs	r3, r3, #16
2000e4ce:	f003 0203 	and.w	r2, r3, #3
2000e4d2:	687b      	ldr	r3, [r7, #4]
2000e4d4:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
2000e4d6:	4b84      	ldr	r3, [pc, #528]	; (2000e6e8 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
2000e4d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2000e4dc:	0e1b      	lsrs	r3, r3, #24
2000e4de:	f003 020f 	and.w	r2, r3, #15
2000e4e2:	687b      	ldr	r3, [r7, #4]
2000e4e4:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
2000e4e6:	4b80      	ldr	r3, [pc, #512]	; (2000e6e8 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
2000e4e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2000e4ec:	0f1b      	lsrs	r3, r3, #28
2000e4ee:	f003 0207 	and.w	r2, r3, #7
2000e4f2:	687b      	ldr	r3, [r7, #4]
2000e4f4:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
2000e4f6:	4b7c      	ldr	r3, [pc, #496]	; (2000e6e8 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
2000e4f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2000e4fc:	099b      	lsrs	r3, r3, #6
2000e4fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
2000e502:	687b      	ldr	r3, [r7, #4]
2000e504:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
2000e506:	4b78      	ldr	r3, [pc, #480]	; (2000e6e8 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
2000e508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2000e50c:	0c1b      	lsrs	r3, r3, #16
2000e50e:	f003 0203 	and.w	r2, r3, #3
2000e512:	687b      	ldr	r3, [r7, #4]
2000e514:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
2000e516:	4b74      	ldr	r3, [pc, #464]	; (2000e6e8 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
2000e518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2000e51c:	0e1b      	lsrs	r3, r3, #24
2000e51e:	f003 020f 	and.w	r2, r3, #15
2000e522:	687b      	ldr	r3, [r7, #4]
2000e524:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
2000e526:	4b70      	ldr	r3, [pc, #448]	; (2000e6e8 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
2000e528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2000e52c:	0f1b      	lsrs	r3, r3, #28
2000e52e:	f003 0207 	and.w	r2, r3, #7
2000e532:	687b      	ldr	r3, [r7, #4]
2000e534:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
2000e536:	4b6c      	ldr	r3, [pc, #432]	; (2000e6e8 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
2000e538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2000e53c:	f003 021f 	and.w	r2, r3, #31
2000e540:	687b      	ldr	r3, [r7, #4]
2000e542:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
2000e544:	4b68      	ldr	r3, [pc, #416]	; (2000e6e8 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
2000e546:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2000e54a:	0a1b      	lsrs	r3, r3, #8
2000e54c:	f003 021f 	and.w	r2, r3, #31
2000e550:	687b      	ldr	r3, [r7, #4]
2000e552:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
2000e554:	4b64      	ldr	r3, [pc, #400]	; (2000e6e8 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
2000e556:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2000e55a:	0c1b      	lsrs	r3, r3, #16
2000e55c:	f003 0203 	and.w	r2, r3, #3
2000e560:	687b      	ldr	r3, [r7, #4]
2000e562:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
2000e564:	4b60      	ldr	r3, [pc, #384]	; (2000e6e8 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
2000e566:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2000e56a:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
2000e56e:	687b      	ldr	r3, [r7, #4]
2000e570:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
2000e572:	4b5d      	ldr	r3, [pc, #372]	; (2000e6e8 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
2000e574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2000e578:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
2000e57c:	687b      	ldr	r3, [r7, #4]
2000e57e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
2000e580:	4b59      	ldr	r3, [pc, #356]	; (2000e6e8 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
2000e582:	689b      	ldr	r3, [r3, #8]
2000e584:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
2000e588:	687b      	ldr	r3, [r7, #4]
2000e58a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
2000e58c:	4b56      	ldr	r3, [pc, #344]	; (2000e6e8 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
2000e58e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2000e592:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
2000e596:	687b      	ldr	r3, [r7, #4]
2000e598:	665a      	str	r2, [r3, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
2000e59a:	4b53      	ldr	r3, [pc, #332]	; (2000e6e8 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
2000e59c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2000e5a0:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
2000e5a4:	687b      	ldr	r3, [r7, #4]
2000e5a6:	669a      	str	r2, [r3, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
2000e5a8:	4b4f      	ldr	r3, [pc, #316]	; (2000e6e8 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
2000e5aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2000e5ae:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
2000e5b2:	687b      	ldr	r3, [r7, #4]
2000e5b4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
2000e5b6:	4b4c      	ldr	r3, [pc, #304]	; (2000e6e8 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
2000e5b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2000e5bc:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
2000e5c0:	687b      	ldr	r3, [r7, #4]
2000e5c2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
2000e5c4:	4b48      	ldr	r3, [pc, #288]	; (2000e6e8 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
2000e5c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2000e5ca:	f003 0203 	and.w	r2, r3, #3
2000e5ce:	687b      	ldr	r3, [r7, #4]
2000e5d0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
2000e5d2:	4b45      	ldr	r3, [pc, #276]	; (2000e6e8 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
2000e5d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2000e5d8:	f003 020c 	and.w	r2, r3, #12
2000e5dc:	687b      	ldr	r3, [r7, #4]
2000e5de:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
2000e5e0:	4b41      	ldr	r3, [pc, #260]	; (2000e6e8 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
2000e5e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2000e5e6:	f003 0230 	and.w	r2, r3, #48	; 0x30
2000e5ea:	687b      	ldr	r3, [r7, #4]
2000e5ec:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
2000e5ee:	4b3e      	ldr	r3, [pc, #248]	; (2000e6e8 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
2000e5f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2000e5f4:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
2000e5f8:	687b      	ldr	r3, [r7, #4]
2000e5fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
2000e5fc:	4b3a      	ldr	r3, [pc, #232]	; (2000e6e8 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
2000e5fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2000e602:	f403 7240 	and.w	r2, r3, #768	; 0x300
2000e606:	687b      	ldr	r3, [r7, #4]
2000e608:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
2000e60a:	4b37      	ldr	r3, [pc, #220]	; (2000e6e8 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
2000e60c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2000e610:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
2000e614:	687b      	ldr	r3, [r7, #4]
2000e616:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
2000e618:	4b33      	ldr	r3, [pc, #204]	; (2000e6e8 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
2000e61a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2000e61e:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
2000e622:	687b      	ldr	r3, [r7, #4]
2000e624:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
2000e626:	4b30      	ldr	r3, [pc, #192]	; (2000e6e8 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
2000e628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2000e62c:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
2000e630:	687b      	ldr	r3, [r7, #4]
2000e632:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
2000e634:	4b2c      	ldr	r3, [pc, #176]	; (2000e6e8 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
2000e636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2000e63a:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
2000e63e:	687b      	ldr	r3, [r7, #4]
2000e640:	675a      	str	r2, [r3, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
2000e642:	4b29      	ldr	r3, [pc, #164]	; (2000e6e8 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
2000e644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2000e648:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
2000e64c:	687b      	ldr	r3, [r7, #4]
2000e64e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
2000e650:	4b25      	ldr	r3, [pc, #148]	; (2000e6e8 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
2000e652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2000e656:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
2000e65a:	687b      	ldr	r3, [r7, #4]
2000e65c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
2000e65e:	4b22      	ldr	r3, [pc, #136]	; (2000e6e8 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
2000e660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2000e664:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
2000e668:	687b      	ldr	r3, [r7, #4]
2000e66a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /* Get the SDMMC2 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc2ClockSelection = __HAL_RCC_GET_SDMMC2_SOURCE();
2000e66e:	4b1e      	ldr	r3, [pc, #120]	; (2000e6e8 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
2000e670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2000e674:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
2000e678:	687b      	ldr	r3, [r7, #4]
2000e67a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Get the DFSDM clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
2000e67e:	4b1a      	ldr	r3, [pc, #104]	; (2000e6e8 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
2000e680:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2000e684:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
2000e688:	687b      	ldr	r3, [r7, #4]
2000e68a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
2000e68e:	4b16      	ldr	r3, [pc, #88]	; (2000e6e8 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
2000e690:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2000e694:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
2000e698:	687b      	ldr	r3, [r7, #4]
2000e69a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
2000e69e:	4b12      	ldr	r3, [pc, #72]	; (2000e6e8 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
2000e6a0:	689b      	ldr	r3, [r3, #8]
2000e6a2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
2000e6a6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
2000e6a8:	4b0f      	ldr	r3, [pc, #60]	; (2000e6e8 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
2000e6aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000e6ac:	f403 7240 	and.w	r2, r3, #768	; 0x300
2000e6b0:	68fb      	ldr	r3, [r7, #12]
2000e6b2:	431a      	orrs	r2, r3
2000e6b4:	687b      	ldr	r3, [r7, #4]
2000e6b6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
2000e6b8:	4b0b      	ldr	r3, [pc, #44]	; (2000e6e8 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
2000e6ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2000e6be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2000e6c2:	2b00      	cmp	r3, #0
2000e6c4:	d103      	bne.n	2000e6ce <HAL_RCCEx_GetPeriphCLKConfig+0x22a>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
2000e6c6:	687b      	ldr	r3, [r7, #4]
2000e6c8:	2200      	movs	r2, #0
2000e6ca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
2000e6cc:	e003      	b.n	2000e6d6 <HAL_RCCEx_GetPeriphCLKConfig+0x232>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
2000e6ce:	687b      	ldr	r3, [r7, #4]
2000e6d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
2000e6d4:	639a      	str	r2, [r3, #56]	; 0x38
}
2000e6d6:	bf00      	nop
2000e6d8:	3714      	adds	r7, #20
2000e6da:	46bd      	mov	sp, r7
2000e6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e6e0:	4770      	bx	lr
2000e6e2:	bf00      	nop
2000e6e4:	1cfffff1 	.word	0x1cfffff1
2000e6e8:	40023800 	.word	0x40023800

2000e6ec <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
2000e6ec:	b480      	push	{r7}
2000e6ee:	b087      	sub	sp, #28
2000e6f0:	af00      	add	r7, sp, #0
2000e6f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000e6f4:	2300      	movs	r3, #0
2000e6f6:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
2000e6f8:	2300      	movs	r3, #0
2000e6fa:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
2000e6fc:	2300      	movs	r3, #0
2000e6fe:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
2000e700:	2300      	movs	r3, #0
2000e702:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
2000e704:	687b      	ldr	r3, [r7, #4]
2000e706:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
2000e70a:	f040 80a3 	bne.w	2000e854 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
2000e70e:	4bac      	ldr	r3, [pc, #688]	; (2000e9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
2000e710:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2000e714:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
2000e716:	68bb      	ldr	r3, [r7, #8]
2000e718:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
2000e71c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
2000e71e:	68bb      	ldr	r3, [r7, #8]
2000e720:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
2000e724:	f000 808a 	beq.w	2000e83c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
2000e728:	68bb      	ldr	r3, [r7, #8]
2000e72a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
2000e72e:	f200 8093 	bhi.w	2000e858 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
2000e732:	68bb      	ldr	r3, [r7, #8]
2000e734:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
2000e738:	d07d      	beq.n	2000e836 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
2000e73a:	68bb      	ldr	r3, [r7, #8]
2000e73c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
2000e740:	f200 808a 	bhi.w	2000e858 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
2000e744:	68bb      	ldr	r3, [r7, #8]
2000e746:	2b00      	cmp	r3, #0
2000e748:	d004      	beq.n	2000e754 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
2000e74a:	68bb      	ldr	r3, [r7, #8]
2000e74c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
2000e750:	d039      	beq.n	2000e7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
2000e752:	e081      	b.n	2000e858 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
2000e754:	4b9a      	ldr	r3, [pc, #616]	; (2000e9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
2000e756:	685b      	ldr	r3, [r3, #4]
2000e758:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000e75c:	2b00      	cmp	r3, #0
2000e75e:	d108      	bne.n	2000e772 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
2000e760:	4b97      	ldr	r3, [pc, #604]	; (2000e9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
2000e762:	685b      	ldr	r3, [r3, #4]
2000e764:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2000e768:	4a96      	ldr	r2, [pc, #600]	; (2000e9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
2000e76a:	fbb2 f3f3 	udiv	r3, r2, r3
2000e76e:	613b      	str	r3, [r7, #16]
2000e770:	e007      	b.n	2000e782 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
2000e772:	4b93      	ldr	r3, [pc, #588]	; (2000e9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
2000e774:	685b      	ldr	r3, [r3, #4]
2000e776:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2000e77a:	4a93      	ldr	r2, [pc, #588]	; (2000e9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
2000e77c:	fbb2 f3f3 	udiv	r3, r2, r3
2000e780:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
2000e782:	4b8f      	ldr	r3, [pc, #572]	; (2000e9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
2000e784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2000e788:	0e1b      	lsrs	r3, r3, #24
2000e78a:	f003 030f 	and.w	r3, r3, #15
2000e78e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
2000e790:	4b8b      	ldr	r3, [pc, #556]	; (2000e9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
2000e792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2000e796:	099b      	lsrs	r3, r3, #6
2000e798:	f3c3 0308 	ubfx	r3, r3, #0, #9
2000e79c:	693a      	ldr	r2, [r7, #16]
2000e79e:	fb02 f203 	mul.w	r2, r2, r3
2000e7a2:	68fb      	ldr	r3, [r7, #12]
2000e7a4:	fbb2 f3f3 	udiv	r3, r2, r3
2000e7a8:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
2000e7aa:	4b85      	ldr	r3, [pc, #532]	; (2000e9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
2000e7ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2000e7b0:	0a1b      	lsrs	r3, r3, #8
2000e7b2:	f003 031f 	and.w	r3, r3, #31
2000e7b6:	3301      	adds	r3, #1
2000e7b8:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
2000e7ba:	697a      	ldr	r2, [r7, #20]
2000e7bc:	68fb      	ldr	r3, [r7, #12]
2000e7be:	fbb2 f3f3 	udiv	r3, r2, r3
2000e7c2:	617b      	str	r3, [r7, #20]
        break;
2000e7c4:	e049      	b.n	2000e85a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
2000e7c6:	4b7e      	ldr	r3, [pc, #504]	; (2000e9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
2000e7c8:	685b      	ldr	r3, [r3, #4]
2000e7ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000e7ce:	2b00      	cmp	r3, #0
2000e7d0:	d108      	bne.n	2000e7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
2000e7d2:	4b7b      	ldr	r3, [pc, #492]	; (2000e9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
2000e7d4:	685b      	ldr	r3, [r3, #4]
2000e7d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2000e7da:	4a7a      	ldr	r2, [pc, #488]	; (2000e9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
2000e7dc:	fbb2 f3f3 	udiv	r3, r2, r3
2000e7e0:	613b      	str	r3, [r7, #16]
2000e7e2:	e007      	b.n	2000e7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
2000e7e4:	4b76      	ldr	r3, [pc, #472]	; (2000e9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
2000e7e6:	685b      	ldr	r3, [r3, #4]
2000e7e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2000e7ec:	4a76      	ldr	r2, [pc, #472]	; (2000e9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
2000e7ee:	fbb2 f3f3 	udiv	r3, r2, r3
2000e7f2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
2000e7f4:	4b72      	ldr	r3, [pc, #456]	; (2000e9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
2000e7f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2000e7fa:	0e1b      	lsrs	r3, r3, #24
2000e7fc:	f003 030f 	and.w	r3, r3, #15
2000e800:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
2000e802:	4b6f      	ldr	r3, [pc, #444]	; (2000e9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
2000e804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2000e808:	099b      	lsrs	r3, r3, #6
2000e80a:	f3c3 0308 	ubfx	r3, r3, #0, #9
2000e80e:	693a      	ldr	r2, [r7, #16]
2000e810:	fb02 f203 	mul.w	r2, r2, r3
2000e814:	68fb      	ldr	r3, [r7, #12]
2000e816:	fbb2 f3f3 	udiv	r3, r2, r3
2000e81a:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
2000e81c:	4b68      	ldr	r3, [pc, #416]	; (2000e9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
2000e81e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2000e822:	f003 031f 	and.w	r3, r3, #31
2000e826:	3301      	adds	r3, #1
2000e828:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
2000e82a:	697a      	ldr	r2, [r7, #20]
2000e82c:	68fb      	ldr	r3, [r7, #12]
2000e82e:	fbb2 f3f3 	udiv	r3, r2, r3
2000e832:	617b      	str	r3, [r7, #20]
        break;
2000e834:	e011      	b.n	2000e85a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
2000e836:	4b65      	ldr	r3, [pc, #404]	; (2000e9cc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
2000e838:	617b      	str	r3, [r7, #20]
        break;
2000e83a:	e00e      	b.n	2000e85a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
2000e83c:	4b60      	ldr	r3, [pc, #384]	; (2000e9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
2000e83e:	685b      	ldr	r3, [r3, #4]
2000e840:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000e844:	2b00      	cmp	r3, #0
2000e846:	d102      	bne.n	2000e84e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
2000e848:	4b5e      	ldr	r3, [pc, #376]	; (2000e9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
2000e84a:	617b      	str	r3, [r7, #20]
        break;
2000e84c:	e005      	b.n	2000e85a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
2000e84e:	4b5e      	ldr	r3, [pc, #376]	; (2000e9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
2000e850:	617b      	str	r3, [r7, #20]
        break;
2000e852:	e002      	b.n	2000e85a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
2000e854:	bf00      	nop
2000e856:	e000      	b.n	2000e85a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
2000e858:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
2000e85a:	687b      	ldr	r3, [r7, #4]
2000e85c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
2000e860:	f040 80a3 	bne.w	2000e9aa <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
2000e864:	4b56      	ldr	r3, [pc, #344]	; (2000e9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
2000e866:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2000e86a:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
2000e86c:	68bb      	ldr	r3, [r7, #8]
2000e86e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
2000e872:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
2000e874:	68bb      	ldr	r3, [r7, #8]
2000e876:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
2000e87a:	f000 808a 	beq.w	2000e992 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
2000e87e:	68bb      	ldr	r3, [r7, #8]
2000e880:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
2000e884:	f200 8093 	bhi.w	2000e9ae <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
2000e888:	68bb      	ldr	r3, [r7, #8]
2000e88a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
2000e88e:	d07d      	beq.n	2000e98c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
2000e890:	68bb      	ldr	r3, [r7, #8]
2000e892:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
2000e896:	f200 808a 	bhi.w	2000e9ae <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
2000e89a:	68bb      	ldr	r3, [r7, #8]
2000e89c:	2b00      	cmp	r3, #0
2000e89e:	d004      	beq.n	2000e8aa <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
2000e8a0:	68bb      	ldr	r3, [r7, #8]
2000e8a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2000e8a6:	d039      	beq.n	2000e91c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
2000e8a8:	e081      	b.n	2000e9ae <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
2000e8aa:	4b45      	ldr	r3, [pc, #276]	; (2000e9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
2000e8ac:	685b      	ldr	r3, [r3, #4]
2000e8ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000e8b2:	2b00      	cmp	r3, #0
2000e8b4:	d108      	bne.n	2000e8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
2000e8b6:	4b42      	ldr	r3, [pc, #264]	; (2000e9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
2000e8b8:	685b      	ldr	r3, [r3, #4]
2000e8ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2000e8be:	4a41      	ldr	r2, [pc, #260]	; (2000e9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
2000e8c0:	fbb2 f3f3 	udiv	r3, r2, r3
2000e8c4:	613b      	str	r3, [r7, #16]
2000e8c6:	e007      	b.n	2000e8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
2000e8c8:	4b3d      	ldr	r3, [pc, #244]	; (2000e9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
2000e8ca:	685b      	ldr	r3, [r3, #4]
2000e8cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2000e8d0:	4a3d      	ldr	r2, [pc, #244]	; (2000e9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
2000e8d2:	fbb2 f3f3 	udiv	r3, r2, r3
2000e8d6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
2000e8d8:	4b39      	ldr	r3, [pc, #228]	; (2000e9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
2000e8da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2000e8de:	0e1b      	lsrs	r3, r3, #24
2000e8e0:	f003 030f 	and.w	r3, r3, #15
2000e8e4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
2000e8e6:	4b36      	ldr	r3, [pc, #216]	; (2000e9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
2000e8e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2000e8ec:	099b      	lsrs	r3, r3, #6
2000e8ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
2000e8f2:	693a      	ldr	r2, [r7, #16]
2000e8f4:	fb02 f203 	mul.w	r2, r2, r3
2000e8f8:	68fb      	ldr	r3, [r7, #12]
2000e8fa:	fbb2 f3f3 	udiv	r3, r2, r3
2000e8fe:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
2000e900:	4b2f      	ldr	r3, [pc, #188]	; (2000e9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
2000e902:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2000e906:	0a1b      	lsrs	r3, r3, #8
2000e908:	f003 031f 	and.w	r3, r3, #31
2000e90c:	3301      	adds	r3, #1
2000e90e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
2000e910:	697a      	ldr	r2, [r7, #20]
2000e912:	68fb      	ldr	r3, [r7, #12]
2000e914:	fbb2 f3f3 	udiv	r3, r2, r3
2000e918:	617b      	str	r3, [r7, #20]
        break;
2000e91a:	e049      	b.n	2000e9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
2000e91c:	4b28      	ldr	r3, [pc, #160]	; (2000e9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
2000e91e:	685b      	ldr	r3, [r3, #4]
2000e920:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000e924:	2b00      	cmp	r3, #0
2000e926:	d108      	bne.n	2000e93a <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
2000e928:	4b25      	ldr	r3, [pc, #148]	; (2000e9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
2000e92a:	685b      	ldr	r3, [r3, #4]
2000e92c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2000e930:	4a24      	ldr	r2, [pc, #144]	; (2000e9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
2000e932:	fbb2 f3f3 	udiv	r3, r2, r3
2000e936:	613b      	str	r3, [r7, #16]
2000e938:	e007      	b.n	2000e94a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
2000e93a:	4b21      	ldr	r3, [pc, #132]	; (2000e9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
2000e93c:	685b      	ldr	r3, [r3, #4]
2000e93e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2000e942:	4a21      	ldr	r2, [pc, #132]	; (2000e9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
2000e944:	fbb2 f3f3 	udiv	r3, r2, r3
2000e948:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
2000e94a:	4b1d      	ldr	r3, [pc, #116]	; (2000e9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
2000e94c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2000e950:	0e1b      	lsrs	r3, r3, #24
2000e952:	f003 030f 	and.w	r3, r3, #15
2000e956:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
2000e958:	4b19      	ldr	r3, [pc, #100]	; (2000e9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
2000e95a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2000e95e:	099b      	lsrs	r3, r3, #6
2000e960:	f3c3 0308 	ubfx	r3, r3, #0, #9
2000e964:	693a      	ldr	r2, [r7, #16]
2000e966:	fb02 f203 	mul.w	r2, r2, r3
2000e96a:	68fb      	ldr	r3, [r7, #12]
2000e96c:	fbb2 f3f3 	udiv	r3, r2, r3
2000e970:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
2000e972:	4b13      	ldr	r3, [pc, #76]	; (2000e9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
2000e974:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2000e978:	f003 031f 	and.w	r3, r3, #31
2000e97c:	3301      	adds	r3, #1
2000e97e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
2000e980:	697a      	ldr	r2, [r7, #20]
2000e982:	68fb      	ldr	r3, [r7, #12]
2000e984:	fbb2 f3f3 	udiv	r3, r2, r3
2000e988:	617b      	str	r3, [r7, #20]
        break;
2000e98a:	e011      	b.n	2000e9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        frequency = EXTERNAL_CLOCK_VALUE;
2000e98c:	4b0f      	ldr	r3, [pc, #60]	; (2000e9cc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
2000e98e:	617b      	str	r3, [r7, #20]
        break;
2000e990:	e00e      	b.n	2000e9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
2000e992:	4b0b      	ldr	r3, [pc, #44]	; (2000e9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
2000e994:	685b      	ldr	r3, [r3, #4]
2000e996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000e99a:	2b00      	cmp	r3, #0
2000e99c:	d102      	bne.n	2000e9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
2000e99e:	4b09      	ldr	r3, [pc, #36]	; (2000e9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
2000e9a0:	617b      	str	r3, [r7, #20]
        break;
2000e9a2:	e005      	b.n	2000e9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
          frequency = HSE_VALUE;
2000e9a4:	4b08      	ldr	r3, [pc, #32]	; (2000e9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
2000e9a6:	617b      	str	r3, [r7, #20]
        break;
2000e9a8:	e002      	b.n	2000e9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
      }
    }
  }
2000e9aa:	bf00      	nop
2000e9ac:	e000      	b.n	2000e9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        break;
2000e9ae:	bf00      	nop

  return frequency;
2000e9b0:	697b      	ldr	r3, [r7, #20]
}
2000e9b2:	4618      	mov	r0, r3
2000e9b4:	371c      	adds	r7, #28
2000e9b6:	46bd      	mov	sp, r7
2000e9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e9bc:	4770      	bx	lr
2000e9be:	bf00      	nop
2000e9c0:	40023800 	.word	0x40023800
2000e9c4:	00f42400 	.word	0x00f42400
2000e9c8:	017d7840 	.word	0x017d7840
2000e9cc:	00bb8000 	.word	0x00bb8000

2000e9d0 <HAL_RCCEx_EnablePLLI2S>:
  * @param  PLLI2SInit  pointer to an RCC_PLLI2SInitTypeDef structure that
  *         contains the configuration information for the PLLI2S
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnablePLLI2S(RCC_PLLI2SInitTypeDef  *PLLI2SInit)
{
2000e9d0:	b580      	push	{r7, lr}
2000e9d2:	b084      	sub	sp, #16
2000e9d4:	af00      	add	r7, sp, #0
2000e9d6:	6078      	str	r0, [r7, #4]
#if defined(RCC_PLLI2SCFGR_PLLI2SP)
  assert_param(IS_RCC_PLLI2SP_VALUE(PLLI2SInit->PLLI2SP));
#endif /* RCC_PLLI2SCFGR_PLLI2SP */

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
2000e9d8:	4b24      	ldr	r3, [pc, #144]	; (2000ea6c <HAL_RCCEx_EnablePLLI2S+0x9c>)
2000e9da:	681b      	ldr	r3, [r3, #0]
2000e9dc:	4a23      	ldr	r2, [pc, #140]	; (2000ea6c <HAL_RCCEx_EnablePLLI2S+0x9c>)
2000e9de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
2000e9e2:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
2000e9e4:	f7f3 f9b8 	bl	20001d58 <HAL_GetTick>
2000e9e8:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
2000e9ea:	e008      	b.n	2000e9fe <HAL_RCCEx_EnablePLLI2S+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
2000e9ec:	f7f3 f9b4 	bl	20001d58 <HAL_GetTick>
2000e9f0:	4602      	mov	r2, r0
2000e9f2:	68fb      	ldr	r3, [r7, #12]
2000e9f4:	1ad3      	subs	r3, r2, r3
2000e9f6:	2b64      	cmp	r3, #100	; 0x64
2000e9f8:	d901      	bls.n	2000e9fe <HAL_RCCEx_EnablePLLI2S+0x2e>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
2000e9fa:	2303      	movs	r3, #3
2000e9fc:	e031      	b.n	2000ea62 <HAL_RCCEx_EnablePLLI2S+0x92>
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
2000e9fe:	4b1b      	ldr	r3, [pc, #108]	; (2000ea6c <HAL_RCCEx_EnablePLLI2S+0x9c>)
2000ea00:	681b      	ldr	r3, [r3, #0]
2000ea02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2000ea06:	2b00      	cmp	r3, #0
2000ea08:	d1f0      	bne.n	2000e9ec <HAL_RCCEx_EnablePLLI2S+0x1c>
#else
  /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * PLLI2SN */
  /* I2SPCLK = PLLI2S_VCO / PLLI2SP */
  /* I2SQCLK = PLLI2S_VCO / PLLI2SQ */
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SP, PLLI2SInit->PLLI2SQ, PLLI2SInit->PLLI2SR);
2000ea0a:	687b      	ldr	r3, [r7, #4]
2000ea0c:	681b      	ldr	r3, [r3, #0]
2000ea0e:	019a      	lsls	r2, r3, #6
2000ea10:	687b      	ldr	r3, [r7, #4]
2000ea12:	68db      	ldr	r3, [r3, #12]
2000ea14:	041b      	lsls	r3, r3, #16
2000ea16:	431a      	orrs	r2, r3
2000ea18:	687b      	ldr	r3, [r7, #4]
2000ea1a:	689b      	ldr	r3, [r3, #8]
2000ea1c:	061b      	lsls	r3, r3, #24
2000ea1e:	431a      	orrs	r2, r3
2000ea20:	687b      	ldr	r3, [r7, #4]
2000ea22:	685b      	ldr	r3, [r3, #4]
2000ea24:	071b      	lsls	r3, r3, #28
2000ea26:	4911      	ldr	r1, [pc, #68]	; (2000ea6c <HAL_RCCEx_EnablePLLI2S+0x9c>)
2000ea28:	4313      	orrs	r3, r2
2000ea2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F722xx || STM32F723xx || STM32F732xx || STM32F733xx || STM32F730xx */

  /* Enable the PLLI2S */
  __HAL_RCC_PLLI2S_ENABLE();
2000ea2e:	4b0f      	ldr	r3, [pc, #60]	; (2000ea6c <HAL_RCCEx_EnablePLLI2S+0x9c>)
2000ea30:	681b      	ldr	r3, [r3, #0]
2000ea32:	4a0e      	ldr	r2, [pc, #56]	; (2000ea6c <HAL_RCCEx_EnablePLLI2S+0x9c>)
2000ea34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
2000ea38:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is ready */
  tickstart = HAL_GetTick();
2000ea3a:	f7f3 f98d 	bl	20001d58 <HAL_GetTick>
2000ea3e:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
2000ea40:	e008      	b.n	2000ea54 <HAL_RCCEx_EnablePLLI2S+0x84>
  {
    if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
2000ea42:	f7f3 f989 	bl	20001d58 <HAL_GetTick>
2000ea46:	4602      	mov	r2, r0
2000ea48:	68fb      	ldr	r3, [r7, #12]
2000ea4a:	1ad3      	subs	r3, r2, r3
2000ea4c:	2b64      	cmp	r3, #100	; 0x64
2000ea4e:	d901      	bls.n	2000ea54 <HAL_RCCEx_EnablePLLI2S+0x84>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
2000ea50:	2303      	movs	r3, #3
2000ea52:	e006      	b.n	2000ea62 <HAL_RCCEx_EnablePLLI2S+0x92>
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
2000ea54:	4b05      	ldr	r3, [pc, #20]	; (2000ea6c <HAL_RCCEx_EnablePLLI2S+0x9c>)
2000ea56:	681b      	ldr	r3, [r3, #0]
2000ea58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2000ea5c:	2b00      	cmp	r3, #0
2000ea5e:	d0f0      	beq.n	2000ea42 <HAL_RCCEx_EnablePLLI2S+0x72>
    }
  }

 return HAL_OK;
2000ea60:	2300      	movs	r3, #0
}
2000ea62:	4618      	mov	r0, r3
2000ea64:	3710      	adds	r7, #16
2000ea66:	46bd      	mov	sp, r7
2000ea68:	bd80      	pop	{r7, pc}
2000ea6a:	bf00      	nop
2000ea6c:	40023800 	.word	0x40023800

2000ea70 <HAL_RCCEx_DisablePLLI2S>:
/**
  * @brief  Disable PLLI2S.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLLI2S(void)
{
2000ea70:	b580      	push	{r7, lr}
2000ea72:	b082      	sub	sp, #8
2000ea74:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
2000ea76:	4b0f      	ldr	r3, [pc, #60]	; (2000eab4 <HAL_RCCEx_DisablePLLI2S+0x44>)
2000ea78:	681b      	ldr	r3, [r3, #0]
2000ea7a:	4a0e      	ldr	r2, [pc, #56]	; (2000eab4 <HAL_RCCEx_DisablePLLI2S+0x44>)
2000ea7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
2000ea80:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
2000ea82:	f7f3 f969 	bl	20001d58 <HAL_GetTick>
2000ea86:	6078      	str	r0, [r7, #4]
  while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
2000ea88:	e008      	b.n	2000ea9c <HAL_RCCEx_DisablePLLI2S+0x2c>
  {
    if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
2000ea8a:	f7f3 f965 	bl	20001d58 <HAL_GetTick>
2000ea8e:	4602      	mov	r2, r0
2000ea90:	687b      	ldr	r3, [r7, #4]
2000ea92:	1ad3      	subs	r3, r2, r3
2000ea94:	2b64      	cmp	r3, #100	; 0x64
2000ea96:	d901      	bls.n	2000ea9c <HAL_RCCEx_DisablePLLI2S+0x2c>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
2000ea98:	2303      	movs	r3, #3
2000ea9a:	e006      	b.n	2000eaaa <HAL_RCCEx_DisablePLLI2S+0x3a>
  while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
2000ea9c:	4b05      	ldr	r3, [pc, #20]	; (2000eab4 <HAL_RCCEx_DisablePLLI2S+0x44>)
2000ea9e:	681b      	ldr	r3, [r3, #0]
2000eaa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2000eaa4:	2b00      	cmp	r3, #0
2000eaa6:	d1f0      	bne.n	2000ea8a <HAL_RCCEx_DisablePLLI2S+0x1a>
    }
  }

  return HAL_OK;
2000eaa8:	2300      	movs	r3, #0
}
2000eaaa:	4618      	mov	r0, r3
2000eaac:	3708      	adds	r7, #8
2000eaae:	46bd      	mov	sp, r7
2000eab0:	bd80      	pop	{r7, pc}
2000eab2:	bf00      	nop
2000eab4:	40023800 	.word	0x40023800

2000eab8 <HAL_RCCEx_EnablePLLSAI>:
  * @param  PLLSAIInit  pointer to an RCC_PLLSAIInitTypeDef structure that
  *         contains the configuration information for the PLLSAI
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnablePLLSAI(RCC_PLLSAIInitTypeDef  *PLLSAIInit)
{
2000eab8:	b580      	push	{r7, lr}
2000eaba:	b084      	sub	sp, #16
2000eabc:	af00      	add	r7, sp, #0
2000eabe:	6078      	str	r0, [r7, #4]
#if defined(RCC_PLLSAICFGR_PLLSAIR)
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIInit->PLLSAIR));
#endif /* RCC_PLLSAICFGR_PLLSAIR */

  /* Disable the PLLSAI */
  __HAL_RCC_PLLSAI_DISABLE();
2000eac0:	4b25      	ldr	r3, [pc, #148]	; (2000eb58 <HAL_RCCEx_EnablePLLSAI+0xa0>)
2000eac2:	681b      	ldr	r3, [r3, #0]
2000eac4:	4a24      	ldr	r2, [pc, #144]	; (2000eb58 <HAL_RCCEx_EnablePLLSAI+0xa0>)
2000eac6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
2000eaca:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  tickstart = HAL_GetTick();
2000eacc:	f7f3 f944 	bl	20001d58 <HAL_GetTick>
2000ead0:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
2000ead2:	e008      	b.n	2000eae6 <HAL_RCCEx_EnablePLLSAI+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
2000ead4:	f7f3 f940 	bl	20001d58 <HAL_GetTick>
2000ead8:	4602      	mov	r2, r0
2000eada:	68fb      	ldr	r3, [r7, #12]
2000eadc:	1ad3      	subs	r3, r2, r3
2000eade:	2b64      	cmp	r3, #100	; 0x64
2000eae0:	d901      	bls.n	2000eae6 <HAL_RCCEx_EnablePLLSAI+0x2e>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
2000eae2:	2303      	movs	r3, #3
2000eae4:	e033      	b.n	2000eb4e <HAL_RCCEx_EnablePLLSAI+0x96>
  while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
2000eae6:	4b1c      	ldr	r3, [pc, #112]	; (2000eb58 <HAL_RCCEx_EnablePLLSAI+0xa0>)
2000eae8:	681b      	ldr	r3, [r3, #0]
2000eaea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2000eaee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2000eaf2:	d0ef      	beq.n	2000ead4 <HAL_RCCEx_EnablePLLSAI+0x1c>
#else
  /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * PLLSAIN */
  /* SAIPCLK = PLLSAI_VCO / PLLSAIP */
  /* SAIQCLK = PLLSAI_VCO / PLLSAIQ */
  /* SAIRCLK = PLLSAI_VCO / PLLSAIR */
  __HAL_RCC_PLLSAI_CONFIG(PLLSAIInit->PLLSAIN, PLLSAIInit->PLLSAIP, \
2000eaf4:	687b      	ldr	r3, [r7, #4]
2000eaf6:	681b      	ldr	r3, [r3, #0]
2000eaf8:	019a      	lsls	r2, r3, #6
2000eafa:	687b      	ldr	r3, [r7, #4]
2000eafc:	68db      	ldr	r3, [r3, #12]
2000eafe:	041b      	lsls	r3, r3, #16
2000eb00:	431a      	orrs	r2, r3
2000eb02:	687b      	ldr	r3, [r7, #4]
2000eb04:	685b      	ldr	r3, [r3, #4]
2000eb06:	061b      	lsls	r3, r3, #24
2000eb08:	431a      	orrs	r2, r3
2000eb0a:	687b      	ldr	r3, [r7, #4]
2000eb0c:	689b      	ldr	r3, [r3, #8]
2000eb0e:	071b      	lsls	r3, r3, #28
2000eb10:	4911      	ldr	r1, [pc, #68]	; (2000eb58 <HAL_RCCEx_EnablePLLSAI+0xa0>)
2000eb12:	4313      	orrs	r3, r2
2000eb14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
                          PLLSAIInit->PLLSAIQ, PLLSAIInit->PLLSAIR);
#endif /* STM32F722xx || STM32F723xx || STM32F732xx || STM32F733xx || STM32F730xx */

  /* Enable the PLLSAI */
  __HAL_RCC_PLLSAI_ENABLE();
2000eb18:	4b0f      	ldr	r3, [pc, #60]	; (2000eb58 <HAL_RCCEx_EnablePLLSAI+0xa0>)
2000eb1a:	681b      	ldr	r3, [r3, #0]
2000eb1c:	4a0e      	ldr	r2, [pc, #56]	; (2000eb58 <HAL_RCCEx_EnablePLLSAI+0xa0>)
2000eb1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000eb22:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is ready */
  tickstart = HAL_GetTick();
2000eb24:	f7f3 f918 	bl	20001d58 <HAL_GetTick>
2000eb28:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
2000eb2a:	e008      	b.n	2000eb3e <HAL_RCCEx_EnablePLLSAI+0x86>
  {
    if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
2000eb2c:	f7f3 f914 	bl	20001d58 <HAL_GetTick>
2000eb30:	4602      	mov	r2, r0
2000eb32:	68fb      	ldr	r3, [r7, #12]
2000eb34:	1ad3      	subs	r3, r2, r3
2000eb36:	2b64      	cmp	r3, #100	; 0x64
2000eb38:	d901      	bls.n	2000eb3e <HAL_RCCEx_EnablePLLSAI+0x86>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
2000eb3a:	2303      	movs	r3, #3
2000eb3c:	e007      	b.n	2000eb4e <HAL_RCCEx_EnablePLLSAI+0x96>
  while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
2000eb3e:	4b06      	ldr	r3, [pc, #24]	; (2000eb58 <HAL_RCCEx_EnablePLLSAI+0xa0>)
2000eb40:	681b      	ldr	r3, [r3, #0]
2000eb42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2000eb46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2000eb4a:	d1ef      	bne.n	2000eb2c <HAL_RCCEx_EnablePLLSAI+0x74>
    }
  }

 return HAL_OK;
2000eb4c:	2300      	movs	r3, #0
}
2000eb4e:	4618      	mov	r0, r3
2000eb50:	3710      	adds	r7, #16
2000eb52:	46bd      	mov	sp, r7
2000eb54:	bd80      	pop	{r7, pc}
2000eb56:	bf00      	nop
2000eb58:	40023800 	.word	0x40023800

2000eb5c <HAL_RCCEx_DisablePLLSAI>:
/**
  * @brief  Disable PLLSAI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLLSAI(void)
{
2000eb5c:	b580      	push	{r7, lr}
2000eb5e:	b082      	sub	sp, #8
2000eb60:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the PLLSAI */
  __HAL_RCC_PLLSAI_DISABLE();
2000eb62:	4b0f      	ldr	r3, [pc, #60]	; (2000eba0 <HAL_RCCEx_DisablePLLSAI+0x44>)
2000eb64:	681b      	ldr	r3, [r3, #0]
2000eb66:	4a0e      	ldr	r2, [pc, #56]	; (2000eba0 <HAL_RCCEx_DisablePLLSAI+0x44>)
2000eb68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
2000eb6c:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  tickstart = HAL_GetTick();
2000eb6e:	f7f3 f8f3 	bl	20001d58 <HAL_GetTick>
2000eb72:	6078      	str	r0, [r7, #4]
  while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
2000eb74:	e008      	b.n	2000eb88 <HAL_RCCEx_DisablePLLSAI+0x2c>
  {
    if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
2000eb76:	f7f3 f8ef 	bl	20001d58 <HAL_GetTick>
2000eb7a:	4602      	mov	r2, r0
2000eb7c:	687b      	ldr	r3, [r7, #4]
2000eb7e:	1ad3      	subs	r3, r2, r3
2000eb80:	2b64      	cmp	r3, #100	; 0x64
2000eb82:	d901      	bls.n	2000eb88 <HAL_RCCEx_DisablePLLSAI+0x2c>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
2000eb84:	2303      	movs	r3, #3
2000eb86:	e007      	b.n	2000eb98 <HAL_RCCEx_DisablePLLSAI+0x3c>
  while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
2000eb88:	4b05      	ldr	r3, [pc, #20]	; (2000eba0 <HAL_RCCEx_DisablePLLSAI+0x44>)
2000eb8a:	681b      	ldr	r3, [r3, #0]
2000eb8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2000eb90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2000eb94:	d0ef      	beq.n	2000eb76 <HAL_RCCEx_DisablePLLSAI+0x1a>
    }
  }

  return HAL_OK;
2000eb96:	2300      	movs	r3, #0
}
2000eb98:	4618      	mov	r0, r3
2000eb9a:	3708      	adds	r7, #8
2000eb9c:	46bd      	mov	sp, r7
2000eb9e:	bd80      	pop	{r7, pc}
2000eba0:	40023800 	.word	0x40023800

2000eba4 <__errno>:
2000eba4:	4b01      	ldr	r3, [pc, #4]	; (2000ebac <__errno+0x8>)
2000eba6:	6818      	ldr	r0, [r3, #0]
2000eba8:	4770      	bx	lr
2000ebaa:	bf00      	nop
2000ebac:	2000041c 	.word	0x2000041c

2000ebb0 <exit>:
2000ebb0:	b508      	push	{r3, lr}
2000ebb2:	4b07      	ldr	r3, [pc, #28]	; (2000ebd0 <exit+0x20>)
2000ebb4:	4604      	mov	r4, r0
2000ebb6:	b113      	cbz	r3, 2000ebbe <exit+0xe>
2000ebb8:	2100      	movs	r1, #0
2000ebba:	f3af 8000 	nop.w
2000ebbe:	4b05      	ldr	r3, [pc, #20]	; (2000ebd4 <exit+0x24>)
2000ebc0:	6818      	ldr	r0, [r3, #0]
2000ebc2:	6a83      	ldr	r3, [r0, #40]	; 0x28
2000ebc4:	b103      	cbz	r3, 2000ebc8 <exit+0x18>
2000ebc6:	4798      	blx	r3
2000ebc8:	4620      	mov	r0, r4
2000ebca:	f7f2 fe5e 	bl	2000188a <_exit>
2000ebce:	bf00      	nop
2000ebd0:	00000000 	.word	0x00000000
2000ebd4:	2000ed34 	.word	0x2000ed34

2000ebd8 <__libc_init_array>:
2000ebd8:	b570      	push	{r4, r5, r6, lr}
2000ebda:	4d0d      	ldr	r5, [pc, #52]	; (2000ec10 <__libc_init_array+0x38>)
2000ebdc:	4c0d      	ldr	r4, [pc, #52]	; (2000ec14 <__libc_init_array+0x3c>)
2000ebde:	1b64      	subs	r4, r4, r5
2000ebe0:	10a4      	asrs	r4, r4, #2
2000ebe2:	2600      	movs	r6, #0
2000ebe4:	42a6      	cmp	r6, r4
2000ebe6:	d109      	bne.n	2000ebfc <__libc_init_array+0x24>
2000ebe8:	4d0b      	ldr	r5, [pc, #44]	; (2000ec18 <__libc_init_array+0x40>)
2000ebea:	4c0c      	ldr	r4, [pc, #48]	; (2000ec1c <__libc_init_array+0x44>)
2000ebec:	f000 f822 	bl	2000ec34 <_init>
2000ebf0:	1b64      	subs	r4, r4, r5
2000ebf2:	10a4      	asrs	r4, r4, #2
2000ebf4:	2600      	movs	r6, #0
2000ebf6:	42a6      	cmp	r6, r4
2000ebf8:	d105      	bne.n	2000ec06 <__libc_init_array+0x2e>
2000ebfa:	bd70      	pop	{r4, r5, r6, pc}
2000ebfc:	f855 3b04 	ldr.w	r3, [r5], #4
2000ec00:	4798      	blx	r3
2000ec02:	3601      	adds	r6, #1
2000ec04:	e7ee      	b.n	2000ebe4 <__libc_init_array+0xc>
2000ec06:	f855 3b04 	ldr.w	r3, [r5], #4
2000ec0a:	4798      	blx	r3
2000ec0c:	3601      	adds	r6, #1
2000ec0e:	e7f2      	b.n	2000ebf6 <__libc_init_array+0x1e>
2000ec10:	20000400 	.word	0x20000400
2000ec14:	20000400 	.word	0x20000400
2000ec18:	20000400 	.word	0x20000400
2000ec1c:	20000404 	.word	0x20000404

2000ec20 <memset>:
2000ec20:	4402      	add	r2, r0
2000ec22:	4603      	mov	r3, r0
2000ec24:	4293      	cmp	r3, r2
2000ec26:	d100      	bne.n	2000ec2a <memset+0xa>
2000ec28:	4770      	bx	lr
2000ec2a:	f803 1b01 	strb.w	r1, [r3], #1
2000ec2e:	e7f9      	b.n	2000ec24 <memset+0x4>

2000ec30 <__EH_FRAME_BEGIN__>:
2000ec30:	0000 0000                                   ....

2000ec34 <_init>:
2000ec34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000ec36:	bf00      	nop
2000ec38:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000ec3a:	bc08      	pop	{r3}
2000ec3c:	469e      	mov	lr, r3
2000ec3e:	4770      	bx	lr

2000ec40 <_fini>:
2000ec40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000ec42:	bf00      	nop
2000ec44:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000ec46:	bc08      	pop	{r3}
2000ec48:	469e      	mov	lr, r3
2000ec4a:	4770      	bx	lr
