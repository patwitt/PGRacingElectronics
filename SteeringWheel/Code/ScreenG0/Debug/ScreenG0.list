
ScreenG0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f64  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08006020  08006020  00016020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006168  08006168  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08006168  08006168  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006168  08006168  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006168  08006168  00016168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800616c  0800616c  0001616c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006170  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000007c  080061ec  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  080061ec  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000def9  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f4e  00000000  00000000  0002df9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  0002fef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a10  00000000  00000000  000309c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014d28  00000000  00000000  000313d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e7bb  00000000  00000000  00046100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083db5  00000000  00000000  000548bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d8670  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c78  00000000  00000000  000d86c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000007c 	.word	0x2000007c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08006004 	.word	0x08006004

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000080 	.word	0x20000080
 80000fc:	08006004 	.word	0x08006004

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__udivsi3>:
 8000110:	2200      	movs	r2, #0
 8000112:	0843      	lsrs	r3, r0, #1
 8000114:	428b      	cmp	r3, r1
 8000116:	d374      	bcc.n	8000202 <__udivsi3+0xf2>
 8000118:	0903      	lsrs	r3, r0, #4
 800011a:	428b      	cmp	r3, r1
 800011c:	d35f      	bcc.n	80001de <__udivsi3+0xce>
 800011e:	0a03      	lsrs	r3, r0, #8
 8000120:	428b      	cmp	r3, r1
 8000122:	d344      	bcc.n	80001ae <__udivsi3+0x9e>
 8000124:	0b03      	lsrs	r3, r0, #12
 8000126:	428b      	cmp	r3, r1
 8000128:	d328      	bcc.n	800017c <__udivsi3+0x6c>
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d30d      	bcc.n	800014c <__udivsi3+0x3c>
 8000130:	22ff      	movs	r2, #255	; 0xff
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	ba12      	rev	r2, r2
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d302      	bcc.n	8000142 <__udivsi3+0x32>
 800013c:	1212      	asrs	r2, r2, #8
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	d065      	beq.n	800020e <__udivsi3+0xfe>
 8000142:	0b03      	lsrs	r3, r0, #12
 8000144:	428b      	cmp	r3, r1
 8000146:	d319      	bcc.n	800017c <__udivsi3+0x6c>
 8000148:	e000      	b.n	800014c <__udivsi3+0x3c>
 800014a:	0a09      	lsrs	r1, r1, #8
 800014c:	0bc3      	lsrs	r3, r0, #15
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x46>
 8000152:	03cb      	lsls	r3, r1, #15
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b83      	lsrs	r3, r0, #14
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x52>
 800015e:	038b      	lsls	r3, r1, #14
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b43      	lsrs	r3, r0, #13
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x5e>
 800016a:	034b      	lsls	r3, r1, #13
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b03      	lsrs	r3, r0, #12
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x6a>
 8000176:	030b      	lsls	r3, r1, #12
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0ac3      	lsrs	r3, r0, #11
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x76>
 8000182:	02cb      	lsls	r3, r1, #11
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a83      	lsrs	r3, r0, #10
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x82>
 800018e:	028b      	lsls	r3, r1, #10
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a43      	lsrs	r3, r0, #9
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x8e>
 800019a:	024b      	lsls	r3, r1, #9
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a03      	lsrs	r3, r0, #8
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x9a>
 80001a6:	020b      	lsls	r3, r1, #8
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	d2cd      	bcs.n	800014a <__udivsi3+0x3a>
 80001ae:	09c3      	lsrs	r3, r0, #7
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xa8>
 80001b4:	01cb      	lsls	r3, r1, #7
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0983      	lsrs	r3, r0, #6
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xb4>
 80001c0:	018b      	lsls	r3, r1, #6
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0943      	lsrs	r3, r0, #5
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xc0>
 80001cc:	014b      	lsls	r3, r1, #5
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0903      	lsrs	r3, r0, #4
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xcc>
 80001d8:	010b      	lsls	r3, r1, #4
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	08c3      	lsrs	r3, r0, #3
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xd8>
 80001e4:	00cb      	lsls	r3, r1, #3
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0883      	lsrs	r3, r0, #2
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xe4>
 80001f0:	008b      	lsls	r3, r1, #2
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0843      	lsrs	r3, r0, #1
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xf0>
 80001fc:	004b      	lsls	r3, r1, #1
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	1a41      	subs	r1, r0, r1
 8000204:	d200      	bcs.n	8000208 <__udivsi3+0xf8>
 8000206:	4601      	mov	r1, r0
 8000208:	4152      	adcs	r2, r2
 800020a:	4610      	mov	r0, r2
 800020c:	4770      	bx	lr
 800020e:	e7ff      	b.n	8000210 <__udivsi3+0x100>
 8000210:	b501      	push	{r0, lr}
 8000212:	2000      	movs	r0, #0
 8000214:	f000 f8f0 	bl	80003f8 <__aeabi_idiv0>
 8000218:	bd02      	pop	{r1, pc}
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_uidivmod>:
 800021c:	2900      	cmp	r1, #0
 800021e:	d0f7      	beq.n	8000210 <__udivsi3+0x100>
 8000220:	e776      	b.n	8000110 <__udivsi3>
 8000222:	4770      	bx	lr

08000224 <__divsi3>:
 8000224:	4603      	mov	r3, r0
 8000226:	430b      	orrs	r3, r1
 8000228:	d47f      	bmi.n	800032a <__divsi3+0x106>
 800022a:	2200      	movs	r2, #0
 800022c:	0843      	lsrs	r3, r0, #1
 800022e:	428b      	cmp	r3, r1
 8000230:	d374      	bcc.n	800031c <__divsi3+0xf8>
 8000232:	0903      	lsrs	r3, r0, #4
 8000234:	428b      	cmp	r3, r1
 8000236:	d35f      	bcc.n	80002f8 <__divsi3+0xd4>
 8000238:	0a03      	lsrs	r3, r0, #8
 800023a:	428b      	cmp	r3, r1
 800023c:	d344      	bcc.n	80002c8 <__divsi3+0xa4>
 800023e:	0b03      	lsrs	r3, r0, #12
 8000240:	428b      	cmp	r3, r1
 8000242:	d328      	bcc.n	8000296 <__divsi3+0x72>
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d30d      	bcc.n	8000266 <__divsi3+0x42>
 800024a:	22ff      	movs	r2, #255	; 0xff
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	ba12      	rev	r2, r2
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d302      	bcc.n	800025c <__divsi3+0x38>
 8000256:	1212      	asrs	r2, r2, #8
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	d065      	beq.n	8000328 <__divsi3+0x104>
 800025c:	0b03      	lsrs	r3, r0, #12
 800025e:	428b      	cmp	r3, r1
 8000260:	d319      	bcc.n	8000296 <__divsi3+0x72>
 8000262:	e000      	b.n	8000266 <__divsi3+0x42>
 8000264:	0a09      	lsrs	r1, r1, #8
 8000266:	0bc3      	lsrs	r3, r0, #15
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x4c>
 800026c:	03cb      	lsls	r3, r1, #15
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b83      	lsrs	r3, r0, #14
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x58>
 8000278:	038b      	lsls	r3, r1, #14
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b43      	lsrs	r3, r0, #13
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x64>
 8000284:	034b      	lsls	r3, r1, #13
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b03      	lsrs	r3, r0, #12
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x70>
 8000290:	030b      	lsls	r3, r1, #12
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0ac3      	lsrs	r3, r0, #11
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x7c>
 800029c:	02cb      	lsls	r3, r1, #11
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a83      	lsrs	r3, r0, #10
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x88>
 80002a8:	028b      	lsls	r3, r1, #10
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a43      	lsrs	r3, r0, #9
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x94>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a03      	lsrs	r3, r0, #8
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0xa0>
 80002c0:	020b      	lsls	r3, r1, #8
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	d2cd      	bcs.n	8000264 <__divsi3+0x40>
 80002c8:	09c3      	lsrs	r3, r0, #7
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xae>
 80002ce:	01cb      	lsls	r3, r1, #7
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0983      	lsrs	r3, r0, #6
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xba>
 80002da:	018b      	lsls	r3, r1, #6
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0943      	lsrs	r3, r0, #5
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xc6>
 80002e6:	014b      	lsls	r3, r1, #5
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0903      	lsrs	r3, r0, #4
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xd2>
 80002f2:	010b      	lsls	r3, r1, #4
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	08c3      	lsrs	r3, r0, #3
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xde>
 80002fe:	00cb      	lsls	r3, r1, #3
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0883      	lsrs	r3, r0, #2
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xea>
 800030a:	008b      	lsls	r3, r1, #2
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0843      	lsrs	r3, r0, #1
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xf6>
 8000316:	004b      	lsls	r3, r1, #1
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	1a41      	subs	r1, r0, r1
 800031e:	d200      	bcs.n	8000322 <__divsi3+0xfe>
 8000320:	4601      	mov	r1, r0
 8000322:	4152      	adcs	r2, r2
 8000324:	4610      	mov	r0, r2
 8000326:	4770      	bx	lr
 8000328:	e05d      	b.n	80003e6 <__divsi3+0x1c2>
 800032a:	0fca      	lsrs	r2, r1, #31
 800032c:	d000      	beq.n	8000330 <__divsi3+0x10c>
 800032e:	4249      	negs	r1, r1
 8000330:	1003      	asrs	r3, r0, #32
 8000332:	d300      	bcc.n	8000336 <__divsi3+0x112>
 8000334:	4240      	negs	r0, r0
 8000336:	4053      	eors	r3, r2
 8000338:	2200      	movs	r2, #0
 800033a:	469c      	mov	ip, r3
 800033c:	0903      	lsrs	r3, r0, #4
 800033e:	428b      	cmp	r3, r1
 8000340:	d32d      	bcc.n	800039e <__divsi3+0x17a>
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d312      	bcc.n	800036e <__divsi3+0x14a>
 8000348:	22fc      	movs	r2, #252	; 0xfc
 800034a:	0189      	lsls	r1, r1, #6
 800034c:	ba12      	rev	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d30c      	bcc.n	800036e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d308      	bcc.n	800036e <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d304      	bcc.n	800036e <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	d03a      	beq.n	80003de <__divsi3+0x1ba>
 8000368:	1192      	asrs	r2, r2, #6
 800036a:	e000      	b.n	800036e <__divsi3+0x14a>
 800036c:	0989      	lsrs	r1, r1, #6
 800036e:	09c3      	lsrs	r3, r0, #7
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x154>
 8000374:	01cb      	lsls	r3, r1, #7
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0983      	lsrs	r3, r0, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x160>
 8000380:	018b      	lsls	r3, r1, #6
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0943      	lsrs	r3, r0, #5
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x16c>
 800038c:	014b      	lsls	r3, r1, #5
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0903      	lsrs	r3, r0, #4
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x178>
 8000398:	010b      	lsls	r3, r1, #4
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	08c3      	lsrs	r3, r0, #3
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x184>
 80003a4:	00cb      	lsls	r3, r1, #3
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0883      	lsrs	r3, r0, #2
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x190>
 80003b0:	008b      	lsls	r3, r1, #2
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	d2d9      	bcs.n	800036c <__divsi3+0x148>
 80003b8:	0843      	lsrs	r3, r0, #1
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d301      	bcc.n	80003c2 <__divsi3+0x19e>
 80003be:	004b      	lsls	r3, r1, #1
 80003c0:	1ac0      	subs	r0, r0, r3
 80003c2:	4152      	adcs	r2, r2
 80003c4:	1a41      	subs	r1, r0, r1
 80003c6:	d200      	bcs.n	80003ca <__divsi3+0x1a6>
 80003c8:	4601      	mov	r1, r0
 80003ca:	4663      	mov	r3, ip
 80003cc:	4152      	adcs	r2, r2
 80003ce:	105b      	asrs	r3, r3, #1
 80003d0:	4610      	mov	r0, r2
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x1b4>
 80003d4:	4240      	negs	r0, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d500      	bpl.n	80003dc <__divsi3+0x1b8>
 80003da:	4249      	negs	r1, r1
 80003dc:	4770      	bx	lr
 80003de:	4663      	mov	r3, ip
 80003e0:	105b      	asrs	r3, r3, #1
 80003e2:	d300      	bcc.n	80003e6 <__divsi3+0x1c2>
 80003e4:	4240      	negs	r0, r0
 80003e6:	b501      	push	{r0, lr}
 80003e8:	2000      	movs	r0, #0
 80003ea:	f000 f805 	bl	80003f8 <__aeabi_idiv0>
 80003ee:	bd02      	pop	{r1, pc}

080003f0 <__aeabi_idivmod>:
 80003f0:	2900      	cmp	r1, #0
 80003f2:	d0f8      	beq.n	80003e6 <__divsi3+0x1c2>
 80003f4:	e716      	b.n	8000224 <__divsi3>
 80003f6:	4770      	bx	lr

080003f8 <__aeabi_idiv0>:
 80003f8:	4770      	bx	lr
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__aeabi_cdrcmple>:
 80003fc:	4684      	mov	ip, r0
 80003fe:	0010      	movs	r0, r2
 8000400:	4662      	mov	r2, ip
 8000402:	468c      	mov	ip, r1
 8000404:	0019      	movs	r1, r3
 8000406:	4663      	mov	r3, ip
 8000408:	e000      	b.n	800040c <__aeabi_cdcmpeq>
 800040a:	46c0      	nop			; (mov r8, r8)

0800040c <__aeabi_cdcmpeq>:
 800040c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800040e:	f000 ff2b 	bl	8001268 <__ledf2>
 8000412:	2800      	cmp	r0, #0
 8000414:	d401      	bmi.n	800041a <__aeabi_cdcmpeq+0xe>
 8000416:	2100      	movs	r1, #0
 8000418:	42c8      	cmn	r0, r1
 800041a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800041c <__aeabi_dcmpeq>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f000 fe7b 	bl	8001118 <__eqdf2>
 8000422:	4240      	negs	r0, r0
 8000424:	3001      	adds	r0, #1
 8000426:	bd10      	pop	{r4, pc}

08000428 <__aeabi_dcmplt>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 ff1d 	bl	8001268 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	db01      	blt.n	8000436 <__aeabi_dcmplt+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_dcmple>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 ff13 	bl	8001268 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dd01      	ble.n	800044a <__aeabi_dcmple+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_dcmpgt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 fea3 	bl	800119c <__gedf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	dc01      	bgt.n	800045e <__aeabi_dcmpgt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_dcmpge>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 fe99 	bl	800119c <__gedf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	da01      	bge.n	8000472 <__aeabi_dcmpge+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_d2uiz>:
 8000478:	b570      	push	{r4, r5, r6, lr}
 800047a:	2200      	movs	r2, #0
 800047c:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <__aeabi_d2uiz+0x38>)
 800047e:	0004      	movs	r4, r0
 8000480:	000d      	movs	r5, r1
 8000482:	f7ff ffef 	bl	8000464 <__aeabi_dcmpge>
 8000486:	2800      	cmp	r0, #0
 8000488:	d104      	bne.n	8000494 <__aeabi_d2uiz+0x1c>
 800048a:	0020      	movs	r0, r4
 800048c:	0029      	movs	r1, r5
 800048e:	f001 fd6b 	bl	8001f68 <__aeabi_d2iz>
 8000492:	bd70      	pop	{r4, r5, r6, pc}
 8000494:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <__aeabi_d2uiz+0x38>)
 8000496:	2200      	movs	r2, #0
 8000498:	0020      	movs	r0, r4
 800049a:	0029      	movs	r1, r5
 800049c:	f001 f9b4 	bl	8001808 <__aeabi_dsub>
 80004a0:	f001 fd62 	bl	8001f68 <__aeabi_d2iz>
 80004a4:	2380      	movs	r3, #128	; 0x80
 80004a6:	061b      	lsls	r3, r3, #24
 80004a8:	469c      	mov	ip, r3
 80004aa:	4460      	add	r0, ip
 80004ac:	e7f1      	b.n	8000492 <__aeabi_d2uiz+0x1a>
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	41e00000 	.word	0x41e00000

080004b4 <__aeabi_dadd>:
 80004b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b6:	464f      	mov	r7, r9
 80004b8:	4646      	mov	r6, r8
 80004ba:	46d6      	mov	lr, sl
 80004bc:	000d      	movs	r5, r1
 80004be:	0004      	movs	r4, r0
 80004c0:	b5c0      	push	{r6, r7, lr}
 80004c2:	001f      	movs	r7, r3
 80004c4:	0011      	movs	r1, r2
 80004c6:	0328      	lsls	r0, r5, #12
 80004c8:	0f62      	lsrs	r2, r4, #29
 80004ca:	0a40      	lsrs	r0, r0, #9
 80004cc:	4310      	orrs	r0, r2
 80004ce:	007a      	lsls	r2, r7, #1
 80004d0:	0d52      	lsrs	r2, r2, #21
 80004d2:	00e3      	lsls	r3, r4, #3
 80004d4:	033c      	lsls	r4, r7, #12
 80004d6:	4691      	mov	r9, r2
 80004d8:	0a64      	lsrs	r4, r4, #9
 80004da:	0ffa      	lsrs	r2, r7, #31
 80004dc:	0f4f      	lsrs	r7, r1, #29
 80004de:	006e      	lsls	r6, r5, #1
 80004e0:	4327      	orrs	r7, r4
 80004e2:	4692      	mov	sl, r2
 80004e4:	46b8      	mov	r8, r7
 80004e6:	0d76      	lsrs	r6, r6, #21
 80004e8:	0fed      	lsrs	r5, r5, #31
 80004ea:	00c9      	lsls	r1, r1, #3
 80004ec:	4295      	cmp	r5, r2
 80004ee:	d100      	bne.n	80004f2 <__aeabi_dadd+0x3e>
 80004f0:	e099      	b.n	8000626 <__aeabi_dadd+0x172>
 80004f2:	464c      	mov	r4, r9
 80004f4:	1b34      	subs	r4, r6, r4
 80004f6:	46a4      	mov	ip, r4
 80004f8:	2c00      	cmp	r4, #0
 80004fa:	dc00      	bgt.n	80004fe <__aeabi_dadd+0x4a>
 80004fc:	e07c      	b.n	80005f8 <__aeabi_dadd+0x144>
 80004fe:	464a      	mov	r2, r9
 8000500:	2a00      	cmp	r2, #0
 8000502:	d100      	bne.n	8000506 <__aeabi_dadd+0x52>
 8000504:	e0b8      	b.n	8000678 <__aeabi_dadd+0x1c4>
 8000506:	4ac5      	ldr	r2, [pc, #788]	; (800081c <__aeabi_dadd+0x368>)
 8000508:	4296      	cmp	r6, r2
 800050a:	d100      	bne.n	800050e <__aeabi_dadd+0x5a>
 800050c:	e11c      	b.n	8000748 <__aeabi_dadd+0x294>
 800050e:	2280      	movs	r2, #128	; 0x80
 8000510:	003c      	movs	r4, r7
 8000512:	0412      	lsls	r2, r2, #16
 8000514:	4314      	orrs	r4, r2
 8000516:	46a0      	mov	r8, r4
 8000518:	4662      	mov	r2, ip
 800051a:	2a38      	cmp	r2, #56	; 0x38
 800051c:	dd00      	ble.n	8000520 <__aeabi_dadd+0x6c>
 800051e:	e161      	b.n	80007e4 <__aeabi_dadd+0x330>
 8000520:	2a1f      	cmp	r2, #31
 8000522:	dd00      	ble.n	8000526 <__aeabi_dadd+0x72>
 8000524:	e1cc      	b.n	80008c0 <__aeabi_dadd+0x40c>
 8000526:	4664      	mov	r4, ip
 8000528:	2220      	movs	r2, #32
 800052a:	1b12      	subs	r2, r2, r4
 800052c:	4644      	mov	r4, r8
 800052e:	4094      	lsls	r4, r2
 8000530:	000f      	movs	r7, r1
 8000532:	46a1      	mov	r9, r4
 8000534:	4664      	mov	r4, ip
 8000536:	4091      	lsls	r1, r2
 8000538:	40e7      	lsrs	r7, r4
 800053a:	464c      	mov	r4, r9
 800053c:	1e4a      	subs	r2, r1, #1
 800053e:	4191      	sbcs	r1, r2
 8000540:	433c      	orrs	r4, r7
 8000542:	4642      	mov	r2, r8
 8000544:	4321      	orrs	r1, r4
 8000546:	4664      	mov	r4, ip
 8000548:	40e2      	lsrs	r2, r4
 800054a:	1a80      	subs	r0, r0, r2
 800054c:	1a5c      	subs	r4, r3, r1
 800054e:	42a3      	cmp	r3, r4
 8000550:	419b      	sbcs	r3, r3
 8000552:	425f      	negs	r7, r3
 8000554:	1bc7      	subs	r7, r0, r7
 8000556:	023b      	lsls	r3, r7, #8
 8000558:	d400      	bmi.n	800055c <__aeabi_dadd+0xa8>
 800055a:	e0d0      	b.n	80006fe <__aeabi_dadd+0x24a>
 800055c:	027f      	lsls	r7, r7, #9
 800055e:	0a7f      	lsrs	r7, r7, #9
 8000560:	2f00      	cmp	r7, #0
 8000562:	d100      	bne.n	8000566 <__aeabi_dadd+0xb2>
 8000564:	e0ff      	b.n	8000766 <__aeabi_dadd+0x2b2>
 8000566:	0038      	movs	r0, r7
 8000568:	f001 fd64 	bl	8002034 <__clzsi2>
 800056c:	0001      	movs	r1, r0
 800056e:	3908      	subs	r1, #8
 8000570:	2320      	movs	r3, #32
 8000572:	0022      	movs	r2, r4
 8000574:	1a5b      	subs	r3, r3, r1
 8000576:	408f      	lsls	r7, r1
 8000578:	40da      	lsrs	r2, r3
 800057a:	408c      	lsls	r4, r1
 800057c:	4317      	orrs	r7, r2
 800057e:	42b1      	cmp	r1, r6
 8000580:	da00      	bge.n	8000584 <__aeabi_dadd+0xd0>
 8000582:	e0ff      	b.n	8000784 <__aeabi_dadd+0x2d0>
 8000584:	1b89      	subs	r1, r1, r6
 8000586:	1c4b      	adds	r3, r1, #1
 8000588:	2b1f      	cmp	r3, #31
 800058a:	dd00      	ble.n	800058e <__aeabi_dadd+0xda>
 800058c:	e0a8      	b.n	80006e0 <__aeabi_dadd+0x22c>
 800058e:	2220      	movs	r2, #32
 8000590:	0039      	movs	r1, r7
 8000592:	1ad2      	subs	r2, r2, r3
 8000594:	0020      	movs	r0, r4
 8000596:	4094      	lsls	r4, r2
 8000598:	4091      	lsls	r1, r2
 800059a:	40d8      	lsrs	r0, r3
 800059c:	1e62      	subs	r2, r4, #1
 800059e:	4194      	sbcs	r4, r2
 80005a0:	40df      	lsrs	r7, r3
 80005a2:	2600      	movs	r6, #0
 80005a4:	4301      	orrs	r1, r0
 80005a6:	430c      	orrs	r4, r1
 80005a8:	0763      	lsls	r3, r4, #29
 80005aa:	d009      	beq.n	80005c0 <__aeabi_dadd+0x10c>
 80005ac:	230f      	movs	r3, #15
 80005ae:	4023      	ands	r3, r4
 80005b0:	2b04      	cmp	r3, #4
 80005b2:	d005      	beq.n	80005c0 <__aeabi_dadd+0x10c>
 80005b4:	1d23      	adds	r3, r4, #4
 80005b6:	42a3      	cmp	r3, r4
 80005b8:	41a4      	sbcs	r4, r4
 80005ba:	4264      	negs	r4, r4
 80005bc:	193f      	adds	r7, r7, r4
 80005be:	001c      	movs	r4, r3
 80005c0:	023b      	lsls	r3, r7, #8
 80005c2:	d400      	bmi.n	80005c6 <__aeabi_dadd+0x112>
 80005c4:	e09e      	b.n	8000704 <__aeabi_dadd+0x250>
 80005c6:	4b95      	ldr	r3, [pc, #596]	; (800081c <__aeabi_dadd+0x368>)
 80005c8:	3601      	adds	r6, #1
 80005ca:	429e      	cmp	r6, r3
 80005cc:	d100      	bne.n	80005d0 <__aeabi_dadd+0x11c>
 80005ce:	e0b7      	b.n	8000740 <__aeabi_dadd+0x28c>
 80005d0:	4a93      	ldr	r2, [pc, #588]	; (8000820 <__aeabi_dadd+0x36c>)
 80005d2:	08e4      	lsrs	r4, r4, #3
 80005d4:	4017      	ands	r7, r2
 80005d6:	077b      	lsls	r3, r7, #29
 80005d8:	0571      	lsls	r1, r6, #21
 80005da:	027f      	lsls	r7, r7, #9
 80005dc:	4323      	orrs	r3, r4
 80005de:	0b3f      	lsrs	r7, r7, #12
 80005e0:	0d4a      	lsrs	r2, r1, #21
 80005e2:	0512      	lsls	r2, r2, #20
 80005e4:	433a      	orrs	r2, r7
 80005e6:	07ed      	lsls	r5, r5, #31
 80005e8:	432a      	orrs	r2, r5
 80005ea:	0018      	movs	r0, r3
 80005ec:	0011      	movs	r1, r2
 80005ee:	bce0      	pop	{r5, r6, r7}
 80005f0:	46ba      	mov	sl, r7
 80005f2:	46b1      	mov	r9, r6
 80005f4:	46a8      	mov	r8, r5
 80005f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f8:	2c00      	cmp	r4, #0
 80005fa:	d04b      	beq.n	8000694 <__aeabi_dadd+0x1e0>
 80005fc:	464c      	mov	r4, r9
 80005fe:	1ba4      	subs	r4, r4, r6
 8000600:	46a4      	mov	ip, r4
 8000602:	2e00      	cmp	r6, #0
 8000604:	d000      	beq.n	8000608 <__aeabi_dadd+0x154>
 8000606:	e123      	b.n	8000850 <__aeabi_dadd+0x39c>
 8000608:	0004      	movs	r4, r0
 800060a:	431c      	orrs	r4, r3
 800060c:	d100      	bne.n	8000610 <__aeabi_dadd+0x15c>
 800060e:	e1af      	b.n	8000970 <__aeabi_dadd+0x4bc>
 8000610:	4662      	mov	r2, ip
 8000612:	1e54      	subs	r4, r2, #1
 8000614:	2a01      	cmp	r2, #1
 8000616:	d100      	bne.n	800061a <__aeabi_dadd+0x166>
 8000618:	e215      	b.n	8000a46 <__aeabi_dadd+0x592>
 800061a:	4d80      	ldr	r5, [pc, #512]	; (800081c <__aeabi_dadd+0x368>)
 800061c:	45ac      	cmp	ip, r5
 800061e:	d100      	bne.n	8000622 <__aeabi_dadd+0x16e>
 8000620:	e1c8      	b.n	80009b4 <__aeabi_dadd+0x500>
 8000622:	46a4      	mov	ip, r4
 8000624:	e11b      	b.n	800085e <__aeabi_dadd+0x3aa>
 8000626:	464a      	mov	r2, r9
 8000628:	1ab2      	subs	r2, r6, r2
 800062a:	4694      	mov	ip, r2
 800062c:	2a00      	cmp	r2, #0
 800062e:	dc00      	bgt.n	8000632 <__aeabi_dadd+0x17e>
 8000630:	e0ac      	b.n	800078c <__aeabi_dadd+0x2d8>
 8000632:	464a      	mov	r2, r9
 8000634:	2a00      	cmp	r2, #0
 8000636:	d043      	beq.n	80006c0 <__aeabi_dadd+0x20c>
 8000638:	4a78      	ldr	r2, [pc, #480]	; (800081c <__aeabi_dadd+0x368>)
 800063a:	4296      	cmp	r6, r2
 800063c:	d100      	bne.n	8000640 <__aeabi_dadd+0x18c>
 800063e:	e1af      	b.n	80009a0 <__aeabi_dadd+0x4ec>
 8000640:	2280      	movs	r2, #128	; 0x80
 8000642:	003c      	movs	r4, r7
 8000644:	0412      	lsls	r2, r2, #16
 8000646:	4314      	orrs	r4, r2
 8000648:	46a0      	mov	r8, r4
 800064a:	4662      	mov	r2, ip
 800064c:	2a38      	cmp	r2, #56	; 0x38
 800064e:	dc67      	bgt.n	8000720 <__aeabi_dadd+0x26c>
 8000650:	2a1f      	cmp	r2, #31
 8000652:	dc00      	bgt.n	8000656 <__aeabi_dadd+0x1a2>
 8000654:	e15f      	b.n	8000916 <__aeabi_dadd+0x462>
 8000656:	4647      	mov	r7, r8
 8000658:	3a20      	subs	r2, #32
 800065a:	40d7      	lsrs	r7, r2
 800065c:	4662      	mov	r2, ip
 800065e:	2a20      	cmp	r2, #32
 8000660:	d005      	beq.n	800066e <__aeabi_dadd+0x1ba>
 8000662:	4664      	mov	r4, ip
 8000664:	2240      	movs	r2, #64	; 0x40
 8000666:	1b12      	subs	r2, r2, r4
 8000668:	4644      	mov	r4, r8
 800066a:	4094      	lsls	r4, r2
 800066c:	4321      	orrs	r1, r4
 800066e:	1e4a      	subs	r2, r1, #1
 8000670:	4191      	sbcs	r1, r2
 8000672:	000c      	movs	r4, r1
 8000674:	433c      	orrs	r4, r7
 8000676:	e057      	b.n	8000728 <__aeabi_dadd+0x274>
 8000678:	003a      	movs	r2, r7
 800067a:	430a      	orrs	r2, r1
 800067c:	d100      	bne.n	8000680 <__aeabi_dadd+0x1cc>
 800067e:	e105      	b.n	800088c <__aeabi_dadd+0x3d8>
 8000680:	0022      	movs	r2, r4
 8000682:	3a01      	subs	r2, #1
 8000684:	2c01      	cmp	r4, #1
 8000686:	d100      	bne.n	800068a <__aeabi_dadd+0x1d6>
 8000688:	e182      	b.n	8000990 <__aeabi_dadd+0x4dc>
 800068a:	4c64      	ldr	r4, [pc, #400]	; (800081c <__aeabi_dadd+0x368>)
 800068c:	45a4      	cmp	ip, r4
 800068e:	d05b      	beq.n	8000748 <__aeabi_dadd+0x294>
 8000690:	4694      	mov	ip, r2
 8000692:	e741      	b.n	8000518 <__aeabi_dadd+0x64>
 8000694:	4c63      	ldr	r4, [pc, #396]	; (8000824 <__aeabi_dadd+0x370>)
 8000696:	1c77      	adds	r7, r6, #1
 8000698:	4227      	tst	r7, r4
 800069a:	d000      	beq.n	800069e <__aeabi_dadd+0x1ea>
 800069c:	e0c4      	b.n	8000828 <__aeabi_dadd+0x374>
 800069e:	0004      	movs	r4, r0
 80006a0:	431c      	orrs	r4, r3
 80006a2:	2e00      	cmp	r6, #0
 80006a4:	d000      	beq.n	80006a8 <__aeabi_dadd+0x1f4>
 80006a6:	e169      	b.n	800097c <__aeabi_dadd+0x4c8>
 80006a8:	2c00      	cmp	r4, #0
 80006aa:	d100      	bne.n	80006ae <__aeabi_dadd+0x1fa>
 80006ac:	e1bf      	b.n	8000a2e <__aeabi_dadd+0x57a>
 80006ae:	4644      	mov	r4, r8
 80006b0:	430c      	orrs	r4, r1
 80006b2:	d000      	beq.n	80006b6 <__aeabi_dadd+0x202>
 80006b4:	e1d0      	b.n	8000a58 <__aeabi_dadd+0x5a4>
 80006b6:	0742      	lsls	r2, r0, #29
 80006b8:	08db      	lsrs	r3, r3, #3
 80006ba:	4313      	orrs	r3, r2
 80006bc:	08c0      	lsrs	r0, r0, #3
 80006be:	e029      	b.n	8000714 <__aeabi_dadd+0x260>
 80006c0:	003a      	movs	r2, r7
 80006c2:	430a      	orrs	r2, r1
 80006c4:	d100      	bne.n	80006c8 <__aeabi_dadd+0x214>
 80006c6:	e170      	b.n	80009aa <__aeabi_dadd+0x4f6>
 80006c8:	4662      	mov	r2, ip
 80006ca:	4664      	mov	r4, ip
 80006cc:	3a01      	subs	r2, #1
 80006ce:	2c01      	cmp	r4, #1
 80006d0:	d100      	bne.n	80006d4 <__aeabi_dadd+0x220>
 80006d2:	e0e0      	b.n	8000896 <__aeabi_dadd+0x3e2>
 80006d4:	4c51      	ldr	r4, [pc, #324]	; (800081c <__aeabi_dadd+0x368>)
 80006d6:	45a4      	cmp	ip, r4
 80006d8:	d100      	bne.n	80006dc <__aeabi_dadd+0x228>
 80006da:	e161      	b.n	80009a0 <__aeabi_dadd+0x4ec>
 80006dc:	4694      	mov	ip, r2
 80006de:	e7b4      	b.n	800064a <__aeabi_dadd+0x196>
 80006e0:	003a      	movs	r2, r7
 80006e2:	391f      	subs	r1, #31
 80006e4:	40ca      	lsrs	r2, r1
 80006e6:	0011      	movs	r1, r2
 80006e8:	2b20      	cmp	r3, #32
 80006ea:	d003      	beq.n	80006f4 <__aeabi_dadd+0x240>
 80006ec:	2240      	movs	r2, #64	; 0x40
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	409f      	lsls	r7, r3
 80006f2:	433c      	orrs	r4, r7
 80006f4:	1e63      	subs	r3, r4, #1
 80006f6:	419c      	sbcs	r4, r3
 80006f8:	2700      	movs	r7, #0
 80006fa:	2600      	movs	r6, #0
 80006fc:	430c      	orrs	r4, r1
 80006fe:	0763      	lsls	r3, r4, #29
 8000700:	d000      	beq.n	8000704 <__aeabi_dadd+0x250>
 8000702:	e753      	b.n	80005ac <__aeabi_dadd+0xf8>
 8000704:	46b4      	mov	ip, r6
 8000706:	08e4      	lsrs	r4, r4, #3
 8000708:	077b      	lsls	r3, r7, #29
 800070a:	4323      	orrs	r3, r4
 800070c:	08f8      	lsrs	r0, r7, #3
 800070e:	4a43      	ldr	r2, [pc, #268]	; (800081c <__aeabi_dadd+0x368>)
 8000710:	4594      	cmp	ip, r2
 8000712:	d01d      	beq.n	8000750 <__aeabi_dadd+0x29c>
 8000714:	4662      	mov	r2, ip
 8000716:	0307      	lsls	r7, r0, #12
 8000718:	0552      	lsls	r2, r2, #21
 800071a:	0b3f      	lsrs	r7, r7, #12
 800071c:	0d52      	lsrs	r2, r2, #21
 800071e:	e760      	b.n	80005e2 <__aeabi_dadd+0x12e>
 8000720:	4644      	mov	r4, r8
 8000722:	430c      	orrs	r4, r1
 8000724:	1e62      	subs	r2, r4, #1
 8000726:	4194      	sbcs	r4, r2
 8000728:	18e4      	adds	r4, r4, r3
 800072a:	429c      	cmp	r4, r3
 800072c:	419b      	sbcs	r3, r3
 800072e:	425f      	negs	r7, r3
 8000730:	183f      	adds	r7, r7, r0
 8000732:	023b      	lsls	r3, r7, #8
 8000734:	d5e3      	bpl.n	80006fe <__aeabi_dadd+0x24a>
 8000736:	4b39      	ldr	r3, [pc, #228]	; (800081c <__aeabi_dadd+0x368>)
 8000738:	3601      	adds	r6, #1
 800073a:	429e      	cmp	r6, r3
 800073c:	d000      	beq.n	8000740 <__aeabi_dadd+0x28c>
 800073e:	e0b5      	b.n	80008ac <__aeabi_dadd+0x3f8>
 8000740:	0032      	movs	r2, r6
 8000742:	2700      	movs	r7, #0
 8000744:	2300      	movs	r3, #0
 8000746:	e74c      	b.n	80005e2 <__aeabi_dadd+0x12e>
 8000748:	0742      	lsls	r2, r0, #29
 800074a:	08db      	lsrs	r3, r3, #3
 800074c:	4313      	orrs	r3, r2
 800074e:	08c0      	lsrs	r0, r0, #3
 8000750:	001a      	movs	r2, r3
 8000752:	4302      	orrs	r2, r0
 8000754:	d100      	bne.n	8000758 <__aeabi_dadd+0x2a4>
 8000756:	e1e1      	b.n	8000b1c <__aeabi_dadd+0x668>
 8000758:	2780      	movs	r7, #128	; 0x80
 800075a:	033f      	lsls	r7, r7, #12
 800075c:	4307      	orrs	r7, r0
 800075e:	033f      	lsls	r7, r7, #12
 8000760:	4a2e      	ldr	r2, [pc, #184]	; (800081c <__aeabi_dadd+0x368>)
 8000762:	0b3f      	lsrs	r7, r7, #12
 8000764:	e73d      	b.n	80005e2 <__aeabi_dadd+0x12e>
 8000766:	0020      	movs	r0, r4
 8000768:	f001 fc64 	bl	8002034 <__clzsi2>
 800076c:	0001      	movs	r1, r0
 800076e:	3118      	adds	r1, #24
 8000770:	291f      	cmp	r1, #31
 8000772:	dc00      	bgt.n	8000776 <__aeabi_dadd+0x2c2>
 8000774:	e6fc      	b.n	8000570 <__aeabi_dadd+0xbc>
 8000776:	3808      	subs	r0, #8
 8000778:	4084      	lsls	r4, r0
 800077a:	0027      	movs	r7, r4
 800077c:	2400      	movs	r4, #0
 800077e:	42b1      	cmp	r1, r6
 8000780:	db00      	blt.n	8000784 <__aeabi_dadd+0x2d0>
 8000782:	e6ff      	b.n	8000584 <__aeabi_dadd+0xd0>
 8000784:	4a26      	ldr	r2, [pc, #152]	; (8000820 <__aeabi_dadd+0x36c>)
 8000786:	1a76      	subs	r6, r6, r1
 8000788:	4017      	ands	r7, r2
 800078a:	e70d      	b.n	80005a8 <__aeabi_dadd+0xf4>
 800078c:	2a00      	cmp	r2, #0
 800078e:	d02f      	beq.n	80007f0 <__aeabi_dadd+0x33c>
 8000790:	464a      	mov	r2, r9
 8000792:	1b92      	subs	r2, r2, r6
 8000794:	4694      	mov	ip, r2
 8000796:	2e00      	cmp	r6, #0
 8000798:	d100      	bne.n	800079c <__aeabi_dadd+0x2e8>
 800079a:	e0ad      	b.n	80008f8 <__aeabi_dadd+0x444>
 800079c:	4a1f      	ldr	r2, [pc, #124]	; (800081c <__aeabi_dadd+0x368>)
 800079e:	4591      	cmp	r9, r2
 80007a0:	d100      	bne.n	80007a4 <__aeabi_dadd+0x2f0>
 80007a2:	e10f      	b.n	80009c4 <__aeabi_dadd+0x510>
 80007a4:	2280      	movs	r2, #128	; 0x80
 80007a6:	0412      	lsls	r2, r2, #16
 80007a8:	4310      	orrs	r0, r2
 80007aa:	4662      	mov	r2, ip
 80007ac:	2a38      	cmp	r2, #56	; 0x38
 80007ae:	dd00      	ble.n	80007b2 <__aeabi_dadd+0x2fe>
 80007b0:	e10f      	b.n	80009d2 <__aeabi_dadd+0x51e>
 80007b2:	2a1f      	cmp	r2, #31
 80007b4:	dd00      	ble.n	80007b8 <__aeabi_dadd+0x304>
 80007b6:	e180      	b.n	8000aba <__aeabi_dadd+0x606>
 80007b8:	4664      	mov	r4, ip
 80007ba:	2220      	movs	r2, #32
 80007bc:	001e      	movs	r6, r3
 80007be:	1b12      	subs	r2, r2, r4
 80007c0:	4667      	mov	r7, ip
 80007c2:	0004      	movs	r4, r0
 80007c4:	4093      	lsls	r3, r2
 80007c6:	4094      	lsls	r4, r2
 80007c8:	40fe      	lsrs	r6, r7
 80007ca:	1e5a      	subs	r2, r3, #1
 80007cc:	4193      	sbcs	r3, r2
 80007ce:	40f8      	lsrs	r0, r7
 80007d0:	4334      	orrs	r4, r6
 80007d2:	431c      	orrs	r4, r3
 80007d4:	4480      	add	r8, r0
 80007d6:	1864      	adds	r4, r4, r1
 80007d8:	428c      	cmp	r4, r1
 80007da:	41bf      	sbcs	r7, r7
 80007dc:	427f      	negs	r7, r7
 80007de:	464e      	mov	r6, r9
 80007e0:	4447      	add	r7, r8
 80007e2:	e7a6      	b.n	8000732 <__aeabi_dadd+0x27e>
 80007e4:	4642      	mov	r2, r8
 80007e6:	430a      	orrs	r2, r1
 80007e8:	0011      	movs	r1, r2
 80007ea:	1e4a      	subs	r2, r1, #1
 80007ec:	4191      	sbcs	r1, r2
 80007ee:	e6ad      	b.n	800054c <__aeabi_dadd+0x98>
 80007f0:	4c0c      	ldr	r4, [pc, #48]	; (8000824 <__aeabi_dadd+0x370>)
 80007f2:	1c72      	adds	r2, r6, #1
 80007f4:	4222      	tst	r2, r4
 80007f6:	d000      	beq.n	80007fa <__aeabi_dadd+0x346>
 80007f8:	e0a1      	b.n	800093e <__aeabi_dadd+0x48a>
 80007fa:	0002      	movs	r2, r0
 80007fc:	431a      	orrs	r2, r3
 80007fe:	2e00      	cmp	r6, #0
 8000800:	d000      	beq.n	8000804 <__aeabi_dadd+0x350>
 8000802:	e0fa      	b.n	80009fa <__aeabi_dadd+0x546>
 8000804:	2a00      	cmp	r2, #0
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x356>
 8000808:	e145      	b.n	8000a96 <__aeabi_dadd+0x5e2>
 800080a:	003a      	movs	r2, r7
 800080c:	430a      	orrs	r2, r1
 800080e:	d000      	beq.n	8000812 <__aeabi_dadd+0x35e>
 8000810:	e146      	b.n	8000aa0 <__aeabi_dadd+0x5ec>
 8000812:	0742      	lsls	r2, r0, #29
 8000814:	08db      	lsrs	r3, r3, #3
 8000816:	4313      	orrs	r3, r2
 8000818:	08c0      	lsrs	r0, r0, #3
 800081a:	e77b      	b.n	8000714 <__aeabi_dadd+0x260>
 800081c:	000007ff 	.word	0x000007ff
 8000820:	ff7fffff 	.word	0xff7fffff
 8000824:	000007fe 	.word	0x000007fe
 8000828:	4647      	mov	r7, r8
 800082a:	1a5c      	subs	r4, r3, r1
 800082c:	1bc2      	subs	r2, r0, r7
 800082e:	42a3      	cmp	r3, r4
 8000830:	41bf      	sbcs	r7, r7
 8000832:	427f      	negs	r7, r7
 8000834:	46b9      	mov	r9, r7
 8000836:	0017      	movs	r7, r2
 8000838:	464a      	mov	r2, r9
 800083a:	1abf      	subs	r7, r7, r2
 800083c:	023a      	lsls	r2, r7, #8
 800083e:	d500      	bpl.n	8000842 <__aeabi_dadd+0x38e>
 8000840:	e08d      	b.n	800095e <__aeabi_dadd+0x4aa>
 8000842:	0023      	movs	r3, r4
 8000844:	433b      	orrs	r3, r7
 8000846:	d000      	beq.n	800084a <__aeabi_dadd+0x396>
 8000848:	e68a      	b.n	8000560 <__aeabi_dadd+0xac>
 800084a:	2000      	movs	r0, #0
 800084c:	2500      	movs	r5, #0
 800084e:	e761      	b.n	8000714 <__aeabi_dadd+0x260>
 8000850:	4cb4      	ldr	r4, [pc, #720]	; (8000b24 <__aeabi_dadd+0x670>)
 8000852:	45a1      	cmp	r9, r4
 8000854:	d100      	bne.n	8000858 <__aeabi_dadd+0x3a4>
 8000856:	e0ad      	b.n	80009b4 <__aeabi_dadd+0x500>
 8000858:	2480      	movs	r4, #128	; 0x80
 800085a:	0424      	lsls	r4, r4, #16
 800085c:	4320      	orrs	r0, r4
 800085e:	4664      	mov	r4, ip
 8000860:	2c38      	cmp	r4, #56	; 0x38
 8000862:	dc3d      	bgt.n	80008e0 <__aeabi_dadd+0x42c>
 8000864:	4662      	mov	r2, ip
 8000866:	2c1f      	cmp	r4, #31
 8000868:	dd00      	ble.n	800086c <__aeabi_dadd+0x3b8>
 800086a:	e0b7      	b.n	80009dc <__aeabi_dadd+0x528>
 800086c:	2520      	movs	r5, #32
 800086e:	001e      	movs	r6, r3
 8000870:	1b2d      	subs	r5, r5, r4
 8000872:	0004      	movs	r4, r0
 8000874:	40ab      	lsls	r3, r5
 8000876:	40ac      	lsls	r4, r5
 8000878:	40d6      	lsrs	r6, r2
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4642      	mov	r2, r8
 800087e:	1e5d      	subs	r5, r3, #1
 8000880:	41ab      	sbcs	r3, r5
 8000882:	4334      	orrs	r4, r6
 8000884:	1a12      	subs	r2, r2, r0
 8000886:	4690      	mov	r8, r2
 8000888:	4323      	orrs	r3, r4
 800088a:	e02c      	b.n	80008e6 <__aeabi_dadd+0x432>
 800088c:	0742      	lsls	r2, r0, #29
 800088e:	08db      	lsrs	r3, r3, #3
 8000890:	4313      	orrs	r3, r2
 8000892:	08c0      	lsrs	r0, r0, #3
 8000894:	e73b      	b.n	800070e <__aeabi_dadd+0x25a>
 8000896:	185c      	adds	r4, r3, r1
 8000898:	429c      	cmp	r4, r3
 800089a:	419b      	sbcs	r3, r3
 800089c:	4440      	add	r0, r8
 800089e:	425b      	negs	r3, r3
 80008a0:	18c7      	adds	r7, r0, r3
 80008a2:	2601      	movs	r6, #1
 80008a4:	023b      	lsls	r3, r7, #8
 80008a6:	d400      	bmi.n	80008aa <__aeabi_dadd+0x3f6>
 80008a8:	e729      	b.n	80006fe <__aeabi_dadd+0x24a>
 80008aa:	2602      	movs	r6, #2
 80008ac:	4a9e      	ldr	r2, [pc, #632]	; (8000b28 <__aeabi_dadd+0x674>)
 80008ae:	0863      	lsrs	r3, r4, #1
 80008b0:	4017      	ands	r7, r2
 80008b2:	2201      	movs	r2, #1
 80008b4:	4014      	ands	r4, r2
 80008b6:	431c      	orrs	r4, r3
 80008b8:	07fb      	lsls	r3, r7, #31
 80008ba:	431c      	orrs	r4, r3
 80008bc:	087f      	lsrs	r7, r7, #1
 80008be:	e673      	b.n	80005a8 <__aeabi_dadd+0xf4>
 80008c0:	4644      	mov	r4, r8
 80008c2:	3a20      	subs	r2, #32
 80008c4:	40d4      	lsrs	r4, r2
 80008c6:	4662      	mov	r2, ip
 80008c8:	2a20      	cmp	r2, #32
 80008ca:	d005      	beq.n	80008d8 <__aeabi_dadd+0x424>
 80008cc:	4667      	mov	r7, ip
 80008ce:	2240      	movs	r2, #64	; 0x40
 80008d0:	1bd2      	subs	r2, r2, r7
 80008d2:	4647      	mov	r7, r8
 80008d4:	4097      	lsls	r7, r2
 80008d6:	4339      	orrs	r1, r7
 80008d8:	1e4a      	subs	r2, r1, #1
 80008da:	4191      	sbcs	r1, r2
 80008dc:	4321      	orrs	r1, r4
 80008de:	e635      	b.n	800054c <__aeabi_dadd+0x98>
 80008e0:	4303      	orrs	r3, r0
 80008e2:	1e58      	subs	r0, r3, #1
 80008e4:	4183      	sbcs	r3, r0
 80008e6:	1acc      	subs	r4, r1, r3
 80008e8:	42a1      	cmp	r1, r4
 80008ea:	41bf      	sbcs	r7, r7
 80008ec:	4643      	mov	r3, r8
 80008ee:	427f      	negs	r7, r7
 80008f0:	4655      	mov	r5, sl
 80008f2:	464e      	mov	r6, r9
 80008f4:	1bdf      	subs	r7, r3, r7
 80008f6:	e62e      	b.n	8000556 <__aeabi_dadd+0xa2>
 80008f8:	0002      	movs	r2, r0
 80008fa:	431a      	orrs	r2, r3
 80008fc:	d100      	bne.n	8000900 <__aeabi_dadd+0x44c>
 80008fe:	e0bd      	b.n	8000a7c <__aeabi_dadd+0x5c8>
 8000900:	4662      	mov	r2, ip
 8000902:	4664      	mov	r4, ip
 8000904:	3a01      	subs	r2, #1
 8000906:	2c01      	cmp	r4, #1
 8000908:	d100      	bne.n	800090c <__aeabi_dadd+0x458>
 800090a:	e0e5      	b.n	8000ad8 <__aeabi_dadd+0x624>
 800090c:	4c85      	ldr	r4, [pc, #532]	; (8000b24 <__aeabi_dadd+0x670>)
 800090e:	45a4      	cmp	ip, r4
 8000910:	d058      	beq.n	80009c4 <__aeabi_dadd+0x510>
 8000912:	4694      	mov	ip, r2
 8000914:	e749      	b.n	80007aa <__aeabi_dadd+0x2f6>
 8000916:	4664      	mov	r4, ip
 8000918:	2220      	movs	r2, #32
 800091a:	1b12      	subs	r2, r2, r4
 800091c:	4644      	mov	r4, r8
 800091e:	4094      	lsls	r4, r2
 8000920:	000f      	movs	r7, r1
 8000922:	46a1      	mov	r9, r4
 8000924:	4664      	mov	r4, ip
 8000926:	4091      	lsls	r1, r2
 8000928:	40e7      	lsrs	r7, r4
 800092a:	464c      	mov	r4, r9
 800092c:	1e4a      	subs	r2, r1, #1
 800092e:	4191      	sbcs	r1, r2
 8000930:	433c      	orrs	r4, r7
 8000932:	4642      	mov	r2, r8
 8000934:	430c      	orrs	r4, r1
 8000936:	4661      	mov	r1, ip
 8000938:	40ca      	lsrs	r2, r1
 800093a:	1880      	adds	r0, r0, r2
 800093c:	e6f4      	b.n	8000728 <__aeabi_dadd+0x274>
 800093e:	4c79      	ldr	r4, [pc, #484]	; (8000b24 <__aeabi_dadd+0x670>)
 8000940:	42a2      	cmp	r2, r4
 8000942:	d100      	bne.n	8000946 <__aeabi_dadd+0x492>
 8000944:	e6fd      	b.n	8000742 <__aeabi_dadd+0x28e>
 8000946:	1859      	adds	r1, r3, r1
 8000948:	4299      	cmp	r1, r3
 800094a:	419b      	sbcs	r3, r3
 800094c:	4440      	add	r0, r8
 800094e:	425f      	negs	r7, r3
 8000950:	19c7      	adds	r7, r0, r7
 8000952:	07fc      	lsls	r4, r7, #31
 8000954:	0849      	lsrs	r1, r1, #1
 8000956:	0016      	movs	r6, r2
 8000958:	430c      	orrs	r4, r1
 800095a:	087f      	lsrs	r7, r7, #1
 800095c:	e6cf      	b.n	80006fe <__aeabi_dadd+0x24a>
 800095e:	1acc      	subs	r4, r1, r3
 8000960:	42a1      	cmp	r1, r4
 8000962:	41bf      	sbcs	r7, r7
 8000964:	4643      	mov	r3, r8
 8000966:	427f      	negs	r7, r7
 8000968:	1a18      	subs	r0, r3, r0
 800096a:	4655      	mov	r5, sl
 800096c:	1bc7      	subs	r7, r0, r7
 800096e:	e5f7      	b.n	8000560 <__aeabi_dadd+0xac>
 8000970:	08c9      	lsrs	r1, r1, #3
 8000972:	077b      	lsls	r3, r7, #29
 8000974:	4655      	mov	r5, sl
 8000976:	430b      	orrs	r3, r1
 8000978:	08f8      	lsrs	r0, r7, #3
 800097a:	e6c8      	b.n	800070e <__aeabi_dadd+0x25a>
 800097c:	2c00      	cmp	r4, #0
 800097e:	d000      	beq.n	8000982 <__aeabi_dadd+0x4ce>
 8000980:	e081      	b.n	8000a86 <__aeabi_dadd+0x5d2>
 8000982:	4643      	mov	r3, r8
 8000984:	430b      	orrs	r3, r1
 8000986:	d115      	bne.n	80009b4 <__aeabi_dadd+0x500>
 8000988:	2080      	movs	r0, #128	; 0x80
 800098a:	2500      	movs	r5, #0
 800098c:	0300      	lsls	r0, r0, #12
 800098e:	e6e3      	b.n	8000758 <__aeabi_dadd+0x2a4>
 8000990:	1a5c      	subs	r4, r3, r1
 8000992:	42a3      	cmp	r3, r4
 8000994:	419b      	sbcs	r3, r3
 8000996:	1bc7      	subs	r7, r0, r7
 8000998:	425b      	negs	r3, r3
 800099a:	2601      	movs	r6, #1
 800099c:	1aff      	subs	r7, r7, r3
 800099e:	e5da      	b.n	8000556 <__aeabi_dadd+0xa2>
 80009a0:	0742      	lsls	r2, r0, #29
 80009a2:	08db      	lsrs	r3, r3, #3
 80009a4:	4313      	orrs	r3, r2
 80009a6:	08c0      	lsrs	r0, r0, #3
 80009a8:	e6d2      	b.n	8000750 <__aeabi_dadd+0x29c>
 80009aa:	0742      	lsls	r2, r0, #29
 80009ac:	08db      	lsrs	r3, r3, #3
 80009ae:	4313      	orrs	r3, r2
 80009b0:	08c0      	lsrs	r0, r0, #3
 80009b2:	e6ac      	b.n	800070e <__aeabi_dadd+0x25a>
 80009b4:	4643      	mov	r3, r8
 80009b6:	4642      	mov	r2, r8
 80009b8:	08c9      	lsrs	r1, r1, #3
 80009ba:	075b      	lsls	r3, r3, #29
 80009bc:	4655      	mov	r5, sl
 80009be:	430b      	orrs	r3, r1
 80009c0:	08d0      	lsrs	r0, r2, #3
 80009c2:	e6c5      	b.n	8000750 <__aeabi_dadd+0x29c>
 80009c4:	4643      	mov	r3, r8
 80009c6:	4642      	mov	r2, r8
 80009c8:	075b      	lsls	r3, r3, #29
 80009ca:	08c9      	lsrs	r1, r1, #3
 80009cc:	430b      	orrs	r3, r1
 80009ce:	08d0      	lsrs	r0, r2, #3
 80009d0:	e6be      	b.n	8000750 <__aeabi_dadd+0x29c>
 80009d2:	4303      	orrs	r3, r0
 80009d4:	001c      	movs	r4, r3
 80009d6:	1e63      	subs	r3, r4, #1
 80009d8:	419c      	sbcs	r4, r3
 80009da:	e6fc      	b.n	80007d6 <__aeabi_dadd+0x322>
 80009dc:	0002      	movs	r2, r0
 80009de:	3c20      	subs	r4, #32
 80009e0:	40e2      	lsrs	r2, r4
 80009e2:	0014      	movs	r4, r2
 80009e4:	4662      	mov	r2, ip
 80009e6:	2a20      	cmp	r2, #32
 80009e8:	d003      	beq.n	80009f2 <__aeabi_dadd+0x53e>
 80009ea:	2540      	movs	r5, #64	; 0x40
 80009ec:	1aad      	subs	r5, r5, r2
 80009ee:	40a8      	lsls	r0, r5
 80009f0:	4303      	orrs	r3, r0
 80009f2:	1e58      	subs	r0, r3, #1
 80009f4:	4183      	sbcs	r3, r0
 80009f6:	4323      	orrs	r3, r4
 80009f8:	e775      	b.n	80008e6 <__aeabi_dadd+0x432>
 80009fa:	2a00      	cmp	r2, #0
 80009fc:	d0e2      	beq.n	80009c4 <__aeabi_dadd+0x510>
 80009fe:	003a      	movs	r2, r7
 8000a00:	430a      	orrs	r2, r1
 8000a02:	d0cd      	beq.n	80009a0 <__aeabi_dadd+0x4ec>
 8000a04:	0742      	lsls	r2, r0, #29
 8000a06:	08db      	lsrs	r3, r3, #3
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	2280      	movs	r2, #128	; 0x80
 8000a0c:	08c0      	lsrs	r0, r0, #3
 8000a0e:	0312      	lsls	r2, r2, #12
 8000a10:	4210      	tst	r0, r2
 8000a12:	d006      	beq.n	8000a22 <__aeabi_dadd+0x56e>
 8000a14:	08fc      	lsrs	r4, r7, #3
 8000a16:	4214      	tst	r4, r2
 8000a18:	d103      	bne.n	8000a22 <__aeabi_dadd+0x56e>
 8000a1a:	0020      	movs	r0, r4
 8000a1c:	08cb      	lsrs	r3, r1, #3
 8000a1e:	077a      	lsls	r2, r7, #29
 8000a20:	4313      	orrs	r3, r2
 8000a22:	0f5a      	lsrs	r2, r3, #29
 8000a24:	00db      	lsls	r3, r3, #3
 8000a26:	0752      	lsls	r2, r2, #29
 8000a28:	08db      	lsrs	r3, r3, #3
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	e690      	b.n	8000750 <__aeabi_dadd+0x29c>
 8000a2e:	4643      	mov	r3, r8
 8000a30:	430b      	orrs	r3, r1
 8000a32:	d100      	bne.n	8000a36 <__aeabi_dadd+0x582>
 8000a34:	e709      	b.n	800084a <__aeabi_dadd+0x396>
 8000a36:	4643      	mov	r3, r8
 8000a38:	4642      	mov	r2, r8
 8000a3a:	08c9      	lsrs	r1, r1, #3
 8000a3c:	075b      	lsls	r3, r3, #29
 8000a3e:	4655      	mov	r5, sl
 8000a40:	430b      	orrs	r3, r1
 8000a42:	08d0      	lsrs	r0, r2, #3
 8000a44:	e666      	b.n	8000714 <__aeabi_dadd+0x260>
 8000a46:	1acc      	subs	r4, r1, r3
 8000a48:	42a1      	cmp	r1, r4
 8000a4a:	4189      	sbcs	r1, r1
 8000a4c:	1a3f      	subs	r7, r7, r0
 8000a4e:	4249      	negs	r1, r1
 8000a50:	4655      	mov	r5, sl
 8000a52:	2601      	movs	r6, #1
 8000a54:	1a7f      	subs	r7, r7, r1
 8000a56:	e57e      	b.n	8000556 <__aeabi_dadd+0xa2>
 8000a58:	4642      	mov	r2, r8
 8000a5a:	1a5c      	subs	r4, r3, r1
 8000a5c:	1a87      	subs	r7, r0, r2
 8000a5e:	42a3      	cmp	r3, r4
 8000a60:	4192      	sbcs	r2, r2
 8000a62:	4252      	negs	r2, r2
 8000a64:	1abf      	subs	r7, r7, r2
 8000a66:	023a      	lsls	r2, r7, #8
 8000a68:	d53d      	bpl.n	8000ae6 <__aeabi_dadd+0x632>
 8000a6a:	1acc      	subs	r4, r1, r3
 8000a6c:	42a1      	cmp	r1, r4
 8000a6e:	4189      	sbcs	r1, r1
 8000a70:	4643      	mov	r3, r8
 8000a72:	4249      	negs	r1, r1
 8000a74:	1a1f      	subs	r7, r3, r0
 8000a76:	4655      	mov	r5, sl
 8000a78:	1a7f      	subs	r7, r7, r1
 8000a7a:	e595      	b.n	80005a8 <__aeabi_dadd+0xf4>
 8000a7c:	077b      	lsls	r3, r7, #29
 8000a7e:	08c9      	lsrs	r1, r1, #3
 8000a80:	430b      	orrs	r3, r1
 8000a82:	08f8      	lsrs	r0, r7, #3
 8000a84:	e643      	b.n	800070e <__aeabi_dadd+0x25a>
 8000a86:	4644      	mov	r4, r8
 8000a88:	08db      	lsrs	r3, r3, #3
 8000a8a:	430c      	orrs	r4, r1
 8000a8c:	d130      	bne.n	8000af0 <__aeabi_dadd+0x63c>
 8000a8e:	0742      	lsls	r2, r0, #29
 8000a90:	4313      	orrs	r3, r2
 8000a92:	08c0      	lsrs	r0, r0, #3
 8000a94:	e65c      	b.n	8000750 <__aeabi_dadd+0x29c>
 8000a96:	077b      	lsls	r3, r7, #29
 8000a98:	08c9      	lsrs	r1, r1, #3
 8000a9a:	430b      	orrs	r3, r1
 8000a9c:	08f8      	lsrs	r0, r7, #3
 8000a9e:	e639      	b.n	8000714 <__aeabi_dadd+0x260>
 8000aa0:	185c      	adds	r4, r3, r1
 8000aa2:	429c      	cmp	r4, r3
 8000aa4:	419b      	sbcs	r3, r3
 8000aa6:	4440      	add	r0, r8
 8000aa8:	425b      	negs	r3, r3
 8000aaa:	18c7      	adds	r7, r0, r3
 8000aac:	023b      	lsls	r3, r7, #8
 8000aae:	d400      	bmi.n	8000ab2 <__aeabi_dadd+0x5fe>
 8000ab0:	e625      	b.n	80006fe <__aeabi_dadd+0x24a>
 8000ab2:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <__aeabi_dadd+0x674>)
 8000ab4:	2601      	movs	r6, #1
 8000ab6:	401f      	ands	r7, r3
 8000ab8:	e621      	b.n	80006fe <__aeabi_dadd+0x24a>
 8000aba:	0004      	movs	r4, r0
 8000abc:	3a20      	subs	r2, #32
 8000abe:	40d4      	lsrs	r4, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	2a20      	cmp	r2, #32
 8000ac4:	d004      	beq.n	8000ad0 <__aeabi_dadd+0x61c>
 8000ac6:	2240      	movs	r2, #64	; 0x40
 8000ac8:	4666      	mov	r6, ip
 8000aca:	1b92      	subs	r2, r2, r6
 8000acc:	4090      	lsls	r0, r2
 8000ace:	4303      	orrs	r3, r0
 8000ad0:	1e5a      	subs	r2, r3, #1
 8000ad2:	4193      	sbcs	r3, r2
 8000ad4:	431c      	orrs	r4, r3
 8000ad6:	e67e      	b.n	80007d6 <__aeabi_dadd+0x322>
 8000ad8:	185c      	adds	r4, r3, r1
 8000ada:	428c      	cmp	r4, r1
 8000adc:	4189      	sbcs	r1, r1
 8000ade:	4440      	add	r0, r8
 8000ae0:	4249      	negs	r1, r1
 8000ae2:	1847      	adds	r7, r0, r1
 8000ae4:	e6dd      	b.n	80008a2 <__aeabi_dadd+0x3ee>
 8000ae6:	0023      	movs	r3, r4
 8000ae8:	433b      	orrs	r3, r7
 8000aea:	d100      	bne.n	8000aee <__aeabi_dadd+0x63a>
 8000aec:	e6ad      	b.n	800084a <__aeabi_dadd+0x396>
 8000aee:	e606      	b.n	80006fe <__aeabi_dadd+0x24a>
 8000af0:	0744      	lsls	r4, r0, #29
 8000af2:	4323      	orrs	r3, r4
 8000af4:	2480      	movs	r4, #128	; 0x80
 8000af6:	08c0      	lsrs	r0, r0, #3
 8000af8:	0324      	lsls	r4, r4, #12
 8000afa:	4220      	tst	r0, r4
 8000afc:	d008      	beq.n	8000b10 <__aeabi_dadd+0x65c>
 8000afe:	4642      	mov	r2, r8
 8000b00:	08d6      	lsrs	r6, r2, #3
 8000b02:	4226      	tst	r6, r4
 8000b04:	d104      	bne.n	8000b10 <__aeabi_dadd+0x65c>
 8000b06:	4655      	mov	r5, sl
 8000b08:	0030      	movs	r0, r6
 8000b0a:	08cb      	lsrs	r3, r1, #3
 8000b0c:	0751      	lsls	r1, r2, #29
 8000b0e:	430b      	orrs	r3, r1
 8000b10:	0f5a      	lsrs	r2, r3, #29
 8000b12:	00db      	lsls	r3, r3, #3
 8000b14:	08db      	lsrs	r3, r3, #3
 8000b16:	0752      	lsls	r2, r2, #29
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	e619      	b.n	8000750 <__aeabi_dadd+0x29c>
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	4a01      	ldr	r2, [pc, #4]	; (8000b24 <__aeabi_dadd+0x670>)
 8000b20:	001f      	movs	r7, r3
 8000b22:	e55e      	b.n	80005e2 <__aeabi_dadd+0x12e>
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff

08000b2c <__aeabi_ddiv>:
 8000b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b2e:	4657      	mov	r7, sl
 8000b30:	464e      	mov	r6, r9
 8000b32:	4645      	mov	r5, r8
 8000b34:	46de      	mov	lr, fp
 8000b36:	b5e0      	push	{r5, r6, r7, lr}
 8000b38:	4681      	mov	r9, r0
 8000b3a:	0005      	movs	r5, r0
 8000b3c:	030c      	lsls	r4, r1, #12
 8000b3e:	0048      	lsls	r0, r1, #1
 8000b40:	4692      	mov	sl, r2
 8000b42:	001f      	movs	r7, r3
 8000b44:	b085      	sub	sp, #20
 8000b46:	0b24      	lsrs	r4, r4, #12
 8000b48:	0d40      	lsrs	r0, r0, #21
 8000b4a:	0fce      	lsrs	r6, r1, #31
 8000b4c:	2800      	cmp	r0, #0
 8000b4e:	d100      	bne.n	8000b52 <__aeabi_ddiv+0x26>
 8000b50:	e156      	b.n	8000e00 <__aeabi_ddiv+0x2d4>
 8000b52:	4bd4      	ldr	r3, [pc, #848]	; (8000ea4 <__aeabi_ddiv+0x378>)
 8000b54:	4298      	cmp	r0, r3
 8000b56:	d100      	bne.n	8000b5a <__aeabi_ddiv+0x2e>
 8000b58:	e172      	b.n	8000e40 <__aeabi_ddiv+0x314>
 8000b5a:	0f6b      	lsrs	r3, r5, #29
 8000b5c:	00e4      	lsls	r4, r4, #3
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	2380      	movs	r3, #128	; 0x80
 8000b62:	041b      	lsls	r3, r3, #16
 8000b64:	4323      	orrs	r3, r4
 8000b66:	4698      	mov	r8, r3
 8000b68:	4bcf      	ldr	r3, [pc, #828]	; (8000ea8 <__aeabi_ddiv+0x37c>)
 8000b6a:	00ed      	lsls	r5, r5, #3
 8000b6c:	469b      	mov	fp, r3
 8000b6e:	2300      	movs	r3, #0
 8000b70:	4699      	mov	r9, r3
 8000b72:	4483      	add	fp, r0
 8000b74:	9300      	str	r3, [sp, #0]
 8000b76:	033c      	lsls	r4, r7, #12
 8000b78:	007b      	lsls	r3, r7, #1
 8000b7a:	4650      	mov	r0, sl
 8000b7c:	0b24      	lsrs	r4, r4, #12
 8000b7e:	0d5b      	lsrs	r3, r3, #21
 8000b80:	0fff      	lsrs	r7, r7, #31
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d100      	bne.n	8000b88 <__aeabi_ddiv+0x5c>
 8000b86:	e11f      	b.n	8000dc8 <__aeabi_ddiv+0x29c>
 8000b88:	4ac6      	ldr	r2, [pc, #792]	; (8000ea4 <__aeabi_ddiv+0x378>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d100      	bne.n	8000b90 <__aeabi_ddiv+0x64>
 8000b8e:	e162      	b.n	8000e56 <__aeabi_ddiv+0x32a>
 8000b90:	49c5      	ldr	r1, [pc, #788]	; (8000ea8 <__aeabi_ddiv+0x37c>)
 8000b92:	0f42      	lsrs	r2, r0, #29
 8000b94:	468c      	mov	ip, r1
 8000b96:	00e4      	lsls	r4, r4, #3
 8000b98:	4659      	mov	r1, fp
 8000b9a:	4314      	orrs	r4, r2
 8000b9c:	2280      	movs	r2, #128	; 0x80
 8000b9e:	4463      	add	r3, ip
 8000ba0:	0412      	lsls	r2, r2, #16
 8000ba2:	1acb      	subs	r3, r1, r3
 8000ba4:	4314      	orrs	r4, r2
 8000ba6:	469b      	mov	fp, r3
 8000ba8:	00c2      	lsls	r2, r0, #3
 8000baa:	2000      	movs	r0, #0
 8000bac:	0033      	movs	r3, r6
 8000bae:	407b      	eors	r3, r7
 8000bb0:	469a      	mov	sl, r3
 8000bb2:	464b      	mov	r3, r9
 8000bb4:	2b0f      	cmp	r3, #15
 8000bb6:	d827      	bhi.n	8000c08 <__aeabi_ddiv+0xdc>
 8000bb8:	49bc      	ldr	r1, [pc, #752]	; (8000eac <__aeabi_ddiv+0x380>)
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	58cb      	ldr	r3, [r1, r3]
 8000bbe:	469f      	mov	pc, r3
 8000bc0:	46b2      	mov	sl, r6
 8000bc2:	9b00      	ldr	r3, [sp, #0]
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d016      	beq.n	8000bf6 <__aeabi_ddiv+0xca>
 8000bc8:	2b03      	cmp	r3, #3
 8000bca:	d100      	bne.n	8000bce <__aeabi_ddiv+0xa2>
 8000bcc:	e28e      	b.n	80010ec <__aeabi_ddiv+0x5c0>
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d000      	beq.n	8000bd4 <__aeabi_ddiv+0xa8>
 8000bd2:	e0d9      	b.n	8000d88 <__aeabi_ddiv+0x25c>
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	2400      	movs	r4, #0
 8000bd8:	2500      	movs	r5, #0
 8000bda:	4652      	mov	r2, sl
 8000bdc:	051b      	lsls	r3, r3, #20
 8000bde:	4323      	orrs	r3, r4
 8000be0:	07d2      	lsls	r2, r2, #31
 8000be2:	4313      	orrs	r3, r2
 8000be4:	0028      	movs	r0, r5
 8000be6:	0019      	movs	r1, r3
 8000be8:	b005      	add	sp, #20
 8000bea:	bcf0      	pop	{r4, r5, r6, r7}
 8000bec:	46bb      	mov	fp, r7
 8000bee:	46b2      	mov	sl, r6
 8000bf0:	46a9      	mov	r9, r5
 8000bf2:	46a0      	mov	r8, r4
 8000bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bf6:	2400      	movs	r4, #0
 8000bf8:	2500      	movs	r5, #0
 8000bfa:	4baa      	ldr	r3, [pc, #680]	; (8000ea4 <__aeabi_ddiv+0x378>)
 8000bfc:	e7ed      	b.n	8000bda <__aeabi_ddiv+0xae>
 8000bfe:	46ba      	mov	sl, r7
 8000c00:	46a0      	mov	r8, r4
 8000c02:	0015      	movs	r5, r2
 8000c04:	9000      	str	r0, [sp, #0]
 8000c06:	e7dc      	b.n	8000bc2 <__aeabi_ddiv+0x96>
 8000c08:	4544      	cmp	r4, r8
 8000c0a:	d200      	bcs.n	8000c0e <__aeabi_ddiv+0xe2>
 8000c0c:	e1c7      	b.n	8000f9e <__aeabi_ddiv+0x472>
 8000c0e:	d100      	bne.n	8000c12 <__aeabi_ddiv+0xe6>
 8000c10:	e1c2      	b.n	8000f98 <__aeabi_ddiv+0x46c>
 8000c12:	2301      	movs	r3, #1
 8000c14:	425b      	negs	r3, r3
 8000c16:	469c      	mov	ip, r3
 8000c18:	002e      	movs	r6, r5
 8000c1a:	4640      	mov	r0, r8
 8000c1c:	2500      	movs	r5, #0
 8000c1e:	44e3      	add	fp, ip
 8000c20:	0223      	lsls	r3, r4, #8
 8000c22:	0e14      	lsrs	r4, r2, #24
 8000c24:	431c      	orrs	r4, r3
 8000c26:	0c1b      	lsrs	r3, r3, #16
 8000c28:	4699      	mov	r9, r3
 8000c2a:	0423      	lsls	r3, r4, #16
 8000c2c:	0c1f      	lsrs	r7, r3, #16
 8000c2e:	0212      	lsls	r2, r2, #8
 8000c30:	4649      	mov	r1, r9
 8000c32:	9200      	str	r2, [sp, #0]
 8000c34:	9701      	str	r7, [sp, #4]
 8000c36:	f7ff faf1 	bl	800021c <__aeabi_uidivmod>
 8000c3a:	0002      	movs	r2, r0
 8000c3c:	437a      	muls	r2, r7
 8000c3e:	040b      	lsls	r3, r1, #16
 8000c40:	0c31      	lsrs	r1, r6, #16
 8000c42:	4680      	mov	r8, r0
 8000c44:	4319      	orrs	r1, r3
 8000c46:	428a      	cmp	r2, r1
 8000c48:	d907      	bls.n	8000c5a <__aeabi_ddiv+0x12e>
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	425b      	negs	r3, r3
 8000c4e:	469c      	mov	ip, r3
 8000c50:	1909      	adds	r1, r1, r4
 8000c52:	44e0      	add	r8, ip
 8000c54:	428c      	cmp	r4, r1
 8000c56:	d800      	bhi.n	8000c5a <__aeabi_ddiv+0x12e>
 8000c58:	e207      	b.n	800106a <__aeabi_ddiv+0x53e>
 8000c5a:	1a88      	subs	r0, r1, r2
 8000c5c:	4649      	mov	r1, r9
 8000c5e:	f7ff fadd 	bl	800021c <__aeabi_uidivmod>
 8000c62:	0409      	lsls	r1, r1, #16
 8000c64:	468c      	mov	ip, r1
 8000c66:	0431      	lsls	r1, r6, #16
 8000c68:	4666      	mov	r6, ip
 8000c6a:	9a01      	ldr	r2, [sp, #4]
 8000c6c:	0c09      	lsrs	r1, r1, #16
 8000c6e:	4342      	muls	r2, r0
 8000c70:	0003      	movs	r3, r0
 8000c72:	4331      	orrs	r1, r6
 8000c74:	428a      	cmp	r2, r1
 8000c76:	d904      	bls.n	8000c82 <__aeabi_ddiv+0x156>
 8000c78:	1909      	adds	r1, r1, r4
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	428c      	cmp	r4, r1
 8000c7e:	d800      	bhi.n	8000c82 <__aeabi_ddiv+0x156>
 8000c80:	e1ed      	b.n	800105e <__aeabi_ddiv+0x532>
 8000c82:	1a88      	subs	r0, r1, r2
 8000c84:	4642      	mov	r2, r8
 8000c86:	0412      	lsls	r2, r2, #16
 8000c88:	431a      	orrs	r2, r3
 8000c8a:	4690      	mov	r8, r2
 8000c8c:	4641      	mov	r1, r8
 8000c8e:	9b00      	ldr	r3, [sp, #0]
 8000c90:	040e      	lsls	r6, r1, #16
 8000c92:	0c1b      	lsrs	r3, r3, #16
 8000c94:	001f      	movs	r7, r3
 8000c96:	9302      	str	r3, [sp, #8]
 8000c98:	9b00      	ldr	r3, [sp, #0]
 8000c9a:	0c36      	lsrs	r6, r6, #16
 8000c9c:	041b      	lsls	r3, r3, #16
 8000c9e:	0c19      	lsrs	r1, r3, #16
 8000ca0:	000b      	movs	r3, r1
 8000ca2:	4373      	muls	r3, r6
 8000ca4:	0c12      	lsrs	r2, r2, #16
 8000ca6:	437e      	muls	r6, r7
 8000ca8:	9103      	str	r1, [sp, #12]
 8000caa:	4351      	muls	r1, r2
 8000cac:	437a      	muls	r2, r7
 8000cae:	0c1f      	lsrs	r7, r3, #16
 8000cb0:	46bc      	mov	ip, r7
 8000cb2:	1876      	adds	r6, r6, r1
 8000cb4:	4466      	add	r6, ip
 8000cb6:	42b1      	cmp	r1, r6
 8000cb8:	d903      	bls.n	8000cc2 <__aeabi_ddiv+0x196>
 8000cba:	2180      	movs	r1, #128	; 0x80
 8000cbc:	0249      	lsls	r1, r1, #9
 8000cbe:	468c      	mov	ip, r1
 8000cc0:	4462      	add	r2, ip
 8000cc2:	0c31      	lsrs	r1, r6, #16
 8000cc4:	188a      	adds	r2, r1, r2
 8000cc6:	0431      	lsls	r1, r6, #16
 8000cc8:	041e      	lsls	r6, r3, #16
 8000cca:	0c36      	lsrs	r6, r6, #16
 8000ccc:	198e      	adds	r6, r1, r6
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	d302      	bcc.n	8000cd8 <__aeabi_ddiv+0x1ac>
 8000cd2:	d112      	bne.n	8000cfa <__aeabi_ddiv+0x1ce>
 8000cd4:	42b5      	cmp	r5, r6
 8000cd6:	d210      	bcs.n	8000cfa <__aeabi_ddiv+0x1ce>
 8000cd8:	4643      	mov	r3, r8
 8000cda:	1e59      	subs	r1, r3, #1
 8000cdc:	9b00      	ldr	r3, [sp, #0]
 8000cde:	469c      	mov	ip, r3
 8000ce0:	4465      	add	r5, ip
 8000ce2:	001f      	movs	r7, r3
 8000ce4:	429d      	cmp	r5, r3
 8000ce6:	419b      	sbcs	r3, r3
 8000ce8:	425b      	negs	r3, r3
 8000cea:	191b      	adds	r3, r3, r4
 8000cec:	18c0      	adds	r0, r0, r3
 8000cee:	4284      	cmp	r4, r0
 8000cf0:	d200      	bcs.n	8000cf4 <__aeabi_ddiv+0x1c8>
 8000cf2:	e1a0      	b.n	8001036 <__aeabi_ddiv+0x50a>
 8000cf4:	d100      	bne.n	8000cf8 <__aeabi_ddiv+0x1cc>
 8000cf6:	e19b      	b.n	8001030 <__aeabi_ddiv+0x504>
 8000cf8:	4688      	mov	r8, r1
 8000cfa:	1bae      	subs	r6, r5, r6
 8000cfc:	42b5      	cmp	r5, r6
 8000cfe:	41ad      	sbcs	r5, r5
 8000d00:	1a80      	subs	r0, r0, r2
 8000d02:	426d      	negs	r5, r5
 8000d04:	1b40      	subs	r0, r0, r5
 8000d06:	4284      	cmp	r4, r0
 8000d08:	d100      	bne.n	8000d0c <__aeabi_ddiv+0x1e0>
 8000d0a:	e1d5      	b.n	80010b8 <__aeabi_ddiv+0x58c>
 8000d0c:	4649      	mov	r1, r9
 8000d0e:	f7ff fa85 	bl	800021c <__aeabi_uidivmod>
 8000d12:	9a01      	ldr	r2, [sp, #4]
 8000d14:	040b      	lsls	r3, r1, #16
 8000d16:	4342      	muls	r2, r0
 8000d18:	0c31      	lsrs	r1, r6, #16
 8000d1a:	0005      	movs	r5, r0
 8000d1c:	4319      	orrs	r1, r3
 8000d1e:	428a      	cmp	r2, r1
 8000d20:	d900      	bls.n	8000d24 <__aeabi_ddiv+0x1f8>
 8000d22:	e16c      	b.n	8000ffe <__aeabi_ddiv+0x4d2>
 8000d24:	1a88      	subs	r0, r1, r2
 8000d26:	4649      	mov	r1, r9
 8000d28:	f7ff fa78 	bl	800021c <__aeabi_uidivmod>
 8000d2c:	9a01      	ldr	r2, [sp, #4]
 8000d2e:	0436      	lsls	r6, r6, #16
 8000d30:	4342      	muls	r2, r0
 8000d32:	0409      	lsls	r1, r1, #16
 8000d34:	0c36      	lsrs	r6, r6, #16
 8000d36:	0003      	movs	r3, r0
 8000d38:	430e      	orrs	r6, r1
 8000d3a:	42b2      	cmp	r2, r6
 8000d3c:	d900      	bls.n	8000d40 <__aeabi_ddiv+0x214>
 8000d3e:	e153      	b.n	8000fe8 <__aeabi_ddiv+0x4bc>
 8000d40:	9803      	ldr	r0, [sp, #12]
 8000d42:	1ab6      	subs	r6, r6, r2
 8000d44:	0002      	movs	r2, r0
 8000d46:	042d      	lsls	r5, r5, #16
 8000d48:	431d      	orrs	r5, r3
 8000d4a:	9f02      	ldr	r7, [sp, #8]
 8000d4c:	042b      	lsls	r3, r5, #16
 8000d4e:	0c1b      	lsrs	r3, r3, #16
 8000d50:	435a      	muls	r2, r3
 8000d52:	437b      	muls	r3, r7
 8000d54:	469c      	mov	ip, r3
 8000d56:	0c29      	lsrs	r1, r5, #16
 8000d58:	4348      	muls	r0, r1
 8000d5a:	0c13      	lsrs	r3, r2, #16
 8000d5c:	4484      	add	ip, r0
 8000d5e:	4463      	add	r3, ip
 8000d60:	4379      	muls	r1, r7
 8000d62:	4298      	cmp	r0, r3
 8000d64:	d903      	bls.n	8000d6e <__aeabi_ddiv+0x242>
 8000d66:	2080      	movs	r0, #128	; 0x80
 8000d68:	0240      	lsls	r0, r0, #9
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	4461      	add	r1, ip
 8000d6e:	0c18      	lsrs	r0, r3, #16
 8000d70:	0412      	lsls	r2, r2, #16
 8000d72:	041b      	lsls	r3, r3, #16
 8000d74:	0c12      	lsrs	r2, r2, #16
 8000d76:	1841      	adds	r1, r0, r1
 8000d78:	189b      	adds	r3, r3, r2
 8000d7a:	428e      	cmp	r6, r1
 8000d7c:	d200      	bcs.n	8000d80 <__aeabi_ddiv+0x254>
 8000d7e:	e0ff      	b.n	8000f80 <__aeabi_ddiv+0x454>
 8000d80:	d100      	bne.n	8000d84 <__aeabi_ddiv+0x258>
 8000d82:	e0fa      	b.n	8000f7a <__aeabi_ddiv+0x44e>
 8000d84:	2301      	movs	r3, #1
 8000d86:	431d      	orrs	r5, r3
 8000d88:	4a49      	ldr	r2, [pc, #292]	; (8000eb0 <__aeabi_ddiv+0x384>)
 8000d8a:	445a      	add	r2, fp
 8000d8c:	2a00      	cmp	r2, #0
 8000d8e:	dc00      	bgt.n	8000d92 <__aeabi_ddiv+0x266>
 8000d90:	e0aa      	b.n	8000ee8 <__aeabi_ddiv+0x3bc>
 8000d92:	076b      	lsls	r3, r5, #29
 8000d94:	d000      	beq.n	8000d98 <__aeabi_ddiv+0x26c>
 8000d96:	e13d      	b.n	8001014 <__aeabi_ddiv+0x4e8>
 8000d98:	08ed      	lsrs	r5, r5, #3
 8000d9a:	4643      	mov	r3, r8
 8000d9c:	01db      	lsls	r3, r3, #7
 8000d9e:	d506      	bpl.n	8000dae <__aeabi_ddiv+0x282>
 8000da0:	4642      	mov	r2, r8
 8000da2:	4b44      	ldr	r3, [pc, #272]	; (8000eb4 <__aeabi_ddiv+0x388>)
 8000da4:	401a      	ands	r2, r3
 8000da6:	4690      	mov	r8, r2
 8000da8:	2280      	movs	r2, #128	; 0x80
 8000daa:	00d2      	lsls	r2, r2, #3
 8000dac:	445a      	add	r2, fp
 8000dae:	4b42      	ldr	r3, [pc, #264]	; (8000eb8 <__aeabi_ddiv+0x38c>)
 8000db0:	429a      	cmp	r2, r3
 8000db2:	dd00      	ble.n	8000db6 <__aeabi_ddiv+0x28a>
 8000db4:	e71f      	b.n	8000bf6 <__aeabi_ddiv+0xca>
 8000db6:	4643      	mov	r3, r8
 8000db8:	075b      	lsls	r3, r3, #29
 8000dba:	431d      	orrs	r5, r3
 8000dbc:	4643      	mov	r3, r8
 8000dbe:	0552      	lsls	r2, r2, #21
 8000dc0:	025c      	lsls	r4, r3, #9
 8000dc2:	0b24      	lsrs	r4, r4, #12
 8000dc4:	0d53      	lsrs	r3, r2, #21
 8000dc6:	e708      	b.n	8000bda <__aeabi_ddiv+0xae>
 8000dc8:	4652      	mov	r2, sl
 8000dca:	4322      	orrs	r2, r4
 8000dcc:	d100      	bne.n	8000dd0 <__aeabi_ddiv+0x2a4>
 8000dce:	e07b      	b.n	8000ec8 <__aeabi_ddiv+0x39c>
 8000dd0:	2c00      	cmp	r4, #0
 8000dd2:	d100      	bne.n	8000dd6 <__aeabi_ddiv+0x2aa>
 8000dd4:	e0fa      	b.n	8000fcc <__aeabi_ddiv+0x4a0>
 8000dd6:	0020      	movs	r0, r4
 8000dd8:	f001 f92c 	bl	8002034 <__clzsi2>
 8000ddc:	0002      	movs	r2, r0
 8000dde:	3a0b      	subs	r2, #11
 8000de0:	231d      	movs	r3, #29
 8000de2:	0001      	movs	r1, r0
 8000de4:	1a9b      	subs	r3, r3, r2
 8000de6:	4652      	mov	r2, sl
 8000de8:	3908      	subs	r1, #8
 8000dea:	40da      	lsrs	r2, r3
 8000dec:	408c      	lsls	r4, r1
 8000dee:	4314      	orrs	r4, r2
 8000df0:	4652      	mov	r2, sl
 8000df2:	408a      	lsls	r2, r1
 8000df4:	4b31      	ldr	r3, [pc, #196]	; (8000ebc <__aeabi_ddiv+0x390>)
 8000df6:	4458      	add	r0, fp
 8000df8:	469b      	mov	fp, r3
 8000dfa:	4483      	add	fp, r0
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	e6d5      	b.n	8000bac <__aeabi_ddiv+0x80>
 8000e00:	464b      	mov	r3, r9
 8000e02:	4323      	orrs	r3, r4
 8000e04:	4698      	mov	r8, r3
 8000e06:	d044      	beq.n	8000e92 <__aeabi_ddiv+0x366>
 8000e08:	2c00      	cmp	r4, #0
 8000e0a:	d100      	bne.n	8000e0e <__aeabi_ddiv+0x2e2>
 8000e0c:	e0ce      	b.n	8000fac <__aeabi_ddiv+0x480>
 8000e0e:	0020      	movs	r0, r4
 8000e10:	f001 f910 	bl	8002034 <__clzsi2>
 8000e14:	0001      	movs	r1, r0
 8000e16:	0002      	movs	r2, r0
 8000e18:	390b      	subs	r1, #11
 8000e1a:	231d      	movs	r3, #29
 8000e1c:	1a5b      	subs	r3, r3, r1
 8000e1e:	4649      	mov	r1, r9
 8000e20:	0010      	movs	r0, r2
 8000e22:	40d9      	lsrs	r1, r3
 8000e24:	3808      	subs	r0, #8
 8000e26:	4084      	lsls	r4, r0
 8000e28:	000b      	movs	r3, r1
 8000e2a:	464d      	mov	r5, r9
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	4698      	mov	r8, r3
 8000e30:	4085      	lsls	r5, r0
 8000e32:	4823      	ldr	r0, [pc, #140]	; (8000ec0 <__aeabi_ddiv+0x394>)
 8000e34:	1a83      	subs	r3, r0, r2
 8000e36:	469b      	mov	fp, r3
 8000e38:	2300      	movs	r3, #0
 8000e3a:	4699      	mov	r9, r3
 8000e3c:	9300      	str	r3, [sp, #0]
 8000e3e:	e69a      	b.n	8000b76 <__aeabi_ddiv+0x4a>
 8000e40:	464b      	mov	r3, r9
 8000e42:	4323      	orrs	r3, r4
 8000e44:	4698      	mov	r8, r3
 8000e46:	d11d      	bne.n	8000e84 <__aeabi_ddiv+0x358>
 8000e48:	2308      	movs	r3, #8
 8000e4a:	4699      	mov	r9, r3
 8000e4c:	3b06      	subs	r3, #6
 8000e4e:	2500      	movs	r5, #0
 8000e50:	4683      	mov	fp, r0
 8000e52:	9300      	str	r3, [sp, #0]
 8000e54:	e68f      	b.n	8000b76 <__aeabi_ddiv+0x4a>
 8000e56:	4652      	mov	r2, sl
 8000e58:	4322      	orrs	r2, r4
 8000e5a:	d109      	bne.n	8000e70 <__aeabi_ddiv+0x344>
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	4649      	mov	r1, r9
 8000e60:	4319      	orrs	r1, r3
 8000e62:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <__aeabi_ddiv+0x398>)
 8000e64:	4689      	mov	r9, r1
 8000e66:	469c      	mov	ip, r3
 8000e68:	2400      	movs	r4, #0
 8000e6a:	2002      	movs	r0, #2
 8000e6c:	44e3      	add	fp, ip
 8000e6e:	e69d      	b.n	8000bac <__aeabi_ddiv+0x80>
 8000e70:	2303      	movs	r3, #3
 8000e72:	464a      	mov	r2, r9
 8000e74:	431a      	orrs	r2, r3
 8000e76:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <__aeabi_ddiv+0x398>)
 8000e78:	4691      	mov	r9, r2
 8000e7a:	469c      	mov	ip, r3
 8000e7c:	4652      	mov	r2, sl
 8000e7e:	2003      	movs	r0, #3
 8000e80:	44e3      	add	fp, ip
 8000e82:	e693      	b.n	8000bac <__aeabi_ddiv+0x80>
 8000e84:	230c      	movs	r3, #12
 8000e86:	4699      	mov	r9, r3
 8000e88:	3b09      	subs	r3, #9
 8000e8a:	46a0      	mov	r8, r4
 8000e8c:	4683      	mov	fp, r0
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	e671      	b.n	8000b76 <__aeabi_ddiv+0x4a>
 8000e92:	2304      	movs	r3, #4
 8000e94:	4699      	mov	r9, r3
 8000e96:	2300      	movs	r3, #0
 8000e98:	469b      	mov	fp, r3
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	2500      	movs	r5, #0
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	e669      	b.n	8000b76 <__aeabi_ddiv+0x4a>
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	000007ff 	.word	0x000007ff
 8000ea8:	fffffc01 	.word	0xfffffc01
 8000eac:	0800602c 	.word	0x0800602c
 8000eb0:	000003ff 	.word	0x000003ff
 8000eb4:	feffffff 	.word	0xfeffffff
 8000eb8:	000007fe 	.word	0x000007fe
 8000ebc:	000003f3 	.word	0x000003f3
 8000ec0:	fffffc0d 	.word	0xfffffc0d
 8000ec4:	fffff801 	.word	0xfffff801
 8000ec8:	4649      	mov	r1, r9
 8000eca:	2301      	movs	r3, #1
 8000ecc:	4319      	orrs	r1, r3
 8000ece:	4689      	mov	r9, r1
 8000ed0:	2400      	movs	r4, #0
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	e66a      	b.n	8000bac <__aeabi_ddiv+0x80>
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	2480      	movs	r4, #128	; 0x80
 8000eda:	469a      	mov	sl, r3
 8000edc:	2500      	movs	r5, #0
 8000ede:	4b8a      	ldr	r3, [pc, #552]	; (8001108 <__aeabi_ddiv+0x5dc>)
 8000ee0:	0324      	lsls	r4, r4, #12
 8000ee2:	e67a      	b.n	8000bda <__aeabi_ddiv+0xae>
 8000ee4:	2501      	movs	r5, #1
 8000ee6:	426d      	negs	r5, r5
 8000ee8:	2301      	movs	r3, #1
 8000eea:	1a9b      	subs	r3, r3, r2
 8000eec:	2b38      	cmp	r3, #56	; 0x38
 8000eee:	dd00      	ble.n	8000ef2 <__aeabi_ddiv+0x3c6>
 8000ef0:	e670      	b.n	8000bd4 <__aeabi_ddiv+0xa8>
 8000ef2:	2b1f      	cmp	r3, #31
 8000ef4:	dc00      	bgt.n	8000ef8 <__aeabi_ddiv+0x3cc>
 8000ef6:	e0bf      	b.n	8001078 <__aeabi_ddiv+0x54c>
 8000ef8:	211f      	movs	r1, #31
 8000efa:	4249      	negs	r1, r1
 8000efc:	1a8a      	subs	r2, r1, r2
 8000efe:	4641      	mov	r1, r8
 8000f00:	40d1      	lsrs	r1, r2
 8000f02:	000a      	movs	r2, r1
 8000f04:	2b20      	cmp	r3, #32
 8000f06:	d004      	beq.n	8000f12 <__aeabi_ddiv+0x3e6>
 8000f08:	4641      	mov	r1, r8
 8000f0a:	4b80      	ldr	r3, [pc, #512]	; (800110c <__aeabi_ddiv+0x5e0>)
 8000f0c:	445b      	add	r3, fp
 8000f0e:	4099      	lsls	r1, r3
 8000f10:	430d      	orrs	r5, r1
 8000f12:	1e6b      	subs	r3, r5, #1
 8000f14:	419d      	sbcs	r5, r3
 8000f16:	2307      	movs	r3, #7
 8000f18:	432a      	orrs	r2, r5
 8000f1a:	001d      	movs	r5, r3
 8000f1c:	2400      	movs	r4, #0
 8000f1e:	4015      	ands	r5, r2
 8000f20:	4213      	tst	r3, r2
 8000f22:	d100      	bne.n	8000f26 <__aeabi_ddiv+0x3fa>
 8000f24:	e0d4      	b.n	80010d0 <__aeabi_ddiv+0x5a4>
 8000f26:	210f      	movs	r1, #15
 8000f28:	2300      	movs	r3, #0
 8000f2a:	4011      	ands	r1, r2
 8000f2c:	2904      	cmp	r1, #4
 8000f2e:	d100      	bne.n	8000f32 <__aeabi_ddiv+0x406>
 8000f30:	e0cb      	b.n	80010ca <__aeabi_ddiv+0x59e>
 8000f32:	1d11      	adds	r1, r2, #4
 8000f34:	4291      	cmp	r1, r2
 8000f36:	4192      	sbcs	r2, r2
 8000f38:	4252      	negs	r2, r2
 8000f3a:	189b      	adds	r3, r3, r2
 8000f3c:	000a      	movs	r2, r1
 8000f3e:	0219      	lsls	r1, r3, #8
 8000f40:	d400      	bmi.n	8000f44 <__aeabi_ddiv+0x418>
 8000f42:	e0c2      	b.n	80010ca <__aeabi_ddiv+0x59e>
 8000f44:	2301      	movs	r3, #1
 8000f46:	2400      	movs	r4, #0
 8000f48:	2500      	movs	r5, #0
 8000f4a:	e646      	b.n	8000bda <__aeabi_ddiv+0xae>
 8000f4c:	2380      	movs	r3, #128	; 0x80
 8000f4e:	4641      	mov	r1, r8
 8000f50:	031b      	lsls	r3, r3, #12
 8000f52:	4219      	tst	r1, r3
 8000f54:	d008      	beq.n	8000f68 <__aeabi_ddiv+0x43c>
 8000f56:	421c      	tst	r4, r3
 8000f58:	d106      	bne.n	8000f68 <__aeabi_ddiv+0x43c>
 8000f5a:	431c      	orrs	r4, r3
 8000f5c:	0324      	lsls	r4, r4, #12
 8000f5e:	46ba      	mov	sl, r7
 8000f60:	0015      	movs	r5, r2
 8000f62:	4b69      	ldr	r3, [pc, #420]	; (8001108 <__aeabi_ddiv+0x5dc>)
 8000f64:	0b24      	lsrs	r4, r4, #12
 8000f66:	e638      	b.n	8000bda <__aeabi_ddiv+0xae>
 8000f68:	2480      	movs	r4, #128	; 0x80
 8000f6a:	4643      	mov	r3, r8
 8000f6c:	0324      	lsls	r4, r4, #12
 8000f6e:	431c      	orrs	r4, r3
 8000f70:	0324      	lsls	r4, r4, #12
 8000f72:	46b2      	mov	sl, r6
 8000f74:	4b64      	ldr	r3, [pc, #400]	; (8001108 <__aeabi_ddiv+0x5dc>)
 8000f76:	0b24      	lsrs	r4, r4, #12
 8000f78:	e62f      	b.n	8000bda <__aeabi_ddiv+0xae>
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d100      	bne.n	8000f80 <__aeabi_ddiv+0x454>
 8000f7e:	e703      	b.n	8000d88 <__aeabi_ddiv+0x25c>
 8000f80:	19a6      	adds	r6, r4, r6
 8000f82:	1e68      	subs	r0, r5, #1
 8000f84:	42a6      	cmp	r6, r4
 8000f86:	d200      	bcs.n	8000f8a <__aeabi_ddiv+0x45e>
 8000f88:	e08d      	b.n	80010a6 <__aeabi_ddiv+0x57a>
 8000f8a:	428e      	cmp	r6, r1
 8000f8c:	d200      	bcs.n	8000f90 <__aeabi_ddiv+0x464>
 8000f8e:	e0a3      	b.n	80010d8 <__aeabi_ddiv+0x5ac>
 8000f90:	d100      	bne.n	8000f94 <__aeabi_ddiv+0x468>
 8000f92:	e0b3      	b.n	80010fc <__aeabi_ddiv+0x5d0>
 8000f94:	0005      	movs	r5, r0
 8000f96:	e6f5      	b.n	8000d84 <__aeabi_ddiv+0x258>
 8000f98:	42aa      	cmp	r2, r5
 8000f9a:	d900      	bls.n	8000f9e <__aeabi_ddiv+0x472>
 8000f9c:	e639      	b.n	8000c12 <__aeabi_ddiv+0xe6>
 8000f9e:	4643      	mov	r3, r8
 8000fa0:	07de      	lsls	r6, r3, #31
 8000fa2:	0858      	lsrs	r0, r3, #1
 8000fa4:	086b      	lsrs	r3, r5, #1
 8000fa6:	431e      	orrs	r6, r3
 8000fa8:	07ed      	lsls	r5, r5, #31
 8000faa:	e639      	b.n	8000c20 <__aeabi_ddiv+0xf4>
 8000fac:	4648      	mov	r0, r9
 8000fae:	f001 f841 	bl	8002034 <__clzsi2>
 8000fb2:	0001      	movs	r1, r0
 8000fb4:	0002      	movs	r2, r0
 8000fb6:	3115      	adds	r1, #21
 8000fb8:	3220      	adds	r2, #32
 8000fba:	291c      	cmp	r1, #28
 8000fbc:	dc00      	bgt.n	8000fc0 <__aeabi_ddiv+0x494>
 8000fbe:	e72c      	b.n	8000e1a <__aeabi_ddiv+0x2ee>
 8000fc0:	464b      	mov	r3, r9
 8000fc2:	3808      	subs	r0, #8
 8000fc4:	4083      	lsls	r3, r0
 8000fc6:	2500      	movs	r5, #0
 8000fc8:	4698      	mov	r8, r3
 8000fca:	e732      	b.n	8000e32 <__aeabi_ddiv+0x306>
 8000fcc:	f001 f832 	bl	8002034 <__clzsi2>
 8000fd0:	0003      	movs	r3, r0
 8000fd2:	001a      	movs	r2, r3
 8000fd4:	3215      	adds	r2, #21
 8000fd6:	3020      	adds	r0, #32
 8000fd8:	2a1c      	cmp	r2, #28
 8000fda:	dc00      	bgt.n	8000fde <__aeabi_ddiv+0x4b2>
 8000fdc:	e700      	b.n	8000de0 <__aeabi_ddiv+0x2b4>
 8000fde:	4654      	mov	r4, sl
 8000fe0:	3b08      	subs	r3, #8
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	409c      	lsls	r4, r3
 8000fe6:	e705      	b.n	8000df4 <__aeabi_ddiv+0x2c8>
 8000fe8:	1936      	adds	r6, r6, r4
 8000fea:	3b01      	subs	r3, #1
 8000fec:	42b4      	cmp	r4, r6
 8000fee:	d900      	bls.n	8000ff2 <__aeabi_ddiv+0x4c6>
 8000ff0:	e6a6      	b.n	8000d40 <__aeabi_ddiv+0x214>
 8000ff2:	42b2      	cmp	r2, r6
 8000ff4:	d800      	bhi.n	8000ff8 <__aeabi_ddiv+0x4cc>
 8000ff6:	e6a3      	b.n	8000d40 <__aeabi_ddiv+0x214>
 8000ff8:	1e83      	subs	r3, r0, #2
 8000ffa:	1936      	adds	r6, r6, r4
 8000ffc:	e6a0      	b.n	8000d40 <__aeabi_ddiv+0x214>
 8000ffe:	1909      	adds	r1, r1, r4
 8001000:	3d01      	subs	r5, #1
 8001002:	428c      	cmp	r4, r1
 8001004:	d900      	bls.n	8001008 <__aeabi_ddiv+0x4dc>
 8001006:	e68d      	b.n	8000d24 <__aeabi_ddiv+0x1f8>
 8001008:	428a      	cmp	r2, r1
 800100a:	d800      	bhi.n	800100e <__aeabi_ddiv+0x4e2>
 800100c:	e68a      	b.n	8000d24 <__aeabi_ddiv+0x1f8>
 800100e:	1e85      	subs	r5, r0, #2
 8001010:	1909      	adds	r1, r1, r4
 8001012:	e687      	b.n	8000d24 <__aeabi_ddiv+0x1f8>
 8001014:	230f      	movs	r3, #15
 8001016:	402b      	ands	r3, r5
 8001018:	2b04      	cmp	r3, #4
 800101a:	d100      	bne.n	800101e <__aeabi_ddiv+0x4f2>
 800101c:	e6bc      	b.n	8000d98 <__aeabi_ddiv+0x26c>
 800101e:	2305      	movs	r3, #5
 8001020:	425b      	negs	r3, r3
 8001022:	42ab      	cmp	r3, r5
 8001024:	419b      	sbcs	r3, r3
 8001026:	3504      	adds	r5, #4
 8001028:	425b      	negs	r3, r3
 800102a:	08ed      	lsrs	r5, r5, #3
 800102c:	4498      	add	r8, r3
 800102e:	e6b4      	b.n	8000d9a <__aeabi_ddiv+0x26e>
 8001030:	42af      	cmp	r7, r5
 8001032:	d900      	bls.n	8001036 <__aeabi_ddiv+0x50a>
 8001034:	e660      	b.n	8000cf8 <__aeabi_ddiv+0x1cc>
 8001036:	4282      	cmp	r2, r0
 8001038:	d804      	bhi.n	8001044 <__aeabi_ddiv+0x518>
 800103a:	d000      	beq.n	800103e <__aeabi_ddiv+0x512>
 800103c:	e65c      	b.n	8000cf8 <__aeabi_ddiv+0x1cc>
 800103e:	42ae      	cmp	r6, r5
 8001040:	d800      	bhi.n	8001044 <__aeabi_ddiv+0x518>
 8001042:	e659      	b.n	8000cf8 <__aeabi_ddiv+0x1cc>
 8001044:	2302      	movs	r3, #2
 8001046:	425b      	negs	r3, r3
 8001048:	469c      	mov	ip, r3
 800104a:	9b00      	ldr	r3, [sp, #0]
 800104c:	44e0      	add	r8, ip
 800104e:	469c      	mov	ip, r3
 8001050:	4465      	add	r5, ip
 8001052:	429d      	cmp	r5, r3
 8001054:	419b      	sbcs	r3, r3
 8001056:	425b      	negs	r3, r3
 8001058:	191b      	adds	r3, r3, r4
 800105a:	18c0      	adds	r0, r0, r3
 800105c:	e64d      	b.n	8000cfa <__aeabi_ddiv+0x1ce>
 800105e:	428a      	cmp	r2, r1
 8001060:	d800      	bhi.n	8001064 <__aeabi_ddiv+0x538>
 8001062:	e60e      	b.n	8000c82 <__aeabi_ddiv+0x156>
 8001064:	1e83      	subs	r3, r0, #2
 8001066:	1909      	adds	r1, r1, r4
 8001068:	e60b      	b.n	8000c82 <__aeabi_ddiv+0x156>
 800106a:	428a      	cmp	r2, r1
 800106c:	d800      	bhi.n	8001070 <__aeabi_ddiv+0x544>
 800106e:	e5f4      	b.n	8000c5a <__aeabi_ddiv+0x12e>
 8001070:	1e83      	subs	r3, r0, #2
 8001072:	4698      	mov	r8, r3
 8001074:	1909      	adds	r1, r1, r4
 8001076:	e5f0      	b.n	8000c5a <__aeabi_ddiv+0x12e>
 8001078:	4925      	ldr	r1, [pc, #148]	; (8001110 <__aeabi_ddiv+0x5e4>)
 800107a:	0028      	movs	r0, r5
 800107c:	4459      	add	r1, fp
 800107e:	408d      	lsls	r5, r1
 8001080:	4642      	mov	r2, r8
 8001082:	408a      	lsls	r2, r1
 8001084:	1e69      	subs	r1, r5, #1
 8001086:	418d      	sbcs	r5, r1
 8001088:	4641      	mov	r1, r8
 800108a:	40d8      	lsrs	r0, r3
 800108c:	40d9      	lsrs	r1, r3
 800108e:	4302      	orrs	r2, r0
 8001090:	432a      	orrs	r2, r5
 8001092:	000b      	movs	r3, r1
 8001094:	0751      	lsls	r1, r2, #29
 8001096:	d100      	bne.n	800109a <__aeabi_ddiv+0x56e>
 8001098:	e751      	b.n	8000f3e <__aeabi_ddiv+0x412>
 800109a:	210f      	movs	r1, #15
 800109c:	4011      	ands	r1, r2
 800109e:	2904      	cmp	r1, #4
 80010a0:	d000      	beq.n	80010a4 <__aeabi_ddiv+0x578>
 80010a2:	e746      	b.n	8000f32 <__aeabi_ddiv+0x406>
 80010a4:	e74b      	b.n	8000f3e <__aeabi_ddiv+0x412>
 80010a6:	0005      	movs	r5, r0
 80010a8:	428e      	cmp	r6, r1
 80010aa:	d000      	beq.n	80010ae <__aeabi_ddiv+0x582>
 80010ac:	e66a      	b.n	8000d84 <__aeabi_ddiv+0x258>
 80010ae:	9a00      	ldr	r2, [sp, #0]
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d000      	beq.n	80010b6 <__aeabi_ddiv+0x58a>
 80010b4:	e666      	b.n	8000d84 <__aeabi_ddiv+0x258>
 80010b6:	e667      	b.n	8000d88 <__aeabi_ddiv+0x25c>
 80010b8:	4a16      	ldr	r2, [pc, #88]	; (8001114 <__aeabi_ddiv+0x5e8>)
 80010ba:	445a      	add	r2, fp
 80010bc:	2a00      	cmp	r2, #0
 80010be:	dc00      	bgt.n	80010c2 <__aeabi_ddiv+0x596>
 80010c0:	e710      	b.n	8000ee4 <__aeabi_ddiv+0x3b8>
 80010c2:	2301      	movs	r3, #1
 80010c4:	2500      	movs	r5, #0
 80010c6:	4498      	add	r8, r3
 80010c8:	e667      	b.n	8000d9a <__aeabi_ddiv+0x26e>
 80010ca:	075d      	lsls	r5, r3, #29
 80010cc:	025b      	lsls	r3, r3, #9
 80010ce:	0b1c      	lsrs	r4, r3, #12
 80010d0:	08d2      	lsrs	r2, r2, #3
 80010d2:	2300      	movs	r3, #0
 80010d4:	4315      	orrs	r5, r2
 80010d6:	e580      	b.n	8000bda <__aeabi_ddiv+0xae>
 80010d8:	9800      	ldr	r0, [sp, #0]
 80010da:	3d02      	subs	r5, #2
 80010dc:	0042      	lsls	r2, r0, #1
 80010de:	4282      	cmp	r2, r0
 80010e0:	41bf      	sbcs	r7, r7
 80010e2:	427f      	negs	r7, r7
 80010e4:	193c      	adds	r4, r7, r4
 80010e6:	1936      	adds	r6, r6, r4
 80010e8:	9200      	str	r2, [sp, #0]
 80010ea:	e7dd      	b.n	80010a8 <__aeabi_ddiv+0x57c>
 80010ec:	2480      	movs	r4, #128	; 0x80
 80010ee:	4643      	mov	r3, r8
 80010f0:	0324      	lsls	r4, r4, #12
 80010f2:	431c      	orrs	r4, r3
 80010f4:	0324      	lsls	r4, r4, #12
 80010f6:	4b04      	ldr	r3, [pc, #16]	; (8001108 <__aeabi_ddiv+0x5dc>)
 80010f8:	0b24      	lsrs	r4, r4, #12
 80010fa:	e56e      	b.n	8000bda <__aeabi_ddiv+0xae>
 80010fc:	9a00      	ldr	r2, [sp, #0]
 80010fe:	429a      	cmp	r2, r3
 8001100:	d3ea      	bcc.n	80010d8 <__aeabi_ddiv+0x5ac>
 8001102:	0005      	movs	r5, r0
 8001104:	e7d3      	b.n	80010ae <__aeabi_ddiv+0x582>
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	000007ff 	.word	0x000007ff
 800110c:	0000043e 	.word	0x0000043e
 8001110:	0000041e 	.word	0x0000041e
 8001114:	000003ff 	.word	0x000003ff

08001118 <__eqdf2>:
 8001118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800111a:	464e      	mov	r6, r9
 800111c:	4645      	mov	r5, r8
 800111e:	46de      	mov	lr, fp
 8001120:	4657      	mov	r7, sl
 8001122:	4690      	mov	r8, r2
 8001124:	b5e0      	push	{r5, r6, r7, lr}
 8001126:	0017      	movs	r7, r2
 8001128:	031a      	lsls	r2, r3, #12
 800112a:	0b12      	lsrs	r2, r2, #12
 800112c:	0005      	movs	r5, r0
 800112e:	4684      	mov	ip, r0
 8001130:	4819      	ldr	r0, [pc, #100]	; (8001198 <__eqdf2+0x80>)
 8001132:	030e      	lsls	r6, r1, #12
 8001134:	004c      	lsls	r4, r1, #1
 8001136:	4691      	mov	r9, r2
 8001138:	005a      	lsls	r2, r3, #1
 800113a:	0fdb      	lsrs	r3, r3, #31
 800113c:	469b      	mov	fp, r3
 800113e:	0b36      	lsrs	r6, r6, #12
 8001140:	0d64      	lsrs	r4, r4, #21
 8001142:	0fc9      	lsrs	r1, r1, #31
 8001144:	0d52      	lsrs	r2, r2, #21
 8001146:	4284      	cmp	r4, r0
 8001148:	d019      	beq.n	800117e <__eqdf2+0x66>
 800114a:	4282      	cmp	r2, r0
 800114c:	d010      	beq.n	8001170 <__eqdf2+0x58>
 800114e:	2001      	movs	r0, #1
 8001150:	4294      	cmp	r4, r2
 8001152:	d10e      	bne.n	8001172 <__eqdf2+0x5a>
 8001154:	454e      	cmp	r6, r9
 8001156:	d10c      	bne.n	8001172 <__eqdf2+0x5a>
 8001158:	2001      	movs	r0, #1
 800115a:	45c4      	cmp	ip, r8
 800115c:	d109      	bne.n	8001172 <__eqdf2+0x5a>
 800115e:	4559      	cmp	r1, fp
 8001160:	d017      	beq.n	8001192 <__eqdf2+0x7a>
 8001162:	2c00      	cmp	r4, #0
 8001164:	d105      	bne.n	8001172 <__eqdf2+0x5a>
 8001166:	0030      	movs	r0, r6
 8001168:	4328      	orrs	r0, r5
 800116a:	1e43      	subs	r3, r0, #1
 800116c:	4198      	sbcs	r0, r3
 800116e:	e000      	b.n	8001172 <__eqdf2+0x5a>
 8001170:	2001      	movs	r0, #1
 8001172:	bcf0      	pop	{r4, r5, r6, r7}
 8001174:	46bb      	mov	fp, r7
 8001176:	46b2      	mov	sl, r6
 8001178:	46a9      	mov	r9, r5
 800117a:	46a0      	mov	r8, r4
 800117c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800117e:	0033      	movs	r3, r6
 8001180:	2001      	movs	r0, #1
 8001182:	432b      	orrs	r3, r5
 8001184:	d1f5      	bne.n	8001172 <__eqdf2+0x5a>
 8001186:	42a2      	cmp	r2, r4
 8001188:	d1f3      	bne.n	8001172 <__eqdf2+0x5a>
 800118a:	464b      	mov	r3, r9
 800118c:	433b      	orrs	r3, r7
 800118e:	d1f0      	bne.n	8001172 <__eqdf2+0x5a>
 8001190:	e7e2      	b.n	8001158 <__eqdf2+0x40>
 8001192:	2000      	movs	r0, #0
 8001194:	e7ed      	b.n	8001172 <__eqdf2+0x5a>
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	000007ff 	.word	0x000007ff

0800119c <__gedf2>:
 800119c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800119e:	4647      	mov	r7, r8
 80011a0:	46ce      	mov	lr, r9
 80011a2:	0004      	movs	r4, r0
 80011a4:	0018      	movs	r0, r3
 80011a6:	0016      	movs	r6, r2
 80011a8:	031b      	lsls	r3, r3, #12
 80011aa:	0b1b      	lsrs	r3, r3, #12
 80011ac:	4d2d      	ldr	r5, [pc, #180]	; (8001264 <__gedf2+0xc8>)
 80011ae:	004a      	lsls	r2, r1, #1
 80011b0:	4699      	mov	r9, r3
 80011b2:	b580      	push	{r7, lr}
 80011b4:	0043      	lsls	r3, r0, #1
 80011b6:	030f      	lsls	r7, r1, #12
 80011b8:	46a4      	mov	ip, r4
 80011ba:	46b0      	mov	r8, r6
 80011bc:	0b3f      	lsrs	r7, r7, #12
 80011be:	0d52      	lsrs	r2, r2, #21
 80011c0:	0fc9      	lsrs	r1, r1, #31
 80011c2:	0d5b      	lsrs	r3, r3, #21
 80011c4:	0fc0      	lsrs	r0, r0, #31
 80011c6:	42aa      	cmp	r2, r5
 80011c8:	d021      	beq.n	800120e <__gedf2+0x72>
 80011ca:	42ab      	cmp	r3, r5
 80011cc:	d013      	beq.n	80011f6 <__gedf2+0x5a>
 80011ce:	2a00      	cmp	r2, #0
 80011d0:	d122      	bne.n	8001218 <__gedf2+0x7c>
 80011d2:	433c      	orrs	r4, r7
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d102      	bne.n	80011de <__gedf2+0x42>
 80011d8:	464d      	mov	r5, r9
 80011da:	432e      	orrs	r6, r5
 80011dc:	d022      	beq.n	8001224 <__gedf2+0x88>
 80011de:	2c00      	cmp	r4, #0
 80011e0:	d010      	beq.n	8001204 <__gedf2+0x68>
 80011e2:	4281      	cmp	r1, r0
 80011e4:	d022      	beq.n	800122c <__gedf2+0x90>
 80011e6:	2002      	movs	r0, #2
 80011e8:	3901      	subs	r1, #1
 80011ea:	4008      	ands	r0, r1
 80011ec:	3801      	subs	r0, #1
 80011ee:	bcc0      	pop	{r6, r7}
 80011f0:	46b9      	mov	r9, r7
 80011f2:	46b0      	mov	r8, r6
 80011f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011f6:	464d      	mov	r5, r9
 80011f8:	432e      	orrs	r6, r5
 80011fa:	d129      	bne.n	8001250 <__gedf2+0xb4>
 80011fc:	2a00      	cmp	r2, #0
 80011fe:	d1f0      	bne.n	80011e2 <__gedf2+0x46>
 8001200:	433c      	orrs	r4, r7
 8001202:	d1ee      	bne.n	80011e2 <__gedf2+0x46>
 8001204:	2800      	cmp	r0, #0
 8001206:	d1f2      	bne.n	80011ee <__gedf2+0x52>
 8001208:	2001      	movs	r0, #1
 800120a:	4240      	negs	r0, r0
 800120c:	e7ef      	b.n	80011ee <__gedf2+0x52>
 800120e:	003d      	movs	r5, r7
 8001210:	4325      	orrs	r5, r4
 8001212:	d11d      	bne.n	8001250 <__gedf2+0xb4>
 8001214:	4293      	cmp	r3, r2
 8001216:	d0ee      	beq.n	80011f6 <__gedf2+0x5a>
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1e2      	bne.n	80011e2 <__gedf2+0x46>
 800121c:	464c      	mov	r4, r9
 800121e:	4326      	orrs	r6, r4
 8001220:	d1df      	bne.n	80011e2 <__gedf2+0x46>
 8001222:	e7e0      	b.n	80011e6 <__gedf2+0x4a>
 8001224:	2000      	movs	r0, #0
 8001226:	2c00      	cmp	r4, #0
 8001228:	d0e1      	beq.n	80011ee <__gedf2+0x52>
 800122a:	e7dc      	b.n	80011e6 <__gedf2+0x4a>
 800122c:	429a      	cmp	r2, r3
 800122e:	dc0a      	bgt.n	8001246 <__gedf2+0xaa>
 8001230:	dbe8      	blt.n	8001204 <__gedf2+0x68>
 8001232:	454f      	cmp	r7, r9
 8001234:	d8d7      	bhi.n	80011e6 <__gedf2+0x4a>
 8001236:	d00e      	beq.n	8001256 <__gedf2+0xba>
 8001238:	2000      	movs	r0, #0
 800123a:	454f      	cmp	r7, r9
 800123c:	d2d7      	bcs.n	80011ee <__gedf2+0x52>
 800123e:	2900      	cmp	r1, #0
 8001240:	d0e2      	beq.n	8001208 <__gedf2+0x6c>
 8001242:	0008      	movs	r0, r1
 8001244:	e7d3      	b.n	80011ee <__gedf2+0x52>
 8001246:	4243      	negs	r3, r0
 8001248:	4158      	adcs	r0, r3
 800124a:	0040      	lsls	r0, r0, #1
 800124c:	3801      	subs	r0, #1
 800124e:	e7ce      	b.n	80011ee <__gedf2+0x52>
 8001250:	2002      	movs	r0, #2
 8001252:	4240      	negs	r0, r0
 8001254:	e7cb      	b.n	80011ee <__gedf2+0x52>
 8001256:	45c4      	cmp	ip, r8
 8001258:	d8c5      	bhi.n	80011e6 <__gedf2+0x4a>
 800125a:	2000      	movs	r0, #0
 800125c:	45c4      	cmp	ip, r8
 800125e:	d2c6      	bcs.n	80011ee <__gedf2+0x52>
 8001260:	e7ed      	b.n	800123e <__gedf2+0xa2>
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	000007ff 	.word	0x000007ff

08001268 <__ledf2>:
 8001268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800126a:	4647      	mov	r7, r8
 800126c:	46ce      	mov	lr, r9
 800126e:	0004      	movs	r4, r0
 8001270:	0018      	movs	r0, r3
 8001272:	0016      	movs	r6, r2
 8001274:	031b      	lsls	r3, r3, #12
 8001276:	0b1b      	lsrs	r3, r3, #12
 8001278:	4d2c      	ldr	r5, [pc, #176]	; (800132c <__ledf2+0xc4>)
 800127a:	004a      	lsls	r2, r1, #1
 800127c:	4699      	mov	r9, r3
 800127e:	b580      	push	{r7, lr}
 8001280:	0043      	lsls	r3, r0, #1
 8001282:	030f      	lsls	r7, r1, #12
 8001284:	46a4      	mov	ip, r4
 8001286:	46b0      	mov	r8, r6
 8001288:	0b3f      	lsrs	r7, r7, #12
 800128a:	0d52      	lsrs	r2, r2, #21
 800128c:	0fc9      	lsrs	r1, r1, #31
 800128e:	0d5b      	lsrs	r3, r3, #21
 8001290:	0fc0      	lsrs	r0, r0, #31
 8001292:	42aa      	cmp	r2, r5
 8001294:	d00d      	beq.n	80012b2 <__ledf2+0x4a>
 8001296:	42ab      	cmp	r3, r5
 8001298:	d010      	beq.n	80012bc <__ledf2+0x54>
 800129a:	2a00      	cmp	r2, #0
 800129c:	d127      	bne.n	80012ee <__ledf2+0x86>
 800129e:	433c      	orrs	r4, r7
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d111      	bne.n	80012c8 <__ledf2+0x60>
 80012a4:	464d      	mov	r5, r9
 80012a6:	432e      	orrs	r6, r5
 80012a8:	d10e      	bne.n	80012c8 <__ledf2+0x60>
 80012aa:	2000      	movs	r0, #0
 80012ac:	2c00      	cmp	r4, #0
 80012ae:	d015      	beq.n	80012dc <__ledf2+0x74>
 80012b0:	e00e      	b.n	80012d0 <__ledf2+0x68>
 80012b2:	003d      	movs	r5, r7
 80012b4:	4325      	orrs	r5, r4
 80012b6:	d110      	bne.n	80012da <__ledf2+0x72>
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d118      	bne.n	80012ee <__ledf2+0x86>
 80012bc:	464d      	mov	r5, r9
 80012be:	432e      	orrs	r6, r5
 80012c0:	d10b      	bne.n	80012da <__ledf2+0x72>
 80012c2:	2a00      	cmp	r2, #0
 80012c4:	d102      	bne.n	80012cc <__ledf2+0x64>
 80012c6:	433c      	orrs	r4, r7
 80012c8:	2c00      	cmp	r4, #0
 80012ca:	d00b      	beq.n	80012e4 <__ledf2+0x7c>
 80012cc:	4281      	cmp	r1, r0
 80012ce:	d014      	beq.n	80012fa <__ledf2+0x92>
 80012d0:	2002      	movs	r0, #2
 80012d2:	3901      	subs	r1, #1
 80012d4:	4008      	ands	r0, r1
 80012d6:	3801      	subs	r0, #1
 80012d8:	e000      	b.n	80012dc <__ledf2+0x74>
 80012da:	2002      	movs	r0, #2
 80012dc:	bcc0      	pop	{r6, r7}
 80012de:	46b9      	mov	r9, r7
 80012e0:	46b0      	mov	r8, r6
 80012e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012e4:	2800      	cmp	r0, #0
 80012e6:	d1f9      	bne.n	80012dc <__ledf2+0x74>
 80012e8:	2001      	movs	r0, #1
 80012ea:	4240      	negs	r0, r0
 80012ec:	e7f6      	b.n	80012dc <__ledf2+0x74>
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1ec      	bne.n	80012cc <__ledf2+0x64>
 80012f2:	464c      	mov	r4, r9
 80012f4:	4326      	orrs	r6, r4
 80012f6:	d1e9      	bne.n	80012cc <__ledf2+0x64>
 80012f8:	e7ea      	b.n	80012d0 <__ledf2+0x68>
 80012fa:	429a      	cmp	r2, r3
 80012fc:	dd04      	ble.n	8001308 <__ledf2+0xa0>
 80012fe:	4243      	negs	r3, r0
 8001300:	4158      	adcs	r0, r3
 8001302:	0040      	lsls	r0, r0, #1
 8001304:	3801      	subs	r0, #1
 8001306:	e7e9      	b.n	80012dc <__ledf2+0x74>
 8001308:	429a      	cmp	r2, r3
 800130a:	dbeb      	blt.n	80012e4 <__ledf2+0x7c>
 800130c:	454f      	cmp	r7, r9
 800130e:	d8df      	bhi.n	80012d0 <__ledf2+0x68>
 8001310:	d006      	beq.n	8001320 <__ledf2+0xb8>
 8001312:	2000      	movs	r0, #0
 8001314:	454f      	cmp	r7, r9
 8001316:	d2e1      	bcs.n	80012dc <__ledf2+0x74>
 8001318:	2900      	cmp	r1, #0
 800131a:	d0e5      	beq.n	80012e8 <__ledf2+0x80>
 800131c:	0008      	movs	r0, r1
 800131e:	e7dd      	b.n	80012dc <__ledf2+0x74>
 8001320:	45c4      	cmp	ip, r8
 8001322:	d8d5      	bhi.n	80012d0 <__ledf2+0x68>
 8001324:	2000      	movs	r0, #0
 8001326:	45c4      	cmp	ip, r8
 8001328:	d2d8      	bcs.n	80012dc <__ledf2+0x74>
 800132a:	e7f5      	b.n	8001318 <__ledf2+0xb0>
 800132c:	000007ff 	.word	0x000007ff

08001330 <__aeabi_dmul>:
 8001330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001332:	4657      	mov	r7, sl
 8001334:	464e      	mov	r6, r9
 8001336:	4645      	mov	r5, r8
 8001338:	46de      	mov	lr, fp
 800133a:	b5e0      	push	{r5, r6, r7, lr}
 800133c:	4698      	mov	r8, r3
 800133e:	030c      	lsls	r4, r1, #12
 8001340:	004b      	lsls	r3, r1, #1
 8001342:	0006      	movs	r6, r0
 8001344:	4692      	mov	sl, r2
 8001346:	b087      	sub	sp, #28
 8001348:	0b24      	lsrs	r4, r4, #12
 800134a:	0d5b      	lsrs	r3, r3, #21
 800134c:	0fcf      	lsrs	r7, r1, #31
 800134e:	2b00      	cmp	r3, #0
 8001350:	d100      	bne.n	8001354 <__aeabi_dmul+0x24>
 8001352:	e15c      	b.n	800160e <__aeabi_dmul+0x2de>
 8001354:	4ad9      	ldr	r2, [pc, #868]	; (80016bc <__aeabi_dmul+0x38c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d100      	bne.n	800135c <__aeabi_dmul+0x2c>
 800135a:	e175      	b.n	8001648 <__aeabi_dmul+0x318>
 800135c:	0f42      	lsrs	r2, r0, #29
 800135e:	00e4      	lsls	r4, r4, #3
 8001360:	4314      	orrs	r4, r2
 8001362:	2280      	movs	r2, #128	; 0x80
 8001364:	0412      	lsls	r2, r2, #16
 8001366:	4314      	orrs	r4, r2
 8001368:	4ad5      	ldr	r2, [pc, #852]	; (80016c0 <__aeabi_dmul+0x390>)
 800136a:	00c5      	lsls	r5, r0, #3
 800136c:	4694      	mov	ip, r2
 800136e:	4463      	add	r3, ip
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2300      	movs	r3, #0
 8001374:	4699      	mov	r9, r3
 8001376:	469b      	mov	fp, r3
 8001378:	4643      	mov	r3, r8
 800137a:	4642      	mov	r2, r8
 800137c:	031e      	lsls	r6, r3, #12
 800137e:	0fd2      	lsrs	r2, r2, #31
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4650      	mov	r0, sl
 8001384:	4690      	mov	r8, r2
 8001386:	0b36      	lsrs	r6, r6, #12
 8001388:	0d5b      	lsrs	r3, r3, #21
 800138a:	d100      	bne.n	800138e <__aeabi_dmul+0x5e>
 800138c:	e120      	b.n	80015d0 <__aeabi_dmul+0x2a0>
 800138e:	4acb      	ldr	r2, [pc, #812]	; (80016bc <__aeabi_dmul+0x38c>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d100      	bne.n	8001396 <__aeabi_dmul+0x66>
 8001394:	e162      	b.n	800165c <__aeabi_dmul+0x32c>
 8001396:	49ca      	ldr	r1, [pc, #808]	; (80016c0 <__aeabi_dmul+0x390>)
 8001398:	0f42      	lsrs	r2, r0, #29
 800139a:	468c      	mov	ip, r1
 800139c:	9900      	ldr	r1, [sp, #0]
 800139e:	4463      	add	r3, ip
 80013a0:	00f6      	lsls	r6, r6, #3
 80013a2:	468c      	mov	ip, r1
 80013a4:	4316      	orrs	r6, r2
 80013a6:	2280      	movs	r2, #128	; 0x80
 80013a8:	449c      	add	ip, r3
 80013aa:	0412      	lsls	r2, r2, #16
 80013ac:	4663      	mov	r3, ip
 80013ae:	4316      	orrs	r6, r2
 80013b0:	00c2      	lsls	r2, r0, #3
 80013b2:	2000      	movs	r0, #0
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	9900      	ldr	r1, [sp, #0]
 80013b8:	4643      	mov	r3, r8
 80013ba:	3101      	adds	r1, #1
 80013bc:	468c      	mov	ip, r1
 80013be:	4649      	mov	r1, r9
 80013c0:	407b      	eors	r3, r7
 80013c2:	9301      	str	r3, [sp, #4]
 80013c4:	290f      	cmp	r1, #15
 80013c6:	d826      	bhi.n	8001416 <__aeabi_dmul+0xe6>
 80013c8:	4bbe      	ldr	r3, [pc, #760]	; (80016c4 <__aeabi_dmul+0x394>)
 80013ca:	0089      	lsls	r1, r1, #2
 80013cc:	5859      	ldr	r1, [r3, r1]
 80013ce:	468f      	mov	pc, r1
 80013d0:	4643      	mov	r3, r8
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	0034      	movs	r4, r6
 80013d6:	0015      	movs	r5, r2
 80013d8:	4683      	mov	fp, r0
 80013da:	465b      	mov	r3, fp
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d016      	beq.n	800140e <__aeabi_dmul+0xde>
 80013e0:	2b03      	cmp	r3, #3
 80013e2:	d100      	bne.n	80013e6 <__aeabi_dmul+0xb6>
 80013e4:	e203      	b.n	80017ee <__aeabi_dmul+0x4be>
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d000      	beq.n	80013ec <__aeabi_dmul+0xbc>
 80013ea:	e0cd      	b.n	8001588 <__aeabi_dmul+0x258>
 80013ec:	2200      	movs	r2, #0
 80013ee:	2400      	movs	r4, #0
 80013f0:	2500      	movs	r5, #0
 80013f2:	9b01      	ldr	r3, [sp, #4]
 80013f4:	0512      	lsls	r2, r2, #20
 80013f6:	4322      	orrs	r2, r4
 80013f8:	07db      	lsls	r3, r3, #31
 80013fa:	431a      	orrs	r2, r3
 80013fc:	0028      	movs	r0, r5
 80013fe:	0011      	movs	r1, r2
 8001400:	b007      	add	sp, #28
 8001402:	bcf0      	pop	{r4, r5, r6, r7}
 8001404:	46bb      	mov	fp, r7
 8001406:	46b2      	mov	sl, r6
 8001408:	46a9      	mov	r9, r5
 800140a:	46a0      	mov	r8, r4
 800140c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800140e:	2400      	movs	r4, #0
 8001410:	2500      	movs	r5, #0
 8001412:	4aaa      	ldr	r2, [pc, #680]	; (80016bc <__aeabi_dmul+0x38c>)
 8001414:	e7ed      	b.n	80013f2 <__aeabi_dmul+0xc2>
 8001416:	0c28      	lsrs	r0, r5, #16
 8001418:	042d      	lsls	r5, r5, #16
 800141a:	0c2d      	lsrs	r5, r5, #16
 800141c:	002b      	movs	r3, r5
 800141e:	0c11      	lsrs	r1, r2, #16
 8001420:	0412      	lsls	r2, r2, #16
 8001422:	0c12      	lsrs	r2, r2, #16
 8001424:	4353      	muls	r3, r2
 8001426:	4698      	mov	r8, r3
 8001428:	0013      	movs	r3, r2
 800142a:	002f      	movs	r7, r5
 800142c:	4343      	muls	r3, r0
 800142e:	4699      	mov	r9, r3
 8001430:	434f      	muls	r7, r1
 8001432:	444f      	add	r7, r9
 8001434:	46bb      	mov	fp, r7
 8001436:	4647      	mov	r7, r8
 8001438:	000b      	movs	r3, r1
 800143a:	0c3f      	lsrs	r7, r7, #16
 800143c:	46ba      	mov	sl, r7
 800143e:	4343      	muls	r3, r0
 8001440:	44da      	add	sl, fp
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	45d1      	cmp	r9, sl
 8001446:	d904      	bls.n	8001452 <__aeabi_dmul+0x122>
 8001448:	2780      	movs	r7, #128	; 0x80
 800144a:	027f      	lsls	r7, r7, #9
 800144c:	46b9      	mov	r9, r7
 800144e:	444b      	add	r3, r9
 8001450:	9302      	str	r3, [sp, #8]
 8001452:	4653      	mov	r3, sl
 8001454:	0c1b      	lsrs	r3, r3, #16
 8001456:	469b      	mov	fp, r3
 8001458:	4653      	mov	r3, sl
 800145a:	041f      	lsls	r7, r3, #16
 800145c:	4643      	mov	r3, r8
 800145e:	041b      	lsls	r3, r3, #16
 8001460:	0c1b      	lsrs	r3, r3, #16
 8001462:	4698      	mov	r8, r3
 8001464:	003b      	movs	r3, r7
 8001466:	4443      	add	r3, r8
 8001468:	9304      	str	r3, [sp, #16]
 800146a:	0c33      	lsrs	r3, r6, #16
 800146c:	0436      	lsls	r6, r6, #16
 800146e:	0c36      	lsrs	r6, r6, #16
 8001470:	4698      	mov	r8, r3
 8001472:	0033      	movs	r3, r6
 8001474:	4343      	muls	r3, r0
 8001476:	4699      	mov	r9, r3
 8001478:	4643      	mov	r3, r8
 800147a:	4343      	muls	r3, r0
 800147c:	002f      	movs	r7, r5
 800147e:	469a      	mov	sl, r3
 8001480:	4643      	mov	r3, r8
 8001482:	4377      	muls	r7, r6
 8001484:	435d      	muls	r5, r3
 8001486:	0c38      	lsrs	r0, r7, #16
 8001488:	444d      	add	r5, r9
 800148a:	1945      	adds	r5, r0, r5
 800148c:	45a9      	cmp	r9, r5
 800148e:	d903      	bls.n	8001498 <__aeabi_dmul+0x168>
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	025b      	lsls	r3, r3, #9
 8001494:	4699      	mov	r9, r3
 8001496:	44ca      	add	sl, r9
 8001498:	043f      	lsls	r7, r7, #16
 800149a:	0c28      	lsrs	r0, r5, #16
 800149c:	0c3f      	lsrs	r7, r7, #16
 800149e:	042d      	lsls	r5, r5, #16
 80014a0:	19ed      	adds	r5, r5, r7
 80014a2:	0c27      	lsrs	r7, r4, #16
 80014a4:	0424      	lsls	r4, r4, #16
 80014a6:	0c24      	lsrs	r4, r4, #16
 80014a8:	0003      	movs	r3, r0
 80014aa:	0020      	movs	r0, r4
 80014ac:	4350      	muls	r0, r2
 80014ae:	437a      	muls	r2, r7
 80014b0:	4691      	mov	r9, r2
 80014b2:	003a      	movs	r2, r7
 80014b4:	4453      	add	r3, sl
 80014b6:	9305      	str	r3, [sp, #20]
 80014b8:	0c03      	lsrs	r3, r0, #16
 80014ba:	469a      	mov	sl, r3
 80014bc:	434a      	muls	r2, r1
 80014be:	4361      	muls	r1, r4
 80014c0:	4449      	add	r1, r9
 80014c2:	4451      	add	r1, sl
 80014c4:	44ab      	add	fp, r5
 80014c6:	4589      	cmp	r9, r1
 80014c8:	d903      	bls.n	80014d2 <__aeabi_dmul+0x1a2>
 80014ca:	2380      	movs	r3, #128	; 0x80
 80014cc:	025b      	lsls	r3, r3, #9
 80014ce:	4699      	mov	r9, r3
 80014d0:	444a      	add	r2, r9
 80014d2:	0400      	lsls	r0, r0, #16
 80014d4:	0c0b      	lsrs	r3, r1, #16
 80014d6:	0c00      	lsrs	r0, r0, #16
 80014d8:	0409      	lsls	r1, r1, #16
 80014da:	1809      	adds	r1, r1, r0
 80014dc:	0020      	movs	r0, r4
 80014de:	4699      	mov	r9, r3
 80014e0:	4643      	mov	r3, r8
 80014e2:	4370      	muls	r0, r6
 80014e4:	435c      	muls	r4, r3
 80014e6:	437e      	muls	r6, r7
 80014e8:	435f      	muls	r7, r3
 80014ea:	0c03      	lsrs	r3, r0, #16
 80014ec:	4698      	mov	r8, r3
 80014ee:	19a4      	adds	r4, r4, r6
 80014f0:	4444      	add	r4, r8
 80014f2:	444a      	add	r2, r9
 80014f4:	9703      	str	r7, [sp, #12]
 80014f6:	42a6      	cmp	r6, r4
 80014f8:	d904      	bls.n	8001504 <__aeabi_dmul+0x1d4>
 80014fa:	2380      	movs	r3, #128	; 0x80
 80014fc:	025b      	lsls	r3, r3, #9
 80014fe:	4698      	mov	r8, r3
 8001500:	4447      	add	r7, r8
 8001502:	9703      	str	r7, [sp, #12]
 8001504:	0423      	lsls	r3, r4, #16
 8001506:	9e02      	ldr	r6, [sp, #8]
 8001508:	469a      	mov	sl, r3
 800150a:	9b05      	ldr	r3, [sp, #20]
 800150c:	445e      	add	r6, fp
 800150e:	4698      	mov	r8, r3
 8001510:	42ae      	cmp	r6, r5
 8001512:	41ad      	sbcs	r5, r5
 8001514:	1876      	adds	r6, r6, r1
 8001516:	428e      	cmp	r6, r1
 8001518:	4189      	sbcs	r1, r1
 800151a:	0400      	lsls	r0, r0, #16
 800151c:	0c00      	lsrs	r0, r0, #16
 800151e:	4450      	add	r0, sl
 8001520:	4440      	add	r0, r8
 8001522:	426d      	negs	r5, r5
 8001524:	1947      	adds	r7, r0, r5
 8001526:	46b8      	mov	r8, r7
 8001528:	4693      	mov	fp, r2
 800152a:	4249      	negs	r1, r1
 800152c:	4689      	mov	r9, r1
 800152e:	44c3      	add	fp, r8
 8001530:	44d9      	add	r9, fp
 8001532:	4298      	cmp	r0, r3
 8001534:	4180      	sbcs	r0, r0
 8001536:	45a8      	cmp	r8, r5
 8001538:	41ad      	sbcs	r5, r5
 800153a:	4593      	cmp	fp, r2
 800153c:	4192      	sbcs	r2, r2
 800153e:	4589      	cmp	r9, r1
 8001540:	4189      	sbcs	r1, r1
 8001542:	426d      	negs	r5, r5
 8001544:	4240      	negs	r0, r0
 8001546:	4328      	orrs	r0, r5
 8001548:	0c24      	lsrs	r4, r4, #16
 800154a:	4252      	negs	r2, r2
 800154c:	4249      	negs	r1, r1
 800154e:	430a      	orrs	r2, r1
 8001550:	9b03      	ldr	r3, [sp, #12]
 8001552:	1900      	adds	r0, r0, r4
 8001554:	1880      	adds	r0, r0, r2
 8001556:	18c7      	adds	r7, r0, r3
 8001558:	464b      	mov	r3, r9
 800155a:	0ddc      	lsrs	r4, r3, #23
 800155c:	9b04      	ldr	r3, [sp, #16]
 800155e:	0275      	lsls	r5, r6, #9
 8001560:	431d      	orrs	r5, r3
 8001562:	1e6a      	subs	r2, r5, #1
 8001564:	4195      	sbcs	r5, r2
 8001566:	464b      	mov	r3, r9
 8001568:	0df6      	lsrs	r6, r6, #23
 800156a:	027f      	lsls	r7, r7, #9
 800156c:	4335      	orrs	r5, r6
 800156e:	025a      	lsls	r2, r3, #9
 8001570:	433c      	orrs	r4, r7
 8001572:	4315      	orrs	r5, r2
 8001574:	01fb      	lsls	r3, r7, #7
 8001576:	d400      	bmi.n	800157a <__aeabi_dmul+0x24a>
 8001578:	e11c      	b.n	80017b4 <__aeabi_dmul+0x484>
 800157a:	2101      	movs	r1, #1
 800157c:	086a      	lsrs	r2, r5, #1
 800157e:	400d      	ands	r5, r1
 8001580:	4315      	orrs	r5, r2
 8001582:	07e2      	lsls	r2, r4, #31
 8001584:	4315      	orrs	r5, r2
 8001586:	0864      	lsrs	r4, r4, #1
 8001588:	494f      	ldr	r1, [pc, #316]	; (80016c8 <__aeabi_dmul+0x398>)
 800158a:	4461      	add	r1, ip
 800158c:	2900      	cmp	r1, #0
 800158e:	dc00      	bgt.n	8001592 <__aeabi_dmul+0x262>
 8001590:	e0b0      	b.n	80016f4 <__aeabi_dmul+0x3c4>
 8001592:	076b      	lsls	r3, r5, #29
 8001594:	d009      	beq.n	80015aa <__aeabi_dmul+0x27a>
 8001596:	220f      	movs	r2, #15
 8001598:	402a      	ands	r2, r5
 800159a:	2a04      	cmp	r2, #4
 800159c:	d005      	beq.n	80015aa <__aeabi_dmul+0x27a>
 800159e:	1d2a      	adds	r2, r5, #4
 80015a0:	42aa      	cmp	r2, r5
 80015a2:	41ad      	sbcs	r5, r5
 80015a4:	426d      	negs	r5, r5
 80015a6:	1964      	adds	r4, r4, r5
 80015a8:	0015      	movs	r5, r2
 80015aa:	01e3      	lsls	r3, r4, #7
 80015ac:	d504      	bpl.n	80015b8 <__aeabi_dmul+0x288>
 80015ae:	2180      	movs	r1, #128	; 0x80
 80015b0:	4a46      	ldr	r2, [pc, #280]	; (80016cc <__aeabi_dmul+0x39c>)
 80015b2:	00c9      	lsls	r1, r1, #3
 80015b4:	4014      	ands	r4, r2
 80015b6:	4461      	add	r1, ip
 80015b8:	4a45      	ldr	r2, [pc, #276]	; (80016d0 <__aeabi_dmul+0x3a0>)
 80015ba:	4291      	cmp	r1, r2
 80015bc:	dd00      	ble.n	80015c0 <__aeabi_dmul+0x290>
 80015be:	e726      	b.n	800140e <__aeabi_dmul+0xde>
 80015c0:	0762      	lsls	r2, r4, #29
 80015c2:	08ed      	lsrs	r5, r5, #3
 80015c4:	0264      	lsls	r4, r4, #9
 80015c6:	0549      	lsls	r1, r1, #21
 80015c8:	4315      	orrs	r5, r2
 80015ca:	0b24      	lsrs	r4, r4, #12
 80015cc:	0d4a      	lsrs	r2, r1, #21
 80015ce:	e710      	b.n	80013f2 <__aeabi_dmul+0xc2>
 80015d0:	4652      	mov	r2, sl
 80015d2:	4332      	orrs	r2, r6
 80015d4:	d100      	bne.n	80015d8 <__aeabi_dmul+0x2a8>
 80015d6:	e07f      	b.n	80016d8 <__aeabi_dmul+0x3a8>
 80015d8:	2e00      	cmp	r6, #0
 80015da:	d100      	bne.n	80015de <__aeabi_dmul+0x2ae>
 80015dc:	e0dc      	b.n	8001798 <__aeabi_dmul+0x468>
 80015de:	0030      	movs	r0, r6
 80015e0:	f000 fd28 	bl	8002034 <__clzsi2>
 80015e4:	0002      	movs	r2, r0
 80015e6:	3a0b      	subs	r2, #11
 80015e8:	231d      	movs	r3, #29
 80015ea:	0001      	movs	r1, r0
 80015ec:	1a9b      	subs	r3, r3, r2
 80015ee:	4652      	mov	r2, sl
 80015f0:	3908      	subs	r1, #8
 80015f2:	40da      	lsrs	r2, r3
 80015f4:	408e      	lsls	r6, r1
 80015f6:	4316      	orrs	r6, r2
 80015f8:	4652      	mov	r2, sl
 80015fa:	408a      	lsls	r2, r1
 80015fc:	9b00      	ldr	r3, [sp, #0]
 80015fe:	4935      	ldr	r1, [pc, #212]	; (80016d4 <__aeabi_dmul+0x3a4>)
 8001600:	1a18      	subs	r0, r3, r0
 8001602:	0003      	movs	r3, r0
 8001604:	468c      	mov	ip, r1
 8001606:	4463      	add	r3, ip
 8001608:	2000      	movs	r0, #0
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	e6d3      	b.n	80013b6 <__aeabi_dmul+0x86>
 800160e:	0025      	movs	r5, r4
 8001610:	4305      	orrs	r5, r0
 8001612:	d04a      	beq.n	80016aa <__aeabi_dmul+0x37a>
 8001614:	2c00      	cmp	r4, #0
 8001616:	d100      	bne.n	800161a <__aeabi_dmul+0x2ea>
 8001618:	e0b0      	b.n	800177c <__aeabi_dmul+0x44c>
 800161a:	0020      	movs	r0, r4
 800161c:	f000 fd0a 	bl	8002034 <__clzsi2>
 8001620:	0001      	movs	r1, r0
 8001622:	0002      	movs	r2, r0
 8001624:	390b      	subs	r1, #11
 8001626:	231d      	movs	r3, #29
 8001628:	0010      	movs	r0, r2
 800162a:	1a5b      	subs	r3, r3, r1
 800162c:	0031      	movs	r1, r6
 800162e:	0035      	movs	r5, r6
 8001630:	3808      	subs	r0, #8
 8001632:	4084      	lsls	r4, r0
 8001634:	40d9      	lsrs	r1, r3
 8001636:	4085      	lsls	r5, r0
 8001638:	430c      	orrs	r4, r1
 800163a:	4826      	ldr	r0, [pc, #152]	; (80016d4 <__aeabi_dmul+0x3a4>)
 800163c:	1a83      	subs	r3, r0, r2
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2300      	movs	r3, #0
 8001642:	4699      	mov	r9, r3
 8001644:	469b      	mov	fp, r3
 8001646:	e697      	b.n	8001378 <__aeabi_dmul+0x48>
 8001648:	0005      	movs	r5, r0
 800164a:	4325      	orrs	r5, r4
 800164c:	d126      	bne.n	800169c <__aeabi_dmul+0x36c>
 800164e:	2208      	movs	r2, #8
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	2302      	movs	r3, #2
 8001654:	2400      	movs	r4, #0
 8001656:	4691      	mov	r9, r2
 8001658:	469b      	mov	fp, r3
 800165a:	e68d      	b.n	8001378 <__aeabi_dmul+0x48>
 800165c:	4652      	mov	r2, sl
 800165e:	9b00      	ldr	r3, [sp, #0]
 8001660:	4332      	orrs	r2, r6
 8001662:	d110      	bne.n	8001686 <__aeabi_dmul+0x356>
 8001664:	4915      	ldr	r1, [pc, #84]	; (80016bc <__aeabi_dmul+0x38c>)
 8001666:	2600      	movs	r6, #0
 8001668:	468c      	mov	ip, r1
 800166a:	4463      	add	r3, ip
 800166c:	4649      	mov	r1, r9
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	2302      	movs	r3, #2
 8001672:	4319      	orrs	r1, r3
 8001674:	4689      	mov	r9, r1
 8001676:	2002      	movs	r0, #2
 8001678:	e69d      	b.n	80013b6 <__aeabi_dmul+0x86>
 800167a:	465b      	mov	r3, fp
 800167c:	9701      	str	r7, [sp, #4]
 800167e:	2b02      	cmp	r3, #2
 8001680:	d000      	beq.n	8001684 <__aeabi_dmul+0x354>
 8001682:	e6ad      	b.n	80013e0 <__aeabi_dmul+0xb0>
 8001684:	e6c3      	b.n	800140e <__aeabi_dmul+0xde>
 8001686:	4a0d      	ldr	r2, [pc, #52]	; (80016bc <__aeabi_dmul+0x38c>)
 8001688:	2003      	movs	r0, #3
 800168a:	4694      	mov	ip, r2
 800168c:	4463      	add	r3, ip
 800168e:	464a      	mov	r2, r9
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	2303      	movs	r3, #3
 8001694:	431a      	orrs	r2, r3
 8001696:	4691      	mov	r9, r2
 8001698:	4652      	mov	r2, sl
 800169a:	e68c      	b.n	80013b6 <__aeabi_dmul+0x86>
 800169c:	220c      	movs	r2, #12
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2303      	movs	r3, #3
 80016a2:	0005      	movs	r5, r0
 80016a4:	4691      	mov	r9, r2
 80016a6:	469b      	mov	fp, r3
 80016a8:	e666      	b.n	8001378 <__aeabi_dmul+0x48>
 80016aa:	2304      	movs	r3, #4
 80016ac:	4699      	mov	r9, r3
 80016ae:	2300      	movs	r3, #0
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	3301      	adds	r3, #1
 80016b4:	2400      	movs	r4, #0
 80016b6:	469b      	mov	fp, r3
 80016b8:	e65e      	b.n	8001378 <__aeabi_dmul+0x48>
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	000007ff 	.word	0x000007ff
 80016c0:	fffffc01 	.word	0xfffffc01
 80016c4:	0800606c 	.word	0x0800606c
 80016c8:	000003ff 	.word	0x000003ff
 80016cc:	feffffff 	.word	0xfeffffff
 80016d0:	000007fe 	.word	0x000007fe
 80016d4:	fffffc0d 	.word	0xfffffc0d
 80016d8:	4649      	mov	r1, r9
 80016da:	2301      	movs	r3, #1
 80016dc:	4319      	orrs	r1, r3
 80016de:	4689      	mov	r9, r1
 80016e0:	2600      	movs	r6, #0
 80016e2:	2001      	movs	r0, #1
 80016e4:	e667      	b.n	80013b6 <__aeabi_dmul+0x86>
 80016e6:	2300      	movs	r3, #0
 80016e8:	2480      	movs	r4, #128	; 0x80
 80016ea:	2500      	movs	r5, #0
 80016ec:	4a43      	ldr	r2, [pc, #268]	; (80017fc <__aeabi_dmul+0x4cc>)
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	0324      	lsls	r4, r4, #12
 80016f2:	e67e      	b.n	80013f2 <__aeabi_dmul+0xc2>
 80016f4:	2001      	movs	r0, #1
 80016f6:	1a40      	subs	r0, r0, r1
 80016f8:	2838      	cmp	r0, #56	; 0x38
 80016fa:	dd00      	ble.n	80016fe <__aeabi_dmul+0x3ce>
 80016fc:	e676      	b.n	80013ec <__aeabi_dmul+0xbc>
 80016fe:	281f      	cmp	r0, #31
 8001700:	dd5b      	ble.n	80017ba <__aeabi_dmul+0x48a>
 8001702:	221f      	movs	r2, #31
 8001704:	0023      	movs	r3, r4
 8001706:	4252      	negs	r2, r2
 8001708:	1a51      	subs	r1, r2, r1
 800170a:	40cb      	lsrs	r3, r1
 800170c:	0019      	movs	r1, r3
 800170e:	2820      	cmp	r0, #32
 8001710:	d003      	beq.n	800171a <__aeabi_dmul+0x3ea>
 8001712:	4a3b      	ldr	r2, [pc, #236]	; (8001800 <__aeabi_dmul+0x4d0>)
 8001714:	4462      	add	r2, ip
 8001716:	4094      	lsls	r4, r2
 8001718:	4325      	orrs	r5, r4
 800171a:	1e6a      	subs	r2, r5, #1
 800171c:	4195      	sbcs	r5, r2
 800171e:	002a      	movs	r2, r5
 8001720:	430a      	orrs	r2, r1
 8001722:	2107      	movs	r1, #7
 8001724:	000d      	movs	r5, r1
 8001726:	2400      	movs	r4, #0
 8001728:	4015      	ands	r5, r2
 800172a:	4211      	tst	r1, r2
 800172c:	d05b      	beq.n	80017e6 <__aeabi_dmul+0x4b6>
 800172e:	210f      	movs	r1, #15
 8001730:	2400      	movs	r4, #0
 8001732:	4011      	ands	r1, r2
 8001734:	2904      	cmp	r1, #4
 8001736:	d053      	beq.n	80017e0 <__aeabi_dmul+0x4b0>
 8001738:	1d11      	adds	r1, r2, #4
 800173a:	4291      	cmp	r1, r2
 800173c:	4192      	sbcs	r2, r2
 800173e:	4252      	negs	r2, r2
 8001740:	18a4      	adds	r4, r4, r2
 8001742:	000a      	movs	r2, r1
 8001744:	0223      	lsls	r3, r4, #8
 8001746:	d54b      	bpl.n	80017e0 <__aeabi_dmul+0x4b0>
 8001748:	2201      	movs	r2, #1
 800174a:	2400      	movs	r4, #0
 800174c:	2500      	movs	r5, #0
 800174e:	e650      	b.n	80013f2 <__aeabi_dmul+0xc2>
 8001750:	2380      	movs	r3, #128	; 0x80
 8001752:	031b      	lsls	r3, r3, #12
 8001754:	421c      	tst	r4, r3
 8001756:	d009      	beq.n	800176c <__aeabi_dmul+0x43c>
 8001758:	421e      	tst	r6, r3
 800175a:	d107      	bne.n	800176c <__aeabi_dmul+0x43c>
 800175c:	4333      	orrs	r3, r6
 800175e:	031c      	lsls	r4, r3, #12
 8001760:	4643      	mov	r3, r8
 8001762:	0015      	movs	r5, r2
 8001764:	0b24      	lsrs	r4, r4, #12
 8001766:	4a25      	ldr	r2, [pc, #148]	; (80017fc <__aeabi_dmul+0x4cc>)
 8001768:	9301      	str	r3, [sp, #4]
 800176a:	e642      	b.n	80013f2 <__aeabi_dmul+0xc2>
 800176c:	2280      	movs	r2, #128	; 0x80
 800176e:	0312      	lsls	r2, r2, #12
 8001770:	4314      	orrs	r4, r2
 8001772:	0324      	lsls	r4, r4, #12
 8001774:	4a21      	ldr	r2, [pc, #132]	; (80017fc <__aeabi_dmul+0x4cc>)
 8001776:	0b24      	lsrs	r4, r4, #12
 8001778:	9701      	str	r7, [sp, #4]
 800177a:	e63a      	b.n	80013f2 <__aeabi_dmul+0xc2>
 800177c:	f000 fc5a 	bl	8002034 <__clzsi2>
 8001780:	0001      	movs	r1, r0
 8001782:	0002      	movs	r2, r0
 8001784:	3115      	adds	r1, #21
 8001786:	3220      	adds	r2, #32
 8001788:	291c      	cmp	r1, #28
 800178a:	dc00      	bgt.n	800178e <__aeabi_dmul+0x45e>
 800178c:	e74b      	b.n	8001626 <__aeabi_dmul+0x2f6>
 800178e:	0034      	movs	r4, r6
 8001790:	3808      	subs	r0, #8
 8001792:	2500      	movs	r5, #0
 8001794:	4084      	lsls	r4, r0
 8001796:	e750      	b.n	800163a <__aeabi_dmul+0x30a>
 8001798:	f000 fc4c 	bl	8002034 <__clzsi2>
 800179c:	0003      	movs	r3, r0
 800179e:	001a      	movs	r2, r3
 80017a0:	3215      	adds	r2, #21
 80017a2:	3020      	adds	r0, #32
 80017a4:	2a1c      	cmp	r2, #28
 80017a6:	dc00      	bgt.n	80017aa <__aeabi_dmul+0x47a>
 80017a8:	e71e      	b.n	80015e8 <__aeabi_dmul+0x2b8>
 80017aa:	4656      	mov	r6, sl
 80017ac:	3b08      	subs	r3, #8
 80017ae:	2200      	movs	r2, #0
 80017b0:	409e      	lsls	r6, r3
 80017b2:	e723      	b.n	80015fc <__aeabi_dmul+0x2cc>
 80017b4:	9b00      	ldr	r3, [sp, #0]
 80017b6:	469c      	mov	ip, r3
 80017b8:	e6e6      	b.n	8001588 <__aeabi_dmul+0x258>
 80017ba:	4912      	ldr	r1, [pc, #72]	; (8001804 <__aeabi_dmul+0x4d4>)
 80017bc:	0022      	movs	r2, r4
 80017be:	4461      	add	r1, ip
 80017c0:	002e      	movs	r6, r5
 80017c2:	408d      	lsls	r5, r1
 80017c4:	408a      	lsls	r2, r1
 80017c6:	40c6      	lsrs	r6, r0
 80017c8:	1e69      	subs	r1, r5, #1
 80017ca:	418d      	sbcs	r5, r1
 80017cc:	4332      	orrs	r2, r6
 80017ce:	432a      	orrs	r2, r5
 80017d0:	40c4      	lsrs	r4, r0
 80017d2:	0753      	lsls	r3, r2, #29
 80017d4:	d0b6      	beq.n	8001744 <__aeabi_dmul+0x414>
 80017d6:	210f      	movs	r1, #15
 80017d8:	4011      	ands	r1, r2
 80017da:	2904      	cmp	r1, #4
 80017dc:	d1ac      	bne.n	8001738 <__aeabi_dmul+0x408>
 80017de:	e7b1      	b.n	8001744 <__aeabi_dmul+0x414>
 80017e0:	0765      	lsls	r5, r4, #29
 80017e2:	0264      	lsls	r4, r4, #9
 80017e4:	0b24      	lsrs	r4, r4, #12
 80017e6:	08d2      	lsrs	r2, r2, #3
 80017e8:	4315      	orrs	r5, r2
 80017ea:	2200      	movs	r2, #0
 80017ec:	e601      	b.n	80013f2 <__aeabi_dmul+0xc2>
 80017ee:	2280      	movs	r2, #128	; 0x80
 80017f0:	0312      	lsls	r2, r2, #12
 80017f2:	4314      	orrs	r4, r2
 80017f4:	0324      	lsls	r4, r4, #12
 80017f6:	4a01      	ldr	r2, [pc, #4]	; (80017fc <__aeabi_dmul+0x4cc>)
 80017f8:	0b24      	lsrs	r4, r4, #12
 80017fa:	e5fa      	b.n	80013f2 <__aeabi_dmul+0xc2>
 80017fc:	000007ff 	.word	0x000007ff
 8001800:	0000043e 	.word	0x0000043e
 8001804:	0000041e 	.word	0x0000041e

08001808 <__aeabi_dsub>:
 8001808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800180a:	4657      	mov	r7, sl
 800180c:	464e      	mov	r6, r9
 800180e:	4645      	mov	r5, r8
 8001810:	46de      	mov	lr, fp
 8001812:	b5e0      	push	{r5, r6, r7, lr}
 8001814:	001e      	movs	r6, r3
 8001816:	0017      	movs	r7, r2
 8001818:	004a      	lsls	r2, r1, #1
 800181a:	030b      	lsls	r3, r1, #12
 800181c:	0d52      	lsrs	r2, r2, #21
 800181e:	0a5b      	lsrs	r3, r3, #9
 8001820:	4690      	mov	r8, r2
 8001822:	0f42      	lsrs	r2, r0, #29
 8001824:	431a      	orrs	r2, r3
 8001826:	0fcd      	lsrs	r5, r1, #31
 8001828:	4ccd      	ldr	r4, [pc, #820]	; (8001b60 <__aeabi_dsub+0x358>)
 800182a:	0331      	lsls	r1, r6, #12
 800182c:	00c3      	lsls	r3, r0, #3
 800182e:	4694      	mov	ip, r2
 8001830:	0070      	lsls	r0, r6, #1
 8001832:	0f7a      	lsrs	r2, r7, #29
 8001834:	0a49      	lsrs	r1, r1, #9
 8001836:	00ff      	lsls	r7, r7, #3
 8001838:	469a      	mov	sl, r3
 800183a:	46b9      	mov	r9, r7
 800183c:	0d40      	lsrs	r0, r0, #21
 800183e:	0ff6      	lsrs	r6, r6, #31
 8001840:	4311      	orrs	r1, r2
 8001842:	42a0      	cmp	r0, r4
 8001844:	d100      	bne.n	8001848 <__aeabi_dsub+0x40>
 8001846:	e0b1      	b.n	80019ac <__aeabi_dsub+0x1a4>
 8001848:	2201      	movs	r2, #1
 800184a:	4056      	eors	r6, r2
 800184c:	46b3      	mov	fp, r6
 800184e:	42b5      	cmp	r5, r6
 8001850:	d100      	bne.n	8001854 <__aeabi_dsub+0x4c>
 8001852:	e088      	b.n	8001966 <__aeabi_dsub+0x15e>
 8001854:	4642      	mov	r2, r8
 8001856:	1a12      	subs	r2, r2, r0
 8001858:	2a00      	cmp	r2, #0
 800185a:	dc00      	bgt.n	800185e <__aeabi_dsub+0x56>
 800185c:	e0ae      	b.n	80019bc <__aeabi_dsub+0x1b4>
 800185e:	2800      	cmp	r0, #0
 8001860:	d100      	bne.n	8001864 <__aeabi_dsub+0x5c>
 8001862:	e0c1      	b.n	80019e8 <__aeabi_dsub+0x1e0>
 8001864:	48be      	ldr	r0, [pc, #760]	; (8001b60 <__aeabi_dsub+0x358>)
 8001866:	4580      	cmp	r8, r0
 8001868:	d100      	bne.n	800186c <__aeabi_dsub+0x64>
 800186a:	e151      	b.n	8001b10 <__aeabi_dsub+0x308>
 800186c:	2080      	movs	r0, #128	; 0x80
 800186e:	0400      	lsls	r0, r0, #16
 8001870:	4301      	orrs	r1, r0
 8001872:	2a38      	cmp	r2, #56	; 0x38
 8001874:	dd00      	ble.n	8001878 <__aeabi_dsub+0x70>
 8001876:	e17b      	b.n	8001b70 <__aeabi_dsub+0x368>
 8001878:	2a1f      	cmp	r2, #31
 800187a:	dd00      	ble.n	800187e <__aeabi_dsub+0x76>
 800187c:	e1ee      	b.n	8001c5c <__aeabi_dsub+0x454>
 800187e:	2020      	movs	r0, #32
 8001880:	003e      	movs	r6, r7
 8001882:	1a80      	subs	r0, r0, r2
 8001884:	000c      	movs	r4, r1
 8001886:	40d6      	lsrs	r6, r2
 8001888:	40d1      	lsrs	r1, r2
 800188a:	4087      	lsls	r7, r0
 800188c:	4662      	mov	r2, ip
 800188e:	4084      	lsls	r4, r0
 8001890:	1a52      	subs	r2, r2, r1
 8001892:	1e78      	subs	r0, r7, #1
 8001894:	4187      	sbcs	r7, r0
 8001896:	4694      	mov	ip, r2
 8001898:	4334      	orrs	r4, r6
 800189a:	4327      	orrs	r7, r4
 800189c:	1bdc      	subs	r4, r3, r7
 800189e:	42a3      	cmp	r3, r4
 80018a0:	419b      	sbcs	r3, r3
 80018a2:	4662      	mov	r2, ip
 80018a4:	425b      	negs	r3, r3
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	4699      	mov	r9, r3
 80018aa:	464b      	mov	r3, r9
 80018ac:	021b      	lsls	r3, r3, #8
 80018ae:	d400      	bmi.n	80018b2 <__aeabi_dsub+0xaa>
 80018b0:	e118      	b.n	8001ae4 <__aeabi_dsub+0x2dc>
 80018b2:	464b      	mov	r3, r9
 80018b4:	0258      	lsls	r0, r3, #9
 80018b6:	0a43      	lsrs	r3, r0, #9
 80018b8:	4699      	mov	r9, r3
 80018ba:	464b      	mov	r3, r9
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d100      	bne.n	80018c2 <__aeabi_dsub+0xba>
 80018c0:	e137      	b.n	8001b32 <__aeabi_dsub+0x32a>
 80018c2:	4648      	mov	r0, r9
 80018c4:	f000 fbb6 	bl	8002034 <__clzsi2>
 80018c8:	0001      	movs	r1, r0
 80018ca:	3908      	subs	r1, #8
 80018cc:	2320      	movs	r3, #32
 80018ce:	0022      	movs	r2, r4
 80018d0:	4648      	mov	r0, r9
 80018d2:	1a5b      	subs	r3, r3, r1
 80018d4:	40da      	lsrs	r2, r3
 80018d6:	4088      	lsls	r0, r1
 80018d8:	408c      	lsls	r4, r1
 80018da:	4643      	mov	r3, r8
 80018dc:	4310      	orrs	r0, r2
 80018de:	4588      	cmp	r8, r1
 80018e0:	dd00      	ble.n	80018e4 <__aeabi_dsub+0xdc>
 80018e2:	e136      	b.n	8001b52 <__aeabi_dsub+0x34a>
 80018e4:	1ac9      	subs	r1, r1, r3
 80018e6:	1c4b      	adds	r3, r1, #1
 80018e8:	2b1f      	cmp	r3, #31
 80018ea:	dd00      	ble.n	80018ee <__aeabi_dsub+0xe6>
 80018ec:	e0ea      	b.n	8001ac4 <__aeabi_dsub+0x2bc>
 80018ee:	2220      	movs	r2, #32
 80018f0:	0026      	movs	r6, r4
 80018f2:	1ad2      	subs	r2, r2, r3
 80018f4:	0001      	movs	r1, r0
 80018f6:	4094      	lsls	r4, r2
 80018f8:	40de      	lsrs	r6, r3
 80018fa:	40d8      	lsrs	r0, r3
 80018fc:	2300      	movs	r3, #0
 80018fe:	4091      	lsls	r1, r2
 8001900:	1e62      	subs	r2, r4, #1
 8001902:	4194      	sbcs	r4, r2
 8001904:	4681      	mov	r9, r0
 8001906:	4698      	mov	r8, r3
 8001908:	4331      	orrs	r1, r6
 800190a:	430c      	orrs	r4, r1
 800190c:	0763      	lsls	r3, r4, #29
 800190e:	d009      	beq.n	8001924 <__aeabi_dsub+0x11c>
 8001910:	230f      	movs	r3, #15
 8001912:	4023      	ands	r3, r4
 8001914:	2b04      	cmp	r3, #4
 8001916:	d005      	beq.n	8001924 <__aeabi_dsub+0x11c>
 8001918:	1d23      	adds	r3, r4, #4
 800191a:	42a3      	cmp	r3, r4
 800191c:	41a4      	sbcs	r4, r4
 800191e:	4264      	negs	r4, r4
 8001920:	44a1      	add	r9, r4
 8001922:	001c      	movs	r4, r3
 8001924:	464b      	mov	r3, r9
 8001926:	021b      	lsls	r3, r3, #8
 8001928:	d400      	bmi.n	800192c <__aeabi_dsub+0x124>
 800192a:	e0de      	b.n	8001aea <__aeabi_dsub+0x2e2>
 800192c:	4641      	mov	r1, r8
 800192e:	4b8c      	ldr	r3, [pc, #560]	; (8001b60 <__aeabi_dsub+0x358>)
 8001930:	3101      	adds	r1, #1
 8001932:	4299      	cmp	r1, r3
 8001934:	d100      	bne.n	8001938 <__aeabi_dsub+0x130>
 8001936:	e0e7      	b.n	8001b08 <__aeabi_dsub+0x300>
 8001938:	464b      	mov	r3, r9
 800193a:	488a      	ldr	r0, [pc, #552]	; (8001b64 <__aeabi_dsub+0x35c>)
 800193c:	08e4      	lsrs	r4, r4, #3
 800193e:	4003      	ands	r3, r0
 8001940:	0018      	movs	r0, r3
 8001942:	0549      	lsls	r1, r1, #21
 8001944:	075b      	lsls	r3, r3, #29
 8001946:	0240      	lsls	r0, r0, #9
 8001948:	4323      	orrs	r3, r4
 800194a:	0d4a      	lsrs	r2, r1, #21
 800194c:	0b04      	lsrs	r4, r0, #12
 800194e:	0512      	lsls	r2, r2, #20
 8001950:	07ed      	lsls	r5, r5, #31
 8001952:	4322      	orrs	r2, r4
 8001954:	432a      	orrs	r2, r5
 8001956:	0018      	movs	r0, r3
 8001958:	0011      	movs	r1, r2
 800195a:	bcf0      	pop	{r4, r5, r6, r7}
 800195c:	46bb      	mov	fp, r7
 800195e:	46b2      	mov	sl, r6
 8001960:	46a9      	mov	r9, r5
 8001962:	46a0      	mov	r8, r4
 8001964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001966:	4642      	mov	r2, r8
 8001968:	1a12      	subs	r2, r2, r0
 800196a:	2a00      	cmp	r2, #0
 800196c:	dd52      	ble.n	8001a14 <__aeabi_dsub+0x20c>
 800196e:	2800      	cmp	r0, #0
 8001970:	d100      	bne.n	8001974 <__aeabi_dsub+0x16c>
 8001972:	e09c      	b.n	8001aae <__aeabi_dsub+0x2a6>
 8001974:	45a0      	cmp	r8, r4
 8001976:	d100      	bne.n	800197a <__aeabi_dsub+0x172>
 8001978:	e0ca      	b.n	8001b10 <__aeabi_dsub+0x308>
 800197a:	2080      	movs	r0, #128	; 0x80
 800197c:	0400      	lsls	r0, r0, #16
 800197e:	4301      	orrs	r1, r0
 8001980:	2a38      	cmp	r2, #56	; 0x38
 8001982:	dd00      	ble.n	8001986 <__aeabi_dsub+0x17e>
 8001984:	e149      	b.n	8001c1a <__aeabi_dsub+0x412>
 8001986:	2a1f      	cmp	r2, #31
 8001988:	dc00      	bgt.n	800198c <__aeabi_dsub+0x184>
 800198a:	e197      	b.n	8001cbc <__aeabi_dsub+0x4b4>
 800198c:	0010      	movs	r0, r2
 800198e:	000e      	movs	r6, r1
 8001990:	3820      	subs	r0, #32
 8001992:	40c6      	lsrs	r6, r0
 8001994:	2a20      	cmp	r2, #32
 8001996:	d004      	beq.n	80019a2 <__aeabi_dsub+0x19a>
 8001998:	2040      	movs	r0, #64	; 0x40
 800199a:	1a82      	subs	r2, r0, r2
 800199c:	4091      	lsls	r1, r2
 800199e:	430f      	orrs	r7, r1
 80019a0:	46b9      	mov	r9, r7
 80019a2:	464c      	mov	r4, r9
 80019a4:	1e62      	subs	r2, r4, #1
 80019a6:	4194      	sbcs	r4, r2
 80019a8:	4334      	orrs	r4, r6
 80019aa:	e13a      	b.n	8001c22 <__aeabi_dsub+0x41a>
 80019ac:	000a      	movs	r2, r1
 80019ae:	433a      	orrs	r2, r7
 80019b0:	d028      	beq.n	8001a04 <__aeabi_dsub+0x1fc>
 80019b2:	46b3      	mov	fp, r6
 80019b4:	42b5      	cmp	r5, r6
 80019b6:	d02b      	beq.n	8001a10 <__aeabi_dsub+0x208>
 80019b8:	4a6b      	ldr	r2, [pc, #428]	; (8001b68 <__aeabi_dsub+0x360>)
 80019ba:	4442      	add	r2, r8
 80019bc:	2a00      	cmp	r2, #0
 80019be:	d05d      	beq.n	8001a7c <__aeabi_dsub+0x274>
 80019c0:	4642      	mov	r2, r8
 80019c2:	4644      	mov	r4, r8
 80019c4:	1a82      	subs	r2, r0, r2
 80019c6:	2c00      	cmp	r4, #0
 80019c8:	d000      	beq.n	80019cc <__aeabi_dsub+0x1c4>
 80019ca:	e0f5      	b.n	8001bb8 <__aeabi_dsub+0x3b0>
 80019cc:	4665      	mov	r5, ip
 80019ce:	431d      	orrs	r5, r3
 80019d0:	d100      	bne.n	80019d4 <__aeabi_dsub+0x1cc>
 80019d2:	e19c      	b.n	8001d0e <__aeabi_dsub+0x506>
 80019d4:	1e55      	subs	r5, r2, #1
 80019d6:	2a01      	cmp	r2, #1
 80019d8:	d100      	bne.n	80019dc <__aeabi_dsub+0x1d4>
 80019da:	e1fb      	b.n	8001dd4 <__aeabi_dsub+0x5cc>
 80019dc:	4c60      	ldr	r4, [pc, #384]	; (8001b60 <__aeabi_dsub+0x358>)
 80019de:	42a2      	cmp	r2, r4
 80019e0:	d100      	bne.n	80019e4 <__aeabi_dsub+0x1dc>
 80019e2:	e1bd      	b.n	8001d60 <__aeabi_dsub+0x558>
 80019e4:	002a      	movs	r2, r5
 80019e6:	e0f0      	b.n	8001bca <__aeabi_dsub+0x3c2>
 80019e8:	0008      	movs	r0, r1
 80019ea:	4338      	orrs	r0, r7
 80019ec:	d100      	bne.n	80019f0 <__aeabi_dsub+0x1e8>
 80019ee:	e0c3      	b.n	8001b78 <__aeabi_dsub+0x370>
 80019f0:	1e50      	subs	r0, r2, #1
 80019f2:	2a01      	cmp	r2, #1
 80019f4:	d100      	bne.n	80019f8 <__aeabi_dsub+0x1f0>
 80019f6:	e1a8      	b.n	8001d4a <__aeabi_dsub+0x542>
 80019f8:	4c59      	ldr	r4, [pc, #356]	; (8001b60 <__aeabi_dsub+0x358>)
 80019fa:	42a2      	cmp	r2, r4
 80019fc:	d100      	bne.n	8001a00 <__aeabi_dsub+0x1f8>
 80019fe:	e087      	b.n	8001b10 <__aeabi_dsub+0x308>
 8001a00:	0002      	movs	r2, r0
 8001a02:	e736      	b.n	8001872 <__aeabi_dsub+0x6a>
 8001a04:	2201      	movs	r2, #1
 8001a06:	4056      	eors	r6, r2
 8001a08:	46b3      	mov	fp, r6
 8001a0a:	42b5      	cmp	r5, r6
 8001a0c:	d000      	beq.n	8001a10 <__aeabi_dsub+0x208>
 8001a0e:	e721      	b.n	8001854 <__aeabi_dsub+0x4c>
 8001a10:	4a55      	ldr	r2, [pc, #340]	; (8001b68 <__aeabi_dsub+0x360>)
 8001a12:	4442      	add	r2, r8
 8001a14:	2a00      	cmp	r2, #0
 8001a16:	d100      	bne.n	8001a1a <__aeabi_dsub+0x212>
 8001a18:	e0b5      	b.n	8001b86 <__aeabi_dsub+0x37e>
 8001a1a:	4642      	mov	r2, r8
 8001a1c:	4644      	mov	r4, r8
 8001a1e:	1a82      	subs	r2, r0, r2
 8001a20:	2c00      	cmp	r4, #0
 8001a22:	d100      	bne.n	8001a26 <__aeabi_dsub+0x21e>
 8001a24:	e138      	b.n	8001c98 <__aeabi_dsub+0x490>
 8001a26:	4e4e      	ldr	r6, [pc, #312]	; (8001b60 <__aeabi_dsub+0x358>)
 8001a28:	42b0      	cmp	r0, r6
 8001a2a:	d100      	bne.n	8001a2e <__aeabi_dsub+0x226>
 8001a2c:	e1de      	b.n	8001dec <__aeabi_dsub+0x5e4>
 8001a2e:	2680      	movs	r6, #128	; 0x80
 8001a30:	4664      	mov	r4, ip
 8001a32:	0436      	lsls	r6, r6, #16
 8001a34:	4334      	orrs	r4, r6
 8001a36:	46a4      	mov	ip, r4
 8001a38:	2a38      	cmp	r2, #56	; 0x38
 8001a3a:	dd00      	ble.n	8001a3e <__aeabi_dsub+0x236>
 8001a3c:	e196      	b.n	8001d6c <__aeabi_dsub+0x564>
 8001a3e:	2a1f      	cmp	r2, #31
 8001a40:	dd00      	ble.n	8001a44 <__aeabi_dsub+0x23c>
 8001a42:	e224      	b.n	8001e8e <__aeabi_dsub+0x686>
 8001a44:	2620      	movs	r6, #32
 8001a46:	1ab4      	subs	r4, r6, r2
 8001a48:	46a2      	mov	sl, r4
 8001a4a:	4664      	mov	r4, ip
 8001a4c:	4656      	mov	r6, sl
 8001a4e:	40b4      	lsls	r4, r6
 8001a50:	46a1      	mov	r9, r4
 8001a52:	001c      	movs	r4, r3
 8001a54:	464e      	mov	r6, r9
 8001a56:	40d4      	lsrs	r4, r2
 8001a58:	4326      	orrs	r6, r4
 8001a5a:	0034      	movs	r4, r6
 8001a5c:	4656      	mov	r6, sl
 8001a5e:	40b3      	lsls	r3, r6
 8001a60:	1e5e      	subs	r6, r3, #1
 8001a62:	41b3      	sbcs	r3, r6
 8001a64:	431c      	orrs	r4, r3
 8001a66:	4663      	mov	r3, ip
 8001a68:	40d3      	lsrs	r3, r2
 8001a6a:	18c9      	adds	r1, r1, r3
 8001a6c:	19e4      	adds	r4, r4, r7
 8001a6e:	42bc      	cmp	r4, r7
 8001a70:	41bf      	sbcs	r7, r7
 8001a72:	427f      	negs	r7, r7
 8001a74:	46b9      	mov	r9, r7
 8001a76:	4680      	mov	r8, r0
 8001a78:	4489      	add	r9, r1
 8001a7a:	e0d8      	b.n	8001c2e <__aeabi_dsub+0x426>
 8001a7c:	4640      	mov	r0, r8
 8001a7e:	4c3b      	ldr	r4, [pc, #236]	; (8001b6c <__aeabi_dsub+0x364>)
 8001a80:	3001      	adds	r0, #1
 8001a82:	4220      	tst	r0, r4
 8001a84:	d000      	beq.n	8001a88 <__aeabi_dsub+0x280>
 8001a86:	e0b4      	b.n	8001bf2 <__aeabi_dsub+0x3ea>
 8001a88:	4640      	mov	r0, r8
 8001a8a:	2800      	cmp	r0, #0
 8001a8c:	d000      	beq.n	8001a90 <__aeabi_dsub+0x288>
 8001a8e:	e144      	b.n	8001d1a <__aeabi_dsub+0x512>
 8001a90:	4660      	mov	r0, ip
 8001a92:	4318      	orrs	r0, r3
 8001a94:	d100      	bne.n	8001a98 <__aeabi_dsub+0x290>
 8001a96:	e190      	b.n	8001dba <__aeabi_dsub+0x5b2>
 8001a98:	0008      	movs	r0, r1
 8001a9a:	4338      	orrs	r0, r7
 8001a9c:	d000      	beq.n	8001aa0 <__aeabi_dsub+0x298>
 8001a9e:	e1aa      	b.n	8001df6 <__aeabi_dsub+0x5ee>
 8001aa0:	4661      	mov	r1, ip
 8001aa2:	08db      	lsrs	r3, r3, #3
 8001aa4:	0749      	lsls	r1, r1, #29
 8001aa6:	430b      	orrs	r3, r1
 8001aa8:	4661      	mov	r1, ip
 8001aaa:	08cc      	lsrs	r4, r1, #3
 8001aac:	e027      	b.n	8001afe <__aeabi_dsub+0x2f6>
 8001aae:	0008      	movs	r0, r1
 8001ab0:	4338      	orrs	r0, r7
 8001ab2:	d061      	beq.n	8001b78 <__aeabi_dsub+0x370>
 8001ab4:	1e50      	subs	r0, r2, #1
 8001ab6:	2a01      	cmp	r2, #1
 8001ab8:	d100      	bne.n	8001abc <__aeabi_dsub+0x2b4>
 8001aba:	e139      	b.n	8001d30 <__aeabi_dsub+0x528>
 8001abc:	42a2      	cmp	r2, r4
 8001abe:	d027      	beq.n	8001b10 <__aeabi_dsub+0x308>
 8001ac0:	0002      	movs	r2, r0
 8001ac2:	e75d      	b.n	8001980 <__aeabi_dsub+0x178>
 8001ac4:	0002      	movs	r2, r0
 8001ac6:	391f      	subs	r1, #31
 8001ac8:	40ca      	lsrs	r2, r1
 8001aca:	0011      	movs	r1, r2
 8001acc:	2b20      	cmp	r3, #32
 8001ace:	d003      	beq.n	8001ad8 <__aeabi_dsub+0x2d0>
 8001ad0:	2240      	movs	r2, #64	; 0x40
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	4098      	lsls	r0, r3
 8001ad6:	4304      	orrs	r4, r0
 8001ad8:	1e63      	subs	r3, r4, #1
 8001ada:	419c      	sbcs	r4, r3
 8001adc:	2300      	movs	r3, #0
 8001ade:	4699      	mov	r9, r3
 8001ae0:	4698      	mov	r8, r3
 8001ae2:	430c      	orrs	r4, r1
 8001ae4:	0763      	lsls	r3, r4, #29
 8001ae6:	d000      	beq.n	8001aea <__aeabi_dsub+0x2e2>
 8001ae8:	e712      	b.n	8001910 <__aeabi_dsub+0x108>
 8001aea:	464b      	mov	r3, r9
 8001aec:	464a      	mov	r2, r9
 8001aee:	08e4      	lsrs	r4, r4, #3
 8001af0:	075b      	lsls	r3, r3, #29
 8001af2:	4323      	orrs	r3, r4
 8001af4:	08d4      	lsrs	r4, r2, #3
 8001af6:	4642      	mov	r2, r8
 8001af8:	4919      	ldr	r1, [pc, #100]	; (8001b60 <__aeabi_dsub+0x358>)
 8001afa:	428a      	cmp	r2, r1
 8001afc:	d00e      	beq.n	8001b1c <__aeabi_dsub+0x314>
 8001afe:	0324      	lsls	r4, r4, #12
 8001b00:	0552      	lsls	r2, r2, #21
 8001b02:	0b24      	lsrs	r4, r4, #12
 8001b04:	0d52      	lsrs	r2, r2, #21
 8001b06:	e722      	b.n	800194e <__aeabi_dsub+0x146>
 8001b08:	000a      	movs	r2, r1
 8001b0a:	2400      	movs	r4, #0
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	e71e      	b.n	800194e <__aeabi_dsub+0x146>
 8001b10:	08db      	lsrs	r3, r3, #3
 8001b12:	4662      	mov	r2, ip
 8001b14:	0752      	lsls	r2, r2, #29
 8001b16:	4313      	orrs	r3, r2
 8001b18:	4662      	mov	r2, ip
 8001b1a:	08d4      	lsrs	r4, r2, #3
 8001b1c:	001a      	movs	r2, r3
 8001b1e:	4322      	orrs	r2, r4
 8001b20:	d100      	bne.n	8001b24 <__aeabi_dsub+0x31c>
 8001b22:	e1fc      	b.n	8001f1e <__aeabi_dsub+0x716>
 8001b24:	2280      	movs	r2, #128	; 0x80
 8001b26:	0312      	lsls	r2, r2, #12
 8001b28:	4314      	orrs	r4, r2
 8001b2a:	0324      	lsls	r4, r4, #12
 8001b2c:	4a0c      	ldr	r2, [pc, #48]	; (8001b60 <__aeabi_dsub+0x358>)
 8001b2e:	0b24      	lsrs	r4, r4, #12
 8001b30:	e70d      	b.n	800194e <__aeabi_dsub+0x146>
 8001b32:	0020      	movs	r0, r4
 8001b34:	f000 fa7e 	bl	8002034 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	3118      	adds	r1, #24
 8001b3c:	291f      	cmp	r1, #31
 8001b3e:	dc00      	bgt.n	8001b42 <__aeabi_dsub+0x33a>
 8001b40:	e6c4      	b.n	80018cc <__aeabi_dsub+0xc4>
 8001b42:	3808      	subs	r0, #8
 8001b44:	4084      	lsls	r4, r0
 8001b46:	4643      	mov	r3, r8
 8001b48:	0020      	movs	r0, r4
 8001b4a:	2400      	movs	r4, #0
 8001b4c:	4588      	cmp	r8, r1
 8001b4e:	dc00      	bgt.n	8001b52 <__aeabi_dsub+0x34a>
 8001b50:	e6c8      	b.n	80018e4 <__aeabi_dsub+0xdc>
 8001b52:	4a04      	ldr	r2, [pc, #16]	; (8001b64 <__aeabi_dsub+0x35c>)
 8001b54:	1a5b      	subs	r3, r3, r1
 8001b56:	4010      	ands	r0, r2
 8001b58:	4698      	mov	r8, r3
 8001b5a:	4681      	mov	r9, r0
 8001b5c:	e6d6      	b.n	800190c <__aeabi_dsub+0x104>
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	000007ff 	.word	0x000007ff
 8001b64:	ff7fffff 	.word	0xff7fffff
 8001b68:	fffff801 	.word	0xfffff801
 8001b6c:	000007fe 	.word	0x000007fe
 8001b70:	430f      	orrs	r7, r1
 8001b72:	1e7a      	subs	r2, r7, #1
 8001b74:	4197      	sbcs	r7, r2
 8001b76:	e691      	b.n	800189c <__aeabi_dsub+0x94>
 8001b78:	4661      	mov	r1, ip
 8001b7a:	08db      	lsrs	r3, r3, #3
 8001b7c:	0749      	lsls	r1, r1, #29
 8001b7e:	430b      	orrs	r3, r1
 8001b80:	4661      	mov	r1, ip
 8001b82:	08cc      	lsrs	r4, r1, #3
 8001b84:	e7b8      	b.n	8001af8 <__aeabi_dsub+0x2f0>
 8001b86:	4640      	mov	r0, r8
 8001b88:	4cd3      	ldr	r4, [pc, #844]	; (8001ed8 <__aeabi_dsub+0x6d0>)
 8001b8a:	3001      	adds	r0, #1
 8001b8c:	4220      	tst	r0, r4
 8001b8e:	d000      	beq.n	8001b92 <__aeabi_dsub+0x38a>
 8001b90:	e0a2      	b.n	8001cd8 <__aeabi_dsub+0x4d0>
 8001b92:	4640      	mov	r0, r8
 8001b94:	2800      	cmp	r0, #0
 8001b96:	d000      	beq.n	8001b9a <__aeabi_dsub+0x392>
 8001b98:	e101      	b.n	8001d9e <__aeabi_dsub+0x596>
 8001b9a:	4660      	mov	r0, ip
 8001b9c:	4318      	orrs	r0, r3
 8001b9e:	d100      	bne.n	8001ba2 <__aeabi_dsub+0x39a>
 8001ba0:	e15e      	b.n	8001e60 <__aeabi_dsub+0x658>
 8001ba2:	0008      	movs	r0, r1
 8001ba4:	4338      	orrs	r0, r7
 8001ba6:	d000      	beq.n	8001baa <__aeabi_dsub+0x3a2>
 8001ba8:	e15f      	b.n	8001e6a <__aeabi_dsub+0x662>
 8001baa:	4661      	mov	r1, ip
 8001bac:	08db      	lsrs	r3, r3, #3
 8001bae:	0749      	lsls	r1, r1, #29
 8001bb0:	430b      	orrs	r3, r1
 8001bb2:	4661      	mov	r1, ip
 8001bb4:	08cc      	lsrs	r4, r1, #3
 8001bb6:	e7a2      	b.n	8001afe <__aeabi_dsub+0x2f6>
 8001bb8:	4dc8      	ldr	r5, [pc, #800]	; (8001edc <__aeabi_dsub+0x6d4>)
 8001bba:	42a8      	cmp	r0, r5
 8001bbc:	d100      	bne.n	8001bc0 <__aeabi_dsub+0x3b8>
 8001bbe:	e0cf      	b.n	8001d60 <__aeabi_dsub+0x558>
 8001bc0:	2580      	movs	r5, #128	; 0x80
 8001bc2:	4664      	mov	r4, ip
 8001bc4:	042d      	lsls	r5, r5, #16
 8001bc6:	432c      	orrs	r4, r5
 8001bc8:	46a4      	mov	ip, r4
 8001bca:	2a38      	cmp	r2, #56	; 0x38
 8001bcc:	dc56      	bgt.n	8001c7c <__aeabi_dsub+0x474>
 8001bce:	2a1f      	cmp	r2, #31
 8001bd0:	dd00      	ble.n	8001bd4 <__aeabi_dsub+0x3cc>
 8001bd2:	e0d1      	b.n	8001d78 <__aeabi_dsub+0x570>
 8001bd4:	2520      	movs	r5, #32
 8001bd6:	001e      	movs	r6, r3
 8001bd8:	1aad      	subs	r5, r5, r2
 8001bda:	4664      	mov	r4, ip
 8001bdc:	40ab      	lsls	r3, r5
 8001bde:	40ac      	lsls	r4, r5
 8001be0:	40d6      	lsrs	r6, r2
 8001be2:	1e5d      	subs	r5, r3, #1
 8001be4:	41ab      	sbcs	r3, r5
 8001be6:	4334      	orrs	r4, r6
 8001be8:	4323      	orrs	r3, r4
 8001bea:	4664      	mov	r4, ip
 8001bec:	40d4      	lsrs	r4, r2
 8001bee:	1b09      	subs	r1, r1, r4
 8001bf0:	e049      	b.n	8001c86 <__aeabi_dsub+0x47e>
 8001bf2:	4660      	mov	r0, ip
 8001bf4:	1bdc      	subs	r4, r3, r7
 8001bf6:	1a46      	subs	r6, r0, r1
 8001bf8:	42a3      	cmp	r3, r4
 8001bfa:	4180      	sbcs	r0, r0
 8001bfc:	4240      	negs	r0, r0
 8001bfe:	4681      	mov	r9, r0
 8001c00:	0030      	movs	r0, r6
 8001c02:	464e      	mov	r6, r9
 8001c04:	1b80      	subs	r0, r0, r6
 8001c06:	4681      	mov	r9, r0
 8001c08:	0200      	lsls	r0, r0, #8
 8001c0a:	d476      	bmi.n	8001cfa <__aeabi_dsub+0x4f2>
 8001c0c:	464b      	mov	r3, r9
 8001c0e:	4323      	orrs	r3, r4
 8001c10:	d000      	beq.n	8001c14 <__aeabi_dsub+0x40c>
 8001c12:	e652      	b.n	80018ba <__aeabi_dsub+0xb2>
 8001c14:	2400      	movs	r4, #0
 8001c16:	2500      	movs	r5, #0
 8001c18:	e771      	b.n	8001afe <__aeabi_dsub+0x2f6>
 8001c1a:	4339      	orrs	r1, r7
 8001c1c:	000c      	movs	r4, r1
 8001c1e:	1e62      	subs	r2, r4, #1
 8001c20:	4194      	sbcs	r4, r2
 8001c22:	18e4      	adds	r4, r4, r3
 8001c24:	429c      	cmp	r4, r3
 8001c26:	419b      	sbcs	r3, r3
 8001c28:	425b      	negs	r3, r3
 8001c2a:	4463      	add	r3, ip
 8001c2c:	4699      	mov	r9, r3
 8001c2e:	464b      	mov	r3, r9
 8001c30:	021b      	lsls	r3, r3, #8
 8001c32:	d400      	bmi.n	8001c36 <__aeabi_dsub+0x42e>
 8001c34:	e756      	b.n	8001ae4 <__aeabi_dsub+0x2dc>
 8001c36:	2301      	movs	r3, #1
 8001c38:	469c      	mov	ip, r3
 8001c3a:	4ba8      	ldr	r3, [pc, #672]	; (8001edc <__aeabi_dsub+0x6d4>)
 8001c3c:	44e0      	add	r8, ip
 8001c3e:	4598      	cmp	r8, r3
 8001c40:	d038      	beq.n	8001cb4 <__aeabi_dsub+0x4ac>
 8001c42:	464b      	mov	r3, r9
 8001c44:	48a6      	ldr	r0, [pc, #664]	; (8001ee0 <__aeabi_dsub+0x6d8>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	4003      	ands	r3, r0
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	0863      	lsrs	r3, r4, #1
 8001c4e:	4014      	ands	r4, r2
 8001c50:	431c      	orrs	r4, r3
 8001c52:	07c3      	lsls	r3, r0, #31
 8001c54:	431c      	orrs	r4, r3
 8001c56:	0843      	lsrs	r3, r0, #1
 8001c58:	4699      	mov	r9, r3
 8001c5a:	e657      	b.n	800190c <__aeabi_dsub+0x104>
 8001c5c:	0010      	movs	r0, r2
 8001c5e:	000e      	movs	r6, r1
 8001c60:	3820      	subs	r0, #32
 8001c62:	40c6      	lsrs	r6, r0
 8001c64:	2a20      	cmp	r2, #32
 8001c66:	d004      	beq.n	8001c72 <__aeabi_dsub+0x46a>
 8001c68:	2040      	movs	r0, #64	; 0x40
 8001c6a:	1a82      	subs	r2, r0, r2
 8001c6c:	4091      	lsls	r1, r2
 8001c6e:	430f      	orrs	r7, r1
 8001c70:	46b9      	mov	r9, r7
 8001c72:	464f      	mov	r7, r9
 8001c74:	1e7a      	subs	r2, r7, #1
 8001c76:	4197      	sbcs	r7, r2
 8001c78:	4337      	orrs	r7, r6
 8001c7a:	e60f      	b.n	800189c <__aeabi_dsub+0x94>
 8001c7c:	4662      	mov	r2, ip
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	0013      	movs	r3, r2
 8001c82:	1e5a      	subs	r2, r3, #1
 8001c84:	4193      	sbcs	r3, r2
 8001c86:	1afc      	subs	r4, r7, r3
 8001c88:	42a7      	cmp	r7, r4
 8001c8a:	41bf      	sbcs	r7, r7
 8001c8c:	427f      	negs	r7, r7
 8001c8e:	1bcb      	subs	r3, r1, r7
 8001c90:	4699      	mov	r9, r3
 8001c92:	465d      	mov	r5, fp
 8001c94:	4680      	mov	r8, r0
 8001c96:	e608      	b.n	80018aa <__aeabi_dsub+0xa2>
 8001c98:	4666      	mov	r6, ip
 8001c9a:	431e      	orrs	r6, r3
 8001c9c:	d100      	bne.n	8001ca0 <__aeabi_dsub+0x498>
 8001c9e:	e0be      	b.n	8001e1e <__aeabi_dsub+0x616>
 8001ca0:	1e56      	subs	r6, r2, #1
 8001ca2:	2a01      	cmp	r2, #1
 8001ca4:	d100      	bne.n	8001ca8 <__aeabi_dsub+0x4a0>
 8001ca6:	e109      	b.n	8001ebc <__aeabi_dsub+0x6b4>
 8001ca8:	4c8c      	ldr	r4, [pc, #560]	; (8001edc <__aeabi_dsub+0x6d4>)
 8001caa:	42a2      	cmp	r2, r4
 8001cac:	d100      	bne.n	8001cb0 <__aeabi_dsub+0x4a8>
 8001cae:	e119      	b.n	8001ee4 <__aeabi_dsub+0x6dc>
 8001cb0:	0032      	movs	r2, r6
 8001cb2:	e6c1      	b.n	8001a38 <__aeabi_dsub+0x230>
 8001cb4:	4642      	mov	r2, r8
 8001cb6:	2400      	movs	r4, #0
 8001cb8:	2300      	movs	r3, #0
 8001cba:	e648      	b.n	800194e <__aeabi_dsub+0x146>
 8001cbc:	2020      	movs	r0, #32
 8001cbe:	000c      	movs	r4, r1
 8001cc0:	1a80      	subs	r0, r0, r2
 8001cc2:	003e      	movs	r6, r7
 8001cc4:	4087      	lsls	r7, r0
 8001cc6:	4084      	lsls	r4, r0
 8001cc8:	40d6      	lsrs	r6, r2
 8001cca:	1e78      	subs	r0, r7, #1
 8001ccc:	4187      	sbcs	r7, r0
 8001cce:	40d1      	lsrs	r1, r2
 8001cd0:	4334      	orrs	r4, r6
 8001cd2:	433c      	orrs	r4, r7
 8001cd4:	448c      	add	ip, r1
 8001cd6:	e7a4      	b.n	8001c22 <__aeabi_dsub+0x41a>
 8001cd8:	4a80      	ldr	r2, [pc, #512]	; (8001edc <__aeabi_dsub+0x6d4>)
 8001cda:	4290      	cmp	r0, r2
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_dsub+0x4d8>
 8001cde:	e0e9      	b.n	8001eb4 <__aeabi_dsub+0x6ac>
 8001ce0:	19df      	adds	r7, r3, r7
 8001ce2:	429f      	cmp	r7, r3
 8001ce4:	419b      	sbcs	r3, r3
 8001ce6:	4461      	add	r1, ip
 8001ce8:	425b      	negs	r3, r3
 8001cea:	18c9      	adds	r1, r1, r3
 8001cec:	07cc      	lsls	r4, r1, #31
 8001cee:	087f      	lsrs	r7, r7, #1
 8001cf0:	084b      	lsrs	r3, r1, #1
 8001cf2:	4699      	mov	r9, r3
 8001cf4:	4680      	mov	r8, r0
 8001cf6:	433c      	orrs	r4, r7
 8001cf8:	e6f4      	b.n	8001ae4 <__aeabi_dsub+0x2dc>
 8001cfa:	1afc      	subs	r4, r7, r3
 8001cfc:	42a7      	cmp	r7, r4
 8001cfe:	41bf      	sbcs	r7, r7
 8001d00:	4663      	mov	r3, ip
 8001d02:	427f      	negs	r7, r7
 8001d04:	1ac9      	subs	r1, r1, r3
 8001d06:	1bcb      	subs	r3, r1, r7
 8001d08:	4699      	mov	r9, r3
 8001d0a:	465d      	mov	r5, fp
 8001d0c:	e5d5      	b.n	80018ba <__aeabi_dsub+0xb2>
 8001d0e:	08ff      	lsrs	r7, r7, #3
 8001d10:	074b      	lsls	r3, r1, #29
 8001d12:	465d      	mov	r5, fp
 8001d14:	433b      	orrs	r3, r7
 8001d16:	08cc      	lsrs	r4, r1, #3
 8001d18:	e6ee      	b.n	8001af8 <__aeabi_dsub+0x2f0>
 8001d1a:	4662      	mov	r2, ip
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	d000      	beq.n	8001d22 <__aeabi_dsub+0x51a>
 8001d20:	e082      	b.n	8001e28 <__aeabi_dsub+0x620>
 8001d22:	000b      	movs	r3, r1
 8001d24:	433b      	orrs	r3, r7
 8001d26:	d11b      	bne.n	8001d60 <__aeabi_dsub+0x558>
 8001d28:	2480      	movs	r4, #128	; 0x80
 8001d2a:	2500      	movs	r5, #0
 8001d2c:	0324      	lsls	r4, r4, #12
 8001d2e:	e6f9      	b.n	8001b24 <__aeabi_dsub+0x31c>
 8001d30:	19dc      	adds	r4, r3, r7
 8001d32:	429c      	cmp	r4, r3
 8001d34:	419b      	sbcs	r3, r3
 8001d36:	4461      	add	r1, ip
 8001d38:	4689      	mov	r9, r1
 8001d3a:	425b      	negs	r3, r3
 8001d3c:	4499      	add	r9, r3
 8001d3e:	464b      	mov	r3, r9
 8001d40:	021b      	lsls	r3, r3, #8
 8001d42:	d444      	bmi.n	8001dce <__aeabi_dsub+0x5c6>
 8001d44:	2301      	movs	r3, #1
 8001d46:	4698      	mov	r8, r3
 8001d48:	e6cc      	b.n	8001ae4 <__aeabi_dsub+0x2dc>
 8001d4a:	1bdc      	subs	r4, r3, r7
 8001d4c:	4662      	mov	r2, ip
 8001d4e:	42a3      	cmp	r3, r4
 8001d50:	419b      	sbcs	r3, r3
 8001d52:	1a51      	subs	r1, r2, r1
 8001d54:	425b      	negs	r3, r3
 8001d56:	1acb      	subs	r3, r1, r3
 8001d58:	4699      	mov	r9, r3
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	4698      	mov	r8, r3
 8001d5e:	e5a4      	b.n	80018aa <__aeabi_dsub+0xa2>
 8001d60:	08ff      	lsrs	r7, r7, #3
 8001d62:	074b      	lsls	r3, r1, #29
 8001d64:	465d      	mov	r5, fp
 8001d66:	433b      	orrs	r3, r7
 8001d68:	08cc      	lsrs	r4, r1, #3
 8001d6a:	e6d7      	b.n	8001b1c <__aeabi_dsub+0x314>
 8001d6c:	4662      	mov	r2, ip
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	0014      	movs	r4, r2
 8001d72:	1e63      	subs	r3, r4, #1
 8001d74:	419c      	sbcs	r4, r3
 8001d76:	e679      	b.n	8001a6c <__aeabi_dsub+0x264>
 8001d78:	0015      	movs	r5, r2
 8001d7a:	4664      	mov	r4, ip
 8001d7c:	3d20      	subs	r5, #32
 8001d7e:	40ec      	lsrs	r4, r5
 8001d80:	46a0      	mov	r8, r4
 8001d82:	2a20      	cmp	r2, #32
 8001d84:	d005      	beq.n	8001d92 <__aeabi_dsub+0x58a>
 8001d86:	2540      	movs	r5, #64	; 0x40
 8001d88:	4664      	mov	r4, ip
 8001d8a:	1aaa      	subs	r2, r5, r2
 8001d8c:	4094      	lsls	r4, r2
 8001d8e:	4323      	orrs	r3, r4
 8001d90:	469a      	mov	sl, r3
 8001d92:	4654      	mov	r4, sl
 8001d94:	1e63      	subs	r3, r4, #1
 8001d96:	419c      	sbcs	r4, r3
 8001d98:	4643      	mov	r3, r8
 8001d9a:	4323      	orrs	r3, r4
 8001d9c:	e773      	b.n	8001c86 <__aeabi_dsub+0x47e>
 8001d9e:	4662      	mov	r2, ip
 8001da0:	431a      	orrs	r2, r3
 8001da2:	d023      	beq.n	8001dec <__aeabi_dsub+0x5e4>
 8001da4:	000a      	movs	r2, r1
 8001da6:	433a      	orrs	r2, r7
 8001da8:	d000      	beq.n	8001dac <__aeabi_dsub+0x5a4>
 8001daa:	e0a0      	b.n	8001eee <__aeabi_dsub+0x6e6>
 8001dac:	4662      	mov	r2, ip
 8001dae:	08db      	lsrs	r3, r3, #3
 8001db0:	0752      	lsls	r2, r2, #29
 8001db2:	4313      	orrs	r3, r2
 8001db4:	4662      	mov	r2, ip
 8001db6:	08d4      	lsrs	r4, r2, #3
 8001db8:	e6b0      	b.n	8001b1c <__aeabi_dsub+0x314>
 8001dba:	000b      	movs	r3, r1
 8001dbc:	433b      	orrs	r3, r7
 8001dbe:	d100      	bne.n	8001dc2 <__aeabi_dsub+0x5ba>
 8001dc0:	e728      	b.n	8001c14 <__aeabi_dsub+0x40c>
 8001dc2:	08ff      	lsrs	r7, r7, #3
 8001dc4:	074b      	lsls	r3, r1, #29
 8001dc6:	465d      	mov	r5, fp
 8001dc8:	433b      	orrs	r3, r7
 8001dca:	08cc      	lsrs	r4, r1, #3
 8001dcc:	e697      	b.n	8001afe <__aeabi_dsub+0x2f6>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	4698      	mov	r8, r3
 8001dd2:	e736      	b.n	8001c42 <__aeabi_dsub+0x43a>
 8001dd4:	1afc      	subs	r4, r7, r3
 8001dd6:	42a7      	cmp	r7, r4
 8001dd8:	41bf      	sbcs	r7, r7
 8001dda:	4663      	mov	r3, ip
 8001ddc:	427f      	negs	r7, r7
 8001dde:	1ac9      	subs	r1, r1, r3
 8001de0:	1bcb      	subs	r3, r1, r7
 8001de2:	4699      	mov	r9, r3
 8001de4:	2301      	movs	r3, #1
 8001de6:	465d      	mov	r5, fp
 8001de8:	4698      	mov	r8, r3
 8001dea:	e55e      	b.n	80018aa <__aeabi_dsub+0xa2>
 8001dec:	074b      	lsls	r3, r1, #29
 8001dee:	08ff      	lsrs	r7, r7, #3
 8001df0:	433b      	orrs	r3, r7
 8001df2:	08cc      	lsrs	r4, r1, #3
 8001df4:	e692      	b.n	8001b1c <__aeabi_dsub+0x314>
 8001df6:	1bdc      	subs	r4, r3, r7
 8001df8:	4660      	mov	r0, ip
 8001dfa:	42a3      	cmp	r3, r4
 8001dfc:	41b6      	sbcs	r6, r6
 8001dfe:	1a40      	subs	r0, r0, r1
 8001e00:	4276      	negs	r6, r6
 8001e02:	1b80      	subs	r0, r0, r6
 8001e04:	4681      	mov	r9, r0
 8001e06:	0200      	lsls	r0, r0, #8
 8001e08:	d560      	bpl.n	8001ecc <__aeabi_dsub+0x6c4>
 8001e0a:	1afc      	subs	r4, r7, r3
 8001e0c:	42a7      	cmp	r7, r4
 8001e0e:	41bf      	sbcs	r7, r7
 8001e10:	4663      	mov	r3, ip
 8001e12:	427f      	negs	r7, r7
 8001e14:	1ac9      	subs	r1, r1, r3
 8001e16:	1bcb      	subs	r3, r1, r7
 8001e18:	4699      	mov	r9, r3
 8001e1a:	465d      	mov	r5, fp
 8001e1c:	e576      	b.n	800190c <__aeabi_dsub+0x104>
 8001e1e:	08ff      	lsrs	r7, r7, #3
 8001e20:	074b      	lsls	r3, r1, #29
 8001e22:	433b      	orrs	r3, r7
 8001e24:	08cc      	lsrs	r4, r1, #3
 8001e26:	e667      	b.n	8001af8 <__aeabi_dsub+0x2f0>
 8001e28:	000a      	movs	r2, r1
 8001e2a:	08db      	lsrs	r3, r3, #3
 8001e2c:	433a      	orrs	r2, r7
 8001e2e:	d100      	bne.n	8001e32 <__aeabi_dsub+0x62a>
 8001e30:	e66f      	b.n	8001b12 <__aeabi_dsub+0x30a>
 8001e32:	4662      	mov	r2, ip
 8001e34:	0752      	lsls	r2, r2, #29
 8001e36:	4313      	orrs	r3, r2
 8001e38:	4662      	mov	r2, ip
 8001e3a:	08d4      	lsrs	r4, r2, #3
 8001e3c:	2280      	movs	r2, #128	; 0x80
 8001e3e:	0312      	lsls	r2, r2, #12
 8001e40:	4214      	tst	r4, r2
 8001e42:	d007      	beq.n	8001e54 <__aeabi_dsub+0x64c>
 8001e44:	08c8      	lsrs	r0, r1, #3
 8001e46:	4210      	tst	r0, r2
 8001e48:	d104      	bne.n	8001e54 <__aeabi_dsub+0x64c>
 8001e4a:	465d      	mov	r5, fp
 8001e4c:	0004      	movs	r4, r0
 8001e4e:	08fb      	lsrs	r3, r7, #3
 8001e50:	0749      	lsls	r1, r1, #29
 8001e52:	430b      	orrs	r3, r1
 8001e54:	0f5a      	lsrs	r2, r3, #29
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	08db      	lsrs	r3, r3, #3
 8001e5a:	0752      	lsls	r2, r2, #29
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	e65d      	b.n	8001b1c <__aeabi_dsub+0x314>
 8001e60:	074b      	lsls	r3, r1, #29
 8001e62:	08ff      	lsrs	r7, r7, #3
 8001e64:	433b      	orrs	r3, r7
 8001e66:	08cc      	lsrs	r4, r1, #3
 8001e68:	e649      	b.n	8001afe <__aeabi_dsub+0x2f6>
 8001e6a:	19dc      	adds	r4, r3, r7
 8001e6c:	429c      	cmp	r4, r3
 8001e6e:	419b      	sbcs	r3, r3
 8001e70:	4461      	add	r1, ip
 8001e72:	4689      	mov	r9, r1
 8001e74:	425b      	negs	r3, r3
 8001e76:	4499      	add	r9, r3
 8001e78:	464b      	mov	r3, r9
 8001e7a:	021b      	lsls	r3, r3, #8
 8001e7c:	d400      	bmi.n	8001e80 <__aeabi_dsub+0x678>
 8001e7e:	e631      	b.n	8001ae4 <__aeabi_dsub+0x2dc>
 8001e80:	464a      	mov	r2, r9
 8001e82:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <__aeabi_dsub+0x6d8>)
 8001e84:	401a      	ands	r2, r3
 8001e86:	2301      	movs	r3, #1
 8001e88:	4691      	mov	r9, r2
 8001e8a:	4698      	mov	r8, r3
 8001e8c:	e62a      	b.n	8001ae4 <__aeabi_dsub+0x2dc>
 8001e8e:	0016      	movs	r6, r2
 8001e90:	4664      	mov	r4, ip
 8001e92:	3e20      	subs	r6, #32
 8001e94:	40f4      	lsrs	r4, r6
 8001e96:	46a0      	mov	r8, r4
 8001e98:	2a20      	cmp	r2, #32
 8001e9a:	d005      	beq.n	8001ea8 <__aeabi_dsub+0x6a0>
 8001e9c:	2640      	movs	r6, #64	; 0x40
 8001e9e:	4664      	mov	r4, ip
 8001ea0:	1ab2      	subs	r2, r6, r2
 8001ea2:	4094      	lsls	r4, r2
 8001ea4:	4323      	orrs	r3, r4
 8001ea6:	469a      	mov	sl, r3
 8001ea8:	4654      	mov	r4, sl
 8001eaa:	1e63      	subs	r3, r4, #1
 8001eac:	419c      	sbcs	r4, r3
 8001eae:	4643      	mov	r3, r8
 8001eb0:	431c      	orrs	r4, r3
 8001eb2:	e5db      	b.n	8001a6c <__aeabi_dsub+0x264>
 8001eb4:	0002      	movs	r2, r0
 8001eb6:	2400      	movs	r4, #0
 8001eb8:	2300      	movs	r3, #0
 8001eba:	e548      	b.n	800194e <__aeabi_dsub+0x146>
 8001ebc:	19dc      	adds	r4, r3, r7
 8001ebe:	42bc      	cmp	r4, r7
 8001ec0:	41bf      	sbcs	r7, r7
 8001ec2:	4461      	add	r1, ip
 8001ec4:	4689      	mov	r9, r1
 8001ec6:	427f      	negs	r7, r7
 8001ec8:	44b9      	add	r9, r7
 8001eca:	e738      	b.n	8001d3e <__aeabi_dsub+0x536>
 8001ecc:	464b      	mov	r3, r9
 8001ece:	4323      	orrs	r3, r4
 8001ed0:	d100      	bne.n	8001ed4 <__aeabi_dsub+0x6cc>
 8001ed2:	e69f      	b.n	8001c14 <__aeabi_dsub+0x40c>
 8001ed4:	e606      	b.n	8001ae4 <__aeabi_dsub+0x2dc>
 8001ed6:	46c0      	nop			; (mov r8, r8)
 8001ed8:	000007fe 	.word	0x000007fe
 8001edc:	000007ff 	.word	0x000007ff
 8001ee0:	ff7fffff 	.word	0xff7fffff
 8001ee4:	08ff      	lsrs	r7, r7, #3
 8001ee6:	074b      	lsls	r3, r1, #29
 8001ee8:	433b      	orrs	r3, r7
 8001eea:	08cc      	lsrs	r4, r1, #3
 8001eec:	e616      	b.n	8001b1c <__aeabi_dsub+0x314>
 8001eee:	4662      	mov	r2, ip
 8001ef0:	08db      	lsrs	r3, r3, #3
 8001ef2:	0752      	lsls	r2, r2, #29
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	4662      	mov	r2, ip
 8001ef8:	08d4      	lsrs	r4, r2, #3
 8001efa:	2280      	movs	r2, #128	; 0x80
 8001efc:	0312      	lsls	r2, r2, #12
 8001efe:	4214      	tst	r4, r2
 8001f00:	d007      	beq.n	8001f12 <__aeabi_dsub+0x70a>
 8001f02:	08c8      	lsrs	r0, r1, #3
 8001f04:	4210      	tst	r0, r2
 8001f06:	d104      	bne.n	8001f12 <__aeabi_dsub+0x70a>
 8001f08:	465d      	mov	r5, fp
 8001f0a:	0004      	movs	r4, r0
 8001f0c:	08fb      	lsrs	r3, r7, #3
 8001f0e:	0749      	lsls	r1, r1, #29
 8001f10:	430b      	orrs	r3, r1
 8001f12:	0f5a      	lsrs	r2, r3, #29
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	0752      	lsls	r2, r2, #29
 8001f18:	08db      	lsrs	r3, r3, #3
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	e5fe      	b.n	8001b1c <__aeabi_dsub+0x314>
 8001f1e:	2300      	movs	r3, #0
 8001f20:	4a01      	ldr	r2, [pc, #4]	; (8001f28 <__aeabi_dsub+0x720>)
 8001f22:	001c      	movs	r4, r3
 8001f24:	e513      	b.n	800194e <__aeabi_dsub+0x146>
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	000007ff 	.word	0x000007ff

08001f2c <__aeabi_dcmpun>:
 8001f2c:	b570      	push	{r4, r5, r6, lr}
 8001f2e:	0005      	movs	r5, r0
 8001f30:	480c      	ldr	r0, [pc, #48]	; (8001f64 <__aeabi_dcmpun+0x38>)
 8001f32:	031c      	lsls	r4, r3, #12
 8001f34:	0016      	movs	r6, r2
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	030a      	lsls	r2, r1, #12
 8001f3a:	0049      	lsls	r1, r1, #1
 8001f3c:	0b12      	lsrs	r2, r2, #12
 8001f3e:	0d49      	lsrs	r1, r1, #21
 8001f40:	0b24      	lsrs	r4, r4, #12
 8001f42:	0d5b      	lsrs	r3, r3, #21
 8001f44:	4281      	cmp	r1, r0
 8001f46:	d008      	beq.n	8001f5a <__aeabi_dcmpun+0x2e>
 8001f48:	4a06      	ldr	r2, [pc, #24]	; (8001f64 <__aeabi_dcmpun+0x38>)
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d103      	bne.n	8001f58 <__aeabi_dcmpun+0x2c>
 8001f50:	0020      	movs	r0, r4
 8001f52:	4330      	orrs	r0, r6
 8001f54:	1e43      	subs	r3, r0, #1
 8001f56:	4198      	sbcs	r0, r3
 8001f58:	bd70      	pop	{r4, r5, r6, pc}
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	432a      	orrs	r2, r5
 8001f5e:	d1fb      	bne.n	8001f58 <__aeabi_dcmpun+0x2c>
 8001f60:	e7f2      	b.n	8001f48 <__aeabi_dcmpun+0x1c>
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	000007ff 	.word	0x000007ff

08001f68 <__aeabi_d2iz>:
 8001f68:	000a      	movs	r2, r1
 8001f6a:	b530      	push	{r4, r5, lr}
 8001f6c:	4c13      	ldr	r4, [pc, #76]	; (8001fbc <__aeabi_d2iz+0x54>)
 8001f6e:	0053      	lsls	r3, r2, #1
 8001f70:	0309      	lsls	r1, r1, #12
 8001f72:	0005      	movs	r5, r0
 8001f74:	0b09      	lsrs	r1, r1, #12
 8001f76:	2000      	movs	r0, #0
 8001f78:	0d5b      	lsrs	r3, r3, #21
 8001f7a:	0fd2      	lsrs	r2, r2, #31
 8001f7c:	42a3      	cmp	r3, r4
 8001f7e:	dd04      	ble.n	8001f8a <__aeabi_d2iz+0x22>
 8001f80:	480f      	ldr	r0, [pc, #60]	; (8001fc0 <__aeabi_d2iz+0x58>)
 8001f82:	4283      	cmp	r3, r0
 8001f84:	dd02      	ble.n	8001f8c <__aeabi_d2iz+0x24>
 8001f86:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <__aeabi_d2iz+0x5c>)
 8001f88:	18d0      	adds	r0, r2, r3
 8001f8a:	bd30      	pop	{r4, r5, pc}
 8001f8c:	2080      	movs	r0, #128	; 0x80
 8001f8e:	0340      	lsls	r0, r0, #13
 8001f90:	4301      	orrs	r1, r0
 8001f92:	480d      	ldr	r0, [pc, #52]	; (8001fc8 <__aeabi_d2iz+0x60>)
 8001f94:	1ac0      	subs	r0, r0, r3
 8001f96:	281f      	cmp	r0, #31
 8001f98:	dd08      	ble.n	8001fac <__aeabi_d2iz+0x44>
 8001f9a:	480c      	ldr	r0, [pc, #48]	; (8001fcc <__aeabi_d2iz+0x64>)
 8001f9c:	1ac3      	subs	r3, r0, r3
 8001f9e:	40d9      	lsrs	r1, r3
 8001fa0:	000b      	movs	r3, r1
 8001fa2:	4258      	negs	r0, r3
 8001fa4:	2a00      	cmp	r2, #0
 8001fa6:	d1f0      	bne.n	8001f8a <__aeabi_d2iz+0x22>
 8001fa8:	0018      	movs	r0, r3
 8001faa:	e7ee      	b.n	8001f8a <__aeabi_d2iz+0x22>
 8001fac:	4c08      	ldr	r4, [pc, #32]	; (8001fd0 <__aeabi_d2iz+0x68>)
 8001fae:	40c5      	lsrs	r5, r0
 8001fb0:	46a4      	mov	ip, r4
 8001fb2:	4463      	add	r3, ip
 8001fb4:	4099      	lsls	r1, r3
 8001fb6:	000b      	movs	r3, r1
 8001fb8:	432b      	orrs	r3, r5
 8001fba:	e7f2      	b.n	8001fa2 <__aeabi_d2iz+0x3a>
 8001fbc:	000003fe 	.word	0x000003fe
 8001fc0:	0000041d 	.word	0x0000041d
 8001fc4:	7fffffff 	.word	0x7fffffff
 8001fc8:	00000433 	.word	0x00000433
 8001fcc:	00000413 	.word	0x00000413
 8001fd0:	fffffbed 	.word	0xfffffbed

08001fd4 <__aeabi_i2d>:
 8001fd4:	b570      	push	{r4, r5, r6, lr}
 8001fd6:	2800      	cmp	r0, #0
 8001fd8:	d016      	beq.n	8002008 <__aeabi_i2d+0x34>
 8001fda:	17c3      	asrs	r3, r0, #31
 8001fdc:	18c5      	adds	r5, r0, r3
 8001fde:	405d      	eors	r5, r3
 8001fe0:	0fc4      	lsrs	r4, r0, #31
 8001fe2:	0028      	movs	r0, r5
 8001fe4:	f000 f826 	bl	8002034 <__clzsi2>
 8001fe8:	4a11      	ldr	r2, [pc, #68]	; (8002030 <__aeabi_i2d+0x5c>)
 8001fea:	1a12      	subs	r2, r2, r0
 8001fec:	280a      	cmp	r0, #10
 8001fee:	dc16      	bgt.n	800201e <__aeabi_i2d+0x4a>
 8001ff0:	0003      	movs	r3, r0
 8001ff2:	002e      	movs	r6, r5
 8001ff4:	3315      	adds	r3, #21
 8001ff6:	409e      	lsls	r6, r3
 8001ff8:	230b      	movs	r3, #11
 8001ffa:	1a18      	subs	r0, r3, r0
 8001ffc:	40c5      	lsrs	r5, r0
 8001ffe:	0552      	lsls	r2, r2, #21
 8002000:	032d      	lsls	r5, r5, #12
 8002002:	0b2d      	lsrs	r5, r5, #12
 8002004:	0d53      	lsrs	r3, r2, #21
 8002006:	e003      	b.n	8002010 <__aeabi_i2d+0x3c>
 8002008:	2400      	movs	r4, #0
 800200a:	2300      	movs	r3, #0
 800200c:	2500      	movs	r5, #0
 800200e:	2600      	movs	r6, #0
 8002010:	051b      	lsls	r3, r3, #20
 8002012:	432b      	orrs	r3, r5
 8002014:	07e4      	lsls	r4, r4, #31
 8002016:	4323      	orrs	r3, r4
 8002018:	0030      	movs	r0, r6
 800201a:	0019      	movs	r1, r3
 800201c:	bd70      	pop	{r4, r5, r6, pc}
 800201e:	380b      	subs	r0, #11
 8002020:	4085      	lsls	r5, r0
 8002022:	0552      	lsls	r2, r2, #21
 8002024:	032d      	lsls	r5, r5, #12
 8002026:	2600      	movs	r6, #0
 8002028:	0b2d      	lsrs	r5, r5, #12
 800202a:	0d53      	lsrs	r3, r2, #21
 800202c:	e7f0      	b.n	8002010 <__aeabi_i2d+0x3c>
 800202e:	46c0      	nop			; (mov r8, r8)
 8002030:	0000041e 	.word	0x0000041e

08002034 <__clzsi2>:
 8002034:	211c      	movs	r1, #28
 8002036:	2301      	movs	r3, #1
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	4298      	cmp	r0, r3
 800203c:	d301      	bcc.n	8002042 <__clzsi2+0xe>
 800203e:	0c00      	lsrs	r0, r0, #16
 8002040:	3910      	subs	r1, #16
 8002042:	0a1b      	lsrs	r3, r3, #8
 8002044:	4298      	cmp	r0, r3
 8002046:	d301      	bcc.n	800204c <__clzsi2+0x18>
 8002048:	0a00      	lsrs	r0, r0, #8
 800204a:	3908      	subs	r1, #8
 800204c:	091b      	lsrs	r3, r3, #4
 800204e:	4298      	cmp	r0, r3
 8002050:	d301      	bcc.n	8002056 <__clzsi2+0x22>
 8002052:	0900      	lsrs	r0, r0, #4
 8002054:	3904      	subs	r1, #4
 8002056:	a202      	add	r2, pc, #8	; (adr r2, 8002060 <__clzsi2+0x2c>)
 8002058:	5c10      	ldrb	r0, [r2, r0]
 800205a:	1840      	adds	r0, r0, r1
 800205c:	4770      	bx	lr
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	02020304 	.word	0x02020304
 8002064:	01010101 	.word	0x01010101
	...

08002070 <Init_LCD>:

uint8_t Helper_Array[8][5];

void Init_LCD()

{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af02      	add	r7, sp, #8

    HAL_GPIO_WritePin(GPIOA, RESET_Pin, GPIO_PIN_SET); // make LCD_RST high to start LCD module
 8002076:	23a0      	movs	r3, #160	; 0xa0
 8002078:	05db      	lsls	r3, r3, #23
 800207a:	2201      	movs	r2, #1
 800207c:	2110      	movs	r1, #16
 800207e:	0018      	movs	r0, r3
 8002080:	f000 ffd4 	bl	800302c <HAL_GPIO_WritePin>

    HAL_Delay(60);
 8002084:	203c      	movs	r0, #60	; 0x3c
 8002086:	f000 fd7f 	bl	8002b88 <HAL_Delay>

    halstatus = HAL_I2C_IsDeviceReady(&hi2c1, LCD_ADDRESS, 2, 100);
 800208a:	4857      	ldr	r0, [pc, #348]	; (80021e8 <Init_LCD+0x178>)
 800208c:	2364      	movs	r3, #100	; 0x64
 800208e:	2202      	movs	r2, #2
 8002090:	2178      	movs	r1, #120	; 0x78
 8002092:	f001 f987 	bl	80033a4 <HAL_I2C_IsDeviceReady>
 8002096:	0003      	movs	r3, r0
 8002098:	001a      	movs	r2, r3
 800209a:	4b54      	ldr	r3, [pc, #336]	; (80021ec <Init_LCD+0x17c>)
 800209c:	701a      	strb	r2, [r3, #0]

    commands[1] = 0x38;
 800209e:	4b54      	ldr	r3, [pc, #336]	; (80021f0 <Init_LCD+0x180>)
 80020a0:	2238      	movs	r2, #56	; 0x38
 80020a2:	705a      	strb	r2, [r3, #1]

    halstatus = HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, commands, 2, 100);
 80020a4:	4a52      	ldr	r2, [pc, #328]	; (80021f0 <Init_LCD+0x180>)
 80020a6:	4850      	ldr	r0, [pc, #320]	; (80021e8 <Init_LCD+0x178>)
 80020a8:	2364      	movs	r3, #100	; 0x64
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	2302      	movs	r3, #2
 80020ae:	2178      	movs	r1, #120	; 0x78
 80020b0:	f001 f870 	bl	8003194 <HAL_I2C_Master_Transmit>
 80020b4:	0003      	movs	r3, r0
 80020b6:	001a      	movs	r2, r3
 80020b8:	4b4c      	ldr	r3, [pc, #304]	; (80021ec <Init_LCD+0x17c>)
 80020ba:	701a      	strb	r2, [r3, #0]

    HAL_Delay(60);
 80020bc:	203c      	movs	r0, #60	; 0x3c
 80020be:	f000 fd63 	bl	8002b88 <HAL_Delay>

    commands[1] = 0x39;
 80020c2:	4b4b      	ldr	r3, [pc, #300]	; (80021f0 <Init_LCD+0x180>)
 80020c4:	2239      	movs	r2, #57	; 0x39
 80020c6:	705a      	strb	r2, [r3, #1]

    halstatus = HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, commands, 2, 100);
 80020c8:	4a49      	ldr	r2, [pc, #292]	; (80021f0 <Init_LCD+0x180>)
 80020ca:	4847      	ldr	r0, [pc, #284]	; (80021e8 <Init_LCD+0x178>)
 80020cc:	2364      	movs	r3, #100	; 0x64
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	2302      	movs	r3, #2
 80020d2:	2178      	movs	r1, #120	; 0x78
 80020d4:	f001 f85e 	bl	8003194 <HAL_I2C_Master_Transmit>
 80020d8:	0003      	movs	r3, r0
 80020da:	001a      	movs	r2, r3
 80020dc:	4b43      	ldr	r3, [pc, #268]	; (80021ec <Init_LCD+0x17c>)
 80020de:	701a      	strb	r2, [r3, #0]

    HAL_Delay(60);
 80020e0:	203c      	movs	r0, #60	; 0x3c
 80020e2:	f000 fd51 	bl	8002b88 <HAL_Delay>

    commands[1] = 0x14;
 80020e6:	4b42      	ldr	r3, [pc, #264]	; (80021f0 <Init_LCD+0x180>)
 80020e8:	2214      	movs	r2, #20
 80020ea:	705a      	strb	r2, [r3, #1]

    halstatus = HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, commands, 2, 100);
 80020ec:	4a40      	ldr	r2, [pc, #256]	; (80021f0 <Init_LCD+0x180>)
 80020ee:	483e      	ldr	r0, [pc, #248]	; (80021e8 <Init_LCD+0x178>)
 80020f0:	2364      	movs	r3, #100	; 0x64
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	2302      	movs	r3, #2
 80020f6:	2178      	movs	r1, #120	; 0x78
 80020f8:	f001 f84c 	bl	8003194 <HAL_I2C_Master_Transmit>
 80020fc:	0003      	movs	r3, r0
 80020fe:	001a      	movs	r2, r3
 8002100:	4b3a      	ldr	r3, [pc, #232]	; (80021ec <Init_LCD+0x17c>)
 8002102:	701a      	strb	r2, [r3, #0]

    HAL_Delay(60);
 8002104:	203c      	movs	r0, #60	; 0x3c
 8002106:	f000 fd3f 	bl	8002b88 <HAL_Delay>

    commands[1] = 0x78;
 800210a:	4b39      	ldr	r3, [pc, #228]	; (80021f0 <Init_LCD+0x180>)
 800210c:	2278      	movs	r2, #120	; 0x78
 800210e:	705a      	strb	r2, [r3, #1]

    halstatus = HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, commands, 2, 100);
 8002110:	4a37      	ldr	r2, [pc, #220]	; (80021f0 <Init_LCD+0x180>)
 8002112:	4835      	ldr	r0, [pc, #212]	; (80021e8 <Init_LCD+0x178>)
 8002114:	2364      	movs	r3, #100	; 0x64
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	2302      	movs	r3, #2
 800211a:	2178      	movs	r1, #120	; 0x78
 800211c:	f001 f83a 	bl	8003194 <HAL_I2C_Master_Transmit>
 8002120:	0003      	movs	r3, r0
 8002122:	001a      	movs	r2, r3
 8002124:	4b31      	ldr	r3, [pc, #196]	; (80021ec <Init_LCD+0x17c>)
 8002126:	701a      	strb	r2, [r3, #0]

    HAL_Delay(60);
 8002128:	203c      	movs	r0, #60	; 0x3c
 800212a:	f000 fd2d 	bl	8002b88 <HAL_Delay>

    commands[1] = 0x5e;
 800212e:	4b30      	ldr	r3, [pc, #192]	; (80021f0 <Init_LCD+0x180>)
 8002130:	225e      	movs	r2, #94	; 0x5e
 8002132:	705a      	strb	r2, [r3, #1]

    halstatus = HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, commands, 2, 100);
 8002134:	4a2e      	ldr	r2, [pc, #184]	; (80021f0 <Init_LCD+0x180>)
 8002136:	482c      	ldr	r0, [pc, #176]	; (80021e8 <Init_LCD+0x178>)
 8002138:	2364      	movs	r3, #100	; 0x64
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	2302      	movs	r3, #2
 800213e:	2178      	movs	r1, #120	; 0x78
 8002140:	f001 f828 	bl	8003194 <HAL_I2C_Master_Transmit>
 8002144:	0003      	movs	r3, r0
 8002146:	001a      	movs	r2, r3
 8002148:	4b28      	ldr	r3, [pc, #160]	; (80021ec <Init_LCD+0x17c>)
 800214a:	701a      	strb	r2, [r3, #0]

    HAL_Delay(60);
 800214c:	203c      	movs	r0, #60	; 0x3c
 800214e:	f000 fd1b 	bl	8002b88 <HAL_Delay>

    commands[1] = 0x6d;
 8002152:	4b27      	ldr	r3, [pc, #156]	; (80021f0 <Init_LCD+0x180>)
 8002154:	226d      	movs	r2, #109	; 0x6d
 8002156:	705a      	strb	r2, [r3, #1]

    halstatus = HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, commands, 2, 100);
 8002158:	4a25      	ldr	r2, [pc, #148]	; (80021f0 <Init_LCD+0x180>)
 800215a:	4823      	ldr	r0, [pc, #140]	; (80021e8 <Init_LCD+0x178>)
 800215c:	2364      	movs	r3, #100	; 0x64
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	2302      	movs	r3, #2
 8002162:	2178      	movs	r1, #120	; 0x78
 8002164:	f001 f816 	bl	8003194 <HAL_I2C_Master_Transmit>
 8002168:	0003      	movs	r3, r0
 800216a:	001a      	movs	r2, r3
 800216c:	4b1f      	ldr	r3, [pc, #124]	; (80021ec <Init_LCD+0x17c>)
 800216e:	701a      	strb	r2, [r3, #0]

    HAL_Delay(60);
 8002170:	203c      	movs	r0, #60	; 0x3c
 8002172:	f000 fd09 	bl	8002b88 <HAL_Delay>

    commands[1] = 0x0c;
 8002176:	4b1e      	ldr	r3, [pc, #120]	; (80021f0 <Init_LCD+0x180>)
 8002178:	220c      	movs	r2, #12
 800217a:	705a      	strb	r2, [r3, #1]

    halstatus = HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, commands, 2, 100);
 800217c:	4a1c      	ldr	r2, [pc, #112]	; (80021f0 <Init_LCD+0x180>)
 800217e:	481a      	ldr	r0, [pc, #104]	; (80021e8 <Init_LCD+0x178>)
 8002180:	2364      	movs	r3, #100	; 0x64
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	2302      	movs	r3, #2
 8002186:	2178      	movs	r1, #120	; 0x78
 8002188:	f001 f804 	bl	8003194 <HAL_I2C_Master_Transmit>
 800218c:	0003      	movs	r3, r0
 800218e:	001a      	movs	r2, r3
 8002190:	4b16      	ldr	r3, [pc, #88]	; (80021ec <Init_LCD+0x17c>)
 8002192:	701a      	strb	r2, [r3, #0]

    HAL_Delay(60);
 8002194:	203c      	movs	r0, #60	; 0x3c
 8002196:	f000 fcf7 	bl	8002b88 <HAL_Delay>

    commands[1] = 0x01;
 800219a:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <Init_LCD+0x180>)
 800219c:	2201      	movs	r2, #1
 800219e:	705a      	strb	r2, [r3, #1]

    halstatus = HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, commands, 2, 100);
 80021a0:	4a13      	ldr	r2, [pc, #76]	; (80021f0 <Init_LCD+0x180>)
 80021a2:	4811      	ldr	r0, [pc, #68]	; (80021e8 <Init_LCD+0x178>)
 80021a4:	2364      	movs	r3, #100	; 0x64
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	2302      	movs	r3, #2
 80021aa:	2178      	movs	r1, #120	; 0x78
 80021ac:	f000 fff2 	bl	8003194 <HAL_I2C_Master_Transmit>
 80021b0:	0003      	movs	r3, r0
 80021b2:	001a      	movs	r2, r3
 80021b4:	4b0d      	ldr	r3, [pc, #52]	; (80021ec <Init_LCD+0x17c>)
 80021b6:	701a      	strb	r2, [r3, #0]

    HAL_Delay(60);
 80021b8:	203c      	movs	r0, #60	; 0x3c
 80021ba:	f000 fce5 	bl	8002b88 <HAL_Delay>

    commands[1] = 0x06;
 80021be:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <Init_LCD+0x180>)
 80021c0:	2206      	movs	r2, #6
 80021c2:	705a      	strb	r2, [r3, #1]

    halstatus = HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, commands, 2, 100);
 80021c4:	4a0a      	ldr	r2, [pc, #40]	; (80021f0 <Init_LCD+0x180>)
 80021c6:	4808      	ldr	r0, [pc, #32]	; (80021e8 <Init_LCD+0x178>)
 80021c8:	2364      	movs	r3, #100	; 0x64
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	2302      	movs	r3, #2
 80021ce:	2178      	movs	r1, #120	; 0x78
 80021d0:	f000 ffe0 	bl	8003194 <HAL_I2C_Master_Transmit>
 80021d4:	0003      	movs	r3, r0
 80021d6:	001a      	movs	r2, r3
 80021d8:	4b04      	ldr	r3, [pc, #16]	; (80021ec <Init_LCD+0x17c>)
 80021da:	701a      	strb	r2, [r3, #0]

    HAL_Delay(60);
 80021dc:	203c      	movs	r0, #60	; 0x3c
 80021de:	f000 fcd3 	bl	8002b88 <HAL_Delay>
}
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000098 	.word	0x20000098
 80021ec:	20000178 	.word	0x20000178
 80021f0:	20000174 	.word	0x20000174

080021f4 <Show_LCD>:

void Show_LCD(uint8_t text_string[])

{
 80021f4:	b590      	push	{r4, r7, lr}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af02      	add	r7, sp, #8
 80021fa:	6078      	str	r0, [r7, #4]
    commands[1] = 0x80; // First character position of first Line
 80021fc:	4b2d      	ldr	r3, [pc, #180]	; (80022b4 <Show_LCD+0xc0>)
 80021fe:	2280      	movs	r2, #128	; 0x80
 8002200:	705a      	strb	r2, [r3, #1]

    halstatus = HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, commands, 2, 100);
 8002202:	4a2c      	ldr	r2, [pc, #176]	; (80022b4 <Show_LCD+0xc0>)
 8002204:	482c      	ldr	r0, [pc, #176]	; (80022b8 <Show_LCD+0xc4>)
 8002206:	2364      	movs	r3, #100	; 0x64
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	2302      	movs	r3, #2
 800220c:	2178      	movs	r1, #120	; 0x78
 800220e:	f000 ffc1 	bl	8003194 <HAL_I2C_Master_Transmit>
 8002212:	0003      	movs	r3, r0
 8002214:	001a      	movs	r2, r3
 8002216:	4b29      	ldr	r3, [pc, #164]	; (80022bc <Show_LCD+0xc8>)
 8002218:	701a      	strb	r2, [r3, #0]

    HAL_Delay(60);
 800221a:	203c      	movs	r0, #60	; 0x3c
 800221c:	f000 fcb4 	bl	8002b88 <HAL_Delay>

    uint8_t* data = (uint8_t*)malloc(strlen(text_string) + 1);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	0018      	movs	r0, r3
 8002224:	f7fd ff6c 	bl	8000100 <strlen>
 8002228:	0003      	movs	r3, r0
 800222a:	3301      	adds	r3, #1
 800222c:	0018      	movs	r0, r3
 800222e:	f002 ff3d 	bl	80050ac <malloc>
 8002232:	0003      	movs	r3, r0
 8002234:	60bb      	str	r3, [r7, #8]
    data[0] = 0x40;
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2240      	movs	r2, #64	; 0x40
 800223a:	701a      	strb	r2, [r3, #0]

    for(uint8_t i = 1; i <= strlen(text_string) + 1; i++){
 800223c:	230f      	movs	r3, #15
 800223e:	18fb      	adds	r3, r7, r3
 8002240:	2201      	movs	r2, #1
 8002242:	701a      	strb	r2, [r3, #0]
 8002244:	e010      	b.n	8002268 <Show_LCD+0x74>
    	data[i] = text_string[i - 1];
 8002246:	200f      	movs	r0, #15
 8002248:	183b      	adds	r3, r7, r0
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	3b01      	subs	r3, #1
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	18d2      	adds	r2, r2, r3
 8002252:	183b      	adds	r3, r7, r0
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	68b9      	ldr	r1, [r7, #8]
 8002258:	18cb      	adds	r3, r1, r3
 800225a:	7812      	ldrb	r2, [r2, #0]
 800225c:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 1; i <= strlen(text_string) + 1; i++){
 800225e:	183b      	adds	r3, r7, r0
 8002260:	781a      	ldrb	r2, [r3, #0]
 8002262:	183b      	adds	r3, r7, r0
 8002264:	3201      	adds	r2, #1
 8002266:	701a      	strb	r2, [r3, #0]
 8002268:	230f      	movs	r3, #15
 800226a:	18fb      	adds	r3, r7, r3
 800226c:	781c      	ldrb	r4, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	0018      	movs	r0, r3
 8002272:	f7fd ff45 	bl	8000100 <strlen>
 8002276:	0003      	movs	r3, r0
 8002278:	3301      	adds	r3, #1
 800227a:	429c      	cmp	r4, r3
 800227c:	d9e3      	bls.n	8002246 <Show_LCD+0x52>
    }
    halstatus = HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, data, strlen(text_string) + 1, 100);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	0018      	movs	r0, r3
 8002282:	f7fd ff3d 	bl	8000100 <strlen>
 8002286:	0003      	movs	r3, r0
 8002288:	b29b      	uxth	r3, r3
 800228a:	3301      	adds	r3, #1
 800228c:	b29b      	uxth	r3, r3
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	4809      	ldr	r0, [pc, #36]	; (80022b8 <Show_LCD+0xc4>)
 8002292:	2164      	movs	r1, #100	; 0x64
 8002294:	9100      	str	r1, [sp, #0]
 8002296:	2178      	movs	r1, #120	; 0x78
 8002298:	f000 ff7c 	bl	8003194 <HAL_I2C_Master_Transmit>
 800229c:	0003      	movs	r3, r0
 800229e:	001a      	movs	r2, r3
 80022a0:	4b06      	ldr	r3, [pc, #24]	; (80022bc <Show_LCD+0xc8>)
 80022a2:	701a      	strb	r2, [r3, #0]

    HAL_Delay(60);
 80022a4:	203c      	movs	r0, #60	; 0x3c
 80022a6:	f000 fc6f 	bl	8002b88 <HAL_Delay>
}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	46bd      	mov	sp, r7
 80022ae:	b005      	add	sp, #20
 80022b0:	bd90      	pop	{r4, r7, pc}
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	20000174 	.word	0x20000174
 80022b8:	20000098 	.word	0x20000098
 80022bc:	20000178 	.word	0x20000178

080022c0 <Update_Char>:



void Update_Char()
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af02      	add	r7, sp, #8
	HAL_Delay(5);
 80022c6:	2005      	movs	r0, #5
 80022c8:	f000 fc5e 	bl	8002b88 <HAL_Delay>

	commands[1] = 0x38;
 80022cc:	4b23      	ldr	r3, [pc, #140]	; (800235c <Update_Char+0x9c>)
 80022ce:	2238      	movs	r2, #56	; 0x38
 80022d0:	705a      	strb	r2, [r3, #1]

	halstatus = HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, commands, 2, 100);
 80022d2:	4a22      	ldr	r2, [pc, #136]	; (800235c <Update_Char+0x9c>)
 80022d4:	4822      	ldr	r0, [pc, #136]	; (8002360 <Update_Char+0xa0>)
 80022d6:	2364      	movs	r3, #100	; 0x64
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	2302      	movs	r3, #2
 80022dc:	2178      	movs	r1, #120	; 0x78
 80022de:	f000 ff59 	bl	8003194 <HAL_I2C_Master_Transmit>
 80022e2:	0003      	movs	r3, r0
 80022e4:	001a      	movs	r2, r3
 80022e6:	4b1f      	ldr	r3, [pc, #124]	; (8002364 <Update_Char+0xa4>)
 80022e8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5);
 80022ea:	2005      	movs	r0, #5
 80022ec:	f000 fc4c 	bl	8002b88 <HAL_Delay>

	commands[1] = 0x48;
 80022f0:	4b1a      	ldr	r3, [pc, #104]	; (800235c <Update_Char+0x9c>)
 80022f2:	2248      	movs	r2, #72	; 0x48
 80022f4:	705a      	strb	r2, [r3, #1]
	halstatus = HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, commands, 2, 100);
 80022f6:	4a19      	ldr	r2, [pc, #100]	; (800235c <Update_Char+0x9c>)
 80022f8:	4819      	ldr	r0, [pc, #100]	; (8002360 <Update_Char+0xa0>)
 80022fa:	2364      	movs	r3, #100	; 0x64
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	2302      	movs	r3, #2
 8002300:	2178      	movs	r1, #120	; 0x78
 8002302:	f000 ff47 	bl	8003194 <HAL_I2C_Master_Transmit>
 8002306:	0003      	movs	r3, r0
 8002308:	001a      	movs	r2, r3
 800230a:	4b16      	ldr	r3, [pc, #88]	; (8002364 <Update_Char+0xa4>)
 800230c:	701a      	strb	r2, [r3, #0]

	HAL_Delay(5);
 800230e:	2005      	movs	r0, #5
 8002310:	f000 fc3a 	bl	8002b88 <HAL_Delay>

	halstatus = HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, oneplacer, 9, 100);
 8002314:	4a14      	ldr	r2, [pc, #80]	; (8002368 <Update_Char+0xa8>)
 8002316:	4812      	ldr	r0, [pc, #72]	; (8002360 <Update_Char+0xa0>)
 8002318:	2364      	movs	r3, #100	; 0x64
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	2309      	movs	r3, #9
 800231e:	2178      	movs	r1, #120	; 0x78
 8002320:	f000 ff38 	bl	8003194 <HAL_I2C_Master_Transmit>
 8002324:	0003      	movs	r3, r0
 8002326:	001a      	movs	r2, r3
 8002328:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <Update_Char+0xa4>)
 800232a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5);
 800232c:	2005      	movs	r0, #5
 800232e:	f000 fc2b 	bl	8002b88 <HAL_Delay>

	commands[1] = 0x39; // First character position of first Line
 8002332:	4b0a      	ldr	r3, [pc, #40]	; (800235c <Update_Char+0x9c>)
 8002334:	2239      	movs	r2, #57	; 0x39
 8002336:	705a      	strb	r2, [r3, #1]
	halstatus = HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, commands, 2, 100);
 8002338:	4a08      	ldr	r2, [pc, #32]	; (800235c <Update_Char+0x9c>)
 800233a:	4809      	ldr	r0, [pc, #36]	; (8002360 <Update_Char+0xa0>)
 800233c:	2364      	movs	r3, #100	; 0x64
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	2302      	movs	r3, #2
 8002342:	2178      	movs	r1, #120	; 0x78
 8002344:	f000 ff26 	bl	8003194 <HAL_I2C_Master_Transmit>
 8002348:	0003      	movs	r3, r0
 800234a:	001a      	movs	r2, r3
 800234c:	4b05      	ldr	r3, [pc, #20]	; (8002364 <Update_Char+0xa4>)
 800234e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5);
 8002350:	2005      	movs	r0, #5
 8002352:	f000 fc19 	bl	8002b88 <HAL_Delay>
}
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20000174 	.word	0x20000174
 8002360:	20000098 	.word	0x20000098
 8002364:	20000178 	.word	0x20000178
 8002368:	20000000 	.word	0x20000000

0800236c <ClearHelperArray>:


void ClearHelperArray()
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i < 8; i++){
 8002372:	1dfb      	adds	r3, r7, #7
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
 8002378:	e01c      	b.n	80023b4 <ClearHelperArray+0x48>
			for(uint8_t j=0; j < 5; j++)
 800237a:	1dbb      	adds	r3, r7, #6
 800237c:	2200      	movs	r2, #0
 800237e:	701a      	strb	r2, [r3, #0]
 8002380:	e00f      	b.n	80023a2 <ClearHelperArray+0x36>
			{
				Helper_Array[i][j] = 0;
 8002382:	1dfb      	adds	r3, r7, #7
 8002384:	781a      	ldrb	r2, [r3, #0]
 8002386:	1dbb      	adds	r3, r7, #6
 8002388:	7819      	ldrb	r1, [r3, #0]
 800238a:	480f      	ldr	r0, [pc, #60]	; (80023c8 <ClearHelperArray+0x5c>)
 800238c:	0013      	movs	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	189b      	adds	r3, r3, r2
 8002392:	18c3      	adds	r3, r0, r3
 8002394:	2200      	movs	r2, #0
 8002396:	545a      	strb	r2, [r3, r1]
			for(uint8_t j=0; j < 5; j++)
 8002398:	1dbb      	adds	r3, r7, #6
 800239a:	781a      	ldrb	r2, [r3, #0]
 800239c:	1dbb      	adds	r3, r7, #6
 800239e:	3201      	adds	r2, #1
 80023a0:	701a      	strb	r2, [r3, #0]
 80023a2:	1dbb      	adds	r3, r7, #6
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d9eb      	bls.n	8002382 <ClearHelperArray+0x16>
	for(uint8_t i=0; i < 8; i++){
 80023aa:	1dfb      	adds	r3, r7, #7
 80023ac:	781a      	ldrb	r2, [r3, #0]
 80023ae:	1dfb      	adds	r3, r7, #7
 80023b0:	3201      	adds	r2, #1
 80023b2:	701a      	strb	r2, [r3, #0]
 80023b4:	1dfb      	adds	r3, r7, #7
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b07      	cmp	r3, #7
 80023ba:	d9de      	bls.n	800237a <ClearHelperArray+0xe>
			}
	}
}
 80023bc:	46c0      	nop			; (mov r8, r8)
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	46bd      	mov	sp, r7
 80023c2:	b002      	add	sp, #8
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	46c0      	nop			; (mov r8, r8)
 80023c8:	2000017c 	.word	0x2000017c

080023cc <HelperToBytes>:

void HelperToBytes()
{
 80023cc:	b5b0      	push	{r4, r5, r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
	for(uint8_t i=0,k=1; i < 8; i++, k++){
 80023d2:	1dfb      	adds	r3, r7, #7
 80023d4:	2200      	movs	r2, #0
 80023d6:	701a      	strb	r2, [r3, #0]
 80023d8:	1dbb      	adds	r3, r7, #6
 80023da:	2201      	movs	r2, #1
 80023dc:	701a      	strb	r2, [r3, #0]
 80023de:	e04f      	b.n	8002480 <HelperToBytes+0xb4>
			uint8_t value = 0;
 80023e0:	1d7b      	adds	r3, r7, #5
 80023e2:	2200      	movs	r2, #0
 80023e4:	701a      	strb	r2, [r3, #0]
			for(uint8_t j=0; j < 5; j++)
 80023e6:	1d3b      	adds	r3, r7, #4
 80023e8:	2200      	movs	r2, #0
 80023ea:	701a      	strb	r2, [r3, #0]
 80023ec:	e034      	b.n	8002458 <HelperToBytes+0x8c>
			{

				if(Helper_Array[i][j] == 1)
 80023ee:	1dfb      	adds	r3, r7, #7
 80023f0:	781a      	ldrb	r2, [r3, #0]
 80023f2:	1d3b      	adds	r3, r7, #4
 80023f4:	7819      	ldrb	r1, [r3, #0]
 80023f6:	4827      	ldr	r0, [pc, #156]	; (8002494 <HelperToBytes+0xc8>)
 80023f8:	0013      	movs	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	189b      	adds	r3, r3, r2
 80023fe:	18c3      	adds	r3, r0, r3
 8002400:	5c5b      	ldrb	r3, [r3, r1]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d123      	bne.n	800244e <HelperToBytes+0x82>
				{
					value += pow(2,5-j);
 8002406:	1d3b      	adds	r3, r7, #4
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2205      	movs	r2, #5
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	0018      	movs	r0, r3
 8002410:	f7ff fde0 	bl	8001fd4 <__aeabi_i2d>
 8002414:	0002      	movs	r2, r0
 8002416:	000b      	movs	r3, r1
 8002418:	2000      	movs	r0, #0
 800241a:	2180      	movs	r1, #128	; 0x80
 800241c:	05c9      	lsls	r1, r1, #23
 800241e:	f002 ff13 	bl	8005248 <pow>
 8002422:	0004      	movs	r4, r0
 8002424:	000d      	movs	r5, r1
 8002426:	1d7b      	adds	r3, r7, #5
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	0018      	movs	r0, r3
 800242c:	f7ff fdd2 	bl	8001fd4 <__aeabi_i2d>
 8002430:	0002      	movs	r2, r0
 8002432:	000b      	movs	r3, r1
 8002434:	0020      	movs	r0, r4
 8002436:	0029      	movs	r1, r5
 8002438:	f7fe f83c 	bl	80004b4 <__aeabi_dadd>
 800243c:	0002      	movs	r2, r0
 800243e:	000b      	movs	r3, r1
 8002440:	1d7c      	adds	r4, r7, #5
 8002442:	0010      	movs	r0, r2
 8002444:	0019      	movs	r1, r3
 8002446:	f7fe f817 	bl	8000478 <__aeabi_d2uiz>
 800244a:	0003      	movs	r3, r0
 800244c:	7023      	strb	r3, [r4, #0]
			for(uint8_t j=0; j < 5; j++)
 800244e:	1d3b      	adds	r3, r7, #4
 8002450:	781a      	ldrb	r2, [r3, #0]
 8002452:	1d3b      	adds	r3, r7, #4
 8002454:	3201      	adds	r2, #1
 8002456:	701a      	strb	r2, [r3, #0]
 8002458:	1d3b      	adds	r3, r7, #4
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b04      	cmp	r3, #4
 800245e:	d9c6      	bls.n	80023ee <HelperToBytes+0x22>
				}
			}
			oneplacer[k] = value;
 8002460:	1dbb      	adds	r3, r7, #6
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	4a0c      	ldr	r2, [pc, #48]	; (8002498 <HelperToBytes+0xcc>)
 8002466:	1d79      	adds	r1, r7, #5
 8002468:	7809      	ldrb	r1, [r1, #0]
 800246a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0,k=1; i < 8; i++, k++){
 800246c:	1dfb      	adds	r3, r7, #7
 800246e:	781a      	ldrb	r2, [r3, #0]
 8002470:	1dfb      	adds	r3, r7, #7
 8002472:	3201      	adds	r2, #1
 8002474:	701a      	strb	r2, [r3, #0]
 8002476:	1dbb      	adds	r3, r7, #6
 8002478:	781a      	ldrb	r2, [r3, #0]
 800247a:	1dbb      	adds	r3, r7, #6
 800247c:	3201      	adds	r2, #1
 800247e:	701a      	strb	r2, [r3, #0]
 8002480:	1dfb      	adds	r3, r7, #7
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b07      	cmp	r3, #7
 8002486:	d9ab      	bls.n	80023e0 <HelperToBytes+0x14>
		}
}
 8002488:	46c0      	nop			; (mov r8, r8)
 800248a:	46c0      	nop			; (mov r8, r8)
 800248c:	46bd      	mov	sp, r7
 800248e:	b002      	add	sp, #8
 8002490:	bdb0      	pop	{r4, r5, r7, pc}
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	2000017c 	.word	0x2000017c
 8002498:	20000000 	.word	0x20000000

0800249c <Snake>:


void Snake()
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i < 8; i++){
 80024a2:	1dfb      	adds	r3, r7, #7
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
 80024a8:	e025      	b.n	80024f6 <Snake+0x5a>
		for(uint8_t j=0; j < 5; j++)
 80024aa:	1dbb      	adds	r3, r7, #6
 80024ac:	2200      	movs	r2, #0
 80024ae:	701a      	strb	r2, [r3, #0]
 80024b0:	e018      	b.n	80024e4 <Snake+0x48>
		{
			ClearHelperArray();
 80024b2:	f7ff ff5b 	bl	800236c <ClearHelperArray>
			Helper_Array[i][j] = 1;
 80024b6:	1dfb      	adds	r3, r7, #7
 80024b8:	781a      	ldrb	r2, [r3, #0]
 80024ba:	1dbb      	adds	r3, r7, #6
 80024bc:	7819      	ldrb	r1, [r3, #0]
 80024be:	4812      	ldr	r0, [pc, #72]	; (8002508 <Snake+0x6c>)
 80024c0:	0013      	movs	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	189b      	adds	r3, r3, r2
 80024c6:	18c3      	adds	r3, r0, r3
 80024c8:	2201      	movs	r2, #1
 80024ca:	545a      	strb	r2, [r3, r1]
			HelperToBytes();
 80024cc:	f7ff ff7e 	bl	80023cc <HelperToBytes>
			Update_Char();
 80024d0:	f7ff fef6 	bl	80022c0 <Update_Char>
			HAL_Delay(100);
 80024d4:	2064      	movs	r0, #100	; 0x64
 80024d6:	f000 fb57 	bl	8002b88 <HAL_Delay>
		for(uint8_t j=0; j < 5; j++)
 80024da:	1dbb      	adds	r3, r7, #6
 80024dc:	781a      	ldrb	r2, [r3, #0]
 80024de:	1dbb      	adds	r3, r7, #6
 80024e0:	3201      	adds	r2, #1
 80024e2:	701a      	strb	r2, [r3, #0]
 80024e4:	1dbb      	adds	r3, r7, #6
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d9e2      	bls.n	80024b2 <Snake+0x16>
	for(uint8_t i=0; i < 8; i++){
 80024ec:	1dfb      	adds	r3, r7, #7
 80024ee:	781a      	ldrb	r2, [r3, #0]
 80024f0:	1dfb      	adds	r3, r7, #7
 80024f2:	3201      	adds	r2, #1
 80024f4:	701a      	strb	r2, [r3, #0]
 80024f6:	1dfb      	adds	r3, r7, #7
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b07      	cmp	r3, #7
 80024fc:	d9d5      	bls.n	80024aa <Snake+0xe>
		}
	}
}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	46c0      	nop			; (mov r8, r8)
 8002502:	46bd      	mov	sp, r7
 8002504:	b002      	add	sp, #8
 8002506:	bd80      	pop	{r7, pc}
 8002508:	2000017c 	.word	0x2000017c

0800250c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002510:	f000 fab4 	bl	8002a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002514:	f000 f81c 	bl	8002550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002518:	f000 f90a 	bl	8002730 <MX_GPIO_Init>
  MX_I2C1_Init();
 800251c:	f000 f87a 	bl	8002614 <MX_I2C1_Init>


  MX_USART2_UART_Init();
 8002520:	f000 f8b8 	bl	8002694 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  Init_LCD();
 8002524:	f7ff fda4 	bl	8002070 <Init_LCD>


  Show_LCD("\001\001\001\001\001\001\001\001\001\001\001");
 8002528:	4b08      	ldr	r3, [pc, #32]	; (800254c <main+0x40>)
 800252a:	0018      	movs	r0, r3
 800252c:	f7ff fe62 	bl	80021f4 <Show_LCD>
  HAL_Delay(1000);
 8002530:	23fa      	movs	r3, #250	; 0xfa
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	0018      	movs	r0, r3
 8002536:	f000 fb27 	bl	8002b88 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	 Snake();
 800253a:	f7ff ffaf 	bl	800249c <Snake>
	 HAL_Delay(500);
 800253e:	23fa      	movs	r3, #250	; 0xfa
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	0018      	movs	r0, r3
 8002544:	f000 fb20 	bl	8002b88 <HAL_Delay>
	 Snake();
 8002548:	e7f7      	b.n	800253a <main+0x2e>
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	08006020 	.word	0x08006020

08002550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002550:	b590      	push	{r4, r7, lr}
 8002552:	b099      	sub	sp, #100	; 0x64
 8002554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002556:	242c      	movs	r4, #44	; 0x2c
 8002558:	193b      	adds	r3, r7, r4
 800255a:	0018      	movs	r0, r3
 800255c:	2334      	movs	r3, #52	; 0x34
 800255e:	001a      	movs	r2, r3
 8002560:	2100      	movs	r1, #0
 8002562:	f002 fdad 	bl	80050c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002566:	231c      	movs	r3, #28
 8002568:	18fb      	adds	r3, r7, r3
 800256a:	0018      	movs	r0, r3
 800256c:	2310      	movs	r3, #16
 800256e:	001a      	movs	r2, r3
 8002570:	2100      	movs	r1, #0
 8002572:	f002 fda5 	bl	80050c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002576:	003b      	movs	r3, r7
 8002578:	0018      	movs	r0, r3
 800257a:	231c      	movs	r3, #28
 800257c:	001a      	movs	r2, r3
 800257e:	2100      	movs	r1, #0
 8002580:	f002 fd9e 	bl	80050c0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002584:	2380      	movs	r3, #128	; 0x80
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	0018      	movs	r0, r3
 800258a:	f001 fa49 	bl	8003a20 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800258e:	193b      	adds	r3, r7, r4
 8002590:	2202      	movs	r2, #2
 8002592:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002594:	193b      	adds	r3, r7, r4
 8002596:	2280      	movs	r2, #128	; 0x80
 8002598:	0052      	lsls	r2, r2, #1
 800259a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800259c:	193b      	adds	r3, r7, r4
 800259e:	2200      	movs	r2, #0
 80025a0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025a2:	193b      	adds	r3, r7, r4
 80025a4:	2240      	movs	r2, #64	; 0x40
 80025a6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80025a8:	193b      	adds	r3, r7, r4
 80025aa:	2200      	movs	r2, #0
 80025ac:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025ae:	193b      	adds	r3, r7, r4
 80025b0:	0018      	movs	r0, r3
 80025b2:	f001 fa81 	bl	8003ab8 <HAL_RCC_OscConfig>
 80025b6:	1e03      	subs	r3, r0, #0
 80025b8:	d001      	beq.n	80025be <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80025ba:	f000 f91d 	bl	80027f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025be:	211c      	movs	r1, #28
 80025c0:	187b      	adds	r3, r7, r1
 80025c2:	2207      	movs	r2, #7
 80025c4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80025c6:	187b      	adds	r3, r7, r1
 80025c8:	2200      	movs	r2, #0
 80025ca:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025cc:	187b      	adds	r3, r7, r1
 80025ce:	2200      	movs	r2, #0
 80025d0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025d2:	187b      	adds	r3, r7, r1
 80025d4:	2200      	movs	r2, #0
 80025d6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80025d8:	187b      	adds	r3, r7, r1
 80025da:	2100      	movs	r1, #0
 80025dc:	0018      	movs	r0, r3
 80025de:	f001 fd81 	bl	80040e4 <HAL_RCC_ClockConfig>
 80025e2:	1e03      	subs	r3, r0, #0
 80025e4:	d001      	beq.n	80025ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80025e6:	f000 f907 	bl	80027f8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80025ea:	003b      	movs	r3, r7
 80025ec:	2222      	movs	r2, #34	; 0x22
 80025ee:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80025f0:	003b      	movs	r3, r7
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80025f6:	003b      	movs	r3, r7
 80025f8:	2200      	movs	r2, #0
 80025fa:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025fc:	003b      	movs	r3, r7
 80025fe:	0018      	movs	r0, r3
 8002600:	f001 ff1a 	bl	8004438 <HAL_RCCEx_PeriphCLKConfig>
 8002604:	1e03      	subs	r3, r0, #0
 8002606:	d001      	beq.n	800260c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002608:	f000 f8f6 	bl	80027f8 <Error_Handler>
  }
}
 800260c:	46c0      	nop			; (mov r8, r8)
 800260e:	46bd      	mov	sp, r7
 8002610:	b019      	add	sp, #100	; 0x64
 8002612:	bd90      	pop	{r4, r7, pc}

08002614 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002618:	4b1b      	ldr	r3, [pc, #108]	; (8002688 <MX_I2C1_Init+0x74>)
 800261a:	4a1c      	ldr	r2, [pc, #112]	; (800268c <MX_I2C1_Init+0x78>)
 800261c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800261e:	4b1a      	ldr	r3, [pc, #104]	; (8002688 <MX_I2C1_Init+0x74>)
 8002620:	4a1b      	ldr	r2, [pc, #108]	; (8002690 <MX_I2C1_Init+0x7c>)
 8002622:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 20;
 8002624:	4b18      	ldr	r3, [pc, #96]	; (8002688 <MX_I2C1_Init+0x74>)
 8002626:	2214      	movs	r2, #20
 8002628:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800262a:	4b17      	ldr	r3, [pc, #92]	; (8002688 <MX_I2C1_Init+0x74>)
 800262c:	2201      	movs	r2, #1
 800262e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002630:	4b15      	ldr	r3, [pc, #84]	; (8002688 <MX_I2C1_Init+0x74>)
 8002632:	2200      	movs	r2, #0
 8002634:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002636:	4b14      	ldr	r3, [pc, #80]	; (8002688 <MX_I2C1_Init+0x74>)
 8002638:	2200      	movs	r2, #0
 800263a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800263c:	4b12      	ldr	r3, [pc, #72]	; (8002688 <MX_I2C1_Init+0x74>)
 800263e:	2200      	movs	r2, #0
 8002640:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002642:	4b11      	ldr	r3, [pc, #68]	; (8002688 <MX_I2C1_Init+0x74>)
 8002644:	2200      	movs	r2, #0
 8002646:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002648:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <MX_I2C1_Init+0x74>)
 800264a:	2200      	movs	r2, #0
 800264c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800264e:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <MX_I2C1_Init+0x74>)
 8002650:	0018      	movs	r0, r3
 8002652:	f000 fd09 	bl	8003068 <HAL_I2C_Init>
 8002656:	1e03      	subs	r3, r0, #0
 8002658:	d001      	beq.n	800265e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800265a:	f000 f8cd 	bl	80027f8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800265e:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <MX_I2C1_Init+0x74>)
 8002660:	2100      	movs	r1, #0
 8002662:	0018      	movs	r0, r3
 8002664:	f001 f944 	bl	80038f0 <HAL_I2CEx_ConfigAnalogFilter>
 8002668:	1e03      	subs	r3, r0, #0
 800266a:	d001      	beq.n	8002670 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800266c:	f000 f8c4 	bl	80027f8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002670:	4b05      	ldr	r3, [pc, #20]	; (8002688 <MX_I2C1_Init+0x74>)
 8002672:	2100      	movs	r1, #0
 8002674:	0018      	movs	r0, r3
 8002676:	f001 f987 	bl	8003988 <HAL_I2CEx_ConfigDigitalFilter>
 800267a:	1e03      	subs	r3, r0, #0
 800267c:	d001      	beq.n	8002682 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800267e:	f000 f8bb 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20000098 	.word	0x20000098
 800268c:	40005400 	.word	0x40005400
 8002690:	00303d5b 	.word	0x00303d5b

08002694 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002698:	4b23      	ldr	r3, [pc, #140]	; (8002728 <MX_USART2_UART_Init+0x94>)
 800269a:	4a24      	ldr	r2, [pc, #144]	; (800272c <MX_USART2_UART_Init+0x98>)
 800269c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800269e:	4b22      	ldr	r3, [pc, #136]	; (8002728 <MX_USART2_UART_Init+0x94>)
 80026a0:	22e1      	movs	r2, #225	; 0xe1
 80026a2:	0252      	lsls	r2, r2, #9
 80026a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026a6:	4b20      	ldr	r3, [pc, #128]	; (8002728 <MX_USART2_UART_Init+0x94>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026ac:	4b1e      	ldr	r3, [pc, #120]	; (8002728 <MX_USART2_UART_Init+0x94>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026b2:	4b1d      	ldr	r3, [pc, #116]	; (8002728 <MX_USART2_UART_Init+0x94>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026b8:	4b1b      	ldr	r3, [pc, #108]	; (8002728 <MX_USART2_UART_Init+0x94>)
 80026ba:	220c      	movs	r2, #12
 80026bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026be:	4b1a      	ldr	r3, [pc, #104]	; (8002728 <MX_USART2_UART_Init+0x94>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026c4:	4b18      	ldr	r3, [pc, #96]	; (8002728 <MX_USART2_UART_Init+0x94>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026ca:	4b17      	ldr	r3, [pc, #92]	; (8002728 <MX_USART2_UART_Init+0x94>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026d0:	4b15      	ldr	r3, [pc, #84]	; (8002728 <MX_USART2_UART_Init+0x94>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026d6:	4b14      	ldr	r3, [pc, #80]	; (8002728 <MX_USART2_UART_Init+0x94>)
 80026d8:	2200      	movs	r2, #0
 80026da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026dc:	4b12      	ldr	r3, [pc, #72]	; (8002728 <MX_USART2_UART_Init+0x94>)
 80026de:	0018      	movs	r0, r3
 80026e0:	f001 ffde 	bl	80046a0 <HAL_UART_Init>
 80026e4:	1e03      	subs	r3, r0, #0
 80026e6:	d001      	beq.n	80026ec <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80026e8:	f000 f886 	bl	80027f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026ec:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <MX_USART2_UART_Init+0x94>)
 80026ee:	2100      	movs	r1, #0
 80026f0:	0018      	movs	r0, r3
 80026f2:	f002 fbd1 	bl	8004e98 <HAL_UARTEx_SetTxFifoThreshold>
 80026f6:	1e03      	subs	r3, r0, #0
 80026f8:	d001      	beq.n	80026fe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80026fa:	f000 f87d 	bl	80027f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <MX_USART2_UART_Init+0x94>)
 8002700:	2100      	movs	r1, #0
 8002702:	0018      	movs	r0, r3
 8002704:	f002 fc08 	bl	8004f18 <HAL_UARTEx_SetRxFifoThreshold>
 8002708:	1e03      	subs	r3, r0, #0
 800270a:	d001      	beq.n	8002710 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800270c:	f000 f874 	bl	80027f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002710:	4b05      	ldr	r3, [pc, #20]	; (8002728 <MX_USART2_UART_Init+0x94>)
 8002712:	0018      	movs	r0, r3
 8002714:	f002 fb86 	bl	8004e24 <HAL_UARTEx_DisableFifoMode>
 8002718:	1e03      	subs	r3, r0, #0
 800271a:	d001      	beq.n	8002720 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800271c:	f000 f86c 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002720:	46c0      	nop			; (mov r8, r8)
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	200000e4 	.word	0x200000e4
 800272c:	40004400 	.word	0x40004400

08002730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002730:	b590      	push	{r4, r7, lr}
 8002732:	b089      	sub	sp, #36	; 0x24
 8002734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002736:	240c      	movs	r4, #12
 8002738:	193b      	adds	r3, r7, r4
 800273a:	0018      	movs	r0, r3
 800273c:	2314      	movs	r3, #20
 800273e:	001a      	movs	r2, r3
 8002740:	2100      	movs	r1, #0
 8002742:	f002 fcbd 	bl	80050c0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002746:	4b2b      	ldr	r3, [pc, #172]	; (80027f4 <MX_GPIO_Init+0xc4>)
 8002748:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800274a:	4b2a      	ldr	r3, [pc, #168]	; (80027f4 <MX_GPIO_Init+0xc4>)
 800274c:	2104      	movs	r1, #4
 800274e:	430a      	orrs	r2, r1
 8002750:	635a      	str	r2, [r3, #52]	; 0x34
 8002752:	4b28      	ldr	r3, [pc, #160]	; (80027f4 <MX_GPIO_Init+0xc4>)
 8002754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002756:	2204      	movs	r2, #4
 8002758:	4013      	ands	r3, r2
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800275e:	4b25      	ldr	r3, [pc, #148]	; (80027f4 <MX_GPIO_Init+0xc4>)
 8002760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002762:	4b24      	ldr	r3, [pc, #144]	; (80027f4 <MX_GPIO_Init+0xc4>)
 8002764:	2120      	movs	r1, #32
 8002766:	430a      	orrs	r2, r1
 8002768:	635a      	str	r2, [r3, #52]	; 0x34
 800276a:	4b22      	ldr	r3, [pc, #136]	; (80027f4 <MX_GPIO_Init+0xc4>)
 800276c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276e:	2220      	movs	r2, #32
 8002770:	4013      	ands	r3, r2
 8002772:	607b      	str	r3, [r7, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002776:	4b1f      	ldr	r3, [pc, #124]	; (80027f4 <MX_GPIO_Init+0xc4>)
 8002778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800277a:	4b1e      	ldr	r3, [pc, #120]	; (80027f4 <MX_GPIO_Init+0xc4>)
 800277c:	2101      	movs	r1, #1
 800277e:	430a      	orrs	r2, r1
 8002780:	635a      	str	r2, [r3, #52]	; 0x34
 8002782:	4b1c      	ldr	r3, [pc, #112]	; (80027f4 <MX_GPIO_Init+0xc4>)
 8002784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002786:	2201      	movs	r2, #1
 8002788:	4013      	ands	r3, r2
 800278a:	603b      	str	r3, [r7, #0]
 800278c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RESET_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 800278e:	23a0      	movs	r3, #160	; 0xa0
 8002790:	05db      	lsls	r3, r3, #23
 8002792:	2200      	movs	r2, #0
 8002794:	2130      	movs	r1, #48	; 0x30
 8002796:	0018      	movs	r0, r3
 8002798:	f000 fc48 	bl	800302c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 800279c:	193b      	adds	r3, r7, r4
 800279e:	2210      	movs	r2, #16
 80027a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027a2:	193b      	adds	r3, r7, r4
 80027a4:	2201      	movs	r2, #1
 80027a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a8:	193b      	adds	r3, r7, r4
 80027aa:	2200      	movs	r2, #0
 80027ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ae:	193b      	adds	r3, r7, r4
 80027b0:	2200      	movs	r2, #0
 80027b2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 80027b4:	193a      	adds	r2, r7, r4
 80027b6:	23a0      	movs	r3, #160	; 0xa0
 80027b8:	05db      	lsls	r3, r3, #23
 80027ba:	0011      	movs	r1, r2
 80027bc:	0018      	movs	r0, r3
 80027be:	f000 fad1 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80027c2:	0021      	movs	r1, r4
 80027c4:	187b      	adds	r3, r7, r1
 80027c6:	2220      	movs	r2, #32
 80027c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ca:	187b      	adds	r3, r7, r1
 80027cc:	2201      	movs	r2, #1
 80027ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	187b      	adds	r3, r7, r1
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027d6:	187b      	adds	r3, r7, r1
 80027d8:	2202      	movs	r2, #2
 80027da:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80027dc:	187a      	adds	r2, r7, r1
 80027de:	23a0      	movs	r3, #160	; 0xa0
 80027e0:	05db      	lsls	r3, r3, #23
 80027e2:	0011      	movs	r1, r2
 80027e4:	0018      	movs	r0, r3
 80027e6:	f000 fabd 	bl	8002d64 <HAL_GPIO_Init>

}
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	46bd      	mov	sp, r7
 80027ee:	b009      	add	sp, #36	; 0x24
 80027f0:	bd90      	pop	{r4, r7, pc}
 80027f2:	46c0      	nop			; (mov r8, r8)
 80027f4:	40021000 	.word	0x40021000

080027f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027fc:	b672      	cpsid	i
}
 80027fe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002800:	e7fe      	b.n	8002800 <Error_Handler+0x8>
	...

08002804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800280a:	4b11      	ldr	r3, [pc, #68]	; (8002850 <HAL_MspInit+0x4c>)
 800280c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800280e:	4b10      	ldr	r3, [pc, #64]	; (8002850 <HAL_MspInit+0x4c>)
 8002810:	2101      	movs	r1, #1
 8002812:	430a      	orrs	r2, r1
 8002814:	641a      	str	r2, [r3, #64]	; 0x40
 8002816:	4b0e      	ldr	r3, [pc, #56]	; (8002850 <HAL_MspInit+0x4c>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	2201      	movs	r2, #1
 800281c:	4013      	ands	r3, r2
 800281e:	607b      	str	r3, [r7, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002822:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <HAL_MspInit+0x4c>)
 8002824:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002826:	4b0a      	ldr	r3, [pc, #40]	; (8002850 <HAL_MspInit+0x4c>)
 8002828:	2180      	movs	r1, #128	; 0x80
 800282a:	0549      	lsls	r1, r1, #21
 800282c:	430a      	orrs	r2, r1
 800282e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002830:	4b07      	ldr	r3, [pc, #28]	; (8002850 <HAL_MspInit+0x4c>)
 8002832:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002834:	2380      	movs	r3, #128	; 0x80
 8002836:	055b      	lsls	r3, r3, #21
 8002838:	4013      	ands	r3, r2
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800283e:	23c0      	movs	r3, #192	; 0xc0
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	0018      	movs	r0, r3
 8002844:	f000 f9c4 	bl	8002bd0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002848:	46c0      	nop			; (mov r8, r8)
 800284a:	46bd      	mov	sp, r7
 800284c:	b002      	add	sp, #8
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40021000 	.word	0x40021000

08002854 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002854:	b590      	push	{r4, r7, lr}
 8002856:	b08b      	sub	sp, #44	; 0x2c
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800285c:	2414      	movs	r4, #20
 800285e:	193b      	adds	r3, r7, r4
 8002860:	0018      	movs	r0, r3
 8002862:	2314      	movs	r3, #20
 8002864:	001a      	movs	r2, r3
 8002866:	2100      	movs	r1, #0
 8002868:	f002 fc2a 	bl	80050c0 <memset>
  if(hi2c->Instance==I2C1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a1c      	ldr	r2, [pc, #112]	; (80028e4 <HAL_I2C_MspInit+0x90>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d131      	bne.n	80028da <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002876:	4b1c      	ldr	r3, [pc, #112]	; (80028e8 <HAL_I2C_MspInit+0x94>)
 8002878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800287a:	4b1b      	ldr	r3, [pc, #108]	; (80028e8 <HAL_I2C_MspInit+0x94>)
 800287c:	2101      	movs	r1, #1
 800287e:	430a      	orrs	r2, r1
 8002880:	635a      	str	r2, [r3, #52]	; 0x34
 8002882:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <HAL_I2C_MspInit+0x94>)
 8002884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002886:	2201      	movs	r2, #1
 8002888:	4013      	ands	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
 800288c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800288e:	193b      	adds	r3, r7, r4
 8002890:	22c0      	movs	r2, #192	; 0xc0
 8002892:	00d2      	lsls	r2, r2, #3
 8002894:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002896:	0021      	movs	r1, r4
 8002898:	187b      	adds	r3, r7, r1
 800289a:	2212      	movs	r2, #18
 800289c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289e:	187b      	adds	r3, r7, r1
 80028a0:	2200      	movs	r2, #0
 80028a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a4:	187b      	adds	r3, r7, r1
 80028a6:	2200      	movs	r2, #0
 80028a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80028aa:	187b      	adds	r3, r7, r1
 80028ac:	2206      	movs	r2, #6
 80028ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b0:	187a      	adds	r2, r7, r1
 80028b2:	23a0      	movs	r3, #160	; 0xa0
 80028b4:	05db      	lsls	r3, r3, #23
 80028b6:	0011      	movs	r1, r2
 80028b8:	0018      	movs	r0, r3
 80028ba:	f000 fa53 	bl	8002d64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028be:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <HAL_I2C_MspInit+0x94>)
 80028c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028c2:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <HAL_I2C_MspInit+0x94>)
 80028c4:	2180      	movs	r1, #128	; 0x80
 80028c6:	0389      	lsls	r1, r1, #14
 80028c8:	430a      	orrs	r2, r1
 80028ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80028cc:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <HAL_I2C_MspInit+0x94>)
 80028ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028d0:	2380      	movs	r3, #128	; 0x80
 80028d2:	039b      	lsls	r3, r3, #14
 80028d4:	4013      	ands	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	46bd      	mov	sp, r7
 80028de:	b00b      	add	sp, #44	; 0x2c
 80028e0:	bd90      	pop	{r4, r7, pc}
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	40005400 	.word	0x40005400
 80028e8:	40021000 	.word	0x40021000

080028ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028ec:	b590      	push	{r4, r7, lr}
 80028ee:	b08b      	sub	sp, #44	; 0x2c
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f4:	2414      	movs	r4, #20
 80028f6:	193b      	adds	r3, r7, r4
 80028f8:	0018      	movs	r0, r3
 80028fa:	2314      	movs	r3, #20
 80028fc:	001a      	movs	r2, r3
 80028fe:	2100      	movs	r1, #0
 8002900:	f002 fbde 	bl	80050c0 <memset>
  if(huart->Instance==USART2)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a1b      	ldr	r2, [pc, #108]	; (8002978 <HAL_UART_MspInit+0x8c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d130      	bne.n	8002970 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800290e:	4b1b      	ldr	r3, [pc, #108]	; (800297c <HAL_UART_MspInit+0x90>)
 8002910:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002912:	4b1a      	ldr	r3, [pc, #104]	; (800297c <HAL_UART_MspInit+0x90>)
 8002914:	2180      	movs	r1, #128	; 0x80
 8002916:	0289      	lsls	r1, r1, #10
 8002918:	430a      	orrs	r2, r1
 800291a:	63da      	str	r2, [r3, #60]	; 0x3c
 800291c:	4b17      	ldr	r3, [pc, #92]	; (800297c <HAL_UART_MspInit+0x90>)
 800291e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002920:	2380      	movs	r3, #128	; 0x80
 8002922:	029b      	lsls	r3, r3, #10
 8002924:	4013      	ands	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
 8002928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800292a:	4b14      	ldr	r3, [pc, #80]	; (800297c <HAL_UART_MspInit+0x90>)
 800292c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800292e:	4b13      	ldr	r3, [pc, #76]	; (800297c <HAL_UART_MspInit+0x90>)
 8002930:	2101      	movs	r1, #1
 8002932:	430a      	orrs	r2, r1
 8002934:	635a      	str	r2, [r3, #52]	; 0x34
 8002936:	4b11      	ldr	r3, [pc, #68]	; (800297c <HAL_UART_MspInit+0x90>)
 8002938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800293a:	2201      	movs	r2, #1
 800293c:	4013      	ands	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002942:	0021      	movs	r1, r4
 8002944:	187b      	adds	r3, r7, r1
 8002946:	220c      	movs	r2, #12
 8002948:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294a:	187b      	adds	r3, r7, r1
 800294c:	2202      	movs	r2, #2
 800294e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002950:	187b      	adds	r3, r7, r1
 8002952:	2201      	movs	r2, #1
 8002954:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002956:	187b      	adds	r3, r7, r1
 8002958:	2200      	movs	r2, #0
 800295a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800295c:	187b      	adds	r3, r7, r1
 800295e:	2201      	movs	r2, #1
 8002960:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002962:	187a      	adds	r2, r7, r1
 8002964:	23a0      	movs	r3, #160	; 0xa0
 8002966:	05db      	lsls	r3, r3, #23
 8002968:	0011      	movs	r1, r2
 800296a:	0018      	movs	r0, r3
 800296c:	f000 f9fa 	bl	8002d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002970:	46c0      	nop			; (mov r8, r8)
 8002972:	46bd      	mov	sp, r7
 8002974:	b00b      	add	sp, #44	; 0x2c
 8002976:	bd90      	pop	{r4, r7, pc}
 8002978:	40004400 	.word	0x40004400
 800297c:	40021000 	.word	0x40021000

08002980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002984:	e7fe      	b.n	8002984 <NMI_Handler+0x4>

08002986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800298a:	e7fe      	b.n	800298a <HardFault_Handler+0x4>

0800298c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002990:	46c0      	nop			; (mov r8, r8)
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029a4:	f000 f8d4 	bl	8002b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029a8:	46c0      	nop			; (mov r8, r8)
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
	...

080029b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029b8:	4a14      	ldr	r2, [pc, #80]	; (8002a0c <_sbrk+0x5c>)
 80029ba:	4b15      	ldr	r3, [pc, #84]	; (8002a10 <_sbrk+0x60>)
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029c4:	4b13      	ldr	r3, [pc, #76]	; (8002a14 <_sbrk+0x64>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d102      	bne.n	80029d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029cc:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <_sbrk+0x64>)
 80029ce:	4a12      	ldr	r2, [pc, #72]	; (8002a18 <_sbrk+0x68>)
 80029d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029d2:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <_sbrk+0x64>)
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	18d3      	adds	r3, r2, r3
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d207      	bcs.n	80029f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029e0:	f002 fb3a 	bl	8005058 <__errno>
 80029e4:	0003      	movs	r3, r0
 80029e6:	220c      	movs	r2, #12
 80029e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029ea:	2301      	movs	r3, #1
 80029ec:	425b      	negs	r3, r3
 80029ee:	e009      	b.n	8002a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029f0:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <_sbrk+0x64>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029f6:	4b07      	ldr	r3, [pc, #28]	; (8002a14 <_sbrk+0x64>)
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	18d2      	adds	r2, r2, r3
 80029fe:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <_sbrk+0x64>)
 8002a00:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002a02:	68fb      	ldr	r3, [r7, #12]
}
 8002a04:	0018      	movs	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	b006      	add	sp, #24
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	20009000 	.word	0x20009000
 8002a10:	00000400 	.word	0x00000400
 8002a14:	200001a4 	.word	0x200001a4
 8002a18:	200001c0 	.word	0x200001c0

08002a1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a20:	46c0      	nop			; (mov r8, r8)
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
	...

08002a28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a28:	480d      	ldr	r0, [pc, #52]	; (8002a60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a2a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a2c:	f7ff fff6 	bl	8002a1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a30:	480c      	ldr	r0, [pc, #48]	; (8002a64 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a32:	490d      	ldr	r1, [pc, #52]	; (8002a68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a34:	4a0d      	ldr	r2, [pc, #52]	; (8002a6c <LoopForever+0xe>)
  movs r3, #0
 8002a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a38:	e002      	b.n	8002a40 <LoopCopyDataInit>

08002a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a3e:	3304      	adds	r3, #4

08002a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a44:	d3f9      	bcc.n	8002a3a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a46:	4a0a      	ldr	r2, [pc, #40]	; (8002a70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a48:	4c0a      	ldr	r4, [pc, #40]	; (8002a74 <LoopForever+0x16>)
  movs r3, #0
 8002a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a4c:	e001      	b.n	8002a52 <LoopFillZerobss>

08002a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a50:	3204      	adds	r2, #4

08002a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a54:	d3fb      	bcc.n	8002a4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002a56:	f002 fb05 	bl	8005064 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002a5a:	f7ff fd57 	bl	800250c <main>

08002a5e <LoopForever>:

LoopForever:
  b LoopForever
 8002a5e:	e7fe      	b.n	8002a5e <LoopForever>
  ldr   r0, =_estack
 8002a60:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a68:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002a6c:	08006170 	.word	0x08006170
  ldr r2, =_sbss
 8002a70:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002a74:	200001bc 	.word	0x200001bc

08002a78 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a78:	e7fe      	b.n	8002a78 <ADC1_IRQHandler>
	...

08002a7c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a82:	1dfb      	adds	r3, r7, #7
 8002a84:	2200      	movs	r2, #0
 8002a86:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a88:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <HAL_Init+0x3c>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <HAL_Init+0x3c>)
 8002a8e:	2180      	movs	r1, #128	; 0x80
 8002a90:	0049      	lsls	r1, r1, #1
 8002a92:	430a      	orrs	r2, r1
 8002a94:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a96:	2000      	movs	r0, #0
 8002a98:	f000 f810 	bl	8002abc <HAL_InitTick>
 8002a9c:	1e03      	subs	r3, r0, #0
 8002a9e:	d003      	beq.n	8002aa8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002aa0:	1dfb      	adds	r3, r7, #7
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	701a      	strb	r2, [r3, #0]
 8002aa6:	e001      	b.n	8002aac <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002aa8:	f7ff feac 	bl	8002804 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002aac:	1dfb      	adds	r3, r7, #7
 8002aae:	781b      	ldrb	r3, [r3, #0]
}
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	b002      	add	sp, #8
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40022000 	.word	0x40022000

08002abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002abc:	b590      	push	{r4, r7, lr}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ac4:	230f      	movs	r3, #15
 8002ac6:	18fb      	adds	r3, r7, r3
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002acc:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <HAL_InitTick+0x88>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d02b      	beq.n	8002b2c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002ad4:	4b1c      	ldr	r3, [pc, #112]	; (8002b48 <HAL_InitTick+0x8c>)
 8002ad6:	681c      	ldr	r4, [r3, #0]
 8002ad8:	4b1a      	ldr	r3, [pc, #104]	; (8002b44 <HAL_InitTick+0x88>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	0019      	movs	r1, r3
 8002ade:	23fa      	movs	r3, #250	; 0xfa
 8002ae0:	0098      	lsls	r0, r3, #2
 8002ae2:	f7fd fb15 	bl	8000110 <__udivsi3>
 8002ae6:	0003      	movs	r3, r0
 8002ae8:	0019      	movs	r1, r3
 8002aea:	0020      	movs	r0, r4
 8002aec:	f7fd fb10 	bl	8000110 <__udivsi3>
 8002af0:	0003      	movs	r3, r0
 8002af2:	0018      	movs	r0, r3
 8002af4:	f000 f929 	bl	8002d4a <HAL_SYSTICK_Config>
 8002af8:	1e03      	subs	r3, r0, #0
 8002afa:	d112      	bne.n	8002b22 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	d80a      	bhi.n	8002b18 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	2301      	movs	r3, #1
 8002b06:	425b      	negs	r3, r3
 8002b08:	2200      	movs	r2, #0
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f000 f908 	bl	8002d20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b10:	4b0e      	ldr	r3, [pc, #56]	; (8002b4c <HAL_InitTick+0x90>)
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	e00d      	b.n	8002b34 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002b18:	230f      	movs	r3, #15
 8002b1a:	18fb      	adds	r3, r7, r3
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	701a      	strb	r2, [r3, #0]
 8002b20:	e008      	b.n	8002b34 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b22:	230f      	movs	r3, #15
 8002b24:	18fb      	adds	r3, r7, r3
 8002b26:	2201      	movs	r2, #1
 8002b28:	701a      	strb	r2, [r3, #0]
 8002b2a:	e003      	b.n	8002b34 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b2c:	230f      	movs	r3, #15
 8002b2e:	18fb      	adds	r3, r7, r3
 8002b30:	2201      	movs	r2, #1
 8002b32:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002b34:	230f      	movs	r3, #15
 8002b36:	18fb      	adds	r3, r7, r3
 8002b38:	781b      	ldrb	r3, [r3, #0]
}
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b005      	add	sp, #20
 8002b40:	bd90      	pop	{r4, r7, pc}
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	20000014 	.word	0x20000014
 8002b48:	2000000c 	.word	0x2000000c
 8002b4c:	20000010 	.word	0x20000010

08002b50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b54:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <HAL_IncTick+0x1c>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	001a      	movs	r2, r3
 8002b5a:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <HAL_IncTick+0x20>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	18d2      	adds	r2, r2, r3
 8002b60:	4b03      	ldr	r3, [pc, #12]	; (8002b70 <HAL_IncTick+0x20>)
 8002b62:	601a      	str	r2, [r3, #0]
}
 8002b64:	46c0      	nop			; (mov r8, r8)
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	20000014 	.word	0x20000014
 8002b70:	200001a8 	.word	0x200001a8

08002b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  return uwTick;
 8002b78:	4b02      	ldr	r3, [pc, #8]	; (8002b84 <HAL_GetTick+0x10>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
}
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	46c0      	nop			; (mov r8, r8)
 8002b84:	200001a8 	.word	0x200001a8

08002b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b90:	f7ff fff0 	bl	8002b74 <HAL_GetTick>
 8002b94:	0003      	movs	r3, r0
 8002b96:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	d005      	beq.n	8002bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <HAL_Delay+0x44>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	001a      	movs	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	189b      	adds	r3, r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	f7ff ffe0 	bl	8002b74 <HAL_GetTick>
 8002bb4:	0002      	movs	r2, r0
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d8f7      	bhi.n	8002bb0 <HAL_Delay+0x28>
  {
  }
}
 8002bc0:	46c0      	nop			; (mov r8, r8)
 8002bc2:	46c0      	nop			; (mov r8, r8)
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	b004      	add	sp, #16
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	20000014 	.word	0x20000014

08002bd0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002bd8:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a06      	ldr	r2, [pc, #24]	; (8002bf8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	0019      	movs	r1, r3
 8002be2:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	601a      	str	r2, [r3, #0]
}
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	46bd      	mov	sp, r7
 8002bee:	b002      	add	sp, #8
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	40010000 	.word	0x40010000
 8002bf8:	fffff9ff 	.word	0xfffff9ff

08002bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bfc:	b590      	push	{r4, r7, lr}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	0002      	movs	r2, r0
 8002c04:	6039      	str	r1, [r7, #0]
 8002c06:	1dfb      	adds	r3, r7, #7
 8002c08:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c0a:	1dfb      	adds	r3, r7, #7
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b7f      	cmp	r3, #127	; 0x7f
 8002c10:	d828      	bhi.n	8002c64 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c12:	4a2f      	ldr	r2, [pc, #188]	; (8002cd0 <__NVIC_SetPriority+0xd4>)
 8002c14:	1dfb      	adds	r3, r7, #7
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	b25b      	sxtb	r3, r3
 8002c1a:	089b      	lsrs	r3, r3, #2
 8002c1c:	33c0      	adds	r3, #192	; 0xc0
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	589b      	ldr	r3, [r3, r2]
 8002c22:	1dfa      	adds	r2, r7, #7
 8002c24:	7812      	ldrb	r2, [r2, #0]
 8002c26:	0011      	movs	r1, r2
 8002c28:	2203      	movs	r2, #3
 8002c2a:	400a      	ands	r2, r1
 8002c2c:	00d2      	lsls	r2, r2, #3
 8002c2e:	21ff      	movs	r1, #255	; 0xff
 8002c30:	4091      	lsls	r1, r2
 8002c32:	000a      	movs	r2, r1
 8002c34:	43d2      	mvns	r2, r2
 8002c36:	401a      	ands	r2, r3
 8002c38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	019b      	lsls	r3, r3, #6
 8002c3e:	22ff      	movs	r2, #255	; 0xff
 8002c40:	401a      	ands	r2, r3
 8002c42:	1dfb      	adds	r3, r7, #7
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	0018      	movs	r0, r3
 8002c48:	2303      	movs	r3, #3
 8002c4a:	4003      	ands	r3, r0
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c50:	481f      	ldr	r0, [pc, #124]	; (8002cd0 <__NVIC_SetPriority+0xd4>)
 8002c52:	1dfb      	adds	r3, r7, #7
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	b25b      	sxtb	r3, r3
 8002c58:	089b      	lsrs	r3, r3, #2
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	33c0      	adds	r3, #192	; 0xc0
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002c62:	e031      	b.n	8002cc8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c64:	4a1b      	ldr	r2, [pc, #108]	; (8002cd4 <__NVIC_SetPriority+0xd8>)
 8002c66:	1dfb      	adds	r3, r7, #7
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	0019      	movs	r1, r3
 8002c6c:	230f      	movs	r3, #15
 8002c6e:	400b      	ands	r3, r1
 8002c70:	3b08      	subs	r3, #8
 8002c72:	089b      	lsrs	r3, r3, #2
 8002c74:	3306      	adds	r3, #6
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	18d3      	adds	r3, r2, r3
 8002c7a:	3304      	adds	r3, #4
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	1dfa      	adds	r2, r7, #7
 8002c80:	7812      	ldrb	r2, [r2, #0]
 8002c82:	0011      	movs	r1, r2
 8002c84:	2203      	movs	r2, #3
 8002c86:	400a      	ands	r2, r1
 8002c88:	00d2      	lsls	r2, r2, #3
 8002c8a:	21ff      	movs	r1, #255	; 0xff
 8002c8c:	4091      	lsls	r1, r2
 8002c8e:	000a      	movs	r2, r1
 8002c90:	43d2      	mvns	r2, r2
 8002c92:	401a      	ands	r2, r3
 8002c94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	019b      	lsls	r3, r3, #6
 8002c9a:	22ff      	movs	r2, #255	; 0xff
 8002c9c:	401a      	ands	r2, r3
 8002c9e:	1dfb      	adds	r3, r7, #7
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	4003      	ands	r3, r0
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cac:	4809      	ldr	r0, [pc, #36]	; (8002cd4 <__NVIC_SetPriority+0xd8>)
 8002cae:	1dfb      	adds	r3, r7, #7
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	001c      	movs	r4, r3
 8002cb4:	230f      	movs	r3, #15
 8002cb6:	4023      	ands	r3, r4
 8002cb8:	3b08      	subs	r3, #8
 8002cba:	089b      	lsrs	r3, r3, #2
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	3306      	adds	r3, #6
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	18c3      	adds	r3, r0, r3
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	601a      	str	r2, [r3, #0]
}
 8002cc8:	46c0      	nop			; (mov r8, r8)
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	b003      	add	sp, #12
 8002cce:	bd90      	pop	{r4, r7, pc}
 8002cd0:	e000e100 	.word	0xe000e100
 8002cd4:	e000ed00 	.word	0xe000ed00

08002cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	1e5a      	subs	r2, r3, #1
 8002ce4:	2380      	movs	r3, #128	; 0x80
 8002ce6:	045b      	lsls	r3, r3, #17
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d301      	bcc.n	8002cf0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cec:	2301      	movs	r3, #1
 8002cee:	e010      	b.n	8002d12 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cf0:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <SysTick_Config+0x44>)
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	3a01      	subs	r2, #1
 8002cf6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	425b      	negs	r3, r3
 8002cfc:	2103      	movs	r1, #3
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f7ff ff7c 	bl	8002bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d04:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <SysTick_Config+0x44>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d0a:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <SysTick_Config+0x44>)
 8002d0c:	2207      	movs	r2, #7
 8002d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	0018      	movs	r0, r3
 8002d14:	46bd      	mov	sp, r7
 8002d16:	b002      	add	sp, #8
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	e000e010 	.word	0xe000e010

08002d20 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60b9      	str	r1, [r7, #8]
 8002d28:	607a      	str	r2, [r7, #4]
 8002d2a:	210f      	movs	r1, #15
 8002d2c:	187b      	adds	r3, r7, r1
 8002d2e:	1c02      	adds	r2, r0, #0
 8002d30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002d32:	68ba      	ldr	r2, [r7, #8]
 8002d34:	187b      	adds	r3, r7, r1
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	b25b      	sxtb	r3, r3
 8002d3a:	0011      	movs	r1, r2
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f7ff ff5d 	bl	8002bfc <__NVIC_SetPriority>
}
 8002d42:	46c0      	nop			; (mov r8, r8)
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b004      	add	sp, #16
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	0018      	movs	r0, r3
 8002d56:	f7ff ffbf 	bl	8002cd8 <SysTick_Config>
 8002d5a:	0003      	movs	r3, r0
}
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	b002      	add	sp, #8
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d72:	e147      	b.n	8003004 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2101      	movs	r1, #1
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	4091      	lsls	r1, r2
 8002d7e:	000a      	movs	r2, r1
 8002d80:	4013      	ands	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d100      	bne.n	8002d8c <HAL_GPIO_Init+0x28>
 8002d8a:	e138      	b.n	8002ffe <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	2203      	movs	r2, #3
 8002d92:	4013      	ands	r3, r2
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d005      	beq.n	8002da4 <HAL_GPIO_Init+0x40>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2203      	movs	r2, #3
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d130      	bne.n	8002e06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	2203      	movs	r2, #3
 8002db0:	409a      	lsls	r2, r3
 8002db2:	0013      	movs	r3, r2
 8002db4:	43da      	mvns	r2, r3
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	4013      	ands	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	68da      	ldr	r2, [r3, #12]
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	409a      	lsls	r2, r3
 8002dc6:	0013      	movs	r3, r2
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dda:	2201      	movs	r2, #1
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	409a      	lsls	r2, r3
 8002de0:	0013      	movs	r3, r2
 8002de2:	43da      	mvns	r2, r3
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4013      	ands	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	091b      	lsrs	r3, r3, #4
 8002df0:	2201      	movs	r2, #1
 8002df2:	401a      	ands	r2, r3
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	409a      	lsls	r2, r3
 8002df8:	0013      	movs	r3, r2
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2203      	movs	r2, #3
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2b03      	cmp	r3, #3
 8002e10:	d017      	beq.n	8002e42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	2203      	movs	r2, #3
 8002e1e:	409a      	lsls	r2, r3
 8002e20:	0013      	movs	r3, r2
 8002e22:	43da      	mvns	r2, r3
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	4013      	ands	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	409a      	lsls	r2, r3
 8002e34:	0013      	movs	r3, r2
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2203      	movs	r2, #3
 8002e48:	4013      	ands	r3, r2
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d123      	bne.n	8002e96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	08da      	lsrs	r2, r3, #3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3208      	adds	r2, #8
 8002e56:	0092      	lsls	r2, r2, #2
 8002e58:	58d3      	ldr	r3, [r2, r3]
 8002e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	2207      	movs	r2, #7
 8002e60:	4013      	ands	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	220f      	movs	r2, #15
 8002e66:	409a      	lsls	r2, r3
 8002e68:	0013      	movs	r3, r2
 8002e6a:	43da      	mvns	r2, r3
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	691a      	ldr	r2, [r3, #16]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2107      	movs	r1, #7
 8002e7a:	400b      	ands	r3, r1
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	409a      	lsls	r2, r3
 8002e80:	0013      	movs	r3, r2
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	08da      	lsrs	r2, r3, #3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3208      	adds	r2, #8
 8002e90:	0092      	lsls	r2, r2, #2
 8002e92:	6939      	ldr	r1, [r7, #16]
 8002e94:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	409a      	lsls	r2, r3
 8002ea4:	0013      	movs	r3, r2
 8002ea6:	43da      	mvns	r2, r3
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2203      	movs	r2, #3
 8002eb4:	401a      	ands	r2, r3
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	409a      	lsls	r2, r3
 8002ebc:	0013      	movs	r3, r2
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	23c0      	movs	r3, #192	; 0xc0
 8002ed0:	029b      	lsls	r3, r3, #10
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	d100      	bne.n	8002ed8 <HAL_GPIO_Init+0x174>
 8002ed6:	e092      	b.n	8002ffe <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002ed8:	4a50      	ldr	r2, [pc, #320]	; (800301c <HAL_GPIO_Init+0x2b8>)
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	089b      	lsrs	r3, r3, #2
 8002ede:	3318      	adds	r3, #24
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	589b      	ldr	r3, [r3, r2]
 8002ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2203      	movs	r2, #3
 8002eea:	4013      	ands	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	220f      	movs	r2, #15
 8002ef0:	409a      	lsls	r2, r3
 8002ef2:	0013      	movs	r3, r2
 8002ef4:	43da      	mvns	r2, r3
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	23a0      	movs	r3, #160	; 0xa0
 8002f00:	05db      	lsls	r3, r3, #23
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d013      	beq.n	8002f2e <HAL_GPIO_Init+0x1ca>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a45      	ldr	r2, [pc, #276]	; (8003020 <HAL_GPIO_Init+0x2bc>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d00d      	beq.n	8002f2a <HAL_GPIO_Init+0x1c6>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a44      	ldr	r2, [pc, #272]	; (8003024 <HAL_GPIO_Init+0x2c0>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d007      	beq.n	8002f26 <HAL_GPIO_Init+0x1c2>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a43      	ldr	r2, [pc, #268]	; (8003028 <HAL_GPIO_Init+0x2c4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d101      	bne.n	8002f22 <HAL_GPIO_Init+0x1be>
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e006      	b.n	8002f30 <HAL_GPIO_Init+0x1cc>
 8002f22:	2305      	movs	r3, #5
 8002f24:	e004      	b.n	8002f30 <HAL_GPIO_Init+0x1cc>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e002      	b.n	8002f30 <HAL_GPIO_Init+0x1cc>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <HAL_GPIO_Init+0x1cc>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	2103      	movs	r1, #3
 8002f34:	400a      	ands	r2, r1
 8002f36:	00d2      	lsls	r2, r2, #3
 8002f38:	4093      	lsls	r3, r2
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002f40:	4936      	ldr	r1, [pc, #216]	; (800301c <HAL_GPIO_Init+0x2b8>)
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	089b      	lsrs	r3, r3, #2
 8002f46:	3318      	adds	r3, #24
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002f4e:	4a33      	ldr	r2, [pc, #204]	; (800301c <HAL_GPIO_Init+0x2b8>)
 8002f50:	2380      	movs	r3, #128	; 0x80
 8002f52:	58d3      	ldr	r3, [r2, r3]
 8002f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	43da      	mvns	r2, r3
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	2380      	movs	r3, #128	; 0x80
 8002f66:	025b      	lsls	r3, r3, #9
 8002f68:	4013      	ands	r3, r2
 8002f6a:	d003      	beq.n	8002f74 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f74:	4929      	ldr	r1, [pc, #164]	; (800301c <HAL_GPIO_Init+0x2b8>)
 8002f76:	2280      	movs	r2, #128	; 0x80
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8002f7c:	4a27      	ldr	r2, [pc, #156]	; (800301c <HAL_GPIO_Init+0x2b8>)
 8002f7e:	2384      	movs	r3, #132	; 0x84
 8002f80:	58d3      	ldr	r3, [r2, r3]
 8002f82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	43da      	mvns	r2, r3
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	2380      	movs	r3, #128	; 0x80
 8002f94:	029b      	lsls	r3, r3, #10
 8002f96:	4013      	ands	r3, r2
 8002f98:	d003      	beq.n	8002fa2 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002fa2:	491e      	ldr	r1, [pc, #120]	; (800301c <HAL_GPIO_Init+0x2b8>)
 8002fa4:	2284      	movs	r2, #132	; 0x84
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002faa:	4b1c      	ldr	r3, [pc, #112]	; (800301c <HAL_GPIO_Init+0x2b8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	43da      	mvns	r2, r3
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	2380      	movs	r3, #128	; 0x80
 8002fc0:	035b      	lsls	r3, r3, #13
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d003      	beq.n	8002fce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002fce:	4b13      	ldr	r3, [pc, #76]	; (800301c <HAL_GPIO_Init+0x2b8>)
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002fd4:	4b11      	ldr	r3, [pc, #68]	; (800301c <HAL_GPIO_Init+0x2b8>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	43da      	mvns	r2, r3
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	2380      	movs	r3, #128	; 0x80
 8002fea:	039b      	lsls	r3, r3, #14
 8002fec:	4013      	ands	r3, r2
 8002fee:	d003      	beq.n	8002ff8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ff8:	4b08      	ldr	r3, [pc, #32]	; (800301c <HAL_GPIO_Init+0x2b8>)
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	3301      	adds	r3, #1
 8003002:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	40da      	lsrs	r2, r3
 800300c:	1e13      	subs	r3, r2, #0
 800300e:	d000      	beq.n	8003012 <HAL_GPIO_Init+0x2ae>
 8003010:	e6b0      	b.n	8002d74 <HAL_GPIO_Init+0x10>
  }
}
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	46c0      	nop			; (mov r8, r8)
 8003016:	46bd      	mov	sp, r7
 8003018:	b006      	add	sp, #24
 800301a:	bd80      	pop	{r7, pc}
 800301c:	40021800 	.word	0x40021800
 8003020:	50000400 	.word	0x50000400
 8003024:	50000800 	.word	0x50000800
 8003028:	50000c00 	.word	0x50000c00

0800302c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	0008      	movs	r0, r1
 8003036:	0011      	movs	r1, r2
 8003038:	1cbb      	adds	r3, r7, #2
 800303a:	1c02      	adds	r2, r0, #0
 800303c:	801a      	strh	r2, [r3, #0]
 800303e:	1c7b      	adds	r3, r7, #1
 8003040:	1c0a      	adds	r2, r1, #0
 8003042:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003044:	1c7b      	adds	r3, r7, #1
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d004      	beq.n	8003056 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800304c:	1cbb      	adds	r3, r7, #2
 800304e:	881a      	ldrh	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003054:	e003      	b.n	800305e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003056:	1cbb      	adds	r3, r7, #2
 8003058:	881a      	ldrh	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	46bd      	mov	sp, r7
 8003062:	b002      	add	sp, #8
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e082      	b.n	8003180 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2241      	movs	r2, #65	; 0x41
 800307e:	5c9b      	ldrb	r3, [r3, r2]
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d107      	bne.n	8003096 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2240      	movs	r2, #64	; 0x40
 800308a:	2100      	movs	r1, #0
 800308c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	0018      	movs	r0, r3
 8003092:	f7ff fbdf 	bl	8002854 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2241      	movs	r2, #65	; 0x41
 800309a:	2124      	movs	r1, #36	; 0x24
 800309c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2101      	movs	r1, #1
 80030aa:	438a      	bics	r2, r1
 80030ac:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4934      	ldr	r1, [pc, #208]	; (8003188 <HAL_I2C_Init+0x120>)
 80030b8:	400a      	ands	r2, r1
 80030ba:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4931      	ldr	r1, [pc, #196]	; (800318c <HAL_I2C_Init+0x124>)
 80030c8:	400a      	ands	r2, r1
 80030ca:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d108      	bne.n	80030e6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2180      	movs	r1, #128	; 0x80
 80030de:	0209      	lsls	r1, r1, #8
 80030e0:	430a      	orrs	r2, r1
 80030e2:	609a      	str	r2, [r3, #8]
 80030e4:	e007      	b.n	80030f6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2184      	movs	r1, #132	; 0x84
 80030f0:	0209      	lsls	r1, r1, #8
 80030f2:	430a      	orrs	r2, r1
 80030f4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d104      	bne.n	8003108 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2280      	movs	r2, #128	; 0x80
 8003104:	0112      	lsls	r2, r2, #4
 8003106:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	491f      	ldr	r1, [pc, #124]	; (8003190 <HAL_I2C_Init+0x128>)
 8003114:	430a      	orrs	r2, r1
 8003116:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68da      	ldr	r2, [r3, #12]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	491a      	ldr	r1, [pc, #104]	; (800318c <HAL_I2C_Init+0x124>)
 8003124:	400a      	ands	r2, r1
 8003126:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691a      	ldr	r2, [r3, #16]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	431a      	orrs	r2, r3
 8003132:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69d9      	ldr	r1, [r3, #28]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1a      	ldr	r2, [r3, #32]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2101      	movs	r1, #1
 800315e:	430a      	orrs	r2, r1
 8003160:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2241      	movs	r2, #65	; 0x41
 800316c:	2120      	movs	r1, #32
 800316e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2242      	movs	r2, #66	; 0x42
 800317a:	2100      	movs	r1, #0
 800317c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	0018      	movs	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	b002      	add	sp, #8
 8003186:	bd80      	pop	{r7, pc}
 8003188:	f0ffffff 	.word	0xf0ffffff
 800318c:	ffff7fff 	.word	0xffff7fff
 8003190:	02008000 	.word	0x02008000

08003194 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size, uint32_t Timeout)
{
 8003194:	b590      	push	{r4, r7, lr}
 8003196:	b089      	sub	sp, #36	; 0x24
 8003198:	af02      	add	r7, sp, #8
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	0008      	movs	r0, r1
 800319e:	607a      	str	r2, [r7, #4]
 80031a0:	0019      	movs	r1, r3
 80031a2:	230a      	movs	r3, #10
 80031a4:	18fb      	adds	r3, r7, r3
 80031a6:	1c02      	adds	r2, r0, #0
 80031a8:	801a      	strh	r2, [r3, #0]
 80031aa:	2308      	movs	r3, #8
 80031ac:	18fb      	adds	r3, r7, r3
 80031ae:	1c0a      	adds	r2, r1, #0
 80031b0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2241      	movs	r2, #65	; 0x41
 80031b6:	5c9b      	ldrb	r3, [r3, r2]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b20      	cmp	r3, #32
 80031bc:	d000      	beq.n	80031c0 <HAL_I2C_Master_Transmit+0x2c>
 80031be:	e0e7      	b.n	8003390 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2240      	movs	r2, #64	; 0x40
 80031c4:	5c9b      	ldrb	r3, [r3, r2]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d101      	bne.n	80031ce <HAL_I2C_Master_Transmit+0x3a>
 80031ca:	2302      	movs	r3, #2
 80031cc:	e0e1      	b.n	8003392 <HAL_I2C_Master_Transmit+0x1fe>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2240      	movs	r2, #64	; 0x40
 80031d2:	2101      	movs	r1, #1
 80031d4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031d6:	f7ff fccd 	bl	8002b74 <HAL_GetTick>
 80031da:	0003      	movs	r3, r0
 80031dc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031de:	2380      	movs	r3, #128	; 0x80
 80031e0:	0219      	lsls	r1, r3, #8
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	2319      	movs	r3, #25
 80031ea:	2201      	movs	r2, #1
 80031ec:	f000 fa16 	bl	800361c <I2C_WaitOnFlagUntilTimeout>
 80031f0:	1e03      	subs	r3, r0, #0
 80031f2:	d001      	beq.n	80031f8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0cc      	b.n	8003392 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2241      	movs	r2, #65	; 0x41
 80031fc:	2121      	movs	r1, #33	; 0x21
 80031fe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2242      	movs	r2, #66	; 0x42
 8003204:	2110      	movs	r1, #16
 8003206:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2208      	movs	r2, #8
 8003218:	18ba      	adds	r2, r7, r2
 800321a:	8812      	ldrh	r2, [r2, #0]
 800321c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003228:	b29b      	uxth	r3, r3
 800322a:	2bff      	cmp	r3, #255	; 0xff
 800322c:	d911      	bls.n	8003252 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	22ff      	movs	r2, #255	; 0xff
 8003232:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003238:	b2da      	uxtb	r2, r3
 800323a:	2380      	movs	r3, #128	; 0x80
 800323c:	045c      	lsls	r4, r3, #17
 800323e:	230a      	movs	r3, #10
 8003240:	18fb      	adds	r3, r7, r3
 8003242:	8819      	ldrh	r1, [r3, #0]
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	4b55      	ldr	r3, [pc, #340]	; (800339c <HAL_I2C_Master_Transmit+0x208>)
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	0023      	movs	r3, r4
 800324c:	f000 fb1a 	bl	8003884 <I2C_TransferConfig>
 8003250:	e075      	b.n	800333e <HAL_I2C_Master_Transmit+0x1aa>
                            I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003256:	b29a      	uxth	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003260:	b2da      	uxtb	r2, r3
 8003262:	2380      	movs	r3, #128	; 0x80
 8003264:	049c      	lsls	r4, r3, #18
 8003266:	230a      	movs	r3, #10
 8003268:	18fb      	adds	r3, r7, r3
 800326a:	8819      	ldrh	r1, [r3, #0]
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	4b4b      	ldr	r3, [pc, #300]	; (800339c <HAL_I2C_Master_Transmit+0x208>)
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	0023      	movs	r3, r4
 8003274:	f000 fb06 	bl	8003884 <I2C_TransferConfig>
                            I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003278:	e061      	b.n	800333e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	0018      	movs	r0, r3
 8003282:	f000 fa0a 	bl	800369a <I2C_WaitOnTXISFlagUntilTimeout>
 8003286:	1e03      	subs	r3, r0, #0
 8003288:	d001      	beq.n	800328e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e081      	b.n	8003392 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	781a      	ldrb	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	1c5a      	adds	r2, r3, #1
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d03a      	beq.n	800333e <HAL_I2C_Master_Transmit+0x1aa>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d136      	bne.n	800333e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	0013      	movs	r3, r2
 80032da:	2200      	movs	r2, #0
 80032dc:	2180      	movs	r1, #128	; 0x80
 80032de:	f000 f99d 	bl	800361c <I2C_WaitOnFlagUntilTimeout>
 80032e2:	1e03      	subs	r3, r0, #0
 80032e4:	d001      	beq.n	80032ea <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e053      	b.n	8003392 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	2bff      	cmp	r3, #255	; 0xff
 80032f2:	d911      	bls.n	8003318 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	22ff      	movs	r2, #255	; 0xff
 80032f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	2380      	movs	r3, #128	; 0x80
 8003302:	045c      	lsls	r4, r3, #17
 8003304:	230a      	movs	r3, #10
 8003306:	18fb      	adds	r3, r7, r3
 8003308:	8819      	ldrh	r1, [r3, #0]
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	2300      	movs	r3, #0
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	0023      	movs	r3, r4
 8003312:	f000 fab7 	bl	8003884 <I2C_TransferConfig>
 8003316:	e012      	b.n	800333e <HAL_I2C_Master_Transmit+0x1aa>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003326:	b2da      	uxtb	r2, r3
 8003328:	2380      	movs	r3, #128	; 0x80
 800332a:	049c      	lsls	r4, r3, #18
 800332c:	230a      	movs	r3, #10
 800332e:	18fb      	adds	r3, r7, r3
 8003330:	8819      	ldrh	r1, [r3, #0]
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	2300      	movs	r3, #0
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	0023      	movs	r3, r4
 800333a:	f000 faa3 	bl	8003884 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003342:	b29b      	uxth	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	d198      	bne.n	800327a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	0018      	movs	r0, r3
 8003350:	f000 f9e2 	bl	8003718 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003354:	1e03      	subs	r3, r0, #0
 8003356:	d001      	beq.n	800335c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e01a      	b.n	8003392 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2220      	movs	r2, #32
 8003362:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	490c      	ldr	r1, [pc, #48]	; (80033a0 <HAL_I2C_Master_Transmit+0x20c>)
 8003370:	400a      	ands	r2, r1
 8003372:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2241      	movs	r2, #65	; 0x41
 8003378:	2120      	movs	r1, #32
 800337a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2242      	movs	r2, #66	; 0x42
 8003380:	2100      	movs	r1, #0
 8003382:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2240      	movs	r2, #64	; 0x40
 8003388:	2100      	movs	r1, #0
 800338a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	e000      	b.n	8003392 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003390:	2302      	movs	r3, #2
  }
}
 8003392:	0018      	movs	r0, r3
 8003394:	46bd      	mov	sp, r7
 8003396:	b007      	add	sp, #28
 8003398:	bd90      	pop	{r4, r7, pc}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	80002000 	.word	0x80002000
 80033a0:	fe00e800 	.word	0xfe00e800

080033a4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                           uint32_t Timeout)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08a      	sub	sp, #40	; 0x28
 80033a8:	af02      	add	r7, sp, #8
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	607a      	str	r2, [r7, #4]
 80033ae:	603b      	str	r3, [r7, #0]
 80033b0:	230a      	movs	r3, #10
 80033b2:	18fb      	adds	r3, r7, r3
 80033b4:	1c0a      	adds	r2, r1, #0
 80033b6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80033b8:	2300      	movs	r3, #0
 80033ba:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2241      	movs	r2, #65	; 0x41
 80033c0:	5c9b      	ldrb	r3, [r3, r2]
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b20      	cmp	r3, #32
 80033c6:	d000      	beq.n	80033ca <HAL_I2C_IsDeviceReady+0x26>
 80033c8:	e0fe      	b.n	80035c8 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	699a      	ldr	r2, [r3, #24]
 80033d0:	2380      	movs	r3, #128	; 0x80
 80033d2:	021b      	lsls	r3, r3, #8
 80033d4:	401a      	ands	r2, r3
 80033d6:	2380      	movs	r3, #128	; 0x80
 80033d8:	021b      	lsls	r3, r3, #8
 80033da:	429a      	cmp	r2, r3
 80033dc:	d101      	bne.n	80033e2 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80033de:	2302      	movs	r3, #2
 80033e0:	e0f3      	b.n	80035ca <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2240      	movs	r2, #64	; 0x40
 80033e6:	5c9b      	ldrb	r3, [r3, r2]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d101      	bne.n	80033f0 <HAL_I2C_IsDeviceReady+0x4c>
 80033ec:	2302      	movs	r3, #2
 80033ee:	e0ec      	b.n	80035ca <HAL_I2C_IsDeviceReady+0x226>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2240      	movs	r2, #64	; 0x40
 80033f4:	2101      	movs	r1, #1
 80033f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2241      	movs	r2, #65	; 0x41
 80033fc:	2124      	movs	r1, #36	; 0x24
 80033fe:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d107      	bne.n	800341e <HAL_I2C_IsDeviceReady+0x7a>
 800340e:	230a      	movs	r3, #10
 8003410:	18fb      	adds	r3, r7, r3
 8003412:	881b      	ldrh	r3, [r3, #0]
 8003414:	059b      	lsls	r3, r3, #22
 8003416:	0d9b      	lsrs	r3, r3, #22
 8003418:	4a6e      	ldr	r2, [pc, #440]	; (80035d4 <HAL_I2C_IsDeviceReady+0x230>)
 800341a:	431a      	orrs	r2, r3
 800341c:	e007      	b.n	800342e <HAL_I2C_IsDeviceReady+0x8a>
 800341e:	230a      	movs	r3, #10
 8003420:	18fb      	adds	r3, r7, r3
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	059b      	lsls	r3, r3, #22
 8003426:	0d9b      	lsrs	r3, r3, #22
 8003428:	22a0      	movs	r2, #160	; 0xa0
 800342a:	0192      	lsls	r2, r2, #6
 800342c:	431a      	orrs	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003434:	f7ff fb9e 	bl	8002b74 <HAL_GetTick>
 8003438:	0003      	movs	r3, r0
 800343a:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	2220      	movs	r2, #32
 8003444:	4013      	ands	r3, r2
 8003446:	3b20      	subs	r3, #32
 8003448:	425a      	negs	r2, r3
 800344a:	4153      	adcs	r3, r2
 800344c:	b2da      	uxtb	r2, r3
 800344e:	231f      	movs	r3, #31
 8003450:	18fb      	adds	r3, r7, r3
 8003452:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	2210      	movs	r2, #16
 800345c:	4013      	ands	r3, r2
 800345e:	3b10      	subs	r3, #16
 8003460:	425a      	negs	r2, r3
 8003462:	4153      	adcs	r3, r2
 8003464:	b2da      	uxtb	r2, r3
 8003466:	231e      	movs	r3, #30
 8003468:	18fb      	adds	r3, r7, r3
 800346a:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800346c:	e035      	b.n	80034da <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	3301      	adds	r3, #1
 8003472:	d01a      	beq.n	80034aa <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003474:	f7ff fb7e 	bl	8002b74 <HAL_GetTick>
 8003478:	0002      	movs	r2, r0
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	429a      	cmp	r2, r3
 8003482:	d302      	bcc.n	800348a <HAL_I2C_IsDeviceReady+0xe6>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10f      	bne.n	80034aa <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2241      	movs	r2, #65	; 0x41
 800348e:	2120      	movs	r1, #32
 8003490:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003496:	2220      	movs	r2, #32
 8003498:	431a      	orrs	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2240      	movs	r2, #64	; 0x40
 80034a2:	2100      	movs	r1, #0
 80034a4:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e08f      	b.n	80035ca <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	2220      	movs	r2, #32
 80034b2:	4013      	ands	r3, r2
 80034b4:	3b20      	subs	r3, #32
 80034b6:	425a      	negs	r2, r3
 80034b8:	4153      	adcs	r3, r2
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	231f      	movs	r3, #31
 80034be:	18fb      	adds	r3, r7, r3
 80034c0:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	2210      	movs	r2, #16
 80034ca:	4013      	ands	r3, r2
 80034cc:	3b10      	subs	r3, #16
 80034ce:	425a      	negs	r2, r3
 80034d0:	4153      	adcs	r3, r2
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	231e      	movs	r3, #30
 80034d6:	18fb      	adds	r3, r7, r3
 80034d8:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80034da:	231f      	movs	r3, #31
 80034dc:	18fb      	adds	r3, r7, r3
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d104      	bne.n	80034ee <HAL_I2C_IsDeviceReady+0x14a>
 80034e4:	231e      	movs	r3, #30
 80034e6:	18fb      	adds	r3, r7, r3
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0bf      	beq.n	800346e <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	2210      	movs	r2, #16
 80034f6:	4013      	ands	r3, r2
 80034f8:	2b10      	cmp	r3, #16
 80034fa:	d01a      	beq.n	8003532 <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	0013      	movs	r3, r2
 8003506:	2200      	movs	r2, #0
 8003508:	2120      	movs	r1, #32
 800350a:	f000 f887 	bl	800361c <I2C_WaitOnFlagUntilTimeout>
 800350e:	1e03      	subs	r3, r0, #0
 8003510:	d001      	beq.n	8003516 <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e059      	b.n	80035ca <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2220      	movs	r2, #32
 800351c:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2241      	movs	r2, #65	; 0x41
 8003522:	2120      	movs	r1, #32
 8003524:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2240      	movs	r2, #64	; 0x40
 800352a:	2100      	movs	r1, #0
 800352c:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800352e:	2300      	movs	r3, #0
 8003530:	e04b      	b.n	80035ca <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	0013      	movs	r3, r2
 800353c:	2200      	movs	r2, #0
 800353e:	2120      	movs	r1, #32
 8003540:	f000 f86c 	bl	800361c <I2C_WaitOnFlagUntilTimeout>
 8003544:	1e03      	subs	r3, r0, #0
 8003546:	d001      	beq.n	800354c <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e03e      	b.n	80035ca <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2210      	movs	r2, #16
 8003552:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2220      	movs	r2, #32
 800355a:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	429a      	cmp	r2, r3
 8003562:	d119      	bne.n	8003598 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2180      	movs	r1, #128	; 0x80
 8003570:	01c9      	lsls	r1, r1, #7
 8003572:	430a      	orrs	r2, r1
 8003574:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	0013      	movs	r3, r2
 8003580:	2200      	movs	r2, #0
 8003582:	2120      	movs	r1, #32
 8003584:	f000 f84a 	bl	800361c <I2C_WaitOnFlagUntilTimeout>
 8003588:	1e03      	subs	r3, r0, #0
 800358a:	d001      	beq.n	8003590 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e01c      	b.n	80035ca <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2220      	movs	r2, #32
 8003596:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	3301      	adds	r3, #1
 800359c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d900      	bls.n	80035a8 <HAL_I2C_IsDeviceReady+0x204>
 80035a6:	e72e      	b.n	8003406 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2241      	movs	r2, #65	; 0x41
 80035ac:	2120      	movs	r1, #32
 80035ae:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b4:	2220      	movs	r2, #32
 80035b6:	431a      	orrs	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2240      	movs	r2, #64	; 0x40
 80035c0:	2100      	movs	r1, #0
 80035c2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e000      	b.n	80035ca <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 80035c8:	2302      	movs	r3, #2
  }
}
 80035ca:	0018      	movs	r0, r3
 80035cc:	46bd      	mov	sp, r7
 80035ce:	b008      	add	sp, #32
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	02002000 	.word	0x02002000

080035d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	2202      	movs	r2, #2
 80035e8:	4013      	ands	r3, r2
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d103      	bne.n	80035f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2200      	movs	r2, #0
 80035f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	2201      	movs	r2, #1
 80035fe:	4013      	ands	r3, r2
 8003600:	2b01      	cmp	r3, #1
 8003602:	d007      	beq.n	8003614 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699a      	ldr	r2, [r3, #24]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2101      	movs	r1, #1
 8003610:	430a      	orrs	r2, r1
 8003612:	619a      	str	r2, [r3, #24]
  }
}
 8003614:	46c0      	nop			; (mov r8, r8)
 8003616:	46bd      	mov	sp, r7
 8003618:	b002      	add	sp, #8
 800361a:	bd80      	pop	{r7, pc}

0800361c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	603b      	str	r3, [r7, #0]
 8003628:	1dfb      	adds	r3, r7, #7
 800362a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800362c:	e021      	b.n	8003672 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	3301      	adds	r3, #1
 8003632:	d01e      	beq.n	8003672 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003634:	f7ff fa9e 	bl	8002b74 <HAL_GetTick>
 8003638:	0002      	movs	r2, r0
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	429a      	cmp	r2, r3
 8003642:	d302      	bcc.n	800364a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d113      	bne.n	8003672 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364e:	2220      	movs	r2, #32
 8003650:	431a      	orrs	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2241      	movs	r2, #65	; 0x41
 800365a:	2120      	movs	r1, #32
 800365c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2242      	movs	r2, #66	; 0x42
 8003662:	2100      	movs	r1, #0
 8003664:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2240      	movs	r2, #64	; 0x40
 800366a:	2100      	movs	r1, #0
 800366c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e00f      	b.n	8003692 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	4013      	ands	r3, r2
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	425a      	negs	r2, r3
 8003682:	4153      	adcs	r3, r2
 8003684:	b2db      	uxtb	r3, r3
 8003686:	001a      	movs	r2, r3
 8003688:	1dfb      	adds	r3, r7, #7
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d0ce      	beq.n	800362e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	0018      	movs	r0, r3
 8003694:	46bd      	mov	sp, r7
 8003696:	b004      	add	sp, #16
 8003698:	bd80      	pop	{r7, pc}

0800369a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b084      	sub	sp, #16
 800369e:	af00      	add	r7, sp, #0
 80036a0:	60f8      	str	r0, [r7, #12]
 80036a2:	60b9      	str	r1, [r7, #8]
 80036a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036a6:	e02b      	b.n	8003700 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	68b9      	ldr	r1, [r7, #8]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	0018      	movs	r0, r3
 80036b0:	f000 f86e 	bl	8003790 <I2C_IsAcknowledgeFailed>
 80036b4:	1e03      	subs	r3, r0, #0
 80036b6:	d001      	beq.n	80036bc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e029      	b.n	8003710 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	3301      	adds	r3, #1
 80036c0:	d01e      	beq.n	8003700 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c2:	f7ff fa57 	bl	8002b74 <HAL_GetTick>
 80036c6:	0002      	movs	r2, r0
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d302      	bcc.n	80036d8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d113      	bne.n	8003700 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036dc:	2220      	movs	r2, #32
 80036de:	431a      	orrs	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2241      	movs	r2, #65	; 0x41
 80036e8:	2120      	movs	r1, #32
 80036ea:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2242      	movs	r2, #66	; 0x42
 80036f0:	2100      	movs	r1, #0
 80036f2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2240      	movs	r2, #64	; 0x40
 80036f8:	2100      	movs	r1, #0
 80036fa:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e007      	b.n	8003710 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	2202      	movs	r2, #2
 8003708:	4013      	ands	r3, r2
 800370a:	2b02      	cmp	r3, #2
 800370c:	d1cc      	bne.n	80036a8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	0018      	movs	r0, r3
 8003712:	46bd      	mov	sp, r7
 8003714:	b004      	add	sp, #16
 8003716:	bd80      	pop	{r7, pc}

08003718 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003724:	e028      	b.n	8003778 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	68b9      	ldr	r1, [r7, #8]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	0018      	movs	r0, r3
 800372e:	f000 f82f 	bl	8003790 <I2C_IsAcknowledgeFailed>
 8003732:	1e03      	subs	r3, r0, #0
 8003734:	d001      	beq.n	800373a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e026      	b.n	8003788 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800373a:	f7ff fa1b 	bl	8002b74 <HAL_GetTick>
 800373e:	0002      	movs	r2, r0
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	429a      	cmp	r2, r3
 8003748:	d302      	bcc.n	8003750 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d113      	bne.n	8003778 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003754:	2220      	movs	r2, #32
 8003756:	431a      	orrs	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2241      	movs	r2, #65	; 0x41
 8003760:	2120      	movs	r1, #32
 8003762:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2242      	movs	r2, #66	; 0x42
 8003768:	2100      	movs	r1, #0
 800376a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2240      	movs	r2, #64	; 0x40
 8003770:	2100      	movs	r1, #0
 8003772:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e007      	b.n	8003788 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	2220      	movs	r2, #32
 8003780:	4013      	ands	r3, r2
 8003782:	2b20      	cmp	r3, #32
 8003784:	d1cf      	bne.n	8003726 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	0018      	movs	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	b004      	add	sp, #16
 800378e:	bd80      	pop	{r7, pc}

08003790 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	2210      	movs	r2, #16
 80037a4:	4013      	ands	r3, r2
 80037a6:	2b10      	cmp	r3, #16
 80037a8:	d164      	bne.n	8003874 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	2380      	movs	r3, #128	; 0x80
 80037b2:	049b      	lsls	r3, r3, #18
 80037b4:	401a      	ands	r2, r3
 80037b6:	2380      	movs	r3, #128	; 0x80
 80037b8:	049b      	lsls	r3, r3, #18
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d02b      	beq.n	8003816 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2180      	movs	r1, #128	; 0x80
 80037ca:	01c9      	lsls	r1, r1, #7
 80037cc:	430a      	orrs	r2, r1
 80037ce:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037d0:	e021      	b.n	8003816 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	3301      	adds	r3, #1
 80037d6:	d01e      	beq.n	8003816 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d8:	f7ff f9cc 	bl	8002b74 <HAL_GetTick>
 80037dc:	0002      	movs	r2, r0
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d302      	bcc.n	80037ee <I2C_IsAcknowledgeFailed+0x5e>
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d113      	bne.n	8003816 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f2:	2220      	movs	r2, #32
 80037f4:	431a      	orrs	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2241      	movs	r2, #65	; 0x41
 80037fe:	2120      	movs	r1, #32
 8003800:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2242      	movs	r2, #66	; 0x42
 8003806:	2100      	movs	r1, #0
 8003808:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2240      	movs	r2, #64	; 0x40
 800380e:	2100      	movs	r1, #0
 8003810:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e02f      	b.n	8003876 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	2220      	movs	r2, #32
 800381e:	4013      	ands	r3, r2
 8003820:	2b20      	cmp	r3, #32
 8003822:	d1d6      	bne.n	80037d2 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2210      	movs	r2, #16
 800382a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2220      	movs	r2, #32
 8003832:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	0018      	movs	r0, r3
 8003838:	f7ff fece 	bl	80035d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	490e      	ldr	r1, [pc, #56]	; (8003880 <I2C_IsAcknowledgeFailed+0xf0>)
 8003848:	400a      	ands	r2, r1
 800384a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003850:	2204      	movs	r2, #4
 8003852:	431a      	orrs	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2241      	movs	r2, #65	; 0x41
 800385c:	2120      	movs	r1, #32
 800385e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2242      	movs	r2, #66	; 0x42
 8003864:	2100      	movs	r1, #0
 8003866:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2240      	movs	r2, #64	; 0x40
 800386c:	2100      	movs	r1, #0
 800386e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e000      	b.n	8003876 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	0018      	movs	r0, r3
 8003878:	46bd      	mov	sp, r7
 800387a:	b004      	add	sp, #16
 800387c:	bd80      	pop	{r7, pc}
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	fe00e800 	.word	0xfe00e800

08003884 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003884:	b590      	push	{r4, r7, lr}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	0008      	movs	r0, r1
 800388e:	0011      	movs	r1, r2
 8003890:	607b      	str	r3, [r7, #4]
 8003892:	240a      	movs	r4, #10
 8003894:	193b      	adds	r3, r7, r4
 8003896:	1c02      	adds	r2, r0, #0
 8003898:	801a      	strh	r2, [r3, #0]
 800389a:	2009      	movs	r0, #9
 800389c:	183b      	adds	r3, r7, r0
 800389e:	1c0a      	adds	r2, r1, #0
 80038a0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	6a3a      	ldr	r2, [r7, #32]
 80038aa:	0d51      	lsrs	r1, r2, #21
 80038ac:	2280      	movs	r2, #128	; 0x80
 80038ae:	00d2      	lsls	r2, r2, #3
 80038b0:	400a      	ands	r2, r1
 80038b2:	490e      	ldr	r1, [pc, #56]	; (80038ec <I2C_TransferConfig+0x68>)
 80038b4:	430a      	orrs	r2, r1
 80038b6:	43d2      	mvns	r2, r2
 80038b8:	401a      	ands	r2, r3
 80038ba:	0011      	movs	r1, r2
 80038bc:	193b      	adds	r3, r7, r4
 80038be:	881b      	ldrh	r3, [r3, #0]
 80038c0:	059b      	lsls	r3, r3, #22
 80038c2:	0d9a      	lsrs	r2, r3, #22
 80038c4:	183b      	adds	r3, r7, r0
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	0418      	lsls	r0, r3, #16
 80038ca:	23ff      	movs	r3, #255	; 0xff
 80038cc:	041b      	lsls	r3, r3, #16
 80038ce:	4003      	ands	r3, r0
 80038d0:	431a      	orrs	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	431a      	orrs	r2, r3
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	431a      	orrs	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                 I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80038e2:	46c0      	nop			; (mov r8, r8)
 80038e4:	46bd      	mov	sp, r7
 80038e6:	b005      	add	sp, #20
 80038e8:	bd90      	pop	{r4, r7, pc}
 80038ea:	46c0      	nop			; (mov r8, r8)
 80038ec:	03ff63ff 	.word	0x03ff63ff

080038f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2241      	movs	r2, #65	; 0x41
 80038fe:	5c9b      	ldrb	r3, [r3, r2]
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b20      	cmp	r3, #32
 8003904:	d138      	bne.n	8003978 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2240      	movs	r2, #64	; 0x40
 800390a:	5c9b      	ldrb	r3, [r3, r2]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003910:	2302      	movs	r3, #2
 8003912:	e032      	b.n	800397a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2240      	movs	r2, #64	; 0x40
 8003918:	2101      	movs	r1, #1
 800391a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2241      	movs	r2, #65	; 0x41
 8003920:	2124      	movs	r1, #36	; 0x24
 8003922:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2101      	movs	r1, #1
 8003930:	438a      	bics	r2, r1
 8003932:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4911      	ldr	r1, [pc, #68]	; (8003984 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003940:	400a      	ands	r2, r1
 8003942:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6819      	ldr	r1, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2101      	movs	r1, #1
 8003960:	430a      	orrs	r2, r1
 8003962:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2241      	movs	r2, #65	; 0x41
 8003968:	2120      	movs	r1, #32
 800396a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2240      	movs	r2, #64	; 0x40
 8003970:	2100      	movs	r1, #0
 8003972:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003974:	2300      	movs	r3, #0
 8003976:	e000      	b.n	800397a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003978:	2302      	movs	r3, #2
  }
}
 800397a:	0018      	movs	r0, r3
 800397c:	46bd      	mov	sp, r7
 800397e:	b002      	add	sp, #8
 8003980:	bd80      	pop	{r7, pc}
 8003982:	46c0      	nop			; (mov r8, r8)
 8003984:	ffffefff 	.word	0xffffefff

08003988 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2241      	movs	r2, #65	; 0x41
 8003996:	5c9b      	ldrb	r3, [r3, r2]
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b20      	cmp	r3, #32
 800399c:	d139      	bne.n	8003a12 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2240      	movs	r2, #64	; 0x40
 80039a2:	5c9b      	ldrb	r3, [r3, r2]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039a8:	2302      	movs	r3, #2
 80039aa:	e033      	b.n	8003a14 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2240      	movs	r2, #64	; 0x40
 80039b0:	2101      	movs	r1, #1
 80039b2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2241      	movs	r2, #65	; 0x41
 80039b8:	2124      	movs	r1, #36	; 0x24
 80039ba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2101      	movs	r1, #1
 80039c8:	438a      	bics	r2, r1
 80039ca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4a11      	ldr	r2, [pc, #68]	; (8003a1c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80039d8:	4013      	ands	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	021b      	lsls	r3, r3, #8
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2101      	movs	r1, #1
 80039fa:	430a      	orrs	r2, r1
 80039fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2241      	movs	r2, #65	; 0x41
 8003a02:	2120      	movs	r1, #32
 8003a04:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2240      	movs	r2, #64	; 0x40
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	e000      	b.n	8003a14 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a12:	2302      	movs	r3, #2
  }
}
 8003a14:	0018      	movs	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	b004      	add	sp, #16
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	fffff0ff 	.word	0xfffff0ff

08003a20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003a28:	4b19      	ldr	r3, [pc, #100]	; (8003a90 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a19      	ldr	r2, [pc, #100]	; (8003a94 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003a2e:	4013      	ands	r3, r2
 8003a30:	0019      	movs	r1, r3
 8003a32:	4b17      	ldr	r3, [pc, #92]	; (8003a90 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	2380      	movs	r3, #128	; 0x80
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d11f      	bne.n	8003a84 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003a44:	4b14      	ldr	r3, [pc, #80]	; (8003a98 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	0013      	movs	r3, r2
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	189b      	adds	r3, r3, r2
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	4912      	ldr	r1, [pc, #72]	; (8003a9c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003a52:	0018      	movs	r0, r3
 8003a54:	f7fc fb5c 	bl	8000110 <__udivsi3>
 8003a58:	0003      	movs	r3, r0
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a5e:	e008      	b.n	8003a72 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	e001      	b.n	8003a72 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e009      	b.n	8003a86 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a72:	4b07      	ldr	r3, [pc, #28]	; (8003a90 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003a74:	695a      	ldr	r2, [r3, #20]
 8003a76:	2380      	movs	r3, #128	; 0x80
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	401a      	ands	r2, r3
 8003a7c:	2380      	movs	r3, #128	; 0x80
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d0ed      	beq.n	8003a60 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	0018      	movs	r0, r3
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	b004      	add	sp, #16
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	46c0      	nop			; (mov r8, r8)
 8003a90:	40007000 	.word	0x40007000
 8003a94:	fffff9ff 	.word	0xfffff9ff
 8003a98:	2000000c 	.word	0x2000000c
 8003a9c:	000f4240 	.word	0x000f4240

08003aa0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003aa4:	4b03      	ldr	r3, [pc, #12]	; (8003ab4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	23e0      	movs	r3, #224	; 0xe0
 8003aaa:	01db      	lsls	r3, r3, #7
 8003aac:	4013      	ands	r3, r2
}
 8003aae:	0018      	movs	r0, r3
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40021000 	.word	0x40021000

08003ab8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b088      	sub	sp, #32
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e2f9      	b.n	80040be <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	d100      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x1e>
 8003ad4:	e07c      	b.n	8003bd0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ad6:	4bc3      	ldr	r3, [pc, #780]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	2238      	movs	r2, #56	; 0x38
 8003adc:	4013      	ands	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ae0:	4bc0      	ldr	r3, [pc, #768]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	2203      	movs	r2, #3
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	2b10      	cmp	r3, #16
 8003aee:	d102      	bne.n	8003af6 <HAL_RCC_OscConfig+0x3e>
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	2b03      	cmp	r3, #3
 8003af4:	d002      	beq.n	8003afc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	2b08      	cmp	r3, #8
 8003afa:	d10b      	bne.n	8003b14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003afc:	4bb9      	ldr	r3, [pc, #740]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	2380      	movs	r3, #128	; 0x80
 8003b02:	029b      	lsls	r3, r3, #10
 8003b04:	4013      	ands	r3, r2
 8003b06:	d062      	beq.n	8003bce <HAL_RCC_OscConfig+0x116>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d15e      	bne.n	8003bce <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e2d4      	b.n	80040be <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	2380      	movs	r3, #128	; 0x80
 8003b1a:	025b      	lsls	r3, r3, #9
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d107      	bne.n	8003b30 <HAL_RCC_OscConfig+0x78>
 8003b20:	4bb0      	ldr	r3, [pc, #704]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	4baf      	ldr	r3, [pc, #700]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003b26:	2180      	movs	r1, #128	; 0x80
 8003b28:	0249      	lsls	r1, r1, #9
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	e020      	b.n	8003b72 <HAL_RCC_OscConfig+0xba>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	23a0      	movs	r3, #160	; 0xa0
 8003b36:	02db      	lsls	r3, r3, #11
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d10e      	bne.n	8003b5a <HAL_RCC_OscConfig+0xa2>
 8003b3c:	4ba9      	ldr	r3, [pc, #676]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	4ba8      	ldr	r3, [pc, #672]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003b42:	2180      	movs	r1, #128	; 0x80
 8003b44:	02c9      	lsls	r1, r1, #11
 8003b46:	430a      	orrs	r2, r1
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	4ba6      	ldr	r3, [pc, #664]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	4ba5      	ldr	r3, [pc, #660]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003b50:	2180      	movs	r1, #128	; 0x80
 8003b52:	0249      	lsls	r1, r1, #9
 8003b54:	430a      	orrs	r2, r1
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	e00b      	b.n	8003b72 <HAL_RCC_OscConfig+0xba>
 8003b5a:	4ba2      	ldr	r3, [pc, #648]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	4ba1      	ldr	r3, [pc, #644]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003b60:	49a1      	ldr	r1, [pc, #644]	; (8003de8 <HAL_RCC_OscConfig+0x330>)
 8003b62:	400a      	ands	r2, r1
 8003b64:	601a      	str	r2, [r3, #0]
 8003b66:	4b9f      	ldr	r3, [pc, #636]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	4b9e      	ldr	r3, [pc, #632]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003b6c:	499f      	ldr	r1, [pc, #636]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003b6e:	400a      	ands	r2, r1
 8003b70:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d014      	beq.n	8003ba4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7a:	f7fe fffb 	bl	8002b74 <HAL_GetTick>
 8003b7e:	0003      	movs	r3, r0
 8003b80:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b84:	f7fe fff6 	bl	8002b74 <HAL_GetTick>
 8003b88:	0002      	movs	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b64      	cmp	r3, #100	; 0x64
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e293      	b.n	80040be <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b96:	4b93      	ldr	r3, [pc, #588]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	2380      	movs	r3, #128	; 0x80
 8003b9c:	029b      	lsls	r3, r3, #10
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	d0f0      	beq.n	8003b84 <HAL_RCC_OscConfig+0xcc>
 8003ba2:	e015      	b.n	8003bd0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba4:	f7fe ffe6 	bl	8002b74 <HAL_GetTick>
 8003ba8:	0003      	movs	r3, r0
 8003baa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bac:	e008      	b.n	8003bc0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bae:	f7fe ffe1 	bl	8002b74 <HAL_GetTick>
 8003bb2:	0002      	movs	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b64      	cmp	r3, #100	; 0x64
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e27e      	b.n	80040be <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bc0:	4b88      	ldr	r3, [pc, #544]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	2380      	movs	r3, #128	; 0x80
 8003bc6:	029b      	lsls	r3, r3, #10
 8003bc8:	4013      	ands	r3, r2
 8003bca:	d1f0      	bne.n	8003bae <HAL_RCC_OscConfig+0xf6>
 8003bcc:	e000      	b.n	8003bd0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bce:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	d100      	bne.n	8003bdc <HAL_RCC_OscConfig+0x124>
 8003bda:	e099      	b.n	8003d10 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bdc:	4b81      	ldr	r3, [pc, #516]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2238      	movs	r2, #56	; 0x38
 8003be2:	4013      	ands	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003be6:	4b7f      	ldr	r3, [pc, #508]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	2203      	movs	r2, #3
 8003bec:	4013      	ands	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	2b10      	cmp	r3, #16
 8003bf4:	d102      	bne.n	8003bfc <HAL_RCC_OscConfig+0x144>
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d002      	beq.n	8003c02 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d135      	bne.n	8003c6e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c02:	4b78      	ldr	r3, [pc, #480]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	2380      	movs	r3, #128	; 0x80
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	d005      	beq.n	8003c1a <HAL_RCC_OscConfig+0x162>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e251      	b.n	80040be <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c1a:	4b72      	ldr	r3, [pc, #456]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	4a74      	ldr	r2, [pc, #464]	; (8003df0 <HAL_RCC_OscConfig+0x338>)
 8003c20:	4013      	ands	r3, r2
 8003c22:	0019      	movs	r1, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	021a      	lsls	r2, r3, #8
 8003c2a:	4b6e      	ldr	r3, [pc, #440]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d112      	bne.n	8003c5c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003c36:	4b6b      	ldr	r3, [pc, #428]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a6e      	ldr	r2, [pc, #440]	; (8003df4 <HAL_RCC_OscConfig+0x33c>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	0019      	movs	r1, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	691a      	ldr	r2, [r3, #16]
 8003c44:	4b67      	ldr	r3, [pc, #412]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003c46:	430a      	orrs	r2, r1
 8003c48:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003c4a:	4b66      	ldr	r3, [pc, #408]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	0adb      	lsrs	r3, r3, #11
 8003c50:	2207      	movs	r2, #7
 8003c52:	4013      	ands	r3, r2
 8003c54:	4a68      	ldr	r2, [pc, #416]	; (8003df8 <HAL_RCC_OscConfig+0x340>)
 8003c56:	40da      	lsrs	r2, r3
 8003c58:	4b68      	ldr	r3, [pc, #416]	; (8003dfc <HAL_RCC_OscConfig+0x344>)
 8003c5a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003c5c:	4b68      	ldr	r3, [pc, #416]	; (8003e00 <HAL_RCC_OscConfig+0x348>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	0018      	movs	r0, r3
 8003c62:	f7fe ff2b 	bl	8002abc <HAL_InitTick>
 8003c66:	1e03      	subs	r3, r0, #0
 8003c68:	d051      	beq.n	8003d0e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e227      	b.n	80040be <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d030      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003c76:	4b5b      	ldr	r3, [pc, #364]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a5e      	ldr	r2, [pc, #376]	; (8003df4 <HAL_RCC_OscConfig+0x33c>)
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	0019      	movs	r1, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	691a      	ldr	r2, [r3, #16]
 8003c84:	4b57      	ldr	r3, [pc, #348]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003c86:	430a      	orrs	r2, r1
 8003c88:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003c8a:	4b56      	ldr	r3, [pc, #344]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	4b55      	ldr	r3, [pc, #340]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003c90:	2180      	movs	r1, #128	; 0x80
 8003c92:	0049      	lsls	r1, r1, #1
 8003c94:	430a      	orrs	r2, r1
 8003c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c98:	f7fe ff6c 	bl	8002b74 <HAL_GetTick>
 8003c9c:	0003      	movs	r3, r0
 8003c9e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ca2:	f7fe ff67 	bl	8002b74 <HAL_GetTick>
 8003ca6:	0002      	movs	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e204      	b.n	80040be <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cb4:	4b4b      	ldr	r3, [pc, #300]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	2380      	movs	r3, #128	; 0x80
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	d0f0      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc0:	4b48      	ldr	r3, [pc, #288]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	4a4a      	ldr	r2, [pc, #296]	; (8003df0 <HAL_RCC_OscConfig+0x338>)
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	0019      	movs	r1, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	021a      	lsls	r2, r3, #8
 8003cd0:	4b44      	ldr	r3, [pc, #272]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	605a      	str	r2, [r3, #4]
 8003cd6:	e01b      	b.n	8003d10 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003cd8:	4b42      	ldr	r3, [pc, #264]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	4b41      	ldr	r3, [pc, #260]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003cde:	4949      	ldr	r1, [pc, #292]	; (8003e04 <HAL_RCC_OscConfig+0x34c>)
 8003ce0:	400a      	ands	r2, r1
 8003ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce4:	f7fe ff46 	bl	8002b74 <HAL_GetTick>
 8003ce8:	0003      	movs	r3, r0
 8003cea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cec:	e008      	b.n	8003d00 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cee:	f7fe ff41 	bl	8002b74 <HAL_GetTick>
 8003cf2:	0002      	movs	r2, r0
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e1de      	b.n	80040be <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d00:	4b38      	ldr	r3, [pc, #224]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	2380      	movs	r3, #128	; 0x80
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	4013      	ands	r3, r2
 8003d0a:	d1f0      	bne.n	8003cee <HAL_RCC_OscConfig+0x236>
 8003d0c:	e000      	b.n	8003d10 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d0e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2208      	movs	r2, #8
 8003d16:	4013      	ands	r3, r2
 8003d18:	d047      	beq.n	8003daa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003d1a:	4b32      	ldr	r3, [pc, #200]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	2238      	movs	r2, #56	; 0x38
 8003d20:	4013      	ands	r3, r2
 8003d22:	2b18      	cmp	r3, #24
 8003d24:	d10a      	bne.n	8003d3c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003d26:	4b2f      	ldr	r3, [pc, #188]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	d03c      	beq.n	8003daa <HAL_RCC_OscConfig+0x2f2>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d138      	bne.n	8003daa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e1c0      	b.n	80040be <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d019      	beq.n	8003d78 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003d44:	4b27      	ldr	r3, [pc, #156]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003d46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003d48:	4b26      	ldr	r3, [pc, #152]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d50:	f7fe ff10 	bl	8002b74 <HAL_GetTick>
 8003d54:	0003      	movs	r3, r0
 8003d56:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d5a:	f7fe ff0b 	bl	8002b74 <HAL_GetTick>
 8003d5e:	0002      	movs	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e1a8      	b.n	80040be <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d6c:	4b1d      	ldr	r3, [pc, #116]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d70:	2202      	movs	r2, #2
 8003d72:	4013      	ands	r3, r2
 8003d74:	d0f1      	beq.n	8003d5a <HAL_RCC_OscConfig+0x2a2>
 8003d76:	e018      	b.n	8003daa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003d78:	4b1a      	ldr	r3, [pc, #104]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003d7a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003d7c:	4b19      	ldr	r3, [pc, #100]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003d7e:	2101      	movs	r1, #1
 8003d80:	438a      	bics	r2, r1
 8003d82:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d84:	f7fe fef6 	bl	8002b74 <HAL_GetTick>
 8003d88:	0003      	movs	r3, r0
 8003d8a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d8e:	f7fe fef1 	bl	8002b74 <HAL_GetTick>
 8003d92:	0002      	movs	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e18e      	b.n	80040be <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003da0:	4b10      	ldr	r3, [pc, #64]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da4:	2202      	movs	r2, #2
 8003da6:	4013      	ands	r3, r2
 8003da8:	d1f1      	bne.n	8003d8e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2204      	movs	r2, #4
 8003db0:	4013      	ands	r3, r2
 8003db2:	d100      	bne.n	8003db6 <HAL_RCC_OscConfig+0x2fe>
 8003db4:	e0c6      	b.n	8003f44 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003db6:	231f      	movs	r3, #31
 8003db8:	18fb      	adds	r3, r7, r3
 8003dba:	2200      	movs	r2, #0
 8003dbc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003dbe:	4b09      	ldr	r3, [pc, #36]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	2238      	movs	r2, #56	; 0x38
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	2b20      	cmp	r3, #32
 8003dc8:	d11e      	bne.n	8003e08 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003dca:	4b06      	ldr	r3, [pc, #24]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dce:	2202      	movs	r2, #2
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	d100      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x31e>
 8003dd4:	e0b6      	b.n	8003f44 <HAL_RCC_OscConfig+0x48c>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d000      	beq.n	8003de0 <HAL_RCC_OscConfig+0x328>
 8003dde:	e0b1      	b.n	8003f44 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e16c      	b.n	80040be <HAL_RCC_OscConfig+0x606>
 8003de4:	40021000 	.word	0x40021000
 8003de8:	fffeffff 	.word	0xfffeffff
 8003dec:	fffbffff 	.word	0xfffbffff
 8003df0:	ffff80ff 	.word	0xffff80ff
 8003df4:	ffffc7ff 	.word	0xffffc7ff
 8003df8:	00f42400 	.word	0x00f42400
 8003dfc:	2000000c 	.word	0x2000000c
 8003e00:	20000010 	.word	0x20000010
 8003e04:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e08:	4baf      	ldr	r3, [pc, #700]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 8003e0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e0c:	2380      	movs	r3, #128	; 0x80
 8003e0e:	055b      	lsls	r3, r3, #21
 8003e10:	4013      	ands	r3, r2
 8003e12:	d101      	bne.n	8003e18 <HAL_RCC_OscConfig+0x360>
 8003e14:	2301      	movs	r3, #1
 8003e16:	e000      	b.n	8003e1a <HAL_RCC_OscConfig+0x362>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d011      	beq.n	8003e42 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003e1e:	4baa      	ldr	r3, [pc, #680]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 8003e20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e22:	4ba9      	ldr	r3, [pc, #676]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 8003e24:	2180      	movs	r1, #128	; 0x80
 8003e26:	0549      	lsls	r1, r1, #21
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	63da      	str	r2, [r3, #60]	; 0x3c
 8003e2c:	4ba6      	ldr	r3, [pc, #664]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 8003e2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e30:	2380      	movs	r3, #128	; 0x80
 8003e32:	055b      	lsls	r3, r3, #21
 8003e34:	4013      	ands	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003e3a:	231f      	movs	r3, #31
 8003e3c:	18fb      	adds	r3, r7, r3
 8003e3e:	2201      	movs	r2, #1
 8003e40:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e42:	4ba2      	ldr	r3, [pc, #648]	; (80040cc <HAL_RCC_OscConfig+0x614>)
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	2380      	movs	r3, #128	; 0x80
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	d11a      	bne.n	8003e84 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e4e:	4b9f      	ldr	r3, [pc, #636]	; (80040cc <HAL_RCC_OscConfig+0x614>)
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	4b9e      	ldr	r3, [pc, #632]	; (80040cc <HAL_RCC_OscConfig+0x614>)
 8003e54:	2180      	movs	r1, #128	; 0x80
 8003e56:	0049      	lsls	r1, r1, #1
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003e5c:	f7fe fe8a 	bl	8002b74 <HAL_GetTick>
 8003e60:	0003      	movs	r3, r0
 8003e62:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e64:	e008      	b.n	8003e78 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e66:	f7fe fe85 	bl	8002b74 <HAL_GetTick>
 8003e6a:	0002      	movs	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e122      	b.n	80040be <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e78:	4b94      	ldr	r3, [pc, #592]	; (80040cc <HAL_RCC_OscConfig+0x614>)
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	2380      	movs	r3, #128	; 0x80
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	4013      	ands	r3, r2
 8003e82:	d0f0      	beq.n	8003e66 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d106      	bne.n	8003e9a <HAL_RCC_OscConfig+0x3e2>
 8003e8c:	4b8e      	ldr	r3, [pc, #568]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 8003e8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e90:	4b8d      	ldr	r3, [pc, #564]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 8003e92:	2101      	movs	r1, #1
 8003e94:	430a      	orrs	r2, r1
 8003e96:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e98:	e01c      	b.n	8003ed4 <HAL_RCC_OscConfig+0x41c>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	2b05      	cmp	r3, #5
 8003ea0:	d10c      	bne.n	8003ebc <HAL_RCC_OscConfig+0x404>
 8003ea2:	4b89      	ldr	r3, [pc, #548]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 8003ea4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ea6:	4b88      	ldr	r3, [pc, #544]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 8003ea8:	2104      	movs	r1, #4
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	65da      	str	r2, [r3, #92]	; 0x5c
 8003eae:	4b86      	ldr	r3, [pc, #536]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 8003eb0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003eb2:	4b85      	ldr	r3, [pc, #532]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	65da      	str	r2, [r3, #92]	; 0x5c
 8003eba:	e00b      	b.n	8003ed4 <HAL_RCC_OscConfig+0x41c>
 8003ebc:	4b82      	ldr	r3, [pc, #520]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 8003ebe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ec0:	4b81      	ldr	r3, [pc, #516]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	438a      	bics	r2, r1
 8003ec6:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ec8:	4b7f      	ldr	r3, [pc, #508]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 8003eca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ecc:	4b7e      	ldr	r3, [pc, #504]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 8003ece:	2104      	movs	r1, #4
 8003ed0:	438a      	bics	r2, r1
 8003ed2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d014      	beq.n	8003f06 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003edc:	f7fe fe4a 	bl	8002b74 <HAL_GetTick>
 8003ee0:	0003      	movs	r3, r0
 8003ee2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ee4:	e009      	b.n	8003efa <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee6:	f7fe fe45 	bl	8002b74 <HAL_GetTick>
 8003eea:	0002      	movs	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	4a77      	ldr	r2, [pc, #476]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e0e1      	b.n	80040be <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003efa:	4b73      	ldr	r3, [pc, #460]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 8003efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efe:	2202      	movs	r2, #2
 8003f00:	4013      	ands	r3, r2
 8003f02:	d0f0      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x42e>
 8003f04:	e013      	b.n	8003f2e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f06:	f7fe fe35 	bl	8002b74 <HAL_GetTick>
 8003f0a:	0003      	movs	r3, r0
 8003f0c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f0e:	e009      	b.n	8003f24 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f10:	f7fe fe30 	bl	8002b74 <HAL_GetTick>
 8003f14:	0002      	movs	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	4a6d      	ldr	r2, [pc, #436]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e0cc      	b.n	80040be <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f24:	4b68      	ldr	r3, [pc, #416]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 8003f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f28:	2202      	movs	r2, #2
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	d1f0      	bne.n	8003f10 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003f2e:	231f      	movs	r3, #31
 8003f30:	18fb      	adds	r3, r7, r3
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d105      	bne.n	8003f44 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003f38:	4b63      	ldr	r3, [pc, #396]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 8003f3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f3c:	4b62      	ldr	r3, [pc, #392]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 8003f3e:	4965      	ldr	r1, [pc, #404]	; (80040d4 <HAL_RCC_OscConfig+0x61c>)
 8003f40:	400a      	ands	r2, r1
 8003f42:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d100      	bne.n	8003f4e <HAL_RCC_OscConfig+0x496>
 8003f4c:	e0b6      	b.n	80040bc <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f4e:	4b5e      	ldr	r3, [pc, #376]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	2238      	movs	r2, #56	; 0x38
 8003f54:	4013      	ands	r3, r2
 8003f56:	2b10      	cmp	r3, #16
 8003f58:	d100      	bne.n	8003f5c <HAL_RCC_OscConfig+0x4a4>
 8003f5a:	e07e      	b.n	800405a <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	69db      	ldr	r3, [r3, #28]
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d153      	bne.n	800400c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f64:	4b58      	ldr	r3, [pc, #352]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	4b57      	ldr	r3, [pc, #348]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 8003f6a:	495b      	ldr	r1, [pc, #364]	; (80040d8 <HAL_RCC_OscConfig+0x620>)
 8003f6c:	400a      	ands	r2, r1
 8003f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f70:	f7fe fe00 	bl	8002b74 <HAL_GetTick>
 8003f74:	0003      	movs	r3, r0
 8003f76:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f78:	e008      	b.n	8003f8c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f7a:	f7fe fdfb 	bl	8002b74 <HAL_GetTick>
 8003f7e:	0002      	movs	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e098      	b.n	80040be <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f8c:	4b4e      	ldr	r3, [pc, #312]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	2380      	movs	r3, #128	; 0x80
 8003f92:	049b      	lsls	r3, r3, #18
 8003f94:	4013      	ands	r3, r2
 8003f96:	d1f0      	bne.n	8003f7a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f98:	4b4b      	ldr	r3, [pc, #300]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	4a4f      	ldr	r2, [pc, #316]	; (80040dc <HAL_RCC_OscConfig+0x624>)
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	0019      	movs	r1, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1a      	ldr	r2, [r3, #32]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb0:	021b      	lsls	r3, r3, #8
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	4b41      	ldr	r3, [pc, #260]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fc6:	4b40      	ldr	r3, [pc, #256]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	4b3f      	ldr	r3, [pc, #252]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 8003fcc:	2180      	movs	r1, #128	; 0x80
 8003fce:	0449      	lsls	r1, r1, #17
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003fd4:	4b3c      	ldr	r3, [pc, #240]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	4b3b      	ldr	r3, [pc, #236]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 8003fda:	2180      	movs	r1, #128	; 0x80
 8003fdc:	0549      	lsls	r1, r1, #21
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe2:	f7fe fdc7 	bl	8002b74 <HAL_GetTick>
 8003fe6:	0003      	movs	r3, r0
 8003fe8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fec:	f7fe fdc2 	bl	8002b74 <HAL_GetTick>
 8003ff0:	0002      	movs	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e05f      	b.n	80040be <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ffe:	4b32      	ldr	r3, [pc, #200]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	2380      	movs	r3, #128	; 0x80
 8004004:	049b      	lsls	r3, r3, #18
 8004006:	4013      	ands	r3, r2
 8004008:	d0f0      	beq.n	8003fec <HAL_RCC_OscConfig+0x534>
 800400a:	e057      	b.n	80040bc <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800400c:	4b2e      	ldr	r3, [pc, #184]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	4b2d      	ldr	r3, [pc, #180]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 8004012:	4931      	ldr	r1, [pc, #196]	; (80040d8 <HAL_RCC_OscConfig+0x620>)
 8004014:	400a      	ands	r2, r1
 8004016:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004018:	4b2b      	ldr	r3, [pc, #172]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	4b2a      	ldr	r3, [pc, #168]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 800401e:	2103      	movs	r1, #3
 8004020:	438a      	bics	r2, r1
 8004022:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004024:	4b28      	ldr	r3, [pc, #160]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 8004026:	68da      	ldr	r2, [r3, #12]
 8004028:	4b27      	ldr	r3, [pc, #156]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 800402a:	492d      	ldr	r1, [pc, #180]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 800402c:	400a      	ands	r2, r1
 800402e:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004030:	f7fe fda0 	bl	8002b74 <HAL_GetTick>
 8004034:	0003      	movs	r3, r0
 8004036:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004038:	e008      	b.n	800404c <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800403a:	f7fe fd9b 	bl	8002b74 <HAL_GetTick>
 800403e:	0002      	movs	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e038      	b.n	80040be <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800404c:	4b1e      	ldr	r3, [pc, #120]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	2380      	movs	r3, #128	; 0x80
 8004052:	049b      	lsls	r3, r3, #18
 8004054:	4013      	ands	r3, r2
 8004056:	d1f0      	bne.n	800403a <HAL_RCC_OscConfig+0x582>
 8004058:	e030      	b.n	80040bc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d101      	bne.n	8004066 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e02b      	b.n	80040be <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004066:	4b18      	ldr	r3, [pc, #96]	; (80040c8 <HAL_RCC_OscConfig+0x610>)
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	2203      	movs	r2, #3
 8004070:	401a      	ands	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	429a      	cmp	r2, r3
 8004078:	d11e      	bne.n	80040b8 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	2270      	movs	r2, #112	; 0x70
 800407e:	401a      	ands	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004084:	429a      	cmp	r2, r3
 8004086:	d117      	bne.n	80040b8 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	23fe      	movs	r3, #254	; 0xfe
 800408c:	01db      	lsls	r3, r3, #7
 800408e:	401a      	ands	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004094:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004096:	429a      	cmp	r2, r3
 8004098:	d10e      	bne.n	80040b8 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	23f8      	movs	r3, #248	; 0xf8
 800409e:	039b      	lsls	r3, r3, #14
 80040a0:	401a      	ands	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d106      	bne.n	80040b8 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	0f5b      	lsrs	r3, r3, #29
 80040ae:	075a      	lsls	r2, r3, #29
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d001      	beq.n	80040bc <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e000      	b.n	80040be <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	0018      	movs	r0, r3
 80040c0:	46bd      	mov	sp, r7
 80040c2:	b008      	add	sp, #32
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	46c0      	nop			; (mov r8, r8)
 80040c8:	40021000 	.word	0x40021000
 80040cc:	40007000 	.word	0x40007000
 80040d0:	00001388 	.word	0x00001388
 80040d4:	efffffff 	.word	0xefffffff
 80040d8:	feffffff 	.word	0xfeffffff
 80040dc:	1fc1808c 	.word	0x1fc1808c
 80040e0:	effeffff 	.word	0xeffeffff

080040e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e0e9      	b.n	80042cc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040f8:	4b76      	ldr	r3, [pc, #472]	; (80042d4 <HAL_RCC_ClockConfig+0x1f0>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2207      	movs	r2, #7
 80040fe:	4013      	ands	r3, r2
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d91e      	bls.n	8004144 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004106:	4b73      	ldr	r3, [pc, #460]	; (80042d4 <HAL_RCC_ClockConfig+0x1f0>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2207      	movs	r2, #7
 800410c:	4393      	bics	r3, r2
 800410e:	0019      	movs	r1, r3
 8004110:	4b70      	ldr	r3, [pc, #448]	; (80042d4 <HAL_RCC_ClockConfig+0x1f0>)
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	430a      	orrs	r2, r1
 8004116:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004118:	f7fe fd2c 	bl	8002b74 <HAL_GetTick>
 800411c:	0003      	movs	r3, r0
 800411e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004120:	e009      	b.n	8004136 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004122:	f7fe fd27 	bl	8002b74 <HAL_GetTick>
 8004126:	0002      	movs	r2, r0
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	4a6a      	ldr	r2, [pc, #424]	; (80042d8 <HAL_RCC_ClockConfig+0x1f4>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e0ca      	b.n	80042cc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004136:	4b67      	ldr	r3, [pc, #412]	; (80042d4 <HAL_RCC_ClockConfig+0x1f0>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2207      	movs	r2, #7
 800413c:	4013      	ands	r3, r2
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	429a      	cmp	r2, r3
 8004142:	d1ee      	bne.n	8004122 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2202      	movs	r2, #2
 800414a:	4013      	ands	r3, r2
 800414c:	d015      	beq.n	800417a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2204      	movs	r2, #4
 8004154:	4013      	ands	r3, r2
 8004156:	d006      	beq.n	8004166 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004158:	4b60      	ldr	r3, [pc, #384]	; (80042dc <HAL_RCC_ClockConfig+0x1f8>)
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	4b5f      	ldr	r3, [pc, #380]	; (80042dc <HAL_RCC_ClockConfig+0x1f8>)
 800415e:	21e0      	movs	r1, #224	; 0xe0
 8004160:	01c9      	lsls	r1, r1, #7
 8004162:	430a      	orrs	r2, r1
 8004164:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004166:	4b5d      	ldr	r3, [pc, #372]	; (80042dc <HAL_RCC_ClockConfig+0x1f8>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	4a5d      	ldr	r2, [pc, #372]	; (80042e0 <HAL_RCC_ClockConfig+0x1fc>)
 800416c:	4013      	ands	r3, r2
 800416e:	0019      	movs	r1, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	4b59      	ldr	r3, [pc, #356]	; (80042dc <HAL_RCC_ClockConfig+0x1f8>)
 8004176:	430a      	orrs	r2, r1
 8004178:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2201      	movs	r2, #1
 8004180:	4013      	ands	r3, r2
 8004182:	d057      	beq.n	8004234 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d107      	bne.n	800419c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800418c:	4b53      	ldr	r3, [pc, #332]	; (80042dc <HAL_RCC_ClockConfig+0x1f8>)
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	2380      	movs	r3, #128	; 0x80
 8004192:	029b      	lsls	r3, r3, #10
 8004194:	4013      	ands	r3, r2
 8004196:	d12b      	bne.n	80041f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e097      	b.n	80042cc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d107      	bne.n	80041b4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041a4:	4b4d      	ldr	r3, [pc, #308]	; (80042dc <HAL_RCC_ClockConfig+0x1f8>)
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	2380      	movs	r3, #128	; 0x80
 80041aa:	049b      	lsls	r3, r3, #18
 80041ac:	4013      	ands	r3, r2
 80041ae:	d11f      	bne.n	80041f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e08b      	b.n	80042cc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d107      	bne.n	80041cc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041bc:	4b47      	ldr	r3, [pc, #284]	; (80042dc <HAL_RCC_ClockConfig+0x1f8>)
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	2380      	movs	r3, #128	; 0x80
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	4013      	ands	r3, r2
 80041c6:	d113      	bne.n	80041f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e07f      	b.n	80042cc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	2b03      	cmp	r3, #3
 80041d2:	d106      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041d4:	4b41      	ldr	r3, [pc, #260]	; (80042dc <HAL_RCC_ClockConfig+0x1f8>)
 80041d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041d8:	2202      	movs	r2, #2
 80041da:	4013      	ands	r3, r2
 80041dc:	d108      	bne.n	80041f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e074      	b.n	80042cc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041e2:	4b3e      	ldr	r3, [pc, #248]	; (80042dc <HAL_RCC_ClockConfig+0x1f8>)
 80041e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e6:	2202      	movs	r2, #2
 80041e8:	4013      	ands	r3, r2
 80041ea:	d101      	bne.n	80041f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e06d      	b.n	80042cc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041f0:	4b3a      	ldr	r3, [pc, #232]	; (80042dc <HAL_RCC_ClockConfig+0x1f8>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	2207      	movs	r2, #7
 80041f6:	4393      	bics	r3, r2
 80041f8:	0019      	movs	r1, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	4b37      	ldr	r3, [pc, #220]	; (80042dc <HAL_RCC_ClockConfig+0x1f8>)
 8004200:	430a      	orrs	r2, r1
 8004202:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004204:	f7fe fcb6 	bl	8002b74 <HAL_GetTick>
 8004208:	0003      	movs	r3, r0
 800420a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800420c:	e009      	b.n	8004222 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800420e:	f7fe fcb1 	bl	8002b74 <HAL_GetTick>
 8004212:	0002      	movs	r2, r0
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	4a2f      	ldr	r2, [pc, #188]	; (80042d8 <HAL_RCC_ClockConfig+0x1f4>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e054      	b.n	80042cc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004222:	4b2e      	ldr	r3, [pc, #184]	; (80042dc <HAL_RCC_ClockConfig+0x1f8>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	2238      	movs	r2, #56	; 0x38
 8004228:	401a      	ands	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	429a      	cmp	r2, r3
 8004232:	d1ec      	bne.n	800420e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004234:	4b27      	ldr	r3, [pc, #156]	; (80042d4 <HAL_RCC_ClockConfig+0x1f0>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2207      	movs	r2, #7
 800423a:	4013      	ands	r3, r2
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	429a      	cmp	r2, r3
 8004240:	d21e      	bcs.n	8004280 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004242:	4b24      	ldr	r3, [pc, #144]	; (80042d4 <HAL_RCC_ClockConfig+0x1f0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2207      	movs	r2, #7
 8004248:	4393      	bics	r3, r2
 800424a:	0019      	movs	r1, r3
 800424c:	4b21      	ldr	r3, [pc, #132]	; (80042d4 <HAL_RCC_ClockConfig+0x1f0>)
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004254:	f7fe fc8e 	bl	8002b74 <HAL_GetTick>
 8004258:	0003      	movs	r3, r0
 800425a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800425c:	e009      	b.n	8004272 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800425e:	f7fe fc89 	bl	8002b74 <HAL_GetTick>
 8004262:	0002      	movs	r2, r0
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	4a1b      	ldr	r2, [pc, #108]	; (80042d8 <HAL_RCC_ClockConfig+0x1f4>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e02c      	b.n	80042cc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004272:	4b18      	ldr	r3, [pc, #96]	; (80042d4 <HAL_RCC_ClockConfig+0x1f0>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2207      	movs	r2, #7
 8004278:	4013      	ands	r3, r2
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	429a      	cmp	r2, r3
 800427e:	d1ee      	bne.n	800425e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2204      	movs	r2, #4
 8004286:	4013      	ands	r3, r2
 8004288:	d009      	beq.n	800429e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800428a:	4b14      	ldr	r3, [pc, #80]	; (80042dc <HAL_RCC_ClockConfig+0x1f8>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	4a15      	ldr	r2, [pc, #84]	; (80042e4 <HAL_RCC_ClockConfig+0x200>)
 8004290:	4013      	ands	r3, r2
 8004292:	0019      	movs	r1, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68da      	ldr	r2, [r3, #12]
 8004298:	4b10      	ldr	r3, [pc, #64]	; (80042dc <HAL_RCC_ClockConfig+0x1f8>)
 800429a:	430a      	orrs	r2, r1
 800429c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800429e:	f000 f829 	bl	80042f4 <HAL_RCC_GetSysClockFreq>
 80042a2:	0001      	movs	r1, r0
 80042a4:	4b0d      	ldr	r3, [pc, #52]	; (80042dc <HAL_RCC_ClockConfig+0x1f8>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	0a1b      	lsrs	r3, r3, #8
 80042aa:	220f      	movs	r2, #15
 80042ac:	401a      	ands	r2, r3
 80042ae:	4b0e      	ldr	r3, [pc, #56]	; (80042e8 <HAL_RCC_ClockConfig+0x204>)
 80042b0:	0092      	lsls	r2, r2, #2
 80042b2:	58d3      	ldr	r3, [r2, r3]
 80042b4:	221f      	movs	r2, #31
 80042b6:	4013      	ands	r3, r2
 80042b8:	000a      	movs	r2, r1
 80042ba:	40da      	lsrs	r2, r3
 80042bc:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <HAL_RCC_ClockConfig+0x208>)
 80042be:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80042c0:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <HAL_RCC_ClockConfig+0x20c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	0018      	movs	r0, r3
 80042c6:	f7fe fbf9 	bl	8002abc <HAL_InitTick>
 80042ca:	0003      	movs	r3, r0
}
 80042cc:	0018      	movs	r0, r3
 80042ce:	46bd      	mov	sp, r7
 80042d0:	b004      	add	sp, #16
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40022000 	.word	0x40022000
 80042d8:	00001388 	.word	0x00001388
 80042dc:	40021000 	.word	0x40021000
 80042e0:	fffff0ff 	.word	0xfffff0ff
 80042e4:	ffff8fff 	.word	0xffff8fff
 80042e8:	080060ac 	.word	0x080060ac
 80042ec:	2000000c 	.word	0x2000000c
 80042f0:	20000010 	.word	0x20000010

080042f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042fa:	4b3c      	ldr	r3, [pc, #240]	; (80043ec <HAL_RCC_GetSysClockFreq+0xf8>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	2238      	movs	r2, #56	; 0x38
 8004300:	4013      	ands	r3, r2
 8004302:	d10f      	bne.n	8004324 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004304:	4b39      	ldr	r3, [pc, #228]	; (80043ec <HAL_RCC_GetSysClockFreq+0xf8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	0adb      	lsrs	r3, r3, #11
 800430a:	2207      	movs	r2, #7
 800430c:	4013      	ands	r3, r2
 800430e:	2201      	movs	r2, #1
 8004310:	409a      	lsls	r2, r3
 8004312:	0013      	movs	r3, r2
 8004314:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004316:	6839      	ldr	r1, [r7, #0]
 8004318:	4835      	ldr	r0, [pc, #212]	; (80043f0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800431a:	f7fb fef9 	bl	8000110 <__udivsi3>
 800431e:	0003      	movs	r3, r0
 8004320:	613b      	str	r3, [r7, #16]
 8004322:	e05d      	b.n	80043e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004324:	4b31      	ldr	r3, [pc, #196]	; (80043ec <HAL_RCC_GetSysClockFreq+0xf8>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	2238      	movs	r2, #56	; 0x38
 800432a:	4013      	ands	r3, r2
 800432c:	2b08      	cmp	r3, #8
 800432e:	d102      	bne.n	8004336 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004330:	4b30      	ldr	r3, [pc, #192]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x100>)
 8004332:	613b      	str	r3, [r7, #16]
 8004334:	e054      	b.n	80043e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004336:	4b2d      	ldr	r3, [pc, #180]	; (80043ec <HAL_RCC_GetSysClockFreq+0xf8>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	2238      	movs	r2, #56	; 0x38
 800433c:	4013      	ands	r3, r2
 800433e:	2b10      	cmp	r3, #16
 8004340:	d138      	bne.n	80043b4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004342:	4b2a      	ldr	r3, [pc, #168]	; (80043ec <HAL_RCC_GetSysClockFreq+0xf8>)
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	2203      	movs	r2, #3
 8004348:	4013      	ands	r3, r2
 800434a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800434c:	4b27      	ldr	r3, [pc, #156]	; (80043ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	091b      	lsrs	r3, r3, #4
 8004352:	2207      	movs	r2, #7
 8004354:	4013      	ands	r3, r2
 8004356:	3301      	adds	r3, #1
 8004358:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2b03      	cmp	r3, #3
 800435e:	d10d      	bne.n	800437c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004360:	68b9      	ldr	r1, [r7, #8]
 8004362:	4824      	ldr	r0, [pc, #144]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x100>)
 8004364:	f7fb fed4 	bl	8000110 <__udivsi3>
 8004368:	0003      	movs	r3, r0
 800436a:	0019      	movs	r1, r3
 800436c:	4b1f      	ldr	r3, [pc, #124]	; (80043ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	0a1b      	lsrs	r3, r3, #8
 8004372:	227f      	movs	r2, #127	; 0x7f
 8004374:	4013      	ands	r3, r2
 8004376:	434b      	muls	r3, r1
 8004378:	617b      	str	r3, [r7, #20]
        break;
 800437a:	e00d      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800437c:	68b9      	ldr	r1, [r7, #8]
 800437e:	481c      	ldr	r0, [pc, #112]	; (80043f0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004380:	f7fb fec6 	bl	8000110 <__udivsi3>
 8004384:	0003      	movs	r3, r0
 8004386:	0019      	movs	r1, r3
 8004388:	4b18      	ldr	r3, [pc, #96]	; (80043ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	0a1b      	lsrs	r3, r3, #8
 800438e:	227f      	movs	r2, #127	; 0x7f
 8004390:	4013      	ands	r3, r2
 8004392:	434b      	muls	r3, r1
 8004394:	617b      	str	r3, [r7, #20]
        break;
 8004396:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004398:	4b14      	ldr	r3, [pc, #80]	; (80043ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	0f5b      	lsrs	r3, r3, #29
 800439e:	2207      	movs	r2, #7
 80043a0:	4013      	ands	r3, r2
 80043a2:	3301      	adds	r3, #1
 80043a4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	6978      	ldr	r0, [r7, #20]
 80043aa:	f7fb feb1 	bl	8000110 <__udivsi3>
 80043ae:	0003      	movs	r3, r0
 80043b0:	613b      	str	r3, [r7, #16]
 80043b2:	e015      	b.n	80043e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80043b4:	4b0d      	ldr	r3, [pc, #52]	; (80043ec <HAL_RCC_GetSysClockFreq+0xf8>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	2238      	movs	r2, #56	; 0x38
 80043ba:	4013      	ands	r3, r2
 80043bc:	2b20      	cmp	r3, #32
 80043be:	d103      	bne.n	80043c8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80043c0:	2380      	movs	r3, #128	; 0x80
 80043c2:	021b      	lsls	r3, r3, #8
 80043c4:	613b      	str	r3, [r7, #16]
 80043c6:	e00b      	b.n	80043e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80043c8:	4b08      	ldr	r3, [pc, #32]	; (80043ec <HAL_RCC_GetSysClockFreq+0xf8>)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	2238      	movs	r2, #56	; 0x38
 80043ce:	4013      	ands	r3, r2
 80043d0:	2b18      	cmp	r3, #24
 80043d2:	d103      	bne.n	80043dc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80043d4:	23fa      	movs	r3, #250	; 0xfa
 80043d6:	01db      	lsls	r3, r3, #7
 80043d8:	613b      	str	r3, [r7, #16]
 80043da:	e001      	b.n	80043e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80043dc:	2300      	movs	r3, #0
 80043de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80043e0:	693b      	ldr	r3, [r7, #16]
}
 80043e2:	0018      	movs	r0, r3
 80043e4:	46bd      	mov	sp, r7
 80043e6:	b006      	add	sp, #24
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	46c0      	nop			; (mov r8, r8)
 80043ec:	40021000 	.word	0x40021000
 80043f0:	00f42400 	.word	0x00f42400
 80043f4:	007a1200 	.word	0x007a1200

080043f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043fc:	4b02      	ldr	r3, [pc, #8]	; (8004408 <HAL_RCC_GetHCLKFreq+0x10>)
 80043fe:	681b      	ldr	r3, [r3, #0]
}
 8004400:	0018      	movs	r0, r3
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	2000000c 	.word	0x2000000c

0800440c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800440c:	b5b0      	push	{r4, r5, r7, lr}
 800440e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004410:	f7ff fff2 	bl	80043f8 <HAL_RCC_GetHCLKFreq>
 8004414:	0004      	movs	r4, r0
 8004416:	f7ff fb43 	bl	8003aa0 <LL_RCC_GetAPB1Prescaler>
 800441a:	0003      	movs	r3, r0
 800441c:	0b1a      	lsrs	r2, r3, #12
 800441e:	4b05      	ldr	r3, [pc, #20]	; (8004434 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004420:	0092      	lsls	r2, r2, #2
 8004422:	58d3      	ldr	r3, [r2, r3]
 8004424:	221f      	movs	r2, #31
 8004426:	4013      	ands	r3, r2
 8004428:	40dc      	lsrs	r4, r3
 800442a:	0023      	movs	r3, r4
}
 800442c:	0018      	movs	r0, r3
 800442e:	46bd      	mov	sp, r7
 8004430:	bdb0      	pop	{r4, r5, r7, pc}
 8004432:	46c0      	nop			; (mov r8, r8)
 8004434:	080060ec 	.word	0x080060ec

08004438 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004440:	2313      	movs	r3, #19
 8004442:	18fb      	adds	r3, r7, r3
 8004444:	2200      	movs	r2, #0
 8004446:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004448:	2312      	movs	r3, #18
 800444a:	18fb      	adds	r3, r7, r3
 800444c:	2200      	movs	r2, #0
 800444e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	2380      	movs	r3, #128	; 0x80
 8004456:	029b      	lsls	r3, r3, #10
 8004458:	4013      	ands	r3, r2
 800445a:	d100      	bne.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800445c:	e0a3      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800445e:	2011      	movs	r0, #17
 8004460:	183b      	adds	r3, r7, r0
 8004462:	2200      	movs	r2, #0
 8004464:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004466:	4b86      	ldr	r3, [pc, #536]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004468:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800446a:	2380      	movs	r3, #128	; 0x80
 800446c:	055b      	lsls	r3, r3, #21
 800446e:	4013      	ands	r3, r2
 8004470:	d110      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004472:	4b83      	ldr	r3, [pc, #524]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004474:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004476:	4b82      	ldr	r3, [pc, #520]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004478:	2180      	movs	r1, #128	; 0x80
 800447a:	0549      	lsls	r1, r1, #21
 800447c:	430a      	orrs	r2, r1
 800447e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004480:	4b7f      	ldr	r3, [pc, #508]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004482:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004484:	2380      	movs	r3, #128	; 0x80
 8004486:	055b      	lsls	r3, r3, #21
 8004488:	4013      	ands	r3, r2
 800448a:	60bb      	str	r3, [r7, #8]
 800448c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800448e:	183b      	adds	r3, r7, r0
 8004490:	2201      	movs	r2, #1
 8004492:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004494:	4b7b      	ldr	r3, [pc, #492]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	4b7a      	ldr	r3, [pc, #488]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800449a:	2180      	movs	r1, #128	; 0x80
 800449c:	0049      	lsls	r1, r1, #1
 800449e:	430a      	orrs	r2, r1
 80044a0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044a2:	f7fe fb67 	bl	8002b74 <HAL_GetTick>
 80044a6:	0003      	movs	r3, r0
 80044a8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044aa:	e00b      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ac:	f7fe fb62 	bl	8002b74 <HAL_GetTick>
 80044b0:	0002      	movs	r2, r0
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d904      	bls.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80044ba:	2313      	movs	r3, #19
 80044bc:	18fb      	adds	r3, r7, r3
 80044be:	2203      	movs	r2, #3
 80044c0:	701a      	strb	r2, [r3, #0]
        break;
 80044c2:	e005      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044c4:	4b6f      	ldr	r3, [pc, #444]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	2380      	movs	r3, #128	; 0x80
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	4013      	ands	r3, r2
 80044ce:	d0ed      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80044d0:	2313      	movs	r3, #19
 80044d2:	18fb      	adds	r3, r7, r3
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d154      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044da:	4b69      	ldr	r3, [pc, #420]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80044de:	23c0      	movs	r3, #192	; 0xc0
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4013      	ands	r3, r2
 80044e4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d019      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d014      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044f6:	4b62      	ldr	r3, [pc, #392]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044fa:	4a63      	ldr	r2, [pc, #396]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004500:	4b5f      	ldr	r3, [pc, #380]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004502:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004504:	4b5e      	ldr	r3, [pc, #376]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004506:	2180      	movs	r1, #128	; 0x80
 8004508:	0249      	lsls	r1, r1, #9
 800450a:	430a      	orrs	r2, r1
 800450c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800450e:	4b5c      	ldr	r3, [pc, #368]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004510:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004512:	4b5b      	ldr	r3, [pc, #364]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004514:	495d      	ldr	r1, [pc, #372]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004516:	400a      	ands	r2, r1
 8004518:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800451a:	4b59      	ldr	r3, [pc, #356]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	2201      	movs	r2, #1
 8004524:	4013      	ands	r3, r2
 8004526:	d016      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004528:	f7fe fb24 	bl	8002b74 <HAL_GetTick>
 800452c:	0003      	movs	r3, r0
 800452e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004530:	e00c      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004532:	f7fe fb1f 	bl	8002b74 <HAL_GetTick>
 8004536:	0002      	movs	r2, r0
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	4a54      	ldr	r2, [pc, #336]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d904      	bls.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004542:	2313      	movs	r3, #19
 8004544:	18fb      	adds	r3, r7, r3
 8004546:	2203      	movs	r2, #3
 8004548:	701a      	strb	r2, [r3, #0]
            break;
 800454a:	e004      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800454c:	4b4c      	ldr	r3, [pc, #304]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800454e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004550:	2202      	movs	r2, #2
 8004552:	4013      	ands	r3, r2
 8004554:	d0ed      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004556:	2313      	movs	r3, #19
 8004558:	18fb      	adds	r3, r7, r3
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10a      	bne.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004560:	4b47      	ldr	r3, [pc, #284]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004564:	4a48      	ldr	r2, [pc, #288]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004566:	4013      	ands	r3, r2
 8004568:	0019      	movs	r1, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	699a      	ldr	r2, [r3, #24]
 800456e:	4b44      	ldr	r3, [pc, #272]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004570:	430a      	orrs	r2, r1
 8004572:	65da      	str	r2, [r3, #92]	; 0x5c
 8004574:	e00c      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004576:	2312      	movs	r3, #18
 8004578:	18fb      	adds	r3, r7, r3
 800457a:	2213      	movs	r2, #19
 800457c:	18ba      	adds	r2, r7, r2
 800457e:	7812      	ldrb	r2, [r2, #0]
 8004580:	701a      	strb	r2, [r3, #0]
 8004582:	e005      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004584:	2312      	movs	r3, #18
 8004586:	18fb      	adds	r3, r7, r3
 8004588:	2213      	movs	r2, #19
 800458a:	18ba      	adds	r2, r7, r2
 800458c:	7812      	ldrb	r2, [r2, #0]
 800458e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004590:	2311      	movs	r3, #17
 8004592:	18fb      	adds	r3, r7, r3
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d105      	bne.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800459a:	4b39      	ldr	r3, [pc, #228]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800459c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800459e:	4b38      	ldr	r3, [pc, #224]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045a0:	493c      	ldr	r1, [pc, #240]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80045a2:	400a      	ands	r2, r1
 80045a4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2201      	movs	r2, #1
 80045ac:	4013      	ands	r3, r2
 80045ae:	d009      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045b0:	4b33      	ldr	r3, [pc, #204]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b4:	2203      	movs	r2, #3
 80045b6:	4393      	bics	r3, r2
 80045b8:	0019      	movs	r1, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	4b30      	ldr	r3, [pc, #192]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045c0:	430a      	orrs	r2, r1
 80045c2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2202      	movs	r2, #2
 80045ca:	4013      	ands	r3, r2
 80045cc:	d009      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045ce:	4b2c      	ldr	r3, [pc, #176]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d2:	220c      	movs	r2, #12
 80045d4:	4393      	bics	r3, r2
 80045d6:	0019      	movs	r1, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	4b28      	ldr	r3, [pc, #160]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045de:	430a      	orrs	r2, r1
 80045e0:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2220      	movs	r2, #32
 80045e8:	4013      	ands	r3, r2
 80045ea:	d009      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045ec:	4b24      	ldr	r3, [pc, #144]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f0:	4a29      	ldr	r2, [pc, #164]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045f2:	4013      	ands	r3, r2
 80045f4:	0019      	movs	r1, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	4b21      	ldr	r3, [pc, #132]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045fc:	430a      	orrs	r2, r1
 80045fe:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	2380      	movs	r3, #128	; 0x80
 8004606:	01db      	lsls	r3, r3, #7
 8004608:	4013      	ands	r3, r2
 800460a:	d015      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800460c:	4b1c      	ldr	r3, [pc, #112]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800460e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	0899      	lsrs	r1, r3, #2
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	695a      	ldr	r2, [r3, #20]
 8004618:	4b19      	ldr	r3, [pc, #100]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800461a:	430a      	orrs	r2, r1
 800461c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	695a      	ldr	r2, [r3, #20]
 8004622:	2380      	movs	r3, #128	; 0x80
 8004624:	05db      	lsls	r3, r3, #23
 8004626:	429a      	cmp	r2, r3
 8004628:	d106      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800462a:	4b15      	ldr	r3, [pc, #84]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	4b14      	ldr	r3, [pc, #80]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004630:	2180      	movs	r1, #128	; 0x80
 8004632:	0249      	lsls	r1, r1, #9
 8004634:	430a      	orrs	r2, r1
 8004636:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	2380      	movs	r3, #128	; 0x80
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	4013      	ands	r3, r2
 8004642:	d016      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004644:	4b0e      	ldr	r3, [pc, #56]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004648:	4a14      	ldr	r2, [pc, #80]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800464a:	4013      	ands	r3, r2
 800464c:	0019      	movs	r1, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	691a      	ldr	r2, [r3, #16]
 8004652:	4b0b      	ldr	r3, [pc, #44]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004654:	430a      	orrs	r2, r1
 8004656:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691a      	ldr	r2, [r3, #16]
 800465c:	2380      	movs	r3, #128	; 0x80
 800465e:	01db      	lsls	r3, r3, #7
 8004660:	429a      	cmp	r2, r3
 8004662:	d106      	bne.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004664:	4b06      	ldr	r3, [pc, #24]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004666:	68da      	ldr	r2, [r3, #12]
 8004668:	4b05      	ldr	r3, [pc, #20]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800466a:	2180      	movs	r1, #128	; 0x80
 800466c:	0249      	lsls	r1, r1, #9
 800466e:	430a      	orrs	r2, r1
 8004670:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004672:	2312      	movs	r3, #18
 8004674:	18fb      	adds	r3, r7, r3
 8004676:	781b      	ldrb	r3, [r3, #0]
}
 8004678:	0018      	movs	r0, r3
 800467a:	46bd      	mov	sp, r7
 800467c:	b006      	add	sp, #24
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40021000 	.word	0x40021000
 8004684:	40007000 	.word	0x40007000
 8004688:	fffffcff 	.word	0xfffffcff
 800468c:	fffeffff 	.word	0xfffeffff
 8004690:	00001388 	.word	0x00001388
 8004694:	efffffff 	.word	0xefffffff
 8004698:	ffffcfff 	.word	0xffffcfff
 800469c:	ffff3fff 	.word	0xffff3fff

080046a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e046      	b.n	8004740 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2284      	movs	r2, #132	; 0x84
 80046b6:	589b      	ldr	r3, [r3, r2]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d107      	bne.n	80046cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2280      	movs	r2, #128	; 0x80
 80046c0:	2100      	movs	r1, #0
 80046c2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	0018      	movs	r0, r3
 80046c8:	f7fe f910 	bl	80028ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2284      	movs	r2, #132	; 0x84
 80046d0:	2124      	movs	r1, #36	; 0x24
 80046d2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2101      	movs	r1, #1
 80046e0:	438a      	bics	r2, r1
 80046e2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	0018      	movs	r0, r3
 80046e8:	f000 f830 	bl	800474c <UART_SetConfig>
 80046ec:	0003      	movs	r3, r0
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d101      	bne.n	80046f6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e024      	b.n	8004740 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	0018      	movs	r0, r3
 8004702:	f000 f9c9 	bl	8004a98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	490d      	ldr	r1, [pc, #52]	; (8004748 <HAL_UART_Init+0xa8>)
 8004712:	400a      	ands	r2, r1
 8004714:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	212a      	movs	r1, #42	; 0x2a
 8004722:	438a      	bics	r2, r1
 8004724:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2101      	movs	r1, #1
 8004732:	430a      	orrs	r2, r1
 8004734:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	0018      	movs	r0, r3
 800473a:	f000 fa61 	bl	8004c00 <UART_CheckIdleState>
 800473e:	0003      	movs	r3, r0
}
 8004740:	0018      	movs	r0, r3
 8004742:	46bd      	mov	sp, r7
 8004744:	b002      	add	sp, #8
 8004746:	bd80      	pop	{r7, pc}
 8004748:	ffffb7ff 	.word	0xffffb7ff

0800474c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b088      	sub	sp, #32
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004754:	231a      	movs	r3, #26
 8004756:	18fb      	adds	r3, r7, r3
 8004758:	2200      	movs	r2, #0
 800475a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	431a      	orrs	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	431a      	orrs	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	69db      	ldr	r3, [r3, #28]
 8004770:	4313      	orrs	r3, r2
 8004772:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4abd      	ldr	r2, [pc, #756]	; (8004a70 <UART_SetConfig+0x324>)
 800477c:	4013      	ands	r3, r2
 800477e:	0019      	movs	r1, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	69fa      	ldr	r2, [r7, #28]
 8004786:	430a      	orrs	r2, r1
 8004788:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	4ab8      	ldr	r2, [pc, #736]	; (8004a74 <UART_SetConfig+0x328>)
 8004792:	4013      	ands	r3, r2
 8004794:	0019      	movs	r1, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	69fa      	ldr	r2, [r7, #28]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	4aaf      	ldr	r2, [pc, #700]	; (8004a78 <UART_SetConfig+0x32c>)
 80047ba:	4013      	ands	r3, r2
 80047bc:	0019      	movs	r1, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	69fa      	ldr	r2, [r7, #28]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ce:	220f      	movs	r2, #15
 80047d0:	4393      	bics	r3, r2
 80047d2:	0019      	movs	r1, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4aa5      	ldr	r2, [pc, #660]	; (8004a7c <UART_SetConfig+0x330>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d127      	bne.n	800483a <UART_SetConfig+0xee>
 80047ea:	4ba5      	ldr	r3, [pc, #660]	; (8004a80 <UART_SetConfig+0x334>)
 80047ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ee:	2203      	movs	r2, #3
 80047f0:	4013      	ands	r3, r2
 80047f2:	2b03      	cmp	r3, #3
 80047f4:	d017      	beq.n	8004826 <UART_SetConfig+0xda>
 80047f6:	d81b      	bhi.n	8004830 <UART_SetConfig+0xe4>
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d00a      	beq.n	8004812 <UART_SetConfig+0xc6>
 80047fc:	d818      	bhi.n	8004830 <UART_SetConfig+0xe4>
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d002      	beq.n	8004808 <UART_SetConfig+0xbc>
 8004802:	2b01      	cmp	r3, #1
 8004804:	d00a      	beq.n	800481c <UART_SetConfig+0xd0>
 8004806:	e013      	b.n	8004830 <UART_SetConfig+0xe4>
 8004808:	231b      	movs	r3, #27
 800480a:	18fb      	adds	r3, r7, r3
 800480c:	2200      	movs	r2, #0
 800480e:	701a      	strb	r2, [r3, #0]
 8004810:	e058      	b.n	80048c4 <UART_SetConfig+0x178>
 8004812:	231b      	movs	r3, #27
 8004814:	18fb      	adds	r3, r7, r3
 8004816:	2202      	movs	r2, #2
 8004818:	701a      	strb	r2, [r3, #0]
 800481a:	e053      	b.n	80048c4 <UART_SetConfig+0x178>
 800481c:	231b      	movs	r3, #27
 800481e:	18fb      	adds	r3, r7, r3
 8004820:	2204      	movs	r2, #4
 8004822:	701a      	strb	r2, [r3, #0]
 8004824:	e04e      	b.n	80048c4 <UART_SetConfig+0x178>
 8004826:	231b      	movs	r3, #27
 8004828:	18fb      	adds	r3, r7, r3
 800482a:	2208      	movs	r2, #8
 800482c:	701a      	strb	r2, [r3, #0]
 800482e:	e049      	b.n	80048c4 <UART_SetConfig+0x178>
 8004830:	231b      	movs	r3, #27
 8004832:	18fb      	adds	r3, r7, r3
 8004834:	2210      	movs	r2, #16
 8004836:	701a      	strb	r2, [r3, #0]
 8004838:	e044      	b.n	80048c4 <UART_SetConfig+0x178>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a91      	ldr	r2, [pc, #580]	; (8004a84 <UART_SetConfig+0x338>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d127      	bne.n	8004894 <UART_SetConfig+0x148>
 8004844:	4b8e      	ldr	r3, [pc, #568]	; (8004a80 <UART_SetConfig+0x334>)
 8004846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004848:	220c      	movs	r2, #12
 800484a:	4013      	ands	r3, r2
 800484c:	2b0c      	cmp	r3, #12
 800484e:	d017      	beq.n	8004880 <UART_SetConfig+0x134>
 8004850:	d81b      	bhi.n	800488a <UART_SetConfig+0x13e>
 8004852:	2b08      	cmp	r3, #8
 8004854:	d00a      	beq.n	800486c <UART_SetConfig+0x120>
 8004856:	d818      	bhi.n	800488a <UART_SetConfig+0x13e>
 8004858:	2b00      	cmp	r3, #0
 800485a:	d002      	beq.n	8004862 <UART_SetConfig+0x116>
 800485c:	2b04      	cmp	r3, #4
 800485e:	d00a      	beq.n	8004876 <UART_SetConfig+0x12a>
 8004860:	e013      	b.n	800488a <UART_SetConfig+0x13e>
 8004862:	231b      	movs	r3, #27
 8004864:	18fb      	adds	r3, r7, r3
 8004866:	2200      	movs	r2, #0
 8004868:	701a      	strb	r2, [r3, #0]
 800486a:	e02b      	b.n	80048c4 <UART_SetConfig+0x178>
 800486c:	231b      	movs	r3, #27
 800486e:	18fb      	adds	r3, r7, r3
 8004870:	2202      	movs	r2, #2
 8004872:	701a      	strb	r2, [r3, #0]
 8004874:	e026      	b.n	80048c4 <UART_SetConfig+0x178>
 8004876:	231b      	movs	r3, #27
 8004878:	18fb      	adds	r3, r7, r3
 800487a:	2204      	movs	r2, #4
 800487c:	701a      	strb	r2, [r3, #0]
 800487e:	e021      	b.n	80048c4 <UART_SetConfig+0x178>
 8004880:	231b      	movs	r3, #27
 8004882:	18fb      	adds	r3, r7, r3
 8004884:	2208      	movs	r2, #8
 8004886:	701a      	strb	r2, [r3, #0]
 8004888:	e01c      	b.n	80048c4 <UART_SetConfig+0x178>
 800488a:	231b      	movs	r3, #27
 800488c:	18fb      	adds	r3, r7, r3
 800488e:	2210      	movs	r2, #16
 8004890:	701a      	strb	r2, [r3, #0]
 8004892:	e017      	b.n	80048c4 <UART_SetConfig+0x178>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a7b      	ldr	r2, [pc, #492]	; (8004a88 <UART_SetConfig+0x33c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d104      	bne.n	80048a8 <UART_SetConfig+0x15c>
 800489e:	231b      	movs	r3, #27
 80048a0:	18fb      	adds	r3, r7, r3
 80048a2:	2200      	movs	r2, #0
 80048a4:	701a      	strb	r2, [r3, #0]
 80048a6:	e00d      	b.n	80048c4 <UART_SetConfig+0x178>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a77      	ldr	r2, [pc, #476]	; (8004a8c <UART_SetConfig+0x340>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d104      	bne.n	80048bc <UART_SetConfig+0x170>
 80048b2:	231b      	movs	r3, #27
 80048b4:	18fb      	adds	r3, r7, r3
 80048b6:	2200      	movs	r2, #0
 80048b8:	701a      	strb	r2, [r3, #0]
 80048ba:	e003      	b.n	80048c4 <UART_SetConfig+0x178>
 80048bc:	231b      	movs	r3, #27
 80048be:	18fb      	adds	r3, r7, r3
 80048c0:	2210      	movs	r2, #16
 80048c2:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	69da      	ldr	r2, [r3, #28]
 80048c8:	2380      	movs	r3, #128	; 0x80
 80048ca:	021b      	lsls	r3, r3, #8
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d000      	beq.n	80048d2 <UART_SetConfig+0x186>
 80048d0:	e066      	b.n	80049a0 <UART_SetConfig+0x254>
  {
    switch (clocksource)
 80048d2:	231b      	movs	r3, #27
 80048d4:	18fb      	adds	r3, r7, r3
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d015      	beq.n	8004908 <UART_SetConfig+0x1bc>
 80048dc:	dc18      	bgt.n	8004910 <UART_SetConfig+0x1c4>
 80048de:	2b04      	cmp	r3, #4
 80048e0:	d00d      	beq.n	80048fe <UART_SetConfig+0x1b2>
 80048e2:	dc15      	bgt.n	8004910 <UART_SetConfig+0x1c4>
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <UART_SetConfig+0x1a2>
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d005      	beq.n	80048f8 <UART_SetConfig+0x1ac>
 80048ec:	e010      	b.n	8004910 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048ee:	f7ff fd8d 	bl	800440c <HAL_RCC_GetPCLK1Freq>
 80048f2:	0003      	movs	r3, r0
 80048f4:	617b      	str	r3, [r7, #20]
        break;
 80048f6:	e012      	b.n	800491e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048f8:	4b65      	ldr	r3, [pc, #404]	; (8004a90 <UART_SetConfig+0x344>)
 80048fa:	617b      	str	r3, [r7, #20]
        break;
 80048fc:	e00f      	b.n	800491e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048fe:	f7ff fcf9 	bl	80042f4 <HAL_RCC_GetSysClockFreq>
 8004902:	0003      	movs	r3, r0
 8004904:	617b      	str	r3, [r7, #20]
        break;
 8004906:	e00a      	b.n	800491e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004908:	2380      	movs	r3, #128	; 0x80
 800490a:	021b      	lsls	r3, r3, #8
 800490c:	617b      	str	r3, [r7, #20]
        break;
 800490e:	e006      	b.n	800491e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8004910:	2300      	movs	r3, #0
 8004912:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004914:	231a      	movs	r3, #26
 8004916:	18fb      	adds	r3, r7, r3
 8004918:	2201      	movs	r2, #1
 800491a:	701a      	strb	r2, [r3, #0]
        break;
 800491c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d100      	bne.n	8004926 <UART_SetConfig+0x1da>
 8004924:	e08e      	b.n	8004a44 <UART_SetConfig+0x2f8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800492a:	4b5a      	ldr	r3, [pc, #360]	; (8004a94 <UART_SetConfig+0x348>)
 800492c:	0052      	lsls	r2, r2, #1
 800492e:	5ad3      	ldrh	r3, [r2, r3]
 8004930:	0019      	movs	r1, r3
 8004932:	6978      	ldr	r0, [r7, #20]
 8004934:	f7fb fbec 	bl	8000110 <__udivsi3>
 8004938:	0003      	movs	r3, r0
 800493a:	005a      	lsls	r2, r3, #1
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	085b      	lsrs	r3, r3, #1
 8004942:	18d2      	adds	r2, r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	0019      	movs	r1, r3
 800494a:	0010      	movs	r0, r2
 800494c:	f7fb fbe0 	bl	8000110 <__udivsi3>
 8004950:	0003      	movs	r3, r0
 8004952:	b29b      	uxth	r3, r3
 8004954:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	2b0f      	cmp	r3, #15
 800495a:	d91c      	bls.n	8004996 <UART_SetConfig+0x24a>
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	2380      	movs	r3, #128	; 0x80
 8004960:	025b      	lsls	r3, r3, #9
 8004962:	429a      	cmp	r2, r3
 8004964:	d217      	bcs.n	8004996 <UART_SetConfig+0x24a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	b29a      	uxth	r2, r3
 800496a:	200e      	movs	r0, #14
 800496c:	183b      	adds	r3, r7, r0
 800496e:	210f      	movs	r1, #15
 8004970:	438a      	bics	r2, r1
 8004972:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	085b      	lsrs	r3, r3, #1
 8004978:	b29b      	uxth	r3, r3
 800497a:	2207      	movs	r2, #7
 800497c:	4013      	ands	r3, r2
 800497e:	b299      	uxth	r1, r3
 8004980:	183b      	adds	r3, r7, r0
 8004982:	183a      	adds	r2, r7, r0
 8004984:	8812      	ldrh	r2, [r2, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	183a      	adds	r2, r7, r0
 8004990:	8812      	ldrh	r2, [r2, #0]
 8004992:	60da      	str	r2, [r3, #12]
 8004994:	e056      	b.n	8004a44 <UART_SetConfig+0x2f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004996:	231a      	movs	r3, #26
 8004998:	18fb      	adds	r3, r7, r3
 800499a:	2201      	movs	r2, #1
 800499c:	701a      	strb	r2, [r3, #0]
 800499e:	e051      	b.n	8004a44 <UART_SetConfig+0x2f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049a0:	231b      	movs	r3, #27
 80049a2:	18fb      	adds	r3, r7, r3
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	2b08      	cmp	r3, #8
 80049a8:	d015      	beq.n	80049d6 <UART_SetConfig+0x28a>
 80049aa:	dc18      	bgt.n	80049de <UART_SetConfig+0x292>
 80049ac:	2b04      	cmp	r3, #4
 80049ae:	d00d      	beq.n	80049cc <UART_SetConfig+0x280>
 80049b0:	dc15      	bgt.n	80049de <UART_SetConfig+0x292>
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d002      	beq.n	80049bc <UART_SetConfig+0x270>
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d005      	beq.n	80049c6 <UART_SetConfig+0x27a>
 80049ba:	e010      	b.n	80049de <UART_SetConfig+0x292>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049bc:	f7ff fd26 	bl	800440c <HAL_RCC_GetPCLK1Freq>
 80049c0:	0003      	movs	r3, r0
 80049c2:	617b      	str	r3, [r7, #20]
        break;
 80049c4:	e012      	b.n	80049ec <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049c6:	4b32      	ldr	r3, [pc, #200]	; (8004a90 <UART_SetConfig+0x344>)
 80049c8:	617b      	str	r3, [r7, #20]
        break;
 80049ca:	e00f      	b.n	80049ec <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049cc:	f7ff fc92 	bl	80042f4 <HAL_RCC_GetSysClockFreq>
 80049d0:	0003      	movs	r3, r0
 80049d2:	617b      	str	r3, [r7, #20]
        break;
 80049d4:	e00a      	b.n	80049ec <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049d6:	2380      	movs	r3, #128	; 0x80
 80049d8:	021b      	lsls	r3, r3, #8
 80049da:	617b      	str	r3, [r7, #20]
        break;
 80049dc:	e006      	b.n	80049ec <UART_SetConfig+0x2a0>
      default:
        pclk = 0U;
 80049de:	2300      	movs	r3, #0
 80049e0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80049e2:	231a      	movs	r3, #26
 80049e4:	18fb      	adds	r3, r7, r3
 80049e6:	2201      	movs	r2, #1
 80049e8:	701a      	strb	r2, [r3, #0]
        break;
 80049ea:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d028      	beq.n	8004a44 <UART_SetConfig+0x2f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049f6:	4b27      	ldr	r3, [pc, #156]	; (8004a94 <UART_SetConfig+0x348>)
 80049f8:	0052      	lsls	r2, r2, #1
 80049fa:	5ad3      	ldrh	r3, [r2, r3]
 80049fc:	0019      	movs	r1, r3
 80049fe:	6978      	ldr	r0, [r7, #20]
 8004a00:	f7fb fb86 	bl	8000110 <__udivsi3>
 8004a04:	0003      	movs	r3, r0
 8004a06:	001a      	movs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	085b      	lsrs	r3, r3, #1
 8004a0e:	18d2      	adds	r2, r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	0019      	movs	r1, r3
 8004a16:	0010      	movs	r0, r2
 8004a18:	f7fb fb7a 	bl	8000110 <__udivsi3>
 8004a1c:	0003      	movs	r3, r0
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	2b0f      	cmp	r3, #15
 8004a26:	d909      	bls.n	8004a3c <UART_SetConfig+0x2f0>
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	2380      	movs	r3, #128	; 0x80
 8004a2c:	025b      	lsls	r3, r3, #9
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d204      	bcs.n	8004a3c <UART_SetConfig+0x2f0>
      {
        huart->Instance->BRR = usartdiv;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	60da      	str	r2, [r3, #12]
 8004a3a:	e003      	b.n	8004a44 <UART_SetConfig+0x2f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004a3c:	231a      	movs	r3, #26
 8004a3e:	18fb      	adds	r3, r7, r3
 8004a40:	2201      	movs	r2, #1
 8004a42:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	226a      	movs	r2, #106	; 0x6a
 8004a48:	2101      	movs	r1, #1
 8004a4a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2268      	movs	r2, #104	; 0x68
 8004a50:	2101      	movs	r1, #1
 8004a52:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004a60:	231a      	movs	r3, #26
 8004a62:	18fb      	adds	r3, r7, r3
 8004a64:	781b      	ldrb	r3, [r3, #0]
}
 8004a66:	0018      	movs	r0, r3
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	b008      	add	sp, #32
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	46c0      	nop			; (mov r8, r8)
 8004a70:	cfff69f3 	.word	0xcfff69f3
 8004a74:	ffffcfff 	.word	0xffffcfff
 8004a78:	11fff4ff 	.word	0x11fff4ff
 8004a7c:	40013800 	.word	0x40013800
 8004a80:	40021000 	.word	0x40021000
 8004a84:	40004400 	.word	0x40004400
 8004a88:	40004800 	.word	0x40004800
 8004a8c:	40004c00 	.word	0x40004c00
 8004a90:	00f42400 	.word	0x00f42400
 8004a94:	0800610c 	.word	0x0800610c

08004a98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	d00b      	beq.n	8004ac2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	4a4a      	ldr	r2, [pc, #296]	; (8004bdc <UART_AdvFeatureConfig+0x144>)
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	0019      	movs	r1, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	4013      	ands	r3, r2
 8004aca:	d00b      	beq.n	8004ae4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	4a43      	ldr	r2, [pc, #268]	; (8004be0 <UART_AdvFeatureConfig+0x148>)
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	0019      	movs	r1, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae8:	2204      	movs	r2, #4
 8004aea:	4013      	ands	r3, r2
 8004aec:	d00b      	beq.n	8004b06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	4a3b      	ldr	r2, [pc, #236]	; (8004be4 <UART_AdvFeatureConfig+0x14c>)
 8004af6:	4013      	ands	r3, r2
 8004af8:	0019      	movs	r1, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0a:	2208      	movs	r2, #8
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	d00b      	beq.n	8004b28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	4a34      	ldr	r2, [pc, #208]	; (8004be8 <UART_AdvFeatureConfig+0x150>)
 8004b18:	4013      	ands	r3, r2
 8004b1a:	0019      	movs	r1, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2c:	2210      	movs	r2, #16
 8004b2e:	4013      	ands	r3, r2
 8004b30:	d00b      	beq.n	8004b4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	4a2c      	ldr	r2, [pc, #176]	; (8004bec <UART_AdvFeatureConfig+0x154>)
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	0019      	movs	r1, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4e:	2220      	movs	r2, #32
 8004b50:	4013      	ands	r3, r2
 8004b52:	d00b      	beq.n	8004b6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	4a25      	ldr	r2, [pc, #148]	; (8004bf0 <UART_AdvFeatureConfig+0x158>)
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	0019      	movs	r1, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b70:	2240      	movs	r2, #64	; 0x40
 8004b72:	4013      	ands	r3, r2
 8004b74:	d01d      	beq.n	8004bb2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	4a1d      	ldr	r2, [pc, #116]	; (8004bf4 <UART_AdvFeatureConfig+0x15c>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	0019      	movs	r1, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b92:	2380      	movs	r3, #128	; 0x80
 8004b94:	035b      	lsls	r3, r3, #13
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d10b      	bne.n	8004bb2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	4a15      	ldr	r2, [pc, #84]	; (8004bf8 <UART_AdvFeatureConfig+0x160>)
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	0019      	movs	r1, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb6:	2280      	movs	r2, #128	; 0x80
 8004bb8:	4013      	ands	r3, r2
 8004bba:	d00b      	beq.n	8004bd4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	4a0e      	ldr	r2, [pc, #56]	; (8004bfc <UART_AdvFeatureConfig+0x164>)
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	0019      	movs	r1, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	605a      	str	r2, [r3, #4]
  }
}
 8004bd4:	46c0      	nop			; (mov r8, r8)
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	b002      	add	sp, #8
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	fffdffff 	.word	0xfffdffff
 8004be0:	fffeffff 	.word	0xfffeffff
 8004be4:	fffbffff 	.word	0xfffbffff
 8004be8:	ffff7fff 	.word	0xffff7fff
 8004bec:	ffffefff 	.word	0xffffefff
 8004bf0:	ffffdfff 	.word	0xffffdfff
 8004bf4:	ffefffff 	.word	0xffefffff
 8004bf8:	ff9fffff 	.word	0xff9fffff
 8004bfc:	fff7ffff 	.word	0xfff7ffff

08004c00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af02      	add	r7, sp, #8
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	228c      	movs	r2, #140	; 0x8c
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c10:	f7fd ffb0 	bl	8002b74 <HAL_GetTick>
 8004c14:	0003      	movs	r3, r0
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2208      	movs	r2, #8
 8004c20:	4013      	ands	r3, r2
 8004c22:	2b08      	cmp	r3, #8
 8004c24:	d10c      	bne.n	8004c40 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2280      	movs	r2, #128	; 0x80
 8004c2a:	0391      	lsls	r1, r2, #14
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	4a18      	ldr	r2, [pc, #96]	; (8004c90 <UART_CheckIdleState+0x90>)
 8004c30:	9200      	str	r2, [sp, #0]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f000 f82e 	bl	8004c94 <UART_WaitOnFlagUntilTimeout>
 8004c38:	1e03      	subs	r3, r0, #0
 8004c3a:	d001      	beq.n	8004c40 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e023      	b.n	8004c88 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2204      	movs	r2, #4
 8004c48:	4013      	ands	r3, r2
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d10c      	bne.n	8004c68 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2280      	movs	r2, #128	; 0x80
 8004c52:	03d1      	lsls	r1, r2, #15
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	4a0e      	ldr	r2, [pc, #56]	; (8004c90 <UART_CheckIdleState+0x90>)
 8004c58:	9200      	str	r2, [sp, #0]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f000 f81a 	bl	8004c94 <UART_WaitOnFlagUntilTimeout>
 8004c60:	1e03      	subs	r3, r0, #0
 8004c62:	d001      	beq.n	8004c68 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e00f      	b.n	8004c88 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2284      	movs	r2, #132	; 0x84
 8004c6c:	2120      	movs	r1, #32
 8004c6e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2288      	movs	r2, #136	; 0x88
 8004c74:	2120      	movs	r1, #32
 8004c76:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2280      	movs	r2, #128	; 0x80
 8004c82:	2100      	movs	r1, #0
 8004c84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	0018      	movs	r0, r3
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	b004      	add	sp, #16
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	01ffffff 	.word	0x01ffffff

08004c94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b094      	sub	sp, #80	; 0x50
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	603b      	str	r3, [r7, #0]
 8004ca0:	1dfb      	adds	r3, r7, #7
 8004ca2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ca4:	e0a7      	b.n	8004df6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ca6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ca8:	3301      	adds	r3, #1
 8004caa:	d100      	bne.n	8004cae <UART_WaitOnFlagUntilTimeout+0x1a>
 8004cac:	e0a3      	b.n	8004df6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cae:	f7fd ff61 	bl	8002b74 <HAL_GetTick>
 8004cb2:	0002      	movs	r2, r0
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d302      	bcc.n	8004cc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d13f      	bne.n	8004d44 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cc4:	f3ef 8310 	mrs	r3, PRIMASK
 8004cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004ccc:	647b      	str	r3, [r7, #68]	; 0x44
 8004cce:	2301      	movs	r3, #1
 8004cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd4:	f383 8810 	msr	PRIMASK, r3
}
 8004cd8:	46c0      	nop			; (mov r8, r8)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	494e      	ldr	r1, [pc, #312]	; (8004e20 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004ce6:	400a      	ands	r2, r1
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cec:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf0:	f383 8810 	msr	PRIMASK, r3
}
 8004cf4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cf6:	f3ef 8310 	mrs	r3, PRIMASK
 8004cfa:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cfe:	643b      	str	r3, [r7, #64]	; 0x40
 8004d00:	2301      	movs	r3, #1
 8004d02:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d06:	f383 8810 	msr	PRIMASK, r3
}
 8004d0a:	46c0      	nop			; (mov r8, r8)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689a      	ldr	r2, [r3, #8]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2101      	movs	r1, #1
 8004d18:	438a      	bics	r2, r1
 8004d1a:	609a      	str	r2, [r3, #8]
 8004d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d22:	f383 8810 	msr	PRIMASK, r3
}
 8004d26:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2284      	movs	r2, #132	; 0x84
 8004d2c:	2120      	movs	r1, #32
 8004d2e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2288      	movs	r2, #136	; 0x88
 8004d34:	2120      	movs	r1, #32
 8004d36:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2280      	movs	r2, #128	; 0x80
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e069      	b.n	8004e18 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2204      	movs	r2, #4
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	d052      	beq.n	8004df6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	69da      	ldr	r2, [r3, #28]
 8004d56:	2380      	movs	r3, #128	; 0x80
 8004d58:	011b      	lsls	r3, r3, #4
 8004d5a:	401a      	ands	r2, r3
 8004d5c:	2380      	movs	r3, #128	; 0x80
 8004d5e:	011b      	lsls	r3, r3, #4
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d148      	bne.n	8004df6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2280      	movs	r2, #128	; 0x80
 8004d6a:	0112      	lsls	r2, r2, #4
 8004d6c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d6e:	f3ef 8310 	mrs	r3, PRIMASK
 8004d72:	613b      	str	r3, [r7, #16]
  return(result);
 8004d74:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004d76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d78:	2301      	movs	r3, #1
 8004d7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f383 8810 	msr	PRIMASK, r3
}
 8004d82:	46c0      	nop			; (mov r8, r8)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4924      	ldr	r1, [pc, #144]	; (8004e20 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004d90:	400a      	ands	r2, r1
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d96:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	f383 8810 	msr	PRIMASK, r3
}
 8004d9e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004da0:	f3ef 8310 	mrs	r3, PRIMASK
 8004da4:	61fb      	str	r3, [r7, #28]
  return(result);
 8004da6:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004daa:	2301      	movs	r3, #1
 8004dac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dae:	6a3b      	ldr	r3, [r7, #32]
 8004db0:	f383 8810 	msr	PRIMASK, r3
}
 8004db4:	46c0      	nop			; (mov r8, r8)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2101      	movs	r1, #1
 8004dc2:	438a      	bics	r2, r1
 8004dc4:	609a      	str	r2, [r3, #8]
 8004dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dc8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	f383 8810 	msr	PRIMASK, r3
}
 8004dd0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2284      	movs	r2, #132	; 0x84
 8004dd6:	2120      	movs	r1, #32
 8004dd8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2288      	movs	r2, #136	; 0x88
 8004dde:	2120      	movs	r1, #32
 8004de0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	228c      	movs	r2, #140	; 0x8c
 8004de6:	2120      	movs	r1, #32
 8004de8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2280      	movs	r2, #128	; 0x80
 8004dee:	2100      	movs	r1, #0
 8004df0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e010      	b.n	8004e18 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	69db      	ldr	r3, [r3, #28]
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	4013      	ands	r3, r2
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	425a      	negs	r2, r3
 8004e06:	4153      	adcs	r3, r2
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	001a      	movs	r2, r3
 8004e0c:	1dfb      	adds	r3, r7, #7
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d100      	bne.n	8004e16 <UART_WaitOnFlagUntilTimeout+0x182>
 8004e14:	e747      	b.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	0018      	movs	r0, r3
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	b014      	add	sp, #80	; 0x50
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	fffffe5f 	.word	0xfffffe5f

08004e24 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2280      	movs	r2, #128	; 0x80
 8004e30:	5c9b      	ldrb	r3, [r3, r2]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d101      	bne.n	8004e3a <HAL_UARTEx_DisableFifoMode+0x16>
 8004e36:	2302      	movs	r3, #2
 8004e38:	e027      	b.n	8004e8a <HAL_UARTEx_DisableFifoMode+0x66>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2280      	movs	r2, #128	; 0x80
 8004e3e:	2101      	movs	r1, #1
 8004e40:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2284      	movs	r2, #132	; 0x84
 8004e46:	2124      	movs	r1, #36	; 0x24
 8004e48:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	438a      	bics	r2, r1
 8004e60:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	4a0b      	ldr	r2, [pc, #44]	; (8004e94 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004e66:	4013      	ands	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2284      	movs	r2, #132	; 0x84
 8004e7c:	2120      	movs	r1, #32
 8004e7e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2280      	movs	r2, #128	; 0x80
 8004e84:	2100      	movs	r1, #0
 8004e86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	0018      	movs	r0, r3
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	b004      	add	sp, #16
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	46c0      	nop			; (mov r8, r8)
 8004e94:	dfffffff 	.word	0xdfffffff

08004e98 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2280      	movs	r2, #128	; 0x80
 8004ea6:	5c9b      	ldrb	r3, [r3, r2]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d101      	bne.n	8004eb0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004eac:	2302      	movs	r3, #2
 8004eae:	e02e      	b.n	8004f0e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2280      	movs	r2, #128	; 0x80
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2284      	movs	r2, #132	; 0x84
 8004ebc:	2124      	movs	r1, #36	; 0x24
 8004ebe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	438a      	bics	r2, r1
 8004ed6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	08d9      	lsrs	r1, r3, #3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	683a      	ldr	r2, [r7, #0]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	0018      	movs	r0, r3
 8004ef0:	f000 f854 	bl	8004f9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2284      	movs	r2, #132	; 0x84
 8004f00:	2120      	movs	r1, #32
 8004f02:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2280      	movs	r2, #128	; 0x80
 8004f08:	2100      	movs	r1, #0
 8004f0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	0018      	movs	r0, r3
 8004f10:	46bd      	mov	sp, r7
 8004f12:	b004      	add	sp, #16
 8004f14:	bd80      	pop	{r7, pc}
	...

08004f18 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2280      	movs	r2, #128	; 0x80
 8004f26:	5c9b      	ldrb	r3, [r3, r2]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d101      	bne.n	8004f30 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	e02f      	b.n	8004f90 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2280      	movs	r2, #128	; 0x80
 8004f34:	2101      	movs	r1, #1
 8004f36:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2284      	movs	r2, #132	; 0x84
 8004f3c:	2124      	movs	r1, #36	; 0x24
 8004f3e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2101      	movs	r1, #1
 8004f54:	438a      	bics	r2, r1
 8004f56:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	4a0e      	ldr	r2, [pc, #56]	; (8004f98 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004f60:	4013      	ands	r3, r2
 8004f62:	0019      	movs	r1, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	683a      	ldr	r2, [r7, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	0018      	movs	r0, r3
 8004f72:	f000 f813 	bl	8004f9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2284      	movs	r2, #132	; 0x84
 8004f82:	2120      	movs	r1, #32
 8004f84:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2280      	movs	r2, #128	; 0x80
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	0018      	movs	r0, r3
 8004f92:	46bd      	mov	sp, r7
 8004f94:	b004      	add	sp, #16
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	f1ffffff 	.word	0xf1ffffff

08004f9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d108      	bne.n	8004fbe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	226a      	movs	r2, #106	; 0x6a
 8004fb0:	2101      	movs	r1, #1
 8004fb2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2268      	movs	r2, #104	; 0x68
 8004fb8:	2101      	movs	r1, #1
 8004fba:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004fbc:	e043      	b.n	8005046 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004fbe:	260f      	movs	r6, #15
 8004fc0:	19bb      	adds	r3, r7, r6
 8004fc2:	2208      	movs	r2, #8
 8004fc4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004fc6:	200e      	movs	r0, #14
 8004fc8:	183b      	adds	r3, r7, r0
 8004fca:	2208      	movs	r2, #8
 8004fcc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	0e5b      	lsrs	r3, r3, #25
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	240d      	movs	r4, #13
 8004fda:	193b      	adds	r3, r7, r4
 8004fdc:	2107      	movs	r1, #7
 8004fde:	400a      	ands	r2, r1
 8004fe0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	0f5b      	lsrs	r3, r3, #29
 8004fea:	b2da      	uxtb	r2, r3
 8004fec:	250c      	movs	r5, #12
 8004fee:	197b      	adds	r3, r7, r5
 8004ff0:	2107      	movs	r1, #7
 8004ff2:	400a      	ands	r2, r1
 8004ff4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ff6:	183b      	adds	r3, r7, r0
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	197a      	adds	r2, r7, r5
 8004ffc:	7812      	ldrb	r2, [r2, #0]
 8004ffe:	4914      	ldr	r1, [pc, #80]	; (8005050 <UARTEx_SetNbDataToProcess+0xb4>)
 8005000:	5c8a      	ldrb	r2, [r1, r2]
 8005002:	435a      	muls	r2, r3
 8005004:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005006:	197b      	adds	r3, r7, r5
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	4a12      	ldr	r2, [pc, #72]	; (8005054 <UARTEx_SetNbDataToProcess+0xb8>)
 800500c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800500e:	0019      	movs	r1, r3
 8005010:	f7fb f908 	bl	8000224 <__divsi3>
 8005014:	0003      	movs	r3, r0
 8005016:	b299      	uxth	r1, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	226a      	movs	r2, #106	; 0x6a
 800501c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800501e:	19bb      	adds	r3, r7, r6
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	193a      	adds	r2, r7, r4
 8005024:	7812      	ldrb	r2, [r2, #0]
 8005026:	490a      	ldr	r1, [pc, #40]	; (8005050 <UARTEx_SetNbDataToProcess+0xb4>)
 8005028:	5c8a      	ldrb	r2, [r1, r2]
 800502a:	435a      	muls	r2, r3
 800502c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800502e:	193b      	adds	r3, r7, r4
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	4a08      	ldr	r2, [pc, #32]	; (8005054 <UARTEx_SetNbDataToProcess+0xb8>)
 8005034:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005036:	0019      	movs	r1, r3
 8005038:	f7fb f8f4 	bl	8000224 <__divsi3>
 800503c:	0003      	movs	r3, r0
 800503e:	b299      	uxth	r1, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2268      	movs	r2, #104	; 0x68
 8005044:	5299      	strh	r1, [r3, r2]
}
 8005046:	46c0      	nop			; (mov r8, r8)
 8005048:	46bd      	mov	sp, r7
 800504a:	b005      	add	sp, #20
 800504c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800504e:	46c0      	nop			; (mov r8, r8)
 8005050:	08006124 	.word	0x08006124
 8005054:	0800612c 	.word	0x0800612c

08005058 <__errno>:
 8005058:	4b01      	ldr	r3, [pc, #4]	; (8005060 <__errno+0x8>)
 800505a:	6818      	ldr	r0, [r3, #0]
 800505c:	4770      	bx	lr
 800505e:	46c0      	nop			; (mov r8, r8)
 8005060:	20000018 	.word	0x20000018

08005064 <__libc_init_array>:
 8005064:	b570      	push	{r4, r5, r6, lr}
 8005066:	2600      	movs	r6, #0
 8005068:	4d0c      	ldr	r5, [pc, #48]	; (800509c <__libc_init_array+0x38>)
 800506a:	4c0d      	ldr	r4, [pc, #52]	; (80050a0 <__libc_init_array+0x3c>)
 800506c:	1b64      	subs	r4, r4, r5
 800506e:	10a4      	asrs	r4, r4, #2
 8005070:	42a6      	cmp	r6, r4
 8005072:	d109      	bne.n	8005088 <__libc_init_array+0x24>
 8005074:	2600      	movs	r6, #0
 8005076:	f000 ffc5 	bl	8006004 <_init>
 800507a:	4d0a      	ldr	r5, [pc, #40]	; (80050a4 <__libc_init_array+0x40>)
 800507c:	4c0a      	ldr	r4, [pc, #40]	; (80050a8 <__libc_init_array+0x44>)
 800507e:	1b64      	subs	r4, r4, r5
 8005080:	10a4      	asrs	r4, r4, #2
 8005082:	42a6      	cmp	r6, r4
 8005084:	d105      	bne.n	8005092 <__libc_init_array+0x2e>
 8005086:	bd70      	pop	{r4, r5, r6, pc}
 8005088:	00b3      	lsls	r3, r6, #2
 800508a:	58eb      	ldr	r3, [r5, r3]
 800508c:	4798      	blx	r3
 800508e:	3601      	adds	r6, #1
 8005090:	e7ee      	b.n	8005070 <__libc_init_array+0xc>
 8005092:	00b3      	lsls	r3, r6, #2
 8005094:	58eb      	ldr	r3, [r5, r3]
 8005096:	4798      	blx	r3
 8005098:	3601      	adds	r6, #1
 800509a:	e7f2      	b.n	8005082 <__libc_init_array+0x1e>
 800509c:	08006168 	.word	0x08006168
 80050a0:	08006168 	.word	0x08006168
 80050a4:	08006168 	.word	0x08006168
 80050a8:	0800616c 	.word	0x0800616c

080050ac <malloc>:
 80050ac:	b510      	push	{r4, lr}
 80050ae:	4b03      	ldr	r3, [pc, #12]	; (80050bc <malloc+0x10>)
 80050b0:	0001      	movs	r1, r0
 80050b2:	6818      	ldr	r0, [r3, #0]
 80050b4:	f000 f82e 	bl	8005114 <_malloc_r>
 80050b8:	bd10      	pop	{r4, pc}
 80050ba:	46c0      	nop			; (mov r8, r8)
 80050bc:	20000018 	.word	0x20000018

080050c0 <memset>:
 80050c0:	0003      	movs	r3, r0
 80050c2:	1882      	adds	r2, r0, r2
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d100      	bne.n	80050ca <memset+0xa>
 80050c8:	4770      	bx	lr
 80050ca:	7019      	strb	r1, [r3, #0]
 80050cc:	3301      	adds	r3, #1
 80050ce:	e7f9      	b.n	80050c4 <memset+0x4>

080050d0 <sbrk_aligned>:
 80050d0:	b570      	push	{r4, r5, r6, lr}
 80050d2:	4e0f      	ldr	r6, [pc, #60]	; (8005110 <sbrk_aligned+0x40>)
 80050d4:	000d      	movs	r5, r1
 80050d6:	6831      	ldr	r1, [r6, #0]
 80050d8:	0004      	movs	r4, r0
 80050da:	2900      	cmp	r1, #0
 80050dc:	d102      	bne.n	80050e4 <sbrk_aligned+0x14>
 80050de:	f000 f88f 	bl	8005200 <_sbrk_r>
 80050e2:	6030      	str	r0, [r6, #0]
 80050e4:	0029      	movs	r1, r5
 80050e6:	0020      	movs	r0, r4
 80050e8:	f000 f88a 	bl	8005200 <_sbrk_r>
 80050ec:	1c43      	adds	r3, r0, #1
 80050ee:	d00a      	beq.n	8005106 <sbrk_aligned+0x36>
 80050f0:	2303      	movs	r3, #3
 80050f2:	1cc5      	adds	r5, r0, #3
 80050f4:	439d      	bics	r5, r3
 80050f6:	42a8      	cmp	r0, r5
 80050f8:	d007      	beq.n	800510a <sbrk_aligned+0x3a>
 80050fa:	1a29      	subs	r1, r5, r0
 80050fc:	0020      	movs	r0, r4
 80050fe:	f000 f87f 	bl	8005200 <_sbrk_r>
 8005102:	1c43      	adds	r3, r0, #1
 8005104:	d101      	bne.n	800510a <sbrk_aligned+0x3a>
 8005106:	2501      	movs	r5, #1
 8005108:	426d      	negs	r5, r5
 800510a:	0028      	movs	r0, r5
 800510c:	bd70      	pop	{r4, r5, r6, pc}
 800510e:	46c0      	nop			; (mov r8, r8)
 8005110:	200001b0 	.word	0x200001b0

08005114 <_malloc_r>:
 8005114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005116:	2203      	movs	r2, #3
 8005118:	1ccb      	adds	r3, r1, #3
 800511a:	4393      	bics	r3, r2
 800511c:	3308      	adds	r3, #8
 800511e:	0006      	movs	r6, r0
 8005120:	001f      	movs	r7, r3
 8005122:	2b0c      	cmp	r3, #12
 8005124:	d232      	bcs.n	800518c <_malloc_r+0x78>
 8005126:	270c      	movs	r7, #12
 8005128:	42b9      	cmp	r1, r7
 800512a:	d831      	bhi.n	8005190 <_malloc_r+0x7c>
 800512c:	0030      	movs	r0, r6
 800512e:	f000 f879 	bl	8005224 <__malloc_lock>
 8005132:	4d32      	ldr	r5, [pc, #200]	; (80051fc <_malloc_r+0xe8>)
 8005134:	682b      	ldr	r3, [r5, #0]
 8005136:	001c      	movs	r4, r3
 8005138:	2c00      	cmp	r4, #0
 800513a:	d12e      	bne.n	800519a <_malloc_r+0x86>
 800513c:	0039      	movs	r1, r7
 800513e:	0030      	movs	r0, r6
 8005140:	f7ff ffc6 	bl	80050d0 <sbrk_aligned>
 8005144:	0004      	movs	r4, r0
 8005146:	1c43      	adds	r3, r0, #1
 8005148:	d11e      	bne.n	8005188 <_malloc_r+0x74>
 800514a:	682c      	ldr	r4, [r5, #0]
 800514c:	0025      	movs	r5, r4
 800514e:	2d00      	cmp	r5, #0
 8005150:	d14a      	bne.n	80051e8 <_malloc_r+0xd4>
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	0029      	movs	r1, r5
 8005156:	18e3      	adds	r3, r4, r3
 8005158:	0030      	movs	r0, r6
 800515a:	9301      	str	r3, [sp, #4]
 800515c:	f000 f850 	bl	8005200 <_sbrk_r>
 8005160:	9b01      	ldr	r3, [sp, #4]
 8005162:	4283      	cmp	r3, r0
 8005164:	d143      	bne.n	80051ee <_malloc_r+0xda>
 8005166:	6823      	ldr	r3, [r4, #0]
 8005168:	3703      	adds	r7, #3
 800516a:	1aff      	subs	r7, r7, r3
 800516c:	2303      	movs	r3, #3
 800516e:	439f      	bics	r7, r3
 8005170:	3708      	adds	r7, #8
 8005172:	2f0c      	cmp	r7, #12
 8005174:	d200      	bcs.n	8005178 <_malloc_r+0x64>
 8005176:	270c      	movs	r7, #12
 8005178:	0039      	movs	r1, r7
 800517a:	0030      	movs	r0, r6
 800517c:	f7ff ffa8 	bl	80050d0 <sbrk_aligned>
 8005180:	1c43      	adds	r3, r0, #1
 8005182:	d034      	beq.n	80051ee <_malloc_r+0xda>
 8005184:	6823      	ldr	r3, [r4, #0]
 8005186:	19df      	adds	r7, r3, r7
 8005188:	6027      	str	r7, [r4, #0]
 800518a:	e013      	b.n	80051b4 <_malloc_r+0xa0>
 800518c:	2b00      	cmp	r3, #0
 800518e:	dacb      	bge.n	8005128 <_malloc_r+0x14>
 8005190:	230c      	movs	r3, #12
 8005192:	2500      	movs	r5, #0
 8005194:	6033      	str	r3, [r6, #0]
 8005196:	0028      	movs	r0, r5
 8005198:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800519a:	6822      	ldr	r2, [r4, #0]
 800519c:	1bd1      	subs	r1, r2, r7
 800519e:	d420      	bmi.n	80051e2 <_malloc_r+0xce>
 80051a0:	290b      	cmp	r1, #11
 80051a2:	d917      	bls.n	80051d4 <_malloc_r+0xc0>
 80051a4:	19e2      	adds	r2, r4, r7
 80051a6:	6027      	str	r7, [r4, #0]
 80051a8:	42a3      	cmp	r3, r4
 80051aa:	d111      	bne.n	80051d0 <_malloc_r+0xbc>
 80051ac:	602a      	str	r2, [r5, #0]
 80051ae:	6863      	ldr	r3, [r4, #4]
 80051b0:	6011      	str	r1, [r2, #0]
 80051b2:	6053      	str	r3, [r2, #4]
 80051b4:	0030      	movs	r0, r6
 80051b6:	0025      	movs	r5, r4
 80051b8:	f000 f83c 	bl	8005234 <__malloc_unlock>
 80051bc:	2207      	movs	r2, #7
 80051be:	350b      	adds	r5, #11
 80051c0:	1d23      	adds	r3, r4, #4
 80051c2:	4395      	bics	r5, r2
 80051c4:	1aea      	subs	r2, r5, r3
 80051c6:	429d      	cmp	r5, r3
 80051c8:	d0e5      	beq.n	8005196 <_malloc_r+0x82>
 80051ca:	1b5b      	subs	r3, r3, r5
 80051cc:	50a3      	str	r3, [r4, r2]
 80051ce:	e7e2      	b.n	8005196 <_malloc_r+0x82>
 80051d0:	605a      	str	r2, [r3, #4]
 80051d2:	e7ec      	b.n	80051ae <_malloc_r+0x9a>
 80051d4:	6862      	ldr	r2, [r4, #4]
 80051d6:	42a3      	cmp	r3, r4
 80051d8:	d101      	bne.n	80051de <_malloc_r+0xca>
 80051da:	602a      	str	r2, [r5, #0]
 80051dc:	e7ea      	b.n	80051b4 <_malloc_r+0xa0>
 80051de:	605a      	str	r2, [r3, #4]
 80051e0:	e7e8      	b.n	80051b4 <_malloc_r+0xa0>
 80051e2:	0023      	movs	r3, r4
 80051e4:	6864      	ldr	r4, [r4, #4]
 80051e6:	e7a7      	b.n	8005138 <_malloc_r+0x24>
 80051e8:	002c      	movs	r4, r5
 80051ea:	686d      	ldr	r5, [r5, #4]
 80051ec:	e7af      	b.n	800514e <_malloc_r+0x3a>
 80051ee:	230c      	movs	r3, #12
 80051f0:	0030      	movs	r0, r6
 80051f2:	6033      	str	r3, [r6, #0]
 80051f4:	f000 f81e 	bl	8005234 <__malloc_unlock>
 80051f8:	e7cd      	b.n	8005196 <_malloc_r+0x82>
 80051fa:	46c0      	nop			; (mov r8, r8)
 80051fc:	200001ac 	.word	0x200001ac

08005200 <_sbrk_r>:
 8005200:	2300      	movs	r3, #0
 8005202:	b570      	push	{r4, r5, r6, lr}
 8005204:	4d06      	ldr	r5, [pc, #24]	; (8005220 <_sbrk_r+0x20>)
 8005206:	0004      	movs	r4, r0
 8005208:	0008      	movs	r0, r1
 800520a:	602b      	str	r3, [r5, #0]
 800520c:	f7fd fbd0 	bl	80029b0 <_sbrk>
 8005210:	1c43      	adds	r3, r0, #1
 8005212:	d103      	bne.n	800521c <_sbrk_r+0x1c>
 8005214:	682b      	ldr	r3, [r5, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d000      	beq.n	800521c <_sbrk_r+0x1c>
 800521a:	6023      	str	r3, [r4, #0]
 800521c:	bd70      	pop	{r4, r5, r6, pc}
 800521e:	46c0      	nop			; (mov r8, r8)
 8005220:	200001b4 	.word	0x200001b4

08005224 <__malloc_lock>:
 8005224:	b510      	push	{r4, lr}
 8005226:	4802      	ldr	r0, [pc, #8]	; (8005230 <__malloc_lock+0xc>)
 8005228:	f000 f80c 	bl	8005244 <__retarget_lock_acquire_recursive>
 800522c:	bd10      	pop	{r4, pc}
 800522e:	46c0      	nop			; (mov r8, r8)
 8005230:	200001b8 	.word	0x200001b8

08005234 <__malloc_unlock>:
 8005234:	b510      	push	{r4, lr}
 8005236:	4802      	ldr	r0, [pc, #8]	; (8005240 <__malloc_unlock+0xc>)
 8005238:	f000 f805 	bl	8005246 <__retarget_lock_release_recursive>
 800523c:	bd10      	pop	{r4, pc}
 800523e:	46c0      	nop			; (mov r8, r8)
 8005240:	200001b8 	.word	0x200001b8

08005244 <__retarget_lock_acquire_recursive>:
 8005244:	4770      	bx	lr

08005246 <__retarget_lock_release_recursive>:
 8005246:	4770      	bx	lr

08005248 <pow>:
 8005248:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800524a:	0014      	movs	r4, r2
 800524c:	001d      	movs	r5, r3
 800524e:	9000      	str	r0, [sp, #0]
 8005250:	9101      	str	r1, [sp, #4]
 8005252:	f000 f867 	bl	8005324 <__ieee754_pow>
 8005256:	0022      	movs	r2, r4
 8005258:	0006      	movs	r6, r0
 800525a:	000f      	movs	r7, r1
 800525c:	002b      	movs	r3, r5
 800525e:	0020      	movs	r0, r4
 8005260:	0029      	movs	r1, r5
 8005262:	f7fc fe63 	bl	8001f2c <__aeabi_dcmpun>
 8005266:	2800      	cmp	r0, #0
 8005268:	d13f      	bne.n	80052ea <pow+0xa2>
 800526a:	9800      	ldr	r0, [sp, #0]
 800526c:	9901      	ldr	r1, [sp, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	2300      	movs	r3, #0
 8005272:	f7fb f8d3 	bl	800041c <__aeabi_dcmpeq>
 8005276:	2800      	cmp	r0, #0
 8005278:	d019      	beq.n	80052ae <pow+0x66>
 800527a:	2200      	movs	r2, #0
 800527c:	2300      	movs	r3, #0
 800527e:	0020      	movs	r0, r4
 8005280:	0029      	movs	r1, r5
 8005282:	f7fb f8cb 	bl	800041c <__aeabi_dcmpeq>
 8005286:	2800      	cmp	r0, #0
 8005288:	d146      	bne.n	8005318 <pow+0xd0>
 800528a:	0020      	movs	r0, r4
 800528c:	0029      	movs	r1, r5
 800528e:	f000 fe3d 	bl	8005f0c <finite>
 8005292:	2800      	cmp	r0, #0
 8005294:	d029      	beq.n	80052ea <pow+0xa2>
 8005296:	2200      	movs	r2, #0
 8005298:	2300      	movs	r3, #0
 800529a:	0020      	movs	r0, r4
 800529c:	0029      	movs	r1, r5
 800529e:	f7fb f8c3 	bl	8000428 <__aeabi_dcmplt>
 80052a2:	2800      	cmp	r0, #0
 80052a4:	d021      	beq.n	80052ea <pow+0xa2>
 80052a6:	f7ff fed7 	bl	8005058 <__errno>
 80052aa:	2322      	movs	r3, #34	; 0x22
 80052ac:	e01c      	b.n	80052e8 <pow+0xa0>
 80052ae:	0030      	movs	r0, r6
 80052b0:	0039      	movs	r1, r7
 80052b2:	f000 fe2b 	bl	8005f0c <finite>
 80052b6:	2800      	cmp	r0, #0
 80052b8:	d11b      	bne.n	80052f2 <pow+0xaa>
 80052ba:	9800      	ldr	r0, [sp, #0]
 80052bc:	9901      	ldr	r1, [sp, #4]
 80052be:	f000 fe25 	bl	8005f0c <finite>
 80052c2:	2800      	cmp	r0, #0
 80052c4:	d015      	beq.n	80052f2 <pow+0xaa>
 80052c6:	0020      	movs	r0, r4
 80052c8:	0029      	movs	r1, r5
 80052ca:	f000 fe1f 	bl	8005f0c <finite>
 80052ce:	2800      	cmp	r0, #0
 80052d0:	d00f      	beq.n	80052f2 <pow+0xaa>
 80052d2:	0032      	movs	r2, r6
 80052d4:	003b      	movs	r3, r7
 80052d6:	0030      	movs	r0, r6
 80052d8:	0039      	movs	r1, r7
 80052da:	f7fc fe27 	bl	8001f2c <__aeabi_dcmpun>
 80052de:	2800      	cmp	r0, #0
 80052e0:	d0e1      	beq.n	80052a6 <pow+0x5e>
 80052e2:	f7ff feb9 	bl	8005058 <__errno>
 80052e6:	2321      	movs	r3, #33	; 0x21
 80052e8:	6003      	str	r3, [r0, #0]
 80052ea:	0030      	movs	r0, r6
 80052ec:	0039      	movs	r1, r7
 80052ee:	b003      	add	sp, #12
 80052f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052f2:	2200      	movs	r2, #0
 80052f4:	2300      	movs	r3, #0
 80052f6:	0030      	movs	r0, r6
 80052f8:	0039      	movs	r1, r7
 80052fa:	f7fb f88f 	bl	800041c <__aeabi_dcmpeq>
 80052fe:	2800      	cmp	r0, #0
 8005300:	d0f3      	beq.n	80052ea <pow+0xa2>
 8005302:	9800      	ldr	r0, [sp, #0]
 8005304:	9901      	ldr	r1, [sp, #4]
 8005306:	f000 fe01 	bl	8005f0c <finite>
 800530a:	2800      	cmp	r0, #0
 800530c:	d0ed      	beq.n	80052ea <pow+0xa2>
 800530e:	0020      	movs	r0, r4
 8005310:	0029      	movs	r1, r5
 8005312:	f000 fdfb 	bl	8005f0c <finite>
 8005316:	e7c4      	b.n	80052a2 <pow+0x5a>
 8005318:	2600      	movs	r6, #0
 800531a:	4f01      	ldr	r7, [pc, #4]	; (8005320 <pow+0xd8>)
 800531c:	e7e5      	b.n	80052ea <pow+0xa2>
 800531e:	46c0      	nop			; (mov r8, r8)
 8005320:	3ff00000 	.word	0x3ff00000

08005324 <__ieee754_pow>:
 8005324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005326:	b095      	sub	sp, #84	; 0x54
 8005328:	9202      	str	r2, [sp, #8]
 800532a:	9303      	str	r3, [sp, #12]
 800532c:	9b03      	ldr	r3, [sp, #12]
 800532e:	9a03      	ldr	r2, [sp, #12]
 8005330:	9304      	str	r3, [sp, #16]
 8005332:	9b02      	ldr	r3, [sp, #8]
 8005334:	0056      	lsls	r6, r2, #1
 8005336:	001a      	movs	r2, r3
 8005338:	0876      	lsrs	r6, r6, #1
 800533a:	0007      	movs	r7, r0
 800533c:	000d      	movs	r5, r1
 800533e:	4332      	orrs	r2, r6
 8005340:	d119      	bne.n	8005376 <__ieee754_pow+0x52>
 8005342:	2180      	movs	r1, #128	; 0x80
 8005344:	0309      	lsls	r1, r1, #12
 8005346:	4069      	eors	r1, r5
 8005348:	0002      	movs	r2, r0
 800534a:	000b      	movs	r3, r1
 800534c:	1892      	adds	r2, r2, r2
 800534e:	415b      	adcs	r3, r3
 8005350:	4989      	ldr	r1, [pc, #548]	; (8005578 <__ieee754_pow+0x254>)
 8005352:	428b      	cmp	r3, r1
 8005354:	d806      	bhi.n	8005364 <__ieee754_pow+0x40>
 8005356:	d001      	beq.n	800535c <__ieee754_pow+0x38>
 8005358:	f000 fcb6 	bl	8005cc8 <__ieee754_pow+0x9a4>
 800535c:	2a00      	cmp	r2, #0
 800535e:	d101      	bne.n	8005364 <__ieee754_pow+0x40>
 8005360:	f000 fcb2 	bl	8005cc8 <__ieee754_pow+0x9a4>
 8005364:	9a02      	ldr	r2, [sp, #8]
 8005366:	9b03      	ldr	r3, [sp, #12]
 8005368:	0038      	movs	r0, r7
 800536a:	0029      	movs	r1, r5
 800536c:	f7fb f8a2 	bl	80004b4 <__aeabi_dadd>
 8005370:	9000      	str	r0, [sp, #0]
 8005372:	9101      	str	r1, [sp, #4]
 8005374:	e0ad      	b.n	80054d2 <__ieee754_pow+0x1ae>
 8005376:	4a81      	ldr	r2, [pc, #516]	; (800557c <__ieee754_pow+0x258>)
 8005378:	004c      	lsls	r4, r1, #1
 800537a:	9108      	str	r1, [sp, #32]
 800537c:	9000      	str	r0, [sp, #0]
 800537e:	0864      	lsrs	r4, r4, #1
 8005380:	4294      	cmp	r4, r2
 8005382:	dc08      	bgt.n	8005396 <__ieee754_pow+0x72>
 8005384:	d101      	bne.n	800538a <__ieee754_pow+0x66>
 8005386:	2800      	cmp	r0, #0
 8005388:	d1ec      	bne.n	8005364 <__ieee754_pow+0x40>
 800538a:	4a7c      	ldr	r2, [pc, #496]	; (800557c <__ieee754_pow+0x258>)
 800538c:	4296      	cmp	r6, r2
 800538e:	dc02      	bgt.n	8005396 <__ieee754_pow+0x72>
 8005390:	d10c      	bne.n	80053ac <__ieee754_pow+0x88>
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00a      	beq.n	80053ac <__ieee754_pow+0x88>
 8005396:	4b7a      	ldr	r3, [pc, #488]	; (8005580 <__ieee754_pow+0x25c>)
 8005398:	18eb      	adds	r3, r5, r3
 800539a:	433b      	orrs	r3, r7
 800539c:	d1e2      	bne.n	8005364 <__ieee754_pow+0x40>
 800539e:	2180      	movs	r1, #128	; 0x80
 80053a0:	9803      	ldr	r0, [sp, #12]
 80053a2:	0309      	lsls	r1, r1, #12
 80053a4:	4048      	eors	r0, r1
 80053a6:	0003      	movs	r3, r0
 80053a8:	9a02      	ldr	r2, [sp, #8]
 80053aa:	e7cf      	b.n	800534c <__ieee754_pow+0x28>
 80053ac:	2200      	movs	r2, #0
 80053ae:	9206      	str	r2, [sp, #24]
 80053b0:	2d00      	cmp	r5, #0
 80053b2:	da69      	bge.n	8005488 <__ieee754_pow+0x164>
 80053b4:	4a73      	ldr	r2, [pc, #460]	; (8005584 <__ieee754_pow+0x260>)
 80053b6:	4296      	cmp	r6, r2
 80053b8:	dc64      	bgt.n	8005484 <__ieee754_pow+0x160>
 80053ba:	4a73      	ldr	r2, [pc, #460]	; (8005588 <__ieee754_pow+0x264>)
 80053bc:	4296      	cmp	r6, r2
 80053be:	dd11      	ble.n	80053e4 <__ieee754_pow+0xc0>
 80053c0:	4972      	ldr	r1, [pc, #456]	; (800558c <__ieee754_pow+0x268>)
 80053c2:	1532      	asrs	r2, r6, #20
 80053c4:	1852      	adds	r2, r2, r1
 80053c6:	2a14      	cmp	r2, #20
 80053c8:	dd3c      	ble.n	8005444 <__ieee754_pow+0x120>
 80053ca:	2134      	movs	r1, #52	; 0x34
 80053cc:	1a8a      	subs	r2, r1, r2
 80053ce:	9902      	ldr	r1, [sp, #8]
 80053d0:	40d1      	lsrs	r1, r2
 80053d2:	0008      	movs	r0, r1
 80053d4:	4090      	lsls	r0, r2
 80053d6:	4298      	cmp	r0, r3
 80053d8:	d104      	bne.n	80053e4 <__ieee754_pow+0xc0>
 80053da:	2201      	movs	r2, #1
 80053dc:	4011      	ands	r1, r2
 80053de:	1892      	adds	r2, r2, r2
 80053e0:	1a52      	subs	r2, r2, r1
 80053e2:	9206      	str	r2, [sp, #24]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d03c      	beq.n	8005462 <__ieee754_pow+0x13e>
 80053e8:	0038      	movs	r0, r7
 80053ea:	0029      	movs	r1, r5
 80053ec:	f000 fd8b 	bl	8005f06 <fabs>
 80053f0:	9000      	str	r0, [sp, #0]
 80053f2:	9101      	str	r1, [sp, #4]
 80053f4:	2f00      	cmp	r7, #0
 80053f6:	d000      	beq.n	80053fa <__ieee754_pow+0xd6>
 80053f8:	e094      	b.n	8005524 <__ieee754_pow+0x200>
 80053fa:	2c00      	cmp	r4, #0
 80053fc:	d005      	beq.n	800540a <__ieee754_pow+0xe6>
 80053fe:	4a64      	ldr	r2, [pc, #400]	; (8005590 <__ieee754_pow+0x26c>)
 8005400:	00ab      	lsls	r3, r5, #2
 8005402:	089b      	lsrs	r3, r3, #2
 8005404:	4293      	cmp	r3, r2
 8005406:	d000      	beq.n	800540a <__ieee754_pow+0xe6>
 8005408:	e08c      	b.n	8005524 <__ieee754_pow+0x200>
 800540a:	9b04      	ldr	r3, [sp, #16]
 800540c:	2b00      	cmp	r3, #0
 800540e:	da07      	bge.n	8005420 <__ieee754_pow+0xfc>
 8005410:	9a00      	ldr	r2, [sp, #0]
 8005412:	9b01      	ldr	r3, [sp, #4]
 8005414:	2000      	movs	r0, #0
 8005416:	495e      	ldr	r1, [pc, #376]	; (8005590 <__ieee754_pow+0x26c>)
 8005418:	f7fb fb88 	bl	8000b2c <__aeabi_ddiv>
 800541c:	9000      	str	r0, [sp, #0]
 800541e:	9101      	str	r1, [sp, #4]
 8005420:	9b08      	ldr	r3, [sp, #32]
 8005422:	2b00      	cmp	r3, #0
 8005424:	da55      	bge.n	80054d2 <__ieee754_pow+0x1ae>
 8005426:	4b56      	ldr	r3, [pc, #344]	; (8005580 <__ieee754_pow+0x25c>)
 8005428:	18e4      	adds	r4, r4, r3
 800542a:	9b06      	ldr	r3, [sp, #24]
 800542c:	431c      	orrs	r4, r3
 800542e:	d000      	beq.n	8005432 <__ieee754_pow+0x10e>
 8005430:	e06c      	b.n	800550c <__ieee754_pow+0x1e8>
 8005432:	9a00      	ldr	r2, [sp, #0]
 8005434:	9b01      	ldr	r3, [sp, #4]
 8005436:	0010      	movs	r0, r2
 8005438:	0019      	movs	r1, r3
 800543a:	f7fc f9e5 	bl	8001808 <__aeabi_dsub>
 800543e:	0002      	movs	r2, r0
 8005440:	000b      	movs	r3, r1
 8005442:	e01c      	b.n	800547e <__ieee754_pow+0x15a>
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1cf      	bne.n	80053e8 <__ieee754_pow+0xc4>
 8005448:	3314      	adds	r3, #20
 800544a:	1a9a      	subs	r2, r3, r2
 800544c:	0033      	movs	r3, r6
 800544e:	4113      	asrs	r3, r2
 8005450:	0019      	movs	r1, r3
 8005452:	4091      	lsls	r1, r2
 8005454:	42b1      	cmp	r1, r6
 8005456:	d104      	bne.n	8005462 <__ieee754_pow+0x13e>
 8005458:	2201      	movs	r2, #1
 800545a:	4013      	ands	r3, r2
 800545c:	1892      	adds	r2, r2, r2
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	9306      	str	r3, [sp, #24]
 8005462:	4b4b      	ldr	r3, [pc, #300]	; (8005590 <__ieee754_pow+0x26c>)
 8005464:	429e      	cmp	r6, r3
 8005466:	d138      	bne.n	80054da <__ieee754_pow+0x1b6>
 8005468:	0038      	movs	r0, r7
 800546a:	0029      	movs	r1, r5
 800546c:	9b04      	ldr	r3, [sp, #16]
 800546e:	9000      	str	r0, [sp, #0]
 8005470:	9101      	str	r1, [sp, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	da2d      	bge.n	80054d2 <__ieee754_pow+0x1ae>
 8005476:	003a      	movs	r2, r7
 8005478:	002b      	movs	r3, r5
 800547a:	2000      	movs	r0, #0
 800547c:	4944      	ldr	r1, [pc, #272]	; (8005590 <__ieee754_pow+0x26c>)
 800547e:	f7fb fb55 	bl	8000b2c <__aeabi_ddiv>
 8005482:	e775      	b.n	8005370 <__ieee754_pow+0x4c>
 8005484:	2202      	movs	r2, #2
 8005486:	9206      	str	r2, [sp, #24]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1ad      	bne.n	80053e8 <__ieee754_pow+0xc4>
 800548c:	4b3b      	ldr	r3, [pc, #236]	; (800557c <__ieee754_pow+0x258>)
 800548e:	429e      	cmp	r6, r3
 8005490:	d1e7      	bne.n	8005462 <__ieee754_pow+0x13e>
 8005492:	4b3b      	ldr	r3, [pc, #236]	; (8005580 <__ieee754_pow+0x25c>)
 8005494:	18e3      	adds	r3, r4, r3
 8005496:	431f      	orrs	r7, r3
 8005498:	d101      	bne.n	800549e <__ieee754_pow+0x17a>
 800549a:	f000 fc15 	bl	8005cc8 <__ieee754_pow+0x9a4>
 800549e:	4b3a      	ldr	r3, [pc, #232]	; (8005588 <__ieee754_pow+0x264>)
 80054a0:	429c      	cmp	r4, r3
 80054a2:	dd09      	ble.n	80054b8 <__ieee754_pow+0x194>
 80054a4:	9b04      	ldr	r3, [sp, #16]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	da01      	bge.n	80054ae <__ieee754_pow+0x18a>
 80054aa:	f000 fc11 	bl	8005cd0 <__ieee754_pow+0x9ac>
 80054ae:	9b02      	ldr	r3, [sp, #8]
 80054b0:	9c03      	ldr	r4, [sp, #12]
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	9401      	str	r4, [sp, #4]
 80054b6:	e00c      	b.n	80054d2 <__ieee754_pow+0x1ae>
 80054b8:	9b04      	ldr	r3, [sp, #16]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	db01      	blt.n	80054c2 <__ieee754_pow+0x19e>
 80054be:	f000 fc07 	bl	8005cd0 <__ieee754_pow+0x9ac>
 80054c2:	2280      	movs	r2, #128	; 0x80
 80054c4:	0612      	lsls	r2, r2, #24
 80054c6:	4694      	mov	ip, r2
 80054c8:	9b02      	ldr	r3, [sp, #8]
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	9b03      	ldr	r3, [sp, #12]
 80054ce:	4463      	add	r3, ip
 80054d0:	9301      	str	r3, [sp, #4]
 80054d2:	9800      	ldr	r0, [sp, #0]
 80054d4:	9901      	ldr	r1, [sp, #4]
 80054d6:	b015      	add	sp, #84	; 0x54
 80054d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054da:	2380      	movs	r3, #128	; 0x80
 80054dc:	9a04      	ldr	r2, [sp, #16]
 80054de:	05db      	lsls	r3, r3, #23
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d106      	bne.n	80054f2 <__ieee754_pow+0x1ce>
 80054e4:	003a      	movs	r2, r7
 80054e6:	002b      	movs	r3, r5
 80054e8:	0038      	movs	r0, r7
 80054ea:	0029      	movs	r1, r5
 80054ec:	f7fb ff20 	bl	8001330 <__aeabi_dmul>
 80054f0:	e73e      	b.n	8005370 <__ieee754_pow+0x4c>
 80054f2:	4b28      	ldr	r3, [pc, #160]	; (8005594 <__ieee754_pow+0x270>)
 80054f4:	9a04      	ldr	r2, [sp, #16]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d000      	beq.n	80054fc <__ieee754_pow+0x1d8>
 80054fa:	e775      	b.n	80053e8 <__ieee754_pow+0xc4>
 80054fc:	2d00      	cmp	r5, #0
 80054fe:	da00      	bge.n	8005502 <__ieee754_pow+0x1de>
 8005500:	e772      	b.n	80053e8 <__ieee754_pow+0xc4>
 8005502:	0038      	movs	r0, r7
 8005504:	0029      	movs	r1, r5
 8005506:	f000 fc17 	bl	8005d38 <__ieee754_sqrt>
 800550a:	e731      	b.n	8005370 <__ieee754_pow+0x4c>
 800550c:	9b06      	ldr	r3, [sp, #24]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d1df      	bne.n	80054d2 <__ieee754_pow+0x1ae>
 8005512:	9800      	ldr	r0, [sp, #0]
 8005514:	2180      	movs	r1, #128	; 0x80
 8005516:	0002      	movs	r2, r0
 8005518:	9801      	ldr	r0, [sp, #4]
 800551a:	0609      	lsls	r1, r1, #24
 800551c:	1843      	adds	r3, r0, r1
 800551e:	9200      	str	r2, [sp, #0]
 8005520:	9301      	str	r3, [sp, #4]
 8005522:	e7d6      	b.n	80054d2 <__ieee754_pow+0x1ae>
 8005524:	0feb      	lsrs	r3, r5, #31
 8005526:	3b01      	subs	r3, #1
 8005528:	930e      	str	r3, [sp, #56]	; 0x38
 800552a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800552c:	9b06      	ldr	r3, [sp, #24]
 800552e:	4313      	orrs	r3, r2
 8005530:	d104      	bne.n	800553c <__ieee754_pow+0x218>
 8005532:	003a      	movs	r2, r7
 8005534:	002b      	movs	r3, r5
 8005536:	0038      	movs	r0, r7
 8005538:	0029      	movs	r1, r5
 800553a:	e77e      	b.n	800543a <__ieee754_pow+0x116>
 800553c:	4b16      	ldr	r3, [pc, #88]	; (8005598 <__ieee754_pow+0x274>)
 800553e:	429e      	cmp	r6, r3
 8005540:	dc00      	bgt.n	8005544 <__ieee754_pow+0x220>
 8005542:	e0ef      	b.n	8005724 <__ieee754_pow+0x400>
 8005544:	4b15      	ldr	r3, [pc, #84]	; (800559c <__ieee754_pow+0x278>)
 8005546:	429e      	cmp	r6, r3
 8005548:	dd09      	ble.n	800555e <__ieee754_pow+0x23a>
 800554a:	4b0f      	ldr	r3, [pc, #60]	; (8005588 <__ieee754_pow+0x264>)
 800554c:	429c      	cmp	r4, r3
 800554e:	dc0c      	bgt.n	800556a <__ieee754_pow+0x246>
 8005550:	9b04      	ldr	r3, [sp, #16]
 8005552:	2b00      	cmp	r3, #0
 8005554:	da0c      	bge.n	8005570 <__ieee754_pow+0x24c>
 8005556:	2000      	movs	r0, #0
 8005558:	f000 fcce 	bl	8005ef8 <__math_oflow>
 800555c:	e708      	b.n	8005370 <__ieee754_pow+0x4c>
 800555e:	4b10      	ldr	r3, [pc, #64]	; (80055a0 <__ieee754_pow+0x27c>)
 8005560:	429c      	cmp	r4, r3
 8005562:	ddf5      	ble.n	8005550 <__ieee754_pow+0x22c>
 8005564:	4b0a      	ldr	r3, [pc, #40]	; (8005590 <__ieee754_pow+0x26c>)
 8005566:	429c      	cmp	r4, r3
 8005568:	dd1c      	ble.n	80055a4 <__ieee754_pow+0x280>
 800556a:	9b04      	ldr	r3, [sp, #16]
 800556c:	2b00      	cmp	r3, #0
 800556e:	dcf2      	bgt.n	8005556 <__ieee754_pow+0x232>
 8005570:	2000      	movs	r0, #0
 8005572:	f000 fcba 	bl	8005eea <__math_uflow>
 8005576:	e6fb      	b.n	8005370 <__ieee754_pow+0x4c>
 8005578:	fff00000 	.word	0xfff00000
 800557c:	7ff00000 	.word	0x7ff00000
 8005580:	c0100000 	.word	0xc0100000
 8005584:	433fffff 	.word	0x433fffff
 8005588:	3fefffff 	.word	0x3fefffff
 800558c:	fffffc01 	.word	0xfffffc01
 8005590:	3ff00000 	.word	0x3ff00000
 8005594:	3fe00000 	.word	0x3fe00000
 8005598:	41e00000 	.word	0x41e00000
 800559c:	43f00000 	.word	0x43f00000
 80055a0:	3feffffe 	.word	0x3feffffe
 80055a4:	2200      	movs	r2, #0
 80055a6:	9800      	ldr	r0, [sp, #0]
 80055a8:	9901      	ldr	r1, [sp, #4]
 80055aa:	4b52      	ldr	r3, [pc, #328]	; (80056f4 <__ieee754_pow+0x3d0>)
 80055ac:	f7fc f92c 	bl	8001808 <__aeabi_dsub>
 80055b0:	22c0      	movs	r2, #192	; 0xc0
 80055b2:	4b51      	ldr	r3, [pc, #324]	; (80056f8 <__ieee754_pow+0x3d4>)
 80055b4:	05d2      	lsls	r2, r2, #23
 80055b6:	0004      	movs	r4, r0
 80055b8:	000d      	movs	r5, r1
 80055ba:	f7fb feb9 	bl	8001330 <__aeabi_dmul>
 80055be:	4a4f      	ldr	r2, [pc, #316]	; (80056fc <__ieee754_pow+0x3d8>)
 80055c0:	9000      	str	r0, [sp, #0]
 80055c2:	9101      	str	r1, [sp, #4]
 80055c4:	4b4e      	ldr	r3, [pc, #312]	; (8005700 <__ieee754_pow+0x3dc>)
 80055c6:	0020      	movs	r0, r4
 80055c8:	0029      	movs	r1, r5
 80055ca:	f7fb feb1 	bl	8001330 <__aeabi_dmul>
 80055ce:	2200      	movs	r2, #0
 80055d0:	9004      	str	r0, [sp, #16]
 80055d2:	9105      	str	r1, [sp, #20]
 80055d4:	4b4b      	ldr	r3, [pc, #300]	; (8005704 <__ieee754_pow+0x3e0>)
 80055d6:	0020      	movs	r0, r4
 80055d8:	0029      	movs	r1, r5
 80055da:	f7fb fea9 	bl	8001330 <__aeabi_dmul>
 80055de:	0002      	movs	r2, r0
 80055e0:	000b      	movs	r3, r1
 80055e2:	4849      	ldr	r0, [pc, #292]	; (8005708 <__ieee754_pow+0x3e4>)
 80055e4:	4949      	ldr	r1, [pc, #292]	; (800570c <__ieee754_pow+0x3e8>)
 80055e6:	f7fc f90f 	bl	8001808 <__aeabi_dsub>
 80055ea:	0022      	movs	r2, r4
 80055ec:	002b      	movs	r3, r5
 80055ee:	f7fb fe9f 	bl	8001330 <__aeabi_dmul>
 80055f2:	0002      	movs	r2, r0
 80055f4:	000b      	movs	r3, r1
 80055f6:	2000      	movs	r0, #0
 80055f8:	4945      	ldr	r1, [pc, #276]	; (8005710 <__ieee754_pow+0x3ec>)
 80055fa:	f7fc f905 	bl	8001808 <__aeabi_dsub>
 80055fe:	0022      	movs	r2, r4
 8005600:	0006      	movs	r6, r0
 8005602:	000f      	movs	r7, r1
 8005604:	002b      	movs	r3, r5
 8005606:	0020      	movs	r0, r4
 8005608:	0029      	movs	r1, r5
 800560a:	f7fb fe91 	bl	8001330 <__aeabi_dmul>
 800560e:	0002      	movs	r2, r0
 8005610:	000b      	movs	r3, r1
 8005612:	0030      	movs	r0, r6
 8005614:	0039      	movs	r1, r7
 8005616:	f7fb fe8b 	bl	8001330 <__aeabi_dmul>
 800561a:	4a3e      	ldr	r2, [pc, #248]	; (8005714 <__ieee754_pow+0x3f0>)
 800561c:	4b36      	ldr	r3, [pc, #216]	; (80056f8 <__ieee754_pow+0x3d4>)
 800561e:	f7fb fe87 	bl	8001330 <__aeabi_dmul>
 8005622:	0002      	movs	r2, r0
 8005624:	000b      	movs	r3, r1
 8005626:	9804      	ldr	r0, [sp, #16]
 8005628:	9905      	ldr	r1, [sp, #20]
 800562a:	f7fc f8ed 	bl	8001808 <__aeabi_dsub>
 800562e:	0002      	movs	r2, r0
 8005630:	000b      	movs	r3, r1
 8005632:	0004      	movs	r4, r0
 8005634:	000d      	movs	r5, r1
 8005636:	9800      	ldr	r0, [sp, #0]
 8005638:	9901      	ldr	r1, [sp, #4]
 800563a:	f7fa ff3b 	bl	80004b4 <__aeabi_dadd>
 800563e:	9a00      	ldr	r2, [sp, #0]
 8005640:	9b01      	ldr	r3, [sp, #4]
 8005642:	2000      	movs	r0, #0
 8005644:	000f      	movs	r7, r1
 8005646:	0006      	movs	r6, r0
 8005648:	f7fc f8de 	bl	8001808 <__aeabi_dsub>
 800564c:	0002      	movs	r2, r0
 800564e:	000b      	movs	r3, r1
 8005650:	0020      	movs	r0, r4
 8005652:	0029      	movs	r1, r5
 8005654:	f7fc f8d8 	bl	8001808 <__aeabi_dsub>
 8005658:	9b06      	ldr	r3, [sp, #24]
 800565a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800565c:	3b01      	subs	r3, #1
 800565e:	9004      	str	r0, [sp, #16]
 8005660:	9105      	str	r1, [sp, #20]
 8005662:	4313      	orrs	r3, r2
 8005664:	d000      	beq.n	8005668 <__ieee754_pow+0x344>
 8005666:	e1db      	b.n	8005a20 <__ieee754_pow+0x6fc>
 8005668:	2300      	movs	r3, #0
 800566a:	4c2b      	ldr	r4, [pc, #172]	; (8005718 <__ieee754_pow+0x3f4>)
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	9401      	str	r4, [sp, #4]
 8005670:	9c02      	ldr	r4, [sp, #8]
 8005672:	9d03      	ldr	r5, [sp, #12]
 8005674:	9802      	ldr	r0, [sp, #8]
 8005676:	9903      	ldr	r1, [sp, #12]
 8005678:	2400      	movs	r4, #0
 800567a:	002b      	movs	r3, r5
 800567c:	0022      	movs	r2, r4
 800567e:	f7fc f8c3 	bl	8001808 <__aeabi_dsub>
 8005682:	0032      	movs	r2, r6
 8005684:	003b      	movs	r3, r7
 8005686:	f7fb fe53 	bl	8001330 <__aeabi_dmul>
 800568a:	9a02      	ldr	r2, [sp, #8]
 800568c:	9b03      	ldr	r3, [sp, #12]
 800568e:	9006      	str	r0, [sp, #24]
 8005690:	9107      	str	r1, [sp, #28]
 8005692:	9804      	ldr	r0, [sp, #16]
 8005694:	9905      	ldr	r1, [sp, #20]
 8005696:	f7fb fe4b 	bl	8001330 <__aeabi_dmul>
 800569a:	0002      	movs	r2, r0
 800569c:	000b      	movs	r3, r1
 800569e:	9806      	ldr	r0, [sp, #24]
 80056a0:	9907      	ldr	r1, [sp, #28]
 80056a2:	f7fa ff07 	bl	80004b4 <__aeabi_dadd>
 80056a6:	0022      	movs	r2, r4
 80056a8:	002b      	movs	r3, r5
 80056aa:	9004      	str	r0, [sp, #16]
 80056ac:	9105      	str	r1, [sp, #20]
 80056ae:	0030      	movs	r0, r6
 80056b0:	0039      	movs	r1, r7
 80056b2:	f7fb fe3d 	bl	8001330 <__aeabi_dmul>
 80056b6:	0006      	movs	r6, r0
 80056b8:	000f      	movs	r7, r1
 80056ba:	000b      	movs	r3, r1
 80056bc:	0002      	movs	r2, r0
 80056be:	9804      	ldr	r0, [sp, #16]
 80056c0:	9905      	ldr	r1, [sp, #20]
 80056c2:	9606      	str	r6, [sp, #24]
 80056c4:	9707      	str	r7, [sp, #28]
 80056c6:	f7fa fef5 	bl	80004b4 <__aeabi_dadd>
 80056ca:	4b14      	ldr	r3, [pc, #80]	; (800571c <__ieee754_pow+0x3f8>)
 80056cc:	0005      	movs	r5, r0
 80056ce:	000c      	movs	r4, r1
 80056d0:	9108      	str	r1, [sp, #32]
 80056d2:	4299      	cmp	r1, r3
 80056d4:	dc00      	bgt.n	80056d8 <__ieee754_pow+0x3b4>
 80056d6:	e2d6      	b.n	8005c86 <__ieee754_pow+0x962>
 80056d8:	4b11      	ldr	r3, [pc, #68]	; (8005720 <__ieee754_pow+0x3fc>)
 80056da:	18cb      	adds	r3, r1, r3
 80056dc:	4303      	orrs	r3, r0
 80056de:	d100      	bne.n	80056e2 <__ieee754_pow+0x3be>
 80056e0:	e1d8      	b.n	8005a94 <__ieee754_pow+0x770>
 80056e2:	9800      	ldr	r0, [sp, #0]
 80056e4:	9901      	ldr	r1, [sp, #4]
 80056e6:	2300      	movs	r3, #0
 80056e8:	2200      	movs	r2, #0
 80056ea:	f7fa fe9d 	bl	8000428 <__aeabi_dcmplt>
 80056ee:	1e43      	subs	r3, r0, #1
 80056f0:	4198      	sbcs	r0, r3
 80056f2:	e731      	b.n	8005558 <__ieee754_pow+0x234>
 80056f4:	3ff00000 	.word	0x3ff00000
 80056f8:	3ff71547 	.word	0x3ff71547
 80056fc:	f85ddf44 	.word	0xf85ddf44
 8005700:	3e54ae0b 	.word	0x3e54ae0b
 8005704:	3fd00000 	.word	0x3fd00000
 8005708:	55555555 	.word	0x55555555
 800570c:	3fd55555 	.word	0x3fd55555
 8005710:	3fe00000 	.word	0x3fe00000
 8005714:	652b82fe 	.word	0x652b82fe
 8005718:	bff00000 	.word	0xbff00000
 800571c:	408fffff 	.word	0x408fffff
 8005720:	bf700000 	.word	0xbf700000
 8005724:	4bc0      	ldr	r3, [pc, #768]	; (8005a28 <__ieee754_pow+0x704>)
 8005726:	2200      	movs	r2, #0
 8005728:	422b      	tst	r3, r5
 800572a:	d10a      	bne.n	8005742 <__ieee754_pow+0x41e>
 800572c:	9800      	ldr	r0, [sp, #0]
 800572e:	9901      	ldr	r1, [sp, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	4bbe      	ldr	r3, [pc, #760]	; (8005a2c <__ieee754_pow+0x708>)
 8005734:	f7fb fdfc 	bl	8001330 <__aeabi_dmul>
 8005738:	2235      	movs	r2, #53	; 0x35
 800573a:	9000      	str	r0, [sp, #0]
 800573c:	9101      	str	r1, [sp, #4]
 800573e:	9c01      	ldr	r4, [sp, #4]
 8005740:	4252      	negs	r2, r2
 8005742:	49bb      	ldr	r1, [pc, #748]	; (8005a30 <__ieee754_pow+0x70c>)
 8005744:	1523      	asrs	r3, r4, #20
 8005746:	185b      	adds	r3, r3, r1
 8005748:	189b      	adds	r3, r3, r2
 800574a:	0324      	lsls	r4, r4, #12
 800574c:	4db9      	ldr	r5, [pc, #740]	; (8005a34 <__ieee754_pow+0x710>)
 800574e:	930d      	str	r3, [sp, #52]	; 0x34
 8005750:	4bb9      	ldr	r3, [pc, #740]	; (8005a38 <__ieee754_pow+0x714>)
 8005752:	0b22      	lsrs	r2, r4, #12
 8005754:	4315      	orrs	r5, r2
 8005756:	2400      	movs	r4, #0
 8005758:	429a      	cmp	r2, r3
 800575a:	dd09      	ble.n	8005770 <__ieee754_pow+0x44c>
 800575c:	4bb7      	ldr	r3, [pc, #732]	; (8005a3c <__ieee754_pow+0x718>)
 800575e:	3401      	adds	r4, #1
 8005760:	429a      	cmp	r2, r3
 8005762:	dd05      	ble.n	8005770 <__ieee754_pow+0x44c>
 8005764:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005766:	191b      	adds	r3, r3, r4
 8005768:	2400      	movs	r4, #0
 800576a:	930d      	str	r3, [sp, #52]	; 0x34
 800576c:	4bb4      	ldr	r3, [pc, #720]	; (8005a40 <__ieee754_pow+0x71c>)
 800576e:	18ed      	adds	r5, r5, r3
 8005770:	00e3      	lsls	r3, r4, #3
 8005772:	930f      	str	r3, [sp, #60]	; 0x3c
 8005774:	4bb3      	ldr	r3, [pc, #716]	; (8005a44 <__ieee754_pow+0x720>)
 8005776:	00e2      	lsls	r2, r4, #3
 8005778:	189b      	adds	r3, r3, r2
 800577a:	9800      	ldr	r0, [sp, #0]
 800577c:	9901      	ldr	r1, [sp, #4]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	0029      	movs	r1, r5
 8005784:	0006      	movs	r6, r0
 8005786:	920a      	str	r2, [sp, #40]	; 0x28
 8005788:	930b      	str	r3, [sp, #44]	; 0x2c
 800578a:	f7fc f83d 	bl	8001808 <__aeabi_dsub>
 800578e:	0032      	movs	r2, r6
 8005790:	002b      	movs	r3, r5
 8005792:	9010      	str	r0, [sp, #64]	; 0x40
 8005794:	9111      	str	r1, [sp, #68]	; 0x44
 8005796:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005798:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800579a:	f7fa fe8b 	bl	80004b4 <__aeabi_dadd>
 800579e:	0002      	movs	r2, r0
 80057a0:	000b      	movs	r3, r1
 80057a2:	2000      	movs	r0, #0
 80057a4:	49a3      	ldr	r1, [pc, #652]	; (8005a34 <__ieee754_pow+0x710>)
 80057a6:	f7fb f9c1 	bl	8000b2c <__aeabi_ddiv>
 80057aa:	0002      	movs	r2, r0
 80057ac:	000b      	movs	r3, r1
 80057ae:	9012      	str	r0, [sp, #72]	; 0x48
 80057b0:	9113      	str	r1, [sp, #76]	; 0x4c
 80057b2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80057b4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80057b6:	f7fb fdbb 	bl	8001330 <__aeabi_dmul>
 80057ba:	9008      	str	r0, [sp, #32]
 80057bc:	9109      	str	r1, [sp, #36]	; 0x24
 80057be:	9a08      	ldr	r2, [sp, #32]
 80057c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057c2:	2180      	movs	r1, #128	; 0x80
 80057c4:	9204      	str	r2, [sp, #16]
 80057c6:	9305      	str	r3, [sp, #20]
 80057c8:	2300      	movs	r3, #0
 80057ca:	002f      	movs	r7, r5
 80057cc:	0589      	lsls	r1, r1, #22
 80057ce:	106d      	asrs	r5, r5, #1
 80057d0:	430d      	orrs	r5, r1
 80057d2:	2180      	movs	r1, #128	; 0x80
 80057d4:	9304      	str	r3, [sp, #16]
 80057d6:	9a04      	ldr	r2, [sp, #16]
 80057d8:	9b05      	ldr	r3, [sp, #20]
 80057da:	9200      	str	r2, [sp, #0]
 80057dc:	9301      	str	r3, [sp, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	0309      	lsls	r1, r1, #12
 80057e2:	186d      	adds	r5, r5, r1
 80057e4:	04a1      	lsls	r1, r4, #18
 80057e6:	186b      	adds	r3, r5, r1
 80057e8:	9800      	ldr	r0, [sp, #0]
 80057ea:	9901      	ldr	r1, [sp, #4]
 80057ec:	0014      	movs	r4, r2
 80057ee:	001d      	movs	r5, r3
 80057f0:	f7fb fd9e 	bl	8001330 <__aeabi_dmul>
 80057f4:	0002      	movs	r2, r0
 80057f6:	000b      	movs	r3, r1
 80057f8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80057fa:	9911      	ldr	r1, [sp, #68]	; 0x44
 80057fc:	f7fc f804 	bl	8001808 <__aeabi_dsub>
 8005800:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005804:	9010      	str	r0, [sp, #64]	; 0x40
 8005806:	9111      	str	r1, [sp, #68]	; 0x44
 8005808:	0020      	movs	r0, r4
 800580a:	0029      	movs	r1, r5
 800580c:	f7fb fffc 	bl	8001808 <__aeabi_dsub>
 8005810:	0002      	movs	r2, r0
 8005812:	000b      	movs	r3, r1
 8005814:	0030      	movs	r0, r6
 8005816:	0039      	movs	r1, r7
 8005818:	f7fb fff6 	bl	8001808 <__aeabi_dsub>
 800581c:	9a00      	ldr	r2, [sp, #0]
 800581e:	9b01      	ldr	r3, [sp, #4]
 8005820:	f7fb fd86 	bl	8001330 <__aeabi_dmul>
 8005824:	0002      	movs	r2, r0
 8005826:	000b      	movs	r3, r1
 8005828:	9810      	ldr	r0, [sp, #64]	; 0x40
 800582a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800582c:	f7fb ffec 	bl	8001808 <__aeabi_dsub>
 8005830:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005832:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005834:	f7fb fd7c 	bl	8001330 <__aeabi_dmul>
 8005838:	9a08      	ldr	r2, [sp, #32]
 800583a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800583c:	900a      	str	r0, [sp, #40]	; 0x28
 800583e:	910b      	str	r1, [sp, #44]	; 0x2c
 8005840:	0010      	movs	r0, r2
 8005842:	0019      	movs	r1, r3
 8005844:	f7fb fd74 	bl	8001330 <__aeabi_dmul>
 8005848:	0006      	movs	r6, r0
 800584a:	000f      	movs	r7, r1
 800584c:	4a7e      	ldr	r2, [pc, #504]	; (8005a48 <__ieee754_pow+0x724>)
 800584e:	4b7f      	ldr	r3, [pc, #508]	; (8005a4c <__ieee754_pow+0x728>)
 8005850:	f7fb fd6e 	bl	8001330 <__aeabi_dmul>
 8005854:	4a7e      	ldr	r2, [pc, #504]	; (8005a50 <__ieee754_pow+0x72c>)
 8005856:	4b7f      	ldr	r3, [pc, #508]	; (8005a54 <__ieee754_pow+0x730>)
 8005858:	f7fa fe2c 	bl	80004b4 <__aeabi_dadd>
 800585c:	0032      	movs	r2, r6
 800585e:	003b      	movs	r3, r7
 8005860:	f7fb fd66 	bl	8001330 <__aeabi_dmul>
 8005864:	4a7c      	ldr	r2, [pc, #496]	; (8005a58 <__ieee754_pow+0x734>)
 8005866:	4b7d      	ldr	r3, [pc, #500]	; (8005a5c <__ieee754_pow+0x738>)
 8005868:	f7fa fe24 	bl	80004b4 <__aeabi_dadd>
 800586c:	0032      	movs	r2, r6
 800586e:	003b      	movs	r3, r7
 8005870:	f7fb fd5e 	bl	8001330 <__aeabi_dmul>
 8005874:	4a7a      	ldr	r2, [pc, #488]	; (8005a60 <__ieee754_pow+0x73c>)
 8005876:	4b7b      	ldr	r3, [pc, #492]	; (8005a64 <__ieee754_pow+0x740>)
 8005878:	f7fa fe1c 	bl	80004b4 <__aeabi_dadd>
 800587c:	0032      	movs	r2, r6
 800587e:	003b      	movs	r3, r7
 8005880:	f7fb fd56 	bl	8001330 <__aeabi_dmul>
 8005884:	4a78      	ldr	r2, [pc, #480]	; (8005a68 <__ieee754_pow+0x744>)
 8005886:	4b79      	ldr	r3, [pc, #484]	; (8005a6c <__ieee754_pow+0x748>)
 8005888:	f7fa fe14 	bl	80004b4 <__aeabi_dadd>
 800588c:	0032      	movs	r2, r6
 800588e:	003b      	movs	r3, r7
 8005890:	f7fb fd4e 	bl	8001330 <__aeabi_dmul>
 8005894:	4a76      	ldr	r2, [pc, #472]	; (8005a70 <__ieee754_pow+0x74c>)
 8005896:	4b77      	ldr	r3, [pc, #476]	; (8005a74 <__ieee754_pow+0x750>)
 8005898:	f7fa fe0c 	bl	80004b4 <__aeabi_dadd>
 800589c:	0032      	movs	r2, r6
 800589e:	0004      	movs	r4, r0
 80058a0:	000d      	movs	r5, r1
 80058a2:	003b      	movs	r3, r7
 80058a4:	0030      	movs	r0, r6
 80058a6:	0039      	movs	r1, r7
 80058a8:	f7fb fd42 	bl	8001330 <__aeabi_dmul>
 80058ac:	0002      	movs	r2, r0
 80058ae:	000b      	movs	r3, r1
 80058b0:	0020      	movs	r0, r4
 80058b2:	0029      	movs	r1, r5
 80058b4:	f7fb fd3c 	bl	8001330 <__aeabi_dmul>
 80058b8:	9a00      	ldr	r2, [sp, #0]
 80058ba:	9b01      	ldr	r3, [sp, #4]
 80058bc:	0004      	movs	r4, r0
 80058be:	000d      	movs	r5, r1
 80058c0:	9808      	ldr	r0, [sp, #32]
 80058c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058c4:	f7fa fdf6 	bl	80004b4 <__aeabi_dadd>
 80058c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058cc:	f7fb fd30 	bl	8001330 <__aeabi_dmul>
 80058d0:	0022      	movs	r2, r4
 80058d2:	002b      	movs	r3, r5
 80058d4:	f7fa fdee 	bl	80004b4 <__aeabi_dadd>
 80058d8:	9a00      	ldr	r2, [sp, #0]
 80058da:	9b01      	ldr	r3, [sp, #4]
 80058dc:	9010      	str	r0, [sp, #64]	; 0x40
 80058de:	9111      	str	r1, [sp, #68]	; 0x44
 80058e0:	0010      	movs	r0, r2
 80058e2:	0019      	movs	r1, r3
 80058e4:	f7fb fd24 	bl	8001330 <__aeabi_dmul>
 80058e8:	2200      	movs	r2, #0
 80058ea:	4b63      	ldr	r3, [pc, #396]	; (8005a78 <__ieee754_pow+0x754>)
 80058ec:	0004      	movs	r4, r0
 80058ee:	000d      	movs	r5, r1
 80058f0:	f7fa fde0 	bl	80004b4 <__aeabi_dadd>
 80058f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80058f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80058f8:	f7fa fddc 	bl	80004b4 <__aeabi_dadd>
 80058fc:	2600      	movs	r6, #0
 80058fe:	000f      	movs	r7, r1
 8005900:	0032      	movs	r2, r6
 8005902:	000b      	movs	r3, r1
 8005904:	9800      	ldr	r0, [sp, #0]
 8005906:	9901      	ldr	r1, [sp, #4]
 8005908:	f7fb fd12 	bl	8001330 <__aeabi_dmul>
 800590c:	2200      	movs	r2, #0
 800590e:	9000      	str	r0, [sp, #0]
 8005910:	9101      	str	r1, [sp, #4]
 8005912:	4b59      	ldr	r3, [pc, #356]	; (8005a78 <__ieee754_pow+0x754>)
 8005914:	0030      	movs	r0, r6
 8005916:	0039      	movs	r1, r7
 8005918:	f7fb ff76 	bl	8001808 <__aeabi_dsub>
 800591c:	0022      	movs	r2, r4
 800591e:	002b      	movs	r3, r5
 8005920:	f7fb ff72 	bl	8001808 <__aeabi_dsub>
 8005924:	0002      	movs	r2, r0
 8005926:	000b      	movs	r3, r1
 8005928:	9810      	ldr	r0, [sp, #64]	; 0x40
 800592a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800592c:	f7fb ff6c 	bl	8001808 <__aeabi_dsub>
 8005930:	9a08      	ldr	r2, [sp, #32]
 8005932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005934:	f7fb fcfc 	bl	8001330 <__aeabi_dmul>
 8005938:	0032      	movs	r2, r6
 800593a:	0004      	movs	r4, r0
 800593c:	000d      	movs	r5, r1
 800593e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005940:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005942:	003b      	movs	r3, r7
 8005944:	f7fb fcf4 	bl	8001330 <__aeabi_dmul>
 8005948:	0002      	movs	r2, r0
 800594a:	000b      	movs	r3, r1
 800594c:	0020      	movs	r0, r4
 800594e:	0029      	movs	r1, r5
 8005950:	f7fa fdb0 	bl	80004b4 <__aeabi_dadd>
 8005954:	0004      	movs	r4, r0
 8005956:	000d      	movs	r5, r1
 8005958:	0002      	movs	r2, r0
 800595a:	000b      	movs	r3, r1
 800595c:	9800      	ldr	r0, [sp, #0]
 800595e:	9901      	ldr	r1, [sp, #4]
 8005960:	f7fa fda8 	bl	80004b4 <__aeabi_dadd>
 8005964:	2600      	movs	r6, #0
 8005966:	22e0      	movs	r2, #224	; 0xe0
 8005968:	4b44      	ldr	r3, [pc, #272]	; (8005a7c <__ieee754_pow+0x758>)
 800596a:	0612      	lsls	r2, r2, #24
 800596c:	0030      	movs	r0, r6
 800596e:	000f      	movs	r7, r1
 8005970:	f7fb fcde 	bl	8001330 <__aeabi_dmul>
 8005974:	9008      	str	r0, [sp, #32]
 8005976:	9109      	str	r1, [sp, #36]	; 0x24
 8005978:	9a00      	ldr	r2, [sp, #0]
 800597a:	9b01      	ldr	r3, [sp, #4]
 800597c:	0039      	movs	r1, r7
 800597e:	0030      	movs	r0, r6
 8005980:	f7fb ff42 	bl	8001808 <__aeabi_dsub>
 8005984:	0002      	movs	r2, r0
 8005986:	000b      	movs	r3, r1
 8005988:	0020      	movs	r0, r4
 800598a:	0029      	movs	r1, r5
 800598c:	f7fb ff3c 	bl	8001808 <__aeabi_dsub>
 8005990:	4a3b      	ldr	r2, [pc, #236]	; (8005a80 <__ieee754_pow+0x75c>)
 8005992:	4b3a      	ldr	r3, [pc, #232]	; (8005a7c <__ieee754_pow+0x758>)
 8005994:	f7fb fccc 	bl	8001330 <__aeabi_dmul>
 8005998:	4a3a      	ldr	r2, [pc, #232]	; (8005a84 <__ieee754_pow+0x760>)
 800599a:	0004      	movs	r4, r0
 800599c:	000d      	movs	r5, r1
 800599e:	4b3a      	ldr	r3, [pc, #232]	; (8005a88 <__ieee754_pow+0x764>)
 80059a0:	0039      	movs	r1, r7
 80059a2:	0030      	movs	r0, r6
 80059a4:	f7fb fcc4 	bl	8001330 <__aeabi_dmul>
 80059a8:	0002      	movs	r2, r0
 80059aa:	000b      	movs	r3, r1
 80059ac:	0020      	movs	r0, r4
 80059ae:	0029      	movs	r1, r5
 80059b0:	f7fa fd80 	bl	80004b4 <__aeabi_dadd>
 80059b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80059b6:	4b35      	ldr	r3, [pc, #212]	; (8005a8c <__ieee754_pow+0x768>)
 80059b8:	189b      	adds	r3, r3, r2
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f7fa fd79 	bl	80004b4 <__aeabi_dadd>
 80059c2:	900a      	str	r0, [sp, #40]	; 0x28
 80059c4:	910b      	str	r1, [sp, #44]	; 0x2c
 80059c6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80059c8:	f7fc fb04 	bl	8001fd4 <__aeabi_i2d>
 80059cc:	0004      	movs	r4, r0
 80059ce:	000d      	movs	r5, r1
 80059d0:	9808      	ldr	r0, [sp, #32]
 80059d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80059d6:	4b2e      	ldr	r3, [pc, #184]	; (8005a90 <__ieee754_pow+0x76c>)
 80059d8:	189b      	adds	r3, r3, r2
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	9200      	str	r2, [sp, #0]
 80059e0:	9301      	str	r3, [sp, #4]
 80059e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059e6:	f7fa fd65 	bl	80004b4 <__aeabi_dadd>
 80059ea:	9a00      	ldr	r2, [sp, #0]
 80059ec:	9b01      	ldr	r3, [sp, #4]
 80059ee:	f7fa fd61 	bl	80004b4 <__aeabi_dadd>
 80059f2:	0022      	movs	r2, r4
 80059f4:	002b      	movs	r3, r5
 80059f6:	f7fa fd5d 	bl	80004b4 <__aeabi_dadd>
 80059fa:	0022      	movs	r2, r4
 80059fc:	002b      	movs	r3, r5
 80059fe:	0030      	movs	r0, r6
 8005a00:	000f      	movs	r7, r1
 8005a02:	f7fb ff01 	bl	8001808 <__aeabi_dsub>
 8005a06:	9a00      	ldr	r2, [sp, #0]
 8005a08:	9b01      	ldr	r3, [sp, #4]
 8005a0a:	f7fb fefd 	bl	8001808 <__aeabi_dsub>
 8005a0e:	9a08      	ldr	r2, [sp, #32]
 8005a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a12:	f7fb fef9 	bl	8001808 <__aeabi_dsub>
 8005a16:	0002      	movs	r2, r0
 8005a18:	000b      	movs	r3, r1
 8005a1a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005a1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a1e:	e619      	b.n	8005654 <__ieee754_pow+0x330>
 8005a20:	2300      	movs	r3, #0
 8005a22:	4c04      	ldr	r4, [pc, #16]	; (8005a34 <__ieee754_pow+0x710>)
 8005a24:	e622      	b.n	800566c <__ieee754_pow+0x348>
 8005a26:	46c0      	nop			; (mov r8, r8)
 8005a28:	7ff00000 	.word	0x7ff00000
 8005a2c:	43400000 	.word	0x43400000
 8005a30:	fffffc01 	.word	0xfffffc01
 8005a34:	3ff00000 	.word	0x3ff00000
 8005a38:	0003988e 	.word	0x0003988e
 8005a3c:	000bb679 	.word	0x000bb679
 8005a40:	fff00000 	.word	0xfff00000
 8005a44:	08006138 	.word	0x08006138
 8005a48:	4a454eef 	.word	0x4a454eef
 8005a4c:	3fca7e28 	.word	0x3fca7e28
 8005a50:	93c9db65 	.word	0x93c9db65
 8005a54:	3fcd864a 	.word	0x3fcd864a
 8005a58:	a91d4101 	.word	0xa91d4101
 8005a5c:	3fd17460 	.word	0x3fd17460
 8005a60:	518f264d 	.word	0x518f264d
 8005a64:	3fd55555 	.word	0x3fd55555
 8005a68:	db6fabff 	.word	0xdb6fabff
 8005a6c:	3fdb6db6 	.word	0x3fdb6db6
 8005a70:	33333303 	.word	0x33333303
 8005a74:	3fe33333 	.word	0x3fe33333
 8005a78:	40080000 	.word	0x40080000
 8005a7c:	3feec709 	.word	0x3feec709
 8005a80:	dc3a03fd 	.word	0xdc3a03fd
 8005a84:	145b01f5 	.word	0x145b01f5
 8005a88:	be3e2fe0 	.word	0xbe3e2fe0
 8005a8c:	08006158 	.word	0x08006158
 8005a90:	08006148 	.word	0x08006148
 8005a94:	4a90      	ldr	r2, [pc, #576]	; (8005cd8 <__ieee754_pow+0x9b4>)
 8005a96:	4b91      	ldr	r3, [pc, #580]	; (8005cdc <__ieee754_pow+0x9b8>)
 8005a98:	9804      	ldr	r0, [sp, #16]
 8005a9a:	9905      	ldr	r1, [sp, #20]
 8005a9c:	f7fa fd0a 	bl	80004b4 <__aeabi_dadd>
 8005aa0:	0032      	movs	r2, r6
 8005aa2:	9002      	str	r0, [sp, #8]
 8005aa4:	9103      	str	r1, [sp, #12]
 8005aa6:	003b      	movs	r3, r7
 8005aa8:	0028      	movs	r0, r5
 8005aaa:	0021      	movs	r1, r4
 8005aac:	f7fb feac 	bl	8001808 <__aeabi_dsub>
 8005ab0:	0002      	movs	r2, r0
 8005ab2:	000b      	movs	r3, r1
 8005ab4:	9802      	ldr	r0, [sp, #8]
 8005ab6:	9903      	ldr	r1, [sp, #12]
 8005ab8:	f7fa fcca 	bl	8000450 <__aeabi_dcmpgt>
 8005abc:	2800      	cmp	r0, #0
 8005abe:	d000      	beq.n	8005ac2 <__ieee754_pow+0x79e>
 8005ac0:	e60f      	b.n	80056e2 <__ieee754_pow+0x3be>
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	4a86      	ldr	r2, [pc, #536]	; (8005ce0 <__ieee754_pow+0x9bc>)
 8005ac6:	0063      	lsls	r3, r4, #1
 8005ac8:	085b      	lsrs	r3, r3, #1
 8005aca:	9102      	str	r1, [sp, #8]
 8005acc:	4293      	cmp	r3, r2
 8005ace:	dd25      	ble.n	8005b1c <__ieee754_pow+0x7f8>
 8005ad0:	4a84      	ldr	r2, [pc, #528]	; (8005ce4 <__ieee754_pow+0x9c0>)
 8005ad2:	151b      	asrs	r3, r3, #20
 8005ad4:	189b      	adds	r3, r3, r2
 8005ad6:	2280      	movs	r2, #128	; 0x80
 8005ad8:	0352      	lsls	r2, r2, #13
 8005ada:	4694      	mov	ip, r2
 8005adc:	411a      	asrs	r2, r3
 8005ade:	1914      	adds	r4, r2, r4
 8005ae0:	4b81      	ldr	r3, [pc, #516]	; (8005ce8 <__ieee754_pow+0x9c4>)
 8005ae2:	0060      	lsls	r0, r4, #1
 8005ae4:	4d81      	ldr	r5, [pc, #516]	; (8005cec <__ieee754_pow+0x9c8>)
 8005ae6:	0d40      	lsrs	r0, r0, #21
 8005ae8:	18c0      	adds	r0, r0, r3
 8005aea:	4105      	asrs	r5, r0
 8005aec:	0021      	movs	r1, r4
 8005aee:	43a9      	bics	r1, r5
 8005af0:	000b      	movs	r3, r1
 8005af2:	4661      	mov	r1, ip
 8005af4:	0324      	lsls	r4, r4, #12
 8005af6:	0b24      	lsrs	r4, r4, #12
 8005af8:	4321      	orrs	r1, r4
 8005afa:	2414      	movs	r4, #20
 8005afc:	1a20      	subs	r0, r4, r0
 8005afe:	4101      	asrs	r1, r0
 8005b00:	9102      	str	r1, [sp, #8]
 8005b02:	9908      	ldr	r1, [sp, #32]
 8005b04:	2200      	movs	r2, #0
 8005b06:	2900      	cmp	r1, #0
 8005b08:	da02      	bge.n	8005b10 <__ieee754_pow+0x7ec>
 8005b0a:	9902      	ldr	r1, [sp, #8]
 8005b0c:	4249      	negs	r1, r1
 8005b0e:	9102      	str	r1, [sp, #8]
 8005b10:	0030      	movs	r0, r6
 8005b12:	0039      	movs	r1, r7
 8005b14:	f7fb fe78 	bl	8001808 <__aeabi_dsub>
 8005b18:	9006      	str	r0, [sp, #24]
 8005b1a:	9107      	str	r1, [sp, #28]
 8005b1c:	9a04      	ldr	r2, [sp, #16]
 8005b1e:	9b05      	ldr	r3, [sp, #20]
 8005b20:	9806      	ldr	r0, [sp, #24]
 8005b22:	9907      	ldr	r1, [sp, #28]
 8005b24:	2600      	movs	r6, #0
 8005b26:	f7fa fcc5 	bl	80004b4 <__aeabi_dadd>
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	0030      	movs	r0, r6
 8005b2e:	4b70      	ldr	r3, [pc, #448]	; (8005cf0 <__ieee754_pow+0x9cc>)
 8005b30:	000f      	movs	r7, r1
 8005b32:	f7fb fbfd 	bl	8001330 <__aeabi_dmul>
 8005b36:	9a06      	ldr	r2, [sp, #24]
 8005b38:	9b07      	ldr	r3, [sp, #28]
 8005b3a:	9008      	str	r0, [sp, #32]
 8005b3c:	9109      	str	r1, [sp, #36]	; 0x24
 8005b3e:	0030      	movs	r0, r6
 8005b40:	0039      	movs	r1, r7
 8005b42:	f7fb fe61 	bl	8001808 <__aeabi_dsub>
 8005b46:	0002      	movs	r2, r0
 8005b48:	000b      	movs	r3, r1
 8005b4a:	9804      	ldr	r0, [sp, #16]
 8005b4c:	9905      	ldr	r1, [sp, #20]
 8005b4e:	f7fb fe5b 	bl	8001808 <__aeabi_dsub>
 8005b52:	4a68      	ldr	r2, [pc, #416]	; (8005cf4 <__ieee754_pow+0x9d0>)
 8005b54:	4b68      	ldr	r3, [pc, #416]	; (8005cf8 <__ieee754_pow+0x9d4>)
 8005b56:	f7fb fbeb 	bl	8001330 <__aeabi_dmul>
 8005b5a:	4a68      	ldr	r2, [pc, #416]	; (8005cfc <__ieee754_pow+0x9d8>)
 8005b5c:	0004      	movs	r4, r0
 8005b5e:	000d      	movs	r5, r1
 8005b60:	0030      	movs	r0, r6
 8005b62:	0039      	movs	r1, r7
 8005b64:	4b66      	ldr	r3, [pc, #408]	; (8005d00 <__ieee754_pow+0x9dc>)
 8005b66:	f7fb fbe3 	bl	8001330 <__aeabi_dmul>
 8005b6a:	0002      	movs	r2, r0
 8005b6c:	000b      	movs	r3, r1
 8005b6e:	0020      	movs	r0, r4
 8005b70:	0029      	movs	r1, r5
 8005b72:	f7fa fc9f 	bl	80004b4 <__aeabi_dadd>
 8005b76:	0004      	movs	r4, r0
 8005b78:	000d      	movs	r5, r1
 8005b7a:	0002      	movs	r2, r0
 8005b7c:	000b      	movs	r3, r1
 8005b7e:	9808      	ldr	r0, [sp, #32]
 8005b80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b82:	f7fa fc97 	bl	80004b4 <__aeabi_dadd>
 8005b86:	9a08      	ldr	r2, [sp, #32]
 8005b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b8a:	0006      	movs	r6, r0
 8005b8c:	000f      	movs	r7, r1
 8005b8e:	f7fb fe3b 	bl	8001808 <__aeabi_dsub>
 8005b92:	0002      	movs	r2, r0
 8005b94:	000b      	movs	r3, r1
 8005b96:	0020      	movs	r0, r4
 8005b98:	0029      	movs	r1, r5
 8005b9a:	f7fb fe35 	bl	8001808 <__aeabi_dsub>
 8005b9e:	0032      	movs	r2, r6
 8005ba0:	9004      	str	r0, [sp, #16]
 8005ba2:	9105      	str	r1, [sp, #20]
 8005ba4:	003b      	movs	r3, r7
 8005ba6:	0030      	movs	r0, r6
 8005ba8:	0039      	movs	r1, r7
 8005baa:	f7fb fbc1 	bl	8001330 <__aeabi_dmul>
 8005bae:	0004      	movs	r4, r0
 8005bb0:	000d      	movs	r5, r1
 8005bb2:	4a54      	ldr	r2, [pc, #336]	; (8005d04 <__ieee754_pow+0x9e0>)
 8005bb4:	4b54      	ldr	r3, [pc, #336]	; (8005d08 <__ieee754_pow+0x9e4>)
 8005bb6:	f7fb fbbb 	bl	8001330 <__aeabi_dmul>
 8005bba:	4a54      	ldr	r2, [pc, #336]	; (8005d0c <__ieee754_pow+0x9e8>)
 8005bbc:	4b54      	ldr	r3, [pc, #336]	; (8005d10 <__ieee754_pow+0x9ec>)
 8005bbe:	f7fb fe23 	bl	8001808 <__aeabi_dsub>
 8005bc2:	0022      	movs	r2, r4
 8005bc4:	002b      	movs	r3, r5
 8005bc6:	f7fb fbb3 	bl	8001330 <__aeabi_dmul>
 8005bca:	4a52      	ldr	r2, [pc, #328]	; (8005d14 <__ieee754_pow+0x9f0>)
 8005bcc:	4b52      	ldr	r3, [pc, #328]	; (8005d18 <__ieee754_pow+0x9f4>)
 8005bce:	f7fa fc71 	bl	80004b4 <__aeabi_dadd>
 8005bd2:	0022      	movs	r2, r4
 8005bd4:	002b      	movs	r3, r5
 8005bd6:	f7fb fbab 	bl	8001330 <__aeabi_dmul>
 8005bda:	4a50      	ldr	r2, [pc, #320]	; (8005d1c <__ieee754_pow+0x9f8>)
 8005bdc:	4b50      	ldr	r3, [pc, #320]	; (8005d20 <__ieee754_pow+0x9fc>)
 8005bde:	f7fb fe13 	bl	8001808 <__aeabi_dsub>
 8005be2:	0022      	movs	r2, r4
 8005be4:	002b      	movs	r3, r5
 8005be6:	f7fb fba3 	bl	8001330 <__aeabi_dmul>
 8005bea:	4a4e      	ldr	r2, [pc, #312]	; (8005d24 <__ieee754_pow+0xa00>)
 8005bec:	4b4e      	ldr	r3, [pc, #312]	; (8005d28 <__ieee754_pow+0xa04>)
 8005bee:	f7fa fc61 	bl	80004b4 <__aeabi_dadd>
 8005bf2:	0022      	movs	r2, r4
 8005bf4:	002b      	movs	r3, r5
 8005bf6:	f7fb fb9b 	bl	8001330 <__aeabi_dmul>
 8005bfa:	0002      	movs	r2, r0
 8005bfc:	000b      	movs	r3, r1
 8005bfe:	0030      	movs	r0, r6
 8005c00:	0039      	movs	r1, r7
 8005c02:	f7fb fe01 	bl	8001808 <__aeabi_dsub>
 8005c06:	0004      	movs	r4, r0
 8005c08:	000d      	movs	r5, r1
 8005c0a:	0002      	movs	r2, r0
 8005c0c:	000b      	movs	r3, r1
 8005c0e:	0030      	movs	r0, r6
 8005c10:	0039      	movs	r1, r7
 8005c12:	f7fb fb8d 	bl	8001330 <__aeabi_dmul>
 8005c16:	2380      	movs	r3, #128	; 0x80
 8005c18:	9006      	str	r0, [sp, #24]
 8005c1a:	9107      	str	r1, [sp, #28]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	0020      	movs	r0, r4
 8005c20:	0029      	movs	r1, r5
 8005c22:	05db      	lsls	r3, r3, #23
 8005c24:	f7fb fdf0 	bl	8001808 <__aeabi_dsub>
 8005c28:	0002      	movs	r2, r0
 8005c2a:	000b      	movs	r3, r1
 8005c2c:	9806      	ldr	r0, [sp, #24]
 8005c2e:	9907      	ldr	r1, [sp, #28]
 8005c30:	f7fa ff7c 	bl	8000b2c <__aeabi_ddiv>
 8005c34:	9a04      	ldr	r2, [sp, #16]
 8005c36:	9b05      	ldr	r3, [sp, #20]
 8005c38:	0004      	movs	r4, r0
 8005c3a:	000d      	movs	r5, r1
 8005c3c:	0030      	movs	r0, r6
 8005c3e:	0039      	movs	r1, r7
 8005c40:	f7fb fb76 	bl	8001330 <__aeabi_dmul>
 8005c44:	9a04      	ldr	r2, [sp, #16]
 8005c46:	9b05      	ldr	r3, [sp, #20]
 8005c48:	f7fa fc34 	bl	80004b4 <__aeabi_dadd>
 8005c4c:	0002      	movs	r2, r0
 8005c4e:	000b      	movs	r3, r1
 8005c50:	0020      	movs	r0, r4
 8005c52:	0029      	movs	r1, r5
 8005c54:	f7fb fdd8 	bl	8001808 <__aeabi_dsub>
 8005c58:	0032      	movs	r2, r6
 8005c5a:	003b      	movs	r3, r7
 8005c5c:	f7fb fdd4 	bl	8001808 <__aeabi_dsub>
 8005c60:	0002      	movs	r2, r0
 8005c62:	000b      	movs	r3, r1
 8005c64:	2000      	movs	r0, #0
 8005c66:	4931      	ldr	r1, [pc, #196]	; (8005d2c <__ieee754_pow+0xa08>)
 8005c68:	f7fb fdce 	bl	8001808 <__aeabi_dsub>
 8005c6c:	9b02      	ldr	r3, [sp, #8]
 8005c6e:	051b      	lsls	r3, r3, #20
 8005c70:	185b      	adds	r3, r3, r1
 8005c72:	151a      	asrs	r2, r3, #20
 8005c74:	2a00      	cmp	r2, #0
 8005c76:	dc25      	bgt.n	8005cc4 <__ieee754_pow+0x9a0>
 8005c78:	9a02      	ldr	r2, [sp, #8]
 8005c7a:	f000 f94f 	bl	8005f1c <scalbn>
 8005c7e:	9a00      	ldr	r2, [sp, #0]
 8005c80:	9b01      	ldr	r3, [sp, #4]
 8005c82:	f7ff fc33 	bl	80054ec <__ieee754_pow+0x1c8>
 8005c86:	4a2a      	ldr	r2, [pc, #168]	; (8005d30 <__ieee754_pow+0xa0c>)
 8005c88:	004b      	lsls	r3, r1, #1
 8005c8a:	085b      	lsrs	r3, r3, #1
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	dc00      	bgt.n	8005c92 <__ieee754_pow+0x96e>
 8005c90:	e717      	b.n	8005ac2 <__ieee754_pow+0x79e>
 8005c92:	4b28      	ldr	r3, [pc, #160]	; (8005d34 <__ieee754_pow+0xa10>)
 8005c94:	18cb      	adds	r3, r1, r3
 8005c96:	4303      	orrs	r3, r0
 8005c98:	d008      	beq.n	8005cac <__ieee754_pow+0x988>
 8005c9a:	9800      	ldr	r0, [sp, #0]
 8005c9c:	9901      	ldr	r1, [sp, #4]
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f7fa fbc1 	bl	8000428 <__aeabi_dcmplt>
 8005ca6:	1e43      	subs	r3, r0, #1
 8005ca8:	4198      	sbcs	r0, r3
 8005caa:	e462      	b.n	8005572 <__ieee754_pow+0x24e>
 8005cac:	0032      	movs	r2, r6
 8005cae:	003b      	movs	r3, r7
 8005cb0:	f7fb fdaa 	bl	8001808 <__aeabi_dsub>
 8005cb4:	9a04      	ldr	r2, [sp, #16]
 8005cb6:	9b05      	ldr	r3, [sp, #20]
 8005cb8:	f7fa fbd4 	bl	8000464 <__aeabi_dcmpge>
 8005cbc:	2800      	cmp	r0, #0
 8005cbe:	d100      	bne.n	8005cc2 <__ieee754_pow+0x99e>
 8005cc0:	e6ff      	b.n	8005ac2 <__ieee754_pow+0x79e>
 8005cc2:	e7ea      	b.n	8005c9a <__ieee754_pow+0x976>
 8005cc4:	0019      	movs	r1, r3
 8005cc6:	e7da      	b.n	8005c7e <__ieee754_pow+0x95a>
 8005cc8:	2300      	movs	r3, #0
 8005cca:	4c18      	ldr	r4, [pc, #96]	; (8005d2c <__ieee754_pow+0xa08>)
 8005ccc:	f7ff fbf1 	bl	80054b2 <__ieee754_pow+0x18e>
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	2400      	movs	r4, #0
 8005cd4:	f7ff fbed 	bl	80054b2 <__ieee754_pow+0x18e>
 8005cd8:	652b82fe 	.word	0x652b82fe
 8005cdc:	3c971547 	.word	0x3c971547
 8005ce0:	3fe00000 	.word	0x3fe00000
 8005ce4:	fffffc02 	.word	0xfffffc02
 8005ce8:	fffffc01 	.word	0xfffffc01
 8005cec:	000fffff 	.word	0x000fffff
 8005cf0:	3fe62e43 	.word	0x3fe62e43
 8005cf4:	fefa39ef 	.word	0xfefa39ef
 8005cf8:	3fe62e42 	.word	0x3fe62e42
 8005cfc:	0ca86c39 	.word	0x0ca86c39
 8005d00:	be205c61 	.word	0xbe205c61
 8005d04:	72bea4d0 	.word	0x72bea4d0
 8005d08:	3e663769 	.word	0x3e663769
 8005d0c:	c5d26bf1 	.word	0xc5d26bf1
 8005d10:	3ebbbd41 	.word	0x3ebbbd41
 8005d14:	af25de2c 	.word	0xaf25de2c
 8005d18:	3f11566a 	.word	0x3f11566a
 8005d1c:	16bebd93 	.word	0x16bebd93
 8005d20:	3f66c16c 	.word	0x3f66c16c
 8005d24:	5555553e 	.word	0x5555553e
 8005d28:	3fc55555 	.word	0x3fc55555
 8005d2c:	3ff00000 	.word	0x3ff00000
 8005d30:	4090cbff 	.word	0x4090cbff
 8005d34:	3f6f3400 	.word	0x3f6f3400

08005d38 <__ieee754_sqrt>:
 8005d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d3a:	000b      	movs	r3, r1
 8005d3c:	000c      	movs	r4, r1
 8005d3e:	4956      	ldr	r1, [pc, #344]	; (8005e98 <__ieee754_sqrt+0x160>)
 8005d40:	0005      	movs	r5, r0
 8005d42:	0002      	movs	r2, r0
 8005d44:	0008      	movs	r0, r1
 8005d46:	b085      	sub	sp, #20
 8005d48:	4020      	ands	r0, r4
 8005d4a:	4288      	cmp	r0, r1
 8005d4c:	d10f      	bne.n	8005d6e <__ieee754_sqrt+0x36>
 8005d4e:	0028      	movs	r0, r5
 8005d50:	0021      	movs	r1, r4
 8005d52:	f7fb faed 	bl	8001330 <__aeabi_dmul>
 8005d56:	0002      	movs	r2, r0
 8005d58:	000b      	movs	r3, r1
 8005d5a:	0028      	movs	r0, r5
 8005d5c:	0021      	movs	r1, r4
 8005d5e:	f7fa fba9 	bl	80004b4 <__aeabi_dadd>
 8005d62:	0005      	movs	r5, r0
 8005d64:	000c      	movs	r4, r1
 8005d66:	0028      	movs	r0, r5
 8005d68:	0021      	movs	r1, r4
 8005d6a:	b005      	add	sp, #20
 8005d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d6e:	2c00      	cmp	r4, #0
 8005d70:	dc10      	bgt.n	8005d94 <__ieee754_sqrt+0x5c>
 8005d72:	0061      	lsls	r1, r4, #1
 8005d74:	0849      	lsrs	r1, r1, #1
 8005d76:	4329      	orrs	r1, r5
 8005d78:	d0f5      	beq.n	8005d66 <__ieee754_sqrt+0x2e>
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	428c      	cmp	r4, r1
 8005d7e:	d100      	bne.n	8005d82 <__ieee754_sqrt+0x4a>
 8005d80:	e080      	b.n	8005e84 <__ieee754_sqrt+0x14c>
 8005d82:	0028      	movs	r0, r5
 8005d84:	0021      	movs	r1, r4
 8005d86:	f7fb fd3f 	bl	8001808 <__aeabi_dsub>
 8005d8a:	0002      	movs	r2, r0
 8005d8c:	000b      	movs	r3, r1
 8005d8e:	f7fa fecd 	bl	8000b2c <__aeabi_ddiv>
 8005d92:	e7e6      	b.n	8005d62 <__ieee754_sqrt+0x2a>
 8005d94:	1521      	asrs	r1, r4, #20
 8005d96:	d075      	beq.n	8005e84 <__ieee754_sqrt+0x14c>
 8005d98:	4840      	ldr	r0, [pc, #256]	; (8005e9c <__ieee754_sqrt+0x164>)
 8005d9a:	031b      	lsls	r3, r3, #12
 8005d9c:	180c      	adds	r4, r1, r0
 8005d9e:	2080      	movs	r0, #128	; 0x80
 8005da0:	0b1b      	lsrs	r3, r3, #12
 8005da2:	0340      	lsls	r0, r0, #13
 8005da4:	4303      	orrs	r3, r0
 8005da6:	07c9      	lsls	r1, r1, #31
 8005da8:	d403      	bmi.n	8005db2 <__ieee754_sqrt+0x7a>
 8005daa:	0fd1      	lsrs	r1, r2, #31
 8005dac:	005b      	lsls	r3, r3, #1
 8005dae:	185b      	adds	r3, r3, r1
 8005db0:	0052      	lsls	r2, r2, #1
 8005db2:	1061      	asrs	r1, r4, #1
 8005db4:	2400      	movs	r4, #0
 8005db6:	9103      	str	r1, [sp, #12]
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	0fd1      	lsrs	r1, r2, #31
 8005dbc:	185b      	adds	r3, r3, r1
 8005dbe:	2180      	movs	r1, #128	; 0x80
 8005dc0:	2516      	movs	r5, #22
 8005dc2:	0020      	movs	r0, r4
 8005dc4:	0052      	lsls	r2, r2, #1
 8005dc6:	0389      	lsls	r1, r1, #14
 8005dc8:	1846      	adds	r6, r0, r1
 8005dca:	429e      	cmp	r6, r3
 8005dcc:	dc02      	bgt.n	8005dd4 <__ieee754_sqrt+0x9c>
 8005dce:	1870      	adds	r0, r6, r1
 8005dd0:	1b9b      	subs	r3, r3, r6
 8005dd2:	1864      	adds	r4, r4, r1
 8005dd4:	0fd6      	lsrs	r6, r2, #31
 8005dd6:	005b      	lsls	r3, r3, #1
 8005dd8:	3d01      	subs	r5, #1
 8005dda:	18f3      	adds	r3, r6, r3
 8005ddc:	0052      	lsls	r2, r2, #1
 8005dde:	0849      	lsrs	r1, r1, #1
 8005de0:	2d00      	cmp	r5, #0
 8005de2:	d1f1      	bne.n	8005dc8 <__ieee754_sqrt+0x90>
 8005de4:	2620      	movs	r6, #32
 8005de6:	2780      	movs	r7, #128	; 0x80
 8005de8:	0029      	movs	r1, r5
 8005dea:	9601      	str	r6, [sp, #4]
 8005dec:	063f      	lsls	r7, r7, #24
 8005dee:	197e      	adds	r6, r7, r5
 8005df0:	46b4      	mov	ip, r6
 8005df2:	4283      	cmp	r3, r0
 8005df4:	dc02      	bgt.n	8005dfc <__ieee754_sqrt+0xc4>
 8005df6:	d114      	bne.n	8005e22 <__ieee754_sqrt+0xea>
 8005df8:	4296      	cmp	r6, r2
 8005dfa:	d812      	bhi.n	8005e22 <__ieee754_sqrt+0xea>
 8005dfc:	4665      	mov	r5, ip
 8005dfe:	4666      	mov	r6, ip
 8005e00:	19ed      	adds	r5, r5, r7
 8005e02:	9002      	str	r0, [sp, #8]
 8005e04:	2e00      	cmp	r6, #0
 8005e06:	da03      	bge.n	8005e10 <__ieee754_sqrt+0xd8>
 8005e08:	43ee      	mvns	r6, r5
 8005e0a:	0ff6      	lsrs	r6, r6, #31
 8005e0c:	1986      	adds	r6, r0, r6
 8005e0e:	9602      	str	r6, [sp, #8]
 8005e10:	1a1b      	subs	r3, r3, r0
 8005e12:	4562      	cmp	r2, ip
 8005e14:	4180      	sbcs	r0, r0
 8005e16:	4240      	negs	r0, r0
 8005e18:	1a1b      	subs	r3, r3, r0
 8005e1a:	4660      	mov	r0, ip
 8005e1c:	1a12      	subs	r2, r2, r0
 8005e1e:	9802      	ldr	r0, [sp, #8]
 8005e20:	19c9      	adds	r1, r1, r7
 8005e22:	0fd6      	lsrs	r6, r2, #31
 8005e24:	005b      	lsls	r3, r3, #1
 8005e26:	199b      	adds	r3, r3, r6
 8005e28:	9e01      	ldr	r6, [sp, #4]
 8005e2a:	0052      	lsls	r2, r2, #1
 8005e2c:	3e01      	subs	r6, #1
 8005e2e:	087f      	lsrs	r7, r7, #1
 8005e30:	9601      	str	r6, [sp, #4]
 8005e32:	2e00      	cmp	r6, #0
 8005e34:	d1db      	bne.n	8005dee <__ieee754_sqrt+0xb6>
 8005e36:	4313      	orrs	r3, r2
 8005e38:	d003      	beq.n	8005e42 <__ieee754_sqrt+0x10a>
 8005e3a:	1c4b      	adds	r3, r1, #1
 8005e3c:	d127      	bne.n	8005e8e <__ieee754_sqrt+0x156>
 8005e3e:	0031      	movs	r1, r6
 8005e40:	3401      	adds	r4, #1
 8005e42:	4b17      	ldr	r3, [pc, #92]	; (8005ea0 <__ieee754_sqrt+0x168>)
 8005e44:	1060      	asrs	r0, r4, #1
 8005e46:	18c0      	adds	r0, r0, r3
 8005e48:	0849      	lsrs	r1, r1, #1
 8005e4a:	07e3      	lsls	r3, r4, #31
 8005e4c:	d502      	bpl.n	8005e54 <__ieee754_sqrt+0x11c>
 8005e4e:	2380      	movs	r3, #128	; 0x80
 8005e50:	061b      	lsls	r3, r3, #24
 8005e52:	4319      	orrs	r1, r3
 8005e54:	9b03      	ldr	r3, [sp, #12]
 8005e56:	000d      	movs	r5, r1
 8005e58:	051c      	lsls	r4, r3, #20
 8005e5a:	1823      	adds	r3, r4, r0
 8005e5c:	001c      	movs	r4, r3
 8005e5e:	e782      	b.n	8005d66 <__ieee754_sqrt+0x2e>
 8005e60:	0ad3      	lsrs	r3, r2, #11
 8005e62:	3815      	subs	r0, #21
 8005e64:	0552      	lsls	r2, r2, #21
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d0fa      	beq.n	8005e60 <__ieee754_sqrt+0x128>
 8005e6a:	2480      	movs	r4, #128	; 0x80
 8005e6c:	0364      	lsls	r4, r4, #13
 8005e6e:	4223      	tst	r3, r4
 8005e70:	d00a      	beq.n	8005e88 <__ieee754_sqrt+0x150>
 8005e72:	2420      	movs	r4, #32
 8005e74:	0016      	movs	r6, r2
 8005e76:	1a64      	subs	r4, r4, r1
 8005e78:	40e6      	lsrs	r6, r4
 8005e7a:	1e4d      	subs	r5, r1, #1
 8005e7c:	408a      	lsls	r2, r1
 8005e7e:	4333      	orrs	r3, r6
 8005e80:	1b41      	subs	r1, r0, r5
 8005e82:	e789      	b.n	8005d98 <__ieee754_sqrt+0x60>
 8005e84:	2000      	movs	r0, #0
 8005e86:	e7ee      	b.n	8005e66 <__ieee754_sqrt+0x12e>
 8005e88:	005b      	lsls	r3, r3, #1
 8005e8a:	3101      	adds	r1, #1
 8005e8c:	e7ef      	b.n	8005e6e <__ieee754_sqrt+0x136>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	3101      	adds	r1, #1
 8005e92:	4399      	bics	r1, r3
 8005e94:	e7d5      	b.n	8005e42 <__ieee754_sqrt+0x10a>
 8005e96:	46c0      	nop			; (mov r8, r8)
 8005e98:	7ff00000 	.word	0x7ff00000
 8005e9c:	fffffc01 	.word	0xfffffc01
 8005ea0:	3fe00000 	.word	0x3fe00000

08005ea4 <with_errno>:
 8005ea4:	b570      	push	{r4, r5, r6, lr}
 8005ea6:	000d      	movs	r5, r1
 8005ea8:	0016      	movs	r6, r2
 8005eaa:	0004      	movs	r4, r0
 8005eac:	f7ff f8d4 	bl	8005058 <__errno>
 8005eb0:	0029      	movs	r1, r5
 8005eb2:	6006      	str	r6, [r0, #0]
 8005eb4:	0020      	movs	r0, r4
 8005eb6:	bd70      	pop	{r4, r5, r6, pc}

08005eb8 <xflow>:
 8005eb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005eba:	0015      	movs	r5, r2
 8005ebc:	001c      	movs	r4, r3
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	d010      	beq.n	8005ee4 <xflow+0x2c>
 8005ec2:	2380      	movs	r3, #128	; 0x80
 8005ec4:	0010      	movs	r0, r2
 8005ec6:	061b      	lsls	r3, r3, #24
 8005ec8:	18e1      	adds	r1, r4, r3
 8005eca:	9000      	str	r0, [sp, #0]
 8005ecc:	9101      	str	r1, [sp, #4]
 8005ece:	9a00      	ldr	r2, [sp, #0]
 8005ed0:	9b01      	ldr	r3, [sp, #4]
 8005ed2:	0028      	movs	r0, r5
 8005ed4:	0021      	movs	r1, r4
 8005ed6:	f7fb fa2b 	bl	8001330 <__aeabi_dmul>
 8005eda:	2222      	movs	r2, #34	; 0x22
 8005edc:	f7ff ffe2 	bl	8005ea4 <with_errno>
 8005ee0:	b003      	add	sp, #12
 8005ee2:	bd30      	pop	{r4, r5, pc}
 8005ee4:	0010      	movs	r0, r2
 8005ee6:	0019      	movs	r1, r3
 8005ee8:	e7ef      	b.n	8005eca <xflow+0x12>

08005eea <__math_uflow>:
 8005eea:	2380      	movs	r3, #128	; 0x80
 8005eec:	b510      	push	{r4, lr}
 8005eee:	2200      	movs	r2, #0
 8005ef0:	055b      	lsls	r3, r3, #21
 8005ef2:	f7ff ffe1 	bl	8005eb8 <xflow>
 8005ef6:	bd10      	pop	{r4, pc}

08005ef8 <__math_oflow>:
 8005ef8:	23e0      	movs	r3, #224	; 0xe0
 8005efa:	b510      	push	{r4, lr}
 8005efc:	2200      	movs	r2, #0
 8005efe:	05db      	lsls	r3, r3, #23
 8005f00:	f7ff ffda 	bl	8005eb8 <xflow>
 8005f04:	bd10      	pop	{r4, pc}

08005f06 <fabs>:
 8005f06:	004b      	lsls	r3, r1, #1
 8005f08:	0859      	lsrs	r1, r3, #1
 8005f0a:	4770      	bx	lr

08005f0c <finite>:
 8005f0c:	4b02      	ldr	r3, [pc, #8]	; (8005f18 <finite+0xc>)
 8005f0e:	0048      	lsls	r0, r1, #1
 8005f10:	0840      	lsrs	r0, r0, #1
 8005f12:	18c0      	adds	r0, r0, r3
 8005f14:	0fc0      	lsrs	r0, r0, #31
 8005f16:	4770      	bx	lr
 8005f18:	80100000 	.word	0x80100000

08005f1c <scalbn>:
 8005f1c:	004b      	lsls	r3, r1, #1
 8005f1e:	b570      	push	{r4, r5, r6, lr}
 8005f20:	0d5b      	lsrs	r3, r3, #21
 8005f22:	0014      	movs	r4, r2
 8005f24:	000a      	movs	r2, r1
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10d      	bne.n	8005f46 <scalbn+0x2a>
 8005f2a:	004b      	lsls	r3, r1, #1
 8005f2c:	085b      	lsrs	r3, r3, #1
 8005f2e:	4303      	orrs	r3, r0
 8005f30:	d010      	beq.n	8005f54 <scalbn+0x38>
 8005f32:	4b27      	ldr	r3, [pc, #156]	; (8005fd0 <scalbn+0xb4>)
 8005f34:	2200      	movs	r2, #0
 8005f36:	f7fb f9fb 	bl	8001330 <__aeabi_dmul>
 8005f3a:	4b26      	ldr	r3, [pc, #152]	; (8005fd4 <scalbn+0xb8>)
 8005f3c:	429c      	cmp	r4, r3
 8005f3e:	da0a      	bge.n	8005f56 <scalbn+0x3a>
 8005f40:	4a25      	ldr	r2, [pc, #148]	; (8005fd8 <scalbn+0xbc>)
 8005f42:	4b26      	ldr	r3, [pc, #152]	; (8005fdc <scalbn+0xc0>)
 8005f44:	e019      	b.n	8005f7a <scalbn+0x5e>
 8005f46:	4d26      	ldr	r5, [pc, #152]	; (8005fe0 <scalbn+0xc4>)
 8005f48:	42ab      	cmp	r3, r5
 8005f4a:	d108      	bne.n	8005f5e <scalbn+0x42>
 8005f4c:	0002      	movs	r2, r0
 8005f4e:	000b      	movs	r3, r1
 8005f50:	f7fa fab0 	bl	80004b4 <__aeabi_dadd>
 8005f54:	bd70      	pop	{r4, r5, r6, pc}
 8005f56:	000a      	movs	r2, r1
 8005f58:	004b      	lsls	r3, r1, #1
 8005f5a:	0d5b      	lsrs	r3, r3, #21
 8005f5c:	3b36      	subs	r3, #54	; 0x36
 8005f5e:	4d21      	ldr	r5, [pc, #132]	; (8005fe4 <scalbn+0xc8>)
 8005f60:	18e3      	adds	r3, r4, r3
 8005f62:	42ab      	cmp	r3, r5
 8005f64:	dd0c      	ble.n	8005f80 <scalbn+0x64>
 8005f66:	4c20      	ldr	r4, [pc, #128]	; (8005fe8 <scalbn+0xcc>)
 8005f68:	4d20      	ldr	r5, [pc, #128]	; (8005fec <scalbn+0xd0>)
 8005f6a:	2900      	cmp	r1, #0
 8005f6c:	da01      	bge.n	8005f72 <scalbn+0x56>
 8005f6e:	4c1e      	ldr	r4, [pc, #120]	; (8005fe8 <scalbn+0xcc>)
 8005f70:	4d1f      	ldr	r5, [pc, #124]	; (8005ff0 <scalbn+0xd4>)
 8005f72:	0020      	movs	r0, r4
 8005f74:	0029      	movs	r1, r5
 8005f76:	4a1c      	ldr	r2, [pc, #112]	; (8005fe8 <scalbn+0xcc>)
 8005f78:	4b1c      	ldr	r3, [pc, #112]	; (8005fec <scalbn+0xd0>)
 8005f7a:	f7fb f9d9 	bl	8001330 <__aeabi_dmul>
 8005f7e:	e7e9      	b.n	8005f54 <scalbn+0x38>
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	dd05      	ble.n	8005f90 <scalbn+0x74>
 8005f84:	4c1b      	ldr	r4, [pc, #108]	; (8005ff4 <scalbn+0xd8>)
 8005f86:	051b      	lsls	r3, r3, #20
 8005f88:	4022      	ands	r2, r4
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	0011      	movs	r1, r2
 8005f8e:	e7e1      	b.n	8005f54 <scalbn+0x38>
 8005f90:	001d      	movs	r5, r3
 8005f92:	3535      	adds	r5, #53	; 0x35
 8005f94:	da13      	bge.n	8005fbe <scalbn+0xa2>
 8005f96:	4a18      	ldr	r2, [pc, #96]	; (8005ff8 <scalbn+0xdc>)
 8005f98:	0fcb      	lsrs	r3, r1, #31
 8005f9a:	4294      	cmp	r4, r2
 8005f9c:	dd08      	ble.n	8005fb0 <scalbn+0x94>
 8005f9e:	4812      	ldr	r0, [pc, #72]	; (8005fe8 <scalbn+0xcc>)
 8005fa0:	4912      	ldr	r1, [pc, #72]	; (8005fec <scalbn+0xd0>)
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <scalbn+0x8e>
 8005fa6:	4810      	ldr	r0, [pc, #64]	; (8005fe8 <scalbn+0xcc>)
 8005fa8:	4911      	ldr	r1, [pc, #68]	; (8005ff0 <scalbn+0xd4>)
 8005faa:	4a0f      	ldr	r2, [pc, #60]	; (8005fe8 <scalbn+0xcc>)
 8005fac:	4b0f      	ldr	r3, [pc, #60]	; (8005fec <scalbn+0xd0>)
 8005fae:	e7e4      	b.n	8005f7a <scalbn+0x5e>
 8005fb0:	4809      	ldr	r0, [pc, #36]	; (8005fd8 <scalbn+0xbc>)
 8005fb2:	490a      	ldr	r1, [pc, #40]	; (8005fdc <scalbn+0xc0>)
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d0c3      	beq.n	8005f40 <scalbn+0x24>
 8005fb8:	4807      	ldr	r0, [pc, #28]	; (8005fd8 <scalbn+0xbc>)
 8005fba:	4910      	ldr	r1, [pc, #64]	; (8005ffc <scalbn+0xe0>)
 8005fbc:	e7c0      	b.n	8005f40 <scalbn+0x24>
 8005fbe:	4c0d      	ldr	r4, [pc, #52]	; (8005ff4 <scalbn+0xd8>)
 8005fc0:	3336      	adds	r3, #54	; 0x36
 8005fc2:	4022      	ands	r2, r4
 8005fc4:	051b      	lsls	r3, r3, #20
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	0019      	movs	r1, r3
 8005fca:	2200      	movs	r2, #0
 8005fcc:	4b0c      	ldr	r3, [pc, #48]	; (8006000 <scalbn+0xe4>)
 8005fce:	e7d4      	b.n	8005f7a <scalbn+0x5e>
 8005fd0:	43500000 	.word	0x43500000
 8005fd4:	ffff3cb0 	.word	0xffff3cb0
 8005fd8:	c2f8f359 	.word	0xc2f8f359
 8005fdc:	01a56e1f 	.word	0x01a56e1f
 8005fe0:	000007ff 	.word	0x000007ff
 8005fe4:	000007fe 	.word	0x000007fe
 8005fe8:	8800759c 	.word	0x8800759c
 8005fec:	7e37e43c 	.word	0x7e37e43c
 8005ff0:	fe37e43c 	.word	0xfe37e43c
 8005ff4:	800fffff 	.word	0x800fffff
 8005ff8:	0000c350 	.word	0x0000c350
 8005ffc:	81a56e1f 	.word	0x81a56e1f
 8006000:	3c900000 	.word	0x3c900000

08006004 <_init>:
 8006004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006006:	46c0      	nop			; (mov r8, r8)
 8006008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800600a:	bc08      	pop	{r3}
 800600c:	469e      	mov	lr, r3
 800600e:	4770      	bx	lr

08006010 <_fini>:
 8006010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006012:	46c0      	nop			; (mov r8, r8)
 8006014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006016:	bc08      	pop	{r3}
 8006018:	469e      	mov	lr, r3
 800601a:	4770      	bx	lr
