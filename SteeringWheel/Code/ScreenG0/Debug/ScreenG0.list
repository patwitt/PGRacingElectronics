
ScreenG0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000608c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08006148  08006148  00016148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062a0  080062a0  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080062a0  080062a0  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080062a0  080062a0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062a0  080062a0  000162a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062a4  080062a4  000162a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080062a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000080  08006328  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08006328  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f559  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002093  00000000  00000000  0002f601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  00031698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a10  00000000  00000000  00032170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014d5e  00000000  00000000  00032b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e894  00000000  00000000  000478de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000841e4  00000000  00000000  00056172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000da356  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ba8  00000000  00000000  000da3ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000080 	.word	0x20000080
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800612c 	.word	0x0800612c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000084 	.word	0x20000084
 80000fc:	0800612c 	.word	0x0800612c

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__udivsi3>:
 8000110:	2200      	movs	r2, #0
 8000112:	0843      	lsrs	r3, r0, #1
 8000114:	428b      	cmp	r3, r1
 8000116:	d374      	bcc.n	8000202 <__udivsi3+0xf2>
 8000118:	0903      	lsrs	r3, r0, #4
 800011a:	428b      	cmp	r3, r1
 800011c:	d35f      	bcc.n	80001de <__udivsi3+0xce>
 800011e:	0a03      	lsrs	r3, r0, #8
 8000120:	428b      	cmp	r3, r1
 8000122:	d344      	bcc.n	80001ae <__udivsi3+0x9e>
 8000124:	0b03      	lsrs	r3, r0, #12
 8000126:	428b      	cmp	r3, r1
 8000128:	d328      	bcc.n	800017c <__udivsi3+0x6c>
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d30d      	bcc.n	800014c <__udivsi3+0x3c>
 8000130:	22ff      	movs	r2, #255	; 0xff
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	ba12      	rev	r2, r2
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d302      	bcc.n	8000142 <__udivsi3+0x32>
 800013c:	1212      	asrs	r2, r2, #8
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	d065      	beq.n	800020e <__udivsi3+0xfe>
 8000142:	0b03      	lsrs	r3, r0, #12
 8000144:	428b      	cmp	r3, r1
 8000146:	d319      	bcc.n	800017c <__udivsi3+0x6c>
 8000148:	e000      	b.n	800014c <__udivsi3+0x3c>
 800014a:	0a09      	lsrs	r1, r1, #8
 800014c:	0bc3      	lsrs	r3, r0, #15
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x46>
 8000152:	03cb      	lsls	r3, r1, #15
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b83      	lsrs	r3, r0, #14
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x52>
 800015e:	038b      	lsls	r3, r1, #14
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b43      	lsrs	r3, r0, #13
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x5e>
 800016a:	034b      	lsls	r3, r1, #13
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b03      	lsrs	r3, r0, #12
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x6a>
 8000176:	030b      	lsls	r3, r1, #12
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0ac3      	lsrs	r3, r0, #11
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x76>
 8000182:	02cb      	lsls	r3, r1, #11
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a83      	lsrs	r3, r0, #10
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x82>
 800018e:	028b      	lsls	r3, r1, #10
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a43      	lsrs	r3, r0, #9
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x8e>
 800019a:	024b      	lsls	r3, r1, #9
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a03      	lsrs	r3, r0, #8
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x9a>
 80001a6:	020b      	lsls	r3, r1, #8
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	d2cd      	bcs.n	800014a <__udivsi3+0x3a>
 80001ae:	09c3      	lsrs	r3, r0, #7
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xa8>
 80001b4:	01cb      	lsls	r3, r1, #7
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0983      	lsrs	r3, r0, #6
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xb4>
 80001c0:	018b      	lsls	r3, r1, #6
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0943      	lsrs	r3, r0, #5
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xc0>
 80001cc:	014b      	lsls	r3, r1, #5
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0903      	lsrs	r3, r0, #4
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xcc>
 80001d8:	010b      	lsls	r3, r1, #4
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	08c3      	lsrs	r3, r0, #3
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xd8>
 80001e4:	00cb      	lsls	r3, r1, #3
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0883      	lsrs	r3, r0, #2
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xe4>
 80001f0:	008b      	lsls	r3, r1, #2
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0843      	lsrs	r3, r0, #1
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xf0>
 80001fc:	004b      	lsls	r3, r1, #1
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	1a41      	subs	r1, r0, r1
 8000204:	d200      	bcs.n	8000208 <__udivsi3+0xf8>
 8000206:	4601      	mov	r1, r0
 8000208:	4152      	adcs	r2, r2
 800020a:	4610      	mov	r0, r2
 800020c:	4770      	bx	lr
 800020e:	e7ff      	b.n	8000210 <__udivsi3+0x100>
 8000210:	b501      	push	{r0, lr}
 8000212:	2000      	movs	r0, #0
 8000214:	f000 f8f0 	bl	80003f8 <__aeabi_idiv0>
 8000218:	bd02      	pop	{r1, pc}
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_uidivmod>:
 800021c:	2900      	cmp	r1, #0
 800021e:	d0f7      	beq.n	8000210 <__udivsi3+0x100>
 8000220:	e776      	b.n	8000110 <__udivsi3>
 8000222:	4770      	bx	lr

08000224 <__divsi3>:
 8000224:	4603      	mov	r3, r0
 8000226:	430b      	orrs	r3, r1
 8000228:	d47f      	bmi.n	800032a <__divsi3+0x106>
 800022a:	2200      	movs	r2, #0
 800022c:	0843      	lsrs	r3, r0, #1
 800022e:	428b      	cmp	r3, r1
 8000230:	d374      	bcc.n	800031c <__divsi3+0xf8>
 8000232:	0903      	lsrs	r3, r0, #4
 8000234:	428b      	cmp	r3, r1
 8000236:	d35f      	bcc.n	80002f8 <__divsi3+0xd4>
 8000238:	0a03      	lsrs	r3, r0, #8
 800023a:	428b      	cmp	r3, r1
 800023c:	d344      	bcc.n	80002c8 <__divsi3+0xa4>
 800023e:	0b03      	lsrs	r3, r0, #12
 8000240:	428b      	cmp	r3, r1
 8000242:	d328      	bcc.n	8000296 <__divsi3+0x72>
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d30d      	bcc.n	8000266 <__divsi3+0x42>
 800024a:	22ff      	movs	r2, #255	; 0xff
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	ba12      	rev	r2, r2
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d302      	bcc.n	800025c <__divsi3+0x38>
 8000256:	1212      	asrs	r2, r2, #8
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	d065      	beq.n	8000328 <__divsi3+0x104>
 800025c:	0b03      	lsrs	r3, r0, #12
 800025e:	428b      	cmp	r3, r1
 8000260:	d319      	bcc.n	8000296 <__divsi3+0x72>
 8000262:	e000      	b.n	8000266 <__divsi3+0x42>
 8000264:	0a09      	lsrs	r1, r1, #8
 8000266:	0bc3      	lsrs	r3, r0, #15
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x4c>
 800026c:	03cb      	lsls	r3, r1, #15
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b83      	lsrs	r3, r0, #14
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x58>
 8000278:	038b      	lsls	r3, r1, #14
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b43      	lsrs	r3, r0, #13
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x64>
 8000284:	034b      	lsls	r3, r1, #13
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b03      	lsrs	r3, r0, #12
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x70>
 8000290:	030b      	lsls	r3, r1, #12
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0ac3      	lsrs	r3, r0, #11
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x7c>
 800029c:	02cb      	lsls	r3, r1, #11
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a83      	lsrs	r3, r0, #10
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x88>
 80002a8:	028b      	lsls	r3, r1, #10
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a43      	lsrs	r3, r0, #9
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x94>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a03      	lsrs	r3, r0, #8
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0xa0>
 80002c0:	020b      	lsls	r3, r1, #8
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	d2cd      	bcs.n	8000264 <__divsi3+0x40>
 80002c8:	09c3      	lsrs	r3, r0, #7
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xae>
 80002ce:	01cb      	lsls	r3, r1, #7
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0983      	lsrs	r3, r0, #6
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xba>
 80002da:	018b      	lsls	r3, r1, #6
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0943      	lsrs	r3, r0, #5
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xc6>
 80002e6:	014b      	lsls	r3, r1, #5
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0903      	lsrs	r3, r0, #4
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xd2>
 80002f2:	010b      	lsls	r3, r1, #4
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	08c3      	lsrs	r3, r0, #3
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xde>
 80002fe:	00cb      	lsls	r3, r1, #3
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0883      	lsrs	r3, r0, #2
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xea>
 800030a:	008b      	lsls	r3, r1, #2
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0843      	lsrs	r3, r0, #1
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xf6>
 8000316:	004b      	lsls	r3, r1, #1
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	1a41      	subs	r1, r0, r1
 800031e:	d200      	bcs.n	8000322 <__divsi3+0xfe>
 8000320:	4601      	mov	r1, r0
 8000322:	4152      	adcs	r2, r2
 8000324:	4610      	mov	r0, r2
 8000326:	4770      	bx	lr
 8000328:	e05d      	b.n	80003e6 <__divsi3+0x1c2>
 800032a:	0fca      	lsrs	r2, r1, #31
 800032c:	d000      	beq.n	8000330 <__divsi3+0x10c>
 800032e:	4249      	negs	r1, r1
 8000330:	1003      	asrs	r3, r0, #32
 8000332:	d300      	bcc.n	8000336 <__divsi3+0x112>
 8000334:	4240      	negs	r0, r0
 8000336:	4053      	eors	r3, r2
 8000338:	2200      	movs	r2, #0
 800033a:	469c      	mov	ip, r3
 800033c:	0903      	lsrs	r3, r0, #4
 800033e:	428b      	cmp	r3, r1
 8000340:	d32d      	bcc.n	800039e <__divsi3+0x17a>
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d312      	bcc.n	800036e <__divsi3+0x14a>
 8000348:	22fc      	movs	r2, #252	; 0xfc
 800034a:	0189      	lsls	r1, r1, #6
 800034c:	ba12      	rev	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d30c      	bcc.n	800036e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d308      	bcc.n	800036e <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d304      	bcc.n	800036e <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	d03a      	beq.n	80003de <__divsi3+0x1ba>
 8000368:	1192      	asrs	r2, r2, #6
 800036a:	e000      	b.n	800036e <__divsi3+0x14a>
 800036c:	0989      	lsrs	r1, r1, #6
 800036e:	09c3      	lsrs	r3, r0, #7
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x154>
 8000374:	01cb      	lsls	r3, r1, #7
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0983      	lsrs	r3, r0, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x160>
 8000380:	018b      	lsls	r3, r1, #6
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0943      	lsrs	r3, r0, #5
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x16c>
 800038c:	014b      	lsls	r3, r1, #5
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0903      	lsrs	r3, r0, #4
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x178>
 8000398:	010b      	lsls	r3, r1, #4
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	08c3      	lsrs	r3, r0, #3
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x184>
 80003a4:	00cb      	lsls	r3, r1, #3
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0883      	lsrs	r3, r0, #2
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x190>
 80003b0:	008b      	lsls	r3, r1, #2
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	d2d9      	bcs.n	800036c <__divsi3+0x148>
 80003b8:	0843      	lsrs	r3, r0, #1
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d301      	bcc.n	80003c2 <__divsi3+0x19e>
 80003be:	004b      	lsls	r3, r1, #1
 80003c0:	1ac0      	subs	r0, r0, r3
 80003c2:	4152      	adcs	r2, r2
 80003c4:	1a41      	subs	r1, r0, r1
 80003c6:	d200      	bcs.n	80003ca <__divsi3+0x1a6>
 80003c8:	4601      	mov	r1, r0
 80003ca:	4663      	mov	r3, ip
 80003cc:	4152      	adcs	r2, r2
 80003ce:	105b      	asrs	r3, r3, #1
 80003d0:	4610      	mov	r0, r2
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x1b4>
 80003d4:	4240      	negs	r0, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d500      	bpl.n	80003dc <__divsi3+0x1b8>
 80003da:	4249      	negs	r1, r1
 80003dc:	4770      	bx	lr
 80003de:	4663      	mov	r3, ip
 80003e0:	105b      	asrs	r3, r3, #1
 80003e2:	d300      	bcc.n	80003e6 <__divsi3+0x1c2>
 80003e4:	4240      	negs	r0, r0
 80003e6:	b501      	push	{r0, lr}
 80003e8:	2000      	movs	r0, #0
 80003ea:	f000 f805 	bl	80003f8 <__aeabi_idiv0>
 80003ee:	bd02      	pop	{r1, pc}

080003f0 <__aeabi_idivmod>:
 80003f0:	2900      	cmp	r1, #0
 80003f2:	d0f8      	beq.n	80003e6 <__divsi3+0x1c2>
 80003f4:	e716      	b.n	8000224 <__divsi3>
 80003f6:	4770      	bx	lr

080003f8 <__aeabi_idiv0>:
 80003f8:	4770      	bx	lr
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__aeabi_cdrcmple>:
 80003fc:	4684      	mov	ip, r0
 80003fe:	1c10      	adds	r0, r2, #0
 8000400:	4662      	mov	r2, ip
 8000402:	468c      	mov	ip, r1
 8000404:	1c19      	adds	r1, r3, #0
 8000406:	4663      	mov	r3, ip
 8000408:	e000      	b.n	800040c <__aeabi_cdcmpeq>
 800040a:	46c0      	nop			; (mov r8, r8)

0800040c <__aeabi_cdcmpeq>:
 800040c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800040e:	f000 ff51 	bl	80012b4 <__ledf2>
 8000412:	2800      	cmp	r0, #0
 8000414:	d401      	bmi.n	800041a <__aeabi_cdcmpeq+0xe>
 8000416:	2100      	movs	r1, #0
 8000418:	42c8      	cmn	r0, r1
 800041a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800041c <__aeabi_dcmpeq>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f000 fe9b 	bl	8001158 <__eqdf2>
 8000422:	4240      	negs	r0, r0
 8000424:	3001      	adds	r0, #1
 8000426:	bd10      	pop	{r4, pc}

08000428 <__aeabi_dcmplt>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 ff43 	bl	80012b4 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	db01      	blt.n	8000436 <__aeabi_dcmplt+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_dcmple>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 ff39 	bl	80012b4 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dd01      	ble.n	800044a <__aeabi_dcmple+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_dcmpgt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 febd 	bl	80011d0 <__gedf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	dc01      	bgt.n	800045e <__aeabi_dcmpgt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_dcmpge>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 feb3 	bl	80011d0 <__gedf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	da01      	bge.n	8000472 <__aeabi_dcmpge+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_d2uiz>:
 8000478:	b570      	push	{r4, r5, r6, lr}
 800047a:	2200      	movs	r2, #0
 800047c:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <__aeabi_d2uiz+0x38>)
 800047e:	0004      	movs	r4, r0
 8000480:	000d      	movs	r5, r1
 8000482:	f7ff ffef 	bl	8000464 <__aeabi_dcmpge>
 8000486:	2800      	cmp	r0, #0
 8000488:	d104      	bne.n	8000494 <__aeabi_d2uiz+0x1c>
 800048a:	0020      	movs	r0, r4
 800048c:	0029      	movs	r1, r5
 800048e:	f001 fd9d 	bl	8001fcc <__aeabi_d2iz>
 8000492:	bd70      	pop	{r4, r5, r6, pc}
 8000494:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <__aeabi_d2uiz+0x38>)
 8000496:	2200      	movs	r2, #0
 8000498:	0020      	movs	r0, r4
 800049a:	0029      	movs	r1, r5
 800049c:	f001 f9e6 	bl	800186c <__aeabi_dsub>
 80004a0:	f001 fd94 	bl	8001fcc <__aeabi_d2iz>
 80004a4:	2380      	movs	r3, #128	; 0x80
 80004a6:	061b      	lsls	r3, r3, #24
 80004a8:	469c      	mov	ip, r3
 80004aa:	4460      	add	r0, ip
 80004ac:	e7f1      	b.n	8000492 <__aeabi_d2uiz+0x1a>
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	41e00000 	.word	0x41e00000

080004b4 <__aeabi_dadd>:
 80004b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b6:	464f      	mov	r7, r9
 80004b8:	46d6      	mov	lr, sl
 80004ba:	4646      	mov	r6, r8
 80004bc:	000d      	movs	r5, r1
 80004be:	0001      	movs	r1, r0
 80004c0:	0018      	movs	r0, r3
 80004c2:	b5c0      	push	{r6, r7, lr}
 80004c4:	0017      	movs	r7, r2
 80004c6:	032b      	lsls	r3, r5, #12
 80004c8:	0a5a      	lsrs	r2, r3, #9
 80004ca:	0f4b      	lsrs	r3, r1, #29
 80004cc:	4313      	orrs	r3, r2
 80004ce:	00ca      	lsls	r2, r1, #3
 80004d0:	4691      	mov	r9, r2
 80004d2:	0302      	lsls	r2, r0, #12
 80004d4:	006e      	lsls	r6, r5, #1
 80004d6:	0041      	lsls	r1, r0, #1
 80004d8:	0a52      	lsrs	r2, r2, #9
 80004da:	0fec      	lsrs	r4, r5, #31
 80004dc:	0f7d      	lsrs	r5, r7, #29
 80004de:	4315      	orrs	r5, r2
 80004e0:	0d76      	lsrs	r6, r6, #21
 80004e2:	0d49      	lsrs	r1, r1, #21
 80004e4:	0fc0      	lsrs	r0, r0, #31
 80004e6:	4682      	mov	sl, r0
 80004e8:	46ac      	mov	ip, r5
 80004ea:	00ff      	lsls	r7, r7, #3
 80004ec:	1a72      	subs	r2, r6, r1
 80004ee:	4284      	cmp	r4, r0
 80004f0:	d100      	bne.n	80004f4 <__aeabi_dadd+0x40>
 80004f2:	e098      	b.n	8000626 <__aeabi_dadd+0x172>
 80004f4:	2a00      	cmp	r2, #0
 80004f6:	dc00      	bgt.n	80004fa <__aeabi_dadd+0x46>
 80004f8:	e081      	b.n	80005fe <__aeabi_dadd+0x14a>
 80004fa:	2900      	cmp	r1, #0
 80004fc:	d100      	bne.n	8000500 <__aeabi_dadd+0x4c>
 80004fe:	e0b6      	b.n	800066e <__aeabi_dadd+0x1ba>
 8000500:	49c9      	ldr	r1, [pc, #804]	; (8000828 <__aeabi_dadd+0x374>)
 8000502:	428e      	cmp	r6, r1
 8000504:	d100      	bne.n	8000508 <__aeabi_dadd+0x54>
 8000506:	e172      	b.n	80007ee <__aeabi_dadd+0x33a>
 8000508:	2180      	movs	r1, #128	; 0x80
 800050a:	0028      	movs	r0, r5
 800050c:	0409      	lsls	r1, r1, #16
 800050e:	4308      	orrs	r0, r1
 8000510:	4684      	mov	ip, r0
 8000512:	2a38      	cmp	r2, #56	; 0x38
 8000514:	dd00      	ble.n	8000518 <__aeabi_dadd+0x64>
 8000516:	e15e      	b.n	80007d6 <__aeabi_dadd+0x322>
 8000518:	2a1f      	cmp	r2, #31
 800051a:	dd00      	ble.n	800051e <__aeabi_dadd+0x6a>
 800051c:	e1ee      	b.n	80008fc <__aeabi_dadd+0x448>
 800051e:	2020      	movs	r0, #32
 8000520:	0039      	movs	r1, r7
 8000522:	4665      	mov	r5, ip
 8000524:	1a80      	subs	r0, r0, r2
 8000526:	4087      	lsls	r7, r0
 8000528:	40d1      	lsrs	r1, r2
 800052a:	4085      	lsls	r5, r0
 800052c:	430d      	orrs	r5, r1
 800052e:	0039      	movs	r1, r7
 8000530:	1e4f      	subs	r7, r1, #1
 8000532:	41b9      	sbcs	r1, r7
 8000534:	4667      	mov	r7, ip
 8000536:	40d7      	lsrs	r7, r2
 8000538:	4329      	orrs	r1, r5
 800053a:	1bdb      	subs	r3, r3, r7
 800053c:	464a      	mov	r2, r9
 800053e:	1a55      	subs	r5, r2, r1
 8000540:	45a9      	cmp	r9, r5
 8000542:	4189      	sbcs	r1, r1
 8000544:	4249      	negs	r1, r1
 8000546:	1a5b      	subs	r3, r3, r1
 8000548:	4698      	mov	r8, r3
 800054a:	4643      	mov	r3, r8
 800054c:	021b      	lsls	r3, r3, #8
 800054e:	d400      	bmi.n	8000552 <__aeabi_dadd+0x9e>
 8000550:	e0cc      	b.n	80006ec <__aeabi_dadd+0x238>
 8000552:	4643      	mov	r3, r8
 8000554:	025b      	lsls	r3, r3, #9
 8000556:	0a5b      	lsrs	r3, r3, #9
 8000558:	4698      	mov	r8, r3
 800055a:	4643      	mov	r3, r8
 800055c:	2b00      	cmp	r3, #0
 800055e:	d100      	bne.n	8000562 <__aeabi_dadd+0xae>
 8000560:	e12c      	b.n	80007bc <__aeabi_dadd+0x308>
 8000562:	4640      	mov	r0, r8
 8000564:	f001 fd98 	bl	8002098 <__clzsi2>
 8000568:	0001      	movs	r1, r0
 800056a:	3908      	subs	r1, #8
 800056c:	2220      	movs	r2, #32
 800056e:	0028      	movs	r0, r5
 8000570:	4643      	mov	r3, r8
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	408b      	lsls	r3, r1
 8000576:	40d0      	lsrs	r0, r2
 8000578:	408d      	lsls	r5, r1
 800057a:	4303      	orrs	r3, r0
 800057c:	428e      	cmp	r6, r1
 800057e:	dd00      	ble.n	8000582 <__aeabi_dadd+0xce>
 8000580:	e117      	b.n	80007b2 <__aeabi_dadd+0x2fe>
 8000582:	1b8e      	subs	r6, r1, r6
 8000584:	1c72      	adds	r2, r6, #1
 8000586:	2a1f      	cmp	r2, #31
 8000588:	dd00      	ble.n	800058c <__aeabi_dadd+0xd8>
 800058a:	e1a7      	b.n	80008dc <__aeabi_dadd+0x428>
 800058c:	2120      	movs	r1, #32
 800058e:	0018      	movs	r0, r3
 8000590:	002e      	movs	r6, r5
 8000592:	1a89      	subs	r1, r1, r2
 8000594:	408d      	lsls	r5, r1
 8000596:	4088      	lsls	r0, r1
 8000598:	40d6      	lsrs	r6, r2
 800059a:	40d3      	lsrs	r3, r2
 800059c:	1e69      	subs	r1, r5, #1
 800059e:	418d      	sbcs	r5, r1
 80005a0:	4330      	orrs	r0, r6
 80005a2:	4698      	mov	r8, r3
 80005a4:	2600      	movs	r6, #0
 80005a6:	4305      	orrs	r5, r0
 80005a8:	076b      	lsls	r3, r5, #29
 80005aa:	d009      	beq.n	80005c0 <__aeabi_dadd+0x10c>
 80005ac:	230f      	movs	r3, #15
 80005ae:	402b      	ands	r3, r5
 80005b0:	2b04      	cmp	r3, #4
 80005b2:	d005      	beq.n	80005c0 <__aeabi_dadd+0x10c>
 80005b4:	1d2b      	adds	r3, r5, #4
 80005b6:	42ab      	cmp	r3, r5
 80005b8:	41ad      	sbcs	r5, r5
 80005ba:	426d      	negs	r5, r5
 80005bc:	44a8      	add	r8, r5
 80005be:	001d      	movs	r5, r3
 80005c0:	4643      	mov	r3, r8
 80005c2:	021b      	lsls	r3, r3, #8
 80005c4:	d400      	bmi.n	80005c8 <__aeabi_dadd+0x114>
 80005c6:	e094      	b.n	80006f2 <__aeabi_dadd+0x23e>
 80005c8:	4b97      	ldr	r3, [pc, #604]	; (8000828 <__aeabi_dadd+0x374>)
 80005ca:	1c72      	adds	r2, r6, #1
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d100      	bne.n	80005d2 <__aeabi_dadd+0x11e>
 80005d0:	e09d      	b.n	800070e <__aeabi_dadd+0x25a>
 80005d2:	4641      	mov	r1, r8
 80005d4:	4b95      	ldr	r3, [pc, #596]	; (800082c <__aeabi_dadd+0x378>)
 80005d6:	08ed      	lsrs	r5, r5, #3
 80005d8:	4019      	ands	r1, r3
 80005da:	000b      	movs	r3, r1
 80005dc:	0552      	lsls	r2, r2, #21
 80005de:	0749      	lsls	r1, r1, #29
 80005e0:	025b      	lsls	r3, r3, #9
 80005e2:	4329      	orrs	r1, r5
 80005e4:	0b1b      	lsrs	r3, r3, #12
 80005e6:	0d52      	lsrs	r2, r2, #21
 80005e8:	0512      	lsls	r2, r2, #20
 80005ea:	4313      	orrs	r3, r2
 80005ec:	07e4      	lsls	r4, r4, #31
 80005ee:	4323      	orrs	r3, r4
 80005f0:	0008      	movs	r0, r1
 80005f2:	0019      	movs	r1, r3
 80005f4:	bce0      	pop	{r5, r6, r7}
 80005f6:	46ba      	mov	sl, r7
 80005f8:	46b1      	mov	r9, r6
 80005fa:	46a8      	mov	r8, r5
 80005fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005fe:	2a00      	cmp	r2, #0
 8000600:	d043      	beq.n	800068a <__aeabi_dadd+0x1d6>
 8000602:	1b8a      	subs	r2, r1, r6
 8000604:	2e00      	cmp	r6, #0
 8000606:	d000      	beq.n	800060a <__aeabi_dadd+0x156>
 8000608:	e12a      	b.n	8000860 <__aeabi_dadd+0x3ac>
 800060a:	464c      	mov	r4, r9
 800060c:	431c      	orrs	r4, r3
 800060e:	d100      	bne.n	8000612 <__aeabi_dadd+0x15e>
 8000610:	e1d1      	b.n	80009b6 <__aeabi_dadd+0x502>
 8000612:	1e54      	subs	r4, r2, #1
 8000614:	2a01      	cmp	r2, #1
 8000616:	d100      	bne.n	800061a <__aeabi_dadd+0x166>
 8000618:	e21f      	b.n	8000a5a <__aeabi_dadd+0x5a6>
 800061a:	4d83      	ldr	r5, [pc, #524]	; (8000828 <__aeabi_dadd+0x374>)
 800061c:	42aa      	cmp	r2, r5
 800061e:	d100      	bne.n	8000622 <__aeabi_dadd+0x16e>
 8000620:	e272      	b.n	8000b08 <__aeabi_dadd+0x654>
 8000622:	0022      	movs	r2, r4
 8000624:	e123      	b.n	800086e <__aeabi_dadd+0x3ba>
 8000626:	2a00      	cmp	r2, #0
 8000628:	dc00      	bgt.n	800062c <__aeabi_dadd+0x178>
 800062a:	e098      	b.n	800075e <__aeabi_dadd+0x2aa>
 800062c:	2900      	cmp	r1, #0
 800062e:	d042      	beq.n	80006b6 <__aeabi_dadd+0x202>
 8000630:	497d      	ldr	r1, [pc, #500]	; (8000828 <__aeabi_dadd+0x374>)
 8000632:	428e      	cmp	r6, r1
 8000634:	d100      	bne.n	8000638 <__aeabi_dadd+0x184>
 8000636:	e0da      	b.n	80007ee <__aeabi_dadd+0x33a>
 8000638:	2180      	movs	r1, #128	; 0x80
 800063a:	0028      	movs	r0, r5
 800063c:	0409      	lsls	r1, r1, #16
 800063e:	4308      	orrs	r0, r1
 8000640:	4684      	mov	ip, r0
 8000642:	2a38      	cmp	r2, #56	; 0x38
 8000644:	dd00      	ble.n	8000648 <__aeabi_dadd+0x194>
 8000646:	e129      	b.n	800089c <__aeabi_dadd+0x3e8>
 8000648:	2a1f      	cmp	r2, #31
 800064a:	dc00      	bgt.n	800064e <__aeabi_dadd+0x19a>
 800064c:	e187      	b.n	800095e <__aeabi_dadd+0x4aa>
 800064e:	0011      	movs	r1, r2
 8000650:	4665      	mov	r5, ip
 8000652:	3920      	subs	r1, #32
 8000654:	40cd      	lsrs	r5, r1
 8000656:	2a20      	cmp	r2, #32
 8000658:	d004      	beq.n	8000664 <__aeabi_dadd+0x1b0>
 800065a:	2040      	movs	r0, #64	; 0x40
 800065c:	4661      	mov	r1, ip
 800065e:	1a82      	subs	r2, r0, r2
 8000660:	4091      	lsls	r1, r2
 8000662:	430f      	orrs	r7, r1
 8000664:	0039      	movs	r1, r7
 8000666:	1e4f      	subs	r7, r1, #1
 8000668:	41b9      	sbcs	r1, r7
 800066a:	430d      	orrs	r5, r1
 800066c:	e11b      	b.n	80008a6 <__aeabi_dadd+0x3f2>
 800066e:	0029      	movs	r1, r5
 8000670:	4339      	orrs	r1, r7
 8000672:	d100      	bne.n	8000676 <__aeabi_dadd+0x1c2>
 8000674:	e0b5      	b.n	80007e2 <__aeabi_dadd+0x32e>
 8000676:	1e51      	subs	r1, r2, #1
 8000678:	2a01      	cmp	r2, #1
 800067a:	d100      	bne.n	800067e <__aeabi_dadd+0x1ca>
 800067c:	e1ab      	b.n	80009d6 <__aeabi_dadd+0x522>
 800067e:	486a      	ldr	r0, [pc, #424]	; (8000828 <__aeabi_dadd+0x374>)
 8000680:	4282      	cmp	r2, r0
 8000682:	d100      	bne.n	8000686 <__aeabi_dadd+0x1d2>
 8000684:	e1b2      	b.n	80009ec <__aeabi_dadd+0x538>
 8000686:	000a      	movs	r2, r1
 8000688:	e743      	b.n	8000512 <__aeabi_dadd+0x5e>
 800068a:	4969      	ldr	r1, [pc, #420]	; (8000830 <__aeabi_dadd+0x37c>)
 800068c:	1c75      	adds	r5, r6, #1
 800068e:	420d      	tst	r5, r1
 8000690:	d000      	beq.n	8000694 <__aeabi_dadd+0x1e0>
 8000692:	e0cf      	b.n	8000834 <__aeabi_dadd+0x380>
 8000694:	2e00      	cmp	r6, #0
 8000696:	d000      	beq.n	800069a <__aeabi_dadd+0x1e6>
 8000698:	e193      	b.n	80009c2 <__aeabi_dadd+0x50e>
 800069a:	4649      	mov	r1, r9
 800069c:	4319      	orrs	r1, r3
 800069e:	d100      	bne.n	80006a2 <__aeabi_dadd+0x1ee>
 80006a0:	e1d1      	b.n	8000a46 <__aeabi_dadd+0x592>
 80006a2:	4661      	mov	r1, ip
 80006a4:	4339      	orrs	r1, r7
 80006a6:	d000      	beq.n	80006aa <__aeabi_dadd+0x1f6>
 80006a8:	e1e3      	b.n	8000a72 <__aeabi_dadd+0x5be>
 80006aa:	4649      	mov	r1, r9
 80006ac:	0758      	lsls	r0, r3, #29
 80006ae:	08c9      	lsrs	r1, r1, #3
 80006b0:	4301      	orrs	r1, r0
 80006b2:	08db      	lsrs	r3, r3, #3
 80006b4:	e026      	b.n	8000704 <__aeabi_dadd+0x250>
 80006b6:	0029      	movs	r1, r5
 80006b8:	4339      	orrs	r1, r7
 80006ba:	d100      	bne.n	80006be <__aeabi_dadd+0x20a>
 80006bc:	e091      	b.n	80007e2 <__aeabi_dadd+0x32e>
 80006be:	1e51      	subs	r1, r2, #1
 80006c0:	2a01      	cmp	r2, #1
 80006c2:	d005      	beq.n	80006d0 <__aeabi_dadd+0x21c>
 80006c4:	4858      	ldr	r0, [pc, #352]	; (8000828 <__aeabi_dadd+0x374>)
 80006c6:	4282      	cmp	r2, r0
 80006c8:	d100      	bne.n	80006cc <__aeabi_dadd+0x218>
 80006ca:	e18f      	b.n	80009ec <__aeabi_dadd+0x538>
 80006cc:	000a      	movs	r2, r1
 80006ce:	e7b8      	b.n	8000642 <__aeabi_dadd+0x18e>
 80006d0:	003d      	movs	r5, r7
 80006d2:	444d      	add	r5, r9
 80006d4:	454d      	cmp	r5, r9
 80006d6:	4189      	sbcs	r1, r1
 80006d8:	4463      	add	r3, ip
 80006da:	4698      	mov	r8, r3
 80006dc:	4249      	negs	r1, r1
 80006de:	4488      	add	r8, r1
 80006e0:	4643      	mov	r3, r8
 80006e2:	2602      	movs	r6, #2
 80006e4:	021b      	lsls	r3, r3, #8
 80006e6:	d500      	bpl.n	80006ea <__aeabi_dadd+0x236>
 80006e8:	e0eb      	b.n	80008c2 <__aeabi_dadd+0x40e>
 80006ea:	3e01      	subs	r6, #1
 80006ec:	076b      	lsls	r3, r5, #29
 80006ee:	d000      	beq.n	80006f2 <__aeabi_dadd+0x23e>
 80006f0:	e75c      	b.n	80005ac <__aeabi_dadd+0xf8>
 80006f2:	4643      	mov	r3, r8
 80006f4:	08e9      	lsrs	r1, r5, #3
 80006f6:	075a      	lsls	r2, r3, #29
 80006f8:	4311      	orrs	r1, r2
 80006fa:	0032      	movs	r2, r6
 80006fc:	08db      	lsrs	r3, r3, #3
 80006fe:	484a      	ldr	r0, [pc, #296]	; (8000828 <__aeabi_dadd+0x374>)
 8000700:	4282      	cmp	r2, r0
 8000702:	d021      	beq.n	8000748 <__aeabi_dadd+0x294>
 8000704:	031b      	lsls	r3, r3, #12
 8000706:	0552      	lsls	r2, r2, #21
 8000708:	0b1b      	lsrs	r3, r3, #12
 800070a:	0d52      	lsrs	r2, r2, #21
 800070c:	e76c      	b.n	80005e8 <__aeabi_dadd+0x134>
 800070e:	2300      	movs	r3, #0
 8000710:	2100      	movs	r1, #0
 8000712:	e769      	b.n	80005e8 <__aeabi_dadd+0x134>
 8000714:	002a      	movs	r2, r5
 8000716:	433a      	orrs	r2, r7
 8000718:	d069      	beq.n	80007ee <__aeabi_dadd+0x33a>
 800071a:	464a      	mov	r2, r9
 800071c:	0758      	lsls	r0, r3, #29
 800071e:	08d1      	lsrs	r1, r2, #3
 8000720:	08da      	lsrs	r2, r3, #3
 8000722:	2380      	movs	r3, #128	; 0x80
 8000724:	031b      	lsls	r3, r3, #12
 8000726:	4308      	orrs	r0, r1
 8000728:	421a      	tst	r2, r3
 800072a:	d007      	beq.n	800073c <__aeabi_dadd+0x288>
 800072c:	0029      	movs	r1, r5
 800072e:	08ed      	lsrs	r5, r5, #3
 8000730:	421d      	tst	r5, r3
 8000732:	d103      	bne.n	800073c <__aeabi_dadd+0x288>
 8000734:	002a      	movs	r2, r5
 8000736:	08ff      	lsrs	r7, r7, #3
 8000738:	0748      	lsls	r0, r1, #29
 800073a:	4338      	orrs	r0, r7
 800073c:	0f43      	lsrs	r3, r0, #29
 800073e:	00c1      	lsls	r1, r0, #3
 8000740:	075b      	lsls	r3, r3, #29
 8000742:	08c9      	lsrs	r1, r1, #3
 8000744:	4319      	orrs	r1, r3
 8000746:	0013      	movs	r3, r2
 8000748:	000a      	movs	r2, r1
 800074a:	431a      	orrs	r2, r3
 800074c:	d100      	bne.n	8000750 <__aeabi_dadd+0x29c>
 800074e:	e213      	b.n	8000b78 <__aeabi_dadd+0x6c4>
 8000750:	2280      	movs	r2, #128	; 0x80
 8000752:	0312      	lsls	r2, r2, #12
 8000754:	4313      	orrs	r3, r2
 8000756:	031b      	lsls	r3, r3, #12
 8000758:	4a33      	ldr	r2, [pc, #204]	; (8000828 <__aeabi_dadd+0x374>)
 800075a:	0b1b      	lsrs	r3, r3, #12
 800075c:	e744      	b.n	80005e8 <__aeabi_dadd+0x134>
 800075e:	2a00      	cmp	r2, #0
 8000760:	d04b      	beq.n	80007fa <__aeabi_dadd+0x346>
 8000762:	1b8a      	subs	r2, r1, r6
 8000764:	2e00      	cmp	r6, #0
 8000766:	d100      	bne.n	800076a <__aeabi_dadd+0x2b6>
 8000768:	e0e7      	b.n	800093a <__aeabi_dadd+0x486>
 800076a:	482f      	ldr	r0, [pc, #188]	; (8000828 <__aeabi_dadd+0x374>)
 800076c:	4281      	cmp	r1, r0
 800076e:	d100      	bne.n	8000772 <__aeabi_dadd+0x2be>
 8000770:	e195      	b.n	8000a9e <__aeabi_dadd+0x5ea>
 8000772:	2080      	movs	r0, #128	; 0x80
 8000774:	0400      	lsls	r0, r0, #16
 8000776:	4303      	orrs	r3, r0
 8000778:	2a38      	cmp	r2, #56	; 0x38
 800077a:	dd00      	ble.n	800077e <__aeabi_dadd+0x2ca>
 800077c:	e143      	b.n	8000a06 <__aeabi_dadd+0x552>
 800077e:	2a1f      	cmp	r2, #31
 8000780:	dd00      	ble.n	8000784 <__aeabi_dadd+0x2d0>
 8000782:	e1db      	b.n	8000b3c <__aeabi_dadd+0x688>
 8000784:	2020      	movs	r0, #32
 8000786:	001d      	movs	r5, r3
 8000788:	464e      	mov	r6, r9
 800078a:	1a80      	subs	r0, r0, r2
 800078c:	4085      	lsls	r5, r0
 800078e:	40d6      	lsrs	r6, r2
 8000790:	4335      	orrs	r5, r6
 8000792:	464e      	mov	r6, r9
 8000794:	4086      	lsls	r6, r0
 8000796:	0030      	movs	r0, r6
 8000798:	40d3      	lsrs	r3, r2
 800079a:	1e46      	subs	r6, r0, #1
 800079c:	41b0      	sbcs	r0, r6
 800079e:	449c      	add	ip, r3
 80007a0:	4305      	orrs	r5, r0
 80007a2:	19ed      	adds	r5, r5, r7
 80007a4:	42bd      	cmp	r5, r7
 80007a6:	419b      	sbcs	r3, r3
 80007a8:	425b      	negs	r3, r3
 80007aa:	4463      	add	r3, ip
 80007ac:	4698      	mov	r8, r3
 80007ae:	000e      	movs	r6, r1
 80007b0:	e07f      	b.n	80008b2 <__aeabi_dadd+0x3fe>
 80007b2:	4a1e      	ldr	r2, [pc, #120]	; (800082c <__aeabi_dadd+0x378>)
 80007b4:	1a76      	subs	r6, r6, r1
 80007b6:	4013      	ands	r3, r2
 80007b8:	4698      	mov	r8, r3
 80007ba:	e6f5      	b.n	80005a8 <__aeabi_dadd+0xf4>
 80007bc:	0028      	movs	r0, r5
 80007be:	f001 fc6b 	bl	8002098 <__clzsi2>
 80007c2:	0001      	movs	r1, r0
 80007c4:	3118      	adds	r1, #24
 80007c6:	291f      	cmp	r1, #31
 80007c8:	dc00      	bgt.n	80007cc <__aeabi_dadd+0x318>
 80007ca:	e6cf      	b.n	800056c <__aeabi_dadd+0xb8>
 80007cc:	002b      	movs	r3, r5
 80007ce:	3808      	subs	r0, #8
 80007d0:	4083      	lsls	r3, r0
 80007d2:	2500      	movs	r5, #0
 80007d4:	e6d2      	b.n	800057c <__aeabi_dadd+0xc8>
 80007d6:	4662      	mov	r2, ip
 80007d8:	433a      	orrs	r2, r7
 80007da:	0011      	movs	r1, r2
 80007dc:	1e4f      	subs	r7, r1, #1
 80007de:	41b9      	sbcs	r1, r7
 80007e0:	e6ac      	b.n	800053c <__aeabi_dadd+0x88>
 80007e2:	4649      	mov	r1, r9
 80007e4:	0758      	lsls	r0, r3, #29
 80007e6:	08c9      	lsrs	r1, r1, #3
 80007e8:	4301      	orrs	r1, r0
 80007ea:	08db      	lsrs	r3, r3, #3
 80007ec:	e787      	b.n	80006fe <__aeabi_dadd+0x24a>
 80007ee:	4649      	mov	r1, r9
 80007f0:	075a      	lsls	r2, r3, #29
 80007f2:	08c9      	lsrs	r1, r1, #3
 80007f4:	4311      	orrs	r1, r2
 80007f6:	08db      	lsrs	r3, r3, #3
 80007f8:	e7a6      	b.n	8000748 <__aeabi_dadd+0x294>
 80007fa:	490d      	ldr	r1, [pc, #52]	; (8000830 <__aeabi_dadd+0x37c>)
 80007fc:	1c70      	adds	r0, r6, #1
 80007fe:	4208      	tst	r0, r1
 8000800:	d000      	beq.n	8000804 <__aeabi_dadd+0x350>
 8000802:	e0bb      	b.n	800097c <__aeabi_dadd+0x4c8>
 8000804:	2e00      	cmp	r6, #0
 8000806:	d000      	beq.n	800080a <__aeabi_dadd+0x356>
 8000808:	e114      	b.n	8000a34 <__aeabi_dadd+0x580>
 800080a:	4649      	mov	r1, r9
 800080c:	4319      	orrs	r1, r3
 800080e:	d100      	bne.n	8000812 <__aeabi_dadd+0x35e>
 8000810:	e175      	b.n	8000afe <__aeabi_dadd+0x64a>
 8000812:	0029      	movs	r1, r5
 8000814:	4339      	orrs	r1, r7
 8000816:	d000      	beq.n	800081a <__aeabi_dadd+0x366>
 8000818:	e17e      	b.n	8000b18 <__aeabi_dadd+0x664>
 800081a:	4649      	mov	r1, r9
 800081c:	0758      	lsls	r0, r3, #29
 800081e:	08c9      	lsrs	r1, r1, #3
 8000820:	4301      	orrs	r1, r0
 8000822:	08db      	lsrs	r3, r3, #3
 8000824:	e76e      	b.n	8000704 <__aeabi_dadd+0x250>
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	000007ff 	.word	0x000007ff
 800082c:	ff7fffff 	.word	0xff7fffff
 8000830:	000007fe 	.word	0x000007fe
 8000834:	4649      	mov	r1, r9
 8000836:	1bcd      	subs	r5, r1, r7
 8000838:	4661      	mov	r1, ip
 800083a:	1a58      	subs	r0, r3, r1
 800083c:	45a9      	cmp	r9, r5
 800083e:	4189      	sbcs	r1, r1
 8000840:	4249      	negs	r1, r1
 8000842:	4688      	mov	r8, r1
 8000844:	0001      	movs	r1, r0
 8000846:	4640      	mov	r0, r8
 8000848:	1a09      	subs	r1, r1, r0
 800084a:	4688      	mov	r8, r1
 800084c:	0209      	lsls	r1, r1, #8
 800084e:	d500      	bpl.n	8000852 <__aeabi_dadd+0x39e>
 8000850:	e0a6      	b.n	80009a0 <__aeabi_dadd+0x4ec>
 8000852:	4641      	mov	r1, r8
 8000854:	4329      	orrs	r1, r5
 8000856:	d000      	beq.n	800085a <__aeabi_dadd+0x3a6>
 8000858:	e67f      	b.n	800055a <__aeabi_dadd+0xa6>
 800085a:	2300      	movs	r3, #0
 800085c:	2400      	movs	r4, #0
 800085e:	e751      	b.n	8000704 <__aeabi_dadd+0x250>
 8000860:	4cc7      	ldr	r4, [pc, #796]	; (8000b80 <__aeabi_dadd+0x6cc>)
 8000862:	42a1      	cmp	r1, r4
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0x3b4>
 8000866:	e0c7      	b.n	80009f8 <__aeabi_dadd+0x544>
 8000868:	2480      	movs	r4, #128	; 0x80
 800086a:	0424      	lsls	r4, r4, #16
 800086c:	4323      	orrs	r3, r4
 800086e:	2a38      	cmp	r2, #56	; 0x38
 8000870:	dc54      	bgt.n	800091c <__aeabi_dadd+0x468>
 8000872:	2a1f      	cmp	r2, #31
 8000874:	dd00      	ble.n	8000878 <__aeabi_dadd+0x3c4>
 8000876:	e0cc      	b.n	8000a12 <__aeabi_dadd+0x55e>
 8000878:	2420      	movs	r4, #32
 800087a:	4648      	mov	r0, r9
 800087c:	1aa4      	subs	r4, r4, r2
 800087e:	001d      	movs	r5, r3
 8000880:	464e      	mov	r6, r9
 8000882:	40a0      	lsls	r0, r4
 8000884:	40d6      	lsrs	r6, r2
 8000886:	40a5      	lsls	r5, r4
 8000888:	0004      	movs	r4, r0
 800088a:	40d3      	lsrs	r3, r2
 800088c:	4662      	mov	r2, ip
 800088e:	4335      	orrs	r5, r6
 8000890:	1e66      	subs	r6, r4, #1
 8000892:	41b4      	sbcs	r4, r6
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	469c      	mov	ip, r3
 8000898:	4325      	orrs	r5, r4
 800089a:	e044      	b.n	8000926 <__aeabi_dadd+0x472>
 800089c:	4662      	mov	r2, ip
 800089e:	433a      	orrs	r2, r7
 80008a0:	0015      	movs	r5, r2
 80008a2:	1e6f      	subs	r7, r5, #1
 80008a4:	41bd      	sbcs	r5, r7
 80008a6:	444d      	add	r5, r9
 80008a8:	454d      	cmp	r5, r9
 80008aa:	4189      	sbcs	r1, r1
 80008ac:	4249      	negs	r1, r1
 80008ae:	4688      	mov	r8, r1
 80008b0:	4498      	add	r8, r3
 80008b2:	4643      	mov	r3, r8
 80008b4:	021b      	lsls	r3, r3, #8
 80008b6:	d400      	bmi.n	80008ba <__aeabi_dadd+0x406>
 80008b8:	e718      	b.n	80006ec <__aeabi_dadd+0x238>
 80008ba:	4bb1      	ldr	r3, [pc, #708]	; (8000b80 <__aeabi_dadd+0x6cc>)
 80008bc:	3601      	adds	r6, #1
 80008be:	429e      	cmp	r6, r3
 80008c0:	d049      	beq.n	8000956 <__aeabi_dadd+0x4a2>
 80008c2:	4642      	mov	r2, r8
 80008c4:	4baf      	ldr	r3, [pc, #700]	; (8000b84 <__aeabi_dadd+0x6d0>)
 80008c6:	2101      	movs	r1, #1
 80008c8:	401a      	ands	r2, r3
 80008ca:	0013      	movs	r3, r2
 80008cc:	086a      	lsrs	r2, r5, #1
 80008ce:	400d      	ands	r5, r1
 80008d0:	4315      	orrs	r5, r2
 80008d2:	07d9      	lsls	r1, r3, #31
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	4698      	mov	r8, r3
 80008d8:	430d      	orrs	r5, r1
 80008da:	e665      	b.n	80005a8 <__aeabi_dadd+0xf4>
 80008dc:	0018      	movs	r0, r3
 80008de:	3e1f      	subs	r6, #31
 80008e0:	40f0      	lsrs	r0, r6
 80008e2:	2a20      	cmp	r2, #32
 80008e4:	d003      	beq.n	80008ee <__aeabi_dadd+0x43a>
 80008e6:	2140      	movs	r1, #64	; 0x40
 80008e8:	1a8a      	subs	r2, r1, r2
 80008ea:	4093      	lsls	r3, r2
 80008ec:	431d      	orrs	r5, r3
 80008ee:	1e69      	subs	r1, r5, #1
 80008f0:	418d      	sbcs	r5, r1
 80008f2:	2300      	movs	r3, #0
 80008f4:	2600      	movs	r6, #0
 80008f6:	4698      	mov	r8, r3
 80008f8:	4305      	orrs	r5, r0
 80008fa:	e6f7      	b.n	80006ec <__aeabi_dadd+0x238>
 80008fc:	0011      	movs	r1, r2
 80008fe:	4665      	mov	r5, ip
 8000900:	3920      	subs	r1, #32
 8000902:	40cd      	lsrs	r5, r1
 8000904:	2a20      	cmp	r2, #32
 8000906:	d004      	beq.n	8000912 <__aeabi_dadd+0x45e>
 8000908:	2040      	movs	r0, #64	; 0x40
 800090a:	4661      	mov	r1, ip
 800090c:	1a82      	subs	r2, r0, r2
 800090e:	4091      	lsls	r1, r2
 8000910:	430f      	orrs	r7, r1
 8000912:	0039      	movs	r1, r7
 8000914:	1e4f      	subs	r7, r1, #1
 8000916:	41b9      	sbcs	r1, r7
 8000918:	4329      	orrs	r1, r5
 800091a:	e60f      	b.n	800053c <__aeabi_dadd+0x88>
 800091c:	464a      	mov	r2, r9
 800091e:	4313      	orrs	r3, r2
 8000920:	001d      	movs	r5, r3
 8000922:	1e6b      	subs	r3, r5, #1
 8000924:	419d      	sbcs	r5, r3
 8000926:	1b7d      	subs	r5, r7, r5
 8000928:	42af      	cmp	r7, r5
 800092a:	419b      	sbcs	r3, r3
 800092c:	4662      	mov	r2, ip
 800092e:	425b      	negs	r3, r3
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	4698      	mov	r8, r3
 8000934:	4654      	mov	r4, sl
 8000936:	000e      	movs	r6, r1
 8000938:	e607      	b.n	800054a <__aeabi_dadd+0x96>
 800093a:	4648      	mov	r0, r9
 800093c:	4318      	orrs	r0, r3
 800093e:	d100      	bne.n	8000942 <__aeabi_dadd+0x48e>
 8000940:	e0b3      	b.n	8000aaa <__aeabi_dadd+0x5f6>
 8000942:	1e50      	subs	r0, r2, #1
 8000944:	2a01      	cmp	r2, #1
 8000946:	d100      	bne.n	800094a <__aeabi_dadd+0x496>
 8000948:	e10d      	b.n	8000b66 <__aeabi_dadd+0x6b2>
 800094a:	4d8d      	ldr	r5, [pc, #564]	; (8000b80 <__aeabi_dadd+0x6cc>)
 800094c:	42aa      	cmp	r2, r5
 800094e:	d100      	bne.n	8000952 <__aeabi_dadd+0x49e>
 8000950:	e0a5      	b.n	8000a9e <__aeabi_dadd+0x5ea>
 8000952:	0002      	movs	r2, r0
 8000954:	e710      	b.n	8000778 <__aeabi_dadd+0x2c4>
 8000956:	0032      	movs	r2, r6
 8000958:	2300      	movs	r3, #0
 800095a:	2100      	movs	r1, #0
 800095c:	e644      	b.n	80005e8 <__aeabi_dadd+0x134>
 800095e:	2120      	movs	r1, #32
 8000960:	0038      	movs	r0, r7
 8000962:	1a89      	subs	r1, r1, r2
 8000964:	4665      	mov	r5, ip
 8000966:	408f      	lsls	r7, r1
 8000968:	408d      	lsls	r5, r1
 800096a:	40d0      	lsrs	r0, r2
 800096c:	1e79      	subs	r1, r7, #1
 800096e:	418f      	sbcs	r7, r1
 8000970:	4305      	orrs	r5, r0
 8000972:	433d      	orrs	r5, r7
 8000974:	4667      	mov	r7, ip
 8000976:	40d7      	lsrs	r7, r2
 8000978:	19db      	adds	r3, r3, r7
 800097a:	e794      	b.n	80008a6 <__aeabi_dadd+0x3f2>
 800097c:	4a80      	ldr	r2, [pc, #512]	; (8000b80 <__aeabi_dadd+0x6cc>)
 800097e:	4290      	cmp	r0, r2
 8000980:	d100      	bne.n	8000984 <__aeabi_dadd+0x4d0>
 8000982:	e0ec      	b.n	8000b5e <__aeabi_dadd+0x6aa>
 8000984:	0039      	movs	r1, r7
 8000986:	4449      	add	r1, r9
 8000988:	4549      	cmp	r1, r9
 800098a:	4192      	sbcs	r2, r2
 800098c:	4463      	add	r3, ip
 800098e:	4252      	negs	r2, r2
 8000990:	189b      	adds	r3, r3, r2
 8000992:	07dd      	lsls	r5, r3, #31
 8000994:	0849      	lsrs	r1, r1, #1
 8000996:	085b      	lsrs	r3, r3, #1
 8000998:	4698      	mov	r8, r3
 800099a:	0006      	movs	r6, r0
 800099c:	430d      	orrs	r5, r1
 800099e:	e6a5      	b.n	80006ec <__aeabi_dadd+0x238>
 80009a0:	464a      	mov	r2, r9
 80009a2:	1abd      	subs	r5, r7, r2
 80009a4:	42af      	cmp	r7, r5
 80009a6:	4189      	sbcs	r1, r1
 80009a8:	4662      	mov	r2, ip
 80009aa:	4249      	negs	r1, r1
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	1a5b      	subs	r3, r3, r1
 80009b0:	4698      	mov	r8, r3
 80009b2:	4654      	mov	r4, sl
 80009b4:	e5d1      	b.n	800055a <__aeabi_dadd+0xa6>
 80009b6:	076c      	lsls	r4, r5, #29
 80009b8:	08f9      	lsrs	r1, r7, #3
 80009ba:	4321      	orrs	r1, r4
 80009bc:	08eb      	lsrs	r3, r5, #3
 80009be:	0004      	movs	r4, r0
 80009c0:	e69d      	b.n	80006fe <__aeabi_dadd+0x24a>
 80009c2:	464a      	mov	r2, r9
 80009c4:	431a      	orrs	r2, r3
 80009c6:	d175      	bne.n	8000ab4 <__aeabi_dadd+0x600>
 80009c8:	4661      	mov	r1, ip
 80009ca:	4339      	orrs	r1, r7
 80009cc:	d114      	bne.n	80009f8 <__aeabi_dadd+0x544>
 80009ce:	2380      	movs	r3, #128	; 0x80
 80009d0:	2400      	movs	r4, #0
 80009d2:	031b      	lsls	r3, r3, #12
 80009d4:	e6bc      	b.n	8000750 <__aeabi_dadd+0x29c>
 80009d6:	464a      	mov	r2, r9
 80009d8:	1bd5      	subs	r5, r2, r7
 80009da:	45a9      	cmp	r9, r5
 80009dc:	4189      	sbcs	r1, r1
 80009de:	4662      	mov	r2, ip
 80009e0:	4249      	negs	r1, r1
 80009e2:	1a9b      	subs	r3, r3, r2
 80009e4:	1a5b      	subs	r3, r3, r1
 80009e6:	4698      	mov	r8, r3
 80009e8:	2601      	movs	r6, #1
 80009ea:	e5ae      	b.n	800054a <__aeabi_dadd+0x96>
 80009ec:	464a      	mov	r2, r9
 80009ee:	08d1      	lsrs	r1, r2, #3
 80009f0:	075a      	lsls	r2, r3, #29
 80009f2:	4311      	orrs	r1, r2
 80009f4:	08db      	lsrs	r3, r3, #3
 80009f6:	e6a7      	b.n	8000748 <__aeabi_dadd+0x294>
 80009f8:	4663      	mov	r3, ip
 80009fa:	08f9      	lsrs	r1, r7, #3
 80009fc:	075a      	lsls	r2, r3, #29
 80009fe:	4654      	mov	r4, sl
 8000a00:	4311      	orrs	r1, r2
 8000a02:	08db      	lsrs	r3, r3, #3
 8000a04:	e6a0      	b.n	8000748 <__aeabi_dadd+0x294>
 8000a06:	464a      	mov	r2, r9
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	001d      	movs	r5, r3
 8000a0c:	1e6b      	subs	r3, r5, #1
 8000a0e:	419d      	sbcs	r5, r3
 8000a10:	e6c7      	b.n	80007a2 <__aeabi_dadd+0x2ee>
 8000a12:	0014      	movs	r4, r2
 8000a14:	001e      	movs	r6, r3
 8000a16:	3c20      	subs	r4, #32
 8000a18:	40e6      	lsrs	r6, r4
 8000a1a:	2a20      	cmp	r2, #32
 8000a1c:	d005      	beq.n	8000a2a <__aeabi_dadd+0x576>
 8000a1e:	2440      	movs	r4, #64	; 0x40
 8000a20:	1aa2      	subs	r2, r4, r2
 8000a22:	4093      	lsls	r3, r2
 8000a24:	464a      	mov	r2, r9
 8000a26:	431a      	orrs	r2, r3
 8000a28:	4691      	mov	r9, r2
 8000a2a:	464d      	mov	r5, r9
 8000a2c:	1e6b      	subs	r3, r5, #1
 8000a2e:	419d      	sbcs	r5, r3
 8000a30:	4335      	orrs	r5, r6
 8000a32:	e778      	b.n	8000926 <__aeabi_dadd+0x472>
 8000a34:	464a      	mov	r2, r9
 8000a36:	431a      	orrs	r2, r3
 8000a38:	d000      	beq.n	8000a3c <__aeabi_dadd+0x588>
 8000a3a:	e66b      	b.n	8000714 <__aeabi_dadd+0x260>
 8000a3c:	076b      	lsls	r3, r5, #29
 8000a3e:	08f9      	lsrs	r1, r7, #3
 8000a40:	4319      	orrs	r1, r3
 8000a42:	08eb      	lsrs	r3, r5, #3
 8000a44:	e680      	b.n	8000748 <__aeabi_dadd+0x294>
 8000a46:	4661      	mov	r1, ip
 8000a48:	4339      	orrs	r1, r7
 8000a4a:	d054      	beq.n	8000af6 <__aeabi_dadd+0x642>
 8000a4c:	4663      	mov	r3, ip
 8000a4e:	08f9      	lsrs	r1, r7, #3
 8000a50:	075c      	lsls	r4, r3, #29
 8000a52:	4321      	orrs	r1, r4
 8000a54:	08db      	lsrs	r3, r3, #3
 8000a56:	0004      	movs	r4, r0
 8000a58:	e654      	b.n	8000704 <__aeabi_dadd+0x250>
 8000a5a:	464a      	mov	r2, r9
 8000a5c:	1abd      	subs	r5, r7, r2
 8000a5e:	42af      	cmp	r7, r5
 8000a60:	4189      	sbcs	r1, r1
 8000a62:	4662      	mov	r2, ip
 8000a64:	4249      	negs	r1, r1
 8000a66:	1ad3      	subs	r3, r2, r3
 8000a68:	1a5b      	subs	r3, r3, r1
 8000a6a:	4698      	mov	r8, r3
 8000a6c:	0004      	movs	r4, r0
 8000a6e:	2601      	movs	r6, #1
 8000a70:	e56b      	b.n	800054a <__aeabi_dadd+0x96>
 8000a72:	464a      	mov	r2, r9
 8000a74:	1bd5      	subs	r5, r2, r7
 8000a76:	45a9      	cmp	r9, r5
 8000a78:	4189      	sbcs	r1, r1
 8000a7a:	4662      	mov	r2, ip
 8000a7c:	4249      	negs	r1, r1
 8000a7e:	1a9a      	subs	r2, r3, r2
 8000a80:	1a52      	subs	r2, r2, r1
 8000a82:	4690      	mov	r8, r2
 8000a84:	0212      	lsls	r2, r2, #8
 8000a86:	d532      	bpl.n	8000aee <__aeabi_dadd+0x63a>
 8000a88:	464a      	mov	r2, r9
 8000a8a:	1abd      	subs	r5, r7, r2
 8000a8c:	42af      	cmp	r7, r5
 8000a8e:	4189      	sbcs	r1, r1
 8000a90:	4662      	mov	r2, ip
 8000a92:	4249      	negs	r1, r1
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	1a5b      	subs	r3, r3, r1
 8000a98:	4698      	mov	r8, r3
 8000a9a:	0004      	movs	r4, r0
 8000a9c:	e584      	b.n	80005a8 <__aeabi_dadd+0xf4>
 8000a9e:	4663      	mov	r3, ip
 8000aa0:	08f9      	lsrs	r1, r7, #3
 8000aa2:	075a      	lsls	r2, r3, #29
 8000aa4:	4311      	orrs	r1, r2
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	e64e      	b.n	8000748 <__aeabi_dadd+0x294>
 8000aaa:	08f9      	lsrs	r1, r7, #3
 8000aac:	0768      	lsls	r0, r5, #29
 8000aae:	4301      	orrs	r1, r0
 8000ab0:	08eb      	lsrs	r3, r5, #3
 8000ab2:	e624      	b.n	80006fe <__aeabi_dadd+0x24a>
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	433a      	orrs	r2, r7
 8000ab8:	d100      	bne.n	8000abc <__aeabi_dadd+0x608>
 8000aba:	e698      	b.n	80007ee <__aeabi_dadd+0x33a>
 8000abc:	464a      	mov	r2, r9
 8000abe:	08d1      	lsrs	r1, r2, #3
 8000ac0:	075a      	lsls	r2, r3, #29
 8000ac2:	4311      	orrs	r1, r2
 8000ac4:	08da      	lsrs	r2, r3, #3
 8000ac6:	2380      	movs	r3, #128	; 0x80
 8000ac8:	031b      	lsls	r3, r3, #12
 8000aca:	421a      	tst	r2, r3
 8000acc:	d008      	beq.n	8000ae0 <__aeabi_dadd+0x62c>
 8000ace:	4660      	mov	r0, ip
 8000ad0:	08c5      	lsrs	r5, r0, #3
 8000ad2:	421d      	tst	r5, r3
 8000ad4:	d104      	bne.n	8000ae0 <__aeabi_dadd+0x62c>
 8000ad6:	4654      	mov	r4, sl
 8000ad8:	002a      	movs	r2, r5
 8000ada:	08f9      	lsrs	r1, r7, #3
 8000adc:	0743      	lsls	r3, r0, #29
 8000ade:	4319      	orrs	r1, r3
 8000ae0:	0f4b      	lsrs	r3, r1, #29
 8000ae2:	00c9      	lsls	r1, r1, #3
 8000ae4:	075b      	lsls	r3, r3, #29
 8000ae6:	08c9      	lsrs	r1, r1, #3
 8000ae8:	4319      	orrs	r1, r3
 8000aea:	0013      	movs	r3, r2
 8000aec:	e62c      	b.n	8000748 <__aeabi_dadd+0x294>
 8000aee:	4641      	mov	r1, r8
 8000af0:	4329      	orrs	r1, r5
 8000af2:	d000      	beq.n	8000af6 <__aeabi_dadd+0x642>
 8000af4:	e5fa      	b.n	80006ec <__aeabi_dadd+0x238>
 8000af6:	2300      	movs	r3, #0
 8000af8:	000a      	movs	r2, r1
 8000afa:	2400      	movs	r4, #0
 8000afc:	e602      	b.n	8000704 <__aeabi_dadd+0x250>
 8000afe:	076b      	lsls	r3, r5, #29
 8000b00:	08f9      	lsrs	r1, r7, #3
 8000b02:	4319      	orrs	r1, r3
 8000b04:	08eb      	lsrs	r3, r5, #3
 8000b06:	e5fd      	b.n	8000704 <__aeabi_dadd+0x250>
 8000b08:	4663      	mov	r3, ip
 8000b0a:	08f9      	lsrs	r1, r7, #3
 8000b0c:	075b      	lsls	r3, r3, #29
 8000b0e:	4319      	orrs	r1, r3
 8000b10:	4663      	mov	r3, ip
 8000b12:	0004      	movs	r4, r0
 8000b14:	08db      	lsrs	r3, r3, #3
 8000b16:	e617      	b.n	8000748 <__aeabi_dadd+0x294>
 8000b18:	003d      	movs	r5, r7
 8000b1a:	444d      	add	r5, r9
 8000b1c:	4463      	add	r3, ip
 8000b1e:	454d      	cmp	r5, r9
 8000b20:	4189      	sbcs	r1, r1
 8000b22:	4698      	mov	r8, r3
 8000b24:	4249      	negs	r1, r1
 8000b26:	4488      	add	r8, r1
 8000b28:	4643      	mov	r3, r8
 8000b2a:	021b      	lsls	r3, r3, #8
 8000b2c:	d400      	bmi.n	8000b30 <__aeabi_dadd+0x67c>
 8000b2e:	e5dd      	b.n	80006ec <__aeabi_dadd+0x238>
 8000b30:	4642      	mov	r2, r8
 8000b32:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <__aeabi_dadd+0x6d0>)
 8000b34:	2601      	movs	r6, #1
 8000b36:	401a      	ands	r2, r3
 8000b38:	4690      	mov	r8, r2
 8000b3a:	e5d7      	b.n	80006ec <__aeabi_dadd+0x238>
 8000b3c:	0010      	movs	r0, r2
 8000b3e:	001e      	movs	r6, r3
 8000b40:	3820      	subs	r0, #32
 8000b42:	40c6      	lsrs	r6, r0
 8000b44:	2a20      	cmp	r2, #32
 8000b46:	d005      	beq.n	8000b54 <__aeabi_dadd+0x6a0>
 8000b48:	2040      	movs	r0, #64	; 0x40
 8000b4a:	1a82      	subs	r2, r0, r2
 8000b4c:	4093      	lsls	r3, r2
 8000b4e:	464a      	mov	r2, r9
 8000b50:	431a      	orrs	r2, r3
 8000b52:	4691      	mov	r9, r2
 8000b54:	464d      	mov	r5, r9
 8000b56:	1e6b      	subs	r3, r5, #1
 8000b58:	419d      	sbcs	r5, r3
 8000b5a:	4335      	orrs	r5, r6
 8000b5c:	e621      	b.n	80007a2 <__aeabi_dadd+0x2ee>
 8000b5e:	0002      	movs	r2, r0
 8000b60:	2300      	movs	r3, #0
 8000b62:	2100      	movs	r1, #0
 8000b64:	e540      	b.n	80005e8 <__aeabi_dadd+0x134>
 8000b66:	464a      	mov	r2, r9
 8000b68:	19d5      	adds	r5, r2, r7
 8000b6a:	42bd      	cmp	r5, r7
 8000b6c:	4189      	sbcs	r1, r1
 8000b6e:	4463      	add	r3, ip
 8000b70:	4698      	mov	r8, r3
 8000b72:	4249      	negs	r1, r1
 8000b74:	4488      	add	r8, r1
 8000b76:	e5b3      	b.n	80006e0 <__aeabi_dadd+0x22c>
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4a01      	ldr	r2, [pc, #4]	; (8000b80 <__aeabi_dadd+0x6cc>)
 8000b7c:	000b      	movs	r3, r1
 8000b7e:	e533      	b.n	80005e8 <__aeabi_dadd+0x134>
 8000b80:	000007ff 	.word	0x000007ff
 8000b84:	ff7fffff 	.word	0xff7fffff

08000b88 <__aeabi_ddiv>:
 8000b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b8a:	4657      	mov	r7, sl
 8000b8c:	464e      	mov	r6, r9
 8000b8e:	4645      	mov	r5, r8
 8000b90:	46de      	mov	lr, fp
 8000b92:	b5e0      	push	{r5, r6, r7, lr}
 8000b94:	4681      	mov	r9, r0
 8000b96:	0005      	movs	r5, r0
 8000b98:	030c      	lsls	r4, r1, #12
 8000b9a:	0048      	lsls	r0, r1, #1
 8000b9c:	4692      	mov	sl, r2
 8000b9e:	001f      	movs	r7, r3
 8000ba0:	b085      	sub	sp, #20
 8000ba2:	0b24      	lsrs	r4, r4, #12
 8000ba4:	0d40      	lsrs	r0, r0, #21
 8000ba6:	0fce      	lsrs	r6, r1, #31
 8000ba8:	2800      	cmp	r0, #0
 8000baa:	d059      	beq.n	8000c60 <__aeabi_ddiv+0xd8>
 8000bac:	4b87      	ldr	r3, [pc, #540]	; (8000dcc <__aeabi_ddiv+0x244>)
 8000bae:	4298      	cmp	r0, r3
 8000bb0:	d100      	bne.n	8000bb4 <__aeabi_ddiv+0x2c>
 8000bb2:	e098      	b.n	8000ce6 <__aeabi_ddiv+0x15e>
 8000bb4:	0f6b      	lsrs	r3, r5, #29
 8000bb6:	00e4      	lsls	r4, r4, #3
 8000bb8:	431c      	orrs	r4, r3
 8000bba:	2380      	movs	r3, #128	; 0x80
 8000bbc:	041b      	lsls	r3, r3, #16
 8000bbe:	4323      	orrs	r3, r4
 8000bc0:	4698      	mov	r8, r3
 8000bc2:	4b83      	ldr	r3, [pc, #524]	; (8000dd0 <__aeabi_ddiv+0x248>)
 8000bc4:	00ed      	lsls	r5, r5, #3
 8000bc6:	469b      	mov	fp, r3
 8000bc8:	2300      	movs	r3, #0
 8000bca:	4699      	mov	r9, r3
 8000bcc:	4483      	add	fp, r0
 8000bce:	9300      	str	r3, [sp, #0]
 8000bd0:	033c      	lsls	r4, r7, #12
 8000bd2:	007b      	lsls	r3, r7, #1
 8000bd4:	4650      	mov	r0, sl
 8000bd6:	0b24      	lsrs	r4, r4, #12
 8000bd8:	0d5b      	lsrs	r3, r3, #21
 8000bda:	0fff      	lsrs	r7, r7, #31
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d067      	beq.n	8000cb0 <__aeabi_ddiv+0x128>
 8000be0:	4a7a      	ldr	r2, [pc, #488]	; (8000dcc <__aeabi_ddiv+0x244>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d018      	beq.n	8000c18 <__aeabi_ddiv+0x90>
 8000be6:	497a      	ldr	r1, [pc, #488]	; (8000dd0 <__aeabi_ddiv+0x248>)
 8000be8:	0f42      	lsrs	r2, r0, #29
 8000bea:	468c      	mov	ip, r1
 8000bec:	00e4      	lsls	r4, r4, #3
 8000bee:	4659      	mov	r1, fp
 8000bf0:	4314      	orrs	r4, r2
 8000bf2:	2280      	movs	r2, #128	; 0x80
 8000bf4:	4463      	add	r3, ip
 8000bf6:	0412      	lsls	r2, r2, #16
 8000bf8:	1acb      	subs	r3, r1, r3
 8000bfa:	4314      	orrs	r4, r2
 8000bfc:	469b      	mov	fp, r3
 8000bfe:	00c2      	lsls	r2, r0, #3
 8000c00:	2000      	movs	r0, #0
 8000c02:	0033      	movs	r3, r6
 8000c04:	407b      	eors	r3, r7
 8000c06:	469a      	mov	sl, r3
 8000c08:	464b      	mov	r3, r9
 8000c0a:	2b0f      	cmp	r3, #15
 8000c0c:	d900      	bls.n	8000c10 <__aeabi_ddiv+0x88>
 8000c0e:	e0ef      	b.n	8000df0 <__aeabi_ddiv+0x268>
 8000c10:	4970      	ldr	r1, [pc, #448]	; (8000dd4 <__aeabi_ddiv+0x24c>)
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	58cb      	ldr	r3, [r1, r3]
 8000c16:	469f      	mov	pc, r3
 8000c18:	4b6f      	ldr	r3, [pc, #444]	; (8000dd8 <__aeabi_ddiv+0x250>)
 8000c1a:	4652      	mov	r2, sl
 8000c1c:	469c      	mov	ip, r3
 8000c1e:	4322      	orrs	r2, r4
 8000c20:	44e3      	add	fp, ip
 8000c22:	2a00      	cmp	r2, #0
 8000c24:	d000      	beq.n	8000c28 <__aeabi_ddiv+0xa0>
 8000c26:	e095      	b.n	8000d54 <__aeabi_ddiv+0x1cc>
 8000c28:	4649      	mov	r1, r9
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	4319      	orrs	r1, r3
 8000c2e:	4689      	mov	r9, r1
 8000c30:	2400      	movs	r4, #0
 8000c32:	2002      	movs	r0, #2
 8000c34:	e7e5      	b.n	8000c02 <__aeabi_ddiv+0x7a>
 8000c36:	2300      	movs	r3, #0
 8000c38:	2400      	movs	r4, #0
 8000c3a:	2500      	movs	r5, #0
 8000c3c:	4652      	mov	r2, sl
 8000c3e:	051b      	lsls	r3, r3, #20
 8000c40:	4323      	orrs	r3, r4
 8000c42:	07d2      	lsls	r2, r2, #31
 8000c44:	4313      	orrs	r3, r2
 8000c46:	0028      	movs	r0, r5
 8000c48:	0019      	movs	r1, r3
 8000c4a:	b005      	add	sp, #20
 8000c4c:	bcf0      	pop	{r4, r5, r6, r7}
 8000c4e:	46bb      	mov	fp, r7
 8000c50:	46b2      	mov	sl, r6
 8000c52:	46a9      	mov	r9, r5
 8000c54:	46a0      	mov	r8, r4
 8000c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c58:	2400      	movs	r4, #0
 8000c5a:	2500      	movs	r5, #0
 8000c5c:	4b5b      	ldr	r3, [pc, #364]	; (8000dcc <__aeabi_ddiv+0x244>)
 8000c5e:	e7ed      	b.n	8000c3c <__aeabi_ddiv+0xb4>
 8000c60:	464b      	mov	r3, r9
 8000c62:	4323      	orrs	r3, r4
 8000c64:	4698      	mov	r8, r3
 8000c66:	d100      	bne.n	8000c6a <__aeabi_ddiv+0xe2>
 8000c68:	e089      	b.n	8000d7e <__aeabi_ddiv+0x1f6>
 8000c6a:	2c00      	cmp	r4, #0
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_ddiv+0xe8>
 8000c6e:	e1e0      	b.n	8001032 <__aeabi_ddiv+0x4aa>
 8000c70:	0020      	movs	r0, r4
 8000c72:	f001 fa11 	bl	8002098 <__clzsi2>
 8000c76:	0001      	movs	r1, r0
 8000c78:	0002      	movs	r2, r0
 8000c7a:	390b      	subs	r1, #11
 8000c7c:	231d      	movs	r3, #29
 8000c7e:	1a5b      	subs	r3, r3, r1
 8000c80:	4649      	mov	r1, r9
 8000c82:	0010      	movs	r0, r2
 8000c84:	40d9      	lsrs	r1, r3
 8000c86:	3808      	subs	r0, #8
 8000c88:	4084      	lsls	r4, r0
 8000c8a:	000b      	movs	r3, r1
 8000c8c:	464d      	mov	r5, r9
 8000c8e:	4323      	orrs	r3, r4
 8000c90:	4698      	mov	r8, r3
 8000c92:	4085      	lsls	r5, r0
 8000c94:	4851      	ldr	r0, [pc, #324]	; (8000ddc <__aeabi_ddiv+0x254>)
 8000c96:	033c      	lsls	r4, r7, #12
 8000c98:	1a83      	subs	r3, r0, r2
 8000c9a:	469b      	mov	fp, r3
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4699      	mov	r9, r3
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	007b      	lsls	r3, r7, #1
 8000ca4:	4650      	mov	r0, sl
 8000ca6:	0b24      	lsrs	r4, r4, #12
 8000ca8:	0d5b      	lsrs	r3, r3, #21
 8000caa:	0fff      	lsrs	r7, r7, #31
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d197      	bne.n	8000be0 <__aeabi_ddiv+0x58>
 8000cb0:	4652      	mov	r2, sl
 8000cb2:	4322      	orrs	r2, r4
 8000cb4:	d055      	beq.n	8000d62 <__aeabi_ddiv+0x1da>
 8000cb6:	2c00      	cmp	r4, #0
 8000cb8:	d100      	bne.n	8000cbc <__aeabi_ddiv+0x134>
 8000cba:	e1ca      	b.n	8001052 <__aeabi_ddiv+0x4ca>
 8000cbc:	0020      	movs	r0, r4
 8000cbe:	f001 f9eb 	bl	8002098 <__clzsi2>
 8000cc2:	0002      	movs	r2, r0
 8000cc4:	3a0b      	subs	r2, #11
 8000cc6:	231d      	movs	r3, #29
 8000cc8:	0001      	movs	r1, r0
 8000cca:	1a9b      	subs	r3, r3, r2
 8000ccc:	4652      	mov	r2, sl
 8000cce:	3908      	subs	r1, #8
 8000cd0:	40da      	lsrs	r2, r3
 8000cd2:	408c      	lsls	r4, r1
 8000cd4:	4314      	orrs	r4, r2
 8000cd6:	4652      	mov	r2, sl
 8000cd8:	408a      	lsls	r2, r1
 8000cda:	4b41      	ldr	r3, [pc, #260]	; (8000de0 <__aeabi_ddiv+0x258>)
 8000cdc:	4458      	add	r0, fp
 8000cde:	469b      	mov	fp, r3
 8000ce0:	4483      	add	fp, r0
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	e78d      	b.n	8000c02 <__aeabi_ddiv+0x7a>
 8000ce6:	464b      	mov	r3, r9
 8000ce8:	4323      	orrs	r3, r4
 8000cea:	4698      	mov	r8, r3
 8000cec:	d140      	bne.n	8000d70 <__aeabi_ddiv+0x1e8>
 8000cee:	2308      	movs	r3, #8
 8000cf0:	4699      	mov	r9, r3
 8000cf2:	3b06      	subs	r3, #6
 8000cf4:	2500      	movs	r5, #0
 8000cf6:	4683      	mov	fp, r0
 8000cf8:	9300      	str	r3, [sp, #0]
 8000cfa:	e769      	b.n	8000bd0 <__aeabi_ddiv+0x48>
 8000cfc:	46b2      	mov	sl, r6
 8000cfe:	9b00      	ldr	r3, [sp, #0]
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d0a9      	beq.n	8000c58 <__aeabi_ddiv+0xd0>
 8000d04:	2b03      	cmp	r3, #3
 8000d06:	d100      	bne.n	8000d0a <__aeabi_ddiv+0x182>
 8000d08:	e211      	b.n	800112e <__aeabi_ddiv+0x5a6>
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d093      	beq.n	8000c36 <__aeabi_ddiv+0xae>
 8000d0e:	4a35      	ldr	r2, [pc, #212]	; (8000de4 <__aeabi_ddiv+0x25c>)
 8000d10:	445a      	add	r2, fp
 8000d12:	2a00      	cmp	r2, #0
 8000d14:	dc00      	bgt.n	8000d18 <__aeabi_ddiv+0x190>
 8000d16:	e13c      	b.n	8000f92 <__aeabi_ddiv+0x40a>
 8000d18:	076b      	lsls	r3, r5, #29
 8000d1a:	d000      	beq.n	8000d1e <__aeabi_ddiv+0x196>
 8000d1c:	e1a7      	b.n	800106e <__aeabi_ddiv+0x4e6>
 8000d1e:	08ed      	lsrs	r5, r5, #3
 8000d20:	4643      	mov	r3, r8
 8000d22:	01db      	lsls	r3, r3, #7
 8000d24:	d506      	bpl.n	8000d34 <__aeabi_ddiv+0x1ac>
 8000d26:	4642      	mov	r2, r8
 8000d28:	4b2f      	ldr	r3, [pc, #188]	; (8000de8 <__aeabi_ddiv+0x260>)
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	4690      	mov	r8, r2
 8000d2e:	2280      	movs	r2, #128	; 0x80
 8000d30:	00d2      	lsls	r2, r2, #3
 8000d32:	445a      	add	r2, fp
 8000d34:	4b2d      	ldr	r3, [pc, #180]	; (8000dec <__aeabi_ddiv+0x264>)
 8000d36:	429a      	cmp	r2, r3
 8000d38:	dc8e      	bgt.n	8000c58 <__aeabi_ddiv+0xd0>
 8000d3a:	4643      	mov	r3, r8
 8000d3c:	0552      	lsls	r2, r2, #21
 8000d3e:	0758      	lsls	r0, r3, #29
 8000d40:	025c      	lsls	r4, r3, #9
 8000d42:	4305      	orrs	r5, r0
 8000d44:	0b24      	lsrs	r4, r4, #12
 8000d46:	0d53      	lsrs	r3, r2, #21
 8000d48:	e778      	b.n	8000c3c <__aeabi_ddiv+0xb4>
 8000d4a:	46ba      	mov	sl, r7
 8000d4c:	46a0      	mov	r8, r4
 8000d4e:	0015      	movs	r5, r2
 8000d50:	9000      	str	r0, [sp, #0]
 8000d52:	e7d4      	b.n	8000cfe <__aeabi_ddiv+0x176>
 8000d54:	464a      	mov	r2, r9
 8000d56:	2303      	movs	r3, #3
 8000d58:	431a      	orrs	r2, r3
 8000d5a:	4691      	mov	r9, r2
 8000d5c:	2003      	movs	r0, #3
 8000d5e:	4652      	mov	r2, sl
 8000d60:	e74f      	b.n	8000c02 <__aeabi_ddiv+0x7a>
 8000d62:	4649      	mov	r1, r9
 8000d64:	2301      	movs	r3, #1
 8000d66:	4319      	orrs	r1, r3
 8000d68:	4689      	mov	r9, r1
 8000d6a:	2400      	movs	r4, #0
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	e748      	b.n	8000c02 <__aeabi_ddiv+0x7a>
 8000d70:	230c      	movs	r3, #12
 8000d72:	4699      	mov	r9, r3
 8000d74:	3b09      	subs	r3, #9
 8000d76:	46a0      	mov	r8, r4
 8000d78:	4683      	mov	fp, r0
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	e728      	b.n	8000bd0 <__aeabi_ddiv+0x48>
 8000d7e:	2304      	movs	r3, #4
 8000d80:	4699      	mov	r9, r3
 8000d82:	2300      	movs	r3, #0
 8000d84:	469b      	mov	fp, r3
 8000d86:	3301      	adds	r3, #1
 8000d88:	2500      	movs	r5, #0
 8000d8a:	9300      	str	r3, [sp, #0]
 8000d8c:	e720      	b.n	8000bd0 <__aeabi_ddiv+0x48>
 8000d8e:	2300      	movs	r3, #0
 8000d90:	2480      	movs	r4, #128	; 0x80
 8000d92:	469a      	mov	sl, r3
 8000d94:	2500      	movs	r5, #0
 8000d96:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <__aeabi_ddiv+0x244>)
 8000d98:	0324      	lsls	r4, r4, #12
 8000d9a:	e74f      	b.n	8000c3c <__aeabi_ddiv+0xb4>
 8000d9c:	2380      	movs	r3, #128	; 0x80
 8000d9e:	4641      	mov	r1, r8
 8000da0:	031b      	lsls	r3, r3, #12
 8000da2:	4219      	tst	r1, r3
 8000da4:	d008      	beq.n	8000db8 <__aeabi_ddiv+0x230>
 8000da6:	421c      	tst	r4, r3
 8000da8:	d106      	bne.n	8000db8 <__aeabi_ddiv+0x230>
 8000daa:	431c      	orrs	r4, r3
 8000dac:	0324      	lsls	r4, r4, #12
 8000dae:	46ba      	mov	sl, r7
 8000db0:	0015      	movs	r5, r2
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <__aeabi_ddiv+0x244>)
 8000db4:	0b24      	lsrs	r4, r4, #12
 8000db6:	e741      	b.n	8000c3c <__aeabi_ddiv+0xb4>
 8000db8:	2480      	movs	r4, #128	; 0x80
 8000dba:	4643      	mov	r3, r8
 8000dbc:	0324      	lsls	r4, r4, #12
 8000dbe:	431c      	orrs	r4, r3
 8000dc0:	0324      	lsls	r4, r4, #12
 8000dc2:	46b2      	mov	sl, r6
 8000dc4:	4b01      	ldr	r3, [pc, #4]	; (8000dcc <__aeabi_ddiv+0x244>)
 8000dc6:	0b24      	lsrs	r4, r4, #12
 8000dc8:	e738      	b.n	8000c3c <__aeabi_ddiv+0xb4>
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	000007ff 	.word	0x000007ff
 8000dd0:	fffffc01 	.word	0xfffffc01
 8000dd4:	08006154 	.word	0x08006154
 8000dd8:	fffff801 	.word	0xfffff801
 8000ddc:	fffffc0d 	.word	0xfffffc0d
 8000de0:	000003f3 	.word	0x000003f3
 8000de4:	000003ff 	.word	0x000003ff
 8000de8:	feffffff 	.word	0xfeffffff
 8000dec:	000007fe 	.word	0x000007fe
 8000df0:	4544      	cmp	r4, r8
 8000df2:	d200      	bcs.n	8000df6 <__aeabi_ddiv+0x26e>
 8000df4:	e116      	b.n	8001024 <__aeabi_ddiv+0x49c>
 8000df6:	d100      	bne.n	8000dfa <__aeabi_ddiv+0x272>
 8000df8:	e111      	b.n	800101e <__aeabi_ddiv+0x496>
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	425b      	negs	r3, r3
 8000dfe:	469c      	mov	ip, r3
 8000e00:	002e      	movs	r6, r5
 8000e02:	4640      	mov	r0, r8
 8000e04:	2500      	movs	r5, #0
 8000e06:	44e3      	add	fp, ip
 8000e08:	0223      	lsls	r3, r4, #8
 8000e0a:	0e14      	lsrs	r4, r2, #24
 8000e0c:	431c      	orrs	r4, r3
 8000e0e:	0c1b      	lsrs	r3, r3, #16
 8000e10:	4699      	mov	r9, r3
 8000e12:	0423      	lsls	r3, r4, #16
 8000e14:	0c1f      	lsrs	r7, r3, #16
 8000e16:	0212      	lsls	r2, r2, #8
 8000e18:	4649      	mov	r1, r9
 8000e1a:	9200      	str	r2, [sp, #0]
 8000e1c:	9701      	str	r7, [sp, #4]
 8000e1e:	f7ff f9fd 	bl	800021c <__aeabi_uidivmod>
 8000e22:	0002      	movs	r2, r0
 8000e24:	437a      	muls	r2, r7
 8000e26:	040b      	lsls	r3, r1, #16
 8000e28:	0c31      	lsrs	r1, r6, #16
 8000e2a:	4680      	mov	r8, r0
 8000e2c:	4319      	orrs	r1, r3
 8000e2e:	428a      	cmp	r2, r1
 8000e30:	d90b      	bls.n	8000e4a <__aeabi_ddiv+0x2c2>
 8000e32:	2301      	movs	r3, #1
 8000e34:	425b      	negs	r3, r3
 8000e36:	469c      	mov	ip, r3
 8000e38:	1909      	adds	r1, r1, r4
 8000e3a:	44e0      	add	r8, ip
 8000e3c:	428c      	cmp	r4, r1
 8000e3e:	d804      	bhi.n	8000e4a <__aeabi_ddiv+0x2c2>
 8000e40:	428a      	cmp	r2, r1
 8000e42:	d902      	bls.n	8000e4a <__aeabi_ddiv+0x2c2>
 8000e44:	1e83      	subs	r3, r0, #2
 8000e46:	4698      	mov	r8, r3
 8000e48:	1909      	adds	r1, r1, r4
 8000e4a:	1a88      	subs	r0, r1, r2
 8000e4c:	4649      	mov	r1, r9
 8000e4e:	f7ff f9e5 	bl	800021c <__aeabi_uidivmod>
 8000e52:	0409      	lsls	r1, r1, #16
 8000e54:	468c      	mov	ip, r1
 8000e56:	0431      	lsls	r1, r6, #16
 8000e58:	4666      	mov	r6, ip
 8000e5a:	9a01      	ldr	r2, [sp, #4]
 8000e5c:	0c09      	lsrs	r1, r1, #16
 8000e5e:	4342      	muls	r2, r0
 8000e60:	0003      	movs	r3, r0
 8000e62:	4331      	orrs	r1, r6
 8000e64:	428a      	cmp	r2, r1
 8000e66:	d904      	bls.n	8000e72 <__aeabi_ddiv+0x2ea>
 8000e68:	1909      	adds	r1, r1, r4
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	428c      	cmp	r4, r1
 8000e6e:	d800      	bhi.n	8000e72 <__aeabi_ddiv+0x2ea>
 8000e70:	e111      	b.n	8001096 <__aeabi_ddiv+0x50e>
 8000e72:	1a89      	subs	r1, r1, r2
 8000e74:	4642      	mov	r2, r8
 8000e76:	9e00      	ldr	r6, [sp, #0]
 8000e78:	0412      	lsls	r2, r2, #16
 8000e7a:	431a      	orrs	r2, r3
 8000e7c:	0c33      	lsrs	r3, r6, #16
 8000e7e:	001f      	movs	r7, r3
 8000e80:	0c10      	lsrs	r0, r2, #16
 8000e82:	4690      	mov	r8, r2
 8000e84:	9302      	str	r3, [sp, #8]
 8000e86:	0413      	lsls	r3, r2, #16
 8000e88:	0432      	lsls	r2, r6, #16
 8000e8a:	0c16      	lsrs	r6, r2, #16
 8000e8c:	0032      	movs	r2, r6
 8000e8e:	0c1b      	lsrs	r3, r3, #16
 8000e90:	435a      	muls	r2, r3
 8000e92:	9603      	str	r6, [sp, #12]
 8000e94:	437b      	muls	r3, r7
 8000e96:	4346      	muls	r6, r0
 8000e98:	4378      	muls	r0, r7
 8000e9a:	0c17      	lsrs	r7, r2, #16
 8000e9c:	46bc      	mov	ip, r7
 8000e9e:	199b      	adds	r3, r3, r6
 8000ea0:	4463      	add	r3, ip
 8000ea2:	429e      	cmp	r6, r3
 8000ea4:	d903      	bls.n	8000eae <__aeabi_ddiv+0x326>
 8000ea6:	2680      	movs	r6, #128	; 0x80
 8000ea8:	0276      	lsls	r6, r6, #9
 8000eaa:	46b4      	mov	ip, r6
 8000eac:	4460      	add	r0, ip
 8000eae:	0c1e      	lsrs	r6, r3, #16
 8000eb0:	1830      	adds	r0, r6, r0
 8000eb2:	0416      	lsls	r6, r2, #16
 8000eb4:	041b      	lsls	r3, r3, #16
 8000eb6:	0c36      	lsrs	r6, r6, #16
 8000eb8:	199e      	adds	r6, r3, r6
 8000eba:	4281      	cmp	r1, r0
 8000ebc:	d200      	bcs.n	8000ec0 <__aeabi_ddiv+0x338>
 8000ebe:	e09c      	b.n	8000ffa <__aeabi_ddiv+0x472>
 8000ec0:	d100      	bne.n	8000ec4 <__aeabi_ddiv+0x33c>
 8000ec2:	e097      	b.n	8000ff4 <__aeabi_ddiv+0x46c>
 8000ec4:	1bae      	subs	r6, r5, r6
 8000ec6:	1a09      	subs	r1, r1, r0
 8000ec8:	42b5      	cmp	r5, r6
 8000eca:	4180      	sbcs	r0, r0
 8000ecc:	4240      	negs	r0, r0
 8000ece:	1a08      	subs	r0, r1, r0
 8000ed0:	4284      	cmp	r4, r0
 8000ed2:	d100      	bne.n	8000ed6 <__aeabi_ddiv+0x34e>
 8000ed4:	e111      	b.n	80010fa <__aeabi_ddiv+0x572>
 8000ed6:	4649      	mov	r1, r9
 8000ed8:	f7ff f9a0 	bl	800021c <__aeabi_uidivmod>
 8000edc:	9a01      	ldr	r2, [sp, #4]
 8000ede:	040b      	lsls	r3, r1, #16
 8000ee0:	4342      	muls	r2, r0
 8000ee2:	0c31      	lsrs	r1, r6, #16
 8000ee4:	0005      	movs	r5, r0
 8000ee6:	4319      	orrs	r1, r3
 8000ee8:	428a      	cmp	r2, r1
 8000eea:	d907      	bls.n	8000efc <__aeabi_ddiv+0x374>
 8000eec:	1909      	adds	r1, r1, r4
 8000eee:	3d01      	subs	r5, #1
 8000ef0:	428c      	cmp	r4, r1
 8000ef2:	d803      	bhi.n	8000efc <__aeabi_ddiv+0x374>
 8000ef4:	428a      	cmp	r2, r1
 8000ef6:	d901      	bls.n	8000efc <__aeabi_ddiv+0x374>
 8000ef8:	1e85      	subs	r5, r0, #2
 8000efa:	1909      	adds	r1, r1, r4
 8000efc:	1a88      	subs	r0, r1, r2
 8000efe:	4649      	mov	r1, r9
 8000f00:	f7ff f98c 	bl	800021c <__aeabi_uidivmod>
 8000f04:	0409      	lsls	r1, r1, #16
 8000f06:	468c      	mov	ip, r1
 8000f08:	0431      	lsls	r1, r6, #16
 8000f0a:	4666      	mov	r6, ip
 8000f0c:	9a01      	ldr	r2, [sp, #4]
 8000f0e:	0c09      	lsrs	r1, r1, #16
 8000f10:	4342      	muls	r2, r0
 8000f12:	0003      	movs	r3, r0
 8000f14:	4331      	orrs	r1, r6
 8000f16:	428a      	cmp	r2, r1
 8000f18:	d907      	bls.n	8000f2a <__aeabi_ddiv+0x3a2>
 8000f1a:	1909      	adds	r1, r1, r4
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	428c      	cmp	r4, r1
 8000f20:	d803      	bhi.n	8000f2a <__aeabi_ddiv+0x3a2>
 8000f22:	428a      	cmp	r2, r1
 8000f24:	d901      	bls.n	8000f2a <__aeabi_ddiv+0x3a2>
 8000f26:	1e83      	subs	r3, r0, #2
 8000f28:	1909      	adds	r1, r1, r4
 8000f2a:	9e03      	ldr	r6, [sp, #12]
 8000f2c:	1a89      	subs	r1, r1, r2
 8000f2e:	0032      	movs	r2, r6
 8000f30:	042d      	lsls	r5, r5, #16
 8000f32:	431d      	orrs	r5, r3
 8000f34:	9f02      	ldr	r7, [sp, #8]
 8000f36:	042b      	lsls	r3, r5, #16
 8000f38:	0c1b      	lsrs	r3, r3, #16
 8000f3a:	435a      	muls	r2, r3
 8000f3c:	437b      	muls	r3, r7
 8000f3e:	469c      	mov	ip, r3
 8000f40:	0c28      	lsrs	r0, r5, #16
 8000f42:	4346      	muls	r6, r0
 8000f44:	0c13      	lsrs	r3, r2, #16
 8000f46:	44b4      	add	ip, r6
 8000f48:	4463      	add	r3, ip
 8000f4a:	4378      	muls	r0, r7
 8000f4c:	429e      	cmp	r6, r3
 8000f4e:	d903      	bls.n	8000f58 <__aeabi_ddiv+0x3d0>
 8000f50:	2680      	movs	r6, #128	; 0x80
 8000f52:	0276      	lsls	r6, r6, #9
 8000f54:	46b4      	mov	ip, r6
 8000f56:	4460      	add	r0, ip
 8000f58:	0c1e      	lsrs	r6, r3, #16
 8000f5a:	0412      	lsls	r2, r2, #16
 8000f5c:	041b      	lsls	r3, r3, #16
 8000f5e:	0c12      	lsrs	r2, r2, #16
 8000f60:	1830      	adds	r0, r6, r0
 8000f62:	189b      	adds	r3, r3, r2
 8000f64:	4281      	cmp	r1, r0
 8000f66:	d306      	bcc.n	8000f76 <__aeabi_ddiv+0x3ee>
 8000f68:	d002      	beq.n	8000f70 <__aeabi_ddiv+0x3e8>
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	431d      	orrs	r5, r3
 8000f6e:	e6ce      	b.n	8000d0e <__aeabi_ddiv+0x186>
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d100      	bne.n	8000f76 <__aeabi_ddiv+0x3ee>
 8000f74:	e6cb      	b.n	8000d0e <__aeabi_ddiv+0x186>
 8000f76:	1861      	adds	r1, r4, r1
 8000f78:	1e6e      	subs	r6, r5, #1
 8000f7a:	42a1      	cmp	r1, r4
 8000f7c:	d200      	bcs.n	8000f80 <__aeabi_ddiv+0x3f8>
 8000f7e:	e0a4      	b.n	80010ca <__aeabi_ddiv+0x542>
 8000f80:	4281      	cmp	r1, r0
 8000f82:	d200      	bcs.n	8000f86 <__aeabi_ddiv+0x3fe>
 8000f84:	e0c9      	b.n	800111a <__aeabi_ddiv+0x592>
 8000f86:	d100      	bne.n	8000f8a <__aeabi_ddiv+0x402>
 8000f88:	e0d9      	b.n	800113e <__aeabi_ddiv+0x5b6>
 8000f8a:	0035      	movs	r5, r6
 8000f8c:	e7ed      	b.n	8000f6a <__aeabi_ddiv+0x3e2>
 8000f8e:	2501      	movs	r5, #1
 8000f90:	426d      	negs	r5, r5
 8000f92:	2101      	movs	r1, #1
 8000f94:	1a89      	subs	r1, r1, r2
 8000f96:	2938      	cmp	r1, #56	; 0x38
 8000f98:	dd00      	ble.n	8000f9c <__aeabi_ddiv+0x414>
 8000f9a:	e64c      	b.n	8000c36 <__aeabi_ddiv+0xae>
 8000f9c:	291f      	cmp	r1, #31
 8000f9e:	dc00      	bgt.n	8000fa2 <__aeabi_ddiv+0x41a>
 8000fa0:	e07f      	b.n	80010a2 <__aeabi_ddiv+0x51a>
 8000fa2:	231f      	movs	r3, #31
 8000fa4:	425b      	negs	r3, r3
 8000fa6:	1a9a      	subs	r2, r3, r2
 8000fa8:	4643      	mov	r3, r8
 8000faa:	40d3      	lsrs	r3, r2
 8000fac:	2920      	cmp	r1, #32
 8000fae:	d004      	beq.n	8000fba <__aeabi_ddiv+0x432>
 8000fb0:	4644      	mov	r4, r8
 8000fb2:	4a65      	ldr	r2, [pc, #404]	; (8001148 <__aeabi_ddiv+0x5c0>)
 8000fb4:	445a      	add	r2, fp
 8000fb6:	4094      	lsls	r4, r2
 8000fb8:	4325      	orrs	r5, r4
 8000fba:	1e6a      	subs	r2, r5, #1
 8000fbc:	4195      	sbcs	r5, r2
 8000fbe:	2207      	movs	r2, #7
 8000fc0:	432b      	orrs	r3, r5
 8000fc2:	0015      	movs	r5, r2
 8000fc4:	2400      	movs	r4, #0
 8000fc6:	401d      	ands	r5, r3
 8000fc8:	421a      	tst	r2, r3
 8000fca:	d100      	bne.n	8000fce <__aeabi_ddiv+0x446>
 8000fcc:	e0a1      	b.n	8001112 <__aeabi_ddiv+0x58a>
 8000fce:	220f      	movs	r2, #15
 8000fd0:	2400      	movs	r4, #0
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	2a04      	cmp	r2, #4
 8000fd6:	d100      	bne.n	8000fda <__aeabi_ddiv+0x452>
 8000fd8:	e098      	b.n	800110c <__aeabi_ddiv+0x584>
 8000fda:	1d1a      	adds	r2, r3, #4
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	419b      	sbcs	r3, r3
 8000fe0:	425b      	negs	r3, r3
 8000fe2:	18e4      	adds	r4, r4, r3
 8000fe4:	0013      	movs	r3, r2
 8000fe6:	0222      	lsls	r2, r4, #8
 8000fe8:	d400      	bmi.n	8000fec <__aeabi_ddiv+0x464>
 8000fea:	e08f      	b.n	800110c <__aeabi_ddiv+0x584>
 8000fec:	2301      	movs	r3, #1
 8000fee:	2400      	movs	r4, #0
 8000ff0:	2500      	movs	r5, #0
 8000ff2:	e623      	b.n	8000c3c <__aeabi_ddiv+0xb4>
 8000ff4:	42b5      	cmp	r5, r6
 8000ff6:	d300      	bcc.n	8000ffa <__aeabi_ddiv+0x472>
 8000ff8:	e764      	b.n	8000ec4 <__aeabi_ddiv+0x33c>
 8000ffa:	4643      	mov	r3, r8
 8000ffc:	1e5a      	subs	r2, r3, #1
 8000ffe:	9b00      	ldr	r3, [sp, #0]
 8001000:	469c      	mov	ip, r3
 8001002:	4465      	add	r5, ip
 8001004:	001f      	movs	r7, r3
 8001006:	429d      	cmp	r5, r3
 8001008:	419b      	sbcs	r3, r3
 800100a:	425b      	negs	r3, r3
 800100c:	191b      	adds	r3, r3, r4
 800100e:	18c9      	adds	r1, r1, r3
 8001010:	428c      	cmp	r4, r1
 8001012:	d23a      	bcs.n	800108a <__aeabi_ddiv+0x502>
 8001014:	4288      	cmp	r0, r1
 8001016:	d863      	bhi.n	80010e0 <__aeabi_ddiv+0x558>
 8001018:	d060      	beq.n	80010dc <__aeabi_ddiv+0x554>
 800101a:	4690      	mov	r8, r2
 800101c:	e752      	b.n	8000ec4 <__aeabi_ddiv+0x33c>
 800101e:	42aa      	cmp	r2, r5
 8001020:	d900      	bls.n	8001024 <__aeabi_ddiv+0x49c>
 8001022:	e6ea      	b.n	8000dfa <__aeabi_ddiv+0x272>
 8001024:	4643      	mov	r3, r8
 8001026:	07de      	lsls	r6, r3, #31
 8001028:	0858      	lsrs	r0, r3, #1
 800102a:	086b      	lsrs	r3, r5, #1
 800102c:	431e      	orrs	r6, r3
 800102e:	07ed      	lsls	r5, r5, #31
 8001030:	e6ea      	b.n	8000e08 <__aeabi_ddiv+0x280>
 8001032:	4648      	mov	r0, r9
 8001034:	f001 f830 	bl	8002098 <__clzsi2>
 8001038:	0001      	movs	r1, r0
 800103a:	0002      	movs	r2, r0
 800103c:	3115      	adds	r1, #21
 800103e:	3220      	adds	r2, #32
 8001040:	291c      	cmp	r1, #28
 8001042:	dc00      	bgt.n	8001046 <__aeabi_ddiv+0x4be>
 8001044:	e61a      	b.n	8000c7c <__aeabi_ddiv+0xf4>
 8001046:	464b      	mov	r3, r9
 8001048:	3808      	subs	r0, #8
 800104a:	4083      	lsls	r3, r0
 800104c:	2500      	movs	r5, #0
 800104e:	4698      	mov	r8, r3
 8001050:	e620      	b.n	8000c94 <__aeabi_ddiv+0x10c>
 8001052:	f001 f821 	bl	8002098 <__clzsi2>
 8001056:	0003      	movs	r3, r0
 8001058:	001a      	movs	r2, r3
 800105a:	3215      	adds	r2, #21
 800105c:	3020      	adds	r0, #32
 800105e:	2a1c      	cmp	r2, #28
 8001060:	dc00      	bgt.n	8001064 <__aeabi_ddiv+0x4dc>
 8001062:	e630      	b.n	8000cc6 <__aeabi_ddiv+0x13e>
 8001064:	4654      	mov	r4, sl
 8001066:	3b08      	subs	r3, #8
 8001068:	2200      	movs	r2, #0
 800106a:	409c      	lsls	r4, r3
 800106c:	e635      	b.n	8000cda <__aeabi_ddiv+0x152>
 800106e:	230f      	movs	r3, #15
 8001070:	402b      	ands	r3, r5
 8001072:	2b04      	cmp	r3, #4
 8001074:	d100      	bne.n	8001078 <__aeabi_ddiv+0x4f0>
 8001076:	e652      	b.n	8000d1e <__aeabi_ddiv+0x196>
 8001078:	2305      	movs	r3, #5
 800107a:	425b      	negs	r3, r3
 800107c:	42ab      	cmp	r3, r5
 800107e:	419b      	sbcs	r3, r3
 8001080:	3504      	adds	r5, #4
 8001082:	425b      	negs	r3, r3
 8001084:	08ed      	lsrs	r5, r5, #3
 8001086:	4498      	add	r8, r3
 8001088:	e64a      	b.n	8000d20 <__aeabi_ddiv+0x198>
 800108a:	428c      	cmp	r4, r1
 800108c:	d1c5      	bne.n	800101a <__aeabi_ddiv+0x492>
 800108e:	42af      	cmp	r7, r5
 8001090:	d9c0      	bls.n	8001014 <__aeabi_ddiv+0x48c>
 8001092:	4690      	mov	r8, r2
 8001094:	e716      	b.n	8000ec4 <__aeabi_ddiv+0x33c>
 8001096:	428a      	cmp	r2, r1
 8001098:	d800      	bhi.n	800109c <__aeabi_ddiv+0x514>
 800109a:	e6ea      	b.n	8000e72 <__aeabi_ddiv+0x2ea>
 800109c:	1e83      	subs	r3, r0, #2
 800109e:	1909      	adds	r1, r1, r4
 80010a0:	e6e7      	b.n	8000e72 <__aeabi_ddiv+0x2ea>
 80010a2:	4a2a      	ldr	r2, [pc, #168]	; (800114c <__aeabi_ddiv+0x5c4>)
 80010a4:	0028      	movs	r0, r5
 80010a6:	445a      	add	r2, fp
 80010a8:	4643      	mov	r3, r8
 80010aa:	4095      	lsls	r5, r2
 80010ac:	4093      	lsls	r3, r2
 80010ae:	40c8      	lsrs	r0, r1
 80010b0:	1e6a      	subs	r2, r5, #1
 80010b2:	4195      	sbcs	r5, r2
 80010b4:	4644      	mov	r4, r8
 80010b6:	4303      	orrs	r3, r0
 80010b8:	432b      	orrs	r3, r5
 80010ba:	40cc      	lsrs	r4, r1
 80010bc:	075a      	lsls	r2, r3, #29
 80010be:	d092      	beq.n	8000fe6 <__aeabi_ddiv+0x45e>
 80010c0:	220f      	movs	r2, #15
 80010c2:	401a      	ands	r2, r3
 80010c4:	2a04      	cmp	r2, #4
 80010c6:	d188      	bne.n	8000fda <__aeabi_ddiv+0x452>
 80010c8:	e78d      	b.n	8000fe6 <__aeabi_ddiv+0x45e>
 80010ca:	0035      	movs	r5, r6
 80010cc:	4281      	cmp	r1, r0
 80010ce:	d000      	beq.n	80010d2 <__aeabi_ddiv+0x54a>
 80010d0:	e74b      	b.n	8000f6a <__aeabi_ddiv+0x3e2>
 80010d2:	9a00      	ldr	r2, [sp, #0]
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d000      	beq.n	80010da <__aeabi_ddiv+0x552>
 80010d8:	e747      	b.n	8000f6a <__aeabi_ddiv+0x3e2>
 80010da:	e618      	b.n	8000d0e <__aeabi_ddiv+0x186>
 80010dc:	42ae      	cmp	r6, r5
 80010de:	d99c      	bls.n	800101a <__aeabi_ddiv+0x492>
 80010e0:	2302      	movs	r3, #2
 80010e2:	425b      	negs	r3, r3
 80010e4:	469c      	mov	ip, r3
 80010e6:	9b00      	ldr	r3, [sp, #0]
 80010e8:	44e0      	add	r8, ip
 80010ea:	469c      	mov	ip, r3
 80010ec:	4465      	add	r5, ip
 80010ee:	429d      	cmp	r5, r3
 80010f0:	419b      	sbcs	r3, r3
 80010f2:	425b      	negs	r3, r3
 80010f4:	191b      	adds	r3, r3, r4
 80010f6:	18c9      	adds	r1, r1, r3
 80010f8:	e6e4      	b.n	8000ec4 <__aeabi_ddiv+0x33c>
 80010fa:	4a15      	ldr	r2, [pc, #84]	; (8001150 <__aeabi_ddiv+0x5c8>)
 80010fc:	445a      	add	r2, fp
 80010fe:	2a00      	cmp	r2, #0
 8001100:	dc00      	bgt.n	8001104 <__aeabi_ddiv+0x57c>
 8001102:	e744      	b.n	8000f8e <__aeabi_ddiv+0x406>
 8001104:	2301      	movs	r3, #1
 8001106:	2500      	movs	r5, #0
 8001108:	4498      	add	r8, r3
 800110a:	e609      	b.n	8000d20 <__aeabi_ddiv+0x198>
 800110c:	0765      	lsls	r5, r4, #29
 800110e:	0264      	lsls	r4, r4, #9
 8001110:	0b24      	lsrs	r4, r4, #12
 8001112:	08db      	lsrs	r3, r3, #3
 8001114:	431d      	orrs	r5, r3
 8001116:	2300      	movs	r3, #0
 8001118:	e590      	b.n	8000c3c <__aeabi_ddiv+0xb4>
 800111a:	9e00      	ldr	r6, [sp, #0]
 800111c:	3d02      	subs	r5, #2
 800111e:	0072      	lsls	r2, r6, #1
 8001120:	42b2      	cmp	r2, r6
 8001122:	41bf      	sbcs	r7, r7
 8001124:	427f      	negs	r7, r7
 8001126:	193c      	adds	r4, r7, r4
 8001128:	1909      	adds	r1, r1, r4
 800112a:	9200      	str	r2, [sp, #0]
 800112c:	e7ce      	b.n	80010cc <__aeabi_ddiv+0x544>
 800112e:	2480      	movs	r4, #128	; 0x80
 8001130:	4643      	mov	r3, r8
 8001132:	0324      	lsls	r4, r4, #12
 8001134:	431c      	orrs	r4, r3
 8001136:	0324      	lsls	r4, r4, #12
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <__aeabi_ddiv+0x5cc>)
 800113a:	0b24      	lsrs	r4, r4, #12
 800113c:	e57e      	b.n	8000c3c <__aeabi_ddiv+0xb4>
 800113e:	9a00      	ldr	r2, [sp, #0]
 8001140:	429a      	cmp	r2, r3
 8001142:	d3ea      	bcc.n	800111a <__aeabi_ddiv+0x592>
 8001144:	0035      	movs	r5, r6
 8001146:	e7c4      	b.n	80010d2 <__aeabi_ddiv+0x54a>
 8001148:	0000043e 	.word	0x0000043e
 800114c:	0000041e 	.word	0x0000041e
 8001150:	000003ff 	.word	0x000003ff
 8001154:	000007ff 	.word	0x000007ff

08001158 <__eqdf2>:
 8001158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800115a:	464f      	mov	r7, r9
 800115c:	4646      	mov	r6, r8
 800115e:	46d6      	mov	lr, sl
 8001160:	4694      	mov	ip, r2
 8001162:	4691      	mov	r9, r2
 8001164:	031a      	lsls	r2, r3, #12
 8001166:	0b12      	lsrs	r2, r2, #12
 8001168:	4d18      	ldr	r5, [pc, #96]	; (80011cc <__eqdf2+0x74>)
 800116a:	b5c0      	push	{r6, r7, lr}
 800116c:	004c      	lsls	r4, r1, #1
 800116e:	030f      	lsls	r7, r1, #12
 8001170:	4692      	mov	sl, r2
 8001172:	005a      	lsls	r2, r3, #1
 8001174:	0006      	movs	r6, r0
 8001176:	4680      	mov	r8, r0
 8001178:	0b3f      	lsrs	r7, r7, #12
 800117a:	2001      	movs	r0, #1
 800117c:	0d64      	lsrs	r4, r4, #21
 800117e:	0fc9      	lsrs	r1, r1, #31
 8001180:	0d52      	lsrs	r2, r2, #21
 8001182:	0fdb      	lsrs	r3, r3, #31
 8001184:	42ac      	cmp	r4, r5
 8001186:	d00a      	beq.n	800119e <__eqdf2+0x46>
 8001188:	42aa      	cmp	r2, r5
 800118a:	d003      	beq.n	8001194 <__eqdf2+0x3c>
 800118c:	4294      	cmp	r4, r2
 800118e:	d101      	bne.n	8001194 <__eqdf2+0x3c>
 8001190:	4557      	cmp	r7, sl
 8001192:	d00d      	beq.n	80011b0 <__eqdf2+0x58>
 8001194:	bce0      	pop	{r5, r6, r7}
 8001196:	46ba      	mov	sl, r7
 8001198:	46b1      	mov	r9, r6
 800119a:	46a8      	mov	r8, r5
 800119c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800119e:	003d      	movs	r5, r7
 80011a0:	4335      	orrs	r5, r6
 80011a2:	d1f7      	bne.n	8001194 <__eqdf2+0x3c>
 80011a4:	42a2      	cmp	r2, r4
 80011a6:	d1f5      	bne.n	8001194 <__eqdf2+0x3c>
 80011a8:	4652      	mov	r2, sl
 80011aa:	4665      	mov	r5, ip
 80011ac:	432a      	orrs	r2, r5
 80011ae:	d1f1      	bne.n	8001194 <__eqdf2+0x3c>
 80011b0:	2001      	movs	r0, #1
 80011b2:	45c8      	cmp	r8, r9
 80011b4:	d1ee      	bne.n	8001194 <__eqdf2+0x3c>
 80011b6:	4299      	cmp	r1, r3
 80011b8:	d006      	beq.n	80011c8 <__eqdf2+0x70>
 80011ba:	2c00      	cmp	r4, #0
 80011bc:	d1ea      	bne.n	8001194 <__eqdf2+0x3c>
 80011be:	433e      	orrs	r6, r7
 80011c0:	0030      	movs	r0, r6
 80011c2:	1e46      	subs	r6, r0, #1
 80011c4:	41b0      	sbcs	r0, r6
 80011c6:	e7e5      	b.n	8001194 <__eqdf2+0x3c>
 80011c8:	2000      	movs	r0, #0
 80011ca:	e7e3      	b.n	8001194 <__eqdf2+0x3c>
 80011cc:	000007ff 	.word	0x000007ff

080011d0 <__gedf2>:
 80011d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011d2:	464e      	mov	r6, r9
 80011d4:	4645      	mov	r5, r8
 80011d6:	4657      	mov	r7, sl
 80011d8:	46de      	mov	lr, fp
 80011da:	0004      	movs	r4, r0
 80011dc:	0018      	movs	r0, r3
 80011de:	b5e0      	push	{r5, r6, r7, lr}
 80011e0:	0016      	movs	r6, r2
 80011e2:	031b      	lsls	r3, r3, #12
 80011e4:	0b1b      	lsrs	r3, r3, #12
 80011e6:	4d32      	ldr	r5, [pc, #200]	; (80012b0 <__gedf2+0xe0>)
 80011e8:	030f      	lsls	r7, r1, #12
 80011ea:	004a      	lsls	r2, r1, #1
 80011ec:	4699      	mov	r9, r3
 80011ee:	0043      	lsls	r3, r0, #1
 80011f0:	46a4      	mov	ip, r4
 80011f2:	46b0      	mov	r8, r6
 80011f4:	0b3f      	lsrs	r7, r7, #12
 80011f6:	0d52      	lsrs	r2, r2, #21
 80011f8:	0fc9      	lsrs	r1, r1, #31
 80011fa:	0d5b      	lsrs	r3, r3, #21
 80011fc:	0fc0      	lsrs	r0, r0, #31
 80011fe:	42aa      	cmp	r2, r5
 8001200:	d029      	beq.n	8001256 <__gedf2+0x86>
 8001202:	42ab      	cmp	r3, r5
 8001204:	d018      	beq.n	8001238 <__gedf2+0x68>
 8001206:	2a00      	cmp	r2, #0
 8001208:	d12a      	bne.n	8001260 <__gedf2+0x90>
 800120a:	433c      	orrs	r4, r7
 800120c:	46a3      	mov	fp, r4
 800120e:	4265      	negs	r5, r4
 8001210:	4165      	adcs	r5, r4
 8001212:	2b00      	cmp	r3, #0
 8001214:	d102      	bne.n	800121c <__gedf2+0x4c>
 8001216:	464c      	mov	r4, r9
 8001218:	4326      	orrs	r6, r4
 800121a:	d027      	beq.n	800126c <__gedf2+0x9c>
 800121c:	2d00      	cmp	r5, #0
 800121e:	d115      	bne.n	800124c <__gedf2+0x7c>
 8001220:	4281      	cmp	r1, r0
 8001222:	d028      	beq.n	8001276 <__gedf2+0xa6>
 8001224:	2002      	movs	r0, #2
 8001226:	3901      	subs	r1, #1
 8001228:	4008      	ands	r0, r1
 800122a:	3801      	subs	r0, #1
 800122c:	bcf0      	pop	{r4, r5, r6, r7}
 800122e:	46bb      	mov	fp, r7
 8001230:	46b2      	mov	sl, r6
 8001232:	46a9      	mov	r9, r5
 8001234:	46a0      	mov	r8, r4
 8001236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001238:	464d      	mov	r5, r9
 800123a:	432e      	orrs	r6, r5
 800123c:	d12f      	bne.n	800129e <__gedf2+0xce>
 800123e:	2a00      	cmp	r2, #0
 8001240:	d1ee      	bne.n	8001220 <__gedf2+0x50>
 8001242:	433c      	orrs	r4, r7
 8001244:	4265      	negs	r5, r4
 8001246:	4165      	adcs	r5, r4
 8001248:	2d00      	cmp	r5, #0
 800124a:	d0e9      	beq.n	8001220 <__gedf2+0x50>
 800124c:	2800      	cmp	r0, #0
 800124e:	d1ed      	bne.n	800122c <__gedf2+0x5c>
 8001250:	2001      	movs	r0, #1
 8001252:	4240      	negs	r0, r0
 8001254:	e7ea      	b.n	800122c <__gedf2+0x5c>
 8001256:	003d      	movs	r5, r7
 8001258:	4325      	orrs	r5, r4
 800125a:	d120      	bne.n	800129e <__gedf2+0xce>
 800125c:	4293      	cmp	r3, r2
 800125e:	d0eb      	beq.n	8001238 <__gedf2+0x68>
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1dd      	bne.n	8001220 <__gedf2+0x50>
 8001264:	464c      	mov	r4, r9
 8001266:	4326      	orrs	r6, r4
 8001268:	d1da      	bne.n	8001220 <__gedf2+0x50>
 800126a:	e7db      	b.n	8001224 <__gedf2+0x54>
 800126c:	465b      	mov	r3, fp
 800126e:	2000      	movs	r0, #0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d0db      	beq.n	800122c <__gedf2+0x5c>
 8001274:	e7d6      	b.n	8001224 <__gedf2+0x54>
 8001276:	429a      	cmp	r2, r3
 8001278:	dc0a      	bgt.n	8001290 <__gedf2+0xc0>
 800127a:	dbe7      	blt.n	800124c <__gedf2+0x7c>
 800127c:	454f      	cmp	r7, r9
 800127e:	d8d1      	bhi.n	8001224 <__gedf2+0x54>
 8001280:	d010      	beq.n	80012a4 <__gedf2+0xd4>
 8001282:	2000      	movs	r0, #0
 8001284:	454f      	cmp	r7, r9
 8001286:	d2d1      	bcs.n	800122c <__gedf2+0x5c>
 8001288:	2900      	cmp	r1, #0
 800128a:	d0e1      	beq.n	8001250 <__gedf2+0x80>
 800128c:	0008      	movs	r0, r1
 800128e:	e7cd      	b.n	800122c <__gedf2+0x5c>
 8001290:	4243      	negs	r3, r0
 8001292:	4158      	adcs	r0, r3
 8001294:	2302      	movs	r3, #2
 8001296:	4240      	negs	r0, r0
 8001298:	4018      	ands	r0, r3
 800129a:	3801      	subs	r0, #1
 800129c:	e7c6      	b.n	800122c <__gedf2+0x5c>
 800129e:	2002      	movs	r0, #2
 80012a0:	4240      	negs	r0, r0
 80012a2:	e7c3      	b.n	800122c <__gedf2+0x5c>
 80012a4:	45c4      	cmp	ip, r8
 80012a6:	d8bd      	bhi.n	8001224 <__gedf2+0x54>
 80012a8:	2000      	movs	r0, #0
 80012aa:	45c4      	cmp	ip, r8
 80012ac:	d2be      	bcs.n	800122c <__gedf2+0x5c>
 80012ae:	e7eb      	b.n	8001288 <__gedf2+0xb8>
 80012b0:	000007ff 	.word	0x000007ff

080012b4 <__ledf2>:
 80012b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012b6:	464e      	mov	r6, r9
 80012b8:	4645      	mov	r5, r8
 80012ba:	4657      	mov	r7, sl
 80012bc:	46de      	mov	lr, fp
 80012be:	0004      	movs	r4, r0
 80012c0:	0018      	movs	r0, r3
 80012c2:	b5e0      	push	{r5, r6, r7, lr}
 80012c4:	0016      	movs	r6, r2
 80012c6:	031b      	lsls	r3, r3, #12
 80012c8:	0b1b      	lsrs	r3, r3, #12
 80012ca:	4d31      	ldr	r5, [pc, #196]	; (8001390 <__ledf2+0xdc>)
 80012cc:	030f      	lsls	r7, r1, #12
 80012ce:	004a      	lsls	r2, r1, #1
 80012d0:	4699      	mov	r9, r3
 80012d2:	0043      	lsls	r3, r0, #1
 80012d4:	46a4      	mov	ip, r4
 80012d6:	46b0      	mov	r8, r6
 80012d8:	0b3f      	lsrs	r7, r7, #12
 80012da:	0d52      	lsrs	r2, r2, #21
 80012dc:	0fc9      	lsrs	r1, r1, #31
 80012de:	0d5b      	lsrs	r3, r3, #21
 80012e0:	0fc0      	lsrs	r0, r0, #31
 80012e2:	42aa      	cmp	r2, r5
 80012e4:	d011      	beq.n	800130a <__ledf2+0x56>
 80012e6:	42ab      	cmp	r3, r5
 80012e8:	d014      	beq.n	8001314 <__ledf2+0x60>
 80012ea:	2a00      	cmp	r2, #0
 80012ec:	d12f      	bne.n	800134e <__ledf2+0x9a>
 80012ee:	433c      	orrs	r4, r7
 80012f0:	46a3      	mov	fp, r4
 80012f2:	4265      	negs	r5, r4
 80012f4:	4165      	adcs	r5, r4
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d114      	bne.n	8001324 <__ledf2+0x70>
 80012fa:	464c      	mov	r4, r9
 80012fc:	4326      	orrs	r6, r4
 80012fe:	d111      	bne.n	8001324 <__ledf2+0x70>
 8001300:	465b      	mov	r3, fp
 8001302:	2000      	movs	r0, #0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d017      	beq.n	8001338 <__ledf2+0x84>
 8001308:	e010      	b.n	800132c <__ledf2+0x78>
 800130a:	003d      	movs	r5, r7
 800130c:	4325      	orrs	r5, r4
 800130e:	d112      	bne.n	8001336 <__ledf2+0x82>
 8001310:	4293      	cmp	r3, r2
 8001312:	d11c      	bne.n	800134e <__ledf2+0x9a>
 8001314:	464d      	mov	r5, r9
 8001316:	432e      	orrs	r6, r5
 8001318:	d10d      	bne.n	8001336 <__ledf2+0x82>
 800131a:	2a00      	cmp	r2, #0
 800131c:	d104      	bne.n	8001328 <__ledf2+0x74>
 800131e:	433c      	orrs	r4, r7
 8001320:	4265      	negs	r5, r4
 8001322:	4165      	adcs	r5, r4
 8001324:	2d00      	cmp	r5, #0
 8001326:	d10d      	bne.n	8001344 <__ledf2+0x90>
 8001328:	4281      	cmp	r1, r0
 800132a:	d016      	beq.n	800135a <__ledf2+0xa6>
 800132c:	2002      	movs	r0, #2
 800132e:	3901      	subs	r1, #1
 8001330:	4008      	ands	r0, r1
 8001332:	3801      	subs	r0, #1
 8001334:	e000      	b.n	8001338 <__ledf2+0x84>
 8001336:	2002      	movs	r0, #2
 8001338:	bcf0      	pop	{r4, r5, r6, r7}
 800133a:	46bb      	mov	fp, r7
 800133c:	46b2      	mov	sl, r6
 800133e:	46a9      	mov	r9, r5
 8001340:	46a0      	mov	r8, r4
 8001342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001344:	2800      	cmp	r0, #0
 8001346:	d1f7      	bne.n	8001338 <__ledf2+0x84>
 8001348:	2001      	movs	r0, #1
 800134a:	4240      	negs	r0, r0
 800134c:	e7f4      	b.n	8001338 <__ledf2+0x84>
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1ea      	bne.n	8001328 <__ledf2+0x74>
 8001352:	464c      	mov	r4, r9
 8001354:	4326      	orrs	r6, r4
 8001356:	d1e7      	bne.n	8001328 <__ledf2+0x74>
 8001358:	e7e8      	b.n	800132c <__ledf2+0x78>
 800135a:	429a      	cmp	r2, r3
 800135c:	dd06      	ble.n	800136c <__ledf2+0xb8>
 800135e:	4243      	negs	r3, r0
 8001360:	4158      	adcs	r0, r3
 8001362:	2302      	movs	r3, #2
 8001364:	4240      	negs	r0, r0
 8001366:	4018      	ands	r0, r3
 8001368:	3801      	subs	r0, #1
 800136a:	e7e5      	b.n	8001338 <__ledf2+0x84>
 800136c:	429a      	cmp	r2, r3
 800136e:	dbe9      	blt.n	8001344 <__ledf2+0x90>
 8001370:	454f      	cmp	r7, r9
 8001372:	d8db      	bhi.n	800132c <__ledf2+0x78>
 8001374:	d006      	beq.n	8001384 <__ledf2+0xd0>
 8001376:	2000      	movs	r0, #0
 8001378:	454f      	cmp	r7, r9
 800137a:	d2dd      	bcs.n	8001338 <__ledf2+0x84>
 800137c:	2900      	cmp	r1, #0
 800137e:	d0e3      	beq.n	8001348 <__ledf2+0x94>
 8001380:	0008      	movs	r0, r1
 8001382:	e7d9      	b.n	8001338 <__ledf2+0x84>
 8001384:	45c4      	cmp	ip, r8
 8001386:	d8d1      	bhi.n	800132c <__ledf2+0x78>
 8001388:	2000      	movs	r0, #0
 800138a:	45c4      	cmp	ip, r8
 800138c:	d2d4      	bcs.n	8001338 <__ledf2+0x84>
 800138e:	e7f5      	b.n	800137c <__ledf2+0xc8>
 8001390:	000007ff 	.word	0x000007ff

08001394 <__aeabi_dmul>:
 8001394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001396:	4657      	mov	r7, sl
 8001398:	464e      	mov	r6, r9
 800139a:	4645      	mov	r5, r8
 800139c:	46de      	mov	lr, fp
 800139e:	b5e0      	push	{r5, r6, r7, lr}
 80013a0:	4698      	mov	r8, r3
 80013a2:	030c      	lsls	r4, r1, #12
 80013a4:	004b      	lsls	r3, r1, #1
 80013a6:	0006      	movs	r6, r0
 80013a8:	4692      	mov	sl, r2
 80013aa:	b087      	sub	sp, #28
 80013ac:	0b24      	lsrs	r4, r4, #12
 80013ae:	0d5b      	lsrs	r3, r3, #21
 80013b0:	0fcf      	lsrs	r7, r1, #31
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d06c      	beq.n	8001490 <__aeabi_dmul+0xfc>
 80013b6:	4add      	ldr	r2, [pc, #884]	; (800172c <__aeabi_dmul+0x398>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d100      	bne.n	80013be <__aeabi_dmul+0x2a>
 80013bc:	e086      	b.n	80014cc <__aeabi_dmul+0x138>
 80013be:	0f42      	lsrs	r2, r0, #29
 80013c0:	00e4      	lsls	r4, r4, #3
 80013c2:	4314      	orrs	r4, r2
 80013c4:	2280      	movs	r2, #128	; 0x80
 80013c6:	0412      	lsls	r2, r2, #16
 80013c8:	4314      	orrs	r4, r2
 80013ca:	4ad9      	ldr	r2, [pc, #868]	; (8001730 <__aeabi_dmul+0x39c>)
 80013cc:	00c5      	lsls	r5, r0, #3
 80013ce:	4694      	mov	ip, r2
 80013d0:	4463      	add	r3, ip
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2300      	movs	r3, #0
 80013d6:	4699      	mov	r9, r3
 80013d8:	469b      	mov	fp, r3
 80013da:	4643      	mov	r3, r8
 80013dc:	4642      	mov	r2, r8
 80013de:	031e      	lsls	r6, r3, #12
 80013e0:	0fd2      	lsrs	r2, r2, #31
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	4650      	mov	r0, sl
 80013e6:	4690      	mov	r8, r2
 80013e8:	0b36      	lsrs	r6, r6, #12
 80013ea:	0d5b      	lsrs	r3, r3, #21
 80013ec:	d100      	bne.n	80013f0 <__aeabi_dmul+0x5c>
 80013ee:	e078      	b.n	80014e2 <__aeabi_dmul+0x14e>
 80013f0:	4ace      	ldr	r2, [pc, #824]	; (800172c <__aeabi_dmul+0x398>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d01d      	beq.n	8001432 <__aeabi_dmul+0x9e>
 80013f6:	49ce      	ldr	r1, [pc, #824]	; (8001730 <__aeabi_dmul+0x39c>)
 80013f8:	0f42      	lsrs	r2, r0, #29
 80013fa:	468c      	mov	ip, r1
 80013fc:	9900      	ldr	r1, [sp, #0]
 80013fe:	4463      	add	r3, ip
 8001400:	00f6      	lsls	r6, r6, #3
 8001402:	468c      	mov	ip, r1
 8001404:	4316      	orrs	r6, r2
 8001406:	2280      	movs	r2, #128	; 0x80
 8001408:	449c      	add	ip, r3
 800140a:	0412      	lsls	r2, r2, #16
 800140c:	4663      	mov	r3, ip
 800140e:	4316      	orrs	r6, r2
 8001410:	00c2      	lsls	r2, r0, #3
 8001412:	2000      	movs	r0, #0
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	4643      	mov	r3, r8
 800141a:	3101      	adds	r1, #1
 800141c:	468c      	mov	ip, r1
 800141e:	4649      	mov	r1, r9
 8001420:	407b      	eors	r3, r7
 8001422:	9301      	str	r3, [sp, #4]
 8001424:	290f      	cmp	r1, #15
 8001426:	d900      	bls.n	800142a <__aeabi_dmul+0x96>
 8001428:	e07e      	b.n	8001528 <__aeabi_dmul+0x194>
 800142a:	4bc2      	ldr	r3, [pc, #776]	; (8001734 <__aeabi_dmul+0x3a0>)
 800142c:	0089      	lsls	r1, r1, #2
 800142e:	5859      	ldr	r1, [r3, r1]
 8001430:	468f      	mov	pc, r1
 8001432:	4652      	mov	r2, sl
 8001434:	9b00      	ldr	r3, [sp, #0]
 8001436:	4332      	orrs	r2, r6
 8001438:	d000      	beq.n	800143c <__aeabi_dmul+0xa8>
 800143a:	e156      	b.n	80016ea <__aeabi_dmul+0x356>
 800143c:	49bb      	ldr	r1, [pc, #748]	; (800172c <__aeabi_dmul+0x398>)
 800143e:	2600      	movs	r6, #0
 8001440:	468c      	mov	ip, r1
 8001442:	4463      	add	r3, ip
 8001444:	4649      	mov	r1, r9
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	2302      	movs	r3, #2
 800144a:	4319      	orrs	r1, r3
 800144c:	4689      	mov	r9, r1
 800144e:	2002      	movs	r0, #2
 8001450:	e7e1      	b.n	8001416 <__aeabi_dmul+0x82>
 8001452:	4643      	mov	r3, r8
 8001454:	9301      	str	r3, [sp, #4]
 8001456:	0034      	movs	r4, r6
 8001458:	0015      	movs	r5, r2
 800145a:	4683      	mov	fp, r0
 800145c:	465b      	mov	r3, fp
 800145e:	2b02      	cmp	r3, #2
 8001460:	d05e      	beq.n	8001520 <__aeabi_dmul+0x18c>
 8001462:	2b03      	cmp	r3, #3
 8001464:	d100      	bne.n	8001468 <__aeabi_dmul+0xd4>
 8001466:	e1f3      	b.n	8001850 <__aeabi_dmul+0x4bc>
 8001468:	2b01      	cmp	r3, #1
 800146a:	d000      	beq.n	800146e <__aeabi_dmul+0xda>
 800146c:	e118      	b.n	80016a0 <__aeabi_dmul+0x30c>
 800146e:	2200      	movs	r2, #0
 8001470:	2400      	movs	r4, #0
 8001472:	2500      	movs	r5, #0
 8001474:	9b01      	ldr	r3, [sp, #4]
 8001476:	0512      	lsls	r2, r2, #20
 8001478:	4322      	orrs	r2, r4
 800147a:	07db      	lsls	r3, r3, #31
 800147c:	431a      	orrs	r2, r3
 800147e:	0028      	movs	r0, r5
 8001480:	0011      	movs	r1, r2
 8001482:	b007      	add	sp, #28
 8001484:	bcf0      	pop	{r4, r5, r6, r7}
 8001486:	46bb      	mov	fp, r7
 8001488:	46b2      	mov	sl, r6
 800148a:	46a9      	mov	r9, r5
 800148c:	46a0      	mov	r8, r4
 800148e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001490:	0025      	movs	r5, r4
 8001492:	4305      	orrs	r5, r0
 8001494:	d100      	bne.n	8001498 <__aeabi_dmul+0x104>
 8001496:	e141      	b.n	800171c <__aeabi_dmul+0x388>
 8001498:	2c00      	cmp	r4, #0
 800149a:	d100      	bne.n	800149e <__aeabi_dmul+0x10a>
 800149c:	e1ad      	b.n	80017fa <__aeabi_dmul+0x466>
 800149e:	0020      	movs	r0, r4
 80014a0:	f000 fdfa 	bl	8002098 <__clzsi2>
 80014a4:	0001      	movs	r1, r0
 80014a6:	0002      	movs	r2, r0
 80014a8:	390b      	subs	r1, #11
 80014aa:	231d      	movs	r3, #29
 80014ac:	0010      	movs	r0, r2
 80014ae:	1a5b      	subs	r3, r3, r1
 80014b0:	0031      	movs	r1, r6
 80014b2:	0035      	movs	r5, r6
 80014b4:	3808      	subs	r0, #8
 80014b6:	4084      	lsls	r4, r0
 80014b8:	40d9      	lsrs	r1, r3
 80014ba:	4085      	lsls	r5, r0
 80014bc:	430c      	orrs	r4, r1
 80014be:	489e      	ldr	r0, [pc, #632]	; (8001738 <__aeabi_dmul+0x3a4>)
 80014c0:	1a83      	subs	r3, r0, r2
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	2300      	movs	r3, #0
 80014c6:	4699      	mov	r9, r3
 80014c8:	469b      	mov	fp, r3
 80014ca:	e786      	b.n	80013da <__aeabi_dmul+0x46>
 80014cc:	0005      	movs	r5, r0
 80014ce:	4325      	orrs	r5, r4
 80014d0:	d000      	beq.n	80014d4 <__aeabi_dmul+0x140>
 80014d2:	e11c      	b.n	800170e <__aeabi_dmul+0x37a>
 80014d4:	2208      	movs	r2, #8
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	2302      	movs	r3, #2
 80014da:	2400      	movs	r4, #0
 80014dc:	4691      	mov	r9, r2
 80014de:	469b      	mov	fp, r3
 80014e0:	e77b      	b.n	80013da <__aeabi_dmul+0x46>
 80014e2:	4652      	mov	r2, sl
 80014e4:	4332      	orrs	r2, r6
 80014e6:	d100      	bne.n	80014ea <__aeabi_dmul+0x156>
 80014e8:	e10a      	b.n	8001700 <__aeabi_dmul+0x36c>
 80014ea:	2e00      	cmp	r6, #0
 80014ec:	d100      	bne.n	80014f0 <__aeabi_dmul+0x15c>
 80014ee:	e176      	b.n	80017de <__aeabi_dmul+0x44a>
 80014f0:	0030      	movs	r0, r6
 80014f2:	f000 fdd1 	bl	8002098 <__clzsi2>
 80014f6:	0002      	movs	r2, r0
 80014f8:	3a0b      	subs	r2, #11
 80014fa:	231d      	movs	r3, #29
 80014fc:	0001      	movs	r1, r0
 80014fe:	1a9b      	subs	r3, r3, r2
 8001500:	4652      	mov	r2, sl
 8001502:	3908      	subs	r1, #8
 8001504:	40da      	lsrs	r2, r3
 8001506:	408e      	lsls	r6, r1
 8001508:	4316      	orrs	r6, r2
 800150a:	4652      	mov	r2, sl
 800150c:	408a      	lsls	r2, r1
 800150e:	9b00      	ldr	r3, [sp, #0]
 8001510:	4989      	ldr	r1, [pc, #548]	; (8001738 <__aeabi_dmul+0x3a4>)
 8001512:	1a18      	subs	r0, r3, r0
 8001514:	0003      	movs	r3, r0
 8001516:	468c      	mov	ip, r1
 8001518:	4463      	add	r3, ip
 800151a:	2000      	movs	r0, #0
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	e77a      	b.n	8001416 <__aeabi_dmul+0x82>
 8001520:	2400      	movs	r4, #0
 8001522:	2500      	movs	r5, #0
 8001524:	4a81      	ldr	r2, [pc, #516]	; (800172c <__aeabi_dmul+0x398>)
 8001526:	e7a5      	b.n	8001474 <__aeabi_dmul+0xe0>
 8001528:	0c2f      	lsrs	r7, r5, #16
 800152a:	042d      	lsls	r5, r5, #16
 800152c:	0c2d      	lsrs	r5, r5, #16
 800152e:	002b      	movs	r3, r5
 8001530:	0c11      	lsrs	r1, r2, #16
 8001532:	0412      	lsls	r2, r2, #16
 8001534:	0c12      	lsrs	r2, r2, #16
 8001536:	4353      	muls	r3, r2
 8001538:	4698      	mov	r8, r3
 800153a:	0013      	movs	r3, r2
 800153c:	0028      	movs	r0, r5
 800153e:	437b      	muls	r3, r7
 8001540:	4699      	mov	r9, r3
 8001542:	4348      	muls	r0, r1
 8001544:	4448      	add	r0, r9
 8001546:	4683      	mov	fp, r0
 8001548:	4640      	mov	r0, r8
 800154a:	000b      	movs	r3, r1
 800154c:	0c00      	lsrs	r0, r0, #16
 800154e:	4682      	mov	sl, r0
 8001550:	4658      	mov	r0, fp
 8001552:	437b      	muls	r3, r7
 8001554:	4450      	add	r0, sl
 8001556:	9302      	str	r3, [sp, #8]
 8001558:	4581      	cmp	r9, r0
 800155a:	d906      	bls.n	800156a <__aeabi_dmul+0x1d6>
 800155c:	469a      	mov	sl, r3
 800155e:	2380      	movs	r3, #128	; 0x80
 8001560:	025b      	lsls	r3, r3, #9
 8001562:	4699      	mov	r9, r3
 8001564:	44ca      	add	sl, r9
 8001566:	4653      	mov	r3, sl
 8001568:	9302      	str	r3, [sp, #8]
 800156a:	0c03      	lsrs	r3, r0, #16
 800156c:	469b      	mov	fp, r3
 800156e:	4643      	mov	r3, r8
 8001570:	041b      	lsls	r3, r3, #16
 8001572:	0400      	lsls	r0, r0, #16
 8001574:	0c1b      	lsrs	r3, r3, #16
 8001576:	4698      	mov	r8, r3
 8001578:	0003      	movs	r3, r0
 800157a:	4443      	add	r3, r8
 800157c:	9304      	str	r3, [sp, #16]
 800157e:	0c33      	lsrs	r3, r6, #16
 8001580:	4699      	mov	r9, r3
 8001582:	002b      	movs	r3, r5
 8001584:	0436      	lsls	r6, r6, #16
 8001586:	0c36      	lsrs	r6, r6, #16
 8001588:	4373      	muls	r3, r6
 800158a:	4698      	mov	r8, r3
 800158c:	0033      	movs	r3, r6
 800158e:	437b      	muls	r3, r7
 8001590:	469a      	mov	sl, r3
 8001592:	464b      	mov	r3, r9
 8001594:	435d      	muls	r5, r3
 8001596:	435f      	muls	r7, r3
 8001598:	4643      	mov	r3, r8
 800159a:	4455      	add	r5, sl
 800159c:	0c18      	lsrs	r0, r3, #16
 800159e:	1940      	adds	r0, r0, r5
 80015a0:	4582      	cmp	sl, r0
 80015a2:	d903      	bls.n	80015ac <__aeabi_dmul+0x218>
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	025b      	lsls	r3, r3, #9
 80015a8:	469a      	mov	sl, r3
 80015aa:	4457      	add	r7, sl
 80015ac:	0c05      	lsrs	r5, r0, #16
 80015ae:	19eb      	adds	r3, r5, r7
 80015b0:	9305      	str	r3, [sp, #20]
 80015b2:	4643      	mov	r3, r8
 80015b4:	041d      	lsls	r5, r3, #16
 80015b6:	0c2d      	lsrs	r5, r5, #16
 80015b8:	0400      	lsls	r0, r0, #16
 80015ba:	1940      	adds	r0, r0, r5
 80015bc:	0c25      	lsrs	r5, r4, #16
 80015be:	0424      	lsls	r4, r4, #16
 80015c0:	0c24      	lsrs	r4, r4, #16
 80015c2:	0027      	movs	r7, r4
 80015c4:	4357      	muls	r7, r2
 80015c6:	436a      	muls	r2, r5
 80015c8:	4690      	mov	r8, r2
 80015ca:	002a      	movs	r2, r5
 80015cc:	0c3b      	lsrs	r3, r7, #16
 80015ce:	469a      	mov	sl, r3
 80015d0:	434a      	muls	r2, r1
 80015d2:	4361      	muls	r1, r4
 80015d4:	4441      	add	r1, r8
 80015d6:	4451      	add	r1, sl
 80015d8:	4483      	add	fp, r0
 80015da:	4588      	cmp	r8, r1
 80015dc:	d903      	bls.n	80015e6 <__aeabi_dmul+0x252>
 80015de:	2380      	movs	r3, #128	; 0x80
 80015e0:	025b      	lsls	r3, r3, #9
 80015e2:	4698      	mov	r8, r3
 80015e4:	4442      	add	r2, r8
 80015e6:	043f      	lsls	r7, r7, #16
 80015e8:	0c0b      	lsrs	r3, r1, #16
 80015ea:	0c3f      	lsrs	r7, r7, #16
 80015ec:	0409      	lsls	r1, r1, #16
 80015ee:	19c9      	adds	r1, r1, r7
 80015f0:	0027      	movs	r7, r4
 80015f2:	4698      	mov	r8, r3
 80015f4:	464b      	mov	r3, r9
 80015f6:	4377      	muls	r7, r6
 80015f8:	435c      	muls	r4, r3
 80015fa:	436e      	muls	r6, r5
 80015fc:	435d      	muls	r5, r3
 80015fe:	0c3b      	lsrs	r3, r7, #16
 8001600:	4699      	mov	r9, r3
 8001602:	19a4      	adds	r4, r4, r6
 8001604:	444c      	add	r4, r9
 8001606:	4442      	add	r2, r8
 8001608:	9503      	str	r5, [sp, #12]
 800160a:	42a6      	cmp	r6, r4
 800160c:	d904      	bls.n	8001618 <__aeabi_dmul+0x284>
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	025b      	lsls	r3, r3, #9
 8001612:	4698      	mov	r8, r3
 8001614:	4445      	add	r5, r8
 8001616:	9503      	str	r5, [sp, #12]
 8001618:	9b02      	ldr	r3, [sp, #8]
 800161a:	043f      	lsls	r7, r7, #16
 800161c:	445b      	add	r3, fp
 800161e:	001e      	movs	r6, r3
 8001620:	4283      	cmp	r3, r0
 8001622:	4180      	sbcs	r0, r0
 8001624:	0423      	lsls	r3, r4, #16
 8001626:	4698      	mov	r8, r3
 8001628:	9b05      	ldr	r3, [sp, #20]
 800162a:	0c3f      	lsrs	r7, r7, #16
 800162c:	4447      	add	r7, r8
 800162e:	4698      	mov	r8, r3
 8001630:	1876      	adds	r6, r6, r1
 8001632:	428e      	cmp	r6, r1
 8001634:	4189      	sbcs	r1, r1
 8001636:	4447      	add	r7, r8
 8001638:	4240      	negs	r0, r0
 800163a:	183d      	adds	r5, r7, r0
 800163c:	46a8      	mov	r8, r5
 800163e:	4693      	mov	fp, r2
 8001640:	4249      	negs	r1, r1
 8001642:	468a      	mov	sl, r1
 8001644:	44c3      	add	fp, r8
 8001646:	429f      	cmp	r7, r3
 8001648:	41bf      	sbcs	r7, r7
 800164a:	4580      	cmp	r8, r0
 800164c:	4180      	sbcs	r0, r0
 800164e:	9b03      	ldr	r3, [sp, #12]
 8001650:	44da      	add	sl, fp
 8001652:	4698      	mov	r8, r3
 8001654:	4653      	mov	r3, sl
 8001656:	4240      	negs	r0, r0
 8001658:	427f      	negs	r7, r7
 800165a:	4307      	orrs	r7, r0
 800165c:	0c24      	lsrs	r4, r4, #16
 800165e:	4593      	cmp	fp, r2
 8001660:	4192      	sbcs	r2, r2
 8001662:	458a      	cmp	sl, r1
 8001664:	4189      	sbcs	r1, r1
 8001666:	193f      	adds	r7, r7, r4
 8001668:	0ddc      	lsrs	r4, r3, #23
 800166a:	9b04      	ldr	r3, [sp, #16]
 800166c:	0275      	lsls	r5, r6, #9
 800166e:	431d      	orrs	r5, r3
 8001670:	1e68      	subs	r0, r5, #1
 8001672:	4185      	sbcs	r5, r0
 8001674:	4653      	mov	r3, sl
 8001676:	4252      	negs	r2, r2
 8001678:	4249      	negs	r1, r1
 800167a:	430a      	orrs	r2, r1
 800167c:	18bf      	adds	r7, r7, r2
 800167e:	4447      	add	r7, r8
 8001680:	0df6      	lsrs	r6, r6, #23
 8001682:	027f      	lsls	r7, r7, #9
 8001684:	4335      	orrs	r5, r6
 8001686:	025a      	lsls	r2, r3, #9
 8001688:	433c      	orrs	r4, r7
 800168a:	4315      	orrs	r5, r2
 800168c:	01fb      	lsls	r3, r7, #7
 800168e:	d400      	bmi.n	8001692 <__aeabi_dmul+0x2fe>
 8001690:	e0c1      	b.n	8001816 <__aeabi_dmul+0x482>
 8001692:	2101      	movs	r1, #1
 8001694:	086a      	lsrs	r2, r5, #1
 8001696:	400d      	ands	r5, r1
 8001698:	4315      	orrs	r5, r2
 800169a:	07e2      	lsls	r2, r4, #31
 800169c:	4315      	orrs	r5, r2
 800169e:	0864      	lsrs	r4, r4, #1
 80016a0:	4926      	ldr	r1, [pc, #152]	; (800173c <__aeabi_dmul+0x3a8>)
 80016a2:	4461      	add	r1, ip
 80016a4:	2900      	cmp	r1, #0
 80016a6:	dd56      	ble.n	8001756 <__aeabi_dmul+0x3c2>
 80016a8:	076b      	lsls	r3, r5, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_dmul+0x32c>
 80016ac:	220f      	movs	r2, #15
 80016ae:	402a      	ands	r2, r5
 80016b0:	2a04      	cmp	r2, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_dmul+0x32c>
 80016b4:	1d2a      	adds	r2, r5, #4
 80016b6:	42aa      	cmp	r2, r5
 80016b8:	41ad      	sbcs	r5, r5
 80016ba:	426d      	negs	r5, r5
 80016bc:	1964      	adds	r4, r4, r5
 80016be:	0015      	movs	r5, r2
 80016c0:	01e3      	lsls	r3, r4, #7
 80016c2:	d504      	bpl.n	80016ce <__aeabi_dmul+0x33a>
 80016c4:	2180      	movs	r1, #128	; 0x80
 80016c6:	4a1e      	ldr	r2, [pc, #120]	; (8001740 <__aeabi_dmul+0x3ac>)
 80016c8:	00c9      	lsls	r1, r1, #3
 80016ca:	4014      	ands	r4, r2
 80016cc:	4461      	add	r1, ip
 80016ce:	4a1d      	ldr	r2, [pc, #116]	; (8001744 <__aeabi_dmul+0x3b0>)
 80016d0:	4291      	cmp	r1, r2
 80016d2:	dd00      	ble.n	80016d6 <__aeabi_dmul+0x342>
 80016d4:	e724      	b.n	8001520 <__aeabi_dmul+0x18c>
 80016d6:	0762      	lsls	r2, r4, #29
 80016d8:	08ed      	lsrs	r5, r5, #3
 80016da:	0264      	lsls	r4, r4, #9
 80016dc:	0549      	lsls	r1, r1, #21
 80016de:	4315      	orrs	r5, r2
 80016e0:	0b24      	lsrs	r4, r4, #12
 80016e2:	0d4a      	lsrs	r2, r1, #21
 80016e4:	e6c6      	b.n	8001474 <__aeabi_dmul+0xe0>
 80016e6:	9701      	str	r7, [sp, #4]
 80016e8:	e6b8      	b.n	800145c <__aeabi_dmul+0xc8>
 80016ea:	4a10      	ldr	r2, [pc, #64]	; (800172c <__aeabi_dmul+0x398>)
 80016ec:	2003      	movs	r0, #3
 80016ee:	4694      	mov	ip, r2
 80016f0:	4463      	add	r3, ip
 80016f2:	464a      	mov	r2, r9
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	2303      	movs	r3, #3
 80016f8:	431a      	orrs	r2, r3
 80016fa:	4691      	mov	r9, r2
 80016fc:	4652      	mov	r2, sl
 80016fe:	e68a      	b.n	8001416 <__aeabi_dmul+0x82>
 8001700:	4649      	mov	r1, r9
 8001702:	2301      	movs	r3, #1
 8001704:	4319      	orrs	r1, r3
 8001706:	4689      	mov	r9, r1
 8001708:	2600      	movs	r6, #0
 800170a:	2001      	movs	r0, #1
 800170c:	e683      	b.n	8001416 <__aeabi_dmul+0x82>
 800170e:	220c      	movs	r2, #12
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	2303      	movs	r3, #3
 8001714:	0005      	movs	r5, r0
 8001716:	4691      	mov	r9, r2
 8001718:	469b      	mov	fp, r3
 800171a:	e65e      	b.n	80013da <__aeabi_dmul+0x46>
 800171c:	2304      	movs	r3, #4
 800171e:	4699      	mov	r9, r3
 8001720:	2300      	movs	r3, #0
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	3301      	adds	r3, #1
 8001726:	2400      	movs	r4, #0
 8001728:	469b      	mov	fp, r3
 800172a:	e656      	b.n	80013da <__aeabi_dmul+0x46>
 800172c:	000007ff 	.word	0x000007ff
 8001730:	fffffc01 	.word	0xfffffc01
 8001734:	08006194 	.word	0x08006194
 8001738:	fffffc0d 	.word	0xfffffc0d
 800173c:	000003ff 	.word	0x000003ff
 8001740:	feffffff 	.word	0xfeffffff
 8001744:	000007fe 	.word	0x000007fe
 8001748:	2300      	movs	r3, #0
 800174a:	2480      	movs	r4, #128	; 0x80
 800174c:	2500      	movs	r5, #0
 800174e:	4a44      	ldr	r2, [pc, #272]	; (8001860 <__aeabi_dmul+0x4cc>)
 8001750:	9301      	str	r3, [sp, #4]
 8001752:	0324      	lsls	r4, r4, #12
 8001754:	e68e      	b.n	8001474 <__aeabi_dmul+0xe0>
 8001756:	2001      	movs	r0, #1
 8001758:	1a40      	subs	r0, r0, r1
 800175a:	2838      	cmp	r0, #56	; 0x38
 800175c:	dd00      	ble.n	8001760 <__aeabi_dmul+0x3cc>
 800175e:	e686      	b.n	800146e <__aeabi_dmul+0xda>
 8001760:	281f      	cmp	r0, #31
 8001762:	dd5b      	ble.n	800181c <__aeabi_dmul+0x488>
 8001764:	221f      	movs	r2, #31
 8001766:	0023      	movs	r3, r4
 8001768:	4252      	negs	r2, r2
 800176a:	1a51      	subs	r1, r2, r1
 800176c:	40cb      	lsrs	r3, r1
 800176e:	0019      	movs	r1, r3
 8001770:	2820      	cmp	r0, #32
 8001772:	d003      	beq.n	800177c <__aeabi_dmul+0x3e8>
 8001774:	4a3b      	ldr	r2, [pc, #236]	; (8001864 <__aeabi_dmul+0x4d0>)
 8001776:	4462      	add	r2, ip
 8001778:	4094      	lsls	r4, r2
 800177a:	4325      	orrs	r5, r4
 800177c:	1e6a      	subs	r2, r5, #1
 800177e:	4195      	sbcs	r5, r2
 8001780:	002a      	movs	r2, r5
 8001782:	430a      	orrs	r2, r1
 8001784:	2107      	movs	r1, #7
 8001786:	000d      	movs	r5, r1
 8001788:	2400      	movs	r4, #0
 800178a:	4015      	ands	r5, r2
 800178c:	4211      	tst	r1, r2
 800178e:	d05b      	beq.n	8001848 <__aeabi_dmul+0x4b4>
 8001790:	210f      	movs	r1, #15
 8001792:	2400      	movs	r4, #0
 8001794:	4011      	ands	r1, r2
 8001796:	2904      	cmp	r1, #4
 8001798:	d053      	beq.n	8001842 <__aeabi_dmul+0x4ae>
 800179a:	1d11      	adds	r1, r2, #4
 800179c:	4291      	cmp	r1, r2
 800179e:	4192      	sbcs	r2, r2
 80017a0:	4252      	negs	r2, r2
 80017a2:	18a4      	adds	r4, r4, r2
 80017a4:	000a      	movs	r2, r1
 80017a6:	0223      	lsls	r3, r4, #8
 80017a8:	d54b      	bpl.n	8001842 <__aeabi_dmul+0x4ae>
 80017aa:	2201      	movs	r2, #1
 80017ac:	2400      	movs	r4, #0
 80017ae:	2500      	movs	r5, #0
 80017b0:	e660      	b.n	8001474 <__aeabi_dmul+0xe0>
 80017b2:	2380      	movs	r3, #128	; 0x80
 80017b4:	031b      	lsls	r3, r3, #12
 80017b6:	421c      	tst	r4, r3
 80017b8:	d009      	beq.n	80017ce <__aeabi_dmul+0x43a>
 80017ba:	421e      	tst	r6, r3
 80017bc:	d107      	bne.n	80017ce <__aeabi_dmul+0x43a>
 80017be:	4333      	orrs	r3, r6
 80017c0:	031c      	lsls	r4, r3, #12
 80017c2:	4643      	mov	r3, r8
 80017c4:	0015      	movs	r5, r2
 80017c6:	0b24      	lsrs	r4, r4, #12
 80017c8:	4a25      	ldr	r2, [pc, #148]	; (8001860 <__aeabi_dmul+0x4cc>)
 80017ca:	9301      	str	r3, [sp, #4]
 80017cc:	e652      	b.n	8001474 <__aeabi_dmul+0xe0>
 80017ce:	2280      	movs	r2, #128	; 0x80
 80017d0:	0312      	lsls	r2, r2, #12
 80017d2:	4314      	orrs	r4, r2
 80017d4:	0324      	lsls	r4, r4, #12
 80017d6:	4a22      	ldr	r2, [pc, #136]	; (8001860 <__aeabi_dmul+0x4cc>)
 80017d8:	0b24      	lsrs	r4, r4, #12
 80017da:	9701      	str	r7, [sp, #4]
 80017dc:	e64a      	b.n	8001474 <__aeabi_dmul+0xe0>
 80017de:	f000 fc5b 	bl	8002098 <__clzsi2>
 80017e2:	0003      	movs	r3, r0
 80017e4:	001a      	movs	r2, r3
 80017e6:	3215      	adds	r2, #21
 80017e8:	3020      	adds	r0, #32
 80017ea:	2a1c      	cmp	r2, #28
 80017ec:	dc00      	bgt.n	80017f0 <__aeabi_dmul+0x45c>
 80017ee:	e684      	b.n	80014fa <__aeabi_dmul+0x166>
 80017f0:	4656      	mov	r6, sl
 80017f2:	3b08      	subs	r3, #8
 80017f4:	2200      	movs	r2, #0
 80017f6:	409e      	lsls	r6, r3
 80017f8:	e689      	b.n	800150e <__aeabi_dmul+0x17a>
 80017fa:	f000 fc4d 	bl	8002098 <__clzsi2>
 80017fe:	0001      	movs	r1, r0
 8001800:	0002      	movs	r2, r0
 8001802:	3115      	adds	r1, #21
 8001804:	3220      	adds	r2, #32
 8001806:	291c      	cmp	r1, #28
 8001808:	dc00      	bgt.n	800180c <__aeabi_dmul+0x478>
 800180a:	e64e      	b.n	80014aa <__aeabi_dmul+0x116>
 800180c:	0034      	movs	r4, r6
 800180e:	3808      	subs	r0, #8
 8001810:	2500      	movs	r5, #0
 8001812:	4084      	lsls	r4, r0
 8001814:	e653      	b.n	80014be <__aeabi_dmul+0x12a>
 8001816:	9b00      	ldr	r3, [sp, #0]
 8001818:	469c      	mov	ip, r3
 800181a:	e741      	b.n	80016a0 <__aeabi_dmul+0x30c>
 800181c:	4912      	ldr	r1, [pc, #72]	; (8001868 <__aeabi_dmul+0x4d4>)
 800181e:	0022      	movs	r2, r4
 8001820:	4461      	add	r1, ip
 8001822:	002e      	movs	r6, r5
 8001824:	408d      	lsls	r5, r1
 8001826:	408a      	lsls	r2, r1
 8001828:	40c6      	lsrs	r6, r0
 800182a:	1e69      	subs	r1, r5, #1
 800182c:	418d      	sbcs	r5, r1
 800182e:	4332      	orrs	r2, r6
 8001830:	432a      	orrs	r2, r5
 8001832:	40c4      	lsrs	r4, r0
 8001834:	0753      	lsls	r3, r2, #29
 8001836:	d0b6      	beq.n	80017a6 <__aeabi_dmul+0x412>
 8001838:	210f      	movs	r1, #15
 800183a:	4011      	ands	r1, r2
 800183c:	2904      	cmp	r1, #4
 800183e:	d1ac      	bne.n	800179a <__aeabi_dmul+0x406>
 8001840:	e7b1      	b.n	80017a6 <__aeabi_dmul+0x412>
 8001842:	0765      	lsls	r5, r4, #29
 8001844:	0264      	lsls	r4, r4, #9
 8001846:	0b24      	lsrs	r4, r4, #12
 8001848:	08d2      	lsrs	r2, r2, #3
 800184a:	4315      	orrs	r5, r2
 800184c:	2200      	movs	r2, #0
 800184e:	e611      	b.n	8001474 <__aeabi_dmul+0xe0>
 8001850:	2280      	movs	r2, #128	; 0x80
 8001852:	0312      	lsls	r2, r2, #12
 8001854:	4314      	orrs	r4, r2
 8001856:	0324      	lsls	r4, r4, #12
 8001858:	4a01      	ldr	r2, [pc, #4]	; (8001860 <__aeabi_dmul+0x4cc>)
 800185a:	0b24      	lsrs	r4, r4, #12
 800185c:	e60a      	b.n	8001474 <__aeabi_dmul+0xe0>
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	000007ff 	.word	0x000007ff
 8001864:	0000043e 	.word	0x0000043e
 8001868:	0000041e 	.word	0x0000041e

0800186c <__aeabi_dsub>:
 800186c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800186e:	4657      	mov	r7, sl
 8001870:	464e      	mov	r6, r9
 8001872:	4645      	mov	r5, r8
 8001874:	46de      	mov	lr, fp
 8001876:	0004      	movs	r4, r0
 8001878:	b5e0      	push	{r5, r6, r7, lr}
 800187a:	001f      	movs	r7, r3
 800187c:	0010      	movs	r0, r2
 800187e:	030b      	lsls	r3, r1, #12
 8001880:	0f62      	lsrs	r2, r4, #29
 8001882:	004e      	lsls	r6, r1, #1
 8001884:	0fcd      	lsrs	r5, r1, #31
 8001886:	0a5b      	lsrs	r3, r3, #9
 8001888:	0339      	lsls	r1, r7, #12
 800188a:	4313      	orrs	r3, r2
 800188c:	0a49      	lsrs	r1, r1, #9
 800188e:	00e2      	lsls	r2, r4, #3
 8001890:	0f44      	lsrs	r4, r0, #29
 8001892:	4321      	orrs	r1, r4
 8001894:	4cc2      	ldr	r4, [pc, #776]	; (8001ba0 <__aeabi_dsub+0x334>)
 8001896:	4691      	mov	r9, r2
 8001898:	4692      	mov	sl, r2
 800189a:	00c0      	lsls	r0, r0, #3
 800189c:	007a      	lsls	r2, r7, #1
 800189e:	4680      	mov	r8, r0
 80018a0:	0d76      	lsrs	r6, r6, #21
 80018a2:	0d52      	lsrs	r2, r2, #21
 80018a4:	0fff      	lsrs	r7, r7, #31
 80018a6:	42a2      	cmp	r2, r4
 80018a8:	d100      	bne.n	80018ac <__aeabi_dsub+0x40>
 80018aa:	e0b4      	b.n	8001a16 <__aeabi_dsub+0x1aa>
 80018ac:	2401      	movs	r4, #1
 80018ae:	4067      	eors	r7, r4
 80018b0:	46bb      	mov	fp, r7
 80018b2:	42bd      	cmp	r5, r7
 80018b4:	d100      	bne.n	80018b8 <__aeabi_dsub+0x4c>
 80018b6:	e088      	b.n	80019ca <__aeabi_dsub+0x15e>
 80018b8:	1ab4      	subs	r4, r6, r2
 80018ba:	46a4      	mov	ip, r4
 80018bc:	2c00      	cmp	r4, #0
 80018be:	dc00      	bgt.n	80018c2 <__aeabi_dsub+0x56>
 80018c0:	e0b2      	b.n	8001a28 <__aeabi_dsub+0x1bc>
 80018c2:	2a00      	cmp	r2, #0
 80018c4:	d100      	bne.n	80018c8 <__aeabi_dsub+0x5c>
 80018c6:	e0c5      	b.n	8001a54 <__aeabi_dsub+0x1e8>
 80018c8:	4ab5      	ldr	r2, [pc, #724]	; (8001ba0 <__aeabi_dsub+0x334>)
 80018ca:	4296      	cmp	r6, r2
 80018cc:	d100      	bne.n	80018d0 <__aeabi_dsub+0x64>
 80018ce:	e28b      	b.n	8001de8 <__aeabi_dsub+0x57c>
 80018d0:	2280      	movs	r2, #128	; 0x80
 80018d2:	0412      	lsls	r2, r2, #16
 80018d4:	4311      	orrs	r1, r2
 80018d6:	4662      	mov	r2, ip
 80018d8:	2a38      	cmp	r2, #56	; 0x38
 80018da:	dd00      	ble.n	80018de <__aeabi_dsub+0x72>
 80018dc:	e1a1      	b.n	8001c22 <__aeabi_dsub+0x3b6>
 80018de:	2a1f      	cmp	r2, #31
 80018e0:	dd00      	ble.n	80018e4 <__aeabi_dsub+0x78>
 80018e2:	e216      	b.n	8001d12 <__aeabi_dsub+0x4a6>
 80018e4:	2720      	movs	r7, #32
 80018e6:	000c      	movs	r4, r1
 80018e8:	1abf      	subs	r7, r7, r2
 80018ea:	40bc      	lsls	r4, r7
 80018ec:	0002      	movs	r2, r0
 80018ee:	46a0      	mov	r8, r4
 80018f0:	4664      	mov	r4, ip
 80018f2:	40b8      	lsls	r0, r7
 80018f4:	40e2      	lsrs	r2, r4
 80018f6:	4644      	mov	r4, r8
 80018f8:	4314      	orrs	r4, r2
 80018fa:	0002      	movs	r2, r0
 80018fc:	1e50      	subs	r0, r2, #1
 80018fe:	4182      	sbcs	r2, r0
 8001900:	4660      	mov	r0, ip
 8001902:	40c1      	lsrs	r1, r0
 8001904:	4322      	orrs	r2, r4
 8001906:	1a5b      	subs	r3, r3, r1
 8001908:	4649      	mov	r1, r9
 800190a:	1a8c      	subs	r4, r1, r2
 800190c:	45a1      	cmp	r9, r4
 800190e:	4192      	sbcs	r2, r2
 8001910:	4252      	negs	r2, r2
 8001912:	1a9b      	subs	r3, r3, r2
 8001914:	4698      	mov	r8, r3
 8001916:	4643      	mov	r3, r8
 8001918:	021b      	lsls	r3, r3, #8
 800191a:	d400      	bmi.n	800191e <__aeabi_dsub+0xb2>
 800191c:	e117      	b.n	8001b4e <__aeabi_dsub+0x2e2>
 800191e:	4643      	mov	r3, r8
 8001920:	025b      	lsls	r3, r3, #9
 8001922:	0a5b      	lsrs	r3, r3, #9
 8001924:	4698      	mov	r8, r3
 8001926:	4643      	mov	r3, r8
 8001928:	2b00      	cmp	r3, #0
 800192a:	d100      	bne.n	800192e <__aeabi_dsub+0xc2>
 800192c:	e16c      	b.n	8001c08 <__aeabi_dsub+0x39c>
 800192e:	4640      	mov	r0, r8
 8001930:	f000 fbb2 	bl	8002098 <__clzsi2>
 8001934:	0002      	movs	r2, r0
 8001936:	3a08      	subs	r2, #8
 8001938:	2120      	movs	r1, #32
 800193a:	0020      	movs	r0, r4
 800193c:	4643      	mov	r3, r8
 800193e:	1a89      	subs	r1, r1, r2
 8001940:	4093      	lsls	r3, r2
 8001942:	40c8      	lsrs	r0, r1
 8001944:	4094      	lsls	r4, r2
 8001946:	4303      	orrs	r3, r0
 8001948:	4296      	cmp	r6, r2
 800194a:	dd00      	ble.n	800194e <__aeabi_dsub+0xe2>
 800194c:	e157      	b.n	8001bfe <__aeabi_dsub+0x392>
 800194e:	1b96      	subs	r6, r2, r6
 8001950:	1c71      	adds	r1, r6, #1
 8001952:	291f      	cmp	r1, #31
 8001954:	dd00      	ble.n	8001958 <__aeabi_dsub+0xec>
 8001956:	e1cb      	b.n	8001cf0 <__aeabi_dsub+0x484>
 8001958:	2220      	movs	r2, #32
 800195a:	0018      	movs	r0, r3
 800195c:	0026      	movs	r6, r4
 800195e:	1a52      	subs	r2, r2, r1
 8001960:	4094      	lsls	r4, r2
 8001962:	4090      	lsls	r0, r2
 8001964:	40ce      	lsrs	r6, r1
 8001966:	40cb      	lsrs	r3, r1
 8001968:	1e62      	subs	r2, r4, #1
 800196a:	4194      	sbcs	r4, r2
 800196c:	4330      	orrs	r0, r6
 800196e:	4698      	mov	r8, r3
 8001970:	2600      	movs	r6, #0
 8001972:	4304      	orrs	r4, r0
 8001974:	0763      	lsls	r3, r4, #29
 8001976:	d009      	beq.n	800198c <__aeabi_dsub+0x120>
 8001978:	230f      	movs	r3, #15
 800197a:	4023      	ands	r3, r4
 800197c:	2b04      	cmp	r3, #4
 800197e:	d005      	beq.n	800198c <__aeabi_dsub+0x120>
 8001980:	1d23      	adds	r3, r4, #4
 8001982:	42a3      	cmp	r3, r4
 8001984:	41a4      	sbcs	r4, r4
 8001986:	4264      	negs	r4, r4
 8001988:	44a0      	add	r8, r4
 800198a:	001c      	movs	r4, r3
 800198c:	4643      	mov	r3, r8
 800198e:	021b      	lsls	r3, r3, #8
 8001990:	d400      	bmi.n	8001994 <__aeabi_dsub+0x128>
 8001992:	e0df      	b.n	8001b54 <__aeabi_dsub+0x2e8>
 8001994:	4b82      	ldr	r3, [pc, #520]	; (8001ba0 <__aeabi_dsub+0x334>)
 8001996:	3601      	adds	r6, #1
 8001998:	429e      	cmp	r6, r3
 800199a:	d100      	bne.n	800199e <__aeabi_dsub+0x132>
 800199c:	e0fb      	b.n	8001b96 <__aeabi_dsub+0x32a>
 800199e:	4642      	mov	r2, r8
 80019a0:	4b80      	ldr	r3, [pc, #512]	; (8001ba4 <__aeabi_dsub+0x338>)
 80019a2:	08e4      	lsrs	r4, r4, #3
 80019a4:	401a      	ands	r2, r3
 80019a6:	0013      	movs	r3, r2
 80019a8:	0571      	lsls	r1, r6, #21
 80019aa:	0752      	lsls	r2, r2, #29
 80019ac:	025b      	lsls	r3, r3, #9
 80019ae:	4322      	orrs	r2, r4
 80019b0:	0b1b      	lsrs	r3, r3, #12
 80019b2:	0d49      	lsrs	r1, r1, #21
 80019b4:	0509      	lsls	r1, r1, #20
 80019b6:	07ed      	lsls	r5, r5, #31
 80019b8:	4319      	orrs	r1, r3
 80019ba:	4329      	orrs	r1, r5
 80019bc:	0010      	movs	r0, r2
 80019be:	bcf0      	pop	{r4, r5, r6, r7}
 80019c0:	46bb      	mov	fp, r7
 80019c2:	46b2      	mov	sl, r6
 80019c4:	46a9      	mov	r9, r5
 80019c6:	46a0      	mov	r8, r4
 80019c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019ca:	1ab4      	subs	r4, r6, r2
 80019cc:	46a4      	mov	ip, r4
 80019ce:	2c00      	cmp	r4, #0
 80019d0:	dd58      	ble.n	8001a84 <__aeabi_dsub+0x218>
 80019d2:	2a00      	cmp	r2, #0
 80019d4:	d100      	bne.n	80019d8 <__aeabi_dsub+0x16c>
 80019d6:	e09e      	b.n	8001b16 <__aeabi_dsub+0x2aa>
 80019d8:	4a71      	ldr	r2, [pc, #452]	; (8001ba0 <__aeabi_dsub+0x334>)
 80019da:	4296      	cmp	r6, r2
 80019dc:	d100      	bne.n	80019e0 <__aeabi_dsub+0x174>
 80019de:	e13b      	b.n	8001c58 <__aeabi_dsub+0x3ec>
 80019e0:	2280      	movs	r2, #128	; 0x80
 80019e2:	0412      	lsls	r2, r2, #16
 80019e4:	4311      	orrs	r1, r2
 80019e6:	4662      	mov	r2, ip
 80019e8:	2a38      	cmp	r2, #56	; 0x38
 80019ea:	dd00      	ble.n	80019ee <__aeabi_dsub+0x182>
 80019ec:	e0c1      	b.n	8001b72 <__aeabi_dsub+0x306>
 80019ee:	2a1f      	cmp	r2, #31
 80019f0:	dc00      	bgt.n	80019f4 <__aeabi_dsub+0x188>
 80019f2:	e1bb      	b.n	8001d6c <__aeabi_dsub+0x500>
 80019f4:	000c      	movs	r4, r1
 80019f6:	3a20      	subs	r2, #32
 80019f8:	40d4      	lsrs	r4, r2
 80019fa:	0022      	movs	r2, r4
 80019fc:	4664      	mov	r4, ip
 80019fe:	2c20      	cmp	r4, #32
 8001a00:	d004      	beq.n	8001a0c <__aeabi_dsub+0x1a0>
 8001a02:	2740      	movs	r7, #64	; 0x40
 8001a04:	1b3f      	subs	r7, r7, r4
 8001a06:	40b9      	lsls	r1, r7
 8001a08:	4308      	orrs	r0, r1
 8001a0a:	4680      	mov	r8, r0
 8001a0c:	4644      	mov	r4, r8
 8001a0e:	1e61      	subs	r1, r4, #1
 8001a10:	418c      	sbcs	r4, r1
 8001a12:	4314      	orrs	r4, r2
 8001a14:	e0b1      	b.n	8001b7a <__aeabi_dsub+0x30e>
 8001a16:	000c      	movs	r4, r1
 8001a18:	4304      	orrs	r4, r0
 8001a1a:	d02a      	beq.n	8001a72 <__aeabi_dsub+0x206>
 8001a1c:	46bb      	mov	fp, r7
 8001a1e:	42bd      	cmp	r5, r7
 8001a20:	d02d      	beq.n	8001a7e <__aeabi_dsub+0x212>
 8001a22:	4c61      	ldr	r4, [pc, #388]	; (8001ba8 <__aeabi_dsub+0x33c>)
 8001a24:	46a4      	mov	ip, r4
 8001a26:	44b4      	add	ip, r6
 8001a28:	4664      	mov	r4, ip
 8001a2a:	2c00      	cmp	r4, #0
 8001a2c:	d05c      	beq.n	8001ae8 <__aeabi_dsub+0x27c>
 8001a2e:	1b94      	subs	r4, r2, r6
 8001a30:	46a4      	mov	ip, r4
 8001a32:	2e00      	cmp	r6, #0
 8001a34:	d000      	beq.n	8001a38 <__aeabi_dsub+0x1cc>
 8001a36:	e115      	b.n	8001c64 <__aeabi_dsub+0x3f8>
 8001a38:	464d      	mov	r5, r9
 8001a3a:	431d      	orrs	r5, r3
 8001a3c:	d100      	bne.n	8001a40 <__aeabi_dsub+0x1d4>
 8001a3e:	e1c3      	b.n	8001dc8 <__aeabi_dsub+0x55c>
 8001a40:	1e65      	subs	r5, r4, #1
 8001a42:	2c01      	cmp	r4, #1
 8001a44:	d100      	bne.n	8001a48 <__aeabi_dsub+0x1dc>
 8001a46:	e20c      	b.n	8001e62 <__aeabi_dsub+0x5f6>
 8001a48:	4e55      	ldr	r6, [pc, #340]	; (8001ba0 <__aeabi_dsub+0x334>)
 8001a4a:	42b4      	cmp	r4, r6
 8001a4c:	d100      	bne.n	8001a50 <__aeabi_dsub+0x1e4>
 8001a4e:	e1f8      	b.n	8001e42 <__aeabi_dsub+0x5d6>
 8001a50:	46ac      	mov	ip, r5
 8001a52:	e10e      	b.n	8001c72 <__aeabi_dsub+0x406>
 8001a54:	000a      	movs	r2, r1
 8001a56:	4302      	orrs	r2, r0
 8001a58:	d100      	bne.n	8001a5c <__aeabi_dsub+0x1f0>
 8001a5a:	e136      	b.n	8001cca <__aeabi_dsub+0x45e>
 8001a5c:	0022      	movs	r2, r4
 8001a5e:	3a01      	subs	r2, #1
 8001a60:	2c01      	cmp	r4, #1
 8001a62:	d100      	bne.n	8001a66 <__aeabi_dsub+0x1fa>
 8001a64:	e1c6      	b.n	8001df4 <__aeabi_dsub+0x588>
 8001a66:	4c4e      	ldr	r4, [pc, #312]	; (8001ba0 <__aeabi_dsub+0x334>)
 8001a68:	45a4      	cmp	ip, r4
 8001a6a:	d100      	bne.n	8001a6e <__aeabi_dsub+0x202>
 8001a6c:	e0f4      	b.n	8001c58 <__aeabi_dsub+0x3ec>
 8001a6e:	4694      	mov	ip, r2
 8001a70:	e731      	b.n	80018d6 <__aeabi_dsub+0x6a>
 8001a72:	2401      	movs	r4, #1
 8001a74:	4067      	eors	r7, r4
 8001a76:	46bb      	mov	fp, r7
 8001a78:	42bd      	cmp	r5, r7
 8001a7a:	d000      	beq.n	8001a7e <__aeabi_dsub+0x212>
 8001a7c:	e71c      	b.n	80018b8 <__aeabi_dsub+0x4c>
 8001a7e:	4c4a      	ldr	r4, [pc, #296]	; (8001ba8 <__aeabi_dsub+0x33c>)
 8001a80:	46a4      	mov	ip, r4
 8001a82:	44b4      	add	ip, r6
 8001a84:	4664      	mov	r4, ip
 8001a86:	2c00      	cmp	r4, #0
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dsub+0x220>
 8001a8a:	e0cf      	b.n	8001c2c <__aeabi_dsub+0x3c0>
 8001a8c:	1b94      	subs	r4, r2, r6
 8001a8e:	46a4      	mov	ip, r4
 8001a90:	2e00      	cmp	r6, #0
 8001a92:	d100      	bne.n	8001a96 <__aeabi_dsub+0x22a>
 8001a94:	e15c      	b.n	8001d50 <__aeabi_dsub+0x4e4>
 8001a96:	4e42      	ldr	r6, [pc, #264]	; (8001ba0 <__aeabi_dsub+0x334>)
 8001a98:	42b2      	cmp	r2, r6
 8001a9a:	d100      	bne.n	8001a9e <__aeabi_dsub+0x232>
 8001a9c:	e1ec      	b.n	8001e78 <__aeabi_dsub+0x60c>
 8001a9e:	2680      	movs	r6, #128	; 0x80
 8001aa0:	0436      	lsls	r6, r6, #16
 8001aa2:	4333      	orrs	r3, r6
 8001aa4:	4664      	mov	r4, ip
 8001aa6:	2c38      	cmp	r4, #56	; 0x38
 8001aa8:	dd00      	ble.n	8001aac <__aeabi_dsub+0x240>
 8001aaa:	e1b3      	b.n	8001e14 <__aeabi_dsub+0x5a8>
 8001aac:	2c1f      	cmp	r4, #31
 8001aae:	dd00      	ble.n	8001ab2 <__aeabi_dsub+0x246>
 8001ab0:	e238      	b.n	8001f24 <__aeabi_dsub+0x6b8>
 8001ab2:	2620      	movs	r6, #32
 8001ab4:	1b36      	subs	r6, r6, r4
 8001ab6:	001c      	movs	r4, r3
 8001ab8:	40b4      	lsls	r4, r6
 8001aba:	464f      	mov	r7, r9
 8001abc:	46a0      	mov	r8, r4
 8001abe:	4664      	mov	r4, ip
 8001ac0:	40e7      	lsrs	r7, r4
 8001ac2:	4644      	mov	r4, r8
 8001ac4:	433c      	orrs	r4, r7
 8001ac6:	464f      	mov	r7, r9
 8001ac8:	40b7      	lsls	r7, r6
 8001aca:	003e      	movs	r6, r7
 8001acc:	1e77      	subs	r7, r6, #1
 8001ace:	41be      	sbcs	r6, r7
 8001ad0:	4334      	orrs	r4, r6
 8001ad2:	4666      	mov	r6, ip
 8001ad4:	40f3      	lsrs	r3, r6
 8001ad6:	18c9      	adds	r1, r1, r3
 8001ad8:	1824      	adds	r4, r4, r0
 8001ada:	4284      	cmp	r4, r0
 8001adc:	419b      	sbcs	r3, r3
 8001ade:	425b      	negs	r3, r3
 8001ae0:	4698      	mov	r8, r3
 8001ae2:	0016      	movs	r6, r2
 8001ae4:	4488      	add	r8, r1
 8001ae6:	e04e      	b.n	8001b86 <__aeabi_dsub+0x31a>
 8001ae8:	4a30      	ldr	r2, [pc, #192]	; (8001bac <__aeabi_dsub+0x340>)
 8001aea:	1c74      	adds	r4, r6, #1
 8001aec:	4214      	tst	r4, r2
 8001aee:	d000      	beq.n	8001af2 <__aeabi_dsub+0x286>
 8001af0:	e0d6      	b.n	8001ca0 <__aeabi_dsub+0x434>
 8001af2:	464a      	mov	r2, r9
 8001af4:	431a      	orrs	r2, r3
 8001af6:	2e00      	cmp	r6, #0
 8001af8:	d000      	beq.n	8001afc <__aeabi_dsub+0x290>
 8001afa:	e15b      	b.n	8001db4 <__aeabi_dsub+0x548>
 8001afc:	2a00      	cmp	r2, #0
 8001afe:	d100      	bne.n	8001b02 <__aeabi_dsub+0x296>
 8001b00:	e1a5      	b.n	8001e4e <__aeabi_dsub+0x5e2>
 8001b02:	000a      	movs	r2, r1
 8001b04:	4302      	orrs	r2, r0
 8001b06:	d000      	beq.n	8001b0a <__aeabi_dsub+0x29e>
 8001b08:	e1bb      	b.n	8001e82 <__aeabi_dsub+0x616>
 8001b0a:	464a      	mov	r2, r9
 8001b0c:	0759      	lsls	r1, r3, #29
 8001b0e:	08d2      	lsrs	r2, r2, #3
 8001b10:	430a      	orrs	r2, r1
 8001b12:	08db      	lsrs	r3, r3, #3
 8001b14:	e027      	b.n	8001b66 <__aeabi_dsub+0x2fa>
 8001b16:	000a      	movs	r2, r1
 8001b18:	4302      	orrs	r2, r0
 8001b1a:	d100      	bne.n	8001b1e <__aeabi_dsub+0x2b2>
 8001b1c:	e174      	b.n	8001e08 <__aeabi_dsub+0x59c>
 8001b1e:	0022      	movs	r2, r4
 8001b20:	3a01      	subs	r2, #1
 8001b22:	2c01      	cmp	r4, #1
 8001b24:	d005      	beq.n	8001b32 <__aeabi_dsub+0x2c6>
 8001b26:	4c1e      	ldr	r4, [pc, #120]	; (8001ba0 <__aeabi_dsub+0x334>)
 8001b28:	45a4      	cmp	ip, r4
 8001b2a:	d100      	bne.n	8001b2e <__aeabi_dsub+0x2c2>
 8001b2c:	e094      	b.n	8001c58 <__aeabi_dsub+0x3ec>
 8001b2e:	4694      	mov	ip, r2
 8001b30:	e759      	b.n	80019e6 <__aeabi_dsub+0x17a>
 8001b32:	4448      	add	r0, r9
 8001b34:	4548      	cmp	r0, r9
 8001b36:	4192      	sbcs	r2, r2
 8001b38:	185b      	adds	r3, r3, r1
 8001b3a:	4698      	mov	r8, r3
 8001b3c:	0004      	movs	r4, r0
 8001b3e:	4252      	negs	r2, r2
 8001b40:	4490      	add	r8, r2
 8001b42:	4643      	mov	r3, r8
 8001b44:	2602      	movs	r6, #2
 8001b46:	021b      	lsls	r3, r3, #8
 8001b48:	d500      	bpl.n	8001b4c <__aeabi_dsub+0x2e0>
 8001b4a:	e0c4      	b.n	8001cd6 <__aeabi_dsub+0x46a>
 8001b4c:	3e01      	subs	r6, #1
 8001b4e:	0763      	lsls	r3, r4, #29
 8001b50:	d000      	beq.n	8001b54 <__aeabi_dsub+0x2e8>
 8001b52:	e711      	b.n	8001978 <__aeabi_dsub+0x10c>
 8001b54:	4643      	mov	r3, r8
 8001b56:	46b4      	mov	ip, r6
 8001b58:	0759      	lsls	r1, r3, #29
 8001b5a:	08e2      	lsrs	r2, r4, #3
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	08db      	lsrs	r3, r3, #3
 8001b60:	490f      	ldr	r1, [pc, #60]	; (8001ba0 <__aeabi_dsub+0x334>)
 8001b62:	458c      	cmp	ip, r1
 8001b64:	d040      	beq.n	8001be8 <__aeabi_dsub+0x37c>
 8001b66:	4661      	mov	r1, ip
 8001b68:	031b      	lsls	r3, r3, #12
 8001b6a:	0549      	lsls	r1, r1, #21
 8001b6c:	0b1b      	lsrs	r3, r3, #12
 8001b6e:	0d49      	lsrs	r1, r1, #21
 8001b70:	e720      	b.n	80019b4 <__aeabi_dsub+0x148>
 8001b72:	4301      	orrs	r1, r0
 8001b74:	000c      	movs	r4, r1
 8001b76:	1e61      	subs	r1, r4, #1
 8001b78:	418c      	sbcs	r4, r1
 8001b7a:	444c      	add	r4, r9
 8001b7c:	454c      	cmp	r4, r9
 8001b7e:	4192      	sbcs	r2, r2
 8001b80:	4252      	negs	r2, r2
 8001b82:	4690      	mov	r8, r2
 8001b84:	4498      	add	r8, r3
 8001b86:	4643      	mov	r3, r8
 8001b88:	021b      	lsls	r3, r3, #8
 8001b8a:	d5e0      	bpl.n	8001b4e <__aeabi_dsub+0x2e2>
 8001b8c:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <__aeabi_dsub+0x334>)
 8001b8e:	3601      	adds	r6, #1
 8001b90:	429e      	cmp	r6, r3
 8001b92:	d000      	beq.n	8001b96 <__aeabi_dsub+0x32a>
 8001b94:	e09f      	b.n	8001cd6 <__aeabi_dsub+0x46a>
 8001b96:	0031      	movs	r1, r6
 8001b98:	2300      	movs	r3, #0
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	e70a      	b.n	80019b4 <__aeabi_dsub+0x148>
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	000007ff 	.word	0x000007ff
 8001ba4:	ff7fffff 	.word	0xff7fffff
 8001ba8:	fffff801 	.word	0xfffff801
 8001bac:	000007fe 	.word	0x000007fe
 8001bb0:	2a00      	cmp	r2, #0
 8001bb2:	d100      	bne.n	8001bb6 <__aeabi_dsub+0x34a>
 8001bb4:	e160      	b.n	8001e78 <__aeabi_dsub+0x60c>
 8001bb6:	000a      	movs	r2, r1
 8001bb8:	4302      	orrs	r2, r0
 8001bba:	d04d      	beq.n	8001c58 <__aeabi_dsub+0x3ec>
 8001bbc:	464a      	mov	r2, r9
 8001bbe:	075c      	lsls	r4, r3, #29
 8001bc0:	08d2      	lsrs	r2, r2, #3
 8001bc2:	4322      	orrs	r2, r4
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	08db      	lsrs	r3, r3, #3
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	4223      	tst	r3, r4
 8001bcc:	d007      	beq.n	8001bde <__aeabi_dsub+0x372>
 8001bce:	08ce      	lsrs	r6, r1, #3
 8001bd0:	4226      	tst	r6, r4
 8001bd2:	d104      	bne.n	8001bde <__aeabi_dsub+0x372>
 8001bd4:	465d      	mov	r5, fp
 8001bd6:	0033      	movs	r3, r6
 8001bd8:	08c2      	lsrs	r2, r0, #3
 8001bda:	0749      	lsls	r1, r1, #29
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	0f51      	lsrs	r1, r2, #29
 8001be0:	00d2      	lsls	r2, r2, #3
 8001be2:	08d2      	lsrs	r2, r2, #3
 8001be4:	0749      	lsls	r1, r1, #29
 8001be6:	430a      	orrs	r2, r1
 8001be8:	0011      	movs	r1, r2
 8001bea:	4319      	orrs	r1, r3
 8001bec:	d100      	bne.n	8001bf0 <__aeabi_dsub+0x384>
 8001bee:	e1c8      	b.n	8001f82 <__aeabi_dsub+0x716>
 8001bf0:	2180      	movs	r1, #128	; 0x80
 8001bf2:	0309      	lsls	r1, r1, #12
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	031b      	lsls	r3, r3, #12
 8001bf8:	49d5      	ldr	r1, [pc, #852]	; (8001f50 <__aeabi_dsub+0x6e4>)
 8001bfa:	0b1b      	lsrs	r3, r3, #12
 8001bfc:	e6da      	b.n	80019b4 <__aeabi_dsub+0x148>
 8001bfe:	49d5      	ldr	r1, [pc, #852]	; (8001f54 <__aeabi_dsub+0x6e8>)
 8001c00:	1ab6      	subs	r6, r6, r2
 8001c02:	400b      	ands	r3, r1
 8001c04:	4698      	mov	r8, r3
 8001c06:	e6b5      	b.n	8001974 <__aeabi_dsub+0x108>
 8001c08:	0020      	movs	r0, r4
 8001c0a:	f000 fa45 	bl	8002098 <__clzsi2>
 8001c0e:	0002      	movs	r2, r0
 8001c10:	3218      	adds	r2, #24
 8001c12:	2a1f      	cmp	r2, #31
 8001c14:	dc00      	bgt.n	8001c18 <__aeabi_dsub+0x3ac>
 8001c16:	e68f      	b.n	8001938 <__aeabi_dsub+0xcc>
 8001c18:	0023      	movs	r3, r4
 8001c1a:	3808      	subs	r0, #8
 8001c1c:	4083      	lsls	r3, r0
 8001c1e:	2400      	movs	r4, #0
 8001c20:	e692      	b.n	8001948 <__aeabi_dsub+0xdc>
 8001c22:	4308      	orrs	r0, r1
 8001c24:	0002      	movs	r2, r0
 8001c26:	1e50      	subs	r0, r2, #1
 8001c28:	4182      	sbcs	r2, r0
 8001c2a:	e66d      	b.n	8001908 <__aeabi_dsub+0x9c>
 8001c2c:	4cca      	ldr	r4, [pc, #808]	; (8001f58 <__aeabi_dsub+0x6ec>)
 8001c2e:	1c72      	adds	r2, r6, #1
 8001c30:	4222      	tst	r2, r4
 8001c32:	d000      	beq.n	8001c36 <__aeabi_dsub+0x3ca>
 8001c34:	e0ad      	b.n	8001d92 <__aeabi_dsub+0x526>
 8001c36:	464a      	mov	r2, r9
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	2e00      	cmp	r6, #0
 8001c3c:	d1b8      	bne.n	8001bb0 <__aeabi_dsub+0x344>
 8001c3e:	2a00      	cmp	r2, #0
 8001c40:	d100      	bne.n	8001c44 <__aeabi_dsub+0x3d8>
 8001c42:	e158      	b.n	8001ef6 <__aeabi_dsub+0x68a>
 8001c44:	000a      	movs	r2, r1
 8001c46:	4302      	orrs	r2, r0
 8001c48:	d000      	beq.n	8001c4c <__aeabi_dsub+0x3e0>
 8001c4a:	e159      	b.n	8001f00 <__aeabi_dsub+0x694>
 8001c4c:	464a      	mov	r2, r9
 8001c4e:	0759      	lsls	r1, r3, #29
 8001c50:	08d2      	lsrs	r2, r2, #3
 8001c52:	430a      	orrs	r2, r1
 8001c54:	08db      	lsrs	r3, r3, #3
 8001c56:	e786      	b.n	8001b66 <__aeabi_dsub+0x2fa>
 8001c58:	464a      	mov	r2, r9
 8001c5a:	0759      	lsls	r1, r3, #29
 8001c5c:	08d2      	lsrs	r2, r2, #3
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	08db      	lsrs	r3, r3, #3
 8001c62:	e7c1      	b.n	8001be8 <__aeabi_dsub+0x37c>
 8001c64:	4dba      	ldr	r5, [pc, #744]	; (8001f50 <__aeabi_dsub+0x6e4>)
 8001c66:	42aa      	cmp	r2, r5
 8001c68:	d100      	bne.n	8001c6c <__aeabi_dsub+0x400>
 8001c6a:	e11e      	b.n	8001eaa <__aeabi_dsub+0x63e>
 8001c6c:	2580      	movs	r5, #128	; 0x80
 8001c6e:	042d      	lsls	r5, r5, #16
 8001c70:	432b      	orrs	r3, r5
 8001c72:	4664      	mov	r4, ip
 8001c74:	2c38      	cmp	r4, #56	; 0x38
 8001c76:	dc5d      	bgt.n	8001d34 <__aeabi_dsub+0x4c8>
 8001c78:	2c1f      	cmp	r4, #31
 8001c7a:	dd00      	ble.n	8001c7e <__aeabi_dsub+0x412>
 8001c7c:	e0d0      	b.n	8001e20 <__aeabi_dsub+0x5b4>
 8001c7e:	2520      	movs	r5, #32
 8001c80:	4667      	mov	r7, ip
 8001c82:	1b2d      	subs	r5, r5, r4
 8001c84:	464e      	mov	r6, r9
 8001c86:	001c      	movs	r4, r3
 8001c88:	40fe      	lsrs	r6, r7
 8001c8a:	40ac      	lsls	r4, r5
 8001c8c:	4334      	orrs	r4, r6
 8001c8e:	464e      	mov	r6, r9
 8001c90:	40ae      	lsls	r6, r5
 8001c92:	0035      	movs	r5, r6
 8001c94:	40fb      	lsrs	r3, r7
 8001c96:	1e6e      	subs	r6, r5, #1
 8001c98:	41b5      	sbcs	r5, r6
 8001c9a:	1ac9      	subs	r1, r1, r3
 8001c9c:	432c      	orrs	r4, r5
 8001c9e:	e04e      	b.n	8001d3e <__aeabi_dsub+0x4d2>
 8001ca0:	464a      	mov	r2, r9
 8001ca2:	1a14      	subs	r4, r2, r0
 8001ca4:	45a1      	cmp	r9, r4
 8001ca6:	4192      	sbcs	r2, r2
 8001ca8:	4252      	negs	r2, r2
 8001caa:	4690      	mov	r8, r2
 8001cac:	1a5f      	subs	r7, r3, r1
 8001cae:	003a      	movs	r2, r7
 8001cb0:	4647      	mov	r7, r8
 8001cb2:	1bd2      	subs	r2, r2, r7
 8001cb4:	4690      	mov	r8, r2
 8001cb6:	0212      	lsls	r2, r2, #8
 8001cb8:	d500      	bpl.n	8001cbc <__aeabi_dsub+0x450>
 8001cba:	e08b      	b.n	8001dd4 <__aeabi_dsub+0x568>
 8001cbc:	4642      	mov	r2, r8
 8001cbe:	4322      	orrs	r2, r4
 8001cc0:	d000      	beq.n	8001cc4 <__aeabi_dsub+0x458>
 8001cc2:	e630      	b.n	8001926 <__aeabi_dsub+0xba>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	2500      	movs	r5, #0
 8001cc8:	e74d      	b.n	8001b66 <__aeabi_dsub+0x2fa>
 8001cca:	464a      	mov	r2, r9
 8001ccc:	0759      	lsls	r1, r3, #29
 8001cce:	08d2      	lsrs	r2, r2, #3
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	08db      	lsrs	r3, r3, #3
 8001cd4:	e744      	b.n	8001b60 <__aeabi_dsub+0x2f4>
 8001cd6:	4642      	mov	r2, r8
 8001cd8:	4b9e      	ldr	r3, [pc, #632]	; (8001f54 <__aeabi_dsub+0x6e8>)
 8001cda:	0861      	lsrs	r1, r4, #1
 8001cdc:	401a      	ands	r2, r3
 8001cde:	0013      	movs	r3, r2
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	4014      	ands	r4, r2
 8001ce4:	430c      	orrs	r4, r1
 8001ce6:	07da      	lsls	r2, r3, #31
 8001ce8:	085b      	lsrs	r3, r3, #1
 8001cea:	4698      	mov	r8, r3
 8001cec:	4314      	orrs	r4, r2
 8001cee:	e641      	b.n	8001974 <__aeabi_dsub+0x108>
 8001cf0:	001a      	movs	r2, r3
 8001cf2:	3e1f      	subs	r6, #31
 8001cf4:	40f2      	lsrs	r2, r6
 8001cf6:	0016      	movs	r6, r2
 8001cf8:	2920      	cmp	r1, #32
 8001cfa:	d003      	beq.n	8001d04 <__aeabi_dsub+0x498>
 8001cfc:	2240      	movs	r2, #64	; 0x40
 8001cfe:	1a51      	subs	r1, r2, r1
 8001d00:	408b      	lsls	r3, r1
 8001d02:	431c      	orrs	r4, r3
 8001d04:	1e62      	subs	r2, r4, #1
 8001d06:	4194      	sbcs	r4, r2
 8001d08:	2300      	movs	r3, #0
 8001d0a:	4334      	orrs	r4, r6
 8001d0c:	4698      	mov	r8, r3
 8001d0e:	2600      	movs	r6, #0
 8001d10:	e71d      	b.n	8001b4e <__aeabi_dsub+0x2e2>
 8001d12:	000c      	movs	r4, r1
 8001d14:	3a20      	subs	r2, #32
 8001d16:	40d4      	lsrs	r4, r2
 8001d18:	0022      	movs	r2, r4
 8001d1a:	4664      	mov	r4, ip
 8001d1c:	2c20      	cmp	r4, #32
 8001d1e:	d004      	beq.n	8001d2a <__aeabi_dsub+0x4be>
 8001d20:	2740      	movs	r7, #64	; 0x40
 8001d22:	1b3f      	subs	r7, r7, r4
 8001d24:	40b9      	lsls	r1, r7
 8001d26:	4308      	orrs	r0, r1
 8001d28:	4680      	mov	r8, r0
 8001d2a:	4644      	mov	r4, r8
 8001d2c:	1e61      	subs	r1, r4, #1
 8001d2e:	418c      	sbcs	r4, r1
 8001d30:	4322      	orrs	r2, r4
 8001d32:	e5e9      	b.n	8001908 <__aeabi_dsub+0x9c>
 8001d34:	464c      	mov	r4, r9
 8001d36:	4323      	orrs	r3, r4
 8001d38:	001c      	movs	r4, r3
 8001d3a:	1e63      	subs	r3, r4, #1
 8001d3c:	419c      	sbcs	r4, r3
 8001d3e:	1b04      	subs	r4, r0, r4
 8001d40:	42a0      	cmp	r0, r4
 8001d42:	419b      	sbcs	r3, r3
 8001d44:	425b      	negs	r3, r3
 8001d46:	1acb      	subs	r3, r1, r3
 8001d48:	4698      	mov	r8, r3
 8001d4a:	465d      	mov	r5, fp
 8001d4c:	0016      	movs	r6, r2
 8001d4e:	e5e2      	b.n	8001916 <__aeabi_dsub+0xaa>
 8001d50:	464e      	mov	r6, r9
 8001d52:	431e      	orrs	r6, r3
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dsub+0x4ec>
 8001d56:	e0ae      	b.n	8001eb6 <__aeabi_dsub+0x64a>
 8001d58:	1e66      	subs	r6, r4, #1
 8001d5a:	2c01      	cmp	r4, #1
 8001d5c:	d100      	bne.n	8001d60 <__aeabi_dsub+0x4f4>
 8001d5e:	e0fd      	b.n	8001f5c <__aeabi_dsub+0x6f0>
 8001d60:	4f7b      	ldr	r7, [pc, #492]	; (8001f50 <__aeabi_dsub+0x6e4>)
 8001d62:	42bc      	cmp	r4, r7
 8001d64:	d100      	bne.n	8001d68 <__aeabi_dsub+0x4fc>
 8001d66:	e107      	b.n	8001f78 <__aeabi_dsub+0x70c>
 8001d68:	46b4      	mov	ip, r6
 8001d6a:	e69b      	b.n	8001aa4 <__aeabi_dsub+0x238>
 8001d6c:	4664      	mov	r4, ip
 8001d6e:	2220      	movs	r2, #32
 8001d70:	1b12      	subs	r2, r2, r4
 8001d72:	000c      	movs	r4, r1
 8001d74:	4094      	lsls	r4, r2
 8001d76:	0007      	movs	r7, r0
 8001d78:	4090      	lsls	r0, r2
 8001d7a:	46a0      	mov	r8, r4
 8001d7c:	4664      	mov	r4, ip
 8001d7e:	1e42      	subs	r2, r0, #1
 8001d80:	4190      	sbcs	r0, r2
 8001d82:	4662      	mov	r2, ip
 8001d84:	40e7      	lsrs	r7, r4
 8001d86:	4644      	mov	r4, r8
 8001d88:	40d1      	lsrs	r1, r2
 8001d8a:	433c      	orrs	r4, r7
 8001d8c:	4304      	orrs	r4, r0
 8001d8e:	185b      	adds	r3, r3, r1
 8001d90:	e6f3      	b.n	8001b7a <__aeabi_dsub+0x30e>
 8001d92:	4c6f      	ldr	r4, [pc, #444]	; (8001f50 <__aeabi_dsub+0x6e4>)
 8001d94:	42a2      	cmp	r2, r4
 8001d96:	d100      	bne.n	8001d9a <__aeabi_dsub+0x52e>
 8001d98:	e0d5      	b.n	8001f46 <__aeabi_dsub+0x6da>
 8001d9a:	4448      	add	r0, r9
 8001d9c:	185b      	adds	r3, r3, r1
 8001d9e:	4548      	cmp	r0, r9
 8001da0:	4189      	sbcs	r1, r1
 8001da2:	4249      	negs	r1, r1
 8001da4:	185b      	adds	r3, r3, r1
 8001da6:	07dc      	lsls	r4, r3, #31
 8001da8:	0840      	lsrs	r0, r0, #1
 8001daa:	085b      	lsrs	r3, r3, #1
 8001dac:	4698      	mov	r8, r3
 8001dae:	0016      	movs	r6, r2
 8001db0:	4304      	orrs	r4, r0
 8001db2:	e6cc      	b.n	8001b4e <__aeabi_dsub+0x2e2>
 8001db4:	2a00      	cmp	r2, #0
 8001db6:	d000      	beq.n	8001dba <__aeabi_dsub+0x54e>
 8001db8:	e082      	b.n	8001ec0 <__aeabi_dsub+0x654>
 8001dba:	000a      	movs	r2, r1
 8001dbc:	4302      	orrs	r2, r0
 8001dbe:	d140      	bne.n	8001e42 <__aeabi_dsub+0x5d6>
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	2500      	movs	r5, #0
 8001dc4:	031b      	lsls	r3, r3, #12
 8001dc6:	e713      	b.n	8001bf0 <__aeabi_dsub+0x384>
 8001dc8:	074b      	lsls	r3, r1, #29
 8001dca:	08c2      	lsrs	r2, r0, #3
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	465d      	mov	r5, fp
 8001dd0:	08cb      	lsrs	r3, r1, #3
 8001dd2:	e6c5      	b.n	8001b60 <__aeabi_dsub+0x2f4>
 8001dd4:	464a      	mov	r2, r9
 8001dd6:	1a84      	subs	r4, r0, r2
 8001dd8:	42a0      	cmp	r0, r4
 8001dda:	4192      	sbcs	r2, r2
 8001ddc:	1acb      	subs	r3, r1, r3
 8001dde:	4252      	negs	r2, r2
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	4698      	mov	r8, r3
 8001de4:	465d      	mov	r5, fp
 8001de6:	e59e      	b.n	8001926 <__aeabi_dsub+0xba>
 8001de8:	464a      	mov	r2, r9
 8001dea:	0759      	lsls	r1, r3, #29
 8001dec:	08d2      	lsrs	r2, r2, #3
 8001dee:	430a      	orrs	r2, r1
 8001df0:	08db      	lsrs	r3, r3, #3
 8001df2:	e6f9      	b.n	8001be8 <__aeabi_dsub+0x37c>
 8001df4:	464a      	mov	r2, r9
 8001df6:	1a14      	subs	r4, r2, r0
 8001df8:	45a1      	cmp	r9, r4
 8001dfa:	4192      	sbcs	r2, r2
 8001dfc:	1a5b      	subs	r3, r3, r1
 8001dfe:	4252      	negs	r2, r2
 8001e00:	1a9b      	subs	r3, r3, r2
 8001e02:	4698      	mov	r8, r3
 8001e04:	2601      	movs	r6, #1
 8001e06:	e586      	b.n	8001916 <__aeabi_dsub+0xaa>
 8001e08:	464a      	mov	r2, r9
 8001e0a:	0759      	lsls	r1, r3, #29
 8001e0c:	08d2      	lsrs	r2, r2, #3
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	08db      	lsrs	r3, r3, #3
 8001e12:	e6a5      	b.n	8001b60 <__aeabi_dsub+0x2f4>
 8001e14:	464c      	mov	r4, r9
 8001e16:	4323      	orrs	r3, r4
 8001e18:	001c      	movs	r4, r3
 8001e1a:	1e63      	subs	r3, r4, #1
 8001e1c:	419c      	sbcs	r4, r3
 8001e1e:	e65b      	b.n	8001ad8 <__aeabi_dsub+0x26c>
 8001e20:	4665      	mov	r5, ip
 8001e22:	001e      	movs	r6, r3
 8001e24:	3d20      	subs	r5, #32
 8001e26:	40ee      	lsrs	r6, r5
 8001e28:	2c20      	cmp	r4, #32
 8001e2a:	d005      	beq.n	8001e38 <__aeabi_dsub+0x5cc>
 8001e2c:	2540      	movs	r5, #64	; 0x40
 8001e2e:	1b2d      	subs	r5, r5, r4
 8001e30:	40ab      	lsls	r3, r5
 8001e32:	464c      	mov	r4, r9
 8001e34:	431c      	orrs	r4, r3
 8001e36:	46a2      	mov	sl, r4
 8001e38:	4654      	mov	r4, sl
 8001e3a:	1e63      	subs	r3, r4, #1
 8001e3c:	419c      	sbcs	r4, r3
 8001e3e:	4334      	orrs	r4, r6
 8001e40:	e77d      	b.n	8001d3e <__aeabi_dsub+0x4d2>
 8001e42:	074b      	lsls	r3, r1, #29
 8001e44:	08c2      	lsrs	r2, r0, #3
 8001e46:	431a      	orrs	r2, r3
 8001e48:	465d      	mov	r5, fp
 8001e4a:	08cb      	lsrs	r3, r1, #3
 8001e4c:	e6cc      	b.n	8001be8 <__aeabi_dsub+0x37c>
 8001e4e:	000a      	movs	r2, r1
 8001e50:	4302      	orrs	r2, r0
 8001e52:	d100      	bne.n	8001e56 <__aeabi_dsub+0x5ea>
 8001e54:	e736      	b.n	8001cc4 <__aeabi_dsub+0x458>
 8001e56:	074b      	lsls	r3, r1, #29
 8001e58:	08c2      	lsrs	r2, r0, #3
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	465d      	mov	r5, fp
 8001e5e:	08cb      	lsrs	r3, r1, #3
 8001e60:	e681      	b.n	8001b66 <__aeabi_dsub+0x2fa>
 8001e62:	464a      	mov	r2, r9
 8001e64:	1a84      	subs	r4, r0, r2
 8001e66:	42a0      	cmp	r0, r4
 8001e68:	4192      	sbcs	r2, r2
 8001e6a:	1acb      	subs	r3, r1, r3
 8001e6c:	4252      	negs	r2, r2
 8001e6e:	1a9b      	subs	r3, r3, r2
 8001e70:	4698      	mov	r8, r3
 8001e72:	465d      	mov	r5, fp
 8001e74:	2601      	movs	r6, #1
 8001e76:	e54e      	b.n	8001916 <__aeabi_dsub+0xaa>
 8001e78:	074b      	lsls	r3, r1, #29
 8001e7a:	08c2      	lsrs	r2, r0, #3
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	08cb      	lsrs	r3, r1, #3
 8001e80:	e6b2      	b.n	8001be8 <__aeabi_dsub+0x37c>
 8001e82:	464a      	mov	r2, r9
 8001e84:	1a14      	subs	r4, r2, r0
 8001e86:	45a1      	cmp	r9, r4
 8001e88:	4192      	sbcs	r2, r2
 8001e8a:	1a5f      	subs	r7, r3, r1
 8001e8c:	4252      	negs	r2, r2
 8001e8e:	1aba      	subs	r2, r7, r2
 8001e90:	4690      	mov	r8, r2
 8001e92:	0212      	lsls	r2, r2, #8
 8001e94:	d56b      	bpl.n	8001f6e <__aeabi_dsub+0x702>
 8001e96:	464a      	mov	r2, r9
 8001e98:	1a84      	subs	r4, r0, r2
 8001e9a:	42a0      	cmp	r0, r4
 8001e9c:	4192      	sbcs	r2, r2
 8001e9e:	1acb      	subs	r3, r1, r3
 8001ea0:	4252      	negs	r2, r2
 8001ea2:	1a9b      	subs	r3, r3, r2
 8001ea4:	4698      	mov	r8, r3
 8001ea6:	465d      	mov	r5, fp
 8001ea8:	e564      	b.n	8001974 <__aeabi_dsub+0x108>
 8001eaa:	074b      	lsls	r3, r1, #29
 8001eac:	08c2      	lsrs	r2, r0, #3
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	465d      	mov	r5, fp
 8001eb2:	08cb      	lsrs	r3, r1, #3
 8001eb4:	e698      	b.n	8001be8 <__aeabi_dsub+0x37c>
 8001eb6:	074b      	lsls	r3, r1, #29
 8001eb8:	08c2      	lsrs	r2, r0, #3
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	08cb      	lsrs	r3, r1, #3
 8001ebe:	e64f      	b.n	8001b60 <__aeabi_dsub+0x2f4>
 8001ec0:	000a      	movs	r2, r1
 8001ec2:	4302      	orrs	r2, r0
 8001ec4:	d090      	beq.n	8001de8 <__aeabi_dsub+0x57c>
 8001ec6:	464a      	mov	r2, r9
 8001ec8:	075c      	lsls	r4, r3, #29
 8001eca:	08d2      	lsrs	r2, r2, #3
 8001ecc:	4314      	orrs	r4, r2
 8001ece:	2280      	movs	r2, #128	; 0x80
 8001ed0:	08db      	lsrs	r3, r3, #3
 8001ed2:	0312      	lsls	r2, r2, #12
 8001ed4:	4213      	tst	r3, r2
 8001ed6:	d008      	beq.n	8001eea <__aeabi_dsub+0x67e>
 8001ed8:	08ce      	lsrs	r6, r1, #3
 8001eda:	4216      	tst	r6, r2
 8001edc:	d105      	bne.n	8001eea <__aeabi_dsub+0x67e>
 8001ede:	08c0      	lsrs	r0, r0, #3
 8001ee0:	0749      	lsls	r1, r1, #29
 8001ee2:	4308      	orrs	r0, r1
 8001ee4:	0004      	movs	r4, r0
 8001ee6:	465d      	mov	r5, fp
 8001ee8:	0033      	movs	r3, r6
 8001eea:	0f61      	lsrs	r1, r4, #29
 8001eec:	00e2      	lsls	r2, r4, #3
 8001eee:	0749      	lsls	r1, r1, #29
 8001ef0:	08d2      	lsrs	r2, r2, #3
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	e678      	b.n	8001be8 <__aeabi_dsub+0x37c>
 8001ef6:	074b      	lsls	r3, r1, #29
 8001ef8:	08c2      	lsrs	r2, r0, #3
 8001efa:	431a      	orrs	r2, r3
 8001efc:	08cb      	lsrs	r3, r1, #3
 8001efe:	e632      	b.n	8001b66 <__aeabi_dsub+0x2fa>
 8001f00:	4448      	add	r0, r9
 8001f02:	185b      	adds	r3, r3, r1
 8001f04:	4548      	cmp	r0, r9
 8001f06:	4192      	sbcs	r2, r2
 8001f08:	4698      	mov	r8, r3
 8001f0a:	4252      	negs	r2, r2
 8001f0c:	4490      	add	r8, r2
 8001f0e:	4643      	mov	r3, r8
 8001f10:	0004      	movs	r4, r0
 8001f12:	021b      	lsls	r3, r3, #8
 8001f14:	d400      	bmi.n	8001f18 <__aeabi_dsub+0x6ac>
 8001f16:	e61a      	b.n	8001b4e <__aeabi_dsub+0x2e2>
 8001f18:	4642      	mov	r2, r8
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <__aeabi_dsub+0x6e8>)
 8001f1c:	2601      	movs	r6, #1
 8001f1e:	401a      	ands	r2, r3
 8001f20:	4690      	mov	r8, r2
 8001f22:	e614      	b.n	8001b4e <__aeabi_dsub+0x2e2>
 8001f24:	4666      	mov	r6, ip
 8001f26:	001f      	movs	r7, r3
 8001f28:	3e20      	subs	r6, #32
 8001f2a:	40f7      	lsrs	r7, r6
 8001f2c:	2c20      	cmp	r4, #32
 8001f2e:	d005      	beq.n	8001f3c <__aeabi_dsub+0x6d0>
 8001f30:	2640      	movs	r6, #64	; 0x40
 8001f32:	1b36      	subs	r6, r6, r4
 8001f34:	40b3      	lsls	r3, r6
 8001f36:	464c      	mov	r4, r9
 8001f38:	431c      	orrs	r4, r3
 8001f3a:	46a2      	mov	sl, r4
 8001f3c:	4654      	mov	r4, sl
 8001f3e:	1e63      	subs	r3, r4, #1
 8001f40:	419c      	sbcs	r4, r3
 8001f42:	433c      	orrs	r4, r7
 8001f44:	e5c8      	b.n	8001ad8 <__aeabi_dsub+0x26c>
 8001f46:	0011      	movs	r1, r2
 8001f48:	2300      	movs	r3, #0
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	e532      	b.n	80019b4 <__aeabi_dsub+0x148>
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	000007ff 	.word	0x000007ff
 8001f54:	ff7fffff 	.word	0xff7fffff
 8001f58:	000007fe 	.word	0x000007fe
 8001f5c:	464a      	mov	r2, r9
 8001f5e:	1814      	adds	r4, r2, r0
 8001f60:	4284      	cmp	r4, r0
 8001f62:	4192      	sbcs	r2, r2
 8001f64:	185b      	adds	r3, r3, r1
 8001f66:	4698      	mov	r8, r3
 8001f68:	4252      	negs	r2, r2
 8001f6a:	4490      	add	r8, r2
 8001f6c:	e5e9      	b.n	8001b42 <__aeabi_dsub+0x2d6>
 8001f6e:	4642      	mov	r2, r8
 8001f70:	4322      	orrs	r2, r4
 8001f72:	d100      	bne.n	8001f76 <__aeabi_dsub+0x70a>
 8001f74:	e6a6      	b.n	8001cc4 <__aeabi_dsub+0x458>
 8001f76:	e5ea      	b.n	8001b4e <__aeabi_dsub+0x2e2>
 8001f78:	074b      	lsls	r3, r1, #29
 8001f7a:	08c2      	lsrs	r2, r0, #3
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	08cb      	lsrs	r3, r1, #3
 8001f80:	e632      	b.n	8001be8 <__aeabi_dsub+0x37c>
 8001f82:	2200      	movs	r2, #0
 8001f84:	4901      	ldr	r1, [pc, #4]	; (8001f8c <__aeabi_dsub+0x720>)
 8001f86:	0013      	movs	r3, r2
 8001f88:	e514      	b.n	80019b4 <__aeabi_dsub+0x148>
 8001f8a:	46c0      	nop			; (mov r8, r8)
 8001f8c:	000007ff 	.word	0x000007ff

08001f90 <__aeabi_dcmpun>:
 8001f90:	b570      	push	{r4, r5, r6, lr}
 8001f92:	0005      	movs	r5, r0
 8001f94:	480c      	ldr	r0, [pc, #48]	; (8001fc8 <__aeabi_dcmpun+0x38>)
 8001f96:	030c      	lsls	r4, r1, #12
 8001f98:	0016      	movs	r6, r2
 8001f9a:	0049      	lsls	r1, r1, #1
 8001f9c:	031a      	lsls	r2, r3, #12
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	0b24      	lsrs	r4, r4, #12
 8001fa2:	0d49      	lsrs	r1, r1, #21
 8001fa4:	0b12      	lsrs	r2, r2, #12
 8001fa6:	0d5b      	lsrs	r3, r3, #21
 8001fa8:	4281      	cmp	r1, r0
 8001faa:	d008      	beq.n	8001fbe <__aeabi_dcmpun+0x2e>
 8001fac:	4906      	ldr	r1, [pc, #24]	; (8001fc8 <__aeabi_dcmpun+0x38>)
 8001fae:	2000      	movs	r0, #0
 8001fb0:	428b      	cmp	r3, r1
 8001fb2:	d103      	bne.n	8001fbc <__aeabi_dcmpun+0x2c>
 8001fb4:	4332      	orrs	r2, r6
 8001fb6:	0010      	movs	r0, r2
 8001fb8:	1e42      	subs	r2, r0, #1
 8001fba:	4190      	sbcs	r0, r2
 8001fbc:	bd70      	pop	{r4, r5, r6, pc}
 8001fbe:	2001      	movs	r0, #1
 8001fc0:	432c      	orrs	r4, r5
 8001fc2:	d1fb      	bne.n	8001fbc <__aeabi_dcmpun+0x2c>
 8001fc4:	e7f2      	b.n	8001fac <__aeabi_dcmpun+0x1c>
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	000007ff 	.word	0x000007ff

08001fcc <__aeabi_d2iz>:
 8001fcc:	000a      	movs	r2, r1
 8001fce:	b530      	push	{r4, r5, lr}
 8001fd0:	4c13      	ldr	r4, [pc, #76]	; (8002020 <__aeabi_d2iz+0x54>)
 8001fd2:	0053      	lsls	r3, r2, #1
 8001fd4:	0309      	lsls	r1, r1, #12
 8001fd6:	0005      	movs	r5, r0
 8001fd8:	0b09      	lsrs	r1, r1, #12
 8001fda:	2000      	movs	r0, #0
 8001fdc:	0d5b      	lsrs	r3, r3, #21
 8001fde:	0fd2      	lsrs	r2, r2, #31
 8001fe0:	42a3      	cmp	r3, r4
 8001fe2:	dd04      	ble.n	8001fee <__aeabi_d2iz+0x22>
 8001fe4:	480f      	ldr	r0, [pc, #60]	; (8002024 <__aeabi_d2iz+0x58>)
 8001fe6:	4283      	cmp	r3, r0
 8001fe8:	dd02      	ble.n	8001ff0 <__aeabi_d2iz+0x24>
 8001fea:	4b0f      	ldr	r3, [pc, #60]	; (8002028 <__aeabi_d2iz+0x5c>)
 8001fec:	18d0      	adds	r0, r2, r3
 8001fee:	bd30      	pop	{r4, r5, pc}
 8001ff0:	2080      	movs	r0, #128	; 0x80
 8001ff2:	0340      	lsls	r0, r0, #13
 8001ff4:	4301      	orrs	r1, r0
 8001ff6:	480d      	ldr	r0, [pc, #52]	; (800202c <__aeabi_d2iz+0x60>)
 8001ff8:	1ac0      	subs	r0, r0, r3
 8001ffa:	281f      	cmp	r0, #31
 8001ffc:	dd08      	ble.n	8002010 <__aeabi_d2iz+0x44>
 8001ffe:	480c      	ldr	r0, [pc, #48]	; (8002030 <__aeabi_d2iz+0x64>)
 8002000:	1ac3      	subs	r3, r0, r3
 8002002:	40d9      	lsrs	r1, r3
 8002004:	000b      	movs	r3, r1
 8002006:	4258      	negs	r0, r3
 8002008:	2a00      	cmp	r2, #0
 800200a:	d1f0      	bne.n	8001fee <__aeabi_d2iz+0x22>
 800200c:	0018      	movs	r0, r3
 800200e:	e7ee      	b.n	8001fee <__aeabi_d2iz+0x22>
 8002010:	4c08      	ldr	r4, [pc, #32]	; (8002034 <__aeabi_d2iz+0x68>)
 8002012:	40c5      	lsrs	r5, r0
 8002014:	46a4      	mov	ip, r4
 8002016:	4463      	add	r3, ip
 8002018:	4099      	lsls	r1, r3
 800201a:	000b      	movs	r3, r1
 800201c:	432b      	orrs	r3, r5
 800201e:	e7f2      	b.n	8002006 <__aeabi_d2iz+0x3a>
 8002020:	000003fe 	.word	0x000003fe
 8002024:	0000041d 	.word	0x0000041d
 8002028:	7fffffff 	.word	0x7fffffff
 800202c:	00000433 	.word	0x00000433
 8002030:	00000413 	.word	0x00000413
 8002034:	fffffbed 	.word	0xfffffbed

08002038 <__aeabi_i2d>:
 8002038:	b570      	push	{r4, r5, r6, lr}
 800203a:	2800      	cmp	r0, #0
 800203c:	d016      	beq.n	800206c <__aeabi_i2d+0x34>
 800203e:	17c3      	asrs	r3, r0, #31
 8002040:	18c5      	adds	r5, r0, r3
 8002042:	405d      	eors	r5, r3
 8002044:	0fc4      	lsrs	r4, r0, #31
 8002046:	0028      	movs	r0, r5
 8002048:	f000 f826 	bl	8002098 <__clzsi2>
 800204c:	4a11      	ldr	r2, [pc, #68]	; (8002094 <__aeabi_i2d+0x5c>)
 800204e:	1a12      	subs	r2, r2, r0
 8002050:	280a      	cmp	r0, #10
 8002052:	dc16      	bgt.n	8002082 <__aeabi_i2d+0x4a>
 8002054:	0003      	movs	r3, r0
 8002056:	002e      	movs	r6, r5
 8002058:	3315      	adds	r3, #21
 800205a:	409e      	lsls	r6, r3
 800205c:	230b      	movs	r3, #11
 800205e:	1a18      	subs	r0, r3, r0
 8002060:	40c5      	lsrs	r5, r0
 8002062:	0553      	lsls	r3, r2, #21
 8002064:	032d      	lsls	r5, r5, #12
 8002066:	0b2d      	lsrs	r5, r5, #12
 8002068:	0d5b      	lsrs	r3, r3, #21
 800206a:	e003      	b.n	8002074 <__aeabi_i2d+0x3c>
 800206c:	2400      	movs	r4, #0
 800206e:	2300      	movs	r3, #0
 8002070:	2500      	movs	r5, #0
 8002072:	2600      	movs	r6, #0
 8002074:	051b      	lsls	r3, r3, #20
 8002076:	432b      	orrs	r3, r5
 8002078:	07e4      	lsls	r4, r4, #31
 800207a:	4323      	orrs	r3, r4
 800207c:	0030      	movs	r0, r6
 800207e:	0019      	movs	r1, r3
 8002080:	bd70      	pop	{r4, r5, r6, pc}
 8002082:	380b      	subs	r0, #11
 8002084:	4085      	lsls	r5, r0
 8002086:	0553      	lsls	r3, r2, #21
 8002088:	032d      	lsls	r5, r5, #12
 800208a:	2600      	movs	r6, #0
 800208c:	0b2d      	lsrs	r5, r5, #12
 800208e:	0d5b      	lsrs	r3, r3, #21
 8002090:	e7f0      	b.n	8002074 <__aeabi_i2d+0x3c>
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	0000041e 	.word	0x0000041e

08002098 <__clzsi2>:
 8002098:	211c      	movs	r1, #28
 800209a:	2301      	movs	r3, #1
 800209c:	041b      	lsls	r3, r3, #16
 800209e:	4298      	cmp	r0, r3
 80020a0:	d301      	bcc.n	80020a6 <__clzsi2+0xe>
 80020a2:	0c00      	lsrs	r0, r0, #16
 80020a4:	3910      	subs	r1, #16
 80020a6:	0a1b      	lsrs	r3, r3, #8
 80020a8:	4298      	cmp	r0, r3
 80020aa:	d301      	bcc.n	80020b0 <__clzsi2+0x18>
 80020ac:	0a00      	lsrs	r0, r0, #8
 80020ae:	3908      	subs	r1, #8
 80020b0:	091b      	lsrs	r3, r3, #4
 80020b2:	4298      	cmp	r0, r3
 80020b4:	d301      	bcc.n	80020ba <__clzsi2+0x22>
 80020b6:	0900      	lsrs	r0, r0, #4
 80020b8:	3904      	subs	r1, #4
 80020ba:	a202      	add	r2, pc, #8	; (adr r2, 80020c4 <__clzsi2+0x2c>)
 80020bc:	5c10      	ldrb	r0, [r2, r0]
 80020be:	1840      	adds	r0, r0, r1
 80020c0:	4770      	bx	lr
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	02020304 	.word	0x02020304
 80020c8:	01010101 	.word	0x01010101
	...

080020d4 <Init_LCD>:

uint8_t Helper_Array[8][5];

void Init_LCD()

{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af02      	add	r7, sp, #8

    HAL_GPIO_WritePin(GPIOA, RESET_Pin, GPIO_PIN_SET); // make LCD_RST high to start LCD module
 80020da:	23a0      	movs	r3, #160	; 0xa0
 80020dc:	05db      	lsls	r3, r3, #23
 80020de:	2201      	movs	r2, #1
 80020e0:	2110      	movs	r1, #16
 80020e2:	0018      	movs	r0, r3
 80020e4:	f000 ffd4 	bl	8003090 <HAL_GPIO_WritePin>

    HAL_Delay(60);
 80020e8:	203c      	movs	r0, #60	; 0x3c
 80020ea:	f000 fd7f 	bl	8002bec <HAL_Delay>

    halstatus = HAL_I2C_IsDeviceReady(&hi2c1, LCD_ADDRESS, 2, 100);
 80020ee:	4857      	ldr	r0, [pc, #348]	; (800224c <Init_LCD+0x178>)
 80020f0:	2364      	movs	r3, #100	; 0x64
 80020f2:	2202      	movs	r2, #2
 80020f4:	2178      	movs	r1, #120	; 0x78
 80020f6:	f001 f987 	bl	8003408 <HAL_I2C_IsDeviceReady>
 80020fa:	0003      	movs	r3, r0
 80020fc:	001a      	movs	r2, r3
 80020fe:	4b54      	ldr	r3, [pc, #336]	; (8002250 <Init_LCD+0x17c>)
 8002100:	701a      	strb	r2, [r3, #0]

    commands[1] = 0x38;
 8002102:	4b54      	ldr	r3, [pc, #336]	; (8002254 <Init_LCD+0x180>)
 8002104:	2238      	movs	r2, #56	; 0x38
 8002106:	705a      	strb	r2, [r3, #1]

    halstatus = HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, commands, 2, 100);
 8002108:	4a52      	ldr	r2, [pc, #328]	; (8002254 <Init_LCD+0x180>)
 800210a:	4850      	ldr	r0, [pc, #320]	; (800224c <Init_LCD+0x178>)
 800210c:	2364      	movs	r3, #100	; 0x64
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	2302      	movs	r3, #2
 8002112:	2178      	movs	r1, #120	; 0x78
 8002114:	f001 f870 	bl	80031f8 <HAL_I2C_Master_Transmit>
 8002118:	0003      	movs	r3, r0
 800211a:	001a      	movs	r2, r3
 800211c:	4b4c      	ldr	r3, [pc, #304]	; (8002250 <Init_LCD+0x17c>)
 800211e:	701a      	strb	r2, [r3, #0]

    HAL_Delay(60);
 8002120:	203c      	movs	r0, #60	; 0x3c
 8002122:	f000 fd63 	bl	8002bec <HAL_Delay>

    commands[1] = 0x39;
 8002126:	4b4b      	ldr	r3, [pc, #300]	; (8002254 <Init_LCD+0x180>)
 8002128:	2239      	movs	r2, #57	; 0x39
 800212a:	705a      	strb	r2, [r3, #1]

    halstatus = HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, commands, 2, 100);
 800212c:	4a49      	ldr	r2, [pc, #292]	; (8002254 <Init_LCD+0x180>)
 800212e:	4847      	ldr	r0, [pc, #284]	; (800224c <Init_LCD+0x178>)
 8002130:	2364      	movs	r3, #100	; 0x64
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	2302      	movs	r3, #2
 8002136:	2178      	movs	r1, #120	; 0x78
 8002138:	f001 f85e 	bl	80031f8 <HAL_I2C_Master_Transmit>
 800213c:	0003      	movs	r3, r0
 800213e:	001a      	movs	r2, r3
 8002140:	4b43      	ldr	r3, [pc, #268]	; (8002250 <Init_LCD+0x17c>)
 8002142:	701a      	strb	r2, [r3, #0]

    HAL_Delay(60);
 8002144:	203c      	movs	r0, #60	; 0x3c
 8002146:	f000 fd51 	bl	8002bec <HAL_Delay>

    commands[1] = 0x14;
 800214a:	4b42      	ldr	r3, [pc, #264]	; (8002254 <Init_LCD+0x180>)
 800214c:	2214      	movs	r2, #20
 800214e:	705a      	strb	r2, [r3, #1]

    halstatus = HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, commands, 2, 100);
 8002150:	4a40      	ldr	r2, [pc, #256]	; (8002254 <Init_LCD+0x180>)
 8002152:	483e      	ldr	r0, [pc, #248]	; (800224c <Init_LCD+0x178>)
 8002154:	2364      	movs	r3, #100	; 0x64
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	2302      	movs	r3, #2
 800215a:	2178      	movs	r1, #120	; 0x78
 800215c:	f001 f84c 	bl	80031f8 <HAL_I2C_Master_Transmit>
 8002160:	0003      	movs	r3, r0
 8002162:	001a      	movs	r2, r3
 8002164:	4b3a      	ldr	r3, [pc, #232]	; (8002250 <Init_LCD+0x17c>)
 8002166:	701a      	strb	r2, [r3, #0]

    HAL_Delay(60);
 8002168:	203c      	movs	r0, #60	; 0x3c
 800216a:	f000 fd3f 	bl	8002bec <HAL_Delay>

    commands[1] = 0x78;
 800216e:	4b39      	ldr	r3, [pc, #228]	; (8002254 <Init_LCD+0x180>)
 8002170:	2278      	movs	r2, #120	; 0x78
 8002172:	705a      	strb	r2, [r3, #1]

    halstatus = HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, commands, 2, 100);
 8002174:	4a37      	ldr	r2, [pc, #220]	; (8002254 <Init_LCD+0x180>)
 8002176:	4835      	ldr	r0, [pc, #212]	; (800224c <Init_LCD+0x178>)
 8002178:	2364      	movs	r3, #100	; 0x64
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	2302      	movs	r3, #2
 800217e:	2178      	movs	r1, #120	; 0x78
 8002180:	f001 f83a 	bl	80031f8 <HAL_I2C_Master_Transmit>
 8002184:	0003      	movs	r3, r0
 8002186:	001a      	movs	r2, r3
 8002188:	4b31      	ldr	r3, [pc, #196]	; (8002250 <Init_LCD+0x17c>)
 800218a:	701a      	strb	r2, [r3, #0]

    HAL_Delay(60);
 800218c:	203c      	movs	r0, #60	; 0x3c
 800218e:	f000 fd2d 	bl	8002bec <HAL_Delay>

    commands[1] = 0x5e;
 8002192:	4b30      	ldr	r3, [pc, #192]	; (8002254 <Init_LCD+0x180>)
 8002194:	225e      	movs	r2, #94	; 0x5e
 8002196:	705a      	strb	r2, [r3, #1]

    halstatus = HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, commands, 2, 100);
 8002198:	4a2e      	ldr	r2, [pc, #184]	; (8002254 <Init_LCD+0x180>)
 800219a:	482c      	ldr	r0, [pc, #176]	; (800224c <Init_LCD+0x178>)
 800219c:	2364      	movs	r3, #100	; 0x64
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	2302      	movs	r3, #2
 80021a2:	2178      	movs	r1, #120	; 0x78
 80021a4:	f001 f828 	bl	80031f8 <HAL_I2C_Master_Transmit>
 80021a8:	0003      	movs	r3, r0
 80021aa:	001a      	movs	r2, r3
 80021ac:	4b28      	ldr	r3, [pc, #160]	; (8002250 <Init_LCD+0x17c>)
 80021ae:	701a      	strb	r2, [r3, #0]

    HAL_Delay(60);
 80021b0:	203c      	movs	r0, #60	; 0x3c
 80021b2:	f000 fd1b 	bl	8002bec <HAL_Delay>

    commands[1] = 0x6d;
 80021b6:	4b27      	ldr	r3, [pc, #156]	; (8002254 <Init_LCD+0x180>)
 80021b8:	226d      	movs	r2, #109	; 0x6d
 80021ba:	705a      	strb	r2, [r3, #1]

    halstatus = HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, commands, 2, 100);
 80021bc:	4a25      	ldr	r2, [pc, #148]	; (8002254 <Init_LCD+0x180>)
 80021be:	4823      	ldr	r0, [pc, #140]	; (800224c <Init_LCD+0x178>)
 80021c0:	2364      	movs	r3, #100	; 0x64
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	2302      	movs	r3, #2
 80021c6:	2178      	movs	r1, #120	; 0x78
 80021c8:	f001 f816 	bl	80031f8 <HAL_I2C_Master_Transmit>
 80021cc:	0003      	movs	r3, r0
 80021ce:	001a      	movs	r2, r3
 80021d0:	4b1f      	ldr	r3, [pc, #124]	; (8002250 <Init_LCD+0x17c>)
 80021d2:	701a      	strb	r2, [r3, #0]

    HAL_Delay(60);
 80021d4:	203c      	movs	r0, #60	; 0x3c
 80021d6:	f000 fd09 	bl	8002bec <HAL_Delay>

    commands[1] = 0x0c;
 80021da:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <Init_LCD+0x180>)
 80021dc:	220c      	movs	r2, #12
 80021de:	705a      	strb	r2, [r3, #1]

    halstatus = HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, commands, 2, 100);
 80021e0:	4a1c      	ldr	r2, [pc, #112]	; (8002254 <Init_LCD+0x180>)
 80021e2:	481a      	ldr	r0, [pc, #104]	; (800224c <Init_LCD+0x178>)
 80021e4:	2364      	movs	r3, #100	; 0x64
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	2302      	movs	r3, #2
 80021ea:	2178      	movs	r1, #120	; 0x78
 80021ec:	f001 f804 	bl	80031f8 <HAL_I2C_Master_Transmit>
 80021f0:	0003      	movs	r3, r0
 80021f2:	001a      	movs	r2, r3
 80021f4:	4b16      	ldr	r3, [pc, #88]	; (8002250 <Init_LCD+0x17c>)
 80021f6:	701a      	strb	r2, [r3, #0]

    HAL_Delay(60);
 80021f8:	203c      	movs	r0, #60	; 0x3c
 80021fa:	f000 fcf7 	bl	8002bec <HAL_Delay>

    commands[1] = 0x01;
 80021fe:	4b15      	ldr	r3, [pc, #84]	; (8002254 <Init_LCD+0x180>)
 8002200:	2201      	movs	r2, #1
 8002202:	705a      	strb	r2, [r3, #1]

    halstatus = HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, commands, 2, 100);
 8002204:	4a13      	ldr	r2, [pc, #76]	; (8002254 <Init_LCD+0x180>)
 8002206:	4811      	ldr	r0, [pc, #68]	; (800224c <Init_LCD+0x178>)
 8002208:	2364      	movs	r3, #100	; 0x64
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	2302      	movs	r3, #2
 800220e:	2178      	movs	r1, #120	; 0x78
 8002210:	f000 fff2 	bl	80031f8 <HAL_I2C_Master_Transmit>
 8002214:	0003      	movs	r3, r0
 8002216:	001a      	movs	r2, r3
 8002218:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <Init_LCD+0x17c>)
 800221a:	701a      	strb	r2, [r3, #0]

    HAL_Delay(60);
 800221c:	203c      	movs	r0, #60	; 0x3c
 800221e:	f000 fce5 	bl	8002bec <HAL_Delay>

    commands[1] = 0x06;
 8002222:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <Init_LCD+0x180>)
 8002224:	2206      	movs	r2, #6
 8002226:	705a      	strb	r2, [r3, #1]

    halstatus = HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, commands, 2, 100);
 8002228:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <Init_LCD+0x180>)
 800222a:	4808      	ldr	r0, [pc, #32]	; (800224c <Init_LCD+0x178>)
 800222c:	2364      	movs	r3, #100	; 0x64
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	2302      	movs	r3, #2
 8002232:	2178      	movs	r1, #120	; 0x78
 8002234:	f000 ffe0 	bl	80031f8 <HAL_I2C_Master_Transmit>
 8002238:	0003      	movs	r3, r0
 800223a:	001a      	movs	r2, r3
 800223c:	4b04      	ldr	r3, [pc, #16]	; (8002250 <Init_LCD+0x17c>)
 800223e:	701a      	strb	r2, [r3, #0]

    HAL_Delay(60);
 8002240:	203c      	movs	r0, #60	; 0x3c
 8002242:	f000 fcd3 	bl	8002bec <HAL_Delay>
}
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	200000b0 	.word	0x200000b0
 8002250:	200000a0 	.word	0x200000a0
 8002254:	2000009c 	.word	0x2000009c

08002258 <Show_LCD>:

void Show_LCD(uint8_t text_string[])

{
 8002258:	b590      	push	{r4, r7, lr}
 800225a:	b087      	sub	sp, #28
 800225c:	af02      	add	r7, sp, #8
 800225e:	6078      	str	r0, [r7, #4]
    commands[1] = 0x80; // First character position of first Line
 8002260:	4b2d      	ldr	r3, [pc, #180]	; (8002318 <Show_LCD+0xc0>)
 8002262:	2280      	movs	r2, #128	; 0x80
 8002264:	705a      	strb	r2, [r3, #1]

    halstatus = HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, commands, 2, 100);
 8002266:	4a2c      	ldr	r2, [pc, #176]	; (8002318 <Show_LCD+0xc0>)
 8002268:	482c      	ldr	r0, [pc, #176]	; (800231c <Show_LCD+0xc4>)
 800226a:	2364      	movs	r3, #100	; 0x64
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	2302      	movs	r3, #2
 8002270:	2178      	movs	r1, #120	; 0x78
 8002272:	f000 ffc1 	bl	80031f8 <HAL_I2C_Master_Transmit>
 8002276:	0003      	movs	r3, r0
 8002278:	001a      	movs	r2, r3
 800227a:	4b29      	ldr	r3, [pc, #164]	; (8002320 <Show_LCD+0xc8>)
 800227c:	701a      	strb	r2, [r3, #0]

    HAL_Delay(60);
 800227e:	203c      	movs	r0, #60	; 0x3c
 8002280:	f000 fcb4 	bl	8002bec <HAL_Delay>

    uint8_t* data = (uint8_t*)malloc(strlen(text_string) + 1);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	0018      	movs	r0, r3
 8002288:	f7fd ff3a 	bl	8000100 <strlen>
 800228c:	0003      	movs	r3, r0
 800228e:	3301      	adds	r3, #1
 8002290:	0018      	movs	r0, r3
 8002292:	f002 ff3d 	bl	8005110 <malloc>
 8002296:	0003      	movs	r3, r0
 8002298:	60bb      	str	r3, [r7, #8]
    data[0] = 0x40;
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	2240      	movs	r2, #64	; 0x40
 800229e:	701a      	strb	r2, [r3, #0]

    for(uint8_t i = 1; i <= strlen(text_string) + 1; i++){
 80022a0:	230f      	movs	r3, #15
 80022a2:	18fb      	adds	r3, r7, r3
 80022a4:	2201      	movs	r2, #1
 80022a6:	701a      	strb	r2, [r3, #0]
 80022a8:	e010      	b.n	80022cc <Show_LCD+0x74>
    	data[i] = text_string[i - 1];
 80022aa:	200f      	movs	r0, #15
 80022ac:	183b      	adds	r3, r7, r0
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	3b01      	subs	r3, #1
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	18d2      	adds	r2, r2, r3
 80022b6:	183b      	adds	r3, r7, r0
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	68b9      	ldr	r1, [r7, #8]
 80022bc:	18cb      	adds	r3, r1, r3
 80022be:	7812      	ldrb	r2, [r2, #0]
 80022c0:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 1; i <= strlen(text_string) + 1; i++){
 80022c2:	183b      	adds	r3, r7, r0
 80022c4:	781a      	ldrb	r2, [r3, #0]
 80022c6:	183b      	adds	r3, r7, r0
 80022c8:	3201      	adds	r2, #1
 80022ca:	701a      	strb	r2, [r3, #0]
 80022cc:	230f      	movs	r3, #15
 80022ce:	18fb      	adds	r3, r7, r3
 80022d0:	781c      	ldrb	r4, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	0018      	movs	r0, r3
 80022d6:	f7fd ff13 	bl	8000100 <strlen>
 80022da:	0003      	movs	r3, r0
 80022dc:	3301      	adds	r3, #1
 80022de:	429c      	cmp	r4, r3
 80022e0:	d9e3      	bls.n	80022aa <Show_LCD+0x52>
    }
    halstatus = HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, data, strlen(text_string) + 1, 100);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	0018      	movs	r0, r3
 80022e6:	f7fd ff0b 	bl	8000100 <strlen>
 80022ea:	0003      	movs	r3, r0
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	3301      	adds	r3, #1
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	4809      	ldr	r0, [pc, #36]	; (800231c <Show_LCD+0xc4>)
 80022f6:	2164      	movs	r1, #100	; 0x64
 80022f8:	9100      	str	r1, [sp, #0]
 80022fa:	2178      	movs	r1, #120	; 0x78
 80022fc:	f000 ff7c 	bl	80031f8 <HAL_I2C_Master_Transmit>
 8002300:	0003      	movs	r3, r0
 8002302:	001a      	movs	r2, r3
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <Show_LCD+0xc8>)
 8002306:	701a      	strb	r2, [r3, #0]

    HAL_Delay(60);
 8002308:	203c      	movs	r0, #60	; 0x3c
 800230a:	f000 fc6f 	bl	8002bec <HAL_Delay>
}
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	46bd      	mov	sp, r7
 8002312:	b005      	add	sp, #20
 8002314:	bd90      	pop	{r4, r7, pc}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	2000009c 	.word	0x2000009c
 800231c:	200000b0 	.word	0x200000b0
 8002320:	200000a0 	.word	0x200000a0

08002324 <Update_Char>:



void Update_Char()
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af02      	add	r7, sp, #8
	HAL_Delay(5);
 800232a:	2005      	movs	r0, #5
 800232c:	f000 fc5e 	bl	8002bec <HAL_Delay>

	commands[1] = 0x38;
 8002330:	4b23      	ldr	r3, [pc, #140]	; (80023c0 <Update_Char+0x9c>)
 8002332:	2238      	movs	r2, #56	; 0x38
 8002334:	705a      	strb	r2, [r3, #1]

	halstatus = HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, commands, 2, 100);
 8002336:	4a22      	ldr	r2, [pc, #136]	; (80023c0 <Update_Char+0x9c>)
 8002338:	4822      	ldr	r0, [pc, #136]	; (80023c4 <Update_Char+0xa0>)
 800233a:	2364      	movs	r3, #100	; 0x64
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	2302      	movs	r3, #2
 8002340:	2178      	movs	r1, #120	; 0x78
 8002342:	f000 ff59 	bl	80031f8 <HAL_I2C_Master_Transmit>
 8002346:	0003      	movs	r3, r0
 8002348:	001a      	movs	r2, r3
 800234a:	4b1f      	ldr	r3, [pc, #124]	; (80023c8 <Update_Char+0xa4>)
 800234c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5);
 800234e:	2005      	movs	r0, #5
 8002350:	f000 fc4c 	bl	8002bec <HAL_Delay>

	commands[1] = 0x48;
 8002354:	4b1a      	ldr	r3, [pc, #104]	; (80023c0 <Update_Char+0x9c>)
 8002356:	2248      	movs	r2, #72	; 0x48
 8002358:	705a      	strb	r2, [r3, #1]
	halstatus = HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, commands, 2, 100);
 800235a:	4a19      	ldr	r2, [pc, #100]	; (80023c0 <Update_Char+0x9c>)
 800235c:	4819      	ldr	r0, [pc, #100]	; (80023c4 <Update_Char+0xa0>)
 800235e:	2364      	movs	r3, #100	; 0x64
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	2302      	movs	r3, #2
 8002364:	2178      	movs	r1, #120	; 0x78
 8002366:	f000 ff47 	bl	80031f8 <HAL_I2C_Master_Transmit>
 800236a:	0003      	movs	r3, r0
 800236c:	001a      	movs	r2, r3
 800236e:	4b16      	ldr	r3, [pc, #88]	; (80023c8 <Update_Char+0xa4>)
 8002370:	701a      	strb	r2, [r3, #0]

	HAL_Delay(5);
 8002372:	2005      	movs	r0, #5
 8002374:	f000 fc3a 	bl	8002bec <HAL_Delay>

	halstatus = HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, oneplacer, 9, 100);
 8002378:	4a14      	ldr	r2, [pc, #80]	; (80023cc <Update_Char+0xa8>)
 800237a:	4812      	ldr	r0, [pc, #72]	; (80023c4 <Update_Char+0xa0>)
 800237c:	2364      	movs	r3, #100	; 0x64
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	2309      	movs	r3, #9
 8002382:	2178      	movs	r1, #120	; 0x78
 8002384:	f000 ff38 	bl	80031f8 <HAL_I2C_Master_Transmit>
 8002388:	0003      	movs	r3, r0
 800238a:	001a      	movs	r2, r3
 800238c:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <Update_Char+0xa4>)
 800238e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5);
 8002390:	2005      	movs	r0, #5
 8002392:	f000 fc2b 	bl	8002bec <HAL_Delay>

	commands[1] = 0x39; // First character position of first Line
 8002396:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <Update_Char+0x9c>)
 8002398:	2239      	movs	r2, #57	; 0x39
 800239a:	705a      	strb	r2, [r3, #1]
	halstatus = HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, commands, 2, 100);
 800239c:	4a08      	ldr	r2, [pc, #32]	; (80023c0 <Update_Char+0x9c>)
 800239e:	4809      	ldr	r0, [pc, #36]	; (80023c4 <Update_Char+0xa0>)
 80023a0:	2364      	movs	r3, #100	; 0x64
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	2302      	movs	r3, #2
 80023a6:	2178      	movs	r1, #120	; 0x78
 80023a8:	f000 ff26 	bl	80031f8 <HAL_I2C_Master_Transmit>
 80023ac:	0003      	movs	r3, r0
 80023ae:	001a      	movs	r2, r3
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <Update_Char+0xa4>)
 80023b2:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5);
 80023b4:	2005      	movs	r0, #5
 80023b6:	f000 fc19 	bl	8002bec <HAL_Delay>
}
 80023ba:	46c0      	nop			; (mov r8, r8)
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	2000009c 	.word	0x2000009c
 80023c4:	200000b0 	.word	0x200000b0
 80023c8:	200000a0 	.word	0x200000a0
 80023cc:	20000000 	.word	0x20000000

080023d0 <ClearHelperArray>:


void ClearHelperArray()
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i < 8; i++){
 80023d6:	1dfb      	adds	r3, r7, #7
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]
 80023dc:	e01c      	b.n	8002418 <ClearHelperArray+0x48>
			for(uint8_t j=0; j < 5; j++)
 80023de:	1dbb      	adds	r3, r7, #6
 80023e0:	2200      	movs	r2, #0
 80023e2:	701a      	strb	r2, [r3, #0]
 80023e4:	e00f      	b.n	8002406 <ClearHelperArray+0x36>
			{
				Helper_Array[i][j] = 0;
 80023e6:	1dfb      	adds	r3, r7, #7
 80023e8:	781a      	ldrb	r2, [r3, #0]
 80023ea:	1dbb      	adds	r3, r7, #6
 80023ec:	7819      	ldrb	r1, [r3, #0]
 80023ee:	480f      	ldr	r0, [pc, #60]	; (800242c <ClearHelperArray+0x5c>)
 80023f0:	0013      	movs	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	189b      	adds	r3, r3, r2
 80023f6:	18c3      	adds	r3, r0, r3
 80023f8:	2200      	movs	r2, #0
 80023fa:	545a      	strb	r2, [r3, r1]
			for(uint8_t j=0; j < 5; j++)
 80023fc:	1dbb      	adds	r3, r7, #6
 80023fe:	781a      	ldrb	r2, [r3, #0]
 8002400:	1dbb      	adds	r3, r7, #6
 8002402:	3201      	adds	r2, #1
 8002404:	701a      	strb	r2, [r3, #0]
 8002406:	1dbb      	adds	r3, r7, #6
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b04      	cmp	r3, #4
 800240c:	d9eb      	bls.n	80023e6 <ClearHelperArray+0x16>
	for(uint8_t i=0; i < 8; i++){
 800240e:	1dfb      	adds	r3, r7, #7
 8002410:	781a      	ldrb	r2, [r3, #0]
 8002412:	1dfb      	adds	r3, r7, #7
 8002414:	3201      	adds	r2, #1
 8002416:	701a      	strb	r2, [r3, #0]
 8002418:	1dfb      	adds	r3, r7, #7
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b07      	cmp	r3, #7
 800241e:	d9de      	bls.n	80023de <ClearHelperArray+0xe>
			}
	}
}
 8002420:	46c0      	nop			; (mov r8, r8)
 8002422:	46c0      	nop			; (mov r8, r8)
 8002424:	46bd      	mov	sp, r7
 8002426:	b002      	add	sp, #8
 8002428:	bd80      	pop	{r7, pc}
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	200000fc 	.word	0x200000fc

08002430 <HelperToBytes>:

void HelperToBytes()
{
 8002430:	b5b0      	push	{r4, r5, r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
	for(uint8_t i=0,k=1; i < 8; i++, k++){
 8002436:	1dfb      	adds	r3, r7, #7
 8002438:	2200      	movs	r2, #0
 800243a:	701a      	strb	r2, [r3, #0]
 800243c:	1dbb      	adds	r3, r7, #6
 800243e:	2201      	movs	r2, #1
 8002440:	701a      	strb	r2, [r3, #0]
 8002442:	e04f      	b.n	80024e4 <HelperToBytes+0xb4>
			uint8_t value = 0;
 8002444:	1d7b      	adds	r3, r7, #5
 8002446:	2200      	movs	r2, #0
 8002448:	701a      	strb	r2, [r3, #0]
			for(uint8_t j=0; j < 5; j++)
 800244a:	1d3b      	adds	r3, r7, #4
 800244c:	2200      	movs	r2, #0
 800244e:	701a      	strb	r2, [r3, #0]
 8002450:	e034      	b.n	80024bc <HelperToBytes+0x8c>
			{

				if(Helper_Array[i][j] == 1)
 8002452:	1dfb      	adds	r3, r7, #7
 8002454:	781a      	ldrb	r2, [r3, #0]
 8002456:	1d3b      	adds	r3, r7, #4
 8002458:	7819      	ldrb	r1, [r3, #0]
 800245a:	4827      	ldr	r0, [pc, #156]	; (80024f8 <HelperToBytes+0xc8>)
 800245c:	0013      	movs	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	189b      	adds	r3, r3, r2
 8002462:	18c3      	adds	r3, r0, r3
 8002464:	5c5b      	ldrb	r3, [r3, r1]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d123      	bne.n	80024b2 <HelperToBytes+0x82>
				{
					value += pow(2,5-j);
 800246a:	1d3b      	adds	r3, r7, #4
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2205      	movs	r2, #5
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	0018      	movs	r0, r3
 8002474:	f7ff fde0 	bl	8002038 <__aeabi_i2d>
 8002478:	0002      	movs	r2, r0
 800247a:	000b      	movs	r3, r1
 800247c:	2000      	movs	r0, #0
 800247e:	2180      	movs	r1, #128	; 0x80
 8002480:	05c9      	lsls	r1, r1, #23
 8002482:	f002 fed9 	bl	8005238 <pow>
 8002486:	0004      	movs	r4, r0
 8002488:	000d      	movs	r5, r1
 800248a:	1d7b      	adds	r3, r7, #5
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	0018      	movs	r0, r3
 8002490:	f7ff fdd2 	bl	8002038 <__aeabi_i2d>
 8002494:	0002      	movs	r2, r0
 8002496:	000b      	movs	r3, r1
 8002498:	0020      	movs	r0, r4
 800249a:	0029      	movs	r1, r5
 800249c:	f7fe f80a 	bl	80004b4 <__aeabi_dadd>
 80024a0:	0002      	movs	r2, r0
 80024a2:	000b      	movs	r3, r1
 80024a4:	1d7c      	adds	r4, r7, #5
 80024a6:	0010      	movs	r0, r2
 80024a8:	0019      	movs	r1, r3
 80024aa:	f7fd ffe5 	bl	8000478 <__aeabi_d2uiz>
 80024ae:	0003      	movs	r3, r0
 80024b0:	7023      	strb	r3, [r4, #0]
			for(uint8_t j=0; j < 5; j++)
 80024b2:	1d3b      	adds	r3, r7, #4
 80024b4:	781a      	ldrb	r2, [r3, #0]
 80024b6:	1d3b      	adds	r3, r7, #4
 80024b8:	3201      	adds	r2, #1
 80024ba:	701a      	strb	r2, [r3, #0]
 80024bc:	1d3b      	adds	r3, r7, #4
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	d9c6      	bls.n	8002452 <HelperToBytes+0x22>
				}
			}
			oneplacer[k] = value;
 80024c4:	1dbb      	adds	r3, r7, #6
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	4a0c      	ldr	r2, [pc, #48]	; (80024fc <HelperToBytes+0xcc>)
 80024ca:	1d79      	adds	r1, r7, #5
 80024cc:	7809      	ldrb	r1, [r1, #0]
 80024ce:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0,k=1; i < 8; i++, k++){
 80024d0:	1dfb      	adds	r3, r7, #7
 80024d2:	781a      	ldrb	r2, [r3, #0]
 80024d4:	1dfb      	adds	r3, r7, #7
 80024d6:	3201      	adds	r2, #1
 80024d8:	701a      	strb	r2, [r3, #0]
 80024da:	1dbb      	adds	r3, r7, #6
 80024dc:	781a      	ldrb	r2, [r3, #0]
 80024de:	1dbb      	adds	r3, r7, #6
 80024e0:	3201      	adds	r2, #1
 80024e2:	701a      	strb	r2, [r3, #0]
 80024e4:	1dfb      	adds	r3, r7, #7
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b07      	cmp	r3, #7
 80024ea:	d9ab      	bls.n	8002444 <HelperToBytes+0x14>
		}
}
 80024ec:	46c0      	nop			; (mov r8, r8)
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	46bd      	mov	sp, r7
 80024f2:	b002      	add	sp, #8
 80024f4:	bdb0      	pop	{r4, r5, r7, pc}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	200000fc 	.word	0x200000fc
 80024fc:	20000000 	.word	0x20000000

08002500 <Snake>:


void Snake()
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i < 8; i++){
 8002506:	1dfb      	adds	r3, r7, #7
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]
 800250c:	e025      	b.n	800255a <Snake+0x5a>
		for(uint8_t j=0; j < 5; j++)
 800250e:	1dbb      	adds	r3, r7, #6
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
 8002514:	e018      	b.n	8002548 <Snake+0x48>
		{
			ClearHelperArray();
 8002516:	f7ff ff5b 	bl	80023d0 <ClearHelperArray>
			Helper_Array[i][j] = 1;
 800251a:	1dfb      	adds	r3, r7, #7
 800251c:	781a      	ldrb	r2, [r3, #0]
 800251e:	1dbb      	adds	r3, r7, #6
 8002520:	7819      	ldrb	r1, [r3, #0]
 8002522:	4812      	ldr	r0, [pc, #72]	; (800256c <Snake+0x6c>)
 8002524:	0013      	movs	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	189b      	adds	r3, r3, r2
 800252a:	18c3      	adds	r3, r0, r3
 800252c:	2201      	movs	r2, #1
 800252e:	545a      	strb	r2, [r3, r1]
			HelperToBytes();
 8002530:	f7ff ff7e 	bl	8002430 <HelperToBytes>
			Update_Char();
 8002534:	f7ff fef6 	bl	8002324 <Update_Char>
			HAL_Delay(100);
 8002538:	2064      	movs	r0, #100	; 0x64
 800253a:	f000 fb57 	bl	8002bec <HAL_Delay>
		for(uint8_t j=0; j < 5; j++)
 800253e:	1dbb      	adds	r3, r7, #6
 8002540:	781a      	ldrb	r2, [r3, #0]
 8002542:	1dbb      	adds	r3, r7, #6
 8002544:	3201      	adds	r2, #1
 8002546:	701a      	strb	r2, [r3, #0]
 8002548:	1dbb      	adds	r3, r7, #6
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b04      	cmp	r3, #4
 800254e:	d9e2      	bls.n	8002516 <Snake+0x16>
	for(uint8_t i=0; i < 8; i++){
 8002550:	1dfb      	adds	r3, r7, #7
 8002552:	781a      	ldrb	r2, [r3, #0]
 8002554:	1dfb      	adds	r3, r7, #7
 8002556:	3201      	adds	r2, #1
 8002558:	701a      	strb	r2, [r3, #0]
 800255a:	1dfb      	adds	r3, r7, #7
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b07      	cmp	r3, #7
 8002560:	d9d5      	bls.n	800250e <Snake+0xe>
		}
	}
}
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	46c0      	nop			; (mov r8, r8)
 8002566:	46bd      	mov	sp, r7
 8002568:	b002      	add	sp, #8
 800256a:	bd80      	pop	{r7, pc}
 800256c:	200000fc 	.word	0x200000fc

08002570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002574:	f000 fab4 	bl	8002ae0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002578:	f000 f81c 	bl	80025b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800257c:	f000 f90a 	bl	8002794 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002580:	f000 f87a 	bl	8002678 <MX_I2C1_Init>


  MX_USART2_UART_Init();
 8002584:	f000 f8b8 	bl	80026f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  Init_LCD();
 8002588:	f7ff fda4 	bl	80020d4 <Init_LCD>


  Show_LCD("\001\001\001\001\001\001\001\001\001\001\001");
 800258c:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <main+0x40>)
 800258e:	0018      	movs	r0, r3
 8002590:	f7ff fe62 	bl	8002258 <Show_LCD>
  HAL_Delay(1000);
 8002594:	23fa      	movs	r3, #250	; 0xfa
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	0018      	movs	r0, r3
 800259a:	f000 fb27 	bl	8002bec <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	 Snake();
 800259e:	f7ff ffaf 	bl	8002500 <Snake>
	 HAL_Delay(500);
 80025a2:	23fa      	movs	r3, #250	; 0xfa
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	0018      	movs	r0, r3
 80025a8:	f000 fb20 	bl	8002bec <HAL_Delay>
	 Snake();
 80025ac:	e7f7      	b.n	800259e <main+0x2e>
 80025ae:	46c0      	nop			; (mov r8, r8)
 80025b0:	08006148 	.word	0x08006148

080025b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025b4:	b590      	push	{r4, r7, lr}
 80025b6:	b099      	sub	sp, #100	; 0x64
 80025b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025ba:	242c      	movs	r4, #44	; 0x2c
 80025bc:	193b      	adds	r3, r7, r4
 80025be:	0018      	movs	r0, r3
 80025c0:	2334      	movs	r3, #52	; 0x34
 80025c2:	001a      	movs	r2, r3
 80025c4:	2100      	movs	r1, #0
 80025c6:	f002 fdad 	bl	8005124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025ca:	231c      	movs	r3, #28
 80025cc:	18fb      	adds	r3, r7, r3
 80025ce:	0018      	movs	r0, r3
 80025d0:	2310      	movs	r3, #16
 80025d2:	001a      	movs	r2, r3
 80025d4:	2100      	movs	r1, #0
 80025d6:	f002 fda5 	bl	8005124 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025da:	003b      	movs	r3, r7
 80025dc:	0018      	movs	r0, r3
 80025de:	231c      	movs	r3, #28
 80025e0:	001a      	movs	r2, r3
 80025e2:	2100      	movs	r1, #0
 80025e4:	f002 fd9e 	bl	8005124 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025e8:	2380      	movs	r3, #128	; 0x80
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	0018      	movs	r0, r3
 80025ee:	f001 fa49 	bl	8003a84 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025f2:	193b      	adds	r3, r7, r4
 80025f4:	2202      	movs	r2, #2
 80025f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025f8:	193b      	adds	r3, r7, r4
 80025fa:	2280      	movs	r2, #128	; 0x80
 80025fc:	0052      	lsls	r2, r2, #1
 80025fe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002600:	193b      	adds	r3, r7, r4
 8002602:	2200      	movs	r2, #0
 8002604:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002606:	193b      	adds	r3, r7, r4
 8002608:	2240      	movs	r2, #64	; 0x40
 800260a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800260c:	193b      	adds	r3, r7, r4
 800260e:	2200      	movs	r2, #0
 8002610:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002612:	193b      	adds	r3, r7, r4
 8002614:	0018      	movs	r0, r3
 8002616:	f001 fa81 	bl	8003b1c <HAL_RCC_OscConfig>
 800261a:	1e03      	subs	r3, r0, #0
 800261c:	d001      	beq.n	8002622 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800261e:	f000 f91d 	bl	800285c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002622:	211c      	movs	r1, #28
 8002624:	187b      	adds	r3, r7, r1
 8002626:	2207      	movs	r2, #7
 8002628:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800262a:	187b      	adds	r3, r7, r1
 800262c:	2200      	movs	r2, #0
 800262e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002630:	187b      	adds	r3, r7, r1
 8002632:	2200      	movs	r2, #0
 8002634:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002636:	187b      	adds	r3, r7, r1
 8002638:	2200      	movs	r2, #0
 800263a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800263c:	187b      	adds	r3, r7, r1
 800263e:	2100      	movs	r1, #0
 8002640:	0018      	movs	r0, r3
 8002642:	f001 fd81 	bl	8004148 <HAL_RCC_ClockConfig>
 8002646:	1e03      	subs	r3, r0, #0
 8002648:	d001      	beq.n	800264e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800264a:	f000 f907 	bl	800285c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800264e:	003b      	movs	r3, r7
 8002650:	2222      	movs	r2, #34	; 0x22
 8002652:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002654:	003b      	movs	r3, r7
 8002656:	2200      	movs	r2, #0
 8002658:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800265a:	003b      	movs	r3, r7
 800265c:	2200      	movs	r2, #0
 800265e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002660:	003b      	movs	r3, r7
 8002662:	0018      	movs	r0, r3
 8002664:	f001 ff1a 	bl	800449c <HAL_RCCEx_PeriphCLKConfig>
 8002668:	1e03      	subs	r3, r0, #0
 800266a:	d001      	beq.n	8002670 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800266c:	f000 f8f6 	bl	800285c <Error_Handler>
  }
}
 8002670:	46c0      	nop			; (mov r8, r8)
 8002672:	46bd      	mov	sp, r7
 8002674:	b019      	add	sp, #100	; 0x64
 8002676:	bd90      	pop	{r4, r7, pc}

08002678 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800267c:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <MX_I2C1_Init+0x74>)
 800267e:	4a1c      	ldr	r2, [pc, #112]	; (80026f0 <MX_I2C1_Init+0x78>)
 8002680:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8002682:	4b1a      	ldr	r3, [pc, #104]	; (80026ec <MX_I2C1_Init+0x74>)
 8002684:	4a1b      	ldr	r2, [pc, #108]	; (80026f4 <MX_I2C1_Init+0x7c>)
 8002686:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 20;
 8002688:	4b18      	ldr	r3, [pc, #96]	; (80026ec <MX_I2C1_Init+0x74>)
 800268a:	2214      	movs	r2, #20
 800268c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800268e:	4b17      	ldr	r3, [pc, #92]	; (80026ec <MX_I2C1_Init+0x74>)
 8002690:	2201      	movs	r2, #1
 8002692:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002694:	4b15      	ldr	r3, [pc, #84]	; (80026ec <MX_I2C1_Init+0x74>)
 8002696:	2200      	movs	r2, #0
 8002698:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800269a:	4b14      	ldr	r3, [pc, #80]	; (80026ec <MX_I2C1_Init+0x74>)
 800269c:	2200      	movs	r2, #0
 800269e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026a0:	4b12      	ldr	r3, [pc, #72]	; (80026ec <MX_I2C1_Init+0x74>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026a6:	4b11      	ldr	r3, [pc, #68]	; (80026ec <MX_I2C1_Init+0x74>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026ac:	4b0f      	ldr	r3, [pc, #60]	; (80026ec <MX_I2C1_Init+0x74>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026b2:	4b0e      	ldr	r3, [pc, #56]	; (80026ec <MX_I2C1_Init+0x74>)
 80026b4:	0018      	movs	r0, r3
 80026b6:	f000 fd09 	bl	80030cc <HAL_I2C_Init>
 80026ba:	1e03      	subs	r3, r0, #0
 80026bc:	d001      	beq.n	80026c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80026be:	f000 f8cd 	bl	800285c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026c2:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <MX_I2C1_Init+0x74>)
 80026c4:	2100      	movs	r1, #0
 80026c6:	0018      	movs	r0, r3
 80026c8:	f001 f944 	bl	8003954 <HAL_I2CEx_ConfigAnalogFilter>
 80026cc:	1e03      	subs	r3, r0, #0
 80026ce:	d001      	beq.n	80026d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80026d0:	f000 f8c4 	bl	800285c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80026d4:	4b05      	ldr	r3, [pc, #20]	; (80026ec <MX_I2C1_Init+0x74>)
 80026d6:	2100      	movs	r1, #0
 80026d8:	0018      	movs	r0, r3
 80026da:	f001 f987 	bl	80039ec <HAL_I2CEx_ConfigDigitalFilter>
 80026de:	1e03      	subs	r3, r0, #0
 80026e0:	d001      	beq.n	80026e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80026e2:	f000 f8bb 	bl	800285c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	200000b0 	.word	0x200000b0
 80026f0:	40005400 	.word	0x40005400
 80026f4:	00303d5b 	.word	0x00303d5b

080026f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026fc:	4b23      	ldr	r3, [pc, #140]	; (800278c <MX_USART2_UART_Init+0x94>)
 80026fe:	4a24      	ldr	r2, [pc, #144]	; (8002790 <MX_USART2_UART_Init+0x98>)
 8002700:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002702:	4b22      	ldr	r3, [pc, #136]	; (800278c <MX_USART2_UART_Init+0x94>)
 8002704:	22e1      	movs	r2, #225	; 0xe1
 8002706:	0252      	lsls	r2, r2, #9
 8002708:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800270a:	4b20      	ldr	r3, [pc, #128]	; (800278c <MX_USART2_UART_Init+0x94>)
 800270c:	2200      	movs	r2, #0
 800270e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002710:	4b1e      	ldr	r3, [pc, #120]	; (800278c <MX_USART2_UART_Init+0x94>)
 8002712:	2200      	movs	r2, #0
 8002714:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002716:	4b1d      	ldr	r3, [pc, #116]	; (800278c <MX_USART2_UART_Init+0x94>)
 8002718:	2200      	movs	r2, #0
 800271a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800271c:	4b1b      	ldr	r3, [pc, #108]	; (800278c <MX_USART2_UART_Init+0x94>)
 800271e:	220c      	movs	r2, #12
 8002720:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002722:	4b1a      	ldr	r3, [pc, #104]	; (800278c <MX_USART2_UART_Init+0x94>)
 8002724:	2200      	movs	r2, #0
 8002726:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002728:	4b18      	ldr	r3, [pc, #96]	; (800278c <MX_USART2_UART_Init+0x94>)
 800272a:	2200      	movs	r2, #0
 800272c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800272e:	4b17      	ldr	r3, [pc, #92]	; (800278c <MX_USART2_UART_Init+0x94>)
 8002730:	2200      	movs	r2, #0
 8002732:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002734:	4b15      	ldr	r3, [pc, #84]	; (800278c <MX_USART2_UART_Init+0x94>)
 8002736:	2200      	movs	r2, #0
 8002738:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800273a:	4b14      	ldr	r3, [pc, #80]	; (800278c <MX_USART2_UART_Init+0x94>)
 800273c:	2200      	movs	r2, #0
 800273e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002740:	4b12      	ldr	r3, [pc, #72]	; (800278c <MX_USART2_UART_Init+0x94>)
 8002742:	0018      	movs	r0, r3
 8002744:	f001 ffde 	bl	8004704 <HAL_UART_Init>
 8002748:	1e03      	subs	r3, r0, #0
 800274a:	d001      	beq.n	8002750 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800274c:	f000 f886 	bl	800285c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002750:	4b0e      	ldr	r3, [pc, #56]	; (800278c <MX_USART2_UART_Init+0x94>)
 8002752:	2100      	movs	r1, #0
 8002754:	0018      	movs	r0, r3
 8002756:	f002 fbd1 	bl	8004efc <HAL_UARTEx_SetTxFifoThreshold>
 800275a:	1e03      	subs	r3, r0, #0
 800275c:	d001      	beq.n	8002762 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800275e:	f000 f87d 	bl	800285c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002762:	4b0a      	ldr	r3, [pc, #40]	; (800278c <MX_USART2_UART_Init+0x94>)
 8002764:	2100      	movs	r1, #0
 8002766:	0018      	movs	r0, r3
 8002768:	f002 fc08 	bl	8004f7c <HAL_UARTEx_SetRxFifoThreshold>
 800276c:	1e03      	subs	r3, r0, #0
 800276e:	d001      	beq.n	8002774 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002770:	f000 f874 	bl	800285c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <MX_USART2_UART_Init+0x94>)
 8002776:	0018      	movs	r0, r3
 8002778:	f002 fb86 	bl	8004e88 <HAL_UARTEx_DisableFifoMode>
 800277c:	1e03      	subs	r3, r0, #0
 800277e:	d001      	beq.n	8002784 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002780:	f000 f86c 	bl	800285c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002784:	46c0      	nop			; (mov r8, r8)
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	20000124 	.word	0x20000124
 8002790:	40004400 	.word	0x40004400

08002794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002794:	b590      	push	{r4, r7, lr}
 8002796:	b089      	sub	sp, #36	; 0x24
 8002798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279a:	240c      	movs	r4, #12
 800279c:	193b      	adds	r3, r7, r4
 800279e:	0018      	movs	r0, r3
 80027a0:	2314      	movs	r3, #20
 80027a2:	001a      	movs	r2, r3
 80027a4:	2100      	movs	r1, #0
 80027a6:	f002 fcbd 	bl	8005124 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027aa:	4b2b      	ldr	r3, [pc, #172]	; (8002858 <MX_GPIO_Init+0xc4>)
 80027ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027ae:	4b2a      	ldr	r3, [pc, #168]	; (8002858 <MX_GPIO_Init+0xc4>)
 80027b0:	2104      	movs	r1, #4
 80027b2:	430a      	orrs	r2, r1
 80027b4:	635a      	str	r2, [r3, #52]	; 0x34
 80027b6:	4b28      	ldr	r3, [pc, #160]	; (8002858 <MX_GPIO_Init+0xc4>)
 80027b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ba:	2204      	movs	r2, #4
 80027bc:	4013      	ands	r3, r2
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80027c2:	4b25      	ldr	r3, [pc, #148]	; (8002858 <MX_GPIO_Init+0xc4>)
 80027c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027c6:	4b24      	ldr	r3, [pc, #144]	; (8002858 <MX_GPIO_Init+0xc4>)
 80027c8:	2120      	movs	r1, #32
 80027ca:	430a      	orrs	r2, r1
 80027cc:	635a      	str	r2, [r3, #52]	; 0x34
 80027ce:	4b22      	ldr	r3, [pc, #136]	; (8002858 <MX_GPIO_Init+0xc4>)
 80027d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d2:	2220      	movs	r2, #32
 80027d4:	4013      	ands	r3, r2
 80027d6:	607b      	str	r3, [r7, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027da:	4b1f      	ldr	r3, [pc, #124]	; (8002858 <MX_GPIO_Init+0xc4>)
 80027dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027de:	4b1e      	ldr	r3, [pc, #120]	; (8002858 <MX_GPIO_Init+0xc4>)
 80027e0:	2101      	movs	r1, #1
 80027e2:	430a      	orrs	r2, r1
 80027e4:	635a      	str	r2, [r3, #52]	; 0x34
 80027e6:	4b1c      	ldr	r3, [pc, #112]	; (8002858 <MX_GPIO_Init+0xc4>)
 80027e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ea:	2201      	movs	r2, #1
 80027ec:	4013      	ands	r3, r2
 80027ee:	603b      	str	r3, [r7, #0]
 80027f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RESET_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80027f2:	23a0      	movs	r3, #160	; 0xa0
 80027f4:	05db      	lsls	r3, r3, #23
 80027f6:	2200      	movs	r2, #0
 80027f8:	2130      	movs	r1, #48	; 0x30
 80027fa:	0018      	movs	r0, r3
 80027fc:	f000 fc48 	bl	8003090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8002800:	193b      	adds	r3, r7, r4
 8002802:	2210      	movs	r2, #16
 8002804:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002806:	193b      	adds	r3, r7, r4
 8002808:	2201      	movs	r2, #1
 800280a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	193b      	adds	r3, r7, r4
 800280e:	2200      	movs	r2, #0
 8002810:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002812:	193b      	adds	r3, r7, r4
 8002814:	2200      	movs	r2, #0
 8002816:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8002818:	193a      	adds	r2, r7, r4
 800281a:	23a0      	movs	r3, #160	; 0xa0
 800281c:	05db      	lsls	r3, r3, #23
 800281e:	0011      	movs	r1, r2
 8002820:	0018      	movs	r0, r3
 8002822:	f000 fad1 	bl	8002dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8002826:	0021      	movs	r1, r4
 8002828:	187b      	adds	r3, r7, r1
 800282a:	2220      	movs	r2, #32
 800282c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800282e:	187b      	adds	r3, r7, r1
 8002830:	2201      	movs	r2, #1
 8002832:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002834:	187b      	adds	r3, r7, r1
 8002836:	2200      	movs	r2, #0
 8002838:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800283a:	187b      	adds	r3, r7, r1
 800283c:	2202      	movs	r2, #2
 800283e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8002840:	187a      	adds	r2, r7, r1
 8002842:	23a0      	movs	r3, #160	; 0xa0
 8002844:	05db      	lsls	r3, r3, #23
 8002846:	0011      	movs	r1, r2
 8002848:	0018      	movs	r0, r3
 800284a:	f000 fabd 	bl	8002dc8 <HAL_GPIO_Init>

}
 800284e:	46c0      	nop			; (mov r8, r8)
 8002850:	46bd      	mov	sp, r7
 8002852:	b009      	add	sp, #36	; 0x24
 8002854:	bd90      	pop	{r4, r7, pc}
 8002856:	46c0      	nop			; (mov r8, r8)
 8002858:	40021000 	.word	0x40021000

0800285c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002860:	b672      	cpsid	i
}
 8002862:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002864:	e7fe      	b.n	8002864 <Error_Handler+0x8>
	...

08002868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800286e:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <HAL_MspInit+0x4c>)
 8002870:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002872:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <HAL_MspInit+0x4c>)
 8002874:	2101      	movs	r1, #1
 8002876:	430a      	orrs	r2, r1
 8002878:	641a      	str	r2, [r3, #64]	; 0x40
 800287a:	4b0e      	ldr	r3, [pc, #56]	; (80028b4 <HAL_MspInit+0x4c>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	2201      	movs	r2, #1
 8002880:	4013      	ands	r3, r2
 8002882:	607b      	str	r3, [r7, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002886:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <HAL_MspInit+0x4c>)
 8002888:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800288a:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <HAL_MspInit+0x4c>)
 800288c:	2180      	movs	r1, #128	; 0x80
 800288e:	0549      	lsls	r1, r1, #21
 8002890:	430a      	orrs	r2, r1
 8002892:	63da      	str	r2, [r3, #60]	; 0x3c
 8002894:	4b07      	ldr	r3, [pc, #28]	; (80028b4 <HAL_MspInit+0x4c>)
 8002896:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002898:	2380      	movs	r3, #128	; 0x80
 800289a:	055b      	lsls	r3, r3, #21
 800289c:	4013      	ands	r3, r2
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80028a2:	23c0      	movs	r3, #192	; 0xc0
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	0018      	movs	r0, r3
 80028a8:	f000 f9c4 	bl	8002c34 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028ac:	46c0      	nop			; (mov r8, r8)
 80028ae:	46bd      	mov	sp, r7
 80028b0:	b002      	add	sp, #8
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40021000 	.word	0x40021000

080028b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028b8:	b590      	push	{r4, r7, lr}
 80028ba:	b08b      	sub	sp, #44	; 0x2c
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c0:	2414      	movs	r4, #20
 80028c2:	193b      	adds	r3, r7, r4
 80028c4:	0018      	movs	r0, r3
 80028c6:	2314      	movs	r3, #20
 80028c8:	001a      	movs	r2, r3
 80028ca:	2100      	movs	r1, #0
 80028cc:	f002 fc2a 	bl	8005124 <memset>
  if(hi2c->Instance==I2C1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a1c      	ldr	r2, [pc, #112]	; (8002948 <HAL_I2C_MspInit+0x90>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d131      	bne.n	800293e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028da:	4b1c      	ldr	r3, [pc, #112]	; (800294c <HAL_I2C_MspInit+0x94>)
 80028dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028de:	4b1b      	ldr	r3, [pc, #108]	; (800294c <HAL_I2C_MspInit+0x94>)
 80028e0:	2101      	movs	r1, #1
 80028e2:	430a      	orrs	r2, r1
 80028e4:	635a      	str	r2, [r3, #52]	; 0x34
 80028e6:	4b19      	ldr	r3, [pc, #100]	; (800294c <HAL_I2C_MspInit+0x94>)
 80028e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ea:	2201      	movs	r2, #1
 80028ec:	4013      	ands	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
 80028f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80028f2:	193b      	adds	r3, r7, r4
 80028f4:	22c0      	movs	r2, #192	; 0xc0
 80028f6:	00d2      	lsls	r2, r2, #3
 80028f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028fa:	0021      	movs	r1, r4
 80028fc:	187b      	adds	r3, r7, r1
 80028fe:	2212      	movs	r2, #18
 8002900:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002902:	187b      	adds	r3, r7, r1
 8002904:	2200      	movs	r2, #0
 8002906:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002908:	187b      	adds	r3, r7, r1
 800290a:	2200      	movs	r2, #0
 800290c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800290e:	187b      	adds	r3, r7, r1
 8002910:	2206      	movs	r2, #6
 8002912:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002914:	187a      	adds	r2, r7, r1
 8002916:	23a0      	movs	r3, #160	; 0xa0
 8002918:	05db      	lsls	r3, r3, #23
 800291a:	0011      	movs	r1, r2
 800291c:	0018      	movs	r0, r3
 800291e:	f000 fa53 	bl	8002dc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002922:	4b0a      	ldr	r3, [pc, #40]	; (800294c <HAL_I2C_MspInit+0x94>)
 8002924:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002926:	4b09      	ldr	r3, [pc, #36]	; (800294c <HAL_I2C_MspInit+0x94>)
 8002928:	2180      	movs	r1, #128	; 0x80
 800292a:	0389      	lsls	r1, r1, #14
 800292c:	430a      	orrs	r2, r1
 800292e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002930:	4b06      	ldr	r3, [pc, #24]	; (800294c <HAL_I2C_MspInit+0x94>)
 8002932:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002934:	2380      	movs	r3, #128	; 0x80
 8002936:	039b      	lsls	r3, r3, #14
 8002938:	4013      	ands	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	46bd      	mov	sp, r7
 8002942:	b00b      	add	sp, #44	; 0x2c
 8002944:	bd90      	pop	{r4, r7, pc}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	40005400 	.word	0x40005400
 800294c:	40021000 	.word	0x40021000

08002950 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002950:	b590      	push	{r4, r7, lr}
 8002952:	b08b      	sub	sp, #44	; 0x2c
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002958:	2414      	movs	r4, #20
 800295a:	193b      	adds	r3, r7, r4
 800295c:	0018      	movs	r0, r3
 800295e:	2314      	movs	r3, #20
 8002960:	001a      	movs	r2, r3
 8002962:	2100      	movs	r1, #0
 8002964:	f002 fbde 	bl	8005124 <memset>
  if(huart->Instance==USART2)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a1b      	ldr	r2, [pc, #108]	; (80029dc <HAL_UART_MspInit+0x8c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d130      	bne.n	80029d4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002972:	4b1b      	ldr	r3, [pc, #108]	; (80029e0 <HAL_UART_MspInit+0x90>)
 8002974:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002976:	4b1a      	ldr	r3, [pc, #104]	; (80029e0 <HAL_UART_MspInit+0x90>)
 8002978:	2180      	movs	r1, #128	; 0x80
 800297a:	0289      	lsls	r1, r1, #10
 800297c:	430a      	orrs	r2, r1
 800297e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002980:	4b17      	ldr	r3, [pc, #92]	; (80029e0 <HAL_UART_MspInit+0x90>)
 8002982:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002984:	2380      	movs	r3, #128	; 0x80
 8002986:	029b      	lsls	r3, r3, #10
 8002988:	4013      	ands	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800298e:	4b14      	ldr	r3, [pc, #80]	; (80029e0 <HAL_UART_MspInit+0x90>)
 8002990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002992:	4b13      	ldr	r3, [pc, #76]	; (80029e0 <HAL_UART_MspInit+0x90>)
 8002994:	2101      	movs	r1, #1
 8002996:	430a      	orrs	r2, r1
 8002998:	635a      	str	r2, [r3, #52]	; 0x34
 800299a:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <HAL_UART_MspInit+0x90>)
 800299c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299e:	2201      	movs	r2, #1
 80029a0:	4013      	ands	r3, r2
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80029a6:	0021      	movs	r1, r4
 80029a8:	187b      	adds	r3, r7, r1
 80029aa:	220c      	movs	r2, #12
 80029ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ae:	187b      	adds	r3, r7, r1
 80029b0:	2202      	movs	r2, #2
 80029b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029b4:	187b      	adds	r3, r7, r1
 80029b6:	2201      	movs	r2, #1
 80029b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ba:	187b      	adds	r3, r7, r1
 80029bc:	2200      	movs	r2, #0
 80029be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80029c0:	187b      	adds	r3, r7, r1
 80029c2:	2201      	movs	r2, #1
 80029c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c6:	187a      	adds	r2, r7, r1
 80029c8:	23a0      	movs	r3, #160	; 0xa0
 80029ca:	05db      	lsls	r3, r3, #23
 80029cc:	0011      	movs	r1, r2
 80029ce:	0018      	movs	r0, r3
 80029d0:	f000 f9fa 	bl	8002dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029d4:	46c0      	nop			; (mov r8, r8)
 80029d6:	46bd      	mov	sp, r7
 80029d8:	b00b      	add	sp, #44	; 0x2c
 80029da:	bd90      	pop	{r4, r7, pc}
 80029dc:	40004400 	.word	0x40004400
 80029e0:	40021000 	.word	0x40021000

080029e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029e8:	e7fe      	b.n	80029e8 <NMI_Handler+0x4>

080029ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029ee:	e7fe      	b.n	80029ee <HardFault_Handler+0x4>

080029f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029fe:	46c0      	nop			; (mov r8, r8)
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a08:	f000 f8d4 	bl	8002bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a0c:	46c0      	nop			; (mov r8, r8)
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a1c:	4a14      	ldr	r2, [pc, #80]	; (8002a70 <_sbrk+0x5c>)
 8002a1e:	4b15      	ldr	r3, [pc, #84]	; (8002a74 <_sbrk+0x60>)
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a28:	4b13      	ldr	r3, [pc, #76]	; (8002a78 <_sbrk+0x64>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d102      	bne.n	8002a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a30:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <_sbrk+0x64>)
 8002a32:	4a12      	ldr	r2, [pc, #72]	; (8002a7c <_sbrk+0x68>)
 8002a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a36:	4b10      	ldr	r3, [pc, #64]	; (8002a78 <_sbrk+0x64>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	18d3      	adds	r3, r2, r3
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d207      	bcs.n	8002a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a44:	f002 fb3a 	bl	80050bc <__errno>
 8002a48:	0003      	movs	r3, r0
 8002a4a:	220c      	movs	r2, #12
 8002a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	425b      	negs	r3, r3
 8002a52:	e009      	b.n	8002a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a54:	4b08      	ldr	r3, [pc, #32]	; (8002a78 <_sbrk+0x64>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a5a:	4b07      	ldr	r3, [pc, #28]	; (8002a78 <_sbrk+0x64>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	18d2      	adds	r2, r2, r3
 8002a62:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <_sbrk+0x64>)
 8002a64:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002a66:	68fb      	ldr	r3, [r7, #12]
}
 8002a68:	0018      	movs	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	b006      	add	sp, #24
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20009000 	.word	0x20009000
 8002a74:	00000400 	.word	0x00000400
 8002a78:	200000a4 	.word	0x200000a4
 8002a7c:	200001c8 	.word	0x200001c8

08002a80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a84:	46c0      	nop			; (mov r8, r8)
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
	...

08002a8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a8c:	480d      	ldr	r0, [pc, #52]	; (8002ac4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a8e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a90:	f7ff fff6 	bl	8002a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a94:	480c      	ldr	r0, [pc, #48]	; (8002ac8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a96:	490d      	ldr	r1, [pc, #52]	; (8002acc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a98:	4a0d      	ldr	r2, [pc, #52]	; (8002ad0 <LoopForever+0xe>)
  movs r3, #0
 8002a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a9c:	e002      	b.n	8002aa4 <LoopCopyDataInit>

08002a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aa2:	3304      	adds	r3, #4

08002aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002aa8:	d3f9      	bcc.n	8002a9e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aaa:	4a0a      	ldr	r2, [pc, #40]	; (8002ad4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002aac:	4c0a      	ldr	r4, [pc, #40]	; (8002ad8 <LoopForever+0x16>)
  movs r3, #0
 8002aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ab0:	e001      	b.n	8002ab6 <LoopFillZerobss>

08002ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ab4:	3204      	adds	r2, #4

08002ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ab8:	d3fb      	bcc.n	8002ab2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002aba:	f002 fb05 	bl	80050c8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002abe:	f7ff fd57 	bl	8002570 <main>

08002ac2 <LoopForever>:

LoopForever:
  b LoopForever
 8002ac2:	e7fe      	b.n	8002ac2 <LoopForever>
  ldr   r0, =_estack
 8002ac4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002acc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002ad0:	080062a8 	.word	0x080062a8
  ldr r2, =_sbss
 8002ad4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002ad8:	200001c8 	.word	0x200001c8

08002adc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002adc:	e7fe      	b.n	8002adc <ADC1_IRQHandler>
	...

08002ae0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ae6:	1dfb      	adds	r3, r7, #7
 8002ae8:	2200      	movs	r2, #0
 8002aea:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002aec:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <HAL_Init+0x3c>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	4b0a      	ldr	r3, [pc, #40]	; (8002b1c <HAL_Init+0x3c>)
 8002af2:	2180      	movs	r1, #128	; 0x80
 8002af4:	0049      	lsls	r1, r1, #1
 8002af6:	430a      	orrs	r2, r1
 8002af8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002afa:	2000      	movs	r0, #0
 8002afc:	f000 f810 	bl	8002b20 <HAL_InitTick>
 8002b00:	1e03      	subs	r3, r0, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002b04:	1dfb      	adds	r3, r7, #7
 8002b06:	2201      	movs	r2, #1
 8002b08:	701a      	strb	r2, [r3, #0]
 8002b0a:	e001      	b.n	8002b10 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002b0c:	f7ff feac 	bl	8002868 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b10:	1dfb      	adds	r3, r7, #7
 8002b12:	781b      	ldrb	r3, [r3, #0]
}
 8002b14:	0018      	movs	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	b002      	add	sp, #8
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40022000 	.word	0x40022000

08002b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b20:	b590      	push	{r4, r7, lr}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b28:	230f      	movs	r3, #15
 8002b2a:	18fb      	adds	r3, r7, r3
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002b30:	4b1d      	ldr	r3, [pc, #116]	; (8002ba8 <HAL_InitTick+0x88>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d02b      	beq.n	8002b90 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002b38:	4b1c      	ldr	r3, [pc, #112]	; (8002bac <HAL_InitTick+0x8c>)
 8002b3a:	681c      	ldr	r4, [r3, #0]
 8002b3c:	4b1a      	ldr	r3, [pc, #104]	; (8002ba8 <HAL_InitTick+0x88>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	0019      	movs	r1, r3
 8002b42:	23fa      	movs	r3, #250	; 0xfa
 8002b44:	0098      	lsls	r0, r3, #2
 8002b46:	f7fd fae3 	bl	8000110 <__udivsi3>
 8002b4a:	0003      	movs	r3, r0
 8002b4c:	0019      	movs	r1, r3
 8002b4e:	0020      	movs	r0, r4
 8002b50:	f7fd fade 	bl	8000110 <__udivsi3>
 8002b54:	0003      	movs	r3, r0
 8002b56:	0018      	movs	r0, r3
 8002b58:	f000 f929 	bl	8002dae <HAL_SYSTICK_Config>
 8002b5c:	1e03      	subs	r3, r0, #0
 8002b5e:	d112      	bne.n	8002b86 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	d80a      	bhi.n	8002b7c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	2301      	movs	r3, #1
 8002b6a:	425b      	negs	r3, r3
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	0018      	movs	r0, r3
 8002b70:	f000 f908 	bl	8002d84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b74:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <HAL_InitTick+0x90>)
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	e00d      	b.n	8002b98 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002b7c:	230f      	movs	r3, #15
 8002b7e:	18fb      	adds	r3, r7, r3
 8002b80:	2201      	movs	r2, #1
 8002b82:	701a      	strb	r2, [r3, #0]
 8002b84:	e008      	b.n	8002b98 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b86:	230f      	movs	r3, #15
 8002b88:	18fb      	adds	r3, r7, r3
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	701a      	strb	r2, [r3, #0]
 8002b8e:	e003      	b.n	8002b98 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b90:	230f      	movs	r3, #15
 8002b92:	18fb      	adds	r3, r7, r3
 8002b94:	2201      	movs	r2, #1
 8002b96:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002b98:	230f      	movs	r3, #15
 8002b9a:	18fb      	adds	r3, r7, r3
 8002b9c:	781b      	ldrb	r3, [r3, #0]
}
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	b005      	add	sp, #20
 8002ba4:	bd90      	pop	{r4, r7, pc}
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	20000014 	.word	0x20000014
 8002bac:	2000000c 	.word	0x2000000c
 8002bb0:	20000010 	.word	0x20000010

08002bb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002bb8:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <HAL_IncTick+0x1c>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	001a      	movs	r2, r3
 8002bbe:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <HAL_IncTick+0x20>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	18d2      	adds	r2, r2, r3
 8002bc4:	4b03      	ldr	r3, [pc, #12]	; (8002bd4 <HAL_IncTick+0x20>)
 8002bc6:	601a      	str	r2, [r3, #0]
}
 8002bc8:	46c0      	nop			; (mov r8, r8)
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	20000014 	.word	0x20000014
 8002bd4:	200001b4 	.word	0x200001b4

08002bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  return uwTick;
 8002bdc:	4b02      	ldr	r3, [pc, #8]	; (8002be8 <HAL_GetTick+0x10>)
 8002bde:	681b      	ldr	r3, [r3, #0]
}
 8002be0:	0018      	movs	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	200001b4 	.word	0x200001b4

08002bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bf4:	f7ff fff0 	bl	8002bd8 <HAL_GetTick>
 8002bf8:	0003      	movs	r3, r0
 8002bfa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	3301      	adds	r3, #1
 8002c04:	d005      	beq.n	8002c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c06:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <HAL_Delay+0x44>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	001a      	movs	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	189b      	adds	r3, r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	f7ff ffe0 	bl	8002bd8 <HAL_GetTick>
 8002c18:	0002      	movs	r2, r0
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d8f7      	bhi.n	8002c14 <HAL_Delay+0x28>
  {
  }
}
 8002c24:	46c0      	nop			; (mov r8, r8)
 8002c26:	46c0      	nop			; (mov r8, r8)
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	b004      	add	sp, #16
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	46c0      	nop			; (mov r8, r8)
 8002c30:	20000014 	.word	0x20000014

08002c34 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002c3c:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a06      	ldr	r2, [pc, #24]	; (8002c5c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8002c42:	4013      	ands	r3, r2
 8002c44:	0019      	movs	r1, r3
 8002c46:	4b04      	ldr	r3, [pc, #16]	; (8002c58 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	601a      	str	r2, [r3, #0]
}
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	46bd      	mov	sp, r7
 8002c52:	b002      	add	sp, #8
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	40010000 	.word	0x40010000
 8002c5c:	fffff9ff 	.word	0xfffff9ff

08002c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c60:	b590      	push	{r4, r7, lr}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	0002      	movs	r2, r0
 8002c68:	6039      	str	r1, [r7, #0]
 8002c6a:	1dfb      	adds	r3, r7, #7
 8002c6c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c6e:	1dfb      	adds	r3, r7, #7
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b7f      	cmp	r3, #127	; 0x7f
 8002c74:	d828      	bhi.n	8002cc8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c76:	4a2f      	ldr	r2, [pc, #188]	; (8002d34 <__NVIC_SetPriority+0xd4>)
 8002c78:	1dfb      	adds	r3, r7, #7
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	b25b      	sxtb	r3, r3
 8002c7e:	089b      	lsrs	r3, r3, #2
 8002c80:	33c0      	adds	r3, #192	; 0xc0
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	589b      	ldr	r3, [r3, r2]
 8002c86:	1dfa      	adds	r2, r7, #7
 8002c88:	7812      	ldrb	r2, [r2, #0]
 8002c8a:	0011      	movs	r1, r2
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	400a      	ands	r2, r1
 8002c90:	00d2      	lsls	r2, r2, #3
 8002c92:	21ff      	movs	r1, #255	; 0xff
 8002c94:	4091      	lsls	r1, r2
 8002c96:	000a      	movs	r2, r1
 8002c98:	43d2      	mvns	r2, r2
 8002c9a:	401a      	ands	r2, r3
 8002c9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	019b      	lsls	r3, r3, #6
 8002ca2:	22ff      	movs	r2, #255	; 0xff
 8002ca4:	401a      	ands	r2, r3
 8002ca6:	1dfb      	adds	r3, r7, #7
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	0018      	movs	r0, r3
 8002cac:	2303      	movs	r3, #3
 8002cae:	4003      	ands	r3, r0
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cb4:	481f      	ldr	r0, [pc, #124]	; (8002d34 <__NVIC_SetPriority+0xd4>)
 8002cb6:	1dfb      	adds	r3, r7, #7
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	b25b      	sxtb	r3, r3
 8002cbc:	089b      	lsrs	r3, r3, #2
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	33c0      	adds	r3, #192	; 0xc0
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002cc6:	e031      	b.n	8002d2c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cc8:	4a1b      	ldr	r2, [pc, #108]	; (8002d38 <__NVIC_SetPriority+0xd8>)
 8002cca:	1dfb      	adds	r3, r7, #7
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	0019      	movs	r1, r3
 8002cd0:	230f      	movs	r3, #15
 8002cd2:	400b      	ands	r3, r1
 8002cd4:	3b08      	subs	r3, #8
 8002cd6:	089b      	lsrs	r3, r3, #2
 8002cd8:	3306      	adds	r3, #6
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	18d3      	adds	r3, r2, r3
 8002cde:	3304      	adds	r3, #4
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	1dfa      	adds	r2, r7, #7
 8002ce4:	7812      	ldrb	r2, [r2, #0]
 8002ce6:	0011      	movs	r1, r2
 8002ce8:	2203      	movs	r2, #3
 8002cea:	400a      	ands	r2, r1
 8002cec:	00d2      	lsls	r2, r2, #3
 8002cee:	21ff      	movs	r1, #255	; 0xff
 8002cf0:	4091      	lsls	r1, r2
 8002cf2:	000a      	movs	r2, r1
 8002cf4:	43d2      	mvns	r2, r2
 8002cf6:	401a      	ands	r2, r3
 8002cf8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	019b      	lsls	r3, r3, #6
 8002cfe:	22ff      	movs	r2, #255	; 0xff
 8002d00:	401a      	ands	r2, r3
 8002d02:	1dfb      	adds	r3, r7, #7
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	0018      	movs	r0, r3
 8002d08:	2303      	movs	r3, #3
 8002d0a:	4003      	ands	r3, r0
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d10:	4809      	ldr	r0, [pc, #36]	; (8002d38 <__NVIC_SetPriority+0xd8>)
 8002d12:	1dfb      	adds	r3, r7, #7
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	001c      	movs	r4, r3
 8002d18:	230f      	movs	r3, #15
 8002d1a:	4023      	ands	r3, r4
 8002d1c:	3b08      	subs	r3, #8
 8002d1e:	089b      	lsrs	r3, r3, #2
 8002d20:	430a      	orrs	r2, r1
 8002d22:	3306      	adds	r3, #6
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	18c3      	adds	r3, r0, r3
 8002d28:	3304      	adds	r3, #4
 8002d2a:	601a      	str	r2, [r3, #0]
}
 8002d2c:	46c0      	nop			; (mov r8, r8)
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	b003      	add	sp, #12
 8002d32:	bd90      	pop	{r4, r7, pc}
 8002d34:	e000e100 	.word	0xe000e100
 8002d38:	e000ed00 	.word	0xe000ed00

08002d3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	1e5a      	subs	r2, r3, #1
 8002d48:	2380      	movs	r3, #128	; 0x80
 8002d4a:	045b      	lsls	r3, r3, #17
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d301      	bcc.n	8002d54 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d50:	2301      	movs	r3, #1
 8002d52:	e010      	b.n	8002d76 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d54:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <SysTick_Config+0x44>)
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	3a01      	subs	r2, #1
 8002d5a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	425b      	negs	r3, r3
 8002d60:	2103      	movs	r1, #3
 8002d62:	0018      	movs	r0, r3
 8002d64:	f7ff ff7c 	bl	8002c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d68:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <SysTick_Config+0x44>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d6e:	4b04      	ldr	r3, [pc, #16]	; (8002d80 <SysTick_Config+0x44>)
 8002d70:	2207      	movs	r2, #7
 8002d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	0018      	movs	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	b002      	add	sp, #8
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	e000e010 	.word	0xe000e010

08002d84 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	607a      	str	r2, [r7, #4]
 8002d8e:	210f      	movs	r1, #15
 8002d90:	187b      	adds	r3, r7, r1
 8002d92:	1c02      	adds	r2, r0, #0
 8002d94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	187b      	adds	r3, r7, r1
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	b25b      	sxtb	r3, r3
 8002d9e:	0011      	movs	r1, r2
 8002da0:	0018      	movs	r0, r3
 8002da2:	f7ff ff5d 	bl	8002c60 <__NVIC_SetPriority>
}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	46bd      	mov	sp, r7
 8002daa:	b004      	add	sp, #16
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	0018      	movs	r0, r3
 8002dba:	f7ff ffbf 	bl	8002d3c <SysTick_Config>
 8002dbe:	0003      	movs	r3, r0
}
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	b002      	add	sp, #8
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dd6:	e147      	b.n	8003068 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2101      	movs	r1, #1
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	4091      	lsls	r1, r2
 8002de2:	000a      	movs	r2, r1
 8002de4:	4013      	ands	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d100      	bne.n	8002df0 <HAL_GPIO_Init+0x28>
 8002dee:	e138      	b.n	8003062 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2203      	movs	r2, #3
 8002df6:	4013      	ands	r3, r2
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d005      	beq.n	8002e08 <HAL_GPIO_Init+0x40>
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2203      	movs	r2, #3
 8002e02:	4013      	ands	r3, r2
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d130      	bne.n	8002e6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	2203      	movs	r2, #3
 8002e14:	409a      	lsls	r2, r3
 8002e16:	0013      	movs	r3, r2
 8002e18:	43da      	mvns	r2, r3
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	409a      	lsls	r2, r3
 8002e2a:	0013      	movs	r3, r2
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e3e:	2201      	movs	r2, #1
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	409a      	lsls	r2, r3
 8002e44:	0013      	movs	r3, r2
 8002e46:	43da      	mvns	r2, r3
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	091b      	lsrs	r3, r3, #4
 8002e54:	2201      	movs	r2, #1
 8002e56:	401a      	ands	r2, r3
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	409a      	lsls	r2, r3
 8002e5c:	0013      	movs	r3, r2
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2203      	movs	r2, #3
 8002e70:	4013      	ands	r3, r2
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	d017      	beq.n	8002ea6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	2203      	movs	r2, #3
 8002e82:	409a      	lsls	r2, r3
 8002e84:	0013      	movs	r3, r2
 8002e86:	43da      	mvns	r2, r3
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	409a      	lsls	r2, r3
 8002e98:	0013      	movs	r3, r2
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2203      	movs	r2, #3
 8002eac:	4013      	ands	r3, r2
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d123      	bne.n	8002efa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	08da      	lsrs	r2, r3, #3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3208      	adds	r2, #8
 8002eba:	0092      	lsls	r2, r2, #2
 8002ebc:	58d3      	ldr	r3, [r2, r3]
 8002ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2207      	movs	r2, #7
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	220f      	movs	r2, #15
 8002eca:	409a      	lsls	r2, r3
 8002ecc:	0013      	movs	r3, r2
 8002ece:	43da      	mvns	r2, r3
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	691a      	ldr	r2, [r3, #16]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	2107      	movs	r1, #7
 8002ede:	400b      	ands	r3, r1
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	409a      	lsls	r2, r3
 8002ee4:	0013      	movs	r3, r2
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	08da      	lsrs	r2, r3, #3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3208      	adds	r2, #8
 8002ef4:	0092      	lsls	r2, r2, #2
 8002ef6:	6939      	ldr	r1, [r7, #16]
 8002ef8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	2203      	movs	r2, #3
 8002f06:	409a      	lsls	r2, r3
 8002f08:	0013      	movs	r3, r2
 8002f0a:	43da      	mvns	r2, r3
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2203      	movs	r2, #3
 8002f18:	401a      	ands	r2, r3
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	0013      	movs	r3, r2
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	23c0      	movs	r3, #192	; 0xc0
 8002f34:	029b      	lsls	r3, r3, #10
 8002f36:	4013      	ands	r3, r2
 8002f38:	d100      	bne.n	8002f3c <HAL_GPIO_Init+0x174>
 8002f3a:	e092      	b.n	8003062 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002f3c:	4a50      	ldr	r2, [pc, #320]	; (8003080 <HAL_GPIO_Init+0x2b8>)
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	089b      	lsrs	r3, r3, #2
 8002f42:	3318      	adds	r3, #24
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	589b      	ldr	r3, [r3, r2]
 8002f48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	4013      	ands	r3, r2
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	220f      	movs	r2, #15
 8002f54:	409a      	lsls	r2, r3
 8002f56:	0013      	movs	r3, r2
 8002f58:	43da      	mvns	r2, r3
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	23a0      	movs	r3, #160	; 0xa0
 8002f64:	05db      	lsls	r3, r3, #23
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d013      	beq.n	8002f92 <HAL_GPIO_Init+0x1ca>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a45      	ldr	r2, [pc, #276]	; (8003084 <HAL_GPIO_Init+0x2bc>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d00d      	beq.n	8002f8e <HAL_GPIO_Init+0x1c6>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a44      	ldr	r2, [pc, #272]	; (8003088 <HAL_GPIO_Init+0x2c0>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d007      	beq.n	8002f8a <HAL_GPIO_Init+0x1c2>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a43      	ldr	r2, [pc, #268]	; (800308c <HAL_GPIO_Init+0x2c4>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d101      	bne.n	8002f86 <HAL_GPIO_Init+0x1be>
 8002f82:	2303      	movs	r3, #3
 8002f84:	e006      	b.n	8002f94 <HAL_GPIO_Init+0x1cc>
 8002f86:	2305      	movs	r3, #5
 8002f88:	e004      	b.n	8002f94 <HAL_GPIO_Init+0x1cc>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	e002      	b.n	8002f94 <HAL_GPIO_Init+0x1cc>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e000      	b.n	8002f94 <HAL_GPIO_Init+0x1cc>
 8002f92:	2300      	movs	r3, #0
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	2103      	movs	r1, #3
 8002f98:	400a      	ands	r2, r1
 8002f9a:	00d2      	lsls	r2, r2, #3
 8002f9c:	4093      	lsls	r3, r2
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002fa4:	4936      	ldr	r1, [pc, #216]	; (8003080 <HAL_GPIO_Init+0x2b8>)
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	089b      	lsrs	r3, r3, #2
 8002faa:	3318      	adds	r3, #24
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002fb2:	4a33      	ldr	r2, [pc, #204]	; (8003080 <HAL_GPIO_Init+0x2b8>)
 8002fb4:	2380      	movs	r3, #128	; 0x80
 8002fb6:	58d3      	ldr	r3, [r2, r3]
 8002fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	43da      	mvns	r2, r3
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	2380      	movs	r3, #128	; 0x80
 8002fca:	025b      	lsls	r3, r3, #9
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d003      	beq.n	8002fd8 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002fd8:	4929      	ldr	r1, [pc, #164]	; (8003080 <HAL_GPIO_Init+0x2b8>)
 8002fda:	2280      	movs	r2, #128	; 0x80
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8002fe0:	4a27      	ldr	r2, [pc, #156]	; (8003080 <HAL_GPIO_Init+0x2b8>)
 8002fe2:	2384      	movs	r3, #132	; 0x84
 8002fe4:	58d3      	ldr	r3, [r2, r3]
 8002fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	43da      	mvns	r2, r3
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	2380      	movs	r3, #128	; 0x80
 8002ff8:	029b      	lsls	r3, r3, #10
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d003      	beq.n	8003006 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4313      	orrs	r3, r2
 8003004:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003006:	491e      	ldr	r1, [pc, #120]	; (8003080 <HAL_GPIO_Init+0x2b8>)
 8003008:	2284      	movs	r2, #132	; 0x84
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800300e:	4b1c      	ldr	r3, [pc, #112]	; (8003080 <HAL_GPIO_Init+0x2b8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	43da      	mvns	r2, r3
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4013      	ands	r3, r2
 800301c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	2380      	movs	r3, #128	; 0x80
 8003024:	035b      	lsls	r3, r3, #13
 8003026:	4013      	ands	r3, r2
 8003028:	d003      	beq.n	8003032 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4313      	orrs	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003032:	4b13      	ldr	r3, [pc, #76]	; (8003080 <HAL_GPIO_Init+0x2b8>)
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003038:	4b11      	ldr	r3, [pc, #68]	; (8003080 <HAL_GPIO_Init+0x2b8>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	43da      	mvns	r2, r3
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4013      	ands	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	2380      	movs	r3, #128	; 0x80
 800304e:	039b      	lsls	r3, r3, #14
 8003050:	4013      	ands	r3, r2
 8003052:	d003      	beq.n	800305c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	4313      	orrs	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800305c:	4b08      	ldr	r3, [pc, #32]	; (8003080 <HAL_GPIO_Init+0x2b8>)
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	3301      	adds	r3, #1
 8003066:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	40da      	lsrs	r2, r3
 8003070:	1e13      	subs	r3, r2, #0
 8003072:	d000      	beq.n	8003076 <HAL_GPIO_Init+0x2ae>
 8003074:	e6b0      	b.n	8002dd8 <HAL_GPIO_Init+0x10>
  }
}
 8003076:	46c0      	nop			; (mov r8, r8)
 8003078:	46c0      	nop			; (mov r8, r8)
 800307a:	46bd      	mov	sp, r7
 800307c:	b006      	add	sp, #24
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40021800 	.word	0x40021800
 8003084:	50000400 	.word	0x50000400
 8003088:	50000800 	.word	0x50000800
 800308c:	50000c00 	.word	0x50000c00

08003090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	0008      	movs	r0, r1
 800309a:	0011      	movs	r1, r2
 800309c:	1cbb      	adds	r3, r7, #2
 800309e:	1c02      	adds	r2, r0, #0
 80030a0:	801a      	strh	r2, [r3, #0]
 80030a2:	1c7b      	adds	r3, r7, #1
 80030a4:	1c0a      	adds	r2, r1, #0
 80030a6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030a8:	1c7b      	adds	r3, r7, #1
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d004      	beq.n	80030ba <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030b0:	1cbb      	adds	r3, r7, #2
 80030b2:	881a      	ldrh	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030b8:	e003      	b.n	80030c2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030ba:	1cbb      	adds	r3, r7, #2
 80030bc:	881a      	ldrh	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	46bd      	mov	sp, r7
 80030c6:	b002      	add	sp, #8
 80030c8:	bd80      	pop	{r7, pc}
	...

080030cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e082      	b.n	80031e4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2241      	movs	r2, #65	; 0x41
 80030e2:	5c9b      	ldrb	r3, [r3, r2]
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d107      	bne.n	80030fa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2240      	movs	r2, #64	; 0x40
 80030ee:	2100      	movs	r1, #0
 80030f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	0018      	movs	r0, r3
 80030f6:	f7ff fbdf 	bl	80028b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2241      	movs	r2, #65	; 0x41
 80030fe:	2124      	movs	r1, #36	; 0x24
 8003100:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2101      	movs	r1, #1
 800310e:	438a      	bics	r2, r1
 8003110:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4934      	ldr	r1, [pc, #208]	; (80031ec <HAL_I2C_Init+0x120>)
 800311c:	400a      	ands	r2, r1
 800311e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4931      	ldr	r1, [pc, #196]	; (80031f0 <HAL_I2C_Init+0x124>)
 800312c:	400a      	ands	r2, r1
 800312e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d108      	bne.n	800314a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2180      	movs	r1, #128	; 0x80
 8003142:	0209      	lsls	r1, r1, #8
 8003144:	430a      	orrs	r2, r1
 8003146:	609a      	str	r2, [r3, #8]
 8003148:	e007      	b.n	800315a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2184      	movs	r1, #132	; 0x84
 8003154:	0209      	lsls	r1, r1, #8
 8003156:	430a      	orrs	r2, r1
 8003158:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	2b02      	cmp	r3, #2
 8003160:	d104      	bne.n	800316c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2280      	movs	r2, #128	; 0x80
 8003168:	0112      	lsls	r2, r2, #4
 800316a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	491f      	ldr	r1, [pc, #124]	; (80031f4 <HAL_I2C_Init+0x128>)
 8003178:	430a      	orrs	r2, r1
 800317a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68da      	ldr	r2, [r3, #12]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	491a      	ldr	r1, [pc, #104]	; (80031f0 <HAL_I2C_Init+0x124>)
 8003188:	400a      	ands	r2, r1
 800318a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691a      	ldr	r2, [r3, #16]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	431a      	orrs	r2, r3
 8003196:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69d9      	ldr	r1, [r3, #28]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1a      	ldr	r2, [r3, #32]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2101      	movs	r1, #1
 80031c2:	430a      	orrs	r2, r1
 80031c4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2241      	movs	r2, #65	; 0x41
 80031d0:	2120      	movs	r1, #32
 80031d2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2242      	movs	r2, #66	; 0x42
 80031de:	2100      	movs	r1, #0
 80031e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	0018      	movs	r0, r3
 80031e6:	46bd      	mov	sp, r7
 80031e8:	b002      	add	sp, #8
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	f0ffffff 	.word	0xf0ffffff
 80031f0:	ffff7fff 	.word	0xffff7fff
 80031f4:	02008000 	.word	0x02008000

080031f8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size, uint32_t Timeout)
{
 80031f8:	b590      	push	{r4, r7, lr}
 80031fa:	b089      	sub	sp, #36	; 0x24
 80031fc:	af02      	add	r7, sp, #8
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	0008      	movs	r0, r1
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	0019      	movs	r1, r3
 8003206:	230a      	movs	r3, #10
 8003208:	18fb      	adds	r3, r7, r3
 800320a:	1c02      	adds	r2, r0, #0
 800320c:	801a      	strh	r2, [r3, #0]
 800320e:	2308      	movs	r3, #8
 8003210:	18fb      	adds	r3, r7, r3
 8003212:	1c0a      	adds	r2, r1, #0
 8003214:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2241      	movs	r2, #65	; 0x41
 800321a:	5c9b      	ldrb	r3, [r3, r2]
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b20      	cmp	r3, #32
 8003220:	d000      	beq.n	8003224 <HAL_I2C_Master_Transmit+0x2c>
 8003222:	e0e7      	b.n	80033f4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2240      	movs	r2, #64	; 0x40
 8003228:	5c9b      	ldrb	r3, [r3, r2]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d101      	bne.n	8003232 <HAL_I2C_Master_Transmit+0x3a>
 800322e:	2302      	movs	r3, #2
 8003230:	e0e1      	b.n	80033f6 <HAL_I2C_Master_Transmit+0x1fe>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2240      	movs	r2, #64	; 0x40
 8003236:	2101      	movs	r1, #1
 8003238:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800323a:	f7ff fccd 	bl	8002bd8 <HAL_GetTick>
 800323e:	0003      	movs	r3, r0
 8003240:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003242:	2380      	movs	r3, #128	; 0x80
 8003244:	0219      	lsls	r1, r3, #8
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	2319      	movs	r3, #25
 800324e:	2201      	movs	r2, #1
 8003250:	f000 fa16 	bl	8003680 <I2C_WaitOnFlagUntilTimeout>
 8003254:	1e03      	subs	r3, r0, #0
 8003256:	d001      	beq.n	800325c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e0cc      	b.n	80033f6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2241      	movs	r2, #65	; 0x41
 8003260:	2121      	movs	r1, #33	; 0x21
 8003262:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2242      	movs	r2, #66	; 0x42
 8003268:	2110      	movs	r1, #16
 800326a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2208      	movs	r2, #8
 800327c:	18ba      	adds	r2, r7, r2
 800327e:	8812      	ldrh	r2, [r2, #0]
 8003280:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328c:	b29b      	uxth	r3, r3
 800328e:	2bff      	cmp	r3, #255	; 0xff
 8003290:	d911      	bls.n	80032b6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	22ff      	movs	r2, #255	; 0xff
 8003296:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329c:	b2da      	uxtb	r2, r3
 800329e:	2380      	movs	r3, #128	; 0x80
 80032a0:	045c      	lsls	r4, r3, #17
 80032a2:	230a      	movs	r3, #10
 80032a4:	18fb      	adds	r3, r7, r3
 80032a6:	8819      	ldrh	r1, [r3, #0]
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	4b55      	ldr	r3, [pc, #340]	; (8003400 <HAL_I2C_Master_Transmit+0x208>)
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	0023      	movs	r3, r4
 80032b0:	f000 fb1a 	bl	80038e8 <I2C_TransferConfig>
 80032b4:	e075      	b.n	80033a2 <HAL_I2C_Master_Transmit+0x1aa>
                            I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	2380      	movs	r3, #128	; 0x80
 80032c8:	049c      	lsls	r4, r3, #18
 80032ca:	230a      	movs	r3, #10
 80032cc:	18fb      	adds	r3, r7, r3
 80032ce:	8819      	ldrh	r1, [r3, #0]
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	4b4b      	ldr	r3, [pc, #300]	; (8003400 <HAL_I2C_Master_Transmit+0x208>)
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	0023      	movs	r3, r4
 80032d8:	f000 fb06 	bl	80038e8 <I2C_TransferConfig>
                            I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80032dc:	e061      	b.n	80033a2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	0018      	movs	r0, r3
 80032e6:	f000 fa0a 	bl	80036fe <I2C_WaitOnTXISFlagUntilTimeout>
 80032ea:	1e03      	subs	r3, r0, #0
 80032ec:	d001      	beq.n	80032f2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e081      	b.n	80033f6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	781a      	ldrb	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	1c5a      	adds	r2, r3, #1
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330c:	b29b      	uxth	r3, r3
 800330e:	3b01      	subs	r3, #1
 8003310:	b29a      	uxth	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331a:	3b01      	subs	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003326:	b29b      	uxth	r3, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	d03a      	beq.n	80033a2 <HAL_I2C_Master_Transmit+0x1aa>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003330:	2b00      	cmp	r3, #0
 8003332:	d136      	bne.n	80033a2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003334:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	0013      	movs	r3, r2
 800333e:	2200      	movs	r2, #0
 8003340:	2180      	movs	r1, #128	; 0x80
 8003342:	f000 f99d 	bl	8003680 <I2C_WaitOnFlagUntilTimeout>
 8003346:	1e03      	subs	r3, r0, #0
 8003348:	d001      	beq.n	800334e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e053      	b.n	80033f6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003352:	b29b      	uxth	r3, r3
 8003354:	2bff      	cmp	r3, #255	; 0xff
 8003356:	d911      	bls.n	800337c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	22ff      	movs	r2, #255	; 0xff
 800335c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003362:	b2da      	uxtb	r2, r3
 8003364:	2380      	movs	r3, #128	; 0x80
 8003366:	045c      	lsls	r4, r3, #17
 8003368:	230a      	movs	r3, #10
 800336a:	18fb      	adds	r3, r7, r3
 800336c:	8819      	ldrh	r1, [r3, #0]
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	2300      	movs	r3, #0
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	0023      	movs	r3, r4
 8003376:	f000 fab7 	bl	80038e8 <I2C_TransferConfig>
 800337a:	e012      	b.n	80033a2 <HAL_I2C_Master_Transmit+0x1aa>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003380:	b29a      	uxth	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800338a:	b2da      	uxtb	r2, r3
 800338c:	2380      	movs	r3, #128	; 0x80
 800338e:	049c      	lsls	r4, r3, #18
 8003390:	230a      	movs	r3, #10
 8003392:	18fb      	adds	r3, r7, r3
 8003394:	8819      	ldrh	r1, [r3, #0]
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	2300      	movs	r3, #0
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	0023      	movs	r3, r4
 800339e:	f000 faa3 	bl	80038e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d198      	bne.n	80032de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	0018      	movs	r0, r3
 80033b4:	f000 f9e2 	bl	800377c <I2C_WaitOnSTOPFlagUntilTimeout>
 80033b8:	1e03      	subs	r3, r0, #0
 80033ba:	d001      	beq.n	80033c0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e01a      	b.n	80033f6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2220      	movs	r2, #32
 80033c6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	490c      	ldr	r1, [pc, #48]	; (8003404 <HAL_I2C_Master_Transmit+0x20c>)
 80033d4:	400a      	ands	r2, r1
 80033d6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2241      	movs	r2, #65	; 0x41
 80033dc:	2120      	movs	r1, #32
 80033de:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2242      	movs	r2, #66	; 0x42
 80033e4:	2100      	movs	r1, #0
 80033e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2240      	movs	r2, #64	; 0x40
 80033ec:	2100      	movs	r1, #0
 80033ee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	e000      	b.n	80033f6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80033f4:	2302      	movs	r3, #2
  }
}
 80033f6:	0018      	movs	r0, r3
 80033f8:	46bd      	mov	sp, r7
 80033fa:	b007      	add	sp, #28
 80033fc:	bd90      	pop	{r4, r7, pc}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	80002000 	.word	0x80002000
 8003404:	fe00e800 	.word	0xfe00e800

08003408 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                           uint32_t Timeout)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08a      	sub	sp, #40	; 0x28
 800340c:	af02      	add	r7, sp, #8
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	607a      	str	r2, [r7, #4]
 8003412:	603b      	str	r3, [r7, #0]
 8003414:	230a      	movs	r3, #10
 8003416:	18fb      	adds	r3, r7, r3
 8003418:	1c0a      	adds	r2, r1, #0
 800341a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2241      	movs	r2, #65	; 0x41
 8003424:	5c9b      	ldrb	r3, [r3, r2]
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b20      	cmp	r3, #32
 800342a:	d000      	beq.n	800342e <HAL_I2C_IsDeviceReady+0x26>
 800342c:	e0fe      	b.n	800362c <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	699a      	ldr	r2, [r3, #24]
 8003434:	2380      	movs	r3, #128	; 0x80
 8003436:	021b      	lsls	r3, r3, #8
 8003438:	401a      	ands	r2, r3
 800343a:	2380      	movs	r3, #128	; 0x80
 800343c:	021b      	lsls	r3, r3, #8
 800343e:	429a      	cmp	r2, r3
 8003440:	d101      	bne.n	8003446 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8003442:	2302      	movs	r3, #2
 8003444:	e0f3      	b.n	800362e <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2240      	movs	r2, #64	; 0x40
 800344a:	5c9b      	ldrb	r3, [r3, r2]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d101      	bne.n	8003454 <HAL_I2C_IsDeviceReady+0x4c>
 8003450:	2302      	movs	r3, #2
 8003452:	e0ec      	b.n	800362e <HAL_I2C_IsDeviceReady+0x226>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2240      	movs	r2, #64	; 0x40
 8003458:	2101      	movs	r1, #1
 800345a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2241      	movs	r2, #65	; 0x41
 8003460:	2124      	movs	r1, #36	; 0x24
 8003462:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d107      	bne.n	8003482 <HAL_I2C_IsDeviceReady+0x7a>
 8003472:	230a      	movs	r3, #10
 8003474:	18fb      	adds	r3, r7, r3
 8003476:	881b      	ldrh	r3, [r3, #0]
 8003478:	059b      	lsls	r3, r3, #22
 800347a:	0d9b      	lsrs	r3, r3, #22
 800347c:	4a6e      	ldr	r2, [pc, #440]	; (8003638 <HAL_I2C_IsDeviceReady+0x230>)
 800347e:	431a      	orrs	r2, r3
 8003480:	e007      	b.n	8003492 <HAL_I2C_IsDeviceReady+0x8a>
 8003482:	230a      	movs	r3, #10
 8003484:	18fb      	adds	r3, r7, r3
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	059b      	lsls	r3, r3, #22
 800348a:	0d9b      	lsrs	r3, r3, #22
 800348c:	22a0      	movs	r2, #160	; 0xa0
 800348e:	0192      	lsls	r2, r2, #6
 8003490:	431a      	orrs	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003498:	f7ff fb9e 	bl	8002bd8 <HAL_GetTick>
 800349c:	0003      	movs	r3, r0
 800349e:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	2220      	movs	r2, #32
 80034a8:	4013      	ands	r3, r2
 80034aa:	3b20      	subs	r3, #32
 80034ac:	425a      	negs	r2, r3
 80034ae:	4153      	adcs	r3, r2
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	231f      	movs	r3, #31
 80034b4:	18fb      	adds	r3, r7, r3
 80034b6:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	2210      	movs	r2, #16
 80034c0:	4013      	ands	r3, r2
 80034c2:	3b10      	subs	r3, #16
 80034c4:	425a      	negs	r2, r3
 80034c6:	4153      	adcs	r3, r2
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	231e      	movs	r3, #30
 80034cc:	18fb      	adds	r3, r7, r3
 80034ce:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80034d0:	e035      	b.n	800353e <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	3301      	adds	r3, #1
 80034d6:	d01a      	beq.n	800350e <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80034d8:	f7ff fb7e 	bl	8002bd8 <HAL_GetTick>
 80034dc:	0002      	movs	r2, r0
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d302      	bcc.n	80034ee <HAL_I2C_IsDeviceReady+0xe6>
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10f      	bne.n	800350e <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2241      	movs	r2, #65	; 0x41
 80034f2:	2120      	movs	r1, #32
 80034f4:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fa:	2220      	movs	r2, #32
 80034fc:	431a      	orrs	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2240      	movs	r2, #64	; 0x40
 8003506:	2100      	movs	r1, #0
 8003508:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e08f      	b.n	800362e <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	2220      	movs	r2, #32
 8003516:	4013      	ands	r3, r2
 8003518:	3b20      	subs	r3, #32
 800351a:	425a      	negs	r2, r3
 800351c:	4153      	adcs	r3, r2
 800351e:	b2da      	uxtb	r2, r3
 8003520:	231f      	movs	r3, #31
 8003522:	18fb      	adds	r3, r7, r3
 8003524:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	2210      	movs	r2, #16
 800352e:	4013      	ands	r3, r2
 8003530:	3b10      	subs	r3, #16
 8003532:	425a      	negs	r2, r3
 8003534:	4153      	adcs	r3, r2
 8003536:	b2da      	uxtb	r2, r3
 8003538:	231e      	movs	r3, #30
 800353a:	18fb      	adds	r3, r7, r3
 800353c:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800353e:	231f      	movs	r3, #31
 8003540:	18fb      	adds	r3, r7, r3
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d104      	bne.n	8003552 <HAL_I2C_IsDeviceReady+0x14a>
 8003548:	231e      	movs	r3, #30
 800354a:	18fb      	adds	r3, r7, r3
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0bf      	beq.n	80034d2 <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	2210      	movs	r2, #16
 800355a:	4013      	ands	r3, r2
 800355c:	2b10      	cmp	r3, #16
 800355e:	d01a      	beq.n	8003596 <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	0013      	movs	r3, r2
 800356a:	2200      	movs	r2, #0
 800356c:	2120      	movs	r1, #32
 800356e:	f000 f887 	bl	8003680 <I2C_WaitOnFlagUntilTimeout>
 8003572:	1e03      	subs	r3, r0, #0
 8003574:	d001      	beq.n	800357a <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e059      	b.n	800362e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2220      	movs	r2, #32
 8003580:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2241      	movs	r2, #65	; 0x41
 8003586:	2120      	movs	r1, #32
 8003588:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2240      	movs	r2, #64	; 0x40
 800358e:	2100      	movs	r1, #0
 8003590:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	e04b      	b.n	800362e <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	0013      	movs	r3, r2
 80035a0:	2200      	movs	r2, #0
 80035a2:	2120      	movs	r1, #32
 80035a4:	f000 f86c 	bl	8003680 <I2C_WaitOnFlagUntilTimeout>
 80035a8:	1e03      	subs	r3, r0, #0
 80035aa:	d001      	beq.n	80035b0 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e03e      	b.n	800362e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2210      	movs	r2, #16
 80035b6:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2220      	movs	r2, #32
 80035be:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d119      	bne.n	80035fc <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2180      	movs	r1, #128	; 0x80
 80035d4:	01c9      	lsls	r1, r1, #7
 80035d6:	430a      	orrs	r2, r1
 80035d8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	0013      	movs	r3, r2
 80035e4:	2200      	movs	r2, #0
 80035e6:	2120      	movs	r1, #32
 80035e8:	f000 f84a 	bl	8003680 <I2C_WaitOnFlagUntilTimeout>
 80035ec:	1e03      	subs	r3, r0, #0
 80035ee:	d001      	beq.n	80035f4 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e01c      	b.n	800362e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2220      	movs	r2, #32
 80035fa:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	3301      	adds	r3, #1
 8003600:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	429a      	cmp	r2, r3
 8003608:	d900      	bls.n	800360c <HAL_I2C_IsDeviceReady+0x204>
 800360a:	e72e      	b.n	800346a <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2241      	movs	r2, #65	; 0x41
 8003610:	2120      	movs	r1, #32
 8003612:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003618:	2220      	movs	r2, #32
 800361a:	431a      	orrs	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2240      	movs	r2, #64	; 0x40
 8003624:	2100      	movs	r1, #0
 8003626:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e000      	b.n	800362e <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 800362c:	2302      	movs	r3, #2
  }
}
 800362e:	0018      	movs	r0, r3
 8003630:	46bd      	mov	sp, r7
 8003632:	b008      	add	sp, #32
 8003634:	bd80      	pop	{r7, pc}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	02002000 	.word	0x02002000

0800363c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	2202      	movs	r2, #2
 800364c:	4013      	ands	r3, r2
 800364e:	2b02      	cmp	r3, #2
 8003650:	d103      	bne.n	800365a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2200      	movs	r2, #0
 8003658:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	2201      	movs	r2, #1
 8003662:	4013      	ands	r3, r2
 8003664:	2b01      	cmp	r3, #1
 8003666:	d007      	beq.n	8003678 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	699a      	ldr	r2, [r3, #24]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2101      	movs	r1, #1
 8003674:	430a      	orrs	r2, r1
 8003676:	619a      	str	r2, [r3, #24]
  }
}
 8003678:	46c0      	nop			; (mov r8, r8)
 800367a:	46bd      	mov	sp, r7
 800367c:	b002      	add	sp, #8
 800367e:	bd80      	pop	{r7, pc}

08003680 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	603b      	str	r3, [r7, #0]
 800368c:	1dfb      	adds	r3, r7, #7
 800368e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003690:	e021      	b.n	80036d6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	3301      	adds	r3, #1
 8003696:	d01e      	beq.n	80036d6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003698:	f7ff fa9e 	bl	8002bd8 <HAL_GetTick>
 800369c:	0002      	movs	r2, r0
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d302      	bcc.n	80036ae <I2C_WaitOnFlagUntilTimeout+0x2e>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d113      	bne.n	80036d6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b2:	2220      	movs	r2, #32
 80036b4:	431a      	orrs	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2241      	movs	r2, #65	; 0x41
 80036be:	2120      	movs	r1, #32
 80036c0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2242      	movs	r2, #66	; 0x42
 80036c6:	2100      	movs	r1, #0
 80036c8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2240      	movs	r2, #64	; 0x40
 80036ce:	2100      	movs	r1, #0
 80036d0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e00f      	b.n	80036f6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	4013      	ands	r3, r2
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	425a      	negs	r2, r3
 80036e6:	4153      	adcs	r3, r2
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	001a      	movs	r2, r3
 80036ec:	1dfb      	adds	r3, r7, #7
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d0ce      	beq.n	8003692 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	0018      	movs	r0, r3
 80036f8:	46bd      	mov	sp, r7
 80036fa:	b004      	add	sp, #16
 80036fc:	bd80      	pop	{r7, pc}

080036fe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b084      	sub	sp, #16
 8003702:	af00      	add	r7, sp, #0
 8003704:	60f8      	str	r0, [r7, #12]
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800370a:	e02b      	b.n	8003764 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	68b9      	ldr	r1, [r7, #8]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	0018      	movs	r0, r3
 8003714:	f000 f86e 	bl	80037f4 <I2C_IsAcknowledgeFailed>
 8003718:	1e03      	subs	r3, r0, #0
 800371a:	d001      	beq.n	8003720 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e029      	b.n	8003774 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	3301      	adds	r3, #1
 8003724:	d01e      	beq.n	8003764 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003726:	f7ff fa57 	bl	8002bd8 <HAL_GetTick>
 800372a:	0002      	movs	r2, r0
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	429a      	cmp	r2, r3
 8003734:	d302      	bcc.n	800373c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d113      	bne.n	8003764 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003740:	2220      	movs	r2, #32
 8003742:	431a      	orrs	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2241      	movs	r2, #65	; 0x41
 800374c:	2120      	movs	r1, #32
 800374e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2242      	movs	r2, #66	; 0x42
 8003754:	2100      	movs	r1, #0
 8003756:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2240      	movs	r2, #64	; 0x40
 800375c:	2100      	movs	r1, #0
 800375e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e007      	b.n	8003774 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	2202      	movs	r2, #2
 800376c:	4013      	ands	r3, r2
 800376e:	2b02      	cmp	r3, #2
 8003770:	d1cc      	bne.n	800370c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	0018      	movs	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	b004      	add	sp, #16
 800377a:	bd80      	pop	{r7, pc}

0800377c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003788:	e028      	b.n	80037dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	68b9      	ldr	r1, [r7, #8]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	0018      	movs	r0, r3
 8003792:	f000 f82f 	bl	80037f4 <I2C_IsAcknowledgeFailed>
 8003796:	1e03      	subs	r3, r0, #0
 8003798:	d001      	beq.n	800379e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e026      	b.n	80037ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800379e:	f7ff fa1b 	bl	8002bd8 <HAL_GetTick>
 80037a2:	0002      	movs	r2, r0
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d302      	bcc.n	80037b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d113      	bne.n	80037dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b8:	2220      	movs	r2, #32
 80037ba:	431a      	orrs	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2241      	movs	r2, #65	; 0x41
 80037c4:	2120      	movs	r1, #32
 80037c6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2242      	movs	r2, #66	; 0x42
 80037cc:	2100      	movs	r1, #0
 80037ce:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2240      	movs	r2, #64	; 0x40
 80037d4:	2100      	movs	r1, #0
 80037d6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e007      	b.n	80037ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	2220      	movs	r2, #32
 80037e4:	4013      	ands	r3, r2
 80037e6:	2b20      	cmp	r3, #32
 80037e8:	d1cf      	bne.n	800378a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	0018      	movs	r0, r3
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b004      	add	sp, #16
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	2210      	movs	r2, #16
 8003808:	4013      	ands	r3, r2
 800380a:	2b10      	cmp	r3, #16
 800380c:	d164      	bne.n	80038d8 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	2380      	movs	r3, #128	; 0x80
 8003816:	049b      	lsls	r3, r3, #18
 8003818:	401a      	ands	r2, r3
 800381a:	2380      	movs	r3, #128	; 0x80
 800381c:	049b      	lsls	r3, r3, #18
 800381e:	429a      	cmp	r2, r3
 8003820:	d02b      	beq.n	800387a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2180      	movs	r1, #128	; 0x80
 800382e:	01c9      	lsls	r1, r1, #7
 8003830:	430a      	orrs	r2, r1
 8003832:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003834:	e021      	b.n	800387a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	3301      	adds	r3, #1
 800383a:	d01e      	beq.n	800387a <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800383c:	f7ff f9cc 	bl	8002bd8 <HAL_GetTick>
 8003840:	0002      	movs	r2, r0
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	429a      	cmp	r2, r3
 800384a:	d302      	bcc.n	8003852 <I2C_IsAcknowledgeFailed+0x5e>
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d113      	bne.n	800387a <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003856:	2220      	movs	r2, #32
 8003858:	431a      	orrs	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2241      	movs	r2, #65	; 0x41
 8003862:	2120      	movs	r1, #32
 8003864:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2242      	movs	r2, #66	; 0x42
 800386a:	2100      	movs	r1, #0
 800386c:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2240      	movs	r2, #64	; 0x40
 8003872:	2100      	movs	r1, #0
 8003874:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e02f      	b.n	80038da <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	2220      	movs	r2, #32
 8003882:	4013      	ands	r3, r2
 8003884:	2b20      	cmp	r3, #32
 8003886:	d1d6      	bne.n	8003836 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2210      	movs	r2, #16
 800388e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2220      	movs	r2, #32
 8003896:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	0018      	movs	r0, r3
 800389c:	f7ff fece 	bl	800363c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	490e      	ldr	r1, [pc, #56]	; (80038e4 <I2C_IsAcknowledgeFailed+0xf0>)
 80038ac:	400a      	ands	r2, r1
 80038ae:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b4:	2204      	movs	r2, #4
 80038b6:	431a      	orrs	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2241      	movs	r2, #65	; 0x41
 80038c0:	2120      	movs	r1, #32
 80038c2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2242      	movs	r2, #66	; 0x42
 80038c8:	2100      	movs	r1, #0
 80038ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2240      	movs	r2, #64	; 0x40
 80038d0:	2100      	movs	r1, #0
 80038d2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e000      	b.n	80038da <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	0018      	movs	r0, r3
 80038dc:	46bd      	mov	sp, r7
 80038de:	b004      	add	sp, #16
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	46c0      	nop			; (mov r8, r8)
 80038e4:	fe00e800 	.word	0xfe00e800

080038e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80038e8:	b590      	push	{r4, r7, lr}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	0008      	movs	r0, r1
 80038f2:	0011      	movs	r1, r2
 80038f4:	607b      	str	r3, [r7, #4]
 80038f6:	240a      	movs	r4, #10
 80038f8:	193b      	adds	r3, r7, r4
 80038fa:	1c02      	adds	r2, r0, #0
 80038fc:	801a      	strh	r2, [r3, #0]
 80038fe:	2009      	movs	r0, #9
 8003900:	183b      	adds	r3, r7, r0
 8003902:	1c0a      	adds	r2, r1, #0
 8003904:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	6a3a      	ldr	r2, [r7, #32]
 800390e:	0d51      	lsrs	r1, r2, #21
 8003910:	2280      	movs	r2, #128	; 0x80
 8003912:	00d2      	lsls	r2, r2, #3
 8003914:	400a      	ands	r2, r1
 8003916:	490e      	ldr	r1, [pc, #56]	; (8003950 <I2C_TransferConfig+0x68>)
 8003918:	430a      	orrs	r2, r1
 800391a:	43d2      	mvns	r2, r2
 800391c:	401a      	ands	r2, r3
 800391e:	0011      	movs	r1, r2
 8003920:	193b      	adds	r3, r7, r4
 8003922:	881b      	ldrh	r3, [r3, #0]
 8003924:	059b      	lsls	r3, r3, #22
 8003926:	0d9a      	lsrs	r2, r3, #22
 8003928:	183b      	adds	r3, r7, r0
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	0418      	lsls	r0, r3, #16
 800392e:	23ff      	movs	r3, #255	; 0xff
 8003930:	041b      	lsls	r3, r3, #16
 8003932:	4003      	ands	r3, r0
 8003934:	431a      	orrs	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	431a      	orrs	r2, r3
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	431a      	orrs	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                 I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003946:	46c0      	nop			; (mov r8, r8)
 8003948:	46bd      	mov	sp, r7
 800394a:	b005      	add	sp, #20
 800394c:	bd90      	pop	{r4, r7, pc}
 800394e:	46c0      	nop			; (mov r8, r8)
 8003950:	03ff63ff 	.word	0x03ff63ff

08003954 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2241      	movs	r2, #65	; 0x41
 8003962:	5c9b      	ldrb	r3, [r3, r2]
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b20      	cmp	r3, #32
 8003968:	d138      	bne.n	80039dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2240      	movs	r2, #64	; 0x40
 800396e:	5c9b      	ldrb	r3, [r3, r2]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d101      	bne.n	8003978 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003974:	2302      	movs	r3, #2
 8003976:	e032      	b.n	80039de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2240      	movs	r2, #64	; 0x40
 800397c:	2101      	movs	r1, #1
 800397e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2241      	movs	r2, #65	; 0x41
 8003984:	2124      	movs	r1, #36	; 0x24
 8003986:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2101      	movs	r1, #1
 8003994:	438a      	bics	r2, r1
 8003996:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4911      	ldr	r1, [pc, #68]	; (80039e8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80039a4:	400a      	ands	r2, r1
 80039a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6819      	ldr	r1, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2101      	movs	r1, #1
 80039c4:	430a      	orrs	r2, r1
 80039c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2241      	movs	r2, #65	; 0x41
 80039cc:	2120      	movs	r1, #32
 80039ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2240      	movs	r2, #64	; 0x40
 80039d4:	2100      	movs	r1, #0
 80039d6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80039d8:	2300      	movs	r3, #0
 80039da:	e000      	b.n	80039de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80039dc:	2302      	movs	r3, #2
  }
}
 80039de:	0018      	movs	r0, r3
 80039e0:	46bd      	mov	sp, r7
 80039e2:	b002      	add	sp, #8
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	46c0      	nop			; (mov r8, r8)
 80039e8:	ffffefff 	.word	0xffffefff

080039ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2241      	movs	r2, #65	; 0x41
 80039fa:	5c9b      	ldrb	r3, [r3, r2]
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b20      	cmp	r3, #32
 8003a00:	d139      	bne.n	8003a76 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2240      	movs	r2, #64	; 0x40
 8003a06:	5c9b      	ldrb	r3, [r3, r2]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d101      	bne.n	8003a10 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	e033      	b.n	8003a78 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2240      	movs	r2, #64	; 0x40
 8003a14:	2101      	movs	r1, #1
 8003a16:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2241      	movs	r2, #65	; 0x41
 8003a1c:	2124      	movs	r1, #36	; 0x24
 8003a1e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	438a      	bics	r2, r1
 8003a2e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4a11      	ldr	r2, [pc, #68]	; (8003a80 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	021b      	lsls	r3, r3, #8
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2241      	movs	r2, #65	; 0x41
 8003a66:	2120      	movs	r1, #32
 8003a68:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2240      	movs	r2, #64	; 0x40
 8003a6e:	2100      	movs	r1, #0
 8003a70:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a72:	2300      	movs	r3, #0
 8003a74:	e000      	b.n	8003a78 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a76:	2302      	movs	r3, #2
  }
}
 8003a78:	0018      	movs	r0, r3
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	b004      	add	sp, #16
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	fffff0ff 	.word	0xfffff0ff

08003a84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003a8c:	4b19      	ldr	r3, [pc, #100]	; (8003af4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a19      	ldr	r2, [pc, #100]	; (8003af8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	0019      	movs	r1, r3
 8003a96:	4b17      	ldr	r3, [pc, #92]	; (8003af4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	2380      	movs	r3, #128	; 0x80
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d11f      	bne.n	8003ae8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003aa8:	4b14      	ldr	r3, [pc, #80]	; (8003afc <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	0013      	movs	r3, r2
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	189b      	adds	r3, r3, r2
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	4912      	ldr	r1, [pc, #72]	; (8003b00 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	f7fc fb2a 	bl	8000110 <__udivsi3>
 8003abc:	0003      	movs	r3, r0
 8003abe:	3301      	adds	r3, #1
 8003ac0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ac2:	e008      	b.n	8003ad6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	3b01      	subs	r3, #1
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	e001      	b.n	8003ad6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e009      	b.n	8003aea <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ad6:	4b07      	ldr	r3, [pc, #28]	; (8003af4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003ad8:	695a      	ldr	r2, [r3, #20]
 8003ada:	2380      	movs	r3, #128	; 0x80
 8003adc:	00db      	lsls	r3, r3, #3
 8003ade:	401a      	ands	r2, r3
 8003ae0:	2380      	movs	r3, #128	; 0x80
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d0ed      	beq.n	8003ac4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	0018      	movs	r0, r3
 8003aec:	46bd      	mov	sp, r7
 8003aee:	b004      	add	sp, #16
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	46c0      	nop			; (mov r8, r8)
 8003af4:	40007000 	.word	0x40007000
 8003af8:	fffff9ff 	.word	0xfffff9ff
 8003afc:	2000000c 	.word	0x2000000c
 8003b00:	000f4240 	.word	0x000f4240

08003b04 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003b08:	4b03      	ldr	r3, [pc, #12]	; (8003b18 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	23e0      	movs	r3, #224	; 0xe0
 8003b0e:	01db      	lsls	r3, r3, #7
 8003b10:	4013      	ands	r3, r2
}
 8003b12:	0018      	movs	r0, r3
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	40021000 	.word	0x40021000

08003b1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b088      	sub	sp, #32
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e2f9      	b.n	8004122 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2201      	movs	r2, #1
 8003b34:	4013      	ands	r3, r2
 8003b36:	d100      	bne.n	8003b3a <HAL_RCC_OscConfig+0x1e>
 8003b38:	e07c      	b.n	8003c34 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b3a:	4bc3      	ldr	r3, [pc, #780]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	2238      	movs	r2, #56	; 0x38
 8003b40:	4013      	ands	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b44:	4bc0      	ldr	r3, [pc, #768]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	2203      	movs	r2, #3
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	2b10      	cmp	r3, #16
 8003b52:	d102      	bne.n	8003b5a <HAL_RCC_OscConfig+0x3e>
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	2b03      	cmp	r3, #3
 8003b58:	d002      	beq.n	8003b60 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d10b      	bne.n	8003b78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b60:	4bb9      	ldr	r3, [pc, #740]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	2380      	movs	r3, #128	; 0x80
 8003b66:	029b      	lsls	r3, r3, #10
 8003b68:	4013      	ands	r3, r2
 8003b6a:	d062      	beq.n	8003c32 <HAL_RCC_OscConfig+0x116>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d15e      	bne.n	8003c32 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e2d4      	b.n	8004122 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	2380      	movs	r3, #128	; 0x80
 8003b7e:	025b      	lsls	r3, r3, #9
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d107      	bne.n	8003b94 <HAL_RCC_OscConfig+0x78>
 8003b84:	4bb0      	ldr	r3, [pc, #704]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	4baf      	ldr	r3, [pc, #700]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003b8a:	2180      	movs	r1, #128	; 0x80
 8003b8c:	0249      	lsls	r1, r1, #9
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	e020      	b.n	8003bd6 <HAL_RCC_OscConfig+0xba>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	23a0      	movs	r3, #160	; 0xa0
 8003b9a:	02db      	lsls	r3, r3, #11
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d10e      	bne.n	8003bbe <HAL_RCC_OscConfig+0xa2>
 8003ba0:	4ba9      	ldr	r3, [pc, #676]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	4ba8      	ldr	r3, [pc, #672]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003ba6:	2180      	movs	r1, #128	; 0x80
 8003ba8:	02c9      	lsls	r1, r1, #11
 8003baa:	430a      	orrs	r2, r1
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	4ba6      	ldr	r3, [pc, #664]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	4ba5      	ldr	r3, [pc, #660]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003bb4:	2180      	movs	r1, #128	; 0x80
 8003bb6:	0249      	lsls	r1, r1, #9
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	e00b      	b.n	8003bd6 <HAL_RCC_OscConfig+0xba>
 8003bbe:	4ba2      	ldr	r3, [pc, #648]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	4ba1      	ldr	r3, [pc, #644]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003bc4:	49a1      	ldr	r1, [pc, #644]	; (8003e4c <HAL_RCC_OscConfig+0x330>)
 8003bc6:	400a      	ands	r2, r1
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	4b9f      	ldr	r3, [pc, #636]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	4b9e      	ldr	r3, [pc, #632]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003bd0:	499f      	ldr	r1, [pc, #636]	; (8003e50 <HAL_RCC_OscConfig+0x334>)
 8003bd2:	400a      	ands	r2, r1
 8003bd4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d014      	beq.n	8003c08 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bde:	f7fe fffb 	bl	8002bd8 <HAL_GetTick>
 8003be2:	0003      	movs	r3, r0
 8003be4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be8:	f7fe fff6 	bl	8002bd8 <HAL_GetTick>
 8003bec:	0002      	movs	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b64      	cmp	r3, #100	; 0x64
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e293      	b.n	8004122 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bfa:	4b93      	ldr	r3, [pc, #588]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	2380      	movs	r3, #128	; 0x80
 8003c00:	029b      	lsls	r3, r3, #10
 8003c02:	4013      	ands	r3, r2
 8003c04:	d0f0      	beq.n	8003be8 <HAL_RCC_OscConfig+0xcc>
 8003c06:	e015      	b.n	8003c34 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c08:	f7fe ffe6 	bl	8002bd8 <HAL_GetTick>
 8003c0c:	0003      	movs	r3, r0
 8003c0e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c10:	e008      	b.n	8003c24 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c12:	f7fe ffe1 	bl	8002bd8 <HAL_GetTick>
 8003c16:	0002      	movs	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b64      	cmp	r3, #100	; 0x64
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e27e      	b.n	8004122 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c24:	4b88      	ldr	r3, [pc, #544]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	2380      	movs	r3, #128	; 0x80
 8003c2a:	029b      	lsls	r3, r3, #10
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	d1f0      	bne.n	8003c12 <HAL_RCC_OscConfig+0xf6>
 8003c30:	e000      	b.n	8003c34 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c32:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2202      	movs	r2, #2
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	d100      	bne.n	8003c40 <HAL_RCC_OscConfig+0x124>
 8003c3e:	e099      	b.n	8003d74 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c40:	4b81      	ldr	r3, [pc, #516]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2238      	movs	r2, #56	; 0x38
 8003c46:	4013      	ands	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c4a:	4b7f      	ldr	r3, [pc, #508]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	2203      	movs	r2, #3
 8003c50:	4013      	ands	r3, r2
 8003c52:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	2b10      	cmp	r3, #16
 8003c58:	d102      	bne.n	8003c60 <HAL_RCC_OscConfig+0x144>
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d002      	beq.n	8003c66 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d135      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c66:	4b78      	ldr	r3, [pc, #480]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	2380      	movs	r3, #128	; 0x80
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	4013      	ands	r3, r2
 8003c70:	d005      	beq.n	8003c7e <HAL_RCC_OscConfig+0x162>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e251      	b.n	8004122 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c7e:	4b72      	ldr	r3, [pc, #456]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	4a74      	ldr	r2, [pc, #464]	; (8003e54 <HAL_RCC_OscConfig+0x338>)
 8003c84:	4013      	ands	r3, r2
 8003c86:	0019      	movs	r1, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	021a      	lsls	r2, r3, #8
 8003c8e:	4b6e      	ldr	r3, [pc, #440]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003c90:	430a      	orrs	r2, r1
 8003c92:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d112      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003c9a:	4b6b      	ldr	r3, [pc, #428]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a6e      	ldr	r2, [pc, #440]	; (8003e58 <HAL_RCC_OscConfig+0x33c>)
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	0019      	movs	r1, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	691a      	ldr	r2, [r3, #16]
 8003ca8:	4b67      	ldr	r3, [pc, #412]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003caa:	430a      	orrs	r2, r1
 8003cac:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003cae:	4b66      	ldr	r3, [pc, #408]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	0adb      	lsrs	r3, r3, #11
 8003cb4:	2207      	movs	r2, #7
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	4a68      	ldr	r2, [pc, #416]	; (8003e5c <HAL_RCC_OscConfig+0x340>)
 8003cba:	40da      	lsrs	r2, r3
 8003cbc:	4b68      	ldr	r3, [pc, #416]	; (8003e60 <HAL_RCC_OscConfig+0x344>)
 8003cbe:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003cc0:	4b68      	ldr	r3, [pc, #416]	; (8003e64 <HAL_RCC_OscConfig+0x348>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	f7fe ff2b 	bl	8002b20 <HAL_InitTick>
 8003cca:	1e03      	subs	r3, r0, #0
 8003ccc:	d051      	beq.n	8003d72 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e227      	b.n	8004122 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d030      	beq.n	8003d3c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003cda:	4b5b      	ldr	r3, [pc, #364]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a5e      	ldr	r2, [pc, #376]	; (8003e58 <HAL_RCC_OscConfig+0x33c>)
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	0019      	movs	r1, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	691a      	ldr	r2, [r3, #16]
 8003ce8:	4b57      	ldr	r3, [pc, #348]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003cea:	430a      	orrs	r2, r1
 8003cec:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003cee:	4b56      	ldr	r3, [pc, #344]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	4b55      	ldr	r3, [pc, #340]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003cf4:	2180      	movs	r1, #128	; 0x80
 8003cf6:	0049      	lsls	r1, r1, #1
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfc:	f7fe ff6c 	bl	8002bd8 <HAL_GetTick>
 8003d00:	0003      	movs	r3, r0
 8003d02:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d06:	f7fe ff67 	bl	8002bd8 <HAL_GetTick>
 8003d0a:	0002      	movs	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e204      	b.n	8004122 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d18:	4b4b      	ldr	r3, [pc, #300]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	2380      	movs	r3, #128	; 0x80
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	4013      	ands	r3, r2
 8003d22:	d0f0      	beq.n	8003d06 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d24:	4b48      	ldr	r3, [pc, #288]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	4a4a      	ldr	r2, [pc, #296]	; (8003e54 <HAL_RCC_OscConfig+0x338>)
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	0019      	movs	r1, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	021a      	lsls	r2, r3, #8
 8003d34:	4b44      	ldr	r3, [pc, #272]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003d36:	430a      	orrs	r2, r1
 8003d38:	605a      	str	r2, [r3, #4]
 8003d3a:	e01b      	b.n	8003d74 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003d3c:	4b42      	ldr	r3, [pc, #264]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	4b41      	ldr	r3, [pc, #260]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003d42:	4949      	ldr	r1, [pc, #292]	; (8003e68 <HAL_RCC_OscConfig+0x34c>)
 8003d44:	400a      	ands	r2, r1
 8003d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d48:	f7fe ff46 	bl	8002bd8 <HAL_GetTick>
 8003d4c:	0003      	movs	r3, r0
 8003d4e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d50:	e008      	b.n	8003d64 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d52:	f7fe ff41 	bl	8002bd8 <HAL_GetTick>
 8003d56:	0002      	movs	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e1de      	b.n	8004122 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d64:	4b38      	ldr	r3, [pc, #224]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	2380      	movs	r3, #128	; 0x80
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	d1f0      	bne.n	8003d52 <HAL_RCC_OscConfig+0x236>
 8003d70:	e000      	b.n	8003d74 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d72:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2208      	movs	r2, #8
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	d047      	beq.n	8003e0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003d7e:	4b32      	ldr	r3, [pc, #200]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	2238      	movs	r2, #56	; 0x38
 8003d84:	4013      	ands	r3, r2
 8003d86:	2b18      	cmp	r3, #24
 8003d88:	d10a      	bne.n	8003da0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003d8a:	4b2f      	ldr	r3, [pc, #188]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d8e:	2202      	movs	r2, #2
 8003d90:	4013      	ands	r3, r2
 8003d92:	d03c      	beq.n	8003e0e <HAL_RCC_OscConfig+0x2f2>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d138      	bne.n	8003e0e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e1c0      	b.n	8004122 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d019      	beq.n	8003ddc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003da8:	4b27      	ldr	r3, [pc, #156]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003daa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003dac:	4b26      	ldr	r3, [pc, #152]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003dae:	2101      	movs	r1, #1
 8003db0:	430a      	orrs	r2, r1
 8003db2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db4:	f7fe ff10 	bl	8002bd8 <HAL_GetTick>
 8003db8:	0003      	movs	r3, r0
 8003dba:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dbe:	f7fe ff0b 	bl	8002bd8 <HAL_GetTick>
 8003dc2:	0002      	movs	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e1a8      	b.n	8004122 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dd0:	4b1d      	ldr	r3, [pc, #116]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	d0f1      	beq.n	8003dbe <HAL_RCC_OscConfig+0x2a2>
 8003dda:	e018      	b.n	8003e0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003ddc:	4b1a      	ldr	r3, [pc, #104]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003dde:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003de0:	4b19      	ldr	r3, [pc, #100]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003de2:	2101      	movs	r1, #1
 8003de4:	438a      	bics	r2, r1
 8003de6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de8:	f7fe fef6 	bl	8002bd8 <HAL_GetTick>
 8003dec:	0003      	movs	r3, r0
 8003dee:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003df2:	f7fe fef1 	bl	8002bd8 <HAL_GetTick>
 8003df6:	0002      	movs	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e18e      	b.n	8004122 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e04:	4b10      	ldr	r3, [pc, #64]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e08:	2202      	movs	r2, #2
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	d1f1      	bne.n	8003df2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2204      	movs	r2, #4
 8003e14:	4013      	ands	r3, r2
 8003e16:	d100      	bne.n	8003e1a <HAL_RCC_OscConfig+0x2fe>
 8003e18:	e0c6      	b.n	8003fa8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e1a:	231f      	movs	r3, #31
 8003e1c:	18fb      	adds	r3, r7, r3
 8003e1e:	2200      	movs	r2, #0
 8003e20:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003e22:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	2238      	movs	r2, #56	; 0x38
 8003e28:	4013      	ands	r3, r2
 8003e2a:	2b20      	cmp	r3, #32
 8003e2c:	d11e      	bne.n	8003e6c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003e2e:	4b06      	ldr	r3, [pc, #24]	; (8003e48 <HAL_RCC_OscConfig+0x32c>)
 8003e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e32:	2202      	movs	r2, #2
 8003e34:	4013      	ands	r3, r2
 8003e36:	d100      	bne.n	8003e3a <HAL_RCC_OscConfig+0x31e>
 8003e38:	e0b6      	b.n	8003fa8 <HAL_RCC_OscConfig+0x48c>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d000      	beq.n	8003e44 <HAL_RCC_OscConfig+0x328>
 8003e42:	e0b1      	b.n	8003fa8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e16c      	b.n	8004122 <HAL_RCC_OscConfig+0x606>
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	fffeffff 	.word	0xfffeffff
 8003e50:	fffbffff 	.word	0xfffbffff
 8003e54:	ffff80ff 	.word	0xffff80ff
 8003e58:	ffffc7ff 	.word	0xffffc7ff
 8003e5c:	00f42400 	.word	0x00f42400
 8003e60:	2000000c 	.word	0x2000000c
 8003e64:	20000010 	.word	0x20000010
 8003e68:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e6c:	4baf      	ldr	r3, [pc, #700]	; (800412c <HAL_RCC_OscConfig+0x610>)
 8003e6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e70:	2380      	movs	r3, #128	; 0x80
 8003e72:	055b      	lsls	r3, r3, #21
 8003e74:	4013      	ands	r3, r2
 8003e76:	d101      	bne.n	8003e7c <HAL_RCC_OscConfig+0x360>
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e000      	b.n	8003e7e <HAL_RCC_OscConfig+0x362>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d011      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003e82:	4baa      	ldr	r3, [pc, #680]	; (800412c <HAL_RCC_OscConfig+0x610>)
 8003e84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e86:	4ba9      	ldr	r3, [pc, #676]	; (800412c <HAL_RCC_OscConfig+0x610>)
 8003e88:	2180      	movs	r1, #128	; 0x80
 8003e8a:	0549      	lsls	r1, r1, #21
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003e90:	4ba6      	ldr	r3, [pc, #664]	; (800412c <HAL_RCC_OscConfig+0x610>)
 8003e92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e94:	2380      	movs	r3, #128	; 0x80
 8003e96:	055b      	lsls	r3, r3, #21
 8003e98:	4013      	ands	r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003e9e:	231f      	movs	r3, #31
 8003ea0:	18fb      	adds	r3, r7, r3
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ea6:	4ba2      	ldr	r3, [pc, #648]	; (8004130 <HAL_RCC_OscConfig+0x614>)
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	2380      	movs	r3, #128	; 0x80
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	4013      	ands	r3, r2
 8003eb0:	d11a      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003eb2:	4b9f      	ldr	r3, [pc, #636]	; (8004130 <HAL_RCC_OscConfig+0x614>)
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	4b9e      	ldr	r3, [pc, #632]	; (8004130 <HAL_RCC_OscConfig+0x614>)
 8003eb8:	2180      	movs	r1, #128	; 0x80
 8003eba:	0049      	lsls	r1, r1, #1
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003ec0:	f7fe fe8a 	bl	8002bd8 <HAL_GetTick>
 8003ec4:	0003      	movs	r3, r0
 8003ec6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eca:	f7fe fe85 	bl	8002bd8 <HAL_GetTick>
 8003ece:	0002      	movs	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e122      	b.n	8004122 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003edc:	4b94      	ldr	r3, [pc, #592]	; (8004130 <HAL_RCC_OscConfig+0x614>)
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	2380      	movs	r3, #128	; 0x80
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	d0f0      	beq.n	8003eca <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d106      	bne.n	8003efe <HAL_RCC_OscConfig+0x3e2>
 8003ef0:	4b8e      	ldr	r3, [pc, #568]	; (800412c <HAL_RCC_OscConfig+0x610>)
 8003ef2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ef4:	4b8d      	ldr	r3, [pc, #564]	; (800412c <HAL_RCC_OscConfig+0x610>)
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	65da      	str	r2, [r3, #92]	; 0x5c
 8003efc:	e01c      	b.n	8003f38 <HAL_RCC_OscConfig+0x41c>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	2b05      	cmp	r3, #5
 8003f04:	d10c      	bne.n	8003f20 <HAL_RCC_OscConfig+0x404>
 8003f06:	4b89      	ldr	r3, [pc, #548]	; (800412c <HAL_RCC_OscConfig+0x610>)
 8003f08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f0a:	4b88      	ldr	r3, [pc, #544]	; (800412c <HAL_RCC_OscConfig+0x610>)
 8003f0c:	2104      	movs	r1, #4
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f12:	4b86      	ldr	r3, [pc, #536]	; (800412c <HAL_RCC_OscConfig+0x610>)
 8003f14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f16:	4b85      	ldr	r3, [pc, #532]	; (800412c <HAL_RCC_OscConfig+0x610>)
 8003f18:	2101      	movs	r1, #1
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f1e:	e00b      	b.n	8003f38 <HAL_RCC_OscConfig+0x41c>
 8003f20:	4b82      	ldr	r3, [pc, #520]	; (800412c <HAL_RCC_OscConfig+0x610>)
 8003f22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f24:	4b81      	ldr	r3, [pc, #516]	; (800412c <HAL_RCC_OscConfig+0x610>)
 8003f26:	2101      	movs	r1, #1
 8003f28:	438a      	bics	r2, r1
 8003f2a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f2c:	4b7f      	ldr	r3, [pc, #508]	; (800412c <HAL_RCC_OscConfig+0x610>)
 8003f2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f30:	4b7e      	ldr	r3, [pc, #504]	; (800412c <HAL_RCC_OscConfig+0x610>)
 8003f32:	2104      	movs	r1, #4
 8003f34:	438a      	bics	r2, r1
 8003f36:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d014      	beq.n	8003f6a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f40:	f7fe fe4a 	bl	8002bd8 <HAL_GetTick>
 8003f44:	0003      	movs	r3, r0
 8003f46:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f48:	e009      	b.n	8003f5e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f4a:	f7fe fe45 	bl	8002bd8 <HAL_GetTick>
 8003f4e:	0002      	movs	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	4a77      	ldr	r2, [pc, #476]	; (8004134 <HAL_RCC_OscConfig+0x618>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e0e1      	b.n	8004122 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f5e:	4b73      	ldr	r3, [pc, #460]	; (800412c <HAL_RCC_OscConfig+0x610>)
 8003f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f62:	2202      	movs	r2, #2
 8003f64:	4013      	ands	r3, r2
 8003f66:	d0f0      	beq.n	8003f4a <HAL_RCC_OscConfig+0x42e>
 8003f68:	e013      	b.n	8003f92 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6a:	f7fe fe35 	bl	8002bd8 <HAL_GetTick>
 8003f6e:	0003      	movs	r3, r0
 8003f70:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f72:	e009      	b.n	8003f88 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f74:	f7fe fe30 	bl	8002bd8 <HAL_GetTick>
 8003f78:	0002      	movs	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	4a6d      	ldr	r2, [pc, #436]	; (8004134 <HAL_RCC_OscConfig+0x618>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e0cc      	b.n	8004122 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f88:	4b68      	ldr	r3, [pc, #416]	; (800412c <HAL_RCC_OscConfig+0x610>)
 8003f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f8c:	2202      	movs	r2, #2
 8003f8e:	4013      	ands	r3, r2
 8003f90:	d1f0      	bne.n	8003f74 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003f92:	231f      	movs	r3, #31
 8003f94:	18fb      	adds	r3, r7, r3
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d105      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003f9c:	4b63      	ldr	r3, [pc, #396]	; (800412c <HAL_RCC_OscConfig+0x610>)
 8003f9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fa0:	4b62      	ldr	r3, [pc, #392]	; (800412c <HAL_RCC_OscConfig+0x610>)
 8003fa2:	4965      	ldr	r1, [pc, #404]	; (8004138 <HAL_RCC_OscConfig+0x61c>)
 8003fa4:	400a      	ands	r2, r1
 8003fa6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d100      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x496>
 8003fb0:	e0b6      	b.n	8004120 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fb2:	4b5e      	ldr	r3, [pc, #376]	; (800412c <HAL_RCC_OscConfig+0x610>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	2238      	movs	r2, #56	; 0x38
 8003fb8:	4013      	ands	r3, r2
 8003fba:	2b10      	cmp	r3, #16
 8003fbc:	d100      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x4a4>
 8003fbe:	e07e      	b.n	80040be <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	69db      	ldr	r3, [r3, #28]
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d153      	bne.n	8004070 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc8:	4b58      	ldr	r3, [pc, #352]	; (800412c <HAL_RCC_OscConfig+0x610>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	4b57      	ldr	r3, [pc, #348]	; (800412c <HAL_RCC_OscConfig+0x610>)
 8003fce:	495b      	ldr	r1, [pc, #364]	; (800413c <HAL_RCC_OscConfig+0x620>)
 8003fd0:	400a      	ands	r2, r1
 8003fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd4:	f7fe fe00 	bl	8002bd8 <HAL_GetTick>
 8003fd8:	0003      	movs	r3, r0
 8003fda:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fde:	f7fe fdfb 	bl	8002bd8 <HAL_GetTick>
 8003fe2:	0002      	movs	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e098      	b.n	8004122 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ff0:	4b4e      	ldr	r3, [pc, #312]	; (800412c <HAL_RCC_OscConfig+0x610>)
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	2380      	movs	r3, #128	; 0x80
 8003ff6:	049b      	lsls	r3, r3, #18
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	d1f0      	bne.n	8003fde <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ffc:	4b4b      	ldr	r3, [pc, #300]	; (800412c <HAL_RCC_OscConfig+0x610>)
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	4a4f      	ldr	r2, [pc, #316]	; (8004140 <HAL_RCC_OscConfig+0x624>)
 8004002:	4013      	ands	r3, r2
 8004004:	0019      	movs	r1, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1a      	ldr	r2, [r3, #32]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	431a      	orrs	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004014:	021b      	lsls	r3, r3, #8
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401c:	431a      	orrs	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004022:	431a      	orrs	r2, r3
 8004024:	4b41      	ldr	r3, [pc, #260]	; (800412c <HAL_RCC_OscConfig+0x610>)
 8004026:	430a      	orrs	r2, r1
 8004028:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800402a:	4b40      	ldr	r3, [pc, #256]	; (800412c <HAL_RCC_OscConfig+0x610>)
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	4b3f      	ldr	r3, [pc, #252]	; (800412c <HAL_RCC_OscConfig+0x610>)
 8004030:	2180      	movs	r1, #128	; 0x80
 8004032:	0449      	lsls	r1, r1, #17
 8004034:	430a      	orrs	r2, r1
 8004036:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004038:	4b3c      	ldr	r3, [pc, #240]	; (800412c <HAL_RCC_OscConfig+0x610>)
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	4b3b      	ldr	r3, [pc, #236]	; (800412c <HAL_RCC_OscConfig+0x610>)
 800403e:	2180      	movs	r1, #128	; 0x80
 8004040:	0549      	lsls	r1, r1, #21
 8004042:	430a      	orrs	r2, r1
 8004044:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004046:	f7fe fdc7 	bl	8002bd8 <HAL_GetTick>
 800404a:	0003      	movs	r3, r0
 800404c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004050:	f7fe fdc2 	bl	8002bd8 <HAL_GetTick>
 8004054:	0002      	movs	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e05f      	b.n	8004122 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004062:	4b32      	ldr	r3, [pc, #200]	; (800412c <HAL_RCC_OscConfig+0x610>)
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	2380      	movs	r3, #128	; 0x80
 8004068:	049b      	lsls	r3, r3, #18
 800406a:	4013      	ands	r3, r2
 800406c:	d0f0      	beq.n	8004050 <HAL_RCC_OscConfig+0x534>
 800406e:	e057      	b.n	8004120 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004070:	4b2e      	ldr	r3, [pc, #184]	; (800412c <HAL_RCC_OscConfig+0x610>)
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	4b2d      	ldr	r3, [pc, #180]	; (800412c <HAL_RCC_OscConfig+0x610>)
 8004076:	4931      	ldr	r1, [pc, #196]	; (800413c <HAL_RCC_OscConfig+0x620>)
 8004078:	400a      	ands	r2, r1
 800407a:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800407c:	4b2b      	ldr	r3, [pc, #172]	; (800412c <HAL_RCC_OscConfig+0x610>)
 800407e:	68da      	ldr	r2, [r3, #12]
 8004080:	4b2a      	ldr	r3, [pc, #168]	; (800412c <HAL_RCC_OscConfig+0x610>)
 8004082:	2103      	movs	r1, #3
 8004084:	438a      	bics	r2, r1
 8004086:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004088:	4b28      	ldr	r3, [pc, #160]	; (800412c <HAL_RCC_OscConfig+0x610>)
 800408a:	68da      	ldr	r2, [r3, #12]
 800408c:	4b27      	ldr	r3, [pc, #156]	; (800412c <HAL_RCC_OscConfig+0x610>)
 800408e:	492d      	ldr	r1, [pc, #180]	; (8004144 <HAL_RCC_OscConfig+0x628>)
 8004090:	400a      	ands	r2, r1
 8004092:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004094:	f7fe fda0 	bl	8002bd8 <HAL_GetTick>
 8004098:	0003      	movs	r3, r0
 800409a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800409c:	e008      	b.n	80040b0 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800409e:	f7fe fd9b 	bl	8002bd8 <HAL_GetTick>
 80040a2:	0002      	movs	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d901      	bls.n	80040b0 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e038      	b.n	8004122 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040b0:	4b1e      	ldr	r3, [pc, #120]	; (800412c <HAL_RCC_OscConfig+0x610>)
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	2380      	movs	r3, #128	; 0x80
 80040b6:	049b      	lsls	r3, r3, #18
 80040b8:	4013      	ands	r3, r2
 80040ba:	d1f0      	bne.n	800409e <HAL_RCC_OscConfig+0x582>
 80040bc:	e030      	b.n	8004120 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	69db      	ldr	r3, [r3, #28]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d101      	bne.n	80040ca <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e02b      	b.n	8004122 <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80040ca:	4b18      	ldr	r3, [pc, #96]	; (800412c <HAL_RCC_OscConfig+0x610>)
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	2203      	movs	r2, #3
 80040d4:	401a      	ands	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d11e      	bne.n	800411c <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	2270      	movs	r2, #112	; 0x70
 80040e2:	401a      	ands	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d117      	bne.n	800411c <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	23fe      	movs	r3, #254	; 0xfe
 80040f0:	01db      	lsls	r3, r3, #7
 80040f2:	401a      	ands	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f8:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d10e      	bne.n	800411c <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	23f8      	movs	r3, #248	; 0xf8
 8004102:	039b      	lsls	r3, r3, #14
 8004104:	401a      	ands	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800410a:	429a      	cmp	r2, r3
 800410c:	d106      	bne.n	800411c <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	0f5b      	lsrs	r3, r3, #29
 8004112:	075a      	lsls	r2, r3, #29
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004118:	429a      	cmp	r2, r3
 800411a:	d001      	beq.n	8004120 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e000      	b.n	8004122 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	0018      	movs	r0, r3
 8004124:	46bd      	mov	sp, r7
 8004126:	b008      	add	sp, #32
 8004128:	bd80      	pop	{r7, pc}
 800412a:	46c0      	nop			; (mov r8, r8)
 800412c:	40021000 	.word	0x40021000
 8004130:	40007000 	.word	0x40007000
 8004134:	00001388 	.word	0x00001388
 8004138:	efffffff 	.word	0xefffffff
 800413c:	feffffff 	.word	0xfeffffff
 8004140:	1fc1808c 	.word	0x1fc1808c
 8004144:	effeffff 	.word	0xeffeffff

08004148 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e0e9      	b.n	8004330 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800415c:	4b76      	ldr	r3, [pc, #472]	; (8004338 <HAL_RCC_ClockConfig+0x1f0>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2207      	movs	r2, #7
 8004162:	4013      	ands	r3, r2
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d91e      	bls.n	80041a8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800416a:	4b73      	ldr	r3, [pc, #460]	; (8004338 <HAL_RCC_ClockConfig+0x1f0>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2207      	movs	r2, #7
 8004170:	4393      	bics	r3, r2
 8004172:	0019      	movs	r1, r3
 8004174:	4b70      	ldr	r3, [pc, #448]	; (8004338 <HAL_RCC_ClockConfig+0x1f0>)
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800417c:	f7fe fd2c 	bl	8002bd8 <HAL_GetTick>
 8004180:	0003      	movs	r3, r0
 8004182:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004184:	e009      	b.n	800419a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004186:	f7fe fd27 	bl	8002bd8 <HAL_GetTick>
 800418a:	0002      	movs	r2, r0
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	4a6a      	ldr	r2, [pc, #424]	; (800433c <HAL_RCC_ClockConfig+0x1f4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d901      	bls.n	800419a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e0ca      	b.n	8004330 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800419a:	4b67      	ldr	r3, [pc, #412]	; (8004338 <HAL_RCC_ClockConfig+0x1f0>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2207      	movs	r2, #7
 80041a0:	4013      	ands	r3, r2
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d1ee      	bne.n	8004186 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2202      	movs	r2, #2
 80041ae:	4013      	ands	r3, r2
 80041b0:	d015      	beq.n	80041de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2204      	movs	r2, #4
 80041b8:	4013      	ands	r3, r2
 80041ba:	d006      	beq.n	80041ca <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80041bc:	4b60      	ldr	r3, [pc, #384]	; (8004340 <HAL_RCC_ClockConfig+0x1f8>)
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	4b5f      	ldr	r3, [pc, #380]	; (8004340 <HAL_RCC_ClockConfig+0x1f8>)
 80041c2:	21e0      	movs	r1, #224	; 0xe0
 80041c4:	01c9      	lsls	r1, r1, #7
 80041c6:	430a      	orrs	r2, r1
 80041c8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041ca:	4b5d      	ldr	r3, [pc, #372]	; (8004340 <HAL_RCC_ClockConfig+0x1f8>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	4a5d      	ldr	r2, [pc, #372]	; (8004344 <HAL_RCC_ClockConfig+0x1fc>)
 80041d0:	4013      	ands	r3, r2
 80041d2:	0019      	movs	r1, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	4b59      	ldr	r3, [pc, #356]	; (8004340 <HAL_RCC_ClockConfig+0x1f8>)
 80041da:	430a      	orrs	r2, r1
 80041dc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2201      	movs	r2, #1
 80041e4:	4013      	ands	r3, r2
 80041e6:	d057      	beq.n	8004298 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d107      	bne.n	8004200 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041f0:	4b53      	ldr	r3, [pc, #332]	; (8004340 <HAL_RCC_ClockConfig+0x1f8>)
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	2380      	movs	r3, #128	; 0x80
 80041f6:	029b      	lsls	r3, r3, #10
 80041f8:	4013      	ands	r3, r2
 80041fa:	d12b      	bne.n	8004254 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e097      	b.n	8004330 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	2b02      	cmp	r3, #2
 8004206:	d107      	bne.n	8004218 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004208:	4b4d      	ldr	r3, [pc, #308]	; (8004340 <HAL_RCC_ClockConfig+0x1f8>)
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	2380      	movs	r3, #128	; 0x80
 800420e:	049b      	lsls	r3, r3, #18
 8004210:	4013      	ands	r3, r2
 8004212:	d11f      	bne.n	8004254 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e08b      	b.n	8004330 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d107      	bne.n	8004230 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004220:	4b47      	ldr	r3, [pc, #284]	; (8004340 <HAL_RCC_ClockConfig+0x1f8>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	2380      	movs	r3, #128	; 0x80
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	4013      	ands	r3, r2
 800422a:	d113      	bne.n	8004254 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e07f      	b.n	8004330 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2b03      	cmp	r3, #3
 8004236:	d106      	bne.n	8004246 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004238:	4b41      	ldr	r3, [pc, #260]	; (8004340 <HAL_RCC_ClockConfig+0x1f8>)
 800423a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800423c:	2202      	movs	r2, #2
 800423e:	4013      	ands	r3, r2
 8004240:	d108      	bne.n	8004254 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e074      	b.n	8004330 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004246:	4b3e      	ldr	r3, [pc, #248]	; (8004340 <HAL_RCC_ClockConfig+0x1f8>)
 8004248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424a:	2202      	movs	r2, #2
 800424c:	4013      	ands	r3, r2
 800424e:	d101      	bne.n	8004254 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e06d      	b.n	8004330 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004254:	4b3a      	ldr	r3, [pc, #232]	; (8004340 <HAL_RCC_ClockConfig+0x1f8>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	2207      	movs	r2, #7
 800425a:	4393      	bics	r3, r2
 800425c:	0019      	movs	r1, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	4b37      	ldr	r3, [pc, #220]	; (8004340 <HAL_RCC_ClockConfig+0x1f8>)
 8004264:	430a      	orrs	r2, r1
 8004266:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004268:	f7fe fcb6 	bl	8002bd8 <HAL_GetTick>
 800426c:	0003      	movs	r3, r0
 800426e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004270:	e009      	b.n	8004286 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004272:	f7fe fcb1 	bl	8002bd8 <HAL_GetTick>
 8004276:	0002      	movs	r2, r0
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	4a2f      	ldr	r2, [pc, #188]	; (800433c <HAL_RCC_ClockConfig+0x1f4>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e054      	b.n	8004330 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004286:	4b2e      	ldr	r3, [pc, #184]	; (8004340 <HAL_RCC_ClockConfig+0x1f8>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	2238      	movs	r2, #56	; 0x38
 800428c:	401a      	ands	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	429a      	cmp	r2, r3
 8004296:	d1ec      	bne.n	8004272 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004298:	4b27      	ldr	r3, [pc, #156]	; (8004338 <HAL_RCC_ClockConfig+0x1f0>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2207      	movs	r2, #7
 800429e:	4013      	ands	r3, r2
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d21e      	bcs.n	80042e4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042a6:	4b24      	ldr	r3, [pc, #144]	; (8004338 <HAL_RCC_ClockConfig+0x1f0>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2207      	movs	r2, #7
 80042ac:	4393      	bics	r3, r2
 80042ae:	0019      	movs	r1, r3
 80042b0:	4b21      	ldr	r3, [pc, #132]	; (8004338 <HAL_RCC_ClockConfig+0x1f0>)
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80042b8:	f7fe fc8e 	bl	8002bd8 <HAL_GetTick>
 80042bc:	0003      	movs	r3, r0
 80042be:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80042c0:	e009      	b.n	80042d6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042c2:	f7fe fc89 	bl	8002bd8 <HAL_GetTick>
 80042c6:	0002      	movs	r2, r0
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	4a1b      	ldr	r2, [pc, #108]	; (800433c <HAL_RCC_ClockConfig+0x1f4>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e02c      	b.n	8004330 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80042d6:	4b18      	ldr	r3, [pc, #96]	; (8004338 <HAL_RCC_ClockConfig+0x1f0>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2207      	movs	r2, #7
 80042dc:	4013      	ands	r3, r2
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d1ee      	bne.n	80042c2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2204      	movs	r2, #4
 80042ea:	4013      	ands	r3, r2
 80042ec:	d009      	beq.n	8004302 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80042ee:	4b14      	ldr	r3, [pc, #80]	; (8004340 <HAL_RCC_ClockConfig+0x1f8>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	4a15      	ldr	r2, [pc, #84]	; (8004348 <HAL_RCC_ClockConfig+0x200>)
 80042f4:	4013      	ands	r3, r2
 80042f6:	0019      	movs	r1, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68da      	ldr	r2, [r3, #12]
 80042fc:	4b10      	ldr	r3, [pc, #64]	; (8004340 <HAL_RCC_ClockConfig+0x1f8>)
 80042fe:	430a      	orrs	r2, r1
 8004300:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004302:	f000 f829 	bl	8004358 <HAL_RCC_GetSysClockFreq>
 8004306:	0001      	movs	r1, r0
 8004308:	4b0d      	ldr	r3, [pc, #52]	; (8004340 <HAL_RCC_ClockConfig+0x1f8>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	0a1b      	lsrs	r3, r3, #8
 800430e:	220f      	movs	r2, #15
 8004310:	401a      	ands	r2, r3
 8004312:	4b0e      	ldr	r3, [pc, #56]	; (800434c <HAL_RCC_ClockConfig+0x204>)
 8004314:	0092      	lsls	r2, r2, #2
 8004316:	58d3      	ldr	r3, [r2, r3]
 8004318:	221f      	movs	r2, #31
 800431a:	4013      	ands	r3, r2
 800431c:	000a      	movs	r2, r1
 800431e:	40da      	lsrs	r2, r3
 8004320:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <HAL_RCC_ClockConfig+0x208>)
 8004322:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004324:	4b0b      	ldr	r3, [pc, #44]	; (8004354 <HAL_RCC_ClockConfig+0x20c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	0018      	movs	r0, r3
 800432a:	f7fe fbf9 	bl	8002b20 <HAL_InitTick>
 800432e:	0003      	movs	r3, r0
}
 8004330:	0018      	movs	r0, r3
 8004332:	46bd      	mov	sp, r7
 8004334:	b004      	add	sp, #16
 8004336:	bd80      	pop	{r7, pc}
 8004338:	40022000 	.word	0x40022000
 800433c:	00001388 	.word	0x00001388
 8004340:	40021000 	.word	0x40021000
 8004344:	fffff0ff 	.word	0xfffff0ff
 8004348:	ffff8fff 	.word	0xffff8fff
 800434c:	080061d4 	.word	0x080061d4
 8004350:	2000000c 	.word	0x2000000c
 8004354:	20000010 	.word	0x20000010

08004358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800435e:	4b3c      	ldr	r3, [pc, #240]	; (8004450 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	2238      	movs	r2, #56	; 0x38
 8004364:	4013      	ands	r3, r2
 8004366:	d10f      	bne.n	8004388 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004368:	4b39      	ldr	r3, [pc, #228]	; (8004450 <HAL_RCC_GetSysClockFreq+0xf8>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	0adb      	lsrs	r3, r3, #11
 800436e:	2207      	movs	r2, #7
 8004370:	4013      	ands	r3, r2
 8004372:	2201      	movs	r2, #1
 8004374:	409a      	lsls	r2, r3
 8004376:	0013      	movs	r3, r2
 8004378:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800437a:	6839      	ldr	r1, [r7, #0]
 800437c:	4835      	ldr	r0, [pc, #212]	; (8004454 <HAL_RCC_GetSysClockFreq+0xfc>)
 800437e:	f7fb fec7 	bl	8000110 <__udivsi3>
 8004382:	0003      	movs	r3, r0
 8004384:	613b      	str	r3, [r7, #16]
 8004386:	e05d      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004388:	4b31      	ldr	r3, [pc, #196]	; (8004450 <HAL_RCC_GetSysClockFreq+0xf8>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	2238      	movs	r2, #56	; 0x38
 800438e:	4013      	ands	r3, r2
 8004390:	2b08      	cmp	r3, #8
 8004392:	d102      	bne.n	800439a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004394:	4b30      	ldr	r3, [pc, #192]	; (8004458 <HAL_RCC_GetSysClockFreq+0x100>)
 8004396:	613b      	str	r3, [r7, #16]
 8004398:	e054      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800439a:	4b2d      	ldr	r3, [pc, #180]	; (8004450 <HAL_RCC_GetSysClockFreq+0xf8>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	2238      	movs	r2, #56	; 0x38
 80043a0:	4013      	ands	r3, r2
 80043a2:	2b10      	cmp	r3, #16
 80043a4:	d138      	bne.n	8004418 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80043a6:	4b2a      	ldr	r3, [pc, #168]	; (8004450 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	2203      	movs	r2, #3
 80043ac:	4013      	ands	r3, r2
 80043ae:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043b0:	4b27      	ldr	r3, [pc, #156]	; (8004450 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	091b      	lsrs	r3, r3, #4
 80043b6:	2207      	movs	r2, #7
 80043b8:	4013      	ands	r3, r2
 80043ba:	3301      	adds	r3, #1
 80043bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d10d      	bne.n	80043e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043c4:	68b9      	ldr	r1, [r7, #8]
 80043c6:	4824      	ldr	r0, [pc, #144]	; (8004458 <HAL_RCC_GetSysClockFreq+0x100>)
 80043c8:	f7fb fea2 	bl	8000110 <__udivsi3>
 80043cc:	0003      	movs	r3, r0
 80043ce:	0019      	movs	r1, r3
 80043d0:	4b1f      	ldr	r3, [pc, #124]	; (8004450 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	0a1b      	lsrs	r3, r3, #8
 80043d6:	227f      	movs	r2, #127	; 0x7f
 80043d8:	4013      	ands	r3, r2
 80043da:	434b      	muls	r3, r1
 80043dc:	617b      	str	r3, [r7, #20]
        break;
 80043de:	e00d      	b.n	80043fc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80043e0:	68b9      	ldr	r1, [r7, #8]
 80043e2:	481c      	ldr	r0, [pc, #112]	; (8004454 <HAL_RCC_GetSysClockFreq+0xfc>)
 80043e4:	f7fb fe94 	bl	8000110 <__udivsi3>
 80043e8:	0003      	movs	r3, r0
 80043ea:	0019      	movs	r1, r3
 80043ec:	4b18      	ldr	r3, [pc, #96]	; (8004450 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	0a1b      	lsrs	r3, r3, #8
 80043f2:	227f      	movs	r2, #127	; 0x7f
 80043f4:	4013      	ands	r3, r2
 80043f6:	434b      	muls	r3, r1
 80043f8:	617b      	str	r3, [r7, #20]
        break;
 80043fa:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80043fc:	4b14      	ldr	r3, [pc, #80]	; (8004450 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	0f5b      	lsrs	r3, r3, #29
 8004402:	2207      	movs	r2, #7
 8004404:	4013      	ands	r3, r2
 8004406:	3301      	adds	r3, #1
 8004408:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	6978      	ldr	r0, [r7, #20]
 800440e:	f7fb fe7f 	bl	8000110 <__udivsi3>
 8004412:	0003      	movs	r3, r0
 8004414:	613b      	str	r3, [r7, #16]
 8004416:	e015      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004418:	4b0d      	ldr	r3, [pc, #52]	; (8004450 <HAL_RCC_GetSysClockFreq+0xf8>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	2238      	movs	r2, #56	; 0x38
 800441e:	4013      	ands	r3, r2
 8004420:	2b20      	cmp	r3, #32
 8004422:	d103      	bne.n	800442c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004424:	2380      	movs	r3, #128	; 0x80
 8004426:	021b      	lsls	r3, r3, #8
 8004428:	613b      	str	r3, [r7, #16]
 800442a:	e00b      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800442c:	4b08      	ldr	r3, [pc, #32]	; (8004450 <HAL_RCC_GetSysClockFreq+0xf8>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	2238      	movs	r2, #56	; 0x38
 8004432:	4013      	ands	r3, r2
 8004434:	2b18      	cmp	r3, #24
 8004436:	d103      	bne.n	8004440 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004438:	23fa      	movs	r3, #250	; 0xfa
 800443a:	01db      	lsls	r3, r3, #7
 800443c:	613b      	str	r3, [r7, #16]
 800443e:	e001      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004444:	693b      	ldr	r3, [r7, #16]
}
 8004446:	0018      	movs	r0, r3
 8004448:	46bd      	mov	sp, r7
 800444a:	b006      	add	sp, #24
 800444c:	bd80      	pop	{r7, pc}
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	40021000 	.word	0x40021000
 8004454:	00f42400 	.word	0x00f42400
 8004458:	007a1200 	.word	0x007a1200

0800445c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004460:	4b02      	ldr	r3, [pc, #8]	; (800446c <HAL_RCC_GetHCLKFreq+0x10>)
 8004462:	681b      	ldr	r3, [r3, #0]
}
 8004464:	0018      	movs	r0, r3
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	46c0      	nop			; (mov r8, r8)
 800446c:	2000000c 	.word	0x2000000c

08004470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004470:	b5b0      	push	{r4, r5, r7, lr}
 8004472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004474:	f7ff fff2 	bl	800445c <HAL_RCC_GetHCLKFreq>
 8004478:	0004      	movs	r4, r0
 800447a:	f7ff fb43 	bl	8003b04 <LL_RCC_GetAPB1Prescaler>
 800447e:	0003      	movs	r3, r0
 8004480:	0b1a      	lsrs	r2, r3, #12
 8004482:	4b05      	ldr	r3, [pc, #20]	; (8004498 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004484:	0092      	lsls	r2, r2, #2
 8004486:	58d3      	ldr	r3, [r2, r3]
 8004488:	221f      	movs	r2, #31
 800448a:	4013      	ands	r3, r2
 800448c:	40dc      	lsrs	r4, r3
 800448e:	0023      	movs	r3, r4
}
 8004490:	0018      	movs	r0, r3
 8004492:	46bd      	mov	sp, r7
 8004494:	bdb0      	pop	{r4, r5, r7, pc}
 8004496:	46c0      	nop			; (mov r8, r8)
 8004498:	08006214 	.word	0x08006214

0800449c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80044a4:	2313      	movs	r3, #19
 80044a6:	18fb      	adds	r3, r7, r3
 80044a8:	2200      	movs	r2, #0
 80044aa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044ac:	2312      	movs	r3, #18
 80044ae:	18fb      	adds	r3, r7, r3
 80044b0:	2200      	movs	r2, #0
 80044b2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	2380      	movs	r3, #128	; 0x80
 80044ba:	029b      	lsls	r3, r3, #10
 80044bc:	4013      	ands	r3, r2
 80044be:	d100      	bne.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80044c0:	e0a3      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044c2:	2011      	movs	r0, #17
 80044c4:	183b      	adds	r3, r7, r0
 80044c6:	2200      	movs	r2, #0
 80044c8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ca:	4b86      	ldr	r3, [pc, #536]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044ce:	2380      	movs	r3, #128	; 0x80
 80044d0:	055b      	lsls	r3, r3, #21
 80044d2:	4013      	ands	r3, r2
 80044d4:	d110      	bne.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044d6:	4b83      	ldr	r3, [pc, #524]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044da:	4b82      	ldr	r3, [pc, #520]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044dc:	2180      	movs	r1, #128	; 0x80
 80044de:	0549      	lsls	r1, r1, #21
 80044e0:	430a      	orrs	r2, r1
 80044e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80044e4:	4b7f      	ldr	r3, [pc, #508]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044e8:	2380      	movs	r3, #128	; 0x80
 80044ea:	055b      	lsls	r3, r3, #21
 80044ec:	4013      	ands	r3, r2
 80044ee:	60bb      	str	r3, [r7, #8]
 80044f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044f2:	183b      	adds	r3, r7, r0
 80044f4:	2201      	movs	r2, #1
 80044f6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044f8:	4b7b      	ldr	r3, [pc, #492]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	4b7a      	ldr	r3, [pc, #488]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80044fe:	2180      	movs	r1, #128	; 0x80
 8004500:	0049      	lsls	r1, r1, #1
 8004502:	430a      	orrs	r2, r1
 8004504:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004506:	f7fe fb67 	bl	8002bd8 <HAL_GetTick>
 800450a:	0003      	movs	r3, r0
 800450c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800450e:	e00b      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004510:	f7fe fb62 	bl	8002bd8 <HAL_GetTick>
 8004514:	0002      	movs	r2, r0
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d904      	bls.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800451e:	2313      	movs	r3, #19
 8004520:	18fb      	adds	r3, r7, r3
 8004522:	2203      	movs	r2, #3
 8004524:	701a      	strb	r2, [r3, #0]
        break;
 8004526:	e005      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004528:	4b6f      	ldr	r3, [pc, #444]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	2380      	movs	r3, #128	; 0x80
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	4013      	ands	r3, r2
 8004532:	d0ed      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004534:	2313      	movs	r3, #19
 8004536:	18fb      	adds	r3, r7, r3
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d154      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800453e:	4b69      	ldr	r3, [pc, #420]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004540:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004542:	23c0      	movs	r3, #192	; 0xc0
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4013      	ands	r3, r2
 8004548:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d019      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	429a      	cmp	r2, r3
 8004558:	d014      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800455a:	4b62      	ldr	r3, [pc, #392]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800455c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800455e:	4a63      	ldr	r2, [pc, #396]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004560:	4013      	ands	r3, r2
 8004562:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004564:	4b5f      	ldr	r3, [pc, #380]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004566:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004568:	4b5e      	ldr	r3, [pc, #376]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800456a:	2180      	movs	r1, #128	; 0x80
 800456c:	0249      	lsls	r1, r1, #9
 800456e:	430a      	orrs	r2, r1
 8004570:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004572:	4b5c      	ldr	r3, [pc, #368]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004574:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004576:	4b5b      	ldr	r3, [pc, #364]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004578:	495d      	ldr	r1, [pc, #372]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800457a:	400a      	ands	r2, r1
 800457c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800457e:	4b59      	ldr	r3, [pc, #356]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	2201      	movs	r2, #1
 8004588:	4013      	ands	r3, r2
 800458a:	d016      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458c:	f7fe fb24 	bl	8002bd8 <HAL_GetTick>
 8004590:	0003      	movs	r3, r0
 8004592:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004594:	e00c      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004596:	f7fe fb1f 	bl	8002bd8 <HAL_GetTick>
 800459a:	0002      	movs	r2, r0
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	4a54      	ldr	r2, [pc, #336]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d904      	bls.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80045a6:	2313      	movs	r3, #19
 80045a8:	18fb      	adds	r3, r7, r3
 80045aa:	2203      	movs	r2, #3
 80045ac:	701a      	strb	r2, [r3, #0]
            break;
 80045ae:	e004      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045b0:	4b4c      	ldr	r3, [pc, #304]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b4:	2202      	movs	r2, #2
 80045b6:	4013      	ands	r3, r2
 80045b8:	d0ed      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80045ba:	2313      	movs	r3, #19
 80045bc:	18fb      	adds	r3, r7, r3
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10a      	bne.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045c4:	4b47      	ldr	r3, [pc, #284]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c8:	4a48      	ldr	r2, [pc, #288]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80045ca:	4013      	ands	r3, r2
 80045cc:	0019      	movs	r1, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	699a      	ldr	r2, [r3, #24]
 80045d2:	4b44      	ldr	r3, [pc, #272]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045d4:	430a      	orrs	r2, r1
 80045d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80045d8:	e00c      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045da:	2312      	movs	r3, #18
 80045dc:	18fb      	adds	r3, r7, r3
 80045de:	2213      	movs	r2, #19
 80045e0:	18ba      	adds	r2, r7, r2
 80045e2:	7812      	ldrb	r2, [r2, #0]
 80045e4:	701a      	strb	r2, [r3, #0]
 80045e6:	e005      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e8:	2312      	movs	r3, #18
 80045ea:	18fb      	adds	r3, r7, r3
 80045ec:	2213      	movs	r2, #19
 80045ee:	18ba      	adds	r2, r7, r2
 80045f0:	7812      	ldrb	r2, [r2, #0]
 80045f2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045f4:	2311      	movs	r3, #17
 80045f6:	18fb      	adds	r3, r7, r3
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d105      	bne.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045fe:	4b39      	ldr	r3, [pc, #228]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004600:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004602:	4b38      	ldr	r3, [pc, #224]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004604:	493c      	ldr	r1, [pc, #240]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004606:	400a      	ands	r2, r1
 8004608:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2201      	movs	r2, #1
 8004610:	4013      	ands	r3, r2
 8004612:	d009      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004614:	4b33      	ldr	r3, [pc, #204]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004618:	2203      	movs	r2, #3
 800461a:	4393      	bics	r3, r2
 800461c:	0019      	movs	r1, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	4b30      	ldr	r3, [pc, #192]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004624:	430a      	orrs	r2, r1
 8004626:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2202      	movs	r2, #2
 800462e:	4013      	ands	r3, r2
 8004630:	d009      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004632:	4b2c      	ldr	r3, [pc, #176]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004636:	220c      	movs	r2, #12
 8004638:	4393      	bics	r3, r2
 800463a:	0019      	movs	r1, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	4b28      	ldr	r3, [pc, #160]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004642:	430a      	orrs	r2, r1
 8004644:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2220      	movs	r2, #32
 800464c:	4013      	ands	r3, r2
 800464e:	d009      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004650:	4b24      	ldr	r3, [pc, #144]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004654:	4a29      	ldr	r2, [pc, #164]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004656:	4013      	ands	r3, r2
 8004658:	0019      	movs	r1, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68da      	ldr	r2, [r3, #12]
 800465e:	4b21      	ldr	r3, [pc, #132]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004660:	430a      	orrs	r2, r1
 8004662:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	2380      	movs	r3, #128	; 0x80
 800466a:	01db      	lsls	r3, r3, #7
 800466c:	4013      	ands	r3, r2
 800466e:	d015      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004670:	4b1c      	ldr	r3, [pc, #112]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	0899      	lsrs	r1, r3, #2
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	695a      	ldr	r2, [r3, #20]
 800467c:	4b19      	ldr	r3, [pc, #100]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800467e:	430a      	orrs	r2, r1
 8004680:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	695a      	ldr	r2, [r3, #20]
 8004686:	2380      	movs	r3, #128	; 0x80
 8004688:	05db      	lsls	r3, r3, #23
 800468a:	429a      	cmp	r2, r3
 800468c:	d106      	bne.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800468e:	4b15      	ldr	r3, [pc, #84]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004690:	68da      	ldr	r2, [r3, #12]
 8004692:	4b14      	ldr	r3, [pc, #80]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004694:	2180      	movs	r1, #128	; 0x80
 8004696:	0249      	lsls	r1, r1, #9
 8004698:	430a      	orrs	r2, r1
 800469a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	2380      	movs	r3, #128	; 0x80
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	4013      	ands	r3, r2
 80046a6:	d016      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80046a8:	4b0e      	ldr	r3, [pc, #56]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80046aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ac:	4a14      	ldr	r2, [pc, #80]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046ae:	4013      	ands	r3, r2
 80046b0:	0019      	movs	r1, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691a      	ldr	r2, [r3, #16]
 80046b6:	4b0b      	ldr	r3, [pc, #44]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80046b8:	430a      	orrs	r2, r1
 80046ba:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	691a      	ldr	r2, [r3, #16]
 80046c0:	2380      	movs	r3, #128	; 0x80
 80046c2:	01db      	lsls	r3, r3, #7
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d106      	bne.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80046c8:	4b06      	ldr	r3, [pc, #24]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80046ca:	68da      	ldr	r2, [r3, #12]
 80046cc:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80046ce:	2180      	movs	r1, #128	; 0x80
 80046d0:	0249      	lsls	r1, r1, #9
 80046d2:	430a      	orrs	r2, r1
 80046d4:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80046d6:	2312      	movs	r3, #18
 80046d8:	18fb      	adds	r3, r7, r3
 80046da:	781b      	ldrb	r3, [r3, #0]
}
 80046dc:	0018      	movs	r0, r3
 80046de:	46bd      	mov	sp, r7
 80046e0:	b006      	add	sp, #24
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	40021000 	.word	0x40021000
 80046e8:	40007000 	.word	0x40007000
 80046ec:	fffffcff 	.word	0xfffffcff
 80046f0:	fffeffff 	.word	0xfffeffff
 80046f4:	00001388 	.word	0x00001388
 80046f8:	efffffff 	.word	0xefffffff
 80046fc:	ffffcfff 	.word	0xffffcfff
 8004700:	ffff3fff 	.word	0xffff3fff

08004704 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e046      	b.n	80047a4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2284      	movs	r2, #132	; 0x84
 800471a:	589b      	ldr	r3, [r3, r2]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d107      	bne.n	8004730 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2280      	movs	r2, #128	; 0x80
 8004724:	2100      	movs	r1, #0
 8004726:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	0018      	movs	r0, r3
 800472c:	f7fe f910 	bl	8002950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2284      	movs	r2, #132	; 0x84
 8004734:	2124      	movs	r1, #36	; 0x24
 8004736:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2101      	movs	r1, #1
 8004744:	438a      	bics	r2, r1
 8004746:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	0018      	movs	r0, r3
 800474c:	f000 f830 	bl	80047b0 <UART_SetConfig>
 8004750:	0003      	movs	r3, r0
 8004752:	2b01      	cmp	r3, #1
 8004754:	d101      	bne.n	800475a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e024      	b.n	80047a4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	0018      	movs	r0, r3
 8004766:	f000 f9c9 	bl	8004afc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	490d      	ldr	r1, [pc, #52]	; (80047ac <HAL_UART_Init+0xa8>)
 8004776:	400a      	ands	r2, r1
 8004778:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	212a      	movs	r1, #42	; 0x2a
 8004786:	438a      	bics	r2, r1
 8004788:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2101      	movs	r1, #1
 8004796:	430a      	orrs	r2, r1
 8004798:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	0018      	movs	r0, r3
 800479e:	f000 fa61 	bl	8004c64 <UART_CheckIdleState>
 80047a2:	0003      	movs	r3, r0
}
 80047a4:	0018      	movs	r0, r3
 80047a6:	46bd      	mov	sp, r7
 80047a8:	b002      	add	sp, #8
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	ffffb7ff 	.word	0xffffb7ff

080047b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b088      	sub	sp, #32
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047b8:	231a      	movs	r3, #26
 80047ba:	18fb      	adds	r3, r7, r3
 80047bc:	2200      	movs	r2, #0
 80047be:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689a      	ldr	r2, [r3, #8]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	431a      	orrs	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	69db      	ldr	r3, [r3, #28]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4abd      	ldr	r2, [pc, #756]	; (8004ad4 <UART_SetConfig+0x324>)
 80047e0:	4013      	ands	r3, r2
 80047e2:	0019      	movs	r1, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	69fa      	ldr	r2, [r7, #28]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	4ab8      	ldr	r2, [pc, #736]	; (8004ad8 <UART_SetConfig+0x328>)
 80047f6:	4013      	ands	r3, r2
 80047f8:	0019      	movs	r1, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	69fa      	ldr	r2, [r7, #28]
 8004812:	4313      	orrs	r3, r2
 8004814:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	4aaf      	ldr	r2, [pc, #700]	; (8004adc <UART_SetConfig+0x32c>)
 800481e:	4013      	ands	r3, r2
 8004820:	0019      	movs	r1, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	69fa      	ldr	r2, [r7, #28]
 8004828:	430a      	orrs	r2, r1
 800482a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004832:	220f      	movs	r2, #15
 8004834:	4393      	bics	r3, r2
 8004836:	0019      	movs	r1, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4aa5      	ldr	r2, [pc, #660]	; (8004ae0 <UART_SetConfig+0x330>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d127      	bne.n	800489e <UART_SetConfig+0xee>
 800484e:	4ba5      	ldr	r3, [pc, #660]	; (8004ae4 <UART_SetConfig+0x334>)
 8004850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004852:	2203      	movs	r2, #3
 8004854:	4013      	ands	r3, r2
 8004856:	2b03      	cmp	r3, #3
 8004858:	d017      	beq.n	800488a <UART_SetConfig+0xda>
 800485a:	d81b      	bhi.n	8004894 <UART_SetConfig+0xe4>
 800485c:	2b02      	cmp	r3, #2
 800485e:	d00a      	beq.n	8004876 <UART_SetConfig+0xc6>
 8004860:	d818      	bhi.n	8004894 <UART_SetConfig+0xe4>
 8004862:	2b00      	cmp	r3, #0
 8004864:	d002      	beq.n	800486c <UART_SetConfig+0xbc>
 8004866:	2b01      	cmp	r3, #1
 8004868:	d00a      	beq.n	8004880 <UART_SetConfig+0xd0>
 800486a:	e013      	b.n	8004894 <UART_SetConfig+0xe4>
 800486c:	231b      	movs	r3, #27
 800486e:	18fb      	adds	r3, r7, r3
 8004870:	2200      	movs	r2, #0
 8004872:	701a      	strb	r2, [r3, #0]
 8004874:	e058      	b.n	8004928 <UART_SetConfig+0x178>
 8004876:	231b      	movs	r3, #27
 8004878:	18fb      	adds	r3, r7, r3
 800487a:	2202      	movs	r2, #2
 800487c:	701a      	strb	r2, [r3, #0]
 800487e:	e053      	b.n	8004928 <UART_SetConfig+0x178>
 8004880:	231b      	movs	r3, #27
 8004882:	18fb      	adds	r3, r7, r3
 8004884:	2204      	movs	r2, #4
 8004886:	701a      	strb	r2, [r3, #0]
 8004888:	e04e      	b.n	8004928 <UART_SetConfig+0x178>
 800488a:	231b      	movs	r3, #27
 800488c:	18fb      	adds	r3, r7, r3
 800488e:	2208      	movs	r2, #8
 8004890:	701a      	strb	r2, [r3, #0]
 8004892:	e049      	b.n	8004928 <UART_SetConfig+0x178>
 8004894:	231b      	movs	r3, #27
 8004896:	18fb      	adds	r3, r7, r3
 8004898:	2210      	movs	r2, #16
 800489a:	701a      	strb	r2, [r3, #0]
 800489c:	e044      	b.n	8004928 <UART_SetConfig+0x178>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a91      	ldr	r2, [pc, #580]	; (8004ae8 <UART_SetConfig+0x338>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d127      	bne.n	80048f8 <UART_SetConfig+0x148>
 80048a8:	4b8e      	ldr	r3, [pc, #568]	; (8004ae4 <UART_SetConfig+0x334>)
 80048aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ac:	220c      	movs	r2, #12
 80048ae:	4013      	ands	r3, r2
 80048b0:	2b0c      	cmp	r3, #12
 80048b2:	d017      	beq.n	80048e4 <UART_SetConfig+0x134>
 80048b4:	d81b      	bhi.n	80048ee <UART_SetConfig+0x13e>
 80048b6:	2b08      	cmp	r3, #8
 80048b8:	d00a      	beq.n	80048d0 <UART_SetConfig+0x120>
 80048ba:	d818      	bhi.n	80048ee <UART_SetConfig+0x13e>
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d002      	beq.n	80048c6 <UART_SetConfig+0x116>
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	d00a      	beq.n	80048da <UART_SetConfig+0x12a>
 80048c4:	e013      	b.n	80048ee <UART_SetConfig+0x13e>
 80048c6:	231b      	movs	r3, #27
 80048c8:	18fb      	adds	r3, r7, r3
 80048ca:	2200      	movs	r2, #0
 80048cc:	701a      	strb	r2, [r3, #0]
 80048ce:	e02b      	b.n	8004928 <UART_SetConfig+0x178>
 80048d0:	231b      	movs	r3, #27
 80048d2:	18fb      	adds	r3, r7, r3
 80048d4:	2202      	movs	r2, #2
 80048d6:	701a      	strb	r2, [r3, #0]
 80048d8:	e026      	b.n	8004928 <UART_SetConfig+0x178>
 80048da:	231b      	movs	r3, #27
 80048dc:	18fb      	adds	r3, r7, r3
 80048de:	2204      	movs	r2, #4
 80048e0:	701a      	strb	r2, [r3, #0]
 80048e2:	e021      	b.n	8004928 <UART_SetConfig+0x178>
 80048e4:	231b      	movs	r3, #27
 80048e6:	18fb      	adds	r3, r7, r3
 80048e8:	2208      	movs	r2, #8
 80048ea:	701a      	strb	r2, [r3, #0]
 80048ec:	e01c      	b.n	8004928 <UART_SetConfig+0x178>
 80048ee:	231b      	movs	r3, #27
 80048f0:	18fb      	adds	r3, r7, r3
 80048f2:	2210      	movs	r2, #16
 80048f4:	701a      	strb	r2, [r3, #0]
 80048f6:	e017      	b.n	8004928 <UART_SetConfig+0x178>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a7b      	ldr	r2, [pc, #492]	; (8004aec <UART_SetConfig+0x33c>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d104      	bne.n	800490c <UART_SetConfig+0x15c>
 8004902:	231b      	movs	r3, #27
 8004904:	18fb      	adds	r3, r7, r3
 8004906:	2200      	movs	r2, #0
 8004908:	701a      	strb	r2, [r3, #0]
 800490a:	e00d      	b.n	8004928 <UART_SetConfig+0x178>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a77      	ldr	r2, [pc, #476]	; (8004af0 <UART_SetConfig+0x340>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d104      	bne.n	8004920 <UART_SetConfig+0x170>
 8004916:	231b      	movs	r3, #27
 8004918:	18fb      	adds	r3, r7, r3
 800491a:	2200      	movs	r2, #0
 800491c:	701a      	strb	r2, [r3, #0]
 800491e:	e003      	b.n	8004928 <UART_SetConfig+0x178>
 8004920:	231b      	movs	r3, #27
 8004922:	18fb      	adds	r3, r7, r3
 8004924:	2210      	movs	r2, #16
 8004926:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	69da      	ldr	r2, [r3, #28]
 800492c:	2380      	movs	r3, #128	; 0x80
 800492e:	021b      	lsls	r3, r3, #8
 8004930:	429a      	cmp	r2, r3
 8004932:	d000      	beq.n	8004936 <UART_SetConfig+0x186>
 8004934:	e066      	b.n	8004a04 <UART_SetConfig+0x254>
  {
    switch (clocksource)
 8004936:	231b      	movs	r3, #27
 8004938:	18fb      	adds	r3, r7, r3
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	2b08      	cmp	r3, #8
 800493e:	d015      	beq.n	800496c <UART_SetConfig+0x1bc>
 8004940:	dc18      	bgt.n	8004974 <UART_SetConfig+0x1c4>
 8004942:	2b04      	cmp	r3, #4
 8004944:	d00d      	beq.n	8004962 <UART_SetConfig+0x1b2>
 8004946:	dc15      	bgt.n	8004974 <UART_SetConfig+0x1c4>
 8004948:	2b00      	cmp	r3, #0
 800494a:	d002      	beq.n	8004952 <UART_SetConfig+0x1a2>
 800494c:	2b02      	cmp	r3, #2
 800494e:	d005      	beq.n	800495c <UART_SetConfig+0x1ac>
 8004950:	e010      	b.n	8004974 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004952:	f7ff fd8d 	bl	8004470 <HAL_RCC_GetPCLK1Freq>
 8004956:	0003      	movs	r3, r0
 8004958:	617b      	str	r3, [r7, #20]
        break;
 800495a:	e012      	b.n	8004982 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800495c:	4b65      	ldr	r3, [pc, #404]	; (8004af4 <UART_SetConfig+0x344>)
 800495e:	617b      	str	r3, [r7, #20]
        break;
 8004960:	e00f      	b.n	8004982 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004962:	f7ff fcf9 	bl	8004358 <HAL_RCC_GetSysClockFreq>
 8004966:	0003      	movs	r3, r0
 8004968:	617b      	str	r3, [r7, #20]
        break;
 800496a:	e00a      	b.n	8004982 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800496c:	2380      	movs	r3, #128	; 0x80
 800496e:	021b      	lsls	r3, r3, #8
 8004970:	617b      	str	r3, [r7, #20]
        break;
 8004972:	e006      	b.n	8004982 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004978:	231a      	movs	r3, #26
 800497a:	18fb      	adds	r3, r7, r3
 800497c:	2201      	movs	r2, #1
 800497e:	701a      	strb	r2, [r3, #0]
        break;
 8004980:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d100      	bne.n	800498a <UART_SetConfig+0x1da>
 8004988:	e08e      	b.n	8004aa8 <UART_SetConfig+0x2f8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800498e:	4b5a      	ldr	r3, [pc, #360]	; (8004af8 <UART_SetConfig+0x348>)
 8004990:	0052      	lsls	r2, r2, #1
 8004992:	5ad3      	ldrh	r3, [r2, r3]
 8004994:	0019      	movs	r1, r3
 8004996:	6978      	ldr	r0, [r7, #20]
 8004998:	f7fb fbba 	bl	8000110 <__udivsi3>
 800499c:	0003      	movs	r3, r0
 800499e:	005a      	lsls	r2, r3, #1
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	085b      	lsrs	r3, r3, #1
 80049a6:	18d2      	adds	r2, r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	0019      	movs	r1, r3
 80049ae:	0010      	movs	r0, r2
 80049b0:	f7fb fbae 	bl	8000110 <__udivsi3>
 80049b4:	0003      	movs	r3, r0
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	2b0f      	cmp	r3, #15
 80049be:	d91c      	bls.n	80049fa <UART_SetConfig+0x24a>
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	2380      	movs	r3, #128	; 0x80
 80049c4:	025b      	lsls	r3, r3, #9
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d217      	bcs.n	80049fa <UART_SetConfig+0x24a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	200e      	movs	r0, #14
 80049d0:	183b      	adds	r3, r7, r0
 80049d2:	210f      	movs	r1, #15
 80049d4:	438a      	bics	r2, r1
 80049d6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	085b      	lsrs	r3, r3, #1
 80049dc:	b29b      	uxth	r3, r3
 80049de:	2207      	movs	r2, #7
 80049e0:	4013      	ands	r3, r2
 80049e2:	b299      	uxth	r1, r3
 80049e4:	183b      	adds	r3, r7, r0
 80049e6:	183a      	adds	r2, r7, r0
 80049e8:	8812      	ldrh	r2, [r2, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	183a      	adds	r2, r7, r0
 80049f4:	8812      	ldrh	r2, [r2, #0]
 80049f6:	60da      	str	r2, [r3, #12]
 80049f8:	e056      	b.n	8004aa8 <UART_SetConfig+0x2f8>
      }
      else
      {
        ret = HAL_ERROR;
 80049fa:	231a      	movs	r3, #26
 80049fc:	18fb      	adds	r3, r7, r3
 80049fe:	2201      	movs	r2, #1
 8004a00:	701a      	strb	r2, [r3, #0]
 8004a02:	e051      	b.n	8004aa8 <UART_SetConfig+0x2f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a04:	231b      	movs	r3, #27
 8004a06:	18fb      	adds	r3, r7, r3
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	2b08      	cmp	r3, #8
 8004a0c:	d015      	beq.n	8004a3a <UART_SetConfig+0x28a>
 8004a0e:	dc18      	bgt.n	8004a42 <UART_SetConfig+0x292>
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	d00d      	beq.n	8004a30 <UART_SetConfig+0x280>
 8004a14:	dc15      	bgt.n	8004a42 <UART_SetConfig+0x292>
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <UART_SetConfig+0x270>
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d005      	beq.n	8004a2a <UART_SetConfig+0x27a>
 8004a1e:	e010      	b.n	8004a42 <UART_SetConfig+0x292>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a20:	f7ff fd26 	bl	8004470 <HAL_RCC_GetPCLK1Freq>
 8004a24:	0003      	movs	r3, r0
 8004a26:	617b      	str	r3, [r7, #20]
        break;
 8004a28:	e012      	b.n	8004a50 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a2a:	4b32      	ldr	r3, [pc, #200]	; (8004af4 <UART_SetConfig+0x344>)
 8004a2c:	617b      	str	r3, [r7, #20]
        break;
 8004a2e:	e00f      	b.n	8004a50 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a30:	f7ff fc92 	bl	8004358 <HAL_RCC_GetSysClockFreq>
 8004a34:	0003      	movs	r3, r0
 8004a36:	617b      	str	r3, [r7, #20]
        break;
 8004a38:	e00a      	b.n	8004a50 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a3a:	2380      	movs	r3, #128	; 0x80
 8004a3c:	021b      	lsls	r3, r3, #8
 8004a3e:	617b      	str	r3, [r7, #20]
        break;
 8004a40:	e006      	b.n	8004a50 <UART_SetConfig+0x2a0>
      default:
        pclk = 0U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004a46:	231a      	movs	r3, #26
 8004a48:	18fb      	adds	r3, r7, r3
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	701a      	strb	r2, [r3, #0]
        break;
 8004a4e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d028      	beq.n	8004aa8 <UART_SetConfig+0x2f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a5a:	4b27      	ldr	r3, [pc, #156]	; (8004af8 <UART_SetConfig+0x348>)
 8004a5c:	0052      	lsls	r2, r2, #1
 8004a5e:	5ad3      	ldrh	r3, [r2, r3]
 8004a60:	0019      	movs	r1, r3
 8004a62:	6978      	ldr	r0, [r7, #20]
 8004a64:	f7fb fb54 	bl	8000110 <__udivsi3>
 8004a68:	0003      	movs	r3, r0
 8004a6a:	001a      	movs	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	085b      	lsrs	r3, r3, #1
 8004a72:	18d2      	adds	r2, r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	0019      	movs	r1, r3
 8004a7a:	0010      	movs	r0, r2
 8004a7c:	f7fb fb48 	bl	8000110 <__udivsi3>
 8004a80:	0003      	movs	r3, r0
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	2b0f      	cmp	r3, #15
 8004a8a:	d909      	bls.n	8004aa0 <UART_SetConfig+0x2f0>
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	2380      	movs	r3, #128	; 0x80
 8004a90:	025b      	lsls	r3, r3, #9
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d204      	bcs.n	8004aa0 <UART_SetConfig+0x2f0>
      {
        huart->Instance->BRR = usartdiv;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	60da      	str	r2, [r3, #12]
 8004a9e:	e003      	b.n	8004aa8 <UART_SetConfig+0x2f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004aa0:	231a      	movs	r3, #26
 8004aa2:	18fb      	adds	r3, r7, r3
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	226a      	movs	r2, #106	; 0x6a
 8004aac:	2101      	movs	r1, #1
 8004aae:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2268      	movs	r2, #104	; 0x68
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004ac4:	231a      	movs	r3, #26
 8004ac6:	18fb      	adds	r3, r7, r3
 8004ac8:	781b      	ldrb	r3, [r3, #0]
}
 8004aca:	0018      	movs	r0, r3
 8004acc:	46bd      	mov	sp, r7
 8004ace:	b008      	add	sp, #32
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	46c0      	nop			; (mov r8, r8)
 8004ad4:	cfff69f3 	.word	0xcfff69f3
 8004ad8:	ffffcfff 	.word	0xffffcfff
 8004adc:	11fff4ff 	.word	0x11fff4ff
 8004ae0:	40013800 	.word	0x40013800
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	40004400 	.word	0x40004400
 8004aec:	40004800 	.word	0x40004800
 8004af0:	40004c00 	.word	0x40004c00
 8004af4:	00f42400 	.word	0x00f42400
 8004af8:	08006234 	.word	0x08006234

08004afc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b08:	2201      	movs	r2, #1
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	d00b      	beq.n	8004b26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	4a4a      	ldr	r2, [pc, #296]	; (8004c40 <UART_AdvFeatureConfig+0x144>)
 8004b16:	4013      	ands	r3, r2
 8004b18:	0019      	movs	r1, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	d00b      	beq.n	8004b48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	4a43      	ldr	r2, [pc, #268]	; (8004c44 <UART_AdvFeatureConfig+0x148>)
 8004b38:	4013      	ands	r3, r2
 8004b3a:	0019      	movs	r1, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4c:	2204      	movs	r2, #4
 8004b4e:	4013      	ands	r3, r2
 8004b50:	d00b      	beq.n	8004b6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	4a3b      	ldr	r2, [pc, #236]	; (8004c48 <UART_AdvFeatureConfig+0x14c>)
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	0019      	movs	r1, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6e:	2208      	movs	r2, #8
 8004b70:	4013      	ands	r3, r2
 8004b72:	d00b      	beq.n	8004b8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	4a34      	ldr	r2, [pc, #208]	; (8004c4c <UART_AdvFeatureConfig+0x150>)
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	0019      	movs	r1, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b90:	2210      	movs	r2, #16
 8004b92:	4013      	ands	r3, r2
 8004b94:	d00b      	beq.n	8004bae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	4a2c      	ldr	r2, [pc, #176]	; (8004c50 <UART_AdvFeatureConfig+0x154>)
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	0019      	movs	r1, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	d00b      	beq.n	8004bd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	4a25      	ldr	r2, [pc, #148]	; (8004c54 <UART_AdvFeatureConfig+0x158>)
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	0019      	movs	r1, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd4:	2240      	movs	r2, #64	; 0x40
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	d01d      	beq.n	8004c16 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	4a1d      	ldr	r2, [pc, #116]	; (8004c58 <UART_AdvFeatureConfig+0x15c>)
 8004be2:	4013      	ands	r3, r2
 8004be4:	0019      	movs	r1, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bf6:	2380      	movs	r3, #128	; 0x80
 8004bf8:	035b      	lsls	r3, r3, #13
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d10b      	bne.n	8004c16 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	4a15      	ldr	r2, [pc, #84]	; (8004c5c <UART_AdvFeatureConfig+0x160>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	0019      	movs	r1, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1a:	2280      	movs	r2, #128	; 0x80
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	d00b      	beq.n	8004c38 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	4a0e      	ldr	r2, [pc, #56]	; (8004c60 <UART_AdvFeatureConfig+0x164>)
 8004c28:	4013      	ands	r3, r2
 8004c2a:	0019      	movs	r1, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	430a      	orrs	r2, r1
 8004c36:	605a      	str	r2, [r3, #4]
  }
}
 8004c38:	46c0      	nop			; (mov r8, r8)
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	b002      	add	sp, #8
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	fffdffff 	.word	0xfffdffff
 8004c44:	fffeffff 	.word	0xfffeffff
 8004c48:	fffbffff 	.word	0xfffbffff
 8004c4c:	ffff7fff 	.word	0xffff7fff
 8004c50:	ffffefff 	.word	0xffffefff
 8004c54:	ffffdfff 	.word	0xffffdfff
 8004c58:	ffefffff 	.word	0xffefffff
 8004c5c:	ff9fffff 	.word	0xff9fffff
 8004c60:	fff7ffff 	.word	0xfff7ffff

08004c64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af02      	add	r7, sp, #8
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	228c      	movs	r2, #140	; 0x8c
 8004c70:	2100      	movs	r1, #0
 8004c72:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c74:	f7fd ffb0 	bl	8002bd8 <HAL_GetTick>
 8004c78:	0003      	movs	r3, r0
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2208      	movs	r2, #8
 8004c84:	4013      	ands	r3, r2
 8004c86:	2b08      	cmp	r3, #8
 8004c88:	d10c      	bne.n	8004ca4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2280      	movs	r2, #128	; 0x80
 8004c8e:	0391      	lsls	r1, r2, #14
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	4a18      	ldr	r2, [pc, #96]	; (8004cf4 <UART_CheckIdleState+0x90>)
 8004c94:	9200      	str	r2, [sp, #0]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f000 f82e 	bl	8004cf8 <UART_WaitOnFlagUntilTimeout>
 8004c9c:	1e03      	subs	r3, r0, #0
 8004c9e:	d001      	beq.n	8004ca4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e023      	b.n	8004cec <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2204      	movs	r2, #4
 8004cac:	4013      	ands	r3, r2
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d10c      	bne.n	8004ccc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2280      	movs	r2, #128	; 0x80
 8004cb6:	03d1      	lsls	r1, r2, #15
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	4a0e      	ldr	r2, [pc, #56]	; (8004cf4 <UART_CheckIdleState+0x90>)
 8004cbc:	9200      	str	r2, [sp, #0]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f000 f81a 	bl	8004cf8 <UART_WaitOnFlagUntilTimeout>
 8004cc4:	1e03      	subs	r3, r0, #0
 8004cc6:	d001      	beq.n	8004ccc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e00f      	b.n	8004cec <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2284      	movs	r2, #132	; 0x84
 8004cd0:	2120      	movs	r1, #32
 8004cd2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2288      	movs	r2, #136	; 0x88
 8004cd8:	2120      	movs	r1, #32
 8004cda:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2280      	movs	r2, #128	; 0x80
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	0018      	movs	r0, r3
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	b004      	add	sp, #16
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	01ffffff 	.word	0x01ffffff

08004cf8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b094      	sub	sp, #80	; 0x50
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	603b      	str	r3, [r7, #0]
 8004d04:	1dfb      	adds	r3, r7, #7
 8004d06:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d08:	e0a7      	b.n	8004e5a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	d100      	bne.n	8004d12 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004d10:	e0a3      	b.n	8004e5a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d12:	f7fd ff61 	bl	8002bd8 <HAL_GetTick>
 8004d16:	0002      	movs	r2, r0
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d302      	bcc.n	8004d28 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d13f      	bne.n	8004da8 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d28:	f3ef 8310 	mrs	r3, PRIMASK
 8004d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004d30:	647b      	str	r3, [r7, #68]	; 0x44
 8004d32:	2301      	movs	r3, #1
 8004d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d38:	f383 8810 	msr	PRIMASK, r3
}
 8004d3c:	46c0      	nop			; (mov r8, r8)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	494e      	ldr	r1, [pc, #312]	; (8004e84 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004d4a:	400a      	ands	r2, r1
 8004d4c:	601a      	str	r2, [r3, #0]
 8004d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d50:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d54:	f383 8810 	msr	PRIMASK, r3
}
 8004d58:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d5a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d5e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d62:	643b      	str	r3, [r7, #64]	; 0x40
 8004d64:	2301      	movs	r3, #1
 8004d66:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6a:	f383 8810 	msr	PRIMASK, r3
}
 8004d6e:	46c0      	nop			; (mov r8, r8)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689a      	ldr	r2, [r3, #8]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	438a      	bics	r2, r1
 8004d7e:	609a      	str	r2, [r3, #8]
 8004d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d82:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d86:	f383 8810 	msr	PRIMASK, r3
}
 8004d8a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2284      	movs	r2, #132	; 0x84
 8004d90:	2120      	movs	r1, #32
 8004d92:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2288      	movs	r2, #136	; 0x88
 8004d98:	2120      	movs	r1, #32
 8004d9a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2280      	movs	r2, #128	; 0x80
 8004da0:	2100      	movs	r1, #0
 8004da2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e069      	b.n	8004e7c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2204      	movs	r2, #4
 8004db0:	4013      	ands	r3, r2
 8004db2:	d052      	beq.n	8004e5a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	69da      	ldr	r2, [r3, #28]
 8004dba:	2380      	movs	r3, #128	; 0x80
 8004dbc:	011b      	lsls	r3, r3, #4
 8004dbe:	401a      	ands	r2, r3
 8004dc0:	2380      	movs	r3, #128	; 0x80
 8004dc2:	011b      	lsls	r3, r3, #4
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d148      	bne.n	8004e5a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2280      	movs	r2, #128	; 0x80
 8004dce:	0112      	lsls	r2, r2, #4
 8004dd0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dd2:	f3ef 8310 	mrs	r3, PRIMASK
 8004dd6:	613b      	str	r3, [r7, #16]
  return(result);
 8004dd8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004dda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ddc:	2301      	movs	r3, #1
 8004dde:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f383 8810 	msr	PRIMASK, r3
}
 8004de6:	46c0      	nop			; (mov r8, r8)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4924      	ldr	r1, [pc, #144]	; (8004e84 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004df4:	400a      	ands	r2, r1
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dfa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	f383 8810 	msr	PRIMASK, r3
}
 8004e02:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e04:	f3ef 8310 	mrs	r3, PRIMASK
 8004e08:	61fb      	str	r3, [r7, #28]
  return(result);
 8004e0a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e0e:	2301      	movs	r3, #1
 8004e10:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e12:	6a3b      	ldr	r3, [r7, #32]
 8004e14:	f383 8810 	msr	PRIMASK, r3
}
 8004e18:	46c0      	nop			; (mov r8, r8)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689a      	ldr	r2, [r3, #8]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2101      	movs	r1, #1
 8004e26:	438a      	bics	r2, r1
 8004e28:	609a      	str	r2, [r3, #8]
 8004e2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e2c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	f383 8810 	msr	PRIMASK, r3
}
 8004e34:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2284      	movs	r2, #132	; 0x84
 8004e3a:	2120      	movs	r1, #32
 8004e3c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2288      	movs	r2, #136	; 0x88
 8004e42:	2120      	movs	r1, #32
 8004e44:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	228c      	movs	r2, #140	; 0x8c
 8004e4a:	2120      	movs	r1, #32
 8004e4c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2280      	movs	r2, #128	; 0x80
 8004e52:	2100      	movs	r1, #0
 8004e54:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e010      	b.n	8004e7c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	69db      	ldr	r3, [r3, #28]
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	4013      	ands	r3, r2
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	425a      	negs	r2, r3
 8004e6a:	4153      	adcs	r3, r2
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	001a      	movs	r2, r3
 8004e70:	1dfb      	adds	r3, r7, #7
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d100      	bne.n	8004e7a <UART_WaitOnFlagUntilTimeout+0x182>
 8004e78:	e747      	b.n	8004d0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	b014      	add	sp, #80	; 0x50
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	fffffe5f 	.word	0xfffffe5f

08004e88 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2280      	movs	r2, #128	; 0x80
 8004e94:	5c9b      	ldrb	r3, [r3, r2]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d101      	bne.n	8004e9e <HAL_UARTEx_DisableFifoMode+0x16>
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	e027      	b.n	8004eee <HAL_UARTEx_DisableFifoMode+0x66>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2280      	movs	r2, #128	; 0x80
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2284      	movs	r2, #132	; 0x84
 8004eaa:	2124      	movs	r1, #36	; 0x24
 8004eac:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	438a      	bics	r2, r1
 8004ec4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	4a0b      	ldr	r2, [pc, #44]	; (8004ef8 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004eca:	4013      	ands	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2284      	movs	r2, #132	; 0x84
 8004ee0:	2120      	movs	r1, #32
 8004ee2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2280      	movs	r2, #128	; 0x80
 8004ee8:	2100      	movs	r1, #0
 8004eea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	0018      	movs	r0, r3
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	b004      	add	sp, #16
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	46c0      	nop			; (mov r8, r8)
 8004ef8:	dfffffff 	.word	0xdfffffff

08004efc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2280      	movs	r2, #128	; 0x80
 8004f0a:	5c9b      	ldrb	r3, [r3, r2]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d101      	bne.n	8004f14 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004f10:	2302      	movs	r3, #2
 8004f12:	e02e      	b.n	8004f72 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2280      	movs	r2, #128	; 0x80
 8004f18:	2101      	movs	r1, #1
 8004f1a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2284      	movs	r2, #132	; 0x84
 8004f20:	2124      	movs	r1, #36	; 0x24
 8004f22:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2101      	movs	r1, #1
 8004f38:	438a      	bics	r2, r1
 8004f3a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	08d9      	lsrs	r1, r3, #3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	0018      	movs	r0, r3
 8004f54:	f000 f854 	bl	8005000 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2284      	movs	r2, #132	; 0x84
 8004f64:	2120      	movs	r1, #32
 8004f66:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2280      	movs	r2, #128	; 0x80
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	0018      	movs	r0, r3
 8004f74:	46bd      	mov	sp, r7
 8004f76:	b004      	add	sp, #16
 8004f78:	bd80      	pop	{r7, pc}
	...

08004f7c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2280      	movs	r2, #128	; 0x80
 8004f8a:	5c9b      	ldrb	r3, [r3, r2]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d101      	bne.n	8004f94 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004f90:	2302      	movs	r3, #2
 8004f92:	e02f      	b.n	8004ff4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2280      	movs	r2, #128	; 0x80
 8004f98:	2101      	movs	r1, #1
 8004f9a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2284      	movs	r2, #132	; 0x84
 8004fa0:	2124      	movs	r1, #36	; 0x24
 8004fa2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2101      	movs	r1, #1
 8004fb8:	438a      	bics	r2, r1
 8004fba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	4a0e      	ldr	r2, [pc, #56]	; (8004ffc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	0019      	movs	r1, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	683a      	ldr	r2, [r7, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	f000 f813 	bl	8005000 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2284      	movs	r2, #132	; 0x84
 8004fe6:	2120      	movs	r1, #32
 8004fe8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2280      	movs	r2, #128	; 0x80
 8004fee:	2100      	movs	r1, #0
 8004ff0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	b004      	add	sp, #16
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	f1ffffff 	.word	0xf1ffffff

08005000 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800500c:	2b00      	cmp	r3, #0
 800500e:	d108      	bne.n	8005022 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	226a      	movs	r2, #106	; 0x6a
 8005014:	2101      	movs	r1, #1
 8005016:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2268      	movs	r2, #104	; 0x68
 800501c:	2101      	movs	r1, #1
 800501e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005020:	e043      	b.n	80050aa <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005022:	260f      	movs	r6, #15
 8005024:	19bb      	adds	r3, r7, r6
 8005026:	2208      	movs	r2, #8
 8005028:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800502a:	200e      	movs	r0, #14
 800502c:	183b      	adds	r3, r7, r0
 800502e:	2208      	movs	r2, #8
 8005030:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	0e5b      	lsrs	r3, r3, #25
 800503a:	b2da      	uxtb	r2, r3
 800503c:	240d      	movs	r4, #13
 800503e:	193b      	adds	r3, r7, r4
 8005040:	2107      	movs	r1, #7
 8005042:	400a      	ands	r2, r1
 8005044:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	0f5b      	lsrs	r3, r3, #29
 800504e:	b2da      	uxtb	r2, r3
 8005050:	250c      	movs	r5, #12
 8005052:	197b      	adds	r3, r7, r5
 8005054:	2107      	movs	r1, #7
 8005056:	400a      	ands	r2, r1
 8005058:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800505a:	183b      	adds	r3, r7, r0
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	197a      	adds	r2, r7, r5
 8005060:	7812      	ldrb	r2, [r2, #0]
 8005062:	4914      	ldr	r1, [pc, #80]	; (80050b4 <UARTEx_SetNbDataToProcess+0xb4>)
 8005064:	5c8a      	ldrb	r2, [r1, r2]
 8005066:	435a      	muls	r2, r3
 8005068:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800506a:	197b      	adds	r3, r7, r5
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	4a12      	ldr	r2, [pc, #72]	; (80050b8 <UARTEx_SetNbDataToProcess+0xb8>)
 8005070:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005072:	0019      	movs	r1, r3
 8005074:	f7fb f8d6 	bl	8000224 <__divsi3>
 8005078:	0003      	movs	r3, r0
 800507a:	b299      	uxth	r1, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	226a      	movs	r2, #106	; 0x6a
 8005080:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005082:	19bb      	adds	r3, r7, r6
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	193a      	adds	r2, r7, r4
 8005088:	7812      	ldrb	r2, [r2, #0]
 800508a:	490a      	ldr	r1, [pc, #40]	; (80050b4 <UARTEx_SetNbDataToProcess+0xb4>)
 800508c:	5c8a      	ldrb	r2, [r1, r2]
 800508e:	435a      	muls	r2, r3
 8005090:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005092:	193b      	adds	r3, r7, r4
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	4a08      	ldr	r2, [pc, #32]	; (80050b8 <UARTEx_SetNbDataToProcess+0xb8>)
 8005098:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800509a:	0019      	movs	r1, r3
 800509c:	f7fb f8c2 	bl	8000224 <__divsi3>
 80050a0:	0003      	movs	r3, r0
 80050a2:	b299      	uxth	r1, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2268      	movs	r2, #104	; 0x68
 80050a8:	5299      	strh	r1, [r3, r2]
}
 80050aa:	46c0      	nop			; (mov r8, r8)
 80050ac:	46bd      	mov	sp, r7
 80050ae:	b005      	add	sp, #20
 80050b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050b2:	46c0      	nop			; (mov r8, r8)
 80050b4:	0800624c 	.word	0x0800624c
 80050b8:	08006254 	.word	0x08006254

080050bc <__errno>:
 80050bc:	4b01      	ldr	r3, [pc, #4]	; (80050c4 <__errno+0x8>)
 80050be:	6818      	ldr	r0, [r3, #0]
 80050c0:	4770      	bx	lr
 80050c2:	46c0      	nop			; (mov r8, r8)
 80050c4:	20000018 	.word	0x20000018

080050c8 <__libc_init_array>:
 80050c8:	b570      	push	{r4, r5, r6, lr}
 80050ca:	2600      	movs	r6, #0
 80050cc:	4d0c      	ldr	r5, [pc, #48]	; (8005100 <__libc_init_array+0x38>)
 80050ce:	4c0d      	ldr	r4, [pc, #52]	; (8005104 <__libc_init_array+0x3c>)
 80050d0:	1b64      	subs	r4, r4, r5
 80050d2:	10a4      	asrs	r4, r4, #2
 80050d4:	42a6      	cmp	r6, r4
 80050d6:	d109      	bne.n	80050ec <__libc_init_array+0x24>
 80050d8:	2600      	movs	r6, #0
 80050da:	f001 f827 	bl	800612c <_init>
 80050de:	4d0a      	ldr	r5, [pc, #40]	; (8005108 <__libc_init_array+0x40>)
 80050e0:	4c0a      	ldr	r4, [pc, #40]	; (800510c <__libc_init_array+0x44>)
 80050e2:	1b64      	subs	r4, r4, r5
 80050e4:	10a4      	asrs	r4, r4, #2
 80050e6:	42a6      	cmp	r6, r4
 80050e8:	d105      	bne.n	80050f6 <__libc_init_array+0x2e>
 80050ea:	bd70      	pop	{r4, r5, r6, pc}
 80050ec:	00b3      	lsls	r3, r6, #2
 80050ee:	58eb      	ldr	r3, [r5, r3]
 80050f0:	4798      	blx	r3
 80050f2:	3601      	adds	r6, #1
 80050f4:	e7ee      	b.n	80050d4 <__libc_init_array+0xc>
 80050f6:	00b3      	lsls	r3, r6, #2
 80050f8:	58eb      	ldr	r3, [r5, r3]
 80050fa:	4798      	blx	r3
 80050fc:	3601      	adds	r6, #1
 80050fe:	e7f2      	b.n	80050e6 <__libc_init_array+0x1e>
 8005100:	080062a0 	.word	0x080062a0
 8005104:	080062a0 	.word	0x080062a0
 8005108:	080062a0 	.word	0x080062a0
 800510c:	080062a4 	.word	0x080062a4

08005110 <malloc>:
 8005110:	b510      	push	{r4, lr}
 8005112:	4b03      	ldr	r3, [pc, #12]	; (8005120 <malloc+0x10>)
 8005114:	0001      	movs	r1, r0
 8005116:	6818      	ldr	r0, [r3, #0]
 8005118:	f000 f80c 	bl	8005134 <_malloc_r>
 800511c:	bd10      	pop	{r4, pc}
 800511e:	46c0      	nop			; (mov r8, r8)
 8005120:	20000018 	.word	0x20000018

08005124 <memset>:
 8005124:	0003      	movs	r3, r0
 8005126:	1882      	adds	r2, r0, r2
 8005128:	4293      	cmp	r3, r2
 800512a:	d100      	bne.n	800512e <memset+0xa>
 800512c:	4770      	bx	lr
 800512e:	7019      	strb	r1, [r3, #0]
 8005130:	3301      	adds	r3, #1
 8005132:	e7f9      	b.n	8005128 <memset+0x4>

08005134 <_malloc_r>:
 8005134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005136:	2303      	movs	r3, #3
 8005138:	1ccd      	adds	r5, r1, #3
 800513a:	439d      	bics	r5, r3
 800513c:	3508      	adds	r5, #8
 800513e:	0006      	movs	r6, r0
 8005140:	2d0c      	cmp	r5, #12
 8005142:	d21f      	bcs.n	8005184 <_malloc_r+0x50>
 8005144:	250c      	movs	r5, #12
 8005146:	42a9      	cmp	r1, r5
 8005148:	d81e      	bhi.n	8005188 <_malloc_r+0x54>
 800514a:	0030      	movs	r0, r6
 800514c:	f000 f862 	bl	8005214 <__malloc_lock>
 8005150:	4925      	ldr	r1, [pc, #148]	; (80051e8 <_malloc_r+0xb4>)
 8005152:	680a      	ldr	r2, [r1, #0]
 8005154:	0014      	movs	r4, r2
 8005156:	2c00      	cmp	r4, #0
 8005158:	d11a      	bne.n	8005190 <_malloc_r+0x5c>
 800515a:	4f24      	ldr	r7, [pc, #144]	; (80051ec <_malloc_r+0xb8>)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d104      	bne.n	800516c <_malloc_r+0x38>
 8005162:	0021      	movs	r1, r4
 8005164:	0030      	movs	r0, r6
 8005166:	f000 f843 	bl	80051f0 <_sbrk_r>
 800516a:	6038      	str	r0, [r7, #0]
 800516c:	0029      	movs	r1, r5
 800516e:	0030      	movs	r0, r6
 8005170:	f000 f83e 	bl	80051f0 <_sbrk_r>
 8005174:	1c43      	adds	r3, r0, #1
 8005176:	d12b      	bne.n	80051d0 <_malloc_r+0x9c>
 8005178:	230c      	movs	r3, #12
 800517a:	0030      	movs	r0, r6
 800517c:	6033      	str	r3, [r6, #0]
 800517e:	f000 f851 	bl	8005224 <__malloc_unlock>
 8005182:	e003      	b.n	800518c <_malloc_r+0x58>
 8005184:	2d00      	cmp	r5, #0
 8005186:	dade      	bge.n	8005146 <_malloc_r+0x12>
 8005188:	230c      	movs	r3, #12
 800518a:	6033      	str	r3, [r6, #0]
 800518c:	2000      	movs	r0, #0
 800518e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005190:	6823      	ldr	r3, [r4, #0]
 8005192:	1b5b      	subs	r3, r3, r5
 8005194:	d419      	bmi.n	80051ca <_malloc_r+0x96>
 8005196:	2b0b      	cmp	r3, #11
 8005198:	d903      	bls.n	80051a2 <_malloc_r+0x6e>
 800519a:	6023      	str	r3, [r4, #0]
 800519c:	18e4      	adds	r4, r4, r3
 800519e:	6025      	str	r5, [r4, #0]
 80051a0:	e003      	b.n	80051aa <_malloc_r+0x76>
 80051a2:	6863      	ldr	r3, [r4, #4]
 80051a4:	42a2      	cmp	r2, r4
 80051a6:	d10e      	bne.n	80051c6 <_malloc_r+0x92>
 80051a8:	600b      	str	r3, [r1, #0]
 80051aa:	0030      	movs	r0, r6
 80051ac:	f000 f83a 	bl	8005224 <__malloc_unlock>
 80051b0:	0020      	movs	r0, r4
 80051b2:	2207      	movs	r2, #7
 80051b4:	300b      	adds	r0, #11
 80051b6:	1d23      	adds	r3, r4, #4
 80051b8:	4390      	bics	r0, r2
 80051ba:	1ac2      	subs	r2, r0, r3
 80051bc:	4298      	cmp	r0, r3
 80051be:	d0e6      	beq.n	800518e <_malloc_r+0x5a>
 80051c0:	1a1b      	subs	r3, r3, r0
 80051c2:	50a3      	str	r3, [r4, r2]
 80051c4:	e7e3      	b.n	800518e <_malloc_r+0x5a>
 80051c6:	6053      	str	r3, [r2, #4]
 80051c8:	e7ef      	b.n	80051aa <_malloc_r+0x76>
 80051ca:	0022      	movs	r2, r4
 80051cc:	6864      	ldr	r4, [r4, #4]
 80051ce:	e7c2      	b.n	8005156 <_malloc_r+0x22>
 80051d0:	2303      	movs	r3, #3
 80051d2:	1cc4      	adds	r4, r0, #3
 80051d4:	439c      	bics	r4, r3
 80051d6:	42a0      	cmp	r0, r4
 80051d8:	d0e1      	beq.n	800519e <_malloc_r+0x6a>
 80051da:	1a21      	subs	r1, r4, r0
 80051dc:	0030      	movs	r0, r6
 80051de:	f000 f807 	bl	80051f0 <_sbrk_r>
 80051e2:	1c43      	adds	r3, r0, #1
 80051e4:	d1db      	bne.n	800519e <_malloc_r+0x6a>
 80051e6:	e7c7      	b.n	8005178 <_malloc_r+0x44>
 80051e8:	200000a8 	.word	0x200000a8
 80051ec:	200000ac 	.word	0x200000ac

080051f0 <_sbrk_r>:
 80051f0:	2300      	movs	r3, #0
 80051f2:	b570      	push	{r4, r5, r6, lr}
 80051f4:	4d06      	ldr	r5, [pc, #24]	; (8005210 <_sbrk_r+0x20>)
 80051f6:	0004      	movs	r4, r0
 80051f8:	0008      	movs	r0, r1
 80051fa:	602b      	str	r3, [r5, #0]
 80051fc:	f7fd fc0a 	bl	8002a14 <_sbrk>
 8005200:	1c43      	adds	r3, r0, #1
 8005202:	d103      	bne.n	800520c <_sbrk_r+0x1c>
 8005204:	682b      	ldr	r3, [r5, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d000      	beq.n	800520c <_sbrk_r+0x1c>
 800520a:	6023      	str	r3, [r4, #0]
 800520c:	bd70      	pop	{r4, r5, r6, pc}
 800520e:	46c0      	nop			; (mov r8, r8)
 8005210:	200001b8 	.word	0x200001b8

08005214 <__malloc_lock>:
 8005214:	b510      	push	{r4, lr}
 8005216:	4802      	ldr	r0, [pc, #8]	; (8005220 <__malloc_lock+0xc>)
 8005218:	f000 f80c 	bl	8005234 <__retarget_lock_acquire_recursive>
 800521c:	bd10      	pop	{r4, pc}
 800521e:	46c0      	nop			; (mov r8, r8)
 8005220:	200001c0 	.word	0x200001c0

08005224 <__malloc_unlock>:
 8005224:	b510      	push	{r4, lr}
 8005226:	4802      	ldr	r0, [pc, #8]	; (8005230 <__malloc_unlock+0xc>)
 8005228:	f000 f805 	bl	8005236 <__retarget_lock_release_recursive>
 800522c:	bd10      	pop	{r4, pc}
 800522e:	46c0      	nop			; (mov r8, r8)
 8005230:	200001c0 	.word	0x200001c0

08005234 <__retarget_lock_acquire_recursive>:
 8005234:	4770      	bx	lr

08005236 <__retarget_lock_release_recursive>:
 8005236:	4770      	bx	lr

08005238 <pow>:
 8005238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800523a:	001d      	movs	r5, r3
 800523c:	0014      	movs	r4, r2
 800523e:	9000      	str	r0, [sp, #0]
 8005240:	9101      	str	r1, [sp, #4]
 8005242:	f000 f8b1 	bl	80053a8 <__ieee754_pow>
 8005246:	4b54      	ldr	r3, [pc, #336]	; (8005398 <pow+0x160>)
 8005248:	0006      	movs	r6, r0
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	000f      	movs	r7, r1
 800524e:	b25b      	sxtb	r3, r3
 8005250:	3301      	adds	r3, #1
 8005252:	d018      	beq.n	8005286 <pow+0x4e>
 8005254:	0022      	movs	r2, r4
 8005256:	002b      	movs	r3, r5
 8005258:	0020      	movs	r0, r4
 800525a:	0029      	movs	r1, r5
 800525c:	f7fc fe98 	bl	8001f90 <__aeabi_dcmpun>
 8005260:	2800      	cmp	r0, #0
 8005262:	d110      	bne.n	8005286 <pow+0x4e>
 8005264:	9a00      	ldr	r2, [sp, #0]
 8005266:	9b01      	ldr	r3, [sp, #4]
 8005268:	0010      	movs	r0, r2
 800526a:	0019      	movs	r1, r3
 800526c:	f7fc fe90 	bl	8001f90 <__aeabi_dcmpun>
 8005270:	2200      	movs	r2, #0
 8005272:	2300      	movs	r3, #0
 8005274:	2800      	cmp	r0, #0
 8005276:	d00a      	beq.n	800528e <pow+0x56>
 8005278:	0020      	movs	r0, r4
 800527a:	0029      	movs	r1, r5
 800527c:	f7fb f8ce 	bl	800041c <__aeabi_dcmpeq>
 8005280:	2800      	cmp	r0, #0
 8005282:	d000      	beq.n	8005286 <pow+0x4e>
 8005284:	e084      	b.n	8005390 <pow+0x158>
 8005286:	0030      	movs	r0, r6
 8005288:	0039      	movs	r1, r7
 800528a:	b003      	add	sp, #12
 800528c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800528e:	9800      	ldr	r0, [sp, #0]
 8005290:	9901      	ldr	r1, [sp, #4]
 8005292:	f7fb f8c3 	bl	800041c <__aeabi_dcmpeq>
 8005296:	2800      	cmp	r0, #0
 8005298:	d01c      	beq.n	80052d4 <pow+0x9c>
 800529a:	2200      	movs	r2, #0
 800529c:	2300      	movs	r3, #0
 800529e:	0020      	movs	r0, r4
 80052a0:	0029      	movs	r1, r5
 80052a2:	f7fb f8bb 	bl	800041c <__aeabi_dcmpeq>
 80052a6:	2800      	cmp	r0, #0
 80052a8:	d172      	bne.n	8005390 <pow+0x158>
 80052aa:	0020      	movs	r0, r4
 80052ac:	0029      	movs	r1, r5
 80052ae:	f000 fe33 	bl	8005f18 <finite>
 80052b2:	2800      	cmp	r0, #0
 80052b4:	d0e7      	beq.n	8005286 <pow+0x4e>
 80052b6:	2200      	movs	r2, #0
 80052b8:	2300      	movs	r3, #0
 80052ba:	0020      	movs	r0, r4
 80052bc:	0029      	movs	r1, r5
 80052be:	f7fb f8b3 	bl	8000428 <__aeabi_dcmplt>
 80052c2:	2800      	cmp	r0, #0
 80052c4:	d0df      	beq.n	8005286 <pow+0x4e>
 80052c6:	f7ff fef9 	bl	80050bc <__errno>
 80052ca:	2321      	movs	r3, #33	; 0x21
 80052cc:	2600      	movs	r6, #0
 80052ce:	6003      	str	r3, [r0, #0]
 80052d0:	4f32      	ldr	r7, [pc, #200]	; (800539c <pow+0x164>)
 80052d2:	e7d8      	b.n	8005286 <pow+0x4e>
 80052d4:	0030      	movs	r0, r6
 80052d6:	0039      	movs	r1, r7
 80052d8:	f000 fe1e 	bl	8005f18 <finite>
 80052dc:	2800      	cmp	r0, #0
 80052de:	d139      	bne.n	8005354 <pow+0x11c>
 80052e0:	9800      	ldr	r0, [sp, #0]
 80052e2:	9901      	ldr	r1, [sp, #4]
 80052e4:	f000 fe18 	bl	8005f18 <finite>
 80052e8:	2800      	cmp	r0, #0
 80052ea:	d033      	beq.n	8005354 <pow+0x11c>
 80052ec:	0020      	movs	r0, r4
 80052ee:	0029      	movs	r1, r5
 80052f0:	f000 fe12 	bl	8005f18 <finite>
 80052f4:	2800      	cmp	r0, #0
 80052f6:	d02d      	beq.n	8005354 <pow+0x11c>
 80052f8:	0032      	movs	r2, r6
 80052fa:	003b      	movs	r3, r7
 80052fc:	0030      	movs	r0, r6
 80052fe:	0039      	movs	r1, r7
 8005300:	f7fc fe46 	bl	8001f90 <__aeabi_dcmpun>
 8005304:	2800      	cmp	r0, #0
 8005306:	d00c      	beq.n	8005322 <pow+0xea>
 8005308:	f7ff fed8 	bl	80050bc <__errno>
 800530c:	2321      	movs	r3, #33	; 0x21
 800530e:	2200      	movs	r2, #0
 8005310:	6003      	str	r3, [r0, #0]
 8005312:	2300      	movs	r3, #0
 8005314:	0010      	movs	r0, r2
 8005316:	0019      	movs	r1, r3
 8005318:	f7fb fc36 	bl	8000b88 <__aeabi_ddiv>
 800531c:	0006      	movs	r6, r0
 800531e:	000f      	movs	r7, r1
 8005320:	e7b1      	b.n	8005286 <pow+0x4e>
 8005322:	f7ff fecb 	bl	80050bc <__errno>
 8005326:	2322      	movs	r3, #34	; 0x22
 8005328:	2200      	movs	r2, #0
 800532a:	6003      	str	r3, [r0, #0]
 800532c:	2300      	movs	r3, #0
 800532e:	9800      	ldr	r0, [sp, #0]
 8005330:	9901      	ldr	r1, [sp, #4]
 8005332:	f7fb f879 	bl	8000428 <__aeabi_dcmplt>
 8005336:	2600      	movs	r6, #0
 8005338:	2800      	cmp	r0, #0
 800533a:	d009      	beq.n	8005350 <pow+0x118>
 800533c:	0020      	movs	r0, r4
 800533e:	0029      	movs	r1, r5
 8005340:	f000 fdf8 	bl	8005f34 <rint>
 8005344:	0022      	movs	r2, r4
 8005346:	002b      	movs	r3, r5
 8005348:	f7fb f868 	bl	800041c <__aeabi_dcmpeq>
 800534c:	2800      	cmp	r0, #0
 800534e:	d0bf      	beq.n	80052d0 <pow+0x98>
 8005350:	4f13      	ldr	r7, [pc, #76]	; (80053a0 <pow+0x168>)
 8005352:	e798      	b.n	8005286 <pow+0x4e>
 8005354:	2200      	movs	r2, #0
 8005356:	2300      	movs	r3, #0
 8005358:	0030      	movs	r0, r6
 800535a:	0039      	movs	r1, r7
 800535c:	f7fb f85e 	bl	800041c <__aeabi_dcmpeq>
 8005360:	2800      	cmp	r0, #0
 8005362:	d100      	bne.n	8005366 <pow+0x12e>
 8005364:	e78f      	b.n	8005286 <pow+0x4e>
 8005366:	9800      	ldr	r0, [sp, #0]
 8005368:	9901      	ldr	r1, [sp, #4]
 800536a:	f000 fdd5 	bl	8005f18 <finite>
 800536e:	2800      	cmp	r0, #0
 8005370:	d100      	bne.n	8005374 <pow+0x13c>
 8005372:	e788      	b.n	8005286 <pow+0x4e>
 8005374:	0020      	movs	r0, r4
 8005376:	0029      	movs	r1, r5
 8005378:	f000 fdce 	bl	8005f18 <finite>
 800537c:	2800      	cmp	r0, #0
 800537e:	d100      	bne.n	8005382 <pow+0x14a>
 8005380:	e781      	b.n	8005286 <pow+0x4e>
 8005382:	f7ff fe9b 	bl	80050bc <__errno>
 8005386:	2322      	movs	r3, #34	; 0x22
 8005388:	2600      	movs	r6, #0
 800538a:	2700      	movs	r7, #0
 800538c:	6003      	str	r3, [r0, #0]
 800538e:	e77a      	b.n	8005286 <pow+0x4e>
 8005390:	2600      	movs	r6, #0
 8005392:	4f04      	ldr	r7, [pc, #16]	; (80053a4 <pow+0x16c>)
 8005394:	e777      	b.n	8005286 <pow+0x4e>
 8005396:	46c0      	nop			; (mov r8, r8)
 8005398:	2000007c 	.word	0x2000007c
 800539c:	fff00000 	.word	0xfff00000
 80053a0:	7ff00000 	.word	0x7ff00000
 80053a4:	3ff00000 	.word	0x3ff00000

080053a8 <__ieee754_pow>:
 80053a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053aa:	b095      	sub	sp, #84	; 0x54
 80053ac:	9202      	str	r2, [sp, #8]
 80053ae:	9303      	str	r3, [sp, #12]
 80053b0:	9b03      	ldr	r3, [sp, #12]
 80053b2:	9a03      	ldr	r2, [sp, #12]
 80053b4:	9304      	str	r3, [sp, #16]
 80053b6:	9b02      	ldr	r3, [sp, #8]
 80053b8:	0055      	lsls	r5, r2, #1
 80053ba:	001a      	movs	r2, r3
 80053bc:	086d      	lsrs	r5, r5, #1
 80053be:	0007      	movs	r7, r0
 80053c0:	000e      	movs	r6, r1
 80053c2:	432a      	orrs	r2, r5
 80053c4:	d101      	bne.n	80053ca <__ieee754_pow+0x22>
 80053c6:	f000 fcb6 	bl	8005d36 <__ieee754_pow+0x98e>
 80053ca:	4a82      	ldr	r2, [pc, #520]	; (80055d4 <__ieee754_pow+0x22c>)
 80053cc:	004c      	lsls	r4, r1, #1
 80053ce:	9108      	str	r1, [sp, #32]
 80053d0:	9000      	str	r0, [sp, #0]
 80053d2:	0864      	lsrs	r4, r4, #1
 80053d4:	4294      	cmp	r4, r2
 80053d6:	dc0d      	bgt.n	80053f4 <__ieee754_pow+0x4c>
 80053d8:	d104      	bne.n	80053e4 <__ieee754_pow+0x3c>
 80053da:	2800      	cmp	r0, #0
 80053dc:	d110      	bne.n	8005400 <__ieee754_pow+0x58>
 80053de:	42a5      	cmp	r5, r4
 80053e0:	dd03      	ble.n	80053ea <__ieee754_pow+0x42>
 80053e2:	e00d      	b.n	8005400 <__ieee754_pow+0x58>
 80053e4:	4a7b      	ldr	r2, [pc, #492]	; (80055d4 <__ieee754_pow+0x22c>)
 80053e6:	4295      	cmp	r5, r2
 80053e8:	dc04      	bgt.n	80053f4 <__ieee754_pow+0x4c>
 80053ea:	4a7a      	ldr	r2, [pc, #488]	; (80055d4 <__ieee754_pow+0x22c>)
 80053ec:	4295      	cmp	r5, r2
 80053ee:	d10d      	bne.n	800540c <__ieee754_pow+0x64>
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00b      	beq.n	800540c <__ieee754_pow+0x64>
 80053f4:	4b78      	ldr	r3, [pc, #480]	; (80055d8 <__ieee754_pow+0x230>)
 80053f6:	18e4      	adds	r4, r4, r3
 80053f8:	4327      	orrs	r7, r4
 80053fa:	d101      	bne.n	8005400 <__ieee754_pow+0x58>
 80053fc:	f000 fc9b 	bl	8005d36 <__ieee754_pow+0x98e>
 8005400:	4876      	ldr	r0, [pc, #472]	; (80055dc <__ieee754_pow+0x234>)
 8005402:	f000 fd91 	bl	8005f28 <nan>
 8005406:	9000      	str	r0, [sp, #0]
 8005408:	9101      	str	r1, [sp, #4]
 800540a:	e092      	b.n	8005532 <__ieee754_pow+0x18a>
 800540c:	2200      	movs	r2, #0
 800540e:	9206      	str	r2, [sp, #24]
 8005410:	2e00      	cmp	r6, #0
 8005412:	da69      	bge.n	80054e8 <__ieee754_pow+0x140>
 8005414:	4a72      	ldr	r2, [pc, #456]	; (80055e0 <__ieee754_pow+0x238>)
 8005416:	4295      	cmp	r5, r2
 8005418:	dc64      	bgt.n	80054e4 <__ieee754_pow+0x13c>
 800541a:	4a72      	ldr	r2, [pc, #456]	; (80055e4 <__ieee754_pow+0x23c>)
 800541c:	4295      	cmp	r5, r2
 800541e:	dd11      	ble.n	8005444 <__ieee754_pow+0x9c>
 8005420:	4971      	ldr	r1, [pc, #452]	; (80055e8 <__ieee754_pow+0x240>)
 8005422:	152a      	asrs	r2, r5, #20
 8005424:	1852      	adds	r2, r2, r1
 8005426:	2a14      	cmp	r2, #20
 8005428:	dd3c      	ble.n	80054a4 <__ieee754_pow+0xfc>
 800542a:	2134      	movs	r1, #52	; 0x34
 800542c:	1a8a      	subs	r2, r1, r2
 800542e:	9902      	ldr	r1, [sp, #8]
 8005430:	40d1      	lsrs	r1, r2
 8005432:	0008      	movs	r0, r1
 8005434:	4090      	lsls	r0, r2
 8005436:	4298      	cmp	r0, r3
 8005438:	d104      	bne.n	8005444 <__ieee754_pow+0x9c>
 800543a:	2201      	movs	r2, #1
 800543c:	4011      	ands	r1, r2
 800543e:	1892      	adds	r2, r2, r2
 8005440:	1a52      	subs	r2, r2, r1
 8005442:	9206      	str	r2, [sp, #24]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d03c      	beq.n	80054c2 <__ieee754_pow+0x11a>
 8005448:	0038      	movs	r0, r7
 800544a:	0031      	movs	r1, r6
 800544c:	f000 fd60 	bl	8005f10 <fabs>
 8005450:	9000      	str	r0, [sp, #0]
 8005452:	9101      	str	r1, [sp, #4]
 8005454:	2f00      	cmp	r7, #0
 8005456:	d000      	beq.n	800545a <__ieee754_pow+0xb2>
 8005458:	e094      	b.n	8005584 <__ieee754_pow+0x1dc>
 800545a:	2c00      	cmp	r4, #0
 800545c:	d005      	beq.n	800546a <__ieee754_pow+0xc2>
 800545e:	4a63      	ldr	r2, [pc, #396]	; (80055ec <__ieee754_pow+0x244>)
 8005460:	00b3      	lsls	r3, r6, #2
 8005462:	089b      	lsrs	r3, r3, #2
 8005464:	4293      	cmp	r3, r2
 8005466:	d000      	beq.n	800546a <__ieee754_pow+0xc2>
 8005468:	e08c      	b.n	8005584 <__ieee754_pow+0x1dc>
 800546a:	9b04      	ldr	r3, [sp, #16]
 800546c:	2b00      	cmp	r3, #0
 800546e:	da07      	bge.n	8005480 <__ieee754_pow+0xd8>
 8005470:	9a00      	ldr	r2, [sp, #0]
 8005472:	9b01      	ldr	r3, [sp, #4]
 8005474:	2000      	movs	r0, #0
 8005476:	495d      	ldr	r1, [pc, #372]	; (80055ec <__ieee754_pow+0x244>)
 8005478:	f7fb fb86 	bl	8000b88 <__aeabi_ddiv>
 800547c:	9000      	str	r0, [sp, #0]
 800547e:	9101      	str	r1, [sp, #4]
 8005480:	9b08      	ldr	r3, [sp, #32]
 8005482:	2b00      	cmp	r3, #0
 8005484:	da55      	bge.n	8005532 <__ieee754_pow+0x18a>
 8005486:	4b54      	ldr	r3, [pc, #336]	; (80055d8 <__ieee754_pow+0x230>)
 8005488:	18e4      	adds	r4, r4, r3
 800548a:	9b06      	ldr	r3, [sp, #24]
 800548c:	431c      	orrs	r4, r3
 800548e:	d000      	beq.n	8005492 <__ieee754_pow+0xea>
 8005490:	e06c      	b.n	800556c <__ieee754_pow+0x1c4>
 8005492:	9a00      	ldr	r2, [sp, #0]
 8005494:	9b01      	ldr	r3, [sp, #4]
 8005496:	0010      	movs	r0, r2
 8005498:	0019      	movs	r1, r3
 800549a:	f7fc f9e7 	bl	800186c <__aeabi_dsub>
 800549e:	0002      	movs	r2, r0
 80054a0:	000b      	movs	r3, r1
 80054a2:	e01c      	b.n	80054de <__ieee754_pow+0x136>
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1cf      	bne.n	8005448 <__ieee754_pow+0xa0>
 80054a8:	3314      	adds	r3, #20
 80054aa:	1a9a      	subs	r2, r3, r2
 80054ac:	002b      	movs	r3, r5
 80054ae:	4113      	asrs	r3, r2
 80054b0:	0019      	movs	r1, r3
 80054b2:	4091      	lsls	r1, r2
 80054b4:	42a9      	cmp	r1, r5
 80054b6:	d104      	bne.n	80054c2 <__ieee754_pow+0x11a>
 80054b8:	2201      	movs	r2, #1
 80054ba:	4013      	ands	r3, r2
 80054bc:	1892      	adds	r2, r2, r2
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	9306      	str	r3, [sp, #24]
 80054c2:	4b4a      	ldr	r3, [pc, #296]	; (80055ec <__ieee754_pow+0x244>)
 80054c4:	429d      	cmp	r5, r3
 80054c6:	d138      	bne.n	800553a <__ieee754_pow+0x192>
 80054c8:	0038      	movs	r0, r7
 80054ca:	0031      	movs	r1, r6
 80054cc:	9b04      	ldr	r3, [sp, #16]
 80054ce:	9000      	str	r0, [sp, #0]
 80054d0:	9101      	str	r1, [sp, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	da2d      	bge.n	8005532 <__ieee754_pow+0x18a>
 80054d6:	003a      	movs	r2, r7
 80054d8:	0033      	movs	r3, r6
 80054da:	2000      	movs	r0, #0
 80054dc:	4943      	ldr	r1, [pc, #268]	; (80055ec <__ieee754_pow+0x244>)
 80054de:	f7fb fb53 	bl	8000b88 <__aeabi_ddiv>
 80054e2:	e790      	b.n	8005406 <__ieee754_pow+0x5e>
 80054e4:	2202      	movs	r2, #2
 80054e6:	9206      	str	r2, [sp, #24]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1ad      	bne.n	8005448 <__ieee754_pow+0xa0>
 80054ec:	4b39      	ldr	r3, [pc, #228]	; (80055d4 <__ieee754_pow+0x22c>)
 80054ee:	429d      	cmp	r5, r3
 80054f0:	d1e7      	bne.n	80054c2 <__ieee754_pow+0x11a>
 80054f2:	4b39      	ldr	r3, [pc, #228]	; (80055d8 <__ieee754_pow+0x230>)
 80054f4:	18e3      	adds	r3, r4, r3
 80054f6:	431f      	orrs	r7, r3
 80054f8:	d101      	bne.n	80054fe <__ieee754_pow+0x156>
 80054fa:	f000 fc1c 	bl	8005d36 <__ieee754_pow+0x98e>
 80054fe:	4b39      	ldr	r3, [pc, #228]	; (80055e4 <__ieee754_pow+0x23c>)
 8005500:	429c      	cmp	r4, r3
 8005502:	dd0b      	ble.n	800551c <__ieee754_pow+0x174>
 8005504:	9b02      	ldr	r3, [sp, #8]
 8005506:	9c03      	ldr	r4, [sp, #12]
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	9401      	str	r4, [sp, #4]
 800550c:	9b04      	ldr	r3, [sp, #16]
 800550e:	2b00      	cmp	r3, #0
 8005510:	da0f      	bge.n	8005532 <__ieee754_pow+0x18a>
 8005512:	2300      	movs	r3, #0
 8005514:	2400      	movs	r4, #0
 8005516:	9300      	str	r3, [sp, #0]
 8005518:	9401      	str	r4, [sp, #4]
 800551a:	e00a      	b.n	8005532 <__ieee754_pow+0x18a>
 800551c:	9b04      	ldr	r3, [sp, #16]
 800551e:	2b00      	cmp	r3, #0
 8005520:	daf7      	bge.n	8005512 <__ieee754_pow+0x16a>
 8005522:	2280      	movs	r2, #128	; 0x80
 8005524:	0612      	lsls	r2, r2, #24
 8005526:	4694      	mov	ip, r2
 8005528:	9b02      	ldr	r3, [sp, #8]
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	9b03      	ldr	r3, [sp, #12]
 800552e:	4463      	add	r3, ip
 8005530:	9301      	str	r3, [sp, #4]
 8005532:	9800      	ldr	r0, [sp, #0]
 8005534:	9901      	ldr	r1, [sp, #4]
 8005536:	b015      	add	sp, #84	; 0x54
 8005538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800553a:	2380      	movs	r3, #128	; 0x80
 800553c:	9a04      	ldr	r2, [sp, #16]
 800553e:	05db      	lsls	r3, r3, #23
 8005540:	429a      	cmp	r2, r3
 8005542:	d106      	bne.n	8005552 <__ieee754_pow+0x1aa>
 8005544:	003a      	movs	r2, r7
 8005546:	0033      	movs	r3, r6
 8005548:	0038      	movs	r0, r7
 800554a:	0031      	movs	r1, r6
 800554c:	f7fb ff22 	bl	8001394 <__aeabi_dmul>
 8005550:	e759      	b.n	8005406 <__ieee754_pow+0x5e>
 8005552:	4b27      	ldr	r3, [pc, #156]	; (80055f0 <__ieee754_pow+0x248>)
 8005554:	9a04      	ldr	r2, [sp, #16]
 8005556:	429a      	cmp	r2, r3
 8005558:	d000      	beq.n	800555c <__ieee754_pow+0x1b4>
 800555a:	e775      	b.n	8005448 <__ieee754_pow+0xa0>
 800555c:	2e00      	cmp	r6, #0
 800555e:	da00      	bge.n	8005562 <__ieee754_pow+0x1ba>
 8005560:	e772      	b.n	8005448 <__ieee754_pow+0xa0>
 8005562:	0038      	movs	r0, r7
 8005564:	0031      	movs	r1, r6
 8005566:	f000 fc1f 	bl	8005da8 <__ieee754_sqrt>
 800556a:	e74c      	b.n	8005406 <__ieee754_pow+0x5e>
 800556c:	9b06      	ldr	r3, [sp, #24]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d1df      	bne.n	8005532 <__ieee754_pow+0x18a>
 8005572:	9800      	ldr	r0, [sp, #0]
 8005574:	2180      	movs	r1, #128	; 0x80
 8005576:	0002      	movs	r2, r0
 8005578:	9801      	ldr	r0, [sp, #4]
 800557a:	0609      	lsls	r1, r1, #24
 800557c:	1843      	adds	r3, r0, r1
 800557e:	9200      	str	r2, [sp, #0]
 8005580:	9301      	str	r3, [sp, #4]
 8005582:	e7d6      	b.n	8005532 <__ieee754_pow+0x18a>
 8005584:	0ff3      	lsrs	r3, r6, #31
 8005586:	3b01      	subs	r3, #1
 8005588:	9310      	str	r3, [sp, #64]	; 0x40
 800558a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800558c:	9b06      	ldr	r3, [sp, #24]
 800558e:	4313      	orrs	r3, r2
 8005590:	d104      	bne.n	800559c <__ieee754_pow+0x1f4>
 8005592:	003a      	movs	r2, r7
 8005594:	0033      	movs	r3, r6
 8005596:	0038      	movs	r0, r7
 8005598:	0031      	movs	r1, r6
 800559a:	e77e      	b.n	800549a <__ieee754_pow+0xf2>
 800559c:	4b15      	ldr	r3, [pc, #84]	; (80055f4 <__ieee754_pow+0x24c>)
 800559e:	429d      	cmp	r5, r3
 80055a0:	dc00      	bgt.n	80055a4 <__ieee754_pow+0x1fc>
 80055a2:	e0f5      	b.n	8005790 <__ieee754_pow+0x3e8>
 80055a4:	4b14      	ldr	r3, [pc, #80]	; (80055f8 <__ieee754_pow+0x250>)
 80055a6:	429d      	cmp	r5, r3
 80055a8:	dd0a      	ble.n	80055c0 <__ieee754_pow+0x218>
 80055aa:	4b0e      	ldr	r3, [pc, #56]	; (80055e4 <__ieee754_pow+0x23c>)
 80055ac:	429c      	cmp	r4, r3
 80055ae:	dc0d      	bgt.n	80055cc <__ieee754_pow+0x224>
 80055b0:	9b04      	ldr	r3, [sp, #16]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	daad      	bge.n	8005512 <__ieee754_pow+0x16a>
 80055b6:	4a11      	ldr	r2, [pc, #68]	; (80055fc <__ieee754_pow+0x254>)
 80055b8:	4b11      	ldr	r3, [pc, #68]	; (8005600 <__ieee754_pow+0x258>)
 80055ba:	0010      	movs	r0, r2
 80055bc:	0019      	movs	r1, r3
 80055be:	e7c5      	b.n	800554c <__ieee754_pow+0x1a4>
 80055c0:	4b10      	ldr	r3, [pc, #64]	; (8005604 <__ieee754_pow+0x25c>)
 80055c2:	429c      	cmp	r4, r3
 80055c4:	ddf4      	ble.n	80055b0 <__ieee754_pow+0x208>
 80055c6:	4b09      	ldr	r3, [pc, #36]	; (80055ec <__ieee754_pow+0x244>)
 80055c8:	429c      	cmp	r4, r3
 80055ca:	dd1d      	ble.n	8005608 <__ieee754_pow+0x260>
 80055cc:	9b04      	ldr	r3, [sp, #16]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	dcf1      	bgt.n	80055b6 <__ieee754_pow+0x20e>
 80055d2:	e79e      	b.n	8005512 <__ieee754_pow+0x16a>
 80055d4:	7ff00000 	.word	0x7ff00000
 80055d8:	c0100000 	.word	0xc0100000
 80055dc:	0800625c 	.word	0x0800625c
 80055e0:	433fffff 	.word	0x433fffff
 80055e4:	3fefffff 	.word	0x3fefffff
 80055e8:	fffffc01 	.word	0xfffffc01
 80055ec:	3ff00000 	.word	0x3ff00000
 80055f0:	3fe00000 	.word	0x3fe00000
 80055f4:	41e00000 	.word	0x41e00000
 80055f8:	43f00000 	.word	0x43f00000
 80055fc:	8800759c 	.word	0x8800759c
 8005600:	7e37e43c 	.word	0x7e37e43c
 8005604:	3feffffe 	.word	0x3feffffe
 8005608:	2200      	movs	r2, #0
 800560a:	9800      	ldr	r0, [sp, #0]
 800560c:	9901      	ldr	r1, [sp, #4]
 800560e:	4b52      	ldr	r3, [pc, #328]	; (8005758 <__ieee754_pow+0x3b0>)
 8005610:	f7fc f92c 	bl	800186c <__aeabi_dsub>
 8005614:	22c0      	movs	r2, #192	; 0xc0
 8005616:	4b51      	ldr	r3, [pc, #324]	; (800575c <__ieee754_pow+0x3b4>)
 8005618:	05d2      	lsls	r2, r2, #23
 800561a:	0004      	movs	r4, r0
 800561c:	000d      	movs	r5, r1
 800561e:	f7fb feb9 	bl	8001394 <__aeabi_dmul>
 8005622:	4a4f      	ldr	r2, [pc, #316]	; (8005760 <__ieee754_pow+0x3b8>)
 8005624:	9000      	str	r0, [sp, #0]
 8005626:	9101      	str	r1, [sp, #4]
 8005628:	4b4e      	ldr	r3, [pc, #312]	; (8005764 <__ieee754_pow+0x3bc>)
 800562a:	0020      	movs	r0, r4
 800562c:	0029      	movs	r1, r5
 800562e:	f7fb feb1 	bl	8001394 <__aeabi_dmul>
 8005632:	2200      	movs	r2, #0
 8005634:	9004      	str	r0, [sp, #16]
 8005636:	9105      	str	r1, [sp, #20]
 8005638:	4b4b      	ldr	r3, [pc, #300]	; (8005768 <__ieee754_pow+0x3c0>)
 800563a:	0020      	movs	r0, r4
 800563c:	0029      	movs	r1, r5
 800563e:	f7fb fea9 	bl	8001394 <__aeabi_dmul>
 8005642:	0002      	movs	r2, r0
 8005644:	000b      	movs	r3, r1
 8005646:	4849      	ldr	r0, [pc, #292]	; (800576c <__ieee754_pow+0x3c4>)
 8005648:	4949      	ldr	r1, [pc, #292]	; (8005770 <__ieee754_pow+0x3c8>)
 800564a:	f7fc f90f 	bl	800186c <__aeabi_dsub>
 800564e:	0022      	movs	r2, r4
 8005650:	002b      	movs	r3, r5
 8005652:	f7fb fe9f 	bl	8001394 <__aeabi_dmul>
 8005656:	0002      	movs	r2, r0
 8005658:	000b      	movs	r3, r1
 800565a:	2000      	movs	r0, #0
 800565c:	4945      	ldr	r1, [pc, #276]	; (8005774 <__ieee754_pow+0x3cc>)
 800565e:	f7fc f905 	bl	800186c <__aeabi_dsub>
 8005662:	0022      	movs	r2, r4
 8005664:	0006      	movs	r6, r0
 8005666:	000f      	movs	r7, r1
 8005668:	002b      	movs	r3, r5
 800566a:	0020      	movs	r0, r4
 800566c:	0029      	movs	r1, r5
 800566e:	f7fb fe91 	bl	8001394 <__aeabi_dmul>
 8005672:	0002      	movs	r2, r0
 8005674:	000b      	movs	r3, r1
 8005676:	0030      	movs	r0, r6
 8005678:	0039      	movs	r1, r7
 800567a:	f7fb fe8b 	bl	8001394 <__aeabi_dmul>
 800567e:	4a3e      	ldr	r2, [pc, #248]	; (8005778 <__ieee754_pow+0x3d0>)
 8005680:	4b36      	ldr	r3, [pc, #216]	; (800575c <__ieee754_pow+0x3b4>)
 8005682:	f7fb fe87 	bl	8001394 <__aeabi_dmul>
 8005686:	0002      	movs	r2, r0
 8005688:	000b      	movs	r3, r1
 800568a:	9804      	ldr	r0, [sp, #16]
 800568c:	9905      	ldr	r1, [sp, #20]
 800568e:	f7fc f8ed 	bl	800186c <__aeabi_dsub>
 8005692:	0002      	movs	r2, r0
 8005694:	000b      	movs	r3, r1
 8005696:	0004      	movs	r4, r0
 8005698:	000d      	movs	r5, r1
 800569a:	9800      	ldr	r0, [sp, #0]
 800569c:	9901      	ldr	r1, [sp, #4]
 800569e:	f7fa ff09 	bl	80004b4 <__aeabi_dadd>
 80056a2:	9a00      	ldr	r2, [sp, #0]
 80056a4:	9b01      	ldr	r3, [sp, #4]
 80056a6:	2000      	movs	r0, #0
 80056a8:	000f      	movs	r7, r1
 80056aa:	0006      	movs	r6, r0
 80056ac:	f7fc f8de 	bl	800186c <__aeabi_dsub>
 80056b0:	0002      	movs	r2, r0
 80056b2:	000b      	movs	r3, r1
 80056b4:	0020      	movs	r0, r4
 80056b6:	0029      	movs	r1, r5
 80056b8:	f7fc f8d8 	bl	800186c <__aeabi_dsub>
 80056bc:	9b06      	ldr	r3, [sp, #24]
 80056be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80056c0:	3b01      	subs	r3, #1
 80056c2:	9004      	str	r0, [sp, #16]
 80056c4:	9105      	str	r1, [sp, #20]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	d000      	beq.n	80056cc <__ieee754_pow+0x324>
 80056ca:	e1e0      	b.n	8005a8e <__ieee754_pow+0x6e6>
 80056cc:	2300      	movs	r3, #0
 80056ce:	4c2b      	ldr	r4, [pc, #172]	; (800577c <__ieee754_pow+0x3d4>)
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	9401      	str	r4, [sp, #4]
 80056d4:	9c02      	ldr	r4, [sp, #8]
 80056d6:	9d03      	ldr	r5, [sp, #12]
 80056d8:	9802      	ldr	r0, [sp, #8]
 80056da:	9903      	ldr	r1, [sp, #12]
 80056dc:	2400      	movs	r4, #0
 80056de:	002b      	movs	r3, r5
 80056e0:	0022      	movs	r2, r4
 80056e2:	f7fc f8c3 	bl	800186c <__aeabi_dsub>
 80056e6:	0032      	movs	r2, r6
 80056e8:	003b      	movs	r3, r7
 80056ea:	f7fb fe53 	bl	8001394 <__aeabi_dmul>
 80056ee:	9a02      	ldr	r2, [sp, #8]
 80056f0:	9b03      	ldr	r3, [sp, #12]
 80056f2:	9006      	str	r0, [sp, #24]
 80056f4:	9107      	str	r1, [sp, #28]
 80056f6:	9804      	ldr	r0, [sp, #16]
 80056f8:	9905      	ldr	r1, [sp, #20]
 80056fa:	f7fb fe4b 	bl	8001394 <__aeabi_dmul>
 80056fe:	0002      	movs	r2, r0
 8005700:	000b      	movs	r3, r1
 8005702:	9806      	ldr	r0, [sp, #24]
 8005704:	9907      	ldr	r1, [sp, #28]
 8005706:	f7fa fed5 	bl	80004b4 <__aeabi_dadd>
 800570a:	0022      	movs	r2, r4
 800570c:	002b      	movs	r3, r5
 800570e:	9004      	str	r0, [sp, #16]
 8005710:	9105      	str	r1, [sp, #20]
 8005712:	0030      	movs	r0, r6
 8005714:	0039      	movs	r1, r7
 8005716:	f7fb fe3d 	bl	8001394 <__aeabi_dmul>
 800571a:	0006      	movs	r6, r0
 800571c:	000f      	movs	r7, r1
 800571e:	000b      	movs	r3, r1
 8005720:	0002      	movs	r2, r0
 8005722:	9804      	ldr	r0, [sp, #16]
 8005724:	9905      	ldr	r1, [sp, #20]
 8005726:	9606      	str	r6, [sp, #24]
 8005728:	9707      	str	r7, [sp, #28]
 800572a:	f7fa fec3 	bl	80004b4 <__aeabi_dadd>
 800572e:	4b14      	ldr	r3, [pc, #80]	; (8005780 <__ieee754_pow+0x3d8>)
 8005730:	0005      	movs	r5, r0
 8005732:	000c      	movs	r4, r1
 8005734:	9108      	str	r1, [sp, #32]
 8005736:	4299      	cmp	r1, r3
 8005738:	dc00      	bgt.n	800573c <__ieee754_pow+0x394>
 800573a:	e2da      	b.n	8005cf2 <__ieee754_pow+0x94a>
 800573c:	4b11      	ldr	r3, [pc, #68]	; (8005784 <__ieee754_pow+0x3dc>)
 800573e:	18cb      	adds	r3, r1, r3
 8005740:	4303      	orrs	r3, r0
 8005742:	d100      	bne.n	8005746 <__ieee754_pow+0x39e>
 8005744:	e1dc      	b.n	8005b00 <__ieee754_pow+0x758>
 8005746:	9800      	ldr	r0, [sp, #0]
 8005748:	9901      	ldr	r1, [sp, #4]
 800574a:	4a0f      	ldr	r2, [pc, #60]	; (8005788 <__ieee754_pow+0x3e0>)
 800574c:	4b0f      	ldr	r3, [pc, #60]	; (800578c <__ieee754_pow+0x3e4>)
 800574e:	f7fb fe21 	bl	8001394 <__aeabi_dmul>
 8005752:	4a0d      	ldr	r2, [pc, #52]	; (8005788 <__ieee754_pow+0x3e0>)
 8005754:	4b0d      	ldr	r3, [pc, #52]	; (800578c <__ieee754_pow+0x3e4>)
 8005756:	e6f9      	b.n	800554c <__ieee754_pow+0x1a4>
 8005758:	3ff00000 	.word	0x3ff00000
 800575c:	3ff71547 	.word	0x3ff71547
 8005760:	f85ddf44 	.word	0xf85ddf44
 8005764:	3e54ae0b 	.word	0x3e54ae0b
 8005768:	3fd00000 	.word	0x3fd00000
 800576c:	55555555 	.word	0x55555555
 8005770:	3fd55555 	.word	0x3fd55555
 8005774:	3fe00000 	.word	0x3fe00000
 8005778:	652b82fe 	.word	0x652b82fe
 800577c:	bff00000 	.word	0xbff00000
 8005780:	408fffff 	.word	0x408fffff
 8005784:	bf700000 	.word	0xbf700000
 8005788:	8800759c 	.word	0x8800759c
 800578c:	7e37e43c 	.word	0x7e37e43c
 8005790:	4bc0      	ldr	r3, [pc, #768]	; (8005a94 <__ieee754_pow+0x6ec>)
 8005792:	2200      	movs	r2, #0
 8005794:	4233      	tst	r3, r6
 8005796:	d10a      	bne.n	80057ae <__ieee754_pow+0x406>
 8005798:	9800      	ldr	r0, [sp, #0]
 800579a:	9901      	ldr	r1, [sp, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	4bbe      	ldr	r3, [pc, #760]	; (8005a98 <__ieee754_pow+0x6f0>)
 80057a0:	f7fb fdf8 	bl	8001394 <__aeabi_dmul>
 80057a4:	2235      	movs	r2, #53	; 0x35
 80057a6:	9000      	str	r0, [sp, #0]
 80057a8:	9101      	str	r1, [sp, #4]
 80057aa:	9c01      	ldr	r4, [sp, #4]
 80057ac:	4252      	negs	r2, r2
 80057ae:	49bb      	ldr	r1, [pc, #748]	; (8005a9c <__ieee754_pow+0x6f4>)
 80057b0:	1523      	asrs	r3, r4, #20
 80057b2:	185b      	adds	r3, r3, r1
 80057b4:	189b      	adds	r3, r3, r2
 80057b6:	0324      	lsls	r4, r4, #12
 80057b8:	4db9      	ldr	r5, [pc, #740]	; (8005aa0 <__ieee754_pow+0x6f8>)
 80057ba:	930d      	str	r3, [sp, #52]	; 0x34
 80057bc:	4bb9      	ldr	r3, [pc, #740]	; (8005aa4 <__ieee754_pow+0x6fc>)
 80057be:	0b22      	lsrs	r2, r4, #12
 80057c0:	4315      	orrs	r5, r2
 80057c2:	2400      	movs	r4, #0
 80057c4:	429a      	cmp	r2, r3
 80057c6:	dd09      	ble.n	80057dc <__ieee754_pow+0x434>
 80057c8:	4bb7      	ldr	r3, [pc, #732]	; (8005aa8 <__ieee754_pow+0x700>)
 80057ca:	3401      	adds	r4, #1
 80057cc:	429a      	cmp	r2, r3
 80057ce:	dd05      	ble.n	80057dc <__ieee754_pow+0x434>
 80057d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057d2:	191b      	adds	r3, r3, r4
 80057d4:	2400      	movs	r4, #0
 80057d6:	930d      	str	r3, [sp, #52]	; 0x34
 80057d8:	4bb4      	ldr	r3, [pc, #720]	; (8005aac <__ieee754_pow+0x704>)
 80057da:	18ed      	adds	r5, r5, r3
 80057dc:	9800      	ldr	r0, [sp, #0]
 80057de:	9901      	ldr	r1, [sp, #4]
 80057e0:	0029      	movs	r1, r5
 80057e2:	00e3      	lsls	r3, r4, #3
 80057e4:	9311      	str	r3, [sp, #68]	; 0x44
 80057e6:	4bb2      	ldr	r3, [pc, #712]	; (8005ab0 <__ieee754_pow+0x708>)
 80057e8:	00e2      	lsls	r2, r4, #3
 80057ea:	189b      	adds	r3, r3, r2
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	900e      	str	r0, [sp, #56]	; 0x38
 80057f2:	910f      	str	r1, [sp, #60]	; 0x3c
 80057f4:	920a      	str	r2, [sp, #40]	; 0x28
 80057f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80057f8:	f7fc f838 	bl	800186c <__aeabi_dsub>
 80057fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80057fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005800:	0006      	movs	r6, r0
 8005802:	000f      	movs	r7, r1
 8005804:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005806:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005808:	f7fa fe54 	bl	80004b4 <__aeabi_dadd>
 800580c:	0002      	movs	r2, r0
 800580e:	000b      	movs	r3, r1
 8005810:	2000      	movs	r0, #0
 8005812:	49a3      	ldr	r1, [pc, #652]	; (8005aa0 <__ieee754_pow+0x6f8>)
 8005814:	f7fb f9b8 	bl	8000b88 <__aeabi_ddiv>
 8005818:	0002      	movs	r2, r0
 800581a:	000b      	movs	r3, r1
 800581c:	9012      	str	r0, [sp, #72]	; 0x48
 800581e:	9113      	str	r1, [sp, #76]	; 0x4c
 8005820:	0030      	movs	r0, r6
 8005822:	0039      	movs	r1, r7
 8005824:	f7fb fdb6 	bl	8001394 <__aeabi_dmul>
 8005828:	9008      	str	r0, [sp, #32]
 800582a:	9109      	str	r1, [sp, #36]	; 0x24
 800582c:	9a08      	ldr	r2, [sp, #32]
 800582e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005830:	2180      	movs	r1, #128	; 0x80
 8005832:	9204      	str	r2, [sp, #16]
 8005834:	9305      	str	r3, [sp, #20]
 8005836:	2300      	movs	r3, #0
 8005838:	0589      	lsls	r1, r1, #22
 800583a:	106d      	asrs	r5, r5, #1
 800583c:	430d      	orrs	r5, r1
 800583e:	2180      	movs	r1, #128	; 0x80
 8005840:	9304      	str	r3, [sp, #16]
 8005842:	9a04      	ldr	r2, [sp, #16]
 8005844:	9b05      	ldr	r3, [sp, #20]
 8005846:	9200      	str	r2, [sp, #0]
 8005848:	9301      	str	r3, [sp, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	0309      	lsls	r1, r1, #12
 800584e:	186d      	adds	r5, r5, r1
 8005850:	04a1      	lsls	r1, r4, #18
 8005852:	186b      	adds	r3, r5, r1
 8005854:	9800      	ldr	r0, [sp, #0]
 8005856:	9901      	ldr	r1, [sp, #4]
 8005858:	0014      	movs	r4, r2
 800585a:	001d      	movs	r5, r3
 800585c:	f7fb fd9a 	bl	8001394 <__aeabi_dmul>
 8005860:	0002      	movs	r2, r0
 8005862:	000b      	movs	r3, r1
 8005864:	0030      	movs	r0, r6
 8005866:	0039      	movs	r1, r7
 8005868:	f7fc f800 	bl	800186c <__aeabi_dsub>
 800586c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800586e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005870:	0006      	movs	r6, r0
 8005872:	000f      	movs	r7, r1
 8005874:	0020      	movs	r0, r4
 8005876:	0029      	movs	r1, r5
 8005878:	f7fb fff8 	bl	800186c <__aeabi_dsub>
 800587c:	0002      	movs	r2, r0
 800587e:	000b      	movs	r3, r1
 8005880:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005882:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005884:	f7fb fff2 	bl	800186c <__aeabi_dsub>
 8005888:	9a00      	ldr	r2, [sp, #0]
 800588a:	9b01      	ldr	r3, [sp, #4]
 800588c:	f7fb fd82 	bl	8001394 <__aeabi_dmul>
 8005890:	0002      	movs	r2, r0
 8005892:	000b      	movs	r3, r1
 8005894:	0030      	movs	r0, r6
 8005896:	0039      	movs	r1, r7
 8005898:	f7fb ffe8 	bl	800186c <__aeabi_dsub>
 800589c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800589e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80058a0:	f7fb fd78 	bl	8001394 <__aeabi_dmul>
 80058a4:	9a08      	ldr	r2, [sp, #32]
 80058a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058a8:	900a      	str	r0, [sp, #40]	; 0x28
 80058aa:	910b      	str	r1, [sp, #44]	; 0x2c
 80058ac:	0010      	movs	r0, r2
 80058ae:	0019      	movs	r1, r3
 80058b0:	f7fb fd70 	bl	8001394 <__aeabi_dmul>
 80058b4:	0006      	movs	r6, r0
 80058b6:	000f      	movs	r7, r1
 80058b8:	4a7e      	ldr	r2, [pc, #504]	; (8005ab4 <__ieee754_pow+0x70c>)
 80058ba:	4b7f      	ldr	r3, [pc, #508]	; (8005ab8 <__ieee754_pow+0x710>)
 80058bc:	f7fb fd6a 	bl	8001394 <__aeabi_dmul>
 80058c0:	4a7e      	ldr	r2, [pc, #504]	; (8005abc <__ieee754_pow+0x714>)
 80058c2:	4b7f      	ldr	r3, [pc, #508]	; (8005ac0 <__ieee754_pow+0x718>)
 80058c4:	f7fa fdf6 	bl	80004b4 <__aeabi_dadd>
 80058c8:	0032      	movs	r2, r6
 80058ca:	003b      	movs	r3, r7
 80058cc:	f7fb fd62 	bl	8001394 <__aeabi_dmul>
 80058d0:	4a7c      	ldr	r2, [pc, #496]	; (8005ac4 <__ieee754_pow+0x71c>)
 80058d2:	4b7d      	ldr	r3, [pc, #500]	; (8005ac8 <__ieee754_pow+0x720>)
 80058d4:	f7fa fdee 	bl	80004b4 <__aeabi_dadd>
 80058d8:	0032      	movs	r2, r6
 80058da:	003b      	movs	r3, r7
 80058dc:	f7fb fd5a 	bl	8001394 <__aeabi_dmul>
 80058e0:	4a7a      	ldr	r2, [pc, #488]	; (8005acc <__ieee754_pow+0x724>)
 80058e2:	4b7b      	ldr	r3, [pc, #492]	; (8005ad0 <__ieee754_pow+0x728>)
 80058e4:	f7fa fde6 	bl	80004b4 <__aeabi_dadd>
 80058e8:	0032      	movs	r2, r6
 80058ea:	003b      	movs	r3, r7
 80058ec:	f7fb fd52 	bl	8001394 <__aeabi_dmul>
 80058f0:	4a78      	ldr	r2, [pc, #480]	; (8005ad4 <__ieee754_pow+0x72c>)
 80058f2:	4b79      	ldr	r3, [pc, #484]	; (8005ad8 <__ieee754_pow+0x730>)
 80058f4:	f7fa fdde 	bl	80004b4 <__aeabi_dadd>
 80058f8:	0032      	movs	r2, r6
 80058fa:	003b      	movs	r3, r7
 80058fc:	f7fb fd4a 	bl	8001394 <__aeabi_dmul>
 8005900:	4a76      	ldr	r2, [pc, #472]	; (8005adc <__ieee754_pow+0x734>)
 8005902:	4b77      	ldr	r3, [pc, #476]	; (8005ae0 <__ieee754_pow+0x738>)
 8005904:	f7fa fdd6 	bl	80004b4 <__aeabi_dadd>
 8005908:	0032      	movs	r2, r6
 800590a:	0004      	movs	r4, r0
 800590c:	000d      	movs	r5, r1
 800590e:	003b      	movs	r3, r7
 8005910:	0030      	movs	r0, r6
 8005912:	0039      	movs	r1, r7
 8005914:	f7fb fd3e 	bl	8001394 <__aeabi_dmul>
 8005918:	0002      	movs	r2, r0
 800591a:	000b      	movs	r3, r1
 800591c:	0020      	movs	r0, r4
 800591e:	0029      	movs	r1, r5
 8005920:	f7fb fd38 	bl	8001394 <__aeabi_dmul>
 8005924:	9a00      	ldr	r2, [sp, #0]
 8005926:	9b01      	ldr	r3, [sp, #4]
 8005928:	0004      	movs	r4, r0
 800592a:	000d      	movs	r5, r1
 800592c:	9808      	ldr	r0, [sp, #32]
 800592e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005930:	f7fa fdc0 	bl	80004b4 <__aeabi_dadd>
 8005934:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005936:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005938:	f7fb fd2c 	bl	8001394 <__aeabi_dmul>
 800593c:	0022      	movs	r2, r4
 800593e:	002b      	movs	r3, r5
 8005940:	f7fa fdb8 	bl	80004b4 <__aeabi_dadd>
 8005944:	9a00      	ldr	r2, [sp, #0]
 8005946:	9b01      	ldr	r3, [sp, #4]
 8005948:	900e      	str	r0, [sp, #56]	; 0x38
 800594a:	910f      	str	r1, [sp, #60]	; 0x3c
 800594c:	0010      	movs	r0, r2
 800594e:	0019      	movs	r1, r3
 8005950:	f7fb fd20 	bl	8001394 <__aeabi_dmul>
 8005954:	2200      	movs	r2, #0
 8005956:	4b63      	ldr	r3, [pc, #396]	; (8005ae4 <__ieee754_pow+0x73c>)
 8005958:	0004      	movs	r4, r0
 800595a:	000d      	movs	r5, r1
 800595c:	f7fa fdaa 	bl	80004b4 <__aeabi_dadd>
 8005960:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005962:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005964:	f7fa fda6 	bl	80004b4 <__aeabi_dadd>
 8005968:	9e04      	ldr	r6, [sp, #16]
 800596a:	000f      	movs	r7, r1
 800596c:	0032      	movs	r2, r6
 800596e:	000b      	movs	r3, r1
 8005970:	9800      	ldr	r0, [sp, #0]
 8005972:	9901      	ldr	r1, [sp, #4]
 8005974:	f7fb fd0e 	bl	8001394 <__aeabi_dmul>
 8005978:	2200      	movs	r2, #0
 800597a:	9000      	str	r0, [sp, #0]
 800597c:	9101      	str	r1, [sp, #4]
 800597e:	4b59      	ldr	r3, [pc, #356]	; (8005ae4 <__ieee754_pow+0x73c>)
 8005980:	0030      	movs	r0, r6
 8005982:	0039      	movs	r1, r7
 8005984:	f7fb ff72 	bl	800186c <__aeabi_dsub>
 8005988:	0022      	movs	r2, r4
 800598a:	002b      	movs	r3, r5
 800598c:	f7fb ff6e 	bl	800186c <__aeabi_dsub>
 8005990:	0002      	movs	r2, r0
 8005992:	000b      	movs	r3, r1
 8005994:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005996:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005998:	f7fb ff68 	bl	800186c <__aeabi_dsub>
 800599c:	9a08      	ldr	r2, [sp, #32]
 800599e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059a0:	f7fb fcf8 	bl	8001394 <__aeabi_dmul>
 80059a4:	0032      	movs	r2, r6
 80059a6:	0004      	movs	r4, r0
 80059a8:	000d      	movs	r5, r1
 80059aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80059ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059ae:	003b      	movs	r3, r7
 80059b0:	f7fb fcf0 	bl	8001394 <__aeabi_dmul>
 80059b4:	0002      	movs	r2, r0
 80059b6:	000b      	movs	r3, r1
 80059b8:	0020      	movs	r0, r4
 80059ba:	0029      	movs	r1, r5
 80059bc:	f7fa fd7a 	bl	80004b4 <__aeabi_dadd>
 80059c0:	0004      	movs	r4, r0
 80059c2:	000d      	movs	r5, r1
 80059c4:	0002      	movs	r2, r0
 80059c6:	000b      	movs	r3, r1
 80059c8:	9800      	ldr	r0, [sp, #0]
 80059ca:	9901      	ldr	r1, [sp, #4]
 80059cc:	f7fa fd72 	bl	80004b4 <__aeabi_dadd>
 80059d0:	22e0      	movs	r2, #224	; 0xe0
 80059d2:	9e04      	ldr	r6, [sp, #16]
 80059d4:	4b44      	ldr	r3, [pc, #272]	; (8005ae8 <__ieee754_pow+0x740>)
 80059d6:	0030      	movs	r0, r6
 80059d8:	0612      	lsls	r2, r2, #24
 80059da:	000f      	movs	r7, r1
 80059dc:	f7fb fcda 	bl	8001394 <__aeabi_dmul>
 80059e0:	9008      	str	r0, [sp, #32]
 80059e2:	9109      	str	r1, [sp, #36]	; 0x24
 80059e4:	9a00      	ldr	r2, [sp, #0]
 80059e6:	9b01      	ldr	r3, [sp, #4]
 80059e8:	0030      	movs	r0, r6
 80059ea:	0039      	movs	r1, r7
 80059ec:	f7fb ff3e 	bl	800186c <__aeabi_dsub>
 80059f0:	0002      	movs	r2, r0
 80059f2:	000b      	movs	r3, r1
 80059f4:	0020      	movs	r0, r4
 80059f6:	0029      	movs	r1, r5
 80059f8:	f7fb ff38 	bl	800186c <__aeabi_dsub>
 80059fc:	4a3b      	ldr	r2, [pc, #236]	; (8005aec <__ieee754_pow+0x744>)
 80059fe:	4b3a      	ldr	r3, [pc, #232]	; (8005ae8 <__ieee754_pow+0x740>)
 8005a00:	f7fb fcc8 	bl	8001394 <__aeabi_dmul>
 8005a04:	4a3a      	ldr	r2, [pc, #232]	; (8005af0 <__ieee754_pow+0x748>)
 8005a06:	0004      	movs	r4, r0
 8005a08:	000d      	movs	r5, r1
 8005a0a:	0030      	movs	r0, r6
 8005a0c:	0039      	movs	r1, r7
 8005a0e:	4b39      	ldr	r3, [pc, #228]	; (8005af4 <__ieee754_pow+0x74c>)
 8005a10:	f7fb fcc0 	bl	8001394 <__aeabi_dmul>
 8005a14:	0002      	movs	r2, r0
 8005a16:	000b      	movs	r3, r1
 8005a18:	0020      	movs	r0, r4
 8005a1a:	0029      	movs	r1, r5
 8005a1c:	f7fa fd4a 	bl	80004b4 <__aeabi_dadd>
 8005a20:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005a22:	4b35      	ldr	r3, [pc, #212]	; (8005af8 <__ieee754_pow+0x750>)
 8005a24:	189b      	adds	r3, r3, r2
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f7fa fd43 	bl	80004b4 <__aeabi_dadd>
 8005a2e:	900a      	str	r0, [sp, #40]	; 0x28
 8005a30:	910b      	str	r1, [sp, #44]	; 0x2c
 8005a32:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005a34:	f7fc fb00 	bl	8002038 <__aeabi_i2d>
 8005a38:	0004      	movs	r4, r0
 8005a3a:	000d      	movs	r5, r1
 8005a3c:	9808      	ldr	r0, [sp, #32]
 8005a3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a40:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005a42:	4b2e      	ldr	r3, [pc, #184]	; (8005afc <__ieee754_pow+0x754>)
 8005a44:	189b      	adds	r3, r3, r2
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	9200      	str	r2, [sp, #0]
 8005a4c:	9301      	str	r3, [sp, #4]
 8005a4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a52:	f7fa fd2f 	bl	80004b4 <__aeabi_dadd>
 8005a56:	9a00      	ldr	r2, [sp, #0]
 8005a58:	9b01      	ldr	r3, [sp, #4]
 8005a5a:	f7fa fd2b 	bl	80004b4 <__aeabi_dadd>
 8005a5e:	0022      	movs	r2, r4
 8005a60:	002b      	movs	r3, r5
 8005a62:	f7fa fd27 	bl	80004b4 <__aeabi_dadd>
 8005a66:	9804      	ldr	r0, [sp, #16]
 8005a68:	0022      	movs	r2, r4
 8005a6a:	002b      	movs	r3, r5
 8005a6c:	0006      	movs	r6, r0
 8005a6e:	000f      	movs	r7, r1
 8005a70:	f7fb fefc 	bl	800186c <__aeabi_dsub>
 8005a74:	9a00      	ldr	r2, [sp, #0]
 8005a76:	9b01      	ldr	r3, [sp, #4]
 8005a78:	f7fb fef8 	bl	800186c <__aeabi_dsub>
 8005a7c:	9a08      	ldr	r2, [sp, #32]
 8005a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a80:	f7fb fef4 	bl	800186c <__aeabi_dsub>
 8005a84:	0002      	movs	r2, r0
 8005a86:	000b      	movs	r3, r1
 8005a88:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005a8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a8c:	e614      	b.n	80056b8 <__ieee754_pow+0x310>
 8005a8e:	2300      	movs	r3, #0
 8005a90:	4c03      	ldr	r4, [pc, #12]	; (8005aa0 <__ieee754_pow+0x6f8>)
 8005a92:	e61d      	b.n	80056d0 <__ieee754_pow+0x328>
 8005a94:	7ff00000 	.word	0x7ff00000
 8005a98:	43400000 	.word	0x43400000
 8005a9c:	fffffc01 	.word	0xfffffc01
 8005aa0:	3ff00000 	.word	0x3ff00000
 8005aa4:	0003988e 	.word	0x0003988e
 8005aa8:	000bb679 	.word	0x000bb679
 8005aac:	fff00000 	.word	0xfff00000
 8005ab0:	08006260 	.word	0x08006260
 8005ab4:	4a454eef 	.word	0x4a454eef
 8005ab8:	3fca7e28 	.word	0x3fca7e28
 8005abc:	93c9db65 	.word	0x93c9db65
 8005ac0:	3fcd864a 	.word	0x3fcd864a
 8005ac4:	a91d4101 	.word	0xa91d4101
 8005ac8:	3fd17460 	.word	0x3fd17460
 8005acc:	518f264d 	.word	0x518f264d
 8005ad0:	3fd55555 	.word	0x3fd55555
 8005ad4:	db6fabff 	.word	0xdb6fabff
 8005ad8:	3fdb6db6 	.word	0x3fdb6db6
 8005adc:	33333303 	.word	0x33333303
 8005ae0:	3fe33333 	.word	0x3fe33333
 8005ae4:	40080000 	.word	0x40080000
 8005ae8:	3feec709 	.word	0x3feec709
 8005aec:	dc3a03fd 	.word	0xdc3a03fd
 8005af0:	145b01f5 	.word	0x145b01f5
 8005af4:	be3e2fe0 	.word	0xbe3e2fe0
 8005af8:	08006280 	.word	0x08006280
 8005afc:	08006270 	.word	0x08006270
 8005b00:	4a8f      	ldr	r2, [pc, #572]	; (8005d40 <__ieee754_pow+0x998>)
 8005b02:	4b90      	ldr	r3, [pc, #576]	; (8005d44 <__ieee754_pow+0x99c>)
 8005b04:	9804      	ldr	r0, [sp, #16]
 8005b06:	9905      	ldr	r1, [sp, #20]
 8005b08:	f7fa fcd4 	bl	80004b4 <__aeabi_dadd>
 8005b0c:	0032      	movs	r2, r6
 8005b0e:	9002      	str	r0, [sp, #8]
 8005b10:	9103      	str	r1, [sp, #12]
 8005b12:	003b      	movs	r3, r7
 8005b14:	0028      	movs	r0, r5
 8005b16:	0021      	movs	r1, r4
 8005b18:	f7fb fea8 	bl	800186c <__aeabi_dsub>
 8005b1c:	0002      	movs	r2, r0
 8005b1e:	000b      	movs	r3, r1
 8005b20:	9802      	ldr	r0, [sp, #8]
 8005b22:	9903      	ldr	r1, [sp, #12]
 8005b24:	f7fa fc94 	bl	8000450 <__aeabi_dcmpgt>
 8005b28:	2800      	cmp	r0, #0
 8005b2a:	d000      	beq.n	8005b2e <__ieee754_pow+0x786>
 8005b2c:	e60b      	b.n	8005746 <__ieee754_pow+0x39e>
 8005b2e:	2100      	movs	r1, #0
 8005b30:	4a85      	ldr	r2, [pc, #532]	; (8005d48 <__ieee754_pow+0x9a0>)
 8005b32:	0063      	lsls	r3, r4, #1
 8005b34:	085b      	lsrs	r3, r3, #1
 8005b36:	9102      	str	r1, [sp, #8]
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	dd25      	ble.n	8005b88 <__ieee754_pow+0x7e0>
 8005b3c:	4a83      	ldr	r2, [pc, #524]	; (8005d4c <__ieee754_pow+0x9a4>)
 8005b3e:	151b      	asrs	r3, r3, #20
 8005b40:	189b      	adds	r3, r3, r2
 8005b42:	2280      	movs	r2, #128	; 0x80
 8005b44:	0352      	lsls	r2, r2, #13
 8005b46:	4694      	mov	ip, r2
 8005b48:	411a      	asrs	r2, r3
 8005b4a:	1914      	adds	r4, r2, r4
 8005b4c:	4b80      	ldr	r3, [pc, #512]	; (8005d50 <__ieee754_pow+0x9a8>)
 8005b4e:	0060      	lsls	r0, r4, #1
 8005b50:	4d80      	ldr	r5, [pc, #512]	; (8005d54 <__ieee754_pow+0x9ac>)
 8005b52:	0d40      	lsrs	r0, r0, #21
 8005b54:	18c0      	adds	r0, r0, r3
 8005b56:	4105      	asrs	r5, r0
 8005b58:	0021      	movs	r1, r4
 8005b5a:	43a9      	bics	r1, r5
 8005b5c:	000b      	movs	r3, r1
 8005b5e:	4661      	mov	r1, ip
 8005b60:	0324      	lsls	r4, r4, #12
 8005b62:	0b24      	lsrs	r4, r4, #12
 8005b64:	4321      	orrs	r1, r4
 8005b66:	2414      	movs	r4, #20
 8005b68:	1a20      	subs	r0, r4, r0
 8005b6a:	4101      	asrs	r1, r0
 8005b6c:	9102      	str	r1, [sp, #8]
 8005b6e:	9908      	ldr	r1, [sp, #32]
 8005b70:	2200      	movs	r2, #0
 8005b72:	2900      	cmp	r1, #0
 8005b74:	da02      	bge.n	8005b7c <__ieee754_pow+0x7d4>
 8005b76:	9902      	ldr	r1, [sp, #8]
 8005b78:	4249      	negs	r1, r1
 8005b7a:	9102      	str	r1, [sp, #8]
 8005b7c:	0030      	movs	r0, r6
 8005b7e:	0039      	movs	r1, r7
 8005b80:	f7fb fe74 	bl	800186c <__aeabi_dsub>
 8005b84:	9006      	str	r0, [sp, #24]
 8005b86:	9107      	str	r1, [sp, #28]
 8005b88:	9a04      	ldr	r2, [sp, #16]
 8005b8a:	9b05      	ldr	r3, [sp, #20]
 8005b8c:	9806      	ldr	r0, [sp, #24]
 8005b8e:	9907      	ldr	r1, [sp, #28]
 8005b90:	2600      	movs	r6, #0
 8005b92:	f7fa fc8f 	bl	80004b4 <__aeabi_dadd>
 8005b96:	2200      	movs	r2, #0
 8005b98:	0030      	movs	r0, r6
 8005b9a:	4b6f      	ldr	r3, [pc, #444]	; (8005d58 <__ieee754_pow+0x9b0>)
 8005b9c:	000f      	movs	r7, r1
 8005b9e:	f7fb fbf9 	bl	8001394 <__aeabi_dmul>
 8005ba2:	9a06      	ldr	r2, [sp, #24]
 8005ba4:	9b07      	ldr	r3, [sp, #28]
 8005ba6:	9008      	str	r0, [sp, #32]
 8005ba8:	9109      	str	r1, [sp, #36]	; 0x24
 8005baa:	0030      	movs	r0, r6
 8005bac:	0039      	movs	r1, r7
 8005bae:	f7fb fe5d 	bl	800186c <__aeabi_dsub>
 8005bb2:	0002      	movs	r2, r0
 8005bb4:	000b      	movs	r3, r1
 8005bb6:	9804      	ldr	r0, [sp, #16]
 8005bb8:	9905      	ldr	r1, [sp, #20]
 8005bba:	f7fb fe57 	bl	800186c <__aeabi_dsub>
 8005bbe:	4a67      	ldr	r2, [pc, #412]	; (8005d5c <__ieee754_pow+0x9b4>)
 8005bc0:	4b67      	ldr	r3, [pc, #412]	; (8005d60 <__ieee754_pow+0x9b8>)
 8005bc2:	f7fb fbe7 	bl	8001394 <__aeabi_dmul>
 8005bc6:	4a67      	ldr	r2, [pc, #412]	; (8005d64 <__ieee754_pow+0x9bc>)
 8005bc8:	0004      	movs	r4, r0
 8005bca:	000d      	movs	r5, r1
 8005bcc:	0030      	movs	r0, r6
 8005bce:	0039      	movs	r1, r7
 8005bd0:	4b65      	ldr	r3, [pc, #404]	; (8005d68 <__ieee754_pow+0x9c0>)
 8005bd2:	f7fb fbdf 	bl	8001394 <__aeabi_dmul>
 8005bd6:	0002      	movs	r2, r0
 8005bd8:	000b      	movs	r3, r1
 8005bda:	0020      	movs	r0, r4
 8005bdc:	0029      	movs	r1, r5
 8005bde:	f7fa fc69 	bl	80004b4 <__aeabi_dadd>
 8005be2:	0004      	movs	r4, r0
 8005be4:	000d      	movs	r5, r1
 8005be6:	0002      	movs	r2, r0
 8005be8:	000b      	movs	r3, r1
 8005bea:	9808      	ldr	r0, [sp, #32]
 8005bec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bee:	f7fa fc61 	bl	80004b4 <__aeabi_dadd>
 8005bf2:	9a08      	ldr	r2, [sp, #32]
 8005bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bf6:	0006      	movs	r6, r0
 8005bf8:	000f      	movs	r7, r1
 8005bfa:	f7fb fe37 	bl	800186c <__aeabi_dsub>
 8005bfe:	0002      	movs	r2, r0
 8005c00:	000b      	movs	r3, r1
 8005c02:	0020      	movs	r0, r4
 8005c04:	0029      	movs	r1, r5
 8005c06:	f7fb fe31 	bl	800186c <__aeabi_dsub>
 8005c0a:	0032      	movs	r2, r6
 8005c0c:	9004      	str	r0, [sp, #16]
 8005c0e:	9105      	str	r1, [sp, #20]
 8005c10:	003b      	movs	r3, r7
 8005c12:	0030      	movs	r0, r6
 8005c14:	0039      	movs	r1, r7
 8005c16:	f7fb fbbd 	bl	8001394 <__aeabi_dmul>
 8005c1a:	0004      	movs	r4, r0
 8005c1c:	000d      	movs	r5, r1
 8005c1e:	4a53      	ldr	r2, [pc, #332]	; (8005d6c <__ieee754_pow+0x9c4>)
 8005c20:	4b53      	ldr	r3, [pc, #332]	; (8005d70 <__ieee754_pow+0x9c8>)
 8005c22:	f7fb fbb7 	bl	8001394 <__aeabi_dmul>
 8005c26:	4a53      	ldr	r2, [pc, #332]	; (8005d74 <__ieee754_pow+0x9cc>)
 8005c28:	4b53      	ldr	r3, [pc, #332]	; (8005d78 <__ieee754_pow+0x9d0>)
 8005c2a:	f7fb fe1f 	bl	800186c <__aeabi_dsub>
 8005c2e:	0022      	movs	r2, r4
 8005c30:	002b      	movs	r3, r5
 8005c32:	f7fb fbaf 	bl	8001394 <__aeabi_dmul>
 8005c36:	4a51      	ldr	r2, [pc, #324]	; (8005d7c <__ieee754_pow+0x9d4>)
 8005c38:	4b51      	ldr	r3, [pc, #324]	; (8005d80 <__ieee754_pow+0x9d8>)
 8005c3a:	f7fa fc3b 	bl	80004b4 <__aeabi_dadd>
 8005c3e:	0022      	movs	r2, r4
 8005c40:	002b      	movs	r3, r5
 8005c42:	f7fb fba7 	bl	8001394 <__aeabi_dmul>
 8005c46:	4a4f      	ldr	r2, [pc, #316]	; (8005d84 <__ieee754_pow+0x9dc>)
 8005c48:	4b4f      	ldr	r3, [pc, #316]	; (8005d88 <__ieee754_pow+0x9e0>)
 8005c4a:	f7fb fe0f 	bl	800186c <__aeabi_dsub>
 8005c4e:	0022      	movs	r2, r4
 8005c50:	002b      	movs	r3, r5
 8005c52:	f7fb fb9f 	bl	8001394 <__aeabi_dmul>
 8005c56:	4a4d      	ldr	r2, [pc, #308]	; (8005d8c <__ieee754_pow+0x9e4>)
 8005c58:	4b4d      	ldr	r3, [pc, #308]	; (8005d90 <__ieee754_pow+0x9e8>)
 8005c5a:	f7fa fc2b 	bl	80004b4 <__aeabi_dadd>
 8005c5e:	0022      	movs	r2, r4
 8005c60:	002b      	movs	r3, r5
 8005c62:	f7fb fb97 	bl	8001394 <__aeabi_dmul>
 8005c66:	0002      	movs	r2, r0
 8005c68:	000b      	movs	r3, r1
 8005c6a:	0030      	movs	r0, r6
 8005c6c:	0039      	movs	r1, r7
 8005c6e:	f7fb fdfd 	bl	800186c <__aeabi_dsub>
 8005c72:	0004      	movs	r4, r0
 8005c74:	000d      	movs	r5, r1
 8005c76:	0002      	movs	r2, r0
 8005c78:	000b      	movs	r3, r1
 8005c7a:	0030      	movs	r0, r6
 8005c7c:	0039      	movs	r1, r7
 8005c7e:	f7fb fb89 	bl	8001394 <__aeabi_dmul>
 8005c82:	2380      	movs	r3, #128	; 0x80
 8005c84:	9006      	str	r0, [sp, #24]
 8005c86:	9107      	str	r1, [sp, #28]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	0020      	movs	r0, r4
 8005c8c:	0029      	movs	r1, r5
 8005c8e:	05db      	lsls	r3, r3, #23
 8005c90:	f7fb fdec 	bl	800186c <__aeabi_dsub>
 8005c94:	0002      	movs	r2, r0
 8005c96:	000b      	movs	r3, r1
 8005c98:	9806      	ldr	r0, [sp, #24]
 8005c9a:	9907      	ldr	r1, [sp, #28]
 8005c9c:	f7fa ff74 	bl	8000b88 <__aeabi_ddiv>
 8005ca0:	9a04      	ldr	r2, [sp, #16]
 8005ca2:	9b05      	ldr	r3, [sp, #20]
 8005ca4:	0004      	movs	r4, r0
 8005ca6:	000d      	movs	r5, r1
 8005ca8:	0030      	movs	r0, r6
 8005caa:	0039      	movs	r1, r7
 8005cac:	f7fb fb72 	bl	8001394 <__aeabi_dmul>
 8005cb0:	9a04      	ldr	r2, [sp, #16]
 8005cb2:	9b05      	ldr	r3, [sp, #20]
 8005cb4:	f7fa fbfe 	bl	80004b4 <__aeabi_dadd>
 8005cb8:	0002      	movs	r2, r0
 8005cba:	000b      	movs	r3, r1
 8005cbc:	0020      	movs	r0, r4
 8005cbe:	0029      	movs	r1, r5
 8005cc0:	f7fb fdd4 	bl	800186c <__aeabi_dsub>
 8005cc4:	0032      	movs	r2, r6
 8005cc6:	003b      	movs	r3, r7
 8005cc8:	f7fb fdd0 	bl	800186c <__aeabi_dsub>
 8005ccc:	0002      	movs	r2, r0
 8005cce:	000b      	movs	r3, r1
 8005cd0:	2000      	movs	r0, #0
 8005cd2:	4930      	ldr	r1, [pc, #192]	; (8005d94 <__ieee754_pow+0x9ec>)
 8005cd4:	f7fb fdca 	bl	800186c <__aeabi_dsub>
 8005cd8:	9b02      	ldr	r3, [sp, #8]
 8005cda:	051b      	lsls	r3, r3, #20
 8005cdc:	185b      	adds	r3, r3, r1
 8005cde:	151a      	asrs	r2, r3, #20
 8005ce0:	2a00      	cmp	r2, #0
 8005ce2:	dc26      	bgt.n	8005d32 <__ieee754_pow+0x98a>
 8005ce4:	9a02      	ldr	r2, [sp, #8]
 8005ce6:	f000 f9ad 	bl	8006044 <scalbn>
 8005cea:	9a00      	ldr	r2, [sp, #0]
 8005cec:	9b01      	ldr	r3, [sp, #4]
 8005cee:	f7ff fc2d 	bl	800554c <__ieee754_pow+0x1a4>
 8005cf2:	4a29      	ldr	r2, [pc, #164]	; (8005d98 <__ieee754_pow+0x9f0>)
 8005cf4:	004b      	lsls	r3, r1, #1
 8005cf6:	085b      	lsrs	r3, r3, #1
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	dc00      	bgt.n	8005cfe <__ieee754_pow+0x956>
 8005cfc:	e717      	b.n	8005b2e <__ieee754_pow+0x786>
 8005cfe:	4b27      	ldr	r3, [pc, #156]	; (8005d9c <__ieee754_pow+0x9f4>)
 8005d00:	18cb      	adds	r3, r1, r3
 8005d02:	4303      	orrs	r3, r0
 8005d04:	d009      	beq.n	8005d1a <__ieee754_pow+0x972>
 8005d06:	9800      	ldr	r0, [sp, #0]
 8005d08:	9901      	ldr	r1, [sp, #4]
 8005d0a:	4a25      	ldr	r2, [pc, #148]	; (8005da0 <__ieee754_pow+0x9f8>)
 8005d0c:	4b25      	ldr	r3, [pc, #148]	; (8005da4 <__ieee754_pow+0x9fc>)
 8005d0e:	f7fb fb41 	bl	8001394 <__aeabi_dmul>
 8005d12:	4a23      	ldr	r2, [pc, #140]	; (8005da0 <__ieee754_pow+0x9f8>)
 8005d14:	4b23      	ldr	r3, [pc, #140]	; (8005da4 <__ieee754_pow+0x9fc>)
 8005d16:	f7ff fc19 	bl	800554c <__ieee754_pow+0x1a4>
 8005d1a:	0032      	movs	r2, r6
 8005d1c:	003b      	movs	r3, r7
 8005d1e:	f7fb fda5 	bl	800186c <__aeabi_dsub>
 8005d22:	9a04      	ldr	r2, [sp, #16]
 8005d24:	9b05      	ldr	r3, [sp, #20]
 8005d26:	f7fa fb9d 	bl	8000464 <__aeabi_dcmpge>
 8005d2a:	2800      	cmp	r0, #0
 8005d2c:	d100      	bne.n	8005d30 <__ieee754_pow+0x988>
 8005d2e:	e6fe      	b.n	8005b2e <__ieee754_pow+0x786>
 8005d30:	e7e9      	b.n	8005d06 <__ieee754_pow+0x95e>
 8005d32:	0019      	movs	r1, r3
 8005d34:	e7d9      	b.n	8005cea <__ieee754_pow+0x942>
 8005d36:	2300      	movs	r3, #0
 8005d38:	4c16      	ldr	r4, [pc, #88]	; (8005d94 <__ieee754_pow+0x9ec>)
 8005d3a:	f7ff fbec 	bl	8005516 <__ieee754_pow+0x16e>
 8005d3e:	46c0      	nop			; (mov r8, r8)
 8005d40:	652b82fe 	.word	0x652b82fe
 8005d44:	3c971547 	.word	0x3c971547
 8005d48:	3fe00000 	.word	0x3fe00000
 8005d4c:	fffffc02 	.word	0xfffffc02
 8005d50:	fffffc01 	.word	0xfffffc01
 8005d54:	000fffff 	.word	0x000fffff
 8005d58:	3fe62e43 	.word	0x3fe62e43
 8005d5c:	fefa39ef 	.word	0xfefa39ef
 8005d60:	3fe62e42 	.word	0x3fe62e42
 8005d64:	0ca86c39 	.word	0x0ca86c39
 8005d68:	be205c61 	.word	0xbe205c61
 8005d6c:	72bea4d0 	.word	0x72bea4d0
 8005d70:	3e663769 	.word	0x3e663769
 8005d74:	c5d26bf1 	.word	0xc5d26bf1
 8005d78:	3ebbbd41 	.word	0x3ebbbd41
 8005d7c:	af25de2c 	.word	0xaf25de2c
 8005d80:	3f11566a 	.word	0x3f11566a
 8005d84:	16bebd93 	.word	0x16bebd93
 8005d88:	3f66c16c 	.word	0x3f66c16c
 8005d8c:	5555553e 	.word	0x5555553e
 8005d90:	3fc55555 	.word	0x3fc55555
 8005d94:	3ff00000 	.word	0x3ff00000
 8005d98:	4090cbff 	.word	0x4090cbff
 8005d9c:	3f6f3400 	.word	0x3f6f3400
 8005da0:	c2f8f359 	.word	0xc2f8f359
 8005da4:	01a56e1f 	.word	0x01a56e1f

08005da8 <__ieee754_sqrt>:
 8005da8:	4b56      	ldr	r3, [pc, #344]	; (8005f04 <__ieee754_sqrt+0x15c>)
 8005daa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dac:	0002      	movs	r2, r0
 8005dae:	0005      	movs	r5, r0
 8005db0:	0018      	movs	r0, r3
 8005db2:	000c      	movs	r4, r1
 8005db4:	b085      	sub	sp, #20
 8005db6:	4008      	ands	r0, r1
 8005db8:	4298      	cmp	r0, r3
 8005dba:	d10f      	bne.n	8005ddc <__ieee754_sqrt+0x34>
 8005dbc:	000b      	movs	r3, r1
 8005dbe:	0028      	movs	r0, r5
 8005dc0:	f7fb fae8 	bl	8001394 <__aeabi_dmul>
 8005dc4:	0002      	movs	r2, r0
 8005dc6:	000b      	movs	r3, r1
 8005dc8:	0028      	movs	r0, r5
 8005dca:	0021      	movs	r1, r4
 8005dcc:	f7fa fb72 	bl	80004b4 <__aeabi_dadd>
 8005dd0:	0005      	movs	r5, r0
 8005dd2:	000c      	movs	r4, r1
 8005dd4:	0028      	movs	r0, r5
 8005dd6:	0021      	movs	r1, r4
 8005dd8:	b005      	add	sp, #20
 8005dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ddc:	2900      	cmp	r1, #0
 8005dde:	dc10      	bgt.n	8005e02 <__ieee754_sqrt+0x5a>
 8005de0:	004b      	lsls	r3, r1, #1
 8005de2:	085b      	lsrs	r3, r3, #1
 8005de4:	432b      	orrs	r3, r5
 8005de6:	d0f5      	beq.n	8005dd4 <__ieee754_sqrt+0x2c>
 8005de8:	2000      	movs	r0, #0
 8005dea:	4281      	cmp	r1, r0
 8005dec:	d100      	bne.n	8005df0 <__ieee754_sqrt+0x48>
 8005dee:	e080      	b.n	8005ef2 <__ieee754_sqrt+0x14a>
 8005df0:	000b      	movs	r3, r1
 8005df2:	0028      	movs	r0, r5
 8005df4:	f7fb fd3a 	bl	800186c <__aeabi_dsub>
 8005df8:	0002      	movs	r2, r0
 8005dfa:	000b      	movs	r3, r1
 8005dfc:	f7fa fec4 	bl	8000b88 <__aeabi_ddiv>
 8005e00:	e7e6      	b.n	8005dd0 <__ieee754_sqrt+0x28>
 8005e02:	1508      	asrs	r0, r1, #20
 8005e04:	d075      	beq.n	8005ef2 <__ieee754_sqrt+0x14a>
 8005e06:	4b40      	ldr	r3, [pc, #256]	; (8005f08 <__ieee754_sqrt+0x160>)
 8005e08:	0309      	lsls	r1, r1, #12
 8005e0a:	18c4      	adds	r4, r0, r3
 8005e0c:	2380      	movs	r3, #128	; 0x80
 8005e0e:	0b09      	lsrs	r1, r1, #12
 8005e10:	035b      	lsls	r3, r3, #13
 8005e12:	4319      	orrs	r1, r3
 8005e14:	07c3      	lsls	r3, r0, #31
 8005e16:	d403      	bmi.n	8005e20 <__ieee754_sqrt+0x78>
 8005e18:	0fd3      	lsrs	r3, r2, #31
 8005e1a:	0049      	lsls	r1, r1, #1
 8005e1c:	18c9      	adds	r1, r1, r3
 8005e1e:	0052      	lsls	r2, r2, #1
 8005e20:	1063      	asrs	r3, r4, #1
 8005e22:	2400      	movs	r4, #0
 8005e24:	0049      	lsls	r1, r1, #1
 8005e26:	9303      	str	r3, [sp, #12]
 8005e28:	0fd3      	lsrs	r3, r2, #31
 8005e2a:	18cb      	adds	r3, r1, r3
 8005e2c:	2180      	movs	r1, #128	; 0x80
 8005e2e:	2516      	movs	r5, #22
 8005e30:	0020      	movs	r0, r4
 8005e32:	0052      	lsls	r2, r2, #1
 8005e34:	0389      	lsls	r1, r1, #14
 8005e36:	1846      	adds	r6, r0, r1
 8005e38:	429e      	cmp	r6, r3
 8005e3a:	dc02      	bgt.n	8005e42 <__ieee754_sqrt+0x9a>
 8005e3c:	1870      	adds	r0, r6, r1
 8005e3e:	1b9b      	subs	r3, r3, r6
 8005e40:	1864      	adds	r4, r4, r1
 8005e42:	0fd6      	lsrs	r6, r2, #31
 8005e44:	005b      	lsls	r3, r3, #1
 8005e46:	3d01      	subs	r5, #1
 8005e48:	18f3      	adds	r3, r6, r3
 8005e4a:	0052      	lsls	r2, r2, #1
 8005e4c:	0849      	lsrs	r1, r1, #1
 8005e4e:	2d00      	cmp	r5, #0
 8005e50:	d1f1      	bne.n	8005e36 <__ieee754_sqrt+0x8e>
 8005e52:	2620      	movs	r6, #32
 8005e54:	2780      	movs	r7, #128	; 0x80
 8005e56:	0029      	movs	r1, r5
 8005e58:	9601      	str	r6, [sp, #4]
 8005e5a:	063f      	lsls	r7, r7, #24
 8005e5c:	197e      	adds	r6, r7, r5
 8005e5e:	46b4      	mov	ip, r6
 8005e60:	4283      	cmp	r3, r0
 8005e62:	dc02      	bgt.n	8005e6a <__ieee754_sqrt+0xc2>
 8005e64:	d114      	bne.n	8005e90 <__ieee754_sqrt+0xe8>
 8005e66:	4296      	cmp	r6, r2
 8005e68:	d812      	bhi.n	8005e90 <__ieee754_sqrt+0xe8>
 8005e6a:	4665      	mov	r5, ip
 8005e6c:	4666      	mov	r6, ip
 8005e6e:	19ed      	adds	r5, r5, r7
 8005e70:	9002      	str	r0, [sp, #8]
 8005e72:	2e00      	cmp	r6, #0
 8005e74:	da03      	bge.n	8005e7e <__ieee754_sqrt+0xd6>
 8005e76:	43ee      	mvns	r6, r5
 8005e78:	0ff6      	lsrs	r6, r6, #31
 8005e7a:	1986      	adds	r6, r0, r6
 8005e7c:	9602      	str	r6, [sp, #8]
 8005e7e:	1a1b      	subs	r3, r3, r0
 8005e80:	4562      	cmp	r2, ip
 8005e82:	4180      	sbcs	r0, r0
 8005e84:	4240      	negs	r0, r0
 8005e86:	1a1b      	subs	r3, r3, r0
 8005e88:	4660      	mov	r0, ip
 8005e8a:	1a12      	subs	r2, r2, r0
 8005e8c:	9802      	ldr	r0, [sp, #8]
 8005e8e:	19c9      	adds	r1, r1, r7
 8005e90:	0fd6      	lsrs	r6, r2, #31
 8005e92:	005b      	lsls	r3, r3, #1
 8005e94:	18f3      	adds	r3, r6, r3
 8005e96:	9e01      	ldr	r6, [sp, #4]
 8005e98:	0052      	lsls	r2, r2, #1
 8005e9a:	3e01      	subs	r6, #1
 8005e9c:	087f      	lsrs	r7, r7, #1
 8005e9e:	9601      	str	r6, [sp, #4]
 8005ea0:	2e00      	cmp	r6, #0
 8005ea2:	d1db      	bne.n	8005e5c <__ieee754_sqrt+0xb4>
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	d003      	beq.n	8005eb0 <__ieee754_sqrt+0x108>
 8005ea8:	1c4b      	adds	r3, r1, #1
 8005eaa:	d127      	bne.n	8005efc <__ieee754_sqrt+0x154>
 8005eac:	0031      	movs	r1, r6
 8005eae:	3401      	adds	r4, #1
 8005eb0:	4b16      	ldr	r3, [pc, #88]	; (8005f0c <__ieee754_sqrt+0x164>)
 8005eb2:	1060      	asrs	r0, r4, #1
 8005eb4:	18c0      	adds	r0, r0, r3
 8005eb6:	0849      	lsrs	r1, r1, #1
 8005eb8:	07e3      	lsls	r3, r4, #31
 8005eba:	d502      	bpl.n	8005ec2 <__ieee754_sqrt+0x11a>
 8005ebc:	2380      	movs	r3, #128	; 0x80
 8005ebe:	061b      	lsls	r3, r3, #24
 8005ec0:	4319      	orrs	r1, r3
 8005ec2:	9b03      	ldr	r3, [sp, #12]
 8005ec4:	000d      	movs	r5, r1
 8005ec6:	051c      	lsls	r4, r3, #20
 8005ec8:	1823      	adds	r3, r4, r0
 8005eca:	001c      	movs	r4, r3
 8005ecc:	e782      	b.n	8005dd4 <__ieee754_sqrt+0x2c>
 8005ece:	0ad1      	lsrs	r1, r2, #11
 8005ed0:	3b15      	subs	r3, #21
 8005ed2:	0552      	lsls	r2, r2, #21
 8005ed4:	2900      	cmp	r1, #0
 8005ed6:	d0fa      	beq.n	8005ece <__ieee754_sqrt+0x126>
 8005ed8:	2480      	movs	r4, #128	; 0x80
 8005eda:	0364      	lsls	r4, r4, #13
 8005edc:	4221      	tst	r1, r4
 8005ede:	d00a      	beq.n	8005ef6 <__ieee754_sqrt+0x14e>
 8005ee0:	2420      	movs	r4, #32
 8005ee2:	0016      	movs	r6, r2
 8005ee4:	1a24      	subs	r4, r4, r0
 8005ee6:	40e6      	lsrs	r6, r4
 8005ee8:	1e45      	subs	r5, r0, #1
 8005eea:	4082      	lsls	r2, r0
 8005eec:	4331      	orrs	r1, r6
 8005eee:	1b58      	subs	r0, r3, r5
 8005ef0:	e789      	b.n	8005e06 <__ieee754_sqrt+0x5e>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	e7ee      	b.n	8005ed4 <__ieee754_sqrt+0x12c>
 8005ef6:	0049      	lsls	r1, r1, #1
 8005ef8:	3001      	adds	r0, #1
 8005efa:	e7ef      	b.n	8005edc <__ieee754_sqrt+0x134>
 8005efc:	2301      	movs	r3, #1
 8005efe:	3101      	adds	r1, #1
 8005f00:	4399      	bics	r1, r3
 8005f02:	e7d5      	b.n	8005eb0 <__ieee754_sqrt+0x108>
 8005f04:	7ff00000 	.word	0x7ff00000
 8005f08:	fffffc01 	.word	0xfffffc01
 8005f0c:	3fe00000 	.word	0x3fe00000

08005f10 <fabs>:
 8005f10:	004b      	lsls	r3, r1, #1
 8005f12:	0859      	lsrs	r1, r3, #1
 8005f14:	4770      	bx	lr
	...

08005f18 <finite>:
 8005f18:	4b02      	ldr	r3, [pc, #8]	; (8005f24 <finite+0xc>)
 8005f1a:	0048      	lsls	r0, r1, #1
 8005f1c:	0840      	lsrs	r0, r0, #1
 8005f1e:	18c0      	adds	r0, r0, r3
 8005f20:	0fc0      	lsrs	r0, r0, #31
 8005f22:	4770      	bx	lr
 8005f24:	80100000 	.word	0x80100000

08005f28 <nan>:
 8005f28:	2000      	movs	r0, #0
 8005f2a:	4901      	ldr	r1, [pc, #4]	; (8005f30 <nan+0x8>)
 8005f2c:	4770      	bx	lr
 8005f2e:	46c0      	nop			; (mov r8, r8)
 8005f30:	7ff80000 	.word	0x7ff80000

08005f34 <rint>:
 8005f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f36:	004a      	lsls	r2, r1, #1
 8005f38:	4e3e      	ldr	r6, [pc, #248]	; (8006034 <rint+0x100>)
 8005f3a:	0d52      	lsrs	r2, r2, #21
 8005f3c:	b085      	sub	sp, #20
 8005f3e:	1996      	adds	r6, r2, r6
 8005f40:	000d      	movs	r5, r1
 8005f42:	0003      	movs	r3, r0
 8005f44:	9101      	str	r1, [sp, #4]
 8005f46:	0fcc      	lsrs	r4, r1, #31
 8005f48:	2e13      	cmp	r6, #19
 8005f4a:	dc57      	bgt.n	8005ffc <rint+0xc8>
 8005f4c:	2e00      	cmp	r6, #0
 8005f4e:	da2a      	bge.n	8005fa6 <rint+0x72>
 8005f50:	004a      	lsls	r2, r1, #1
 8005f52:	0852      	lsrs	r2, r2, #1
 8005f54:	4302      	orrs	r2, r0
 8005f56:	d024      	beq.n	8005fa2 <rint+0x6e>
 8005f58:	030a      	lsls	r2, r1, #12
 8005f5a:	0b12      	lsrs	r2, r2, #12
 8005f5c:	4302      	orrs	r2, r0
 8005f5e:	4253      	negs	r3, r2
 8005f60:	4313      	orrs	r3, r2
 8005f62:	2280      	movs	r2, #128	; 0x80
 8005f64:	0c4d      	lsrs	r5, r1, #17
 8005f66:	0312      	lsls	r2, r2, #12
 8005f68:	0b1b      	lsrs	r3, r3, #12
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	046d      	lsls	r5, r5, #17
 8005f6e:	432b      	orrs	r3, r5
 8005f70:	0019      	movs	r1, r3
 8005f72:	4b31      	ldr	r3, [pc, #196]	; (8006038 <rint+0x104>)
 8005f74:	00e2      	lsls	r2, r4, #3
 8005f76:	189b      	adds	r3, r3, r2
 8005f78:	681e      	ldr	r6, [r3, #0]
 8005f7a:	685f      	ldr	r7, [r3, #4]
 8005f7c:	0002      	movs	r2, r0
 8005f7e:	000b      	movs	r3, r1
 8005f80:	0030      	movs	r0, r6
 8005f82:	0039      	movs	r1, r7
 8005f84:	f7fa fa96 	bl	80004b4 <__aeabi_dadd>
 8005f88:	9002      	str	r0, [sp, #8]
 8005f8a:	9103      	str	r1, [sp, #12]
 8005f8c:	9802      	ldr	r0, [sp, #8]
 8005f8e:	9903      	ldr	r1, [sp, #12]
 8005f90:	003b      	movs	r3, r7
 8005f92:	0032      	movs	r2, r6
 8005f94:	f7fb fc6a 	bl	800186c <__aeabi_dsub>
 8005f98:	004b      	lsls	r3, r1, #1
 8005f9a:	085b      	lsrs	r3, r3, #1
 8005f9c:	07e4      	lsls	r4, r4, #31
 8005f9e:	4323      	orrs	r3, r4
 8005fa0:	0019      	movs	r1, r3
 8005fa2:	b005      	add	sp, #20
 8005fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fa6:	4a25      	ldr	r2, [pc, #148]	; (800603c <rint+0x108>)
 8005fa8:	4132      	asrs	r2, r6
 8005faa:	0017      	movs	r7, r2
 8005fac:	400f      	ands	r7, r1
 8005fae:	4307      	orrs	r7, r0
 8005fb0:	d0f7      	beq.n	8005fa2 <rint+0x6e>
 8005fb2:	0852      	lsrs	r2, r2, #1
 8005fb4:	0011      	movs	r1, r2
 8005fb6:	4029      	ands	r1, r5
 8005fb8:	430b      	orrs	r3, r1
 8005fba:	d00a      	beq.n	8005fd2 <rint+0x9e>
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	2e13      	cmp	r6, #19
 8005fc0:	d101      	bne.n	8005fc6 <rint+0x92>
 8005fc2:	2380      	movs	r3, #128	; 0x80
 8005fc4:	061b      	lsls	r3, r3, #24
 8005fc6:	2780      	movs	r7, #128	; 0x80
 8005fc8:	02ff      	lsls	r7, r7, #11
 8005fca:	4137      	asrs	r7, r6
 8005fcc:	4395      	bics	r5, r2
 8005fce:	432f      	orrs	r7, r5
 8005fd0:	9701      	str	r7, [sp, #4]
 8005fd2:	9901      	ldr	r1, [sp, #4]
 8005fd4:	001a      	movs	r2, r3
 8005fd6:	000b      	movs	r3, r1
 8005fd8:	4917      	ldr	r1, [pc, #92]	; (8006038 <rint+0x104>)
 8005fda:	00e4      	lsls	r4, r4, #3
 8005fdc:	190c      	adds	r4, r1, r4
 8005fde:	6865      	ldr	r5, [r4, #4]
 8005fe0:	6824      	ldr	r4, [r4, #0]
 8005fe2:	0020      	movs	r0, r4
 8005fe4:	0029      	movs	r1, r5
 8005fe6:	f7fa fa65 	bl	80004b4 <__aeabi_dadd>
 8005fea:	9002      	str	r0, [sp, #8]
 8005fec:	9103      	str	r1, [sp, #12]
 8005fee:	9802      	ldr	r0, [sp, #8]
 8005ff0:	9903      	ldr	r1, [sp, #12]
 8005ff2:	0022      	movs	r2, r4
 8005ff4:	002b      	movs	r3, r5
 8005ff6:	f7fb fc39 	bl	800186c <__aeabi_dsub>
 8005ffa:	e7d2      	b.n	8005fa2 <rint+0x6e>
 8005ffc:	2e33      	cmp	r6, #51	; 0x33
 8005ffe:	dd08      	ble.n	8006012 <rint+0xde>
 8006000:	2380      	movs	r3, #128	; 0x80
 8006002:	00db      	lsls	r3, r3, #3
 8006004:	429e      	cmp	r6, r3
 8006006:	d1cc      	bne.n	8005fa2 <rint+0x6e>
 8006008:	0002      	movs	r2, r0
 800600a:	000b      	movs	r3, r1
 800600c:	f7fa fa52 	bl	80004b4 <__aeabi_dadd>
 8006010:	e7c7      	b.n	8005fa2 <rint+0x6e>
 8006012:	2601      	movs	r6, #1
 8006014:	4d0a      	ldr	r5, [pc, #40]	; (8006040 <rint+0x10c>)
 8006016:	4276      	negs	r6, r6
 8006018:	1952      	adds	r2, r2, r5
 800601a:	40d6      	lsrs	r6, r2
 800601c:	4206      	tst	r6, r0
 800601e:	d0c0      	beq.n	8005fa2 <rint+0x6e>
 8006020:	0876      	lsrs	r6, r6, #1
 8006022:	4206      	tst	r6, r0
 8006024:	d0d5      	beq.n	8005fd2 <rint+0x9e>
 8006026:	2180      	movs	r1, #128	; 0x80
 8006028:	05c9      	lsls	r1, r1, #23
 800602a:	4111      	asrs	r1, r2
 800602c:	43b3      	bics	r3, r6
 800602e:	430b      	orrs	r3, r1
 8006030:	e7cf      	b.n	8005fd2 <rint+0x9e>
 8006032:	46c0      	nop			; (mov r8, r8)
 8006034:	fffffc01 	.word	0xfffffc01
 8006038:	08006290 	.word	0x08006290
 800603c:	000fffff 	.word	0x000fffff
 8006040:	fffffbed 	.word	0xfffffbed

08006044 <scalbn>:
 8006044:	004b      	lsls	r3, r1, #1
 8006046:	b570      	push	{r4, r5, r6, lr}
 8006048:	0d5b      	lsrs	r3, r3, #21
 800604a:	0014      	movs	r4, r2
 800604c:	000a      	movs	r2, r1
 800604e:	2b00      	cmp	r3, #0
 8006050:	d10d      	bne.n	800606e <scalbn+0x2a>
 8006052:	004b      	lsls	r3, r1, #1
 8006054:	085b      	lsrs	r3, r3, #1
 8006056:	4303      	orrs	r3, r0
 8006058:	d010      	beq.n	800607c <scalbn+0x38>
 800605a:	4b27      	ldr	r3, [pc, #156]	; (80060f8 <scalbn+0xb4>)
 800605c:	2200      	movs	r2, #0
 800605e:	f7fb f999 	bl	8001394 <__aeabi_dmul>
 8006062:	4b26      	ldr	r3, [pc, #152]	; (80060fc <scalbn+0xb8>)
 8006064:	429c      	cmp	r4, r3
 8006066:	da0a      	bge.n	800607e <scalbn+0x3a>
 8006068:	4a25      	ldr	r2, [pc, #148]	; (8006100 <scalbn+0xbc>)
 800606a:	4b26      	ldr	r3, [pc, #152]	; (8006104 <scalbn+0xc0>)
 800606c:	e019      	b.n	80060a2 <scalbn+0x5e>
 800606e:	4d26      	ldr	r5, [pc, #152]	; (8006108 <scalbn+0xc4>)
 8006070:	42ab      	cmp	r3, r5
 8006072:	d108      	bne.n	8006086 <scalbn+0x42>
 8006074:	0002      	movs	r2, r0
 8006076:	000b      	movs	r3, r1
 8006078:	f7fa fa1c 	bl	80004b4 <__aeabi_dadd>
 800607c:	bd70      	pop	{r4, r5, r6, pc}
 800607e:	000a      	movs	r2, r1
 8006080:	004b      	lsls	r3, r1, #1
 8006082:	0d5b      	lsrs	r3, r3, #21
 8006084:	3b36      	subs	r3, #54	; 0x36
 8006086:	4d21      	ldr	r5, [pc, #132]	; (800610c <scalbn+0xc8>)
 8006088:	18e3      	adds	r3, r4, r3
 800608a:	42ab      	cmp	r3, r5
 800608c:	dd0c      	ble.n	80060a8 <scalbn+0x64>
 800608e:	4c20      	ldr	r4, [pc, #128]	; (8006110 <scalbn+0xcc>)
 8006090:	4d20      	ldr	r5, [pc, #128]	; (8006114 <scalbn+0xd0>)
 8006092:	2900      	cmp	r1, #0
 8006094:	da01      	bge.n	800609a <scalbn+0x56>
 8006096:	4c1e      	ldr	r4, [pc, #120]	; (8006110 <scalbn+0xcc>)
 8006098:	4d1f      	ldr	r5, [pc, #124]	; (8006118 <scalbn+0xd4>)
 800609a:	0020      	movs	r0, r4
 800609c:	0029      	movs	r1, r5
 800609e:	4a1c      	ldr	r2, [pc, #112]	; (8006110 <scalbn+0xcc>)
 80060a0:	4b1c      	ldr	r3, [pc, #112]	; (8006114 <scalbn+0xd0>)
 80060a2:	f7fb f977 	bl	8001394 <__aeabi_dmul>
 80060a6:	e7e9      	b.n	800607c <scalbn+0x38>
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	dd05      	ble.n	80060b8 <scalbn+0x74>
 80060ac:	4c1b      	ldr	r4, [pc, #108]	; (800611c <scalbn+0xd8>)
 80060ae:	051b      	lsls	r3, r3, #20
 80060b0:	4022      	ands	r2, r4
 80060b2:	431a      	orrs	r2, r3
 80060b4:	0011      	movs	r1, r2
 80060b6:	e7e1      	b.n	800607c <scalbn+0x38>
 80060b8:	001d      	movs	r5, r3
 80060ba:	3535      	adds	r5, #53	; 0x35
 80060bc:	da13      	bge.n	80060e6 <scalbn+0xa2>
 80060be:	4a18      	ldr	r2, [pc, #96]	; (8006120 <scalbn+0xdc>)
 80060c0:	0fcb      	lsrs	r3, r1, #31
 80060c2:	4294      	cmp	r4, r2
 80060c4:	dd08      	ble.n	80060d8 <scalbn+0x94>
 80060c6:	4812      	ldr	r0, [pc, #72]	; (8006110 <scalbn+0xcc>)
 80060c8:	4912      	ldr	r1, [pc, #72]	; (8006114 <scalbn+0xd0>)
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d001      	beq.n	80060d2 <scalbn+0x8e>
 80060ce:	4810      	ldr	r0, [pc, #64]	; (8006110 <scalbn+0xcc>)
 80060d0:	4911      	ldr	r1, [pc, #68]	; (8006118 <scalbn+0xd4>)
 80060d2:	4a0f      	ldr	r2, [pc, #60]	; (8006110 <scalbn+0xcc>)
 80060d4:	4b0f      	ldr	r3, [pc, #60]	; (8006114 <scalbn+0xd0>)
 80060d6:	e7e4      	b.n	80060a2 <scalbn+0x5e>
 80060d8:	4809      	ldr	r0, [pc, #36]	; (8006100 <scalbn+0xbc>)
 80060da:	490a      	ldr	r1, [pc, #40]	; (8006104 <scalbn+0xc0>)
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d0c3      	beq.n	8006068 <scalbn+0x24>
 80060e0:	4807      	ldr	r0, [pc, #28]	; (8006100 <scalbn+0xbc>)
 80060e2:	4910      	ldr	r1, [pc, #64]	; (8006124 <scalbn+0xe0>)
 80060e4:	e7c0      	b.n	8006068 <scalbn+0x24>
 80060e6:	4c0d      	ldr	r4, [pc, #52]	; (800611c <scalbn+0xd8>)
 80060e8:	3336      	adds	r3, #54	; 0x36
 80060ea:	4022      	ands	r2, r4
 80060ec:	051b      	lsls	r3, r3, #20
 80060ee:	4313      	orrs	r3, r2
 80060f0:	0019      	movs	r1, r3
 80060f2:	2200      	movs	r2, #0
 80060f4:	4b0c      	ldr	r3, [pc, #48]	; (8006128 <scalbn+0xe4>)
 80060f6:	e7d4      	b.n	80060a2 <scalbn+0x5e>
 80060f8:	43500000 	.word	0x43500000
 80060fc:	ffff3cb0 	.word	0xffff3cb0
 8006100:	c2f8f359 	.word	0xc2f8f359
 8006104:	01a56e1f 	.word	0x01a56e1f
 8006108:	000007ff 	.word	0x000007ff
 800610c:	000007fe 	.word	0x000007fe
 8006110:	8800759c 	.word	0x8800759c
 8006114:	7e37e43c 	.word	0x7e37e43c
 8006118:	fe37e43c 	.word	0xfe37e43c
 800611c:	800fffff 	.word	0x800fffff
 8006120:	0000c350 	.word	0x0000c350
 8006124:	81a56e1f 	.word	0x81a56e1f
 8006128:	3c900000 	.word	0x3c900000

0800612c <_init>:
 800612c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800612e:	46c0      	nop			; (mov r8, r8)
 8006130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006132:	bc08      	pop	{r3}
 8006134:	469e      	mov	lr, r3
 8006136:	4770      	bx	lr

08006138 <_fini>:
 8006138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800613a:	46c0      	nop			; (mov r8, r8)
 800613c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800613e:	bc08      	pop	{r3}
 8006140:	469e      	mov	lr, r3
 8006142:	4770      	bx	lr
